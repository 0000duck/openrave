// -*- coding: utf-8 -*-

/** 
\en 

\page installation Building and Installing

%OpenRAVE uses <a href="http://www.cmake.org/">CMake</a>, which can create the correct build systems files for a variety of system configurations. Refer to the pages below for specific systems:

\ja 

\page installation インストール方法

%OpenRAVEは様々なユーザーのPCの構成にあった正しいビルドシステムを生成するために<a href="http://www.cmake.org/">CMake</a>を使っています．それぞれのユーザー仕様に合った以下のページを参照してください．:

\~ 
- \subpage installation_linux
- \subpage installation_win
- \subpage installation_macosx

\en  \section installation_cmake CMake Options
\ja \section installation_cmake CMakeを行う際のオプション設定について

\en
The root Makefile creates a \c build directory and calls cmake with a set of options. All compiled object files are stored in \c build. There are many cmake options that control how %OpenRAVE is built. Once %OpenRAVE is built, most of them can be set by executing

\verbatim
ccmake build
\endverbatim

in the root sources folder. It is also possible to call cmake from the command line with a new set of options:

\verbatim
cd build; cmake -DCMAKE_INSTALL_PREFIX=/my/new/install/dir -DCMAKE_BUILD_TYPE=Debug ..
\endverbatim

- <b>Video Recording</b> To disable ffmpeg video recording, find the \c OPT_VIDEORECORDING option and turn it to \c
OFF. It is possible to set these options during the cmake build time by executing cmake yourself
\verbatim
cmake -DOPT_VIDEORECORDING=OFF ..
\endverbatim

- <b>Double Precision</b> To compile %OpenRAVE with <b>double precision</b> (ie all dReal types become \b doubles), set \c OPT_DOUBLE_PRECISION to \c ON during cmake. For example:
\verbatim
cmake -DOPT_DOUBLE_PRECISION=ON ..
\endverbatim

- <b>Static Libraries</b> To also build static libraries of openrave use the \c OPT_STATIC option. Plugins will still be linked dynamically.
\verbatim
cmake -DOPT_STATIC=ON ..
\endverbatim

- <b>Plugin Compilation</b> It is possible to only compile the core and skip the plugins using the \c OPT_PLUGINS option.
\verbatim
cmake -DOPT_PLUGINS=OFF ..
\endverbatim


\ja

%OpenRAVEをどのようにビルドするかを制御するたくさんのcmakeオプションがあります．
ソースコードをダウンロードしたフォルダで，以下のコマンドを実行することによってそれらのオプションをGUIを使って設定することができます．


オプションを設定するもう１つの方法としては，cmakeコマンドを使って変更する方法があります．（実際Makefileの中身を見るとcmakeコマンドを呼び出して各デフォルトのオプションを設定していることがわかります）

- <b>録画</b> 具体的にはbuildのディレクトリに移動し，cmakeのコマンドの後に変更したいオプションの設定を追加し実行します．例えば，ffmpegの録画を無効にするために，\c OPT_VIDEORECORDINGオプションを\c OFFにするには，以下のようにします．

\verbatim
cmake -DOPT_VIDEORECORDING=OFF ..
\endverbatim

- <b>精度設定</b>：倍精度でコンパイルするには，\c OPT_DOUBLE_PRECISIONのオプションを\c ONにします．

\verbatim
cmake -DOPT_DOUBLE_PRECISION=ON ..
\endverbatim

- <b>静的ライブラリ</b>：静的なライブラリも構築するには \c OPT_STATICを使用します．プラグインは変わらず動的なライブラリにリンクされます．
\verbatim
cmake -DOPT_STATIC=ON ..
\endverbatim

- <b>プラグイン生成</b>：\c OPT_PLUGINSをOFFにするとプラグインのコンパイルをしません．
\verbatim
cmake -DOPT_PLUGINS=OFF ..
\endverbatim

\en \section install_structure Install Directory Structure

- bin
 - \ref p_basic_usage "openrave" - Start a simple environment and attach the default viewer, collision checkers, physics
   engines, and servers.
 - \openrave_py{<b>openrave.py</b>} - Start a simple environment through \openravepy{openravepy}. Allows
   access to all openrave functionality including database generation and examples.
 - \ref openrave_config - configuration file that helps users find the %OpenRAVE installation.
 - \ref openrave-hash.py - Query the body and robot hashes.
- include
 - rave - Directory for all public %OpenRAVE header files.
- lib
 - \b libopenrave (.so, .a, .dll, .lib) - Library that all plugins should link to offering the \ref interfaces.
 - \b libopenrave-core (.so, .a, .dll, .lib) - Library that allows any application to start the %OpenRAVE core internally.
- share
 - openrave
  - cppexamples - All C++ examples
   - \b CMakeLists.txt - The <a href="http://www.cmake.org/">cmake</a> file used to compile all the examples.
  - data - Loadable %OpenRAVE environment and object files.
  - matlab - All Matlab scripting functions and examples. Include this directory into the MATLAB path.
  - models - 3D model resources
  - octave - All Octave scripting functions and examples. Include this directory into the OCTAVE_PATH.
  - plugins - Plugins compiled by the %OpenRAVE main distribution.
  - openravepy - Python bindings, database generators, and examples. Directory structure is explained \openrave_py_dir{here}.
  - robots - Robot XML files usually containing just a \c \<robot\> or \c \<kinbody\> tag.

\ja \section install_structure インストールディレクトリの構造

- bin
 - \ref p_basic_usage "openrave" - 環境ビューワ，干渉検知，物理エンジン，サービスを起動するための実行ファイル
 - \openrave_py{<b>openrave.py</b>} - \openravepy{openravepy}を通じて，環境を起動するための実行ファイル．データーベース生成，実行例を含む全てのopenrave機能を使用できます．
 - \ref openrave_config - 環境設定ファイル
 - \ref openrave-hash.py - 物体とロボットハッシュの計算。
- include
 - rave - 全てのヘッダファイルのためのディレクトリ
- lib
 - \b libopenrave (.so, .a, .dll, .lib) - 提供されている\ref interfacesにリンクした全てのプラグインライブラリ
 - \b libopenrave-core (.so, .a, .dll, .lib) - 内部で%OpenRAVEコアを起動することを許可されたアプリケーションのライブラリ
- share
 - openrave
  - cppexamples - 全てのC++実行例
   - \b CMakeLists.txt - 全ての実行例をコンパイルするための<a href="http://www.cmake.org/">cmake</a>ファイル
  - data - %OpenRAVE環境に呼び出し可能な環境と物体のデータファイル
  - models - 3Dモデルのデータ（例えばCADのデータ）
  - matlab - 全てのMatlabスクリプトと実行例．このスクリプトを実行するためにMATLABのパスにこのディレクトリを追加する必要があります．
  - octave - 全てのOctaveスクリプトと実行例．このスクリプトを実行するためにOCTAVEのパスにこのディレクトリを追加する必要があります．
  - plugins - コンパイルされたプラグイン
  - openravepy - Pythonと連動した，データベース生成器や実行例．ディレクトリ構造の詳細は\openrave_py_dir{ここ}をご参照ください．
  - robots - \c \<robot\> or \c \<kinbody\> を含む，ロボットXMLファイル


*/

/** 
\en  \page installation_linux Building and Installing on Linux

Download the sources from \sourcesdownload{sourceforge}.

\verbatim
svn co https://openrave.svn.sourceforge.net/svnroot/openrave/trunk openrave
\endverbatim

%OpenRAVE works only with qt4! Before compiling SoQt or %OpenRAVE make sure to remove any qt3 related dev packages like \c qt3-dev-tools or \c libqt3-headers.

If there are compilation errors with templates, might have to use gcc version 4.1 or greater. You can check your version of gcc by <tt>gcc --version</tt>
 
\ja \page installation_linux Linuxユーザーのためのインストール方法

最新のソースコードは\sourcesdownload{sourceforge}から入手できます．まずは以下のコマンドを入力しソースコードをダウンロードしてください．

\verbatim
svn co https://openrave.svn.sourceforge.net/svnroot/openrave/trunk openrave
\endverbatim

%OpenRAVEはqt4でのみ動作します．SoQtまたは%OpenRAVEをコンパイルする前に\c qt3-dev-tools や \c libqt3-headers のような，全てのqt3に関連するパッケージを削除してください．

もし通常の手順にしたがってコンパイルしたのにエラーが発生した場合，それはgccのバージョンが旧い為かもしれません．gccのバージョンはver. 4.1もしくはそれ以上のものを使用してください．あなたのPC環境でのgccのバージョンは<tt>gcc --version</tt>で確認することができます．

\en  \section ilinux_package Installing from Package Manager

\ja \section ilinux_package 必要なパッケージのインストール

%OpenRAVEはいくつかの標準パッケージを使用して開発されています．あなたのPC環境に合わせてパッケージマネージャから必要なパッケージをインストールしてください．

\en \subsection ilinux_ubuntu804 Ubuntu 8.04 or earlier
\ja \subsection ilinux_ubuntu804 Ubuntu 8.04 もしくはそれ以前

\~ \verbatim
sudo apt-get install g++ cmake libqt4-dev qt4-dev-tools ffmpeg libavcodec-dev libavformat-dev libxvidcore-dev libx264-dev libfaac-dev libogg-dev libvorbis-dev libdc1394-dev liblame-dev libgsm1-dev libboost-dev libboost-regex-dev libxml2-dev libglew-dev  libboost-graph-dev libboost-wave-dev libboost-serialization-dev libboost-filesystem-dev libpcre3-dev libboost-thread-dev
\endverbatim

\~ \subsection ilinux_ubuntu810 Ubuntu 8.10

\verbatim
sudo apt-get install g++ cmake libqt4-dev qt4-dev-tools ffmpeg libavcodec-dev libavformat-dev libxvidcore4-dev libx264-dev libfaac-dev libogg-dev libvorbis-dev libdc1394-22-dev libgsm1-dev libboost-dev libboost-regex-dev libxml2-dev libglew1.5-dev libsoqt4-dev libboost-graph-dev libode0-dev libboost-wave-dev libboost-serialization-dev libboost-filesystem-dev libpcre3-dev libboost-thread-dev
\endverbatim

\en
The \b avcodec library in Ubuntu 8.10 has removed all mpeg encoders due to legal issues, this means
that %OpenRAVE recording will always fail with a <b>codec not found</b> message. To get it working,
please install the \b libavformat-unstripped-52 and \b libavcodec-unstripped-51
packages. Unfortunately, these packages cannot coexist with the dev packages, so you should first
compile openrave with the normal \b libavcodec-dev and \b libavformat-dev packages, and then
switch to the unstripped versions when recording.

\ja
%OpenRAVEはそのシミュレーション動画を録画する機能をもっています．しかしUbuntu 8.10以降，法的な問題で<b>avcodec</b>から全てのmpegエンコーダが削除されました．これは録画機能を使おうとすると，常に<b>codec not found</b>というエラーメッセージが発生することを意味しています．これを避けるため，<b>libavformat-unstripped-52</b>と<b>libavcodec-unstripped-51</b>のパッケージをインストールしてください．

残念ながら，これらのパッケージはdevパッケージと共存することができません．このため始めに通常の<b>libavcodec-dev</b>と<b>libavformat-dev</b>で%OpenRAVEのコンパイルを行い，その後録画機能をお使いの際にunstrippedバージョンに切り替えてください．

\~ \subsection ilinux_ubuntu9 Ubuntu 9.x

\verbatim
sudo apt-get install g++ cmake libqt4-dev qt4-dev-tools ffmpeg libavcodec-dev libavformat-dev libxvidcore4-dev libfaac-dev libogg-dev libvorbis-dev libdc1394-22-dev libgsm1-dev libboost-dev libboost-regex-dev libxml2-dev libsoqt4-dev libboost-graph-dev libode0-dev libboost-wave-dev libboost-serialization-dev libboost-filesystem-dev libpcre3-dev libboost-thread-dev libswscale-dev
\endverbatim

\en \subsection ilinux_fedora Fedora Core Users

Might need to add the livna yum repository for ffmpeg. To install the necessary packages type

\verbatim
sudo yum install qt4-devel Coin2-devel glew-devel gsm-devel x264 x264-devel ffmpeg-devel libdc1394-devel libtheora-devel libmp4v2-devel ode-devel boost-devel cmake
\endverbatim

Be careful if installing \b soqt-devel from the package manager, it may be compiled with the wrong version of Qt. If compiling SoQt from sources, check \c QTDIR and make sure it points to the correct version.

\ja \subsection ilinux_fedora Fedoraユーザ

ffmpegのためにlivna yumレポジトリを追加する必要があるかもしれません．必要なパッケージをインストールするには以下のコマンドを実行してください．

\verbatim
sudo yum install qt4-devel Coin2-devel glew-devel gsm-devel x264 x264-devel ffmpeg-devel libdc1394-devel libtheora-devel libmp4v2-devel ode-devel boost-devel cmake
\endverbatim

パッケージマネージャから<b>soqt-develをインストールする場合には，間違ったバージョンのQtをコンパイルするかもしれませんので注意してください．</b>もしソースファイルからSoQtをコンパイルする場合には，\c QTDIR と正しいバージョンであることを確認してください．

\en \section ilinux_libraries Necessary libraries for Old Linux Distros

(Only install these libraries from sources if not in package manager.

\ja \section ilinux_libraries 旧Linuxに必要なライブラリ

（パッケージマネージャにない場合のみ，これらのライブラリをソースからインストールしてください．

\~
- \b <a href="http://www.boost.org/users/download/">boost</a>
- \b <a href="http://www.coin3d.org">Coin3d</a>
- \b <a href="ftp://ftp.coin3d.org/pub/snapshots/SoQt-latest.tar.gz">SoQt</a>
\en
 - <b>x86-64 users:</b> SoQt might give a compilation error in SoQtComponent.cpp. To fix it, go into \c src/Inventor/Qt/SoQtComponent.cpp:103 and replace <tt>unsigned long key</tt> with <tt>SbDict::Key key</tt>.
\ja
 - <b>x86-64ユーザ：</b> SoQtはSoQtComponent.cppでコンパイルエラーを起こすかもしれません．これを修正するため，\c src/Inventor/Qt/SoQtComponent.cppファイルの<tt>unsigned long key</tt>を<tt>SbDict::Key key</tt>に置換してください．

\en \section ilinux_collisionphysics Collision Checkers and Physics Simulators

Although %OpenRAVE is not tied to any particular collision checker, it requires at least one is installed to get basic functions. Here are the following libraries that have %OpenRAVE plugins:

- <a href="http://www.ode.org">ODE Collision/Physics</a> - install from sources 0.8-0.10.1 tested to work.  It is possible to compile ODE with double precision.
 - For 0.10.1, configuring with \c --enable-new-trimesh option will randomly crash openrave, so use at your own risk.
 - If not using enable-new-trimesh, disabling asserts (via \c --disable-asserts) is necessary due to some weird bug in normalization bug.
 - For 0.10+. If installing on x86-64 distro, configure ODE with \c --enable-shared.

- <a href="http://www.bulletphysics.com">Bullet Collision</a> (use v2.74 or greater) - Need to install to a system directory so %OpenRAVE can find it using \c pkg-config. If using autotools \c configure, need to remove \c install-sh before running \c autogen.sh. The command lines become:
\verbatim
rm install-sh
./autogen.sh
./configure
make
make install
\endverbatim
 Bullet is detected using \c pkg-config, so \c bullet.pc is needed.

- <a href="http://www.cs.unc.edu/~geom/SSV/">PQP Collision</a> - source code separate inside \b pqprave plugin.

\ja \section ilinux_collisionphysics 干渉検知と物理シミュレータ

%OpenRAVEは特定の干渉検知器と提携しているわけではありませんが，基本的な機能のために少なくとも１つの干渉検知器を必要とします．ここに%OpenRAVEのプラグインをもつ以下のライブラリを紹介します．

- <a href="http://www.ode.org">ODE Collision/Physics</a> - ver. 0.8-0.10.1が動作検証済みです．ODEは倍精度でコンパイルすることができます．
 - 0.10.1において\c --enable-new-trimesh のオプションを指定すると不規則に%OpenRAVEが動作を停止することが報告されています．このため，その危険性を承知して使用してください．
 - もしenable-new-trimeshオプションを使用しない場合，奇妙なバグのためにassertsを無効にする（\c --disable-asserts）ことが必要です．
 - 0.10以上のバージョンでx86-64のディストリビューションにインストールする場合，ODEの構成を\c --enable-sharedにしてください．

- <a href="http://www.bulletphysics.com">Bullet Collision</a> (v2.74以上) - システムディレクトリにインストールすることが必要です．そうすれば%OpenRAVEは\c pkg-configで見つけることができます．もし\c configureの自動ツールを使っている場合，\c autogen.shを実行する前に\c install-shを削除する必要があります．コマンドラインでは以下のようになります．</br>

\verbatim
rm install-sh
./autogen.sh
./configure
make
make install
\endverbatim
 Bulletのインストールは\c pkg-configで認識されているから，\c bullet.pcが必要です．

- <a href="http://www.cs.unc.edu/~geom/SSV/">PQP</a> - ソースコードは内部の\b pqpraveプラグインに含まれています．

\en \section ilinux_python Python

In order to use the python bindings through the \openravepy{openravepy} module, install  the following packages before compiling %OpenRAVE:

\verbatim
sudo apt-get install libboost-python-dev python python-dev python-numpy python-scipy python-imaging-tk
\endverbatim

To setup the python path in bash add the following line:

\verbatim
export PYTHONPATH=$PYTHONPATH:`openrave-config --python-dir`
\endverbatim

\ja \section ilinux_python Python

\openravepy{openravepy}を利用するために%OpenRAVEをコンパイルする前に以下のパッケージをインストールしてください．

\verbatim
sudo apt-get install libboost-python-dev python python-dev python-numpy python-scipy python-imaging-tk
\endverbatim

Pythonパスを設定するために，bashファイルに以下の行を追加してください．

\verbatim
export PYTHONPATH=$PYTHONPATH:`openrave-config --python-dir`
\endverbatim

\en \section ilinux_octavematlab Octave/Matlab

Both <a href="http://www.gnu.org/software/octave/">Octave</a> and Matlab are supported and the
%OpenRAVE build system automatically detects and compiles the mex files for each.

Octave users:
- Make sure \c mkoctfile is in your path. If installing octave from the package managers, also install the <b>octave headers</b> package.
- Add \c $OPENRAVE_INSTALL/share/openrave/octave to OCTAVE_PATH (default is \c /usr/local/share/openrave/octave).

Matlab users:
- make sure \c mex is in the system path
- Add \c $OPENRAVE_INSTALL/share/openrave/matlab to the Matlab path (default is \c /usr/local/share/openrave/matlab).

\ja \section ilinux_octavematlab Octave/Matlab

<a href="http://www.gnu.org/software/octave/">Octave</a> と Matlab は共にサポートされています．%OpenRAVEのビルドシステムはOctave/Matlabを自動的に検出し，それぞれのmexファイルをコンパイルします．

Octave ユーザー:
- \c mkoctfile があなたの環境パスにあることを確認してください．Octaveをパッケージマネージャからインストールする場合は，<b>octave headers</b>パッケージもインストールしてください．
- OCTAVE_PATH （デフォルトは \c /usr/local/share/openrave/octave）に\c $OPENRAVE_INSTALL/share/openrave/octave を追加してください．

Matlab ユーザー:
- \c mex がシステムパスにあることを確認してください．
- Matlabのパス（デフォルトは\c /usr/local/share/openrave/matlab）に\c $OPENRAVE_INSTALL/share/openrave/matlab を追加してください．

\en \section ilinux_building Building OpenRAVE

After all necessary libraries have been installed, it is time to finally build and install %OpenRAVE. In the root openrave folder type

\verbatim
make
\endverbatim

This will compile all files. To install the files type

\verbatim
make install
\endverbatim

Currently the default install directory is \c /usr/local. To choose a different install directory, type

\verbatim
make prefix=/my/new/dir
\endverbatim

In case libraries are added after the initial install of %OpenRAVE, remove the cmake cached files using:

\verbatim
rm build/CMakeCache.txt
\endverbatim

If the cached files are not removed, the new system settings will not be noticed.

\ja \section ilinux_building OpenRAVEのインストール

全ての必要なライブラリがインストールされたら，ついに%OpenRAVEをインストールです．%OpenRAVEのソースファイルをダウンロードしたフォルダに移動し，以下を入力してください．

このコマンドは全てのファイルをコンパイルします．それが終了した後，それらのファイルをインストールするには次のコマンドを入力してください．

\verbatim
make install
\endverbatim

現在のデフォルトのインストール先は\c /usr/localです．異なるインストール先を指定したい場合は，以下のオプションと共にmakeを実行してください．

\verbatim
make prefix=/my/new/dir
\endverbatim

最初のインストールの後，ライブラリが追加された場合，cmakeがキャッシュされたファイルを以下のように削除してください．もしキャッシュファイルが削除されない場合，新しいシステム設定は反映されません．

\verbatim
rm build/CMakeCache.txt
\endverbatim

\en \section ilinux_bash Bash Shell

Can enable automatic completion of several openrave programs like \c openrave.py by sourcing the \c openravebash file. Add this to your \c ~./.bashrc file:

\ja \section ilinux_bash Bashシェル
タブでOpenRAVEプログラムのコマンドを補完したり，bashでの最適なOpenRAVE環境を入れるのに以下のコマンドを\c ~/.bashrcファイルにいれてください．

\~
\verbatim
source `openrave-config --prefix`/share/openrave/openravebash
\endverbatim

*/

/** 
\en
\page installation_win Building and Installing on Windows


<b>NOTE:</b> Only Windows XP has been tested. Windows 7 and others have been reported to work, but might need to modify the executable properties to <b>windows95 compatibility mode</b> after the executable has been built.

\section iwin_octavematlab Installation of 3rd Party Software

Download the sources from \sourcesdownload{sourceforge} (<a
href="http://tortoisesvn.tigris.org/">Tortoise SVN</a> is recommended). The subversion url is:

\verbatim
https://openrave.svn.sourceforge.net/svnroot/openrave/trunk
\endverbatim

Check out the openrave sources <b>in a path whose directories do not contain spaces</b>!!!. For example \c C:\\openrave.

A lot of the 3rd party libraries like boost 1.39 are already inside the openrave sources. However, the following need to be installed:

- <a href="http://www.cmake.org/cmake/resources/software.html">CMake</a>.
- <a href="http://python.org/download">Python 2.6</a>, <a href="http://sourceforge.net/projects/numpy/files">numpy superpack</a>, <a href="http://www.pythonware.com/products/pil">Python Imaging Library (PIL)</a> for openravepy python bindings.
 - \b openravepy will not compile in Debug mode unless the Python debug libraries are also installed.
 - <a href="http://ipython.scipy.org">IPython</a> is recommended for python development.
 - <a href="http://sourceforge.net/projects/scipy/files/">SciPy</a> - the scientific library for Python is recommended (necessary for some of the examples).

\subsection iwin_octavematlab Octave/Matlab

Both <a href="http://www.gnu.org/software/octave/">Octave</a> and Matlab are supported and the
%OpenRAVE build system automatically detects and compiles the mex files for each.

- If using Octave, make sure to add the path to \c mkoctfile to the $Path environment variable. If
  you are using Matlab, make sure that the path to \c mex is in the PATH environment variable (ie,
  typing \c mex on the command line gives the MATLAB compiler). On Windows Mik-Tex overwrites the
  \c mex program with its own version, so any matlab paths have to be declared before Mik-Tex in
  the PATH variable. You can check if the paths are set correctly by starting up the command prompt
  and typing \c mkoctfile or \c mex.


Octave users:
- Make sure \c mkoctfile is in your system path.
- If you having problems with the JVM, try installing octave using gnuplot (rather than jhandles). 
- Compiling mex files should use the same compiler as was used to build the Octave package. As of October 2008, the official Octave binaries are compiled with Visual Studio 2005 (freely available).
- Add \c $OPENRAVE_INSTALL\\share\\openrave\\octave to the Octave path (default is <tt>C:\\Program Files\\openrave\\share\\openrave\\octave</tt>).

Matlab users:
- make sure \c mex is in your path and actually points to the Matlab \c mex program.
- Add \c $OPENRAVE_INSTALL\\share\\openrave\\matlab to the Matlab path (default is <tt>C:\\Program Files\\openrave\\share\\openrave\\matlab</tt>).

\section iwin_building Building OpenRAVE
 
Run \c runcmake_win.bat, which will auto-detect your compiler system. This will extract \c
msvc_files.tgz and create a \c build directory to full the compiled objects. Open the Microsoft
Visual Studio solution file from \c build\\openrave.sln and select the \b Release or \b
RelWithDebInfo configuration, and build everything. Once done, build the INSTALL project. This
should install everything in <tt>C:\\Program Files\\openrave</tt>. The installation directory can be
changed by manually calling \c cmake with <tt>-DCMAKE_INSTALL_PREFIX="my/new/install/dir"</tt>.

Before running anything, have to modify the following environment variables:
- \c PYTHONPATH - add <tt>"C:\\Program Files\\openrave\\share\\openrave"</tt>
- \c Path - add <tt>"C:\\Program Files\\openrave\\bin"</tt> to the front. Be very careful when putting it in the back since several user have had problems with different Qt libraries conflicting!

Currently <b>bullet physics</b> is not setup to compile with %OpenRAVE, so don't try to get it
working. %OpenRAVE will run just fine without it.

\section iwin_updating Updating Subversion

Whenever updating subversion, it should just be sufficient to run \c runcmake_win.bat again and
then open the solution file build all the projects, and then manually build the INSTALL project. If
an update to libraries or programs happens (for example Octave/MATLAB/python was
installed/uninstalled), it is recommended to clear the cmake cache by first removing
\c build\\CMakeCache.txt before running \c runcmake_win.bat.

\ja
\page installation_win Windowsユーザーのためのインストール方法


<b>注意：</b> 現在はWindows XPのみサポートしています．

\section iwin_thirdparty 第三者ソフトウェアのインストール

ソースコードを\sourcesdownload{sourceforge}からダウンロードしてください．（subversionのソフトウェアとしては<a href="http://tortoisesvn.tigris.org/">Tortoise SVN</a>がお勧めです．）ソースコードをチェックアウトするディレクトリには<b>スペースを含めないように注意してください</b>．例えば\c C:\\openraveのように指定してください．

boost1.39のような多くの第三者ライブラリは既にopenraveのソースに含まれています．しかし，以下のものはインストールが必要です．

- <a href="http://www.cmake.org/cmake/resources/software.html">CMake</a>.
- <a href="http://python.org/download">Python 2.6</a>, <a href="http://sourceforge.net/projects/numpy/files">numpy superpack</a>, <a href="http://www.pythonware.com/products/pil">Python Imaging Library (PIL)</a> openravepy用
 - Pythonデバッグライブラリもインストールされないと，<b>openravepy</b>はデバッグモードでコンパイルされません．
 - <a href="http://ipython.scipy.org">IPython</a> がPythonスクリプトでの開発には推奨されます．
 - <a href="http://sourceforge.net/projects/scipy/files/">SciPy</a> - 科学，工学のためのpython用ライブラリ（いくつかの実行例を試すには必要です）

\subsection iwin_octavematlab Octave/Matlab

<a href="http://www.gnu.org/software/octave/">Octave</a> と Matlab は共にサポートされています．%OpenRAVEのビルドシステムはOctave/Matlabを自動的に検出し，それぞれのmexファイルをコンパイルします．

- WindowsではMik-Texはmexプログラムを自身のバージョンで上書きします．そのためパス変数の中の全てのmatlabパスはMik-Texの前に宣言されていなければなりません．パスが正しく設定されているかどうかは起動後，\c mkoctfileか\c mexと入力することで確認できます．</br>

Octave ユーザー:
- \c mkoctfile があなたの環境パスにあることを確認してください．
- JVMで問題が合った場合は，gbuplotのoctaveをインストールしてみてください．
- mexファイルをコンパイルするにはOctaveパッケージをコンパイルした時と同じコンパイラを使わなければなりません．
- OCTAVE_PATH （デフォルトは<tt>C:\\Program Files\\openrave\\share\\openrave\\octave</tt>）に\c $OPENRAVE_INSTALL\\share\\openrave\\octaveを追加してください．

Matlab ユーザー:
- \c mex がパスにあることを確認してください．
- Matlabのパス（デフォルトは<tt>C:\\Program Files\\openrave\\share\\openrave\\matlab</tt>）に\c $OPENRAVE_INSTALL\\share\\openrave\\matlabを追加してください．

\section iwin_building OpenRAVEのビルドとインストール

\c runcmake_win.batを実行してください．これはあなたの環境にあるコンパイラを自動で検出して実行します．そして，\c msvc_files.tgzを展開し，コンパイルされたオブジェクトを\c buildに生成します．\c build\\openrave.slnでMicrosoft Visual Studioのソリューションファイルを開き<b>Release</b>か<b>RelWithDebInfo</b>設定を選択して全てをビルドします．それが終了したらINSTALLプロジェクトをビルドします．これは全てを<tt>C:\\Program Files\\openrave</tt>にインストールします．インストール先のディレクトリは\c cmake with <tt>-DCMAKE_INSTALL_PREFIX="my/new/install/dir"</tt>を行うことで手動で変更可能です．

OpenRAVEを実行する前に，以下の環境変数を変更する必要があります．
- \c PYTHONPATH - <tt>C:\\Program Files\\openrave\\share\\openrave</tt>を追加してください．
- \c Path - <tt>C:\\Program Files\\openrave\\bin</tt>を今ある全てのパス設定の前に追加してください．後に追加すると異なるQtライブラリと衝突する問題が報告されていますので注意してください．

現在，<b>bullet physics</b>は%OpenRAVEにセットアップされませんので注意してください．

\section iwin_updating Subversionの更新

subversionを更新したときには常に\c runcmake_win.batを再度実行し，Solution Fileを開いて全てのプロジェクトをビルドして，INSTALLプロジェクトを手動でビルドする必要があります．ライブラリが更新される，もしくはプログラムが更新される（例えばOctave/Matlab/Pythonが追加/削除される）場合は，\c runcmake_win.batを実行する前にはじめに\c build\\CMakeCache.txtを削除しcmakeのキャッシュを空にしてください．


*/

/**
\en
\page installation_macosx Building and Installing on Mac OSX

First execute this command:

\verbatim
sudo port install cmake boost libxml2 glew octave
\endverbatim

It is necessary to install these libraries:

- <a href="http://trolltech.com/developer/downloads/qt/mac">Qt</a> - download the installer. Users have reported problems with using <b>port install qt4-mac</b> due to Cocoa. It is highly recommended to use the official qt4 installer package.
- <a href="http://www.coin3d.org/lib/coin">Coin3D</a> - build from sources
- <a href="http://www.coin3d.org/lib/soqt">SoQt</a> - build from sources. Might ask you to set QTDIR to the correct directory.
- ffmpeg and other video recording codecs

After this, follow the instructions on \ref installation_linux.

\ja
\page installation_macosx Mac OSXユーザーのためのインストール方法

はじめに以下のコマンドを実行してください．

\verbatim
sudo port install cmake boost libxml2 glew octave
\endverbatim

以下のライブラリのインストールが必要です．

- <a href="http://trolltech.com/developer/downloads/qt/mac">Qt</a> - インストーラーをダウンロードしてください．以下のコマンドを使用することもできますが，１〜２時間かかるかもしれません．
\verbatim
port install qt4-mac
\endverbatim
- <a href="http://www.coin3d.org/lib/coin">Coin3D</a> - インストーラーをダウンロードしてください． 
- <a href="http://www.coin3d.org/lib/soqt">SoQt</a> - <a href="http://ftp.coin3d.org/coin/src/snapshots/SoQt-latest.tar.gz">ここ</a>から最新版のソースファイルをダウンロードしてください．QTDIRを正しいディレクトリに設定するように言われるかもしれません．
- ffmpeg と 他のビデオ録画用のコーデック

この後は．\ref installation_linuxに従ってください．


*/
