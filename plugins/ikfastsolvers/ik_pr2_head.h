/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-10-27 21:26:08.746191
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 2; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 6; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, __dummy__;
    x0=IKcos(j[0]);
    x1=IKsin(j[1]);
    x2=((0.121380000000000)*(x1));
    x3=IKcos(j[1]);
    x4=((0.0494500000000000)*(x3));
    x5=((0.0680000000000000)+(x2)+(x4));
    x6=IKsin(j[0]);
    x7=((0.999801572239199)*(x3));
    x8=((0.00408346724546153)*(x1));
    x9=((x7)+(((-1.00000000000000)*(x8))));
    eetrans[0]=((-0.0170700000000000)+(((x0)*(x5)))+(((-0.0313600000000000)*(x6))));
    eetrans[1]=((((x5)*(x6)))+(((0.0313600000000000)*(x0))));
    eetrans[2]=((0.381450000000000)+(((-0.0494500000000000)*(x1)))+(((0.121380000000000)*(x3))));
    eerot[0]=((((x0)*(x9)))+(((-0.0194972162957103)*(x6))));
    eerot[1]=((((0.0194972162957103)*(x0)))+(((x6)*(x9))));
    eerot[2]=((((-0.00408346724546153)*(x3)))+(((-0.999801572239199)*(x1))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_px=((0.0170700000000000)+(px));
    new_py=py;
    new_pz=((-0.381450000000000)+(pz));
    px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        IKReal op[6+1], zeror[6];
        int numroots;
        IKReal j0evalpoly[3];
        IKReal x0=(pz)*(pz);
        IKReal x1=(py)*(py)*(py)*(py);
        IKReal x2=(pz)*(pz)*(pz);
        IKReal x3=(py)*(py);
        IKReal x4=(px)*(px)*(px)*(px)*(px);
        IKReal x5=(px)*(px)*(px)*(px)*(px)*(px);
        IKReal x6=(px)*(px)*(px);
        IKReal x7=(px)*(px)*(px)*(px);
        IKReal x8=(px)*(px)*(px)*(px)*(px)*(px)*(px);
        IKReal x9=(px)*(px);
        IKReal x10=(pz)*(pz)*(pz)*(pz);
        IKReal x11=(py)*(py)*(py);
        IKReal x12=(px)*(px)*(px)*(px)*(px)*(px)*(px)*(px);
        IKReal x13=(py)*(py)*(py)*(py)*(py)*(py);
        IKReal x14=(py)*(py)*(py)*(py)*(py);
        IKReal x15=(pz)*(pz)*(pz)*(pz)*(pz);
        IKReal x16=(pz)*(pz)*(pz)*(pz)*(pz)*(pz);
        IKReal x17=(pz)*(pz)*(pz)*(pz)*(pz)*(pz)*(pz);
        op[0]=((((1.66945708854010e-5)*(x0)*(x1)*(x3)*(x9)))+(((1.66945708854010e-5)*(x0)*(x4)*(x6)))+(((5.00837126562029e-5)*(px)*(x0)*(x3)*(x4)))+(((5.00837126562029e-5)*(px)*(x0)*(x1)*(x6))));
        op[1]=((((-2.27218783354434e-6)*(x0)*(x1)*(x6)))+(((0.00817504204919667)*(pz)*(x0)*(x4)*(x9)))+(((0.0163500840983933)*(pz)*(x0)*(x3)*(x4)))+(((-2.02964556391116e-6)*(px)*(py)*(x0)*(x4)))+(((-2.02964556391116e-6)*(py)*(x0)*(x1)*(x9)))+(((-2.27218783354434e-6)*(x0)*(x4)*(x9)))+(((-4.54437566708868e-6)*(x0)*(x3)*(x4)))+(((0.00817504204919667)*(pz)*(x0)*(x1)*(x6)))+(((-4.05929112782233e-6)*(px)*(py)*(x0)*(x3)*(x6))));
        op[2]=((((1.69869352049355e-7)*(x0)*(x1)*(x9)))+(((1.08134159682963e-7)*(px)*(x0)*(x4)))+(((2.76031796691918e-7)*(py)*(x0)*(x3)*(x6)))+(((-0.000555902859345374)*(pz)*(x0)*(x1)*(x9)))+(((-0.00111265100555185)*(px)*(pz)*(x0)*(x3)*(x6)))+(((-8.34601618304622e-5)*(px)*(x0)*(x3)*(x4)))+(((2.76031796691918e-7)*(py)*(x0)*(x4)))+(((2.00158820987056)*(px)*(x10)*(x3)*(x6)))+(((2.78003511732319e-7)*(px)*(x0)*(x3)*(x6)))+(((-3.33764491742593e-5)*(x0)*(x4)*(x6)))+(((-0.000993882259318745)*(py)*(pz)*(x0)*(x4)))+(((-1.67072634819437e-5)*(x0)*(x1)*(x3)*(x9)))+(((1.00079411762788)*(px)*(x10)*(x4)))+(((-6.67909761381466e-5)*(px)*(x0)*(x1)*(x6)))+(((-0.000993882259318745)*(py)*(pz)*(x0)*(x3)*(x6)))+(((1.00079409224268)*(x1)*(x10)*(x9)))+(((-0.000556748146206478)*(px)*(pz)*(x0)*(x4))));
        op[3]=((((-1.12685832808146e-8)*(py)*(x0)*(x3)*(x9)))+(((4.06083423261036e-6)*(px)*(py)*(x0)*(x3)*(x6)))+(((6.75839936336746e-5)*(px)*(py)*(pz)*(x0)*(x6)))+(((-0.121671728883183)*(px)*(py)*(x10)*(x6)))+(((-0.121671728883183)*(py)*(x10)*(x3)*(x9)))+(((-4.18208344084592e-9)*(x0)*(x4)))+(((-1.12685832808146e-8)*(px)*(py)*(x0)*(x6)))+(((-0.000103482308659323)*(x10)*(x4)))+(((-0.0163500840983933)*(pz)*(x0)*(x3)*(x4)))+(((6.21534456694058e-6)*(pz)*(x10)*(x4)))+(((6.75839936336746e-5)*(py)*(pz)*(x0)*(x3)*(x9)))+(((-0.0163438687538264)*(pz)*(x0)*(x4)*(x9)))+(((2.03041711630518e-6)*(py)*(x0)*(x1)*(x9)))+(((4.54092262463152e-6)*(x0)*(x4)*(x9)))+(((1.50925501125789e-5)*(pz)*(x0)*(x4)))+(((6.90411632167569e-9)*(x0)*(x1)*(x6)))+(((-6.21534456694058e-6)*(pz)*(x10)*(x3)*(x6)))+(((-1.26099972708042e-8)*(x0)*(x3)*(x6)))+(((4.54782674095320e-6)*(x0)*(x3)*(x4)))+(((-0.000103478856273063)*(x10)*(x3)*(x6)))+(((4.54381629696786e-5)*(pz)*(x0)*(x3)*(x6)))+(((2.03041711630518e-6)*(px)*(py)*(x0)*(x4)))+(((-6.21534456694089e-6)*(pz)*(x0)*(x1)*(x6))));
        op[4]=((((0.00111222804079273)*(px)*(pz)*(x0)*(x4)))+(((-2.16291787471054e-7)*(px)*(x0)*(x3)*(x6)))+(((1.56133019660196e-10)*(px)*(x0)*(x6)))+(((0.00555553349309094)*(x10)*(x3)*(x9)))+(((4.22643430551960e-7)*(pz)*(x10)*(x3)*(x9)))+(((-3.08588647549240e-6)*(pz)*(x0)*(x3)*(x9)))+(((-1.04931125586109e-10)*(py)*(x10)*(x6)))+(((5.00456421040478e-5)*(px)*(x0)*(x3)*(x4)))+(((-1.85282809700341e-7)*(px)*(x0)*(x4)))+(((-2.00082733592737)*(px)*(x10)*(x4)))+(((4.22643430551960e-7)*(pz)*(x0)*(x1)*(x9)))+(((1.66818807013493e-5)*(x0)*(x4)*(x6)))+(((4.42899948233025e-10)*(x0)*(x3)*(x9)))+(((0.00184060342729482)*(px)*(x10)*(x6)))+(((-1.02160037870495e-6)*(px)*(pz)*(x0)*(x6)))+(((-4.22964759119327e-7)*(px)*(pz)*(x10)*(x6)))+(((0.00111349597108439)*(px)*(pz)*(x0)*(x3)*(x6)))+(((3.77815836509514e-7)*(py)*(pz)*(x10)*(x6)))+(((-2.09862251172198e-10)*(py)*(x0)*(x3)*(x6)))+(((3.33764564117322e-5)*(px)*(x0)*(x1)*(x6)))+(((-9.27441701371049e-8)*(x0)*(x1)*(x9)))+(((0.000760886633368339)*(px)*(x0)*(x10)*(x6)))+(((-2.76241658943091e-7)*(py)*(x0)*(x4)))+(((3.77815836509462e-7)*(py)*(pz)*(x0)*(x3)*(x6)))+(((-9.22318383358953e-7)*(py)*(pz)*(x0)*(x6)))+(((-0.000760886628543357)*(x0)*(x10)*(x3)*(x9)))+(((-2.00158823524610)*(px)*(x10)*(x3)*(x6)))+(((1.26950090336747e-8)*(x0)*(x1)*(x3)*(x9)))+(((-0.000760873933534323)*(x1)*(x10)*(x9)))+(((2.56156298287350e-10)*(py)*(x0)*(x6)))+(((0.000994260075155254)*(py)*(pz)*(x0)*(x4))));
        op[5]=((((-0.000112910828619411)*(py)*(x10)*(x9)))+(((-7.71552394015510e-10)*(py)*(x0)*(x1)*(x9)))+(((-2.56914768826470e-8)*(py)*(pz)*(x10)*(x9)))+(((-1.50982742244282e-5)*(pz)*(x0)*(x4)))+(((-2.56914768826470e-8)*(py)*(pz)*(x0)*(x3)*(x9)))+(((-2.03041711630518e-6)*(px)*(py)*(x0)*(x3)*(x6)))+(((2.36271005417001e-9)*(pz)*(x10)*(x3)*(x6)))+(((0.121717982121653)*(px)*(py)*(x10)*(x6)))+(((0.000103442970089207)*(x10)*(x4)))+(((9.60311255313307e-8)*(x10)*(x6)))+(((0.00816882788598476)*(pz)*(x0)*(x4)*(x9)))+(((6.27176500684088e-8)*(py)*(pz)*(x0)*(x9)))+(((1.88706985155926e-9)*(py)*(x0)*(x3)*(x9)))+(((-7.46005992864481e-23)*(x0)*(x3)*(x4)))+(((6.98680822343772e-9)*(pz)*(x0)*(x6)))+(((4.62516953651393e-5)*(py)*(x10)*(x3)*(x9)))+(((-1.20726825644515e-7)*(pz)*(x0)*(x3)*(x6)))+(((4.18527813740071e-9)*(x0)*(x4)))+(((-5.74596219180198e-9)*(pz)*(x10)*(x6)))+(((1.18135502708505e-9)*(pz)*(x0)*(x1)*(x6)))+(((-8.70931414176989e-12)*(py)*(x0)*(x9)))+(((-6.76610680643226e-5)*(px)*(py)*(pz)*(x0)*(x6)))+(((-3.93375858196566e-8)*(x0)*(x10)*(x6)))+(((-3.45205816083788e-9)*(x0)*(x1)*(x6)))+(((4.62524669175333e-5)*(py)*(x0)*(x10)*(x9)))+(((-6.21298185688641e-6)*(pz)*(x10)*(x4)))+(((9.40291937887487e-9)*(px)*(py)*(x0)*(x6)))+(((1.18135502708496e-9)*(pz)*(x0)*(x10)*(x6)))+(((-2.26873577538350e-6)*(x0)*(x4)*(x9)))+(((-1.94785959576101e-12)*(x0)*(x6)))+(((0.000206921826362270)*(x10)*(x3)*(x6)))+(((-6.21298185688672e-6)*(pz)*(x0)*(x3)*(x4)))+(((1.59668683219055e-11)*(x0)*(x3)*(x6))));
        op[6]=((((-4.85201524710185e-13)*(py)*(x0)*(x6)))+(((-7.06099449623499e-7)*(x0)*(x10)*(x9)))+(((1.02277552663867e-6)*(px)*(pz)*(x0)*(x6)))+(((-2.41249098436536e-12)*(x0)*(x1)*(x3)*(x9)))+(((1.44617446050688e-7)*(x1)*(x10)*(x9)))+(((7.71370163630391e-8)*(px)*(x0)*(x4)))+(((-1.44316325342857e-11)*(x0)*(x3)*(x9)))+(((-7.08762593319164e-7)*(x10)*(x3)*(x9)))+(((-0.00184130686348919)*(px)*(x10)*(x6)))+(((-1.66818807013493e-5)*(px)*(x0)*(x3)*(x4)))+(((-2.57425845664582e-23)*(py)*(pz)*(x0)*(x3)*(x6)))+(((1.44622271032657e-7)*(x9)*((x10)*(x10))))+(((3.92211252338040e-10)*(pz)*(x10)*(x9)))+(((6.64790705133849e-14)*(x0)*(x9)))+(((1.04931125586109e-10)*(py)*(x0)*(x3)*(x6)))+(((-8.03321418417776e-11)*(pz)*(x0)*(x1)*(x9)))+(((-0.000555480296246964)*(px)*(pz)*(x0)*(x4)))+(((-4.78730128855387e-10)*(pz)*(x0)*(x9)))+(((1.26877715607216e-8)*(px)*(x0)*(x1)*(x6)))+(((3.49404085604003e-9)*(py)*(pz)*(x0)*(x6)))+(((8.61859680125685e-7)*(x10)*(x9)))+(((1.00003336292659)*(px)*(x10)*(x4)))+(((4.22482766268276e-7)*(px)*(pz)*(x10)*(x6)))+(((4.22482766268276e-7)*(px)*(pz)*(x0)*(x3)*(x6)))+(((2.89242129574329e-7)*(x0)*(x10)*(x3)*(x9)))+(((3.06567674400823e-8)*(px)*(x0)*(x3)*(x6)))+(((3.93697075633545e-10)*(pz)*(x0)*(x3)*(x9)))+(((-1.42028174657282e-10)*(px)*(x0)*(x6)))+(((1.18344507885225e-11)*(x0)*(x1)*(x9)))+(((-8.03321418417776e-11)*(pz)*(x0)*(x10)*(x9)))+(((-2.57425845664582e-23)*(py)*(pz)*(x10)*(x6)))+(((-0.000760597386413782)*(px)*(x0)*(x10)*(x6)))+(((-0.000760584698642222)*(px)*(x10)*(x3)*(x6)))+(((-6.29033550078453e-6)*(py)*(x10)*(x6)))+(((7.04368255547057e-20)*(py)*(pz)*(x0)*(x4)))+(((-1.60664283683555e-10)*(pz)*(x10)*(x3)*(x9)))+(((-1.62408952125574e-23)*(py)*(x0)*(x4))));
        polyroots6(op,zeror,numroots);
        IKReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
        int numsolutions = 0;
        for(int ij0 = 0; ij0 < numroots; ++ij0)
        {
            cj0 = zeror[ij0];
            IKReal x18=x0;
            IKReal x19=x3;
            IKReal x20=x9;
            IKReal x21=x6;
            IKReal x22=x2;
            IKReal x23=x7;
            IKReal x24=(cj0)*(cj0);
            IKReal x25=x11;
            tempj0array[0]=IKatan2(((((IKabs(((((1.55321955446272e-6)*(px)*(py)*(pz)*(x19)))+(((1.55321955446272e-6)*(px)*(py)*(pz)*(x18)))+(((-0.0608117241738253)*(x18)*(x20)))+(((-3.77733222904735e-6)*(px)*(py)*(pz)))+(((-0.00408434581069592)*(px)*(py)*(pz)*(x20)))+(((-5.17197595220630e-5)*(px)*(py)*(x18)))+(((1.68892938034132e-5)*(pz)*(x20)))+(((x24)*(((((-0.00408589903025038)*(px)*(py)*(pz)*(x19)))+(((0.0122576970907511)*(px)*(py)*(pz)*(x20)))))))+(((cj0)*(((((0.000248371967697253)*(px)*(pz)*(x19)))+(((-0.000248371967697253)*(px)*(pz)*(x20)))+(((-0.000556104743832865)*(py)*(pz)*(x20)))+(((2.00079394734718)*(py)*(x18)*(x20))))))))) != 0)?((IKReal)1/(((((1.55321955446272e-6)*(px)*(py)*(pz)*(x19)))+(((1.55321955446272e-6)*(px)*(py)*(pz)*(x18)))+(((-0.0608117241738253)*(x18)*(x20)))+(((-3.77733222904735e-6)*(px)*(py)*(pz)))+(((-0.00408434581069592)*(px)*(py)*(pz)*(x20)))+(((-5.17197595220630e-5)*(px)*(py)*(x18)))+(((1.68892938034132e-5)*(pz)*(x20)))+(((x24)*(((((-0.00408589903025038)*(px)*(py)*(pz)*(x19)))+(((0.0122576970907511)*(px)*(py)*(pz)*(x20)))))))+(((cj0)*(((((0.000248371967697253)*(px)*(pz)*(x19)))+(((-0.000248371967697253)*(px)*(pz)*(x20)))+(((-0.000556104743832865)*(py)*(pz)*(x20)))+(((2.00079394734718)*(py)*(x18)*(x20)))))))))):(IKReal)1.0e30))*(((((1.05618929703465e-7)*(px)*(pz)*(x18)))+(((0.000248371967697253)*(py)*(pz)*(x20)))+(((-1.00000000000000)*((cj0)*(cj0)*(cj0))*(((((0.00408589903025038)*(pz)*(x23)))+(((-0.0122576970907511)*(pz)*(x19)*(x20)))))))+(((-2.57835355437118e-7)*(px)*(pz)))+(((-1.00000000000000)*(x24)*(((((1.00039697367359)*(px)*(x18)*(x20)))+(((-0.000278052371916433)*(px)*(pz)*(x20)))+(((-1.00039697367359)*(px)*(x18)*(x19)))+(((0.000496743935394505)*(py)*(pz)*(x20)))+(((0.000278052371916433)*(px)*(pz)*(x19)))))))+(((-1.00000000000000)*(cj0)*(((((1.55321955446272e-6)*(pz)*(x18)*(x20)))+(((-1.68892938034132e-5)*(px)*(py)*(pz)))+(((0.00817335128005522)*(pz)*(x19)*(x20)))+(((-5.17197595220630e-5)*(x18)*(x20)))+(((-3.77733222904735e-6)*(pz)*(x20)))+(((-0.00408434581069592)*(pz)*(x23)))+(((0.0608117241738253)*(px)*(py)*(x18)))))))+(((-0.000380292349426934)*(px)*((x18)*(x18))))+(((-0.000380292349426934)*(px)*(x18)*(x19)))+(((3.16856789110394e-7)*(px)*(pz)*(x19)))+(((1.00001668132416)*(px)*(x18)*(x20)))+(((-0.000277735515127322)*(px)*(pz)*(x20)))+(((0.000928364009745247)*(px)*(x18)))))), cj0);
            for(int kj0 = 0; kj0 < 1; ++kj0)
            {
            j0array[numsolutions] = tempj0array[kj0];
            if( j0array[numsolutions] > IKPI )
                j0array[numsolutions]-=IK2PI;
            else if( j0array[numsolutions] < -IKPI )
                j0array[numsolutions]+=IK2PI;
            cj0array[numsolutions] = zeror[ij0];
            sj0array[numsolutions] = IKsin(j0array[numsolutions]);
            bool valid = true;
            for( int jj0 = 0; jj0 < numsolutions; ++jj0)
            {
                if( IKabs(cj0array[jj0]-cj0array[numsolutions]) < 0.0001 && IKabs(sj0array[jj0]-sj0array[numsolutions]) < 0.0001 )
                {
                    valid=false; break;
                }
            }
            if( valid ) { numsolutions++; }
            }
        }
        for(int ij0 = 0; ij0 < numsolutions; ++ij0)
            {
            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
            IKReal x26=x9;
            j0evalpoly[0]=pz;
            j0evalpoly[1]=((9.01730209820024e-5)+(((-0.00265214767594125)*(py)*(sj0)))+(((0.0195010858525092)*((py)*(py))*((sj0)*(sj0))))+(((-0.00265214767594125)*(cj0)*(px)))+(((0.0195010858525092)*(x26)*((cj0)*(cj0))))+(((0.0195010858525092)*((pz)*(pz))))+(((0.0390021717050184)*(cj0)*(px)*(py)*(sj0))));
            j0evalpoly[2]=((((-1.00001668132416)*(pz)*(sj0)*(x26)))+(((1.00001668132416)*(cj0)*(px)*(py)*(pz)))+(((-0.0304058620869126)*(px)*(pz)))+(((-0.000161226666312189)*(px)))+(((0.00237098038694395)*(cj0)*(x26)))+(((0.00237098038694395)*(px)*(py)*(sj0))));
            if( IKabs(j0evalpoly[0]) < 0.000001  || IKabs(j0evalpoly[1]) < 0.000001  || IKabs(j0evalpoly[2]) < 0.000001  )
            {
                continue;
            }
            IKReal x27=x9;
            IKReal x28=((1.00001668132416)*(cj0)*(px)*(py)*(pz));
            IKReal x29=((0.00237098038694395)*(cj0)*(x27));
            IKReal x30=((0.00237098038694395)*(px)*(py)*(sj0));
            IKReal x31=((x30)+(x28)+(x29));
            IKReal x32=((0.0304058620869126)*(px)*(pz));
            IKReal x33=((1.00001668132416)*(pz)*(sj0)*(x27));
            IKReal x34=((0.000161226666312189)*(px));
            IKReal x35=((x33)+(x32)+(x34));
            IKReal x36=((((-1.00000000000000)*(x35)))+(x31));
            IKReal x37=((0.000303362176195977)*(px));
            IKReal x38=((0.000496574516221964)*(x27));
            IKReal x39=((7.96478496741179e-5)*(px)*(py)*(pz));
            IKReal x40=((((-1.00000000000000)*(x39)))+(x38));
            IKReal x41=((sj0)*(x40));
            IKReal x42=((5.41605377784002e-6)*(px)*(pz));
            IKReal x43=((7.96478496741179e-5)*(pz)*(x27));
            IKReal x44=((0.000496574516221964)*(px)*(py));
            IKReal x45=((x44)+(x43));
            IKReal x46=((-1.00000000000000)*(x45));
            IKReal x47=((cj0)*(x46));
            IKReal x48=((x37)+(x47)+(x42)+(x41));
            IKReal x49=x0;
            IKReal x50=((0.0195010858525092)*(px)*(x49));
            IKReal x51=((x48)+(((-1.00000000000000)*(x50))));
            IKReal x52=((IKabs(x36) != 0)?((IKReal)1/(x36)):(IKReal)1.0e30);
            j0evalpoly[0]=((-1.00000000000000)+((((x51)*(x51))*((x52)*(x52))))+(((((IKabs(x49) != 0)?((IKReal)1/(x49)):(IKReal)1.0e30))*((((0.127947990572369)+(((0.0680000000000000)*(x51)*(x52)))+(((-1.00000000000000)*(cj0)*(px)*(x51)*(x52)))+(((-0.209438474884231)*(cj0)*(py)))+(((-1.00000000000000)*(py)*(sj0)*(x51)*(x52)))+(((0.209438474884231)*(px)*(sj0)))))*(((0.127947990572369)+(((0.0680000000000000)*(x51)*(x52)))+(((-1.00000000000000)*(cj0)*(px)*(x51)*(x52)))+(((-0.209438474884231)*(cj0)*(py)))+(((-1.00000000000000)*(py)*(sj0)*(x51)*(x52)))+(((0.209438474884231)*(px)*(sj0)))))))));
            if( IKabs(j0evalpoly[0]) > 0.000001  )
            {
                continue;
            }
        {
            IKReal j1eval[1];
            j1eval[0]=((((-0.000380141443281710)*((pz)*(pz))))+(((-1.00000000000000)*((((0.00132581070810830)+(((-0.0194972162957103)*(cj0)*(px)))+(((-0.0194972162957103)*(py)*(sj0)))))*(((0.00132581070810830)+(((-0.0194972162957103)*(cj0)*(px)))+(((-0.0194972162957103)*(py)*(sj0)))))))));
            if( IKabs(j1eval[0]) < 0.000001  )
            {
                {
                    if( 1 )
                    {
                    continue;
                
                } else
                {
                }
                }
            
            } else
            {
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x53=((0.0194972162957103)*(cj0)*(px));
                IKReal x54=((0.0194972162957103)*(py)*(sj0));
                IKReal x55=((x54)+(x53));
                IKReal x56=((0.00132581070810830)+(((-1.00000000000000)*(x55))));
                IKReal x57=((0.999801572239199)*(cj0)*(py));
                IKReal x58=((0.00408346724546153)*(px)*(sj0));
                IKReal x59=((0.00249462964679099)+(x58));
                IKReal x60=((0.00408346724546153)*(cj0)*(py));
                IKReal x61=((x59)+(((-1.00000000000000)*(x60))));
                IKReal x62=x0;
                IKReal x63=((0.000380141443281710)*(x62));
                IKReal x64=(x56)*(x56);
                IKReal x65=((x63)+(x64));
                IKReal x66=((-1.00000000000000)*(x65));
                IKReal x67=((IKabs(x66) != 0)?((IKReal)1/(x66)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x67)*(((((-0.0194972162957103)*(pz)*(((0.0303896399595984)+(((0.999801572239199)*(px)*(sj0)))+(((-1.00000000000000)*(x57)))))))+(((x56)*(x61)))))), ((x67)*(((((-1.00000000000000)*(x56)*(((0.0303896399595984)+(((-0.999801572239199)*(cj0)*(py)))+(((0.999801572239199)*(px)*(sj0)))))))+(((-0.0194972162957103)*(pz)*(x61)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                for(int ij1 = 0; ij1 < 1; ++ij1)
                {
                if( !j1valid[ij1] ) { continue; }
                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(2);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.vfree.resize(0);
                }
                }
            
            }
        
        }
            }
    
    } else
    {
    }
    }
}
return vsolutions.size()>0;
}
    /// Durand-Kerner polynomial root finding method
    static void polyroots6(IKReal rawcoeffs[6+1], IKReal rawroots[6], int& numroots)
    {
        using std::complex;
        assert(rawcoeffs[0] != 0);
        const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
        complex<IKReal> coeffs[6];
        const int maxsteps = 50;
        for(int i = 0; i < 6; ++i) {
            coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
        }
        complex<IKReal> roots[6];
        IKReal err[6];
        roots[0] = complex<IKReal>(1,0);
        roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
        err[0] = 1.0;
        err[1] = 1.0;
        for(int i = 2; i < 6; ++i) {
            roots[i] = roots[i-1]*roots[1];
            err[i] = 1.0;
        }
        for(int step = 0; step < maxsteps; ++step) {
            bool changed = false;
            for(int i = 0; i < 6; ++i) {
                if ( err[i] >= tol ) {
                    changed = true;
                    // evaluate
                    complex<IKReal> x = roots[i] + coeffs[0];
                    for(int j = 1; j < 6; ++j) {
                        x = roots[i] * x + coeffs[j];
                    }
                    for(int j = 0; j < 6; ++j) {
                        if( i != j ) {
                            if( roots[i] != roots[j] ) {
                                x /= (roots[i] - roots[j]);
                            }
                        }
                    }
                    roots[i] -= x;
                    err[i] = abs(x);
                }
            }
            if( !changed ) {
                break;
            }
        }
        numroots = 0;
        for(int i = 0; i < 6; ++i) {
            if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
                rawroots[numroots++] = real(roots[i]);
            }
        }
    }
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
