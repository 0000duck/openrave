/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-18 16:48:58.596700
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 2; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 6; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0, x1, x2, x3, __dummy__;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
eetrans[0]=((-0.0170700000000000)+(((0.121380000000000)*(x0)*(x2)))+(((-0.0313600000000000)*(x1)))+(((0.0680000000000000)*(x0)))+(((0.0494500000000000)*(x0)*(x3))));
eetrans[1]=((((0.0313600000000000)*(x0)))+(((0.0680000000000000)*(x1)))+(((0.0494500000000000)*(x1)*(x3)))+(((0.121380000000000)*(x1)*(x2))));
eetrans[2]=((0.381450000000000)+(((-0.0494500000000000)*(x2)))+(((0.121380000000000)*(x3))));
eerot[0]=((((-0.00408346724546153)*(x0)*(x2)))+(((-0.0194972162957103)*(x1)))+(((0.999801572239199)*(x0)*(x3))));
eerot[1]=((((0.0194972162957103)*(x0)))+(((-0.00408346724546153)*(x1)*(x2)))+(((0.999801572239199)*(x1)*(x3))));
eerot[2]=((((-0.00408346724546153)*(x3)))+(((-0.999801572239199)*(x2))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((0.0170700000000000)+(px));
new_py=py;
new_pz=((-0.381450000000000)+(pz));
px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
IKReal op[6+1], zeror[6];
int numroots;
IKReal j1evalpoly[3];
IKReal x0=(py)*(py)*(py)*(py);
IKReal x1=(px)*(px);
IKReal x2=(py)*(py)*(py)*(py)*(py)*(py);
IKReal x3=(pz)*(pz);
IKReal x4=(py)*(py);
IKReal x5=(px)*(px)*(px)*(px);
IKReal x6=(pz)*(pz)*(pz)*(pz);
IKReal x7=(py)*(py)*(py)*(py)*(py)*(py)*(py)*(py);
IKReal x8=(pz)*(pz)*(pz);
IKReal x9=(px)*(px)*(px)*(px)*(px)*(px);
op[0]=((((2.00006672585319)*(x0)*(x3)*(x4)))+(((0.00741051873783899)*(x0)*(x3)))+(((-3.92178862449687e-5)*(pz)*(x0)))+(((1.00003336292659)*(x7)))+(((2.00006672585319)*(x0)*(x1)*(x3)))+(((2.00006672585319)*(x0)*(x1)*(x4)))+(((3.07451572227865e-5)*(x0)))+(((-0.0110860983428513)*(x0)*(x1)))+(((-0.0110860983428513)*(x0)*(x4)))+(((1.00003336292659)*(x0)*(x5)))+(((1.00003336292659)*(x0)*(x6))));
op[1]=((((-0.000135070521529944)*(x0)*(x4)))+(((-0.000135070521529944)*(x0)*(x1)))+(((0.000457736598263381)*(x0)*(x3)))+(((-0.486511242440054)*(pz)*(x0)*(x4)))+(((-0.486511242440054)*(pz)*(x0)*(x3)))+(((-0.486511242440054)*(pz)*(x0)*(x1)))+(((-0.00180159785414103)*(pz)*(x0)))+(((5.51678579809703e-6)*(x0))));
op[2]=((((0.0739270975469994)*(x0)*(x3)))+(((1.73126082738841e-5)*(x0)))+(((2.03863558469787e-7)*(pz)*(x0)))+(((-0.999306154120160)*(x0)*(x6)))+(((1.34862017304749e-6)*(x1)*(x4)))+(((0.0438659382090841)*(x1)*(x4)*(x5)))+(((-3.99937287969508)*(x0)*(x3)*(x4)))+(((-3.00006672557492)*(x7)))+(((-0.000486285880967194)*(x4)*(x5)))+(((-3.91164100327691)*(x0)*(x1)*(x3)))+(((0.0628318466285799)*(x0)*(x4)))+(((0.0438659382090841)*(x1)*(x4)*(x6)))+(((-1.72027198140485e-6)*(pz)*(x1)*(x4)))+(((-0.00111178701194692)*(pz)*(x0)*(x3)))+(((-2.91233484915675)*(x0)*(x5)))+(((0.0877318764181682)*(x3)*(x4)*(x5)))+(((-5.95626751294076)*(x0)*(x1)*(x4)))+(((0.000325058512148025)*(x1)*(x3)*(x4)))+(((0.00111094206050929)*(pz)*(x0)*(x4)))+(((0.00111094206050929)*(pz)*(x0)*(x1)))+(((0.0623455607476127)*(x0)*(x1))));
op[3]=((((0.000264213992459600)*(x0)*(x1)))+(((-5.92479748271778e-6)*(x4)*(x5)))+(((0.973030600719656)*(pz)*(x0)*(x4)))+(((-0.00359180642558593)*(pz)*(x0)))+(((0.486314963402502)*(pz)*(x0)*(x3)))+(((-0.0213405601153596)*(pz)*(x1)*(x3)*(x4)))+(((2.41990911407063e-7)*(x1)*(x4)))+(((-7.90261436039409e-5)*(pz)*(x1)*(x4)))+(((-0.000510108916021936)*(x0)*(x3)))+(((2.00783754620912e-5)*(x1)*(x3)*(x4)))+(((0.951690040604296)*(pz)*(x0)*(x1)))+(((-9.03611753285817e-6)*(x0)))+(((0.000270138789942318)*(x0)*(x4)))+(((-0.0213405601153596)*(pz)*(x4)*(x5))));
op[4]=((((-0.00222186558934307)*(pz)*(x0)*(x4)))+(((-0.0876985143263742)*(x3)*(x4)*(x5)))+(((-0.0877304129587106)*(x1)*(x4)*(x5)))+(((6.79601880284645e-5)*(pz)*(x0)))+(((4.87308899750680e-5)*(pz)*(x4)*(x5)))+(((5.91233631233794)*(x0)*(x1)*(x4)))+(((-4.87679533260787e-5)*(pz)*(x1)*(x3)*(x4)))+(((-0.00217313469936800)*(pz)*(x0)*(x1)))+(((-0.000727051218336165)*(x0)*(x6)))+(((-0.0813212037384162)*(x0)*(x3)))+(((0.00226980006971148)*(x4)*(x5)))+(((-0.0924058916113837)*(x0)*(x4)))+(((1.91081369216834)*(x0)*(x1)*(x3)))+(((0.00111222801934124)*(pz)*(x0)*(x3)))+(((2.82457253673091)*(x0)*(x5)))+(((1.99851220649471)*(x0)*(x3)*(x4)))+(((-1.71132961348950e-6)*(pz)*(x1)*(x4)))+(((9.18429426860910e-5)*(x0)))+(((3.00003336264833)*(x7)))+(((-0.0901360915416722)*(x0)*(x1)))+(((0.00356783181671391)*(x1)*(x3)*(x4)))+(((2.10802864173878e-6)*(x1)*(x4)))+(((3.18986323363929e-5)*(x1)*(x4)*(x6))));
op[5]=((((3.51933173476114e-6)*(x0)))+(((-0.000236578845908443)*(pz)*(x1)*(x4)))+(((-8.60967688898891e-6)*(pz)*(x1)*(x3)*(x4)))+(((0.0213409161123985)*(pz)*(x4)*(x5)))+(((0.00539340427972696)*(pz)*(x0)))+(((-0.486519358279601)*(pz)*(x0)*(x4)))+(((0.000196279037552283)*(pz)*(x0)*(x3)))+(((5.92469865089901e-6)*(x4)*(x5)))+(((5.23723177585549e-5)*(x0)*(x3)))+(((-0.465178442167203)*(pz)*(x0)*(x1)))+(((-0.000135068268412374)*(x0)*(x4)))+(((-0.000129143569761475)*(x0)*(x1)))+(((-2.29728421053884e-6)*(x1)*(x3)*(x4)))+(((-1.54373638057946e-7)*(x1)*(x4))));
op[6]=((((-3.48260833726439e-5)*(x3)*(x4)*(x5)))+(((6.91251912660356e-9)*(x1)*(x4)*(x6)))+(((1.26970833909448e-6)*(pz)*(x1)*(x4)))+(((7.19927728314465e-7)*(x1)*(x3)*(x4)))+(((-1.57588097523928e-7)*(x0)*(x6)))+(((-0.00178353583072069)*(x4)*(x5)))+(((0.000759121263808335)*(x0)*(x1)*(x3)))+(((0.00111092352883378)*(pz)*(x0)*(x4)))+(((0.0438644747618325)*(x1)*(x4)*(x5)))+(((-2.89461653419656e-5)*(pz)*(x0)))+(((0.000793947347180978)*(x0)*(x3)*(x4)))+(((0.0388766074949344)*(x0)*(x1)))+(((-4.41007394319257e-7)*(pz)*(x0)*(x3)))+(((1.93445577178986e-8)*(pz)*(x1)*(x3)*(x4)))+(((-4.87300770928555e-5)*(pz)*(x4)*(x5)))+(((-1.64125464222107e-5)*(x0)*(x3)))+(((-1.00000000000000)*(x7)))+(((0.0406601433256551)*(x0)*(x4)))+(((-0.912271050476335)*(x0)*(x5)))+(((6.13667108324525e-6)*(x1)*(x4)))+(((-1.95613552523817)*(x0)*(x1)*(x4)))+(((-0.000139900708182762)*(x0)))+(((0.00106219345174093)*(pz)*(x0)*(x1))));
polyroots6(op,zeror,numroots);
IKReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
cj1 = zeror[ij1];
IKReal x10=x4;
IKReal x11=x3;
IKReal x12=((0.000192348158867124)*(pz)*(x10));
IKReal x13=(px)*(px)*(px);
IKReal x14=x0;
IKReal x15=((0.00816855535907194)*(x14));
IKReal x16=((0.00816855535907194)*(x10)*(x11));
IKReal x17=((0.135997731339914)*(pz)*(x10));
IKReal x18=x1;
IKReal x19=((0.00816855535907194)*(x10)*(x18));
IKReal x20=((0.000189453383437786)*(x10));
IKReal x21=(py)*(py)*(py);
IKReal x22=((0.0165351475842504)*(x10));
IKReal x23=(cj1)*(cj1);
tempj1array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x14)))+(((cj1)*(((((0.00171080977641144)*(px)*(py)*(x11)))+(((-3.96788276888672e-5)*(px)*(py)))+(((6.75341342061871e-5)*(x10)))+(((0.0284831574395469)*(px)*(py)*(pz)))+(((0.00171080977641144)*(py)*(x13)))+(((0.00171080977641144)*(px)*(py)*(x10)))+(((-0.243261250346385)*(pz)*(x10)))))))+(((-1.00000000000000)*(x10)*(x18)))+(((4.02851050399205e-5)*(px)*(py)*(pz)))+(((0.000396973673590489)*(x10)*(x11)))+(((-0.00346309609203108)*(px)*(py)))+(((0.000555461764416892)*(pz)*(x10)))+(((0.0203300716628276)*(x10)))+(((x23)*(((((-0.00554159405210184)*(x10)))+(((-0.00111092352883378)*(pz)*(x10)))+(((0.999983318675836)*(x10)*(x11)))+(((0.999983318675836)*(x14)))+(((0.999983318675836)*(x10)*(x18))))))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x14)))+(((cj1)*(((((0.00171080977641144)*(px)*(py)*(x11)))+(((-3.96788276888672e-5)*(px)*(py)))+(((6.75341342061871e-5)*(x10)))+(((0.0284831574395469)*(px)*(py)*(pz)))+(((0.00171080977641144)*(py)*(x13)))+(((0.00171080977641144)*(px)*(py)*(x10)))+(((-0.243261250346385)*(pz)*(x10)))))))+(((-1.00000000000000)*(x10)*(x18)))+(((4.02851050399205e-5)*(px)*(py)*(pz)))+(((0.000396973673590489)*(x10)*(x11)))+(((-0.00346309609203108)*(px)*(py)))+(((0.000555461764416892)*(pz)*(x10)))+(((0.0203300716628276)*(x10)))+(((x23)*(((((-0.00554159405210184)*(x10)))+(((-0.00111092352883378)*(pz)*(x10)))+(((0.999983318675836)*(x10)*(x11)))+(((0.999983318675836)*(x14)))+(((0.999983318675836)*(x10)*(x18)))))))))):(IKReal)1.0e30))*(((((0.000116335064795978)*(px)*(py)*(pz)))+(((-1.00000000000000)*(x22)))+(((-1.00000000000000)*((cj1)*(cj1)*(cj1))*(((((-1.00000000000000)*(x20)))+(x15)+(x17)+(x16)+(x19)))))+(((8.31415607659825e-5)*(px)*(py)*(x11)))+(((0.00425789920334972)*(px)*(py)))+(((-0.209438474884231)*(py)*(x13)))+(((-1.00000000000000)*(x23)*(((((-1.00000000000000)*(x22)))+(((-0.209434981173139)*(py)*(x13)))+(((0.000232670129591955)*(px)*(py)*(pz)))+(((-0.209434981173139)*(px)*(py)*(x10)))+(((0.00116062300669973)*(px)*(py)))+(x12)+(((-0.209434981173139)*(px)*(py)*(x11)))))))+(x12)+(((-0.209438474884231)*(px)*(py)*(x10)))+(((-1.00000000000000)*(cj1)*(((((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x16)))+(((-1.00000000000000)*(x17)))+(((-1.00000000000000)*(x15)))+(((0.0509482652709778)*(px)*(py)*(pz)))+(x20)+(((-1.41442460707708e-5)*(px)*(py)))))))))), cj1);
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
    j1array[numsolutions]-=IK2PI;
else if( j1array[numsolutions] < -IKPI )
    j1array[numsolutions]+=IK2PI;
cj1array[numsolutions] = zeror[ij1];
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
bool valid = true;
for( int jj1 = 0; jj1 < numsolutions; ++jj1)
{
    if( IKabs(cj1array[jj1]-cj1array[numsolutions]) < 0.0001 && IKabs(sj1array[jj1]-sj1array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

IKReal x24=((0.00408427767953597)*(px)*(pz));
IKReal x25=x1;
IKReal x26=x4;
j1evalpoly[0]=((((-1.00000000000000)*(py)*(sj1)))+(((0.209438474884231)*(px))));
j1evalpoly[1]=((((-1.00000000000000)*(x24)))+(((0.0254639418531697)*(py)))+(((-1.00000000000000)*(cj1)*(((((-0.000522575122036207)*(px)))+(((-5.81675323979888e-5)*(py)))+(((0.209438474884231)*(py)*(pz)))))))+(((-1.00000000000000)*(sj1)*(((((-0.0203564907407149)*(py)*(pz)))+(((-0.127947990572369)*(px)))+(((-0.0142418162921277)*(py)))))))+(((-1.00000000000000)*((sj1)*(sj1))*(((((-1.00000000000000)*(x24)))+(((0.0303956713045934)*(py)))+(((-0.0680000000000000)*(px)))))))+(((-1.00000000000000)*(cj1)*(sj1)*(((((-0.000277730882208446)*(px)))+(((0.00249512474880781)*(py)))+(((px)*(pz))))))));
j1evalpoly[2]=((((-1.00000000000000)*(sj1)*(((((-1.00000000000000)*(x26)))+(((-1.00000000000000)*(x25)))))))+(((-1.00000000000000)*(cj1)*(((((-0.00408427767953597)*(x25)))+(((-0.00408427767953597)*(x26))))))));
if( IKabs(j1evalpoly[0]) < 0.000001  || IKabs(j1evalpoly[1]) < 0.000001  || IKabs(j1evalpoly[2]) < 0.000001  )
{
    continue;
}
IKReal x27=x1;
IKReal x28=x4;
IKReal x29=((0.00249512474880781)*(py));
IKReal x30=((0.000277730882208446)*(px));
IKReal x31=((x30)+(x29));
IKReal x32=((px)*(pz));
IKReal x33=((((-1.00000000000000)*(x32)))+(x31));
IKReal x34=((cj1)*(x33));
IKReal x35=((0.121581967531253)*(px));
IKReal x36=x24;
IKReal x37=((0.0303956713045934)*(py));
IKReal x38=((0.0680000000000000)*(px));
IKReal x39=((x38)+(x37)+(x36));
IKReal x40=((sj1)*(x39));
IKReal x41=((x35)+(x34)+(x40));
IKReal x42=(sj1)*(sj1);
IKReal x43=((0.0195010858525092)*(py)*(pz)*(x42));
IKReal x44=(cj1)*(cj1);
IKReal x45=((0.0195010858525092)*(py)*(pz)*(x44));
IKReal x46=((x45)+(x43));
IKReal x47=((((-1.00000000000000)*(x46)))+(x41));
IKReal x48=((0.00408427767953597)*(x27));
IKReal x49=((0.00408427767953597)*(x28));
IKReal x50=((x48)+(x49));
IKReal x51=((-1.00000000000000)*(x50));
IKReal x52=((cj1)*(x51));
IKReal x53=((x27)+(x28));
IKReal x54=((-1.00000000000000)*(x53));
IKReal x55=((sj1)*(x54));
IKReal x56=((x55)+(x52));
IKReal x57=((-1.00000000000000)*(x56));
IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
j1evalpoly[0]=((-1.00000000000000)+((((x47)*(x47))*((x58)*(x58))))+(((((IKabs(((((-1.00000000000000)*(py)*(sj1)))+(((0.209438474884231)*(px))))) != 0)?(pow(((((-1.00000000000000)*(py)*(sj1)))+(((0.209438474884231)*(px)))),-2.00000000000000)):(IKReal)1.0e30))*((((0.127947990572369)+(((0.0680000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((-1.00000000000000)*(px)*(sj1)*(x47)*(x58)))+(((-0.209438474884231)*(py)*(x47)*(x58)))))*(((0.127947990572369)+(((0.0680000000000000)*(sj1)))+(((-1.00000000000000)*(cj1)*(pz)))+(((-1.00000000000000)*(px)*(sj1)*(x47)*(x58)))+(((-0.209438474884231)*(py)*(x47)*(x58)))))))));
if( IKabs(j1evalpoly[0]) > 0.000001  )
{
    continue;
}
{
IKReal j0eval[1];
IKReal x59=x4;
IKReal x60=x1;
j0eval[0]=((((7.96162441212116e-5)*(cj1)*(x59)))+(((0.0194933475067388)*(sj1)*(x60)))+(((0.0194933475067388)*(sj1)*(x59)))+(((7.96162441212116e-5)*(cj1)*(x60))));
if( IKabs(j0eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x61=x4;
IKReal x62=x1;
IKReal x63=((0.0194933475067388)*(sj1)*(x62));
IKReal x64=((7.96162441212116e-5)*(cj1)*(x61));
IKReal x65=((0.0194933475067388)*(sj1)*(x61));
IKReal x66=((7.96162441212116e-5)*(cj1)*(x62));
IKReal x67=((x63)+(x64)+(x65)+(x66));
IKReal x68=((IKabs(x67) != 0)?((IKReal)1/(x67)):(IKReal)1.0e30);
IKReal x69=((0.00132581070810830)*(cj1));
IKReal x70=((0.0194972162957103)*(pz)*(sj1));
IKReal x71=((x70)+(x69));
IKReal x72=((0.0303896399595984)+(((-1.00000000000000)*(x71))));
IKReal x73=((0.00132581070810830)*(sj1));
IKReal x74=((0.00249462964679099)+(x73));
IKReal x75=((0.0194972162957103)*(cj1)*(pz));
IKReal x76=((((-1.00000000000000)*(x75)))+(x74));
j0array[0]=IKatan2(((x68)*(((((x72)*(((((-0.00408346724546153)*(py)))+(((-0.0194972162957103)*(px)*(sj1)))))))+(((x76)*(((((-0.0194972162957103)*(cj1)*(px)))+(((0.999801572239199)*(py)))))))))), ((x68)*(((((x76)*(((((0.999801572239199)*(px)))+(((0.0194972162957103)*(cj1)*(py)))))))+(((x72)*(((((-0.00408346724546153)*(px)))+(((0.0194972162957103)*(py)*(sj1)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(2);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.vfree.resize(0);
}
}

}

}
    }

} else
{
}
}
}
return vsolutions.size()>0;
}

/// Durand-Kerner polynomial root finding method
static void polyroots6(IKReal rawcoeffs[6+1], IKReal rawroots[6], int& numroots)
{
    using std::complex;
    assert(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[6];
    const int maxsteps = 50;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[6];
    IKReal err[6];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 6; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "4e2f397e812eb7111e516063b4e0662a"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
