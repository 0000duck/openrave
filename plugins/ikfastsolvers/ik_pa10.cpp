#define IKFAST_NAMESPACE ik_pa10
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 49 generated on 2011-11-23 17:48:10.507327
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return 1.0f;
    }
    else if( f < 0 ) {
        return -1.0f;
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[0]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=((x0)*(x1)*(x3));
x7=((x2)*(x4));
x8=IKsin(j[1]);
x9=IKsin(j[3]);
x10=IKcos(j[4]);
x11=((x1)*(x2));
x12=((x0)*(x3)*(x4));
x13=((x11)+(x12));
x14=((-1.00000000000000)*(x13));
x15=IKsin(j[4]);
x16=((x6)+(((-1.00000000000000)*(x7))));
x17=((x16)*(x5));
x18=IKsin(j[6]);
x19=((x10)*(x14));
x20=((x0)*(x8)*(x9));
x21=((((-1.00000000000000)*(x17)))+(x20));
x22=((x15)*(x21));
x23=((x19)+(x22));
x24=IKcos(j[6]);
x25=IKsin(j[5]);
x26=((x7)+(((-1.00000000000000)*(x6))));
x27=((x26)*(x9));
x28=((x0)*(x5)*(x8));
x29=((((-1.00000000000000)*(x28)))+(x27));
x30=IKcos(j[5]);
x31=((x14)*(x15));
x32=((-1.00000000000000)*(x20));
x33=((x32)+(x17));
x34=((x10)*(x33));
x35=((x31)+(x34));
x36=((0.707106781186547)*(x18)*(x23));
x37=((x25)*(x29));
x38=((x30)*(x35));
x39=((x38)+(x37));
x40=((0.707106781186547)*(x24)*(x39));
x41=((-1.00000000000000)*(x37));
x42=((-1.00000000000000)*(x38));
x43=((x42)+(x41));
x44=((0.707106781186547)*(x18)*(x43));
x45=((0.707106781186547)*(x23)*(x24));
x46=((((-1.00000000000000)*(x20)))+(x17));
x47=((x0)*(x4));
x48=((x11)*(x3));
x49=((x48)+(x47));
x50=((x0)*(x1));
x51=((x3)*(x7));
x52=((x50)+(((-1.00000000000000)*(x51))));
x53=((x2)*(x8)*(x9));
x54=((x49)*(x5));
x55=((x10)*(x52));
x56=((x53)+(((-1.00000000000000)*(x54))));
x57=((x15)*(x56));
x58=((x55)+(x57));
x59=((-1.00000000000000)*(x49));
x60=((x59)*(x9));
x61=((x2)*(x5)*(x8));
x62=((x60)+(((-1.00000000000000)*(x61))));
x63=((x25)*(x62));
x64=((x15)*(x52));
x65=((x54)+(((-1.00000000000000)*(x53))));
x66=((x10)*(x65));
x67=((x64)+(x66));
x68=((x30)*(x67));
x69=((x63)+(x68));
x70=((0.707106781186547)*(x18)*(x58));
x71=((0.707106781186547)*(x24)*(x69));
x72=((0.707106781186547)*(x24)*(x58));
x73=((x3)*(x9));
x74=((x1)*(x5)*(x8));
x75=((x74)+(x73));
x76=((x10)*(x4)*(x8));
x77=((x15)*(x75));
x78=((x77)+(x76));
x79=((x15)*(x4)*(x8));
x80=((-1.00000000000000)*(x75));
x81=((x10)*(x80));
x82=((x79)+(x81));
x83=((x1)*(x8)*(x9));
x84=((x3)*(x5));
x85=((x83)+(((-1.00000000000000)*(x84))));
x86=((0.707106781186547)*(x18)*(x78));
x87=((0.707106781186547)*(x24)*(x78));
x88=((-1.00000000000000)*(x30)*(x82));
x89=((-1.00000000000000)*(x25)*(x85));
x90=((x88)+(x89));
x91=((0.707106781186547)*(x18)*(x90));
x92=((x30)*(x82));
x93=((x25)*(x85));
x94=((x93)+(x92));
x95=((0.707106781186547)*(x24)*(x94));
eerot[0]=((((-1.00000000000000)*(x40)))+(((-1.00000000000000)*(x36)))+(x44)+(x45));
eerot[1]=((((-1.00000000000000)*(x45)))+(((-1.00000000000000)*(x44)))+(((-1.00000000000000)*(x40)))+(((-1.00000000000000)*(x36))));
eerot[2]=((((x25)*(((((x10)*(x46)))+(x31)))))+(((x30)*(((((-1.00000000000000)*(x27)))+(x28))))));
eetrans[0]=((((0.450000000000000)*(x0)*(x8)))+(((x30)*(((((0.0850000000000000)*(x28)))+(((-0.0850000000000000)*(x27)))))))+(((x9)*(((((0.500000000000000)*(x6)))+(((-0.500000000000000)*(x7)))))))+(((0.500000000000000)*(x28)))+(((x25)*(((((0.0850000000000000)*(x31)))+(((0.0850000000000000)*(x10)*(x46))))))));
eerot[3]=((((-1.00000000000000)*(x71)))+(((-1.00000000000000)*(x70)))+(x72)+(((-0.707106781186547)*(x18)*(x69))));
eerot[4]=((((-1.00000000000000)*(x71)))+(((-1.00000000000000)*(x72)))+(((-1.00000000000000)*(x70)))+(((-0.707106781186547)*(x18)*(((((-1.00000000000000)*(x63)))+(((-1.00000000000000)*(x68))))))));
eerot[5]=((((x30)*(((x61)+(((-1.00000000000000)*(x60)))))))+(((x25)*(x67))));
eetrans[1]=((((x9)*(((((0.500000000000000)*(x47)))+(((0.500000000000000)*(x48)))))))+(((x30)*(((((0.0850000000000000)*(x61)))+(((-0.0850000000000000)*(x60)))))))+(((0.500000000000000)*(x61)))+(((0.450000000000000)*(x2)*(x8)))+(((x25)*(((((0.0850000000000000)*(x64)))+(((0.0850000000000000)*(x66))))))));
eerot[6]=((x87)+(x91)+(((-1.00000000000000)*(x95)))+(((-1.00000000000000)*(x86))));
eerot[7]=((((-1.00000000000000)*(x91)))+(((-1.00000000000000)*(x95)))+(((-1.00000000000000)*(x87)))+(((-1.00000000000000)*(x86))));
eerot[8]=((((x25)*(x82)))+(((x30)*(((x84)+(((-1.00000000000000)*(x83))))))));
eetrans[2]=((0.315000000000000)+(((x25)*(((((0.0850000000000000)*(x81)))+(((0.0850000000000000)*(x79)))))))+(((0.450000000000000)*(x3)))+(((-0.500000000000000)*(x83)))+(((x30)*(((((-0.0850000000000000)*(x83)))+(((0.0850000000000000)*(x84)))))))+(((0.500000000000000)*(x84))));
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j4=pfree[0]; cj4=cos(pfree[0]); sj4=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.707106781186548)*(r00)))+(((-0.707106781186548)*(r01))));
new_r01=((((0.707106781186548)*(r00)))+(((-0.707106781186548)*(r01))));
new_r02=r02;
new_px=((px)+(((-0.0850000000000000)*(r02))));
new_r10=((((-0.707106781186548)*(r11)))+(((-0.707106781186548)*(r10))));
new_r11=((((0.707106781186548)*(r10)))+(((-0.707106781186548)*(r11))));
new_r12=r12;
new_py=((py)+(((-0.0850000000000000)*(r12))));
new_r20=((((-0.707106781186548)*(r21)))+(((-0.707106781186548)*(r20))));
new_r21=((((-0.707106781186548)*(r21)))+(((0.707106781186548)*(r20))));
new_r22=r22;
new_pz=((-0.315000000000000)+(pz)+(((-0.0850000000000000)*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
cj3array[0]=((-1.00555555555556)+(((2.22222222222222)*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
{
    j3valid[1]=false;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((1.23456790123457)+((cj3)*(cj3))+(((2.22222222222222)*(cj3)))+((((cj4)*(cj4))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
IKReal x96=((0.450000000000000)*(cj3));
IKReal x97=((0.500000000000000)+(x96));
IKReal x98=((-0.450000000000000)*(cj4)*(sj3));
if( IKabs(x97) < IKFAST_ATAN2_MAGTHRESH && IKabs(x98) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x99=IKatan2(x97, x98);
IKReal x100=(cj4)*(cj4);
IKReal x101=(sj3)*(sj3);
IKReal x102=((0.202500000000000)*(x100)*(x101));
IKReal x103=(x97)*(x97);
IKReal x104=((x102)+(x103));
if( (x104) < (IKReal)-0.00001 )
    continue;
IKReal x105=IKsqrt(x104);
IKReal x106=IKabs(x105);
IKReal x107=((IKabs(x106) != 0)?((IKReal)1/(x106)):(IKReal)1.0e30);
IKReal x108=((npz)*(x107));
if( (x108) < -1-IKFAST_SINCOS_THRESH || (x108) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x109=IKasin(x108);
j5array[0]=((x109)+(((-1.00000000000000)*(x99))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x99))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
{
    j5valid[1]=false;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=IKsign(((((20.0000000000000)*(sj5)*((npx)*(npx))))+(((20.0000000000000)*(sj5)*((npy)*(npy))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[4];
IKReal x110=((0.450000000000000)*(cj3));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-0.452500000000000)+(((-1.00000000000000)*(x110)))+(pp));
evalcond[2]=((0.500000000000000)+(x110)+(((-1.00000000000000)*(npz))));
evalcond[3]=((-0.500000000000000)+(((-1.00000000000000)*(x110)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign(((((20.0000000000000)*((npx)*(npx))))+(((20.0000000000000)*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
if( IKabs(((gconst1)*(((((9.00000000000000)*(cj4)*(npy)*(sj3)))+(((9.00000000000000)*(npx)*(sj3)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-9.00000000000000)*(cj4)*(npx)*(sj3)))+(((9.00000000000000)*(npy)*(sj3)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst1)*(((((9.00000000000000)*(cj4)*(npy)*(sj3)))+(((9.00000000000000)*(npx)*(sj3)*(sj4)))))), ((gconst1)*(((((-9.00000000000000)*(cj4)*(npx)*(sj3)))+(((9.00000000000000)*(npy)*(sj3)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x160=((0.450000000000000)*(cj3));
IKReal x161=((npz)+(x160));
IKReal x162=((-0.500000000000000)+(((-1.00000000000000)*(x161))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=((-0.452500000000000)+(((-1.00000000000000)*(x160)))+(pp));
evalcond[2]=x162;
evalcond[3]=x162;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((20.0000000000000)*((npx)*(npx))))+(((20.0000000000000)*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
if( IKabs(((gconst2)*(((((-9.00000000000000)*(cj4)*(npy)*(sj3)))+(((9.00000000000000)*(npx)*(sj3)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((9.00000000000000)*(cj4)*(npx)*(sj3)))+(((9.00000000000000)*(npy)*(sj3)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst2)*(((((-9.00000000000000)*(cj4)*(npy)*(sj3)))+(((9.00000000000000)*(npx)*(sj3)*(sj4)))))), ((gconst2)*(((((9.00000000000000)*(cj4)*(npx)*(sj3)))+(((9.00000000000000)*(npy)*(sj3)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
if( IKabs(((gconst0)*(((((-20.0000000000000)*(cj5)*(npy)*(npz)))+(((10.0000000000000)*(npy)))+(((9.00000000000000)*(npx)*(sj3)*(sj4)*(sj5)))+(((9.00000000000000)*(cj3)*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((-10.0000000000000)*(npx)))+(((-9.00000000000000)*(cj3)*(npx)))+(((9.00000000000000)*(npy)*(sj3)*(sj4)*(sj5)))+(((20.0000000000000)*(cj5)*(npx)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((-20.0000000000000)*(cj5)*(npy)*(npz)))+(((10.0000000000000)*(npy)))+(((9.00000000000000)*(npx)*(sj3)*(sj4)*(sj5)))+(((9.00000000000000)*(cj3)*(npy)))))), ((gconst0)*(((((-10.0000000000000)*(npx)))+(((-9.00000000000000)*(cj3)*(npx)))+(((9.00000000000000)*(npy)*(sj3)*(sj4)*(sj5)))+(((20.0000000000000)*(cj5)*(npx)*(npz)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
IKReal x163=(npx)*(npx);
IKReal x164=(npy)*(npy);
IKReal x165=((x163)+(x164));
if( (x165) < (IKReal)-0.00001 )
    continue;
IKReal x166=IKsqrt(x165);
IKReal x167=IKabs(x166);
IKReal x168=((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30);
IKReal x169=((0.450000000000000)*(sj3)*(sj4)*(x168));
if( (x169) < -1-IKFAST_SINCOS_THRESH || (x169) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x170=IKasin(x169);
IKReal x171=((-1.00000000000000)*(npy));
IKReal x172=((-1.00000000000000)*(npx));
if( IKabs(x171) < IKFAST_ATAN2_MAGTHRESH && IKabs(x172) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x173=IKatan2(x171, x172);
j6array[0]=((((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x173))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.00000000000000)*(x173)))+(x170));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
if( j6valid[0] && j6valid[1] && IKabs(cj6array[0]-cj6array[1]) < 0.0001 && IKabs(sj6array[0]-sj6array[1]) < 0.0001 )
{
    j6valid[1]=false;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((-100.000000000000)+(((-81.0000000000000)*((cj3)*(cj3))))+(((-180.000000000000)*(cj3)))+(((-81.0000000000000)*((cj4)*(cj4))*((sj3)*(sj3))))));
dummyeval[0]=((-1.23456790123457)+(((-2.22222222222222)*(cj3)))+(((-1.00000000000000)*((cj4)*(cj4))*((sj3)*(sj3))))+(((-1.00000000000000)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.11111111111111)*(npz)))+(((-1.00000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((cj4)*(npy)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj3)*(npz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj4)*(npz)*(sj3)))+(((1.11111111111111)*(cj6)*(npx)))+(((cj3)*(cj6)*(npx)))+(((-1.00000000000000)*(cj3)*(npy)*(sj6)))+(((-1.11111111111111)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x174=((9.00000000000000)*(cj3)*(npy)*(sj6));
IKReal x175=((9.00000000000000)*(cj4)*(npz)*(sj3));
IKReal x176=((10.0000000000000)*(npy)*(sj6));
IKReal x177=((x175)+(x174)+(x176));
IKReal x178=((10.0000000000000)*(cj6)*(npx));
IKReal x179=((9.00000000000000)*(cj3)*(cj6)*(npx));
IKReal x180=((x179)+(x178));
if( IKabs(((-1.00000000000000)*(((IKabs(((((-1.00000000000000)*(x177)))+(x180))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x177)))+(x180)))):(IKReal)1.0e30))*(((5.00000000000000)+(((-20.0000000000000)*((npz)*(npz))))+(((4.05000000000000)*((cj3)*(cj3))))+(((9.00000000000000)*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((-1.00000000000000)*(x180)))+(x177))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x180)))+(x177)))):(IKReal)1.0e30))*(((((4.05000000000000)*(cj3)*(cj4)*(sj3)))+(((20.0000000000000)*(npy)*(npz)*(sj6)))+(((-20.0000000000000)*(cj6)*(npx)*(npz)))+(((4.50000000000000)*(cj4)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((((-1.00000000000000)*(x177)))+(x180))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x177)))+(x180)))):(IKReal)1.0e30))*(((5.00000000000000)+(((-20.0000000000000)*((npz)*(npz))))+(((4.05000000000000)*((cj3)*(cj3))))+(((9.00000000000000)*(cj3)))))), ((((IKabs(((((-1.00000000000000)*(x180)))+(x177))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x180)))+(x177)))):(IKReal)1.0e30))*(((((4.05000000000000)*(cj3)*(cj4)*(sj3)))+(((20.0000000000000)*(npy)*(npz)*(sj6)))+(((-20.0000000000000)*(cj6)*(npx)*(npz)))+(((4.50000000000000)*(cj4)*(sj3)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
if( IKabs(((((IKabs(((((9.00000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-10.0000000000000)*(npz)))+(((-9.00000000000000)*(cj3)*(npz)))+(((-9.00000000000000)*(cj4)*(cj6)*(npx)*(sj3))))) != 0)?((IKReal)1/(((((9.00000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-10.0000000000000)*(npz)))+(((-9.00000000000000)*(cj3)*(npz)))+(((-9.00000000000000)*(cj4)*(cj6)*(npx)*(sj3)))))):(IKReal)1.0e30))*(((((-20.0000000000000)*(npy)*(npz)*(sj6)))+(((4.05000000000000)*(cj3)*(cj4)*(sj3)))+(((20.0000000000000)*(cj6)*(npx)*(npz)))+(((4.50000000000000)*(cj4)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz))))) != 0)?((IKReal)1/(((((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz)))))):(IKReal)1.0e30))*(((((81.0000000000000)*((cj4)*(cj4))*((sj3)*(sj3))))+(((-400.000000000000)*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(((((9.00000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-10.0000000000000)*(npz)))+(((-9.00000000000000)*(cj3)*(npz)))+(((-9.00000000000000)*(cj4)*(cj6)*(npx)*(sj3))))) != 0)?((IKReal)1/(((((9.00000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-10.0000000000000)*(npz)))+(((-9.00000000000000)*(cj3)*(npz)))+(((-9.00000000000000)*(cj4)*(cj6)*(npx)*(sj3)))))):(IKReal)1.0e30))*(((((-20.0000000000000)*(npy)*(npz)*(sj6)))+(((4.05000000000000)*(cj3)*(cj4)*(sj3)))+(((20.0000000000000)*(cj6)*(npx)*(npz)))+(((4.50000000000000)*(cj4)*(sj3)))))), ((((IKabs(((((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz))))) != 0)?((IKReal)1/(((((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz)))))):(IKReal)1.0e30))*(((((81.0000000000000)*((cj4)*(cj4))*((sj3)*(sj3))))+(((-400.000000000000)*((npz)*(npz))))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
if( IKabs(((gconst3)*(((((200.000000000000)*(cj6)*(npx)))+(((-180.000000000000)*(cj3)*(npy)*(sj6)))+(((-200.000000000000)*(npy)*(sj6)))+(((180.000000000000)*(cj4)*(npz)*(sj3)))+(((180.000000000000)*(cj3)*(cj6)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst3)*(((((200.000000000000)*(cj6)*(npx)))+(((-180.000000000000)*(cj3)*(npy)*(sj6)))+(((-200.000000000000)*(npy)*(sj6)))+(((180.000000000000)*(cj4)*(npz)*(sj3)))+(((180.000000000000)*(cj3)*(cj6)*(npx)))))), ((gconst3)*(((((180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
IKReal x181=(npx)*(npx);
IKReal x182=(npy)*(npy);
IKReal x183=((x181)+(x182));
if( (x183) < (IKReal)-0.00001 )
    continue;
IKReal x184=IKsqrt(x183);
IKReal x185=IKabs(x184);
IKReal x186=((IKabs(x185) != 0)?((IKReal)1/(x185)):(IKReal)1.0e30);
IKReal x187=((0.450000000000000)*(sj3)*(sj4)*(x186));
if( (x187) < -1-IKFAST_SINCOS_THRESH || (x187) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x188=IKasin(x187);
IKReal x189=((-1.00000000000000)*(npy));
IKReal x190=((-1.00000000000000)*(npx));
if( IKabs(x189) < IKFAST_ATAN2_MAGTHRESH && IKabs(x190) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x191=IKatan2(x189, x190);
j6array[0]=((((-1.00000000000000)*(x188)))+(((-1.00000000000000)*(x191))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.00000000000000)*(x191)))+(x188));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
if( j6valid[0] && j6valid[1] && IKabs(cj6array[0]-cj6array[1]) < 0.0001 && IKabs(sj6array[0]-sj6array[1]) < 0.0001 )
{
    j6valid[1]=false;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((-100.000000000000)+(((-81.0000000000000)*((cj3)*(cj3))))+(((-180.000000000000)*(cj3)))+(((-81.0000000000000)*((cj4)*(cj4))*((sj3)*(sj3))))));
dummyeval[0]=((-1.23456790123457)+(((-2.22222222222222)*(cj3)))+(((-1.00000000000000)*((cj4)*(cj4))*((sj3)*(sj3))))+(((-1.00000000000000)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.11111111111111)*(npz)))+(((-1.00000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((cj4)*(npy)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj3)*(npz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj4)*(npz)*(sj3)))+(((1.11111111111111)*(cj6)*(npx)))+(((cj3)*(cj6)*(npx)))+(((-1.00000000000000)*(cj3)*(npy)*(sj6)))+(((-1.11111111111111)*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x192=((9.00000000000000)*(cj3)*(npy)*(sj6));
IKReal x193=((9.00000000000000)*(cj4)*(npz)*(sj3));
IKReal x194=((10.0000000000000)*(npy)*(sj6));
IKReal x195=((x193)+(x192)+(x194));
IKReal x196=((10.0000000000000)*(cj6)*(npx));
IKReal x197=((9.00000000000000)*(cj3)*(cj6)*(npx));
IKReal x198=((x197)+(x196));
if( IKabs(((-1.00000000000000)*(((IKabs(((((-1.00000000000000)*(x195)))+(x198))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x195)))+(x198)))):(IKReal)1.0e30))*(((5.00000000000000)+(((-20.0000000000000)*((npz)*(npz))))+(((4.05000000000000)*((cj3)*(cj3))))+(((9.00000000000000)*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((-1.00000000000000)*(x198)))+(x195))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x198)))+(x195)))):(IKReal)1.0e30))*(((((4.05000000000000)*(cj3)*(cj4)*(sj3)))+(((20.0000000000000)*(npy)*(npz)*(sj6)))+(((-20.0000000000000)*(cj6)*(npx)*(npz)))+(((4.50000000000000)*(cj4)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((((-1.00000000000000)*(x195)))+(x198))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x195)))+(x198)))):(IKReal)1.0e30))*(((5.00000000000000)+(((-20.0000000000000)*((npz)*(npz))))+(((4.05000000000000)*((cj3)*(cj3))))+(((9.00000000000000)*(cj3)))))), ((((IKabs(((((-1.00000000000000)*(x198)))+(x195))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x198)))+(x195)))):(IKReal)1.0e30))*(((((4.05000000000000)*(cj3)*(cj4)*(sj3)))+(((20.0000000000000)*(npy)*(npz)*(sj6)))+(((-20.0000000000000)*(cj6)*(npx)*(npz)))+(((4.50000000000000)*(cj4)*(sj3)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
if( IKabs(((((IKabs(((((9.00000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-10.0000000000000)*(npz)))+(((-9.00000000000000)*(cj3)*(npz)))+(((-9.00000000000000)*(cj4)*(cj6)*(npx)*(sj3))))) != 0)?((IKReal)1/(((((9.00000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-10.0000000000000)*(npz)))+(((-9.00000000000000)*(cj3)*(npz)))+(((-9.00000000000000)*(cj4)*(cj6)*(npx)*(sj3)))))):(IKReal)1.0e30))*(((((-20.0000000000000)*(npy)*(npz)*(sj6)))+(((4.05000000000000)*(cj3)*(cj4)*(sj3)))+(((20.0000000000000)*(cj6)*(npx)*(npz)))+(((4.50000000000000)*(cj4)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz))))) != 0)?((IKReal)1/(((((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz)))))):(IKReal)1.0e30))*(((((81.0000000000000)*((cj4)*(cj4))*((sj3)*(sj3))))+(((-400.000000000000)*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(((((9.00000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-10.0000000000000)*(npz)))+(((-9.00000000000000)*(cj3)*(npz)))+(((-9.00000000000000)*(cj4)*(cj6)*(npx)*(sj3))))) != 0)?((IKReal)1/(((((9.00000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-10.0000000000000)*(npz)))+(((-9.00000000000000)*(cj3)*(npz)))+(((-9.00000000000000)*(cj4)*(cj6)*(npx)*(sj3)))))):(IKReal)1.0e30))*(((((-20.0000000000000)*(npy)*(npz)*(sj6)))+(((4.05000000000000)*(cj3)*(cj4)*(sj3)))+(((20.0000000000000)*(cj6)*(npx)*(npz)))+(((4.50000000000000)*(cj4)*(sj3)))))), ((((IKabs(((((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz))))) != 0)?((IKReal)1/(((((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz)))))):(IKReal)1.0e30))*(((((81.0000000000000)*((cj4)*(cj4))*((sj3)*(sj3))))+(((-400.000000000000)*((npz)*(npz))))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
if( IKabs(((gconst3)*(((((200.000000000000)*(cj6)*(npx)))+(((-180.000000000000)*(cj3)*(npy)*(sj6)))+(((-200.000000000000)*(npy)*(sj6)))+(((180.000000000000)*(cj4)*(npz)*(sj3)))+(((180.000000000000)*(cj3)*(cj6)*(npx))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst3)*(((((200.000000000000)*(cj6)*(npx)))+(((-180.000000000000)*(cj3)*(npy)*(sj6)))+(((-200.000000000000)*(npy)*(sj6)))+(((180.000000000000)*(cj4)*(npz)*(sj3)))+(((180.000000000000)*(cj3)*(cj6)*(npx)))))), ((gconst3)*(((((180.000000000000)*(cj4)*(cj6)*(npx)*(sj3)))+(((-180.000000000000)*(cj3)*(npz)))+(((-180.000000000000)*(cj4)*(npy)*(sj3)*(sj6)))+(((-200.000000000000)*(npz)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x111=((cj6)*(r00));
IKReal x112=((r01)*(sj6));
IKReal x113=((((-1.00000000000000)*(x112)))+(x111));
IKReal x114=((r00)*(sj6));
IKReal x115=((cj6)*(r01));
IKReal x116=((x115)+(x114));
IKReal x117=((cj5)*(x113));
IKReal x118=((r02)*(sj5));
IKReal x119=((x117)+(x118));
IKReal x120=((sj5)*(x113));
IKReal x121=((cj4)*(x119));
IKReal x122=((cj6)*(r10));
IKReal x123=((r11)*(sj6));
IKReal x124=((((-1.00000000000000)*(x123)))+(x122));
IKReal x125=((cj5)*(x124));
IKReal x126=((r12)*(sj5));
IKReal x127=((x126)+(x125));
IKReal x128=((r10)*(sj6));
IKReal x129=((cj6)*(r11));
IKReal x130=((x128)+(x129));
IKReal x131=((sj5)*(x124));
IKReal x132=((cj4)*(x127));
IKReal x133=((cj6)*(r20));
IKReal x134=((r21)*(sj6));
IKReal x135=((x133)+(((-1.00000000000000)*(x134))));
IKReal x136=((cj6)*(r21));
IKReal x137=((r20)*(sj6));
IKReal x138=((x137)+(x136));
IKReal x139=((r22)*(sj5));
IKReal x140=((cj5)*(x135));
IKReal x141=((x140)+(x139));
IKReal x142=((cj4)*(x141));
IKReal x143=((sj5)*(x135));
new_r00=((((cj3)*(((((-1.00000000000000)*(sj4)*(x116)))+(x121)))))+(((-1.00000000000000)*(sj3)*(((x120)+(((-1.00000000000000)*(cj5)*(r02))))))));
new_r01=((((sj4)*(x119)))+(((cj4)*(x116))));
new_r02=((((-1.00000000000000)*(cj3)*(((x120)+(((-1.00000000000000)*(cj5)*(r02)))))))+(((-1.00000000000000)*(sj3)*(((x121)+(((-1.00000000000000)*(sj4)*(x116))))))));
new_r10=((((-1.00000000000000)*(sj3)*(((x131)+(((-1.00000000000000)*(cj5)*(r12)))))))+(((cj3)*(((((-1.00000000000000)*(sj4)*(x130)))+(x132))))));
new_r11=((((sj4)*(x127)))+(((cj4)*(x130))));
new_r12=((((-1.00000000000000)*(cj3)*(((x131)+(((-1.00000000000000)*(cj5)*(r12)))))))+(((-1.00000000000000)*(sj3)*(((((-1.00000000000000)*(sj4)*(x130)))+(x132))))));
new_r20=((((-1.00000000000000)*(sj3)*(((x143)+(((-1.00000000000000)*(cj5)*(r22)))))))+(((cj3)*(((((-1.00000000000000)*(sj4)*(x138)))+(x142))))));
new_r21=((((sj4)*(x141)))+(((cj4)*(x138))));
new_r22=((((-1.00000000000000)*(cj3)*(((((-1.00000000000000)*(cj5)*(r22)))+(x143)))))+(((-1.00000000000000)*(sj3)*(((((-1.00000000000000)*(sj4)*(x138)))+(x142))))));
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
{
    j1valid[1]=false;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x144=IKatan2(new_r02, new_r12);
j0array[0]=((-1.00000000000000)*(x144));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x144))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
if( IKabs(((((-1.00000000000000)*(cj0)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((((-1.00000000000000)*(cj0)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
IKReal x145=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=x145;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x145;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x146=IKatan2(new_r02, new_r12);
j0array[0]=((-1.00000000000000)*(x146));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x146))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
{
    j0valid[1]=false;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj0)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((-1.00000000000000)*(cj0)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
if( IKabs(((gconst4)*(new_r12)*(sj1))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(new_r02)*(sj1))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(new_r12)*(sj1)), ((gconst4)*(new_r02)*(sj1)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
IKReal gconst6;
gconst6=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x147=((cj0)*(new_r12));
IKReal x148=((new_r02)*(sj0));
IKReal x149=((((-1.00000000000000)*(x148)))+(x147));
IKReal x150=((new_r12)*(sj0));
IKReal x151=((cj0)*(new_r02));
IKReal x152=((x151)+(x150));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x149;
evalcond[5]=x149;
evalcond[6]=x152;
evalcond[7]=x152;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
if( IKabs(((((-1.00000000000000)*(cj0)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((((-1.00000000000000)*(cj0)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x153=((cj0)*(new_r12));
IKReal x154=((new_r02)*(sj0));
IKReal x155=((((-1.00000000000000)*(x154)))+(x153));
IKReal x156=((new_r12)*(sj0));
IKReal x157=((cj0)*(new_r02));
IKReal x158=((x157)+(x156));
IKReal x159=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=x159;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x155;
evalcond[5]=x155;
evalcond[6]=x158;
evalcond[7]=((-1.00000000000000)*(x158));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x159;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj0)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((-1.00000000000000)*(cj0)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
if( IKabs(((gconst6)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst6)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(new_r21)), ((-1.00000000000000)*(gconst6)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
if( IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(new_r21)), ((-1.00000000000000)*(gconst5)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
if( IKabs(((gconst7)*(new_r12)*(sj1))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(new_r02)*(sj1))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst7)*(new_r12)*(sj1)), ((gconst7)*(new_r02)*(sj1)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "197f863f13f8bc481b0d92a11d69c607"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "ikbase.h"
namespace IKFAST_NAMESPACE {
#ifdef RAVE_REGISTER_BOOST
#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()
BOOST_TYPEOF_REGISTER_TYPE(IKSolution)
#endif
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, const std::vector<dReal>& vfreeinc) {
    std::vector<int> vfree(getNumFreeParameters());
    for(size_t i = 0; i < vfree.size(); ++i) {
        vfree[i] = getFreeParameters()[i];
    }
    return IkSolverBasePtr(new IkFastSolver<IKReal,IKSolution>(ik,vfree,vfreeinc,getNumJoints(),static_cast<IkParameterizationType>(getIKType()), boost::shared_ptr<void>(), getKinematicsHash(), penv));
}
} // end namespace
