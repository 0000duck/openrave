#define IKFAST_NAMESPACE ik_pa10
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-08-05 17:44:08.844330
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKsin(j[1]);
x8=IKsin(j[3]);
x9=IKcos(j[3]);
x10=IKcos(j[6]);
x11=IKcos(j[5]);
x12=IKsin(j[5]);
x13=IKsin(j[6]);
x14=((IkReal(0.707106781186548))*(x13));
x15=((IkReal(0.500000000000000))*(x0));
x16=((IkReal(0.0850000000000000))*(x6));
x17=((IkReal(1.00000000000000))*(x9));
x18=((IkReal(0.707106781186548))*(x10));
x19=((IkReal(1.00000000000000))*(x8));
x20=((IkReal(1.00000000000000))*(x4));
x21=((IkReal(1.00000000000000))*(x3));
x22=((IkReal(0.0850000000000000))*(x5));
x23=((IkReal(1.00000000000000))*(x12));
x24=((IkReal(0.500000000000000))*(x3));
x25=((IkReal(1.00000000000000))*(x11));
x26=((IkReal(1.00000000000000))*(x0));
x27=((IkReal(0.0850000000000000))*(x8));
x28=((x1)*(x2));
x29=((x7)*(x9));
x30=((x2)*(x7));
x31=((IkReal(-1.00000000000000))*(x12));
x32=((IkReal(-1.00000000000000))*(x11));
x33=((x1)*(x9));
x34=((x0)*(x7));
x35=((x3)*(x7));
x36=((x20)*(x3));
x37=((x1)*(x17));
x38=((x4)*(x5)*(x7));
x39=((x19)*(x34));
x40=((x17)*(x34));
x41=((x19)*(x35));
x42=((x17)*(x35));
x43=((((IkReal(-1.00000000000000))*(x36)))+(((x0)*(x28))));
x44=((((x0)*(x4)))+(((x28)*(x3))));
x45=((((IkReal(-1.00000000000000))*(x1)*(x36)))+(((x0)*(x2))));
x46=((((IkReal(-1.00000000000000))*(x37)))+(((x30)*(x8))));
x47=((x36)+(((IkReal(-1.00000000000000))*(x26)*(x28))));
x48=((((IkReal(-1.00000000000000))*(x0)*(x1)*(x20)))+(((IkReal(-1.00000000000000))*(x2)*(x21))));
x49=((x43)*(x9));
x50=((((IkReal(-1.00000000000000))*(x21)*(x28)))+(((IkReal(-1.00000000000000))*(x0)*(x20))));
x51=((((x1)*(x19)))+(((x17)*(x30))));
x52=((IkReal(-1.00000000000000))*(x51));
x53=((x12)*(x46));
x54=((x47)*(x8));
x55=((x48)*(x6));
x56=((x48)*(x5));
x57=((x50)*(x8));
x58=((((IkReal(-1.00000000000000))*(x39)))+(x49));
x59=((((IkReal(-1.00000000000000))*(x41)))+(((x44)*(x9))));
x60=((((IkReal(-1.00000000000000))*(x40)))+(x54));
x61=((((IkReal(-1.00000000000000))*(x42)))+(x57));
x62=((((x4)*(x6)*(x7)))+(((x5)*(x51))));
x63=((x38)+(((x52)*(x6))));
x64=((x12)*(x60));
x65=((x12)*(x61));
x66=((x14)*(x62));
x67=((x18)*(x62));
x68=((((x59)*(x6)))+(((x45)*(x5))));
x69=((((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x44)))+(x41)))))+(((x45)*(x6))));
x70=((x56)+(((x58)*(x6))));
x71=((x11)*(x68));
x72=((x56)+(((x6)*(((x49)+(((IkReal(-1.00000000000000))*(x34)*(x8))))))));
x73=((x55)+(((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x43)))+(x39))))));
x74=((((x5)*(((((IkReal(-1.00000000000000))*(x49)))+(x39)))))+(x55));
x75=((x18)*(x69));
x76=((x14)*(x69));
x77=((x11)*(x70));
x78=((x18)*(((((x11)*(x63)))+(x53))));
x79=((x18)*(((x71)+(x65))));
x80=((x78)+(x66));
x81=((x14)*(((((x31)*(x61)))+(((x32)*(x68))))));
x82=((x76)+(x79));
x83=((x75)+(x81));
eerot[0]=((((IkReal(-1.00000000000000))*(x18)*(((x64)+(((x11)*(x72)))))))+(((x18)*(x73)))+(((x14)*(((((x32)*(x72)))+(((x31)*(x60)))))))+(((IkReal(-1.00000000000000))*(x14)*(x73))));
IkReal x84=((IkReal(1.00000000000000))*(x14));
IkReal x85=((IkReal(1.00000000000000))*(x18));
eerot[1]=((((IkReal(-1.00000000000000))*(x85)*(((x77)+(x64)))))+(((IkReal(-1.00000000000000))*(x84)*(((((IkReal(-1.00000000000000))*(x25)*(x70)))+(((IkReal(-1.00000000000000))*(x23)*(x60)))))))+(((IkReal(-1.00000000000000))*(x74)*(x84)))+(((IkReal(-1.00000000000000))*(x74)*(x85))));
eerot[2]=((((x12)*(x70)))+(((x11)*(((((IkReal(-1.00000000000000))*(x19)*(x47)))+(x40))))));
eetrans[0]=((((IkReal(0.450000000000000))*(x34)))+(((x11)*(((((IkReal(-1.00000000000000))*(x27)*(x47)))+(((IkReal(0.0850000000000000))*(x0)*(x29)))))))+(((x12)*(((((x16)*(x58)))+(((x22)*(x48)))))))+(((x8)*(((((IkReal(-1.00000000000000))*(x24)*(x4)))+(((x15)*(x28)))))))+(((x15)*(x29))));
eerot[3]=((x83)+(((IkReal(-1.00000000000000))*(x82))));
eerot[4]=((((IkReal(-1.00000000000000))*(x82)))+(((IkReal(-1.00000000000000))*(x83))));
eerot[5]=((((x12)*(x68)))+(((x11)*(((x42)+(((IkReal(-1.00000000000000))*(x19)*(x50))))))));
eetrans[1]=((((IkReal(0.450000000000000))*(x35)))+(((x12)*(((((x16)*(x59)))+(((x22)*(x45)))))))+(((x11)*(((((IkReal(0.0850000000000000))*(x29)*(x3)))+(((IkReal(-1.00000000000000))*(x27)*(x50)))))))+(((x24)*(x29)))+(((x8)*(((((x24)*(x28)))+(((x15)*(x4))))))));
eerot[6]=((x67)+(((IkReal(-1.00000000000000))*(x80)))+(((x14)*(((((IkReal(-1.00000000000000))*(x25)*(x63)))+(((IkReal(-1.00000000000000))*(x23)*(x46))))))));
eerot[7]=((((IkReal(-1.00000000000000))*(x80)))+(((IkReal(-1.00000000000000))*(x14)*(((((x32)*(x63)))+(((x31)*(x46)))))))+(((IkReal(-1.00000000000000))*(x67))));
eerot[8]=((((x12)*(x63)))+(((x11)*(((((IkReal(-1.00000000000000))*(x19)*(x30)))+(x37))))));
eetrans[2]=((IkReal(0.315000000000000))+(((x11)*(((((IkReal(-1.00000000000000))*(x27)*(x30)))+(((IkReal(0.0850000000000000))*(x33)))))))+(((IkReal(0.500000000000000))*(x33)))+(((IkReal(0.450000000000000))*(x1)))+(((x12)*(((((x22)*(x4)*(x7)))+(((x16)*(x52)))))))+(((IkReal(-0.500000000000000))*(x30)*(x8))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((IkReal(-0.707106781186548))*(r01)))+(((IkReal(-0.707106781186548))*(r00))));
new_r01=((((IkReal(-0.707106781186548))*(r01)))+(((IkReal(0.707106781186548))*(r00))));
new_r02=r02;
new_px=((px)+(((IkReal(-0.0850000000000000))*(r02))));
new_r10=((((IkReal(-0.707106781186548))*(r11)))+(((IkReal(-0.707106781186548))*(r10))));
new_r11=((((IkReal(-0.707106781186548))*(r11)))+(((IkReal(0.707106781186548))*(r10))));
new_r12=r12;
new_py=((((IkReal(-0.0850000000000000))*(r12)))+(py));
new_r20=((((IkReal(-0.707106781186548))*(r20)))+(((IkReal(-0.707106781186548))*(r21))));
new_r21=((((IkReal(-0.707106781186548))*(r21)))+(((IkReal(0.707106781186548))*(r20))));
new_r22=r22;
new_pz=((IkReal(-0.315000000000000))+(((IkReal(-0.0850000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.00555555555556))+(((IkReal(2.22222222222222))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(2.22222222222222))*(cj3)))+(((IkReal(1.23456790123457))*((cj3)*(cj3))))+(((IkReal(1.23456790123457))*((cj2)*(cj2))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x86=((IkReal(-0.450000000000000))+(((IkReal(-0.500000000000000))*(cj3))));
if( IKabs(x86) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.500000000000000))*(cj2)*(sj3))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x87=((IkReal(1.00000000000000))*(IKatan2(x86, ((IkReal(0.500000000000000))*(cj2)*(sj3)))));
if( (((((IkReal(0.250000000000000))*((cj2)*(cj2))*((sj3)*(sj3))))+((x86)*(x86)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt(((((IkReal(0.250000000000000))*((cj2)*(cj2))*((sj3)*(sj3))))+((x86)*(x86)))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.250000000000000))*((cj2)*(cj2))*((sj3)*(sj3))))+((x86)*(x86))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt(((((IkReal(0.250000000000000))*((cj2)*(cj2))*((sj3)*(sj3))))+((x86)*(x86)))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.250000000000000))*((cj2)*(cj2))*((sj3)*(sj3))))+((x86)*(x86))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x88=IKasin(((pz)*(((IKabs(IKabs(IKsqrt(((((IkReal(0.250000000000000))*((cj2)*(cj2))*((sj3)*(sj3))))+((x86)*(x86)))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((IkReal(0.250000000000000))*((cj2)*(cj2))*((sj3)*(sj3))))+((x86)*(x86))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x88)))+(((IkReal(-1.00000000000000))*(x87))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(x88)+(((IkReal(-1.00000000000000))*(x87))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x89=((IkReal(2.00000000000000))*(sj1));
gconst0=IKsign(((((x89)*((px)*(px))))+(((x89)*((py)*(py))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x90=((IkReal(1.00000000000000))*(pp));
IkReal x91=((IkReal(-0.450000000000000))+(pz)+(((IkReal(-0.500000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.452500000000000))+(((IkReal(0.450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x90))));
evalcond[2]=x91;
evalcond[3]=x91;
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(0.900000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x90))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(2.00000000000000))*((py)*(py))))+(((IkReal(2.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x92=((px)*(sj3));
IkReal x93=((py)*(sj3));
if( IKabs(((gconst1)*(((((cj2)*(x93)))+(((IkReal(-1.00000000000000))*(sj2)*(x92))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj2)*(x92)))+(((sj2)*(x93))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((cj2)*(x93)))+(((IkReal(-1.00000000000000))*(sj2)*(x92)))))), ((gconst1)*(((((cj2)*(x92)))+(((sj2)*(x93)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x94=IKcos(j0);
IkReal x95=IKsin(j0);
IkReal x96=((IkReal(0.500000000000000))*(sj3));
IkReal x97=((px)*(x95));
IkReal x98=((IkReal(1.00000000000000))*(x94));
IkReal x99=((py)*(x95));
evalcond[0]=((x97)+(((IkReal(-1.00000000000000))*(py)*(x98)))+(((sj2)*(x96))));
evalcond[1]=((((cj2)*(x96)))+(((IkReal(-1.00000000000000))*(x99)))+(((IkReal(-1.00000000000000))*(px)*(x98))));
evalcond[2]=((((cj2)*(x97)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x98)))+(((px)*(sj2)*(x94)))+(((sj2)*(x99))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x99)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x98)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x98)))+(x96)+(((sj2)*(x97))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x171=((IkReal(0.500000000000000))*(cj3));
IkReal x172=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.452500000000000))+(((IkReal(-1.00000000000000))*(x172)))+(((IkReal(0.450000000000000))*(cj3))));
evalcond[2]=((IkReal(0.450000000000000))+(x171)+(pz));
evalcond[3]=((IkReal(-0.450000000000000))+(((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(x172)))+(((IkReal(-0.900000000000000))*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(-2.00000000000000))*((py)*(py))))+(((IkReal(-2.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x173=((px)*(sj3));
IkReal x174=((py)*(sj3));
if( IKabs(((gconst2)*(((((sj2)*(x173)))+(((cj2)*(x174))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(sj2)*(x174)))+(((cj2)*(x173))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((sj2)*(x173)))+(((cj2)*(x174)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(sj2)*(x174)))+(((cj2)*(x173)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x175=IKcos(j0);
IkReal x176=IKsin(j0);
IkReal x177=((IkReal(0.500000000000000))*(sj3));
IkReal x178=((px)*(x176));
IkReal x179=((IkReal(1.00000000000000))*(x175));
IkReal x180=((py)*(x176));
evalcond[0]=((((sj2)*(x177)))+(((IkReal(-1.00000000000000))*(py)*(x179)))+(x178));
evalcond[1]=((((IkReal(-1.00000000000000))*(x180)))+(((IkReal(-1.00000000000000))*(px)*(x179)))+(((IkReal(-1.00000000000000))*(cj2)*(x177))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)*(x180)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x179)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x179)))+(((cj2)*(x178))));
evalcond[3]=((((sj2)*(x178)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x179)))+(x177)+(((cj2)*(px)*(x175)))+(((cj2)*(x180))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x181=((IkReal(2.00000000000000))*(cj1)*(pz));
IkReal x182=((sj1)*(sj2)*(sj3));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(py)*(x181)))+(((IkReal(0.900000000000000))*(py)))+(((cj3)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x182))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(0.900000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x181)))+(((cj3)*(px)))+(((py)*(x182))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(py)*(x181)))+(((IkReal(0.900000000000000))*(py)))+(((cj3)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x182)))))), ((gconst0)*(((((IkReal(0.900000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x181)))+(((cj3)*(px)))+(((py)*(x182)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x183=IKcos(j0);
IkReal x184=IKsin(j0);
IkReal x185=((cj1)*(sj2));
IkReal x186=((IkReal(0.900000000000000))*(sj1));
IkReal x187=((IkReal(0.500000000000000))*(sj3));
IkReal x188=((IkReal(0.500000000000000))*(cj3));
IkReal x189=((cj1)*(pz));
IkReal x190=((pz)*(sj1));
IkReal x191=((px)*(x184));
IkReal x192=((px)*(x183));
IkReal x193=((py)*(x184));
IkReal x194=((IkReal(1.00000000000000))*(cj1)*(cj2));
IkReal x195=((IkReal(1.00000000000000))*(py)*(x183));
evalcond[0]=((((sj2)*(x187)))+(((IkReal(-1.00000000000000))*(x195)))+(x191));
evalcond[1]=((IkReal(-0.450000000000000))+(((sj1)*(x192)))+(((sj1)*(x193)))+(((IkReal(-1.00000000000000))*(x188)))+(x189));
evalcond[2]=((IkReal(0.0475000000000000))+(((x186)*(x192)))+(((x186)*(x193)))+(((IkReal(0.900000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x192)))+(((IkReal(-1.00000000000000))*(x193)))+(((sj1)*(x188)))+(((IkReal(0.450000000000000))*(sj1)))+(((cj1)*(cj2)*(x187))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj2)*(x190)))+(((x185)*(x193)))+(((x185)*(x192)))+(((cj2)*(x191)))+(((IkReal(-1.00000000000000))*(cj2)*(x195))));
evalcond[5]=((((sj2)*(x191)))+(((IkReal(-1.00000000000000))*(x192)*(x194)))+(x187)+(((cj2)*(x190)))+(((IkReal(-1.00000000000000))*(sj2)*(x195)))+(((IkReal(-1.00000000000000))*(x193)*(x194))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x196=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.500000000000000))*(sj2)*(sj3)*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.500000000000000))*(sj2)*(sj3)*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x197=IKasin(((IkReal(0.500000000000000))*(sj2)*(sj3)*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))));
j0array[0]=((((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(x196))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x196)))+(x197));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x198=(py)*(py);
IkReal x199=(cj2)*(cj2);
IkReal x200=(sj2)*(sj2);
IkReal x201=IKcos(j0);
IkReal x202=IKsin(j0);
IkReal x203=(px)*(px);
IkReal x204=((IkReal(1.00000000000000))*(x203));
IkReal x205=((IkReal(0.500000000000000))*(sj2)*(sj3));
IkReal x206=((px)*(py)*(x200));
IkReal x207=((px)*(py)*(x199));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x205)))+(((x201)*(((((x198)*(x200)))+(((x198)*(x199)))))))+(((x202)*(((((IkReal(-1.00000000000000))*(x207)))+(((IkReal(-1.00000000000000))*(x206))))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x205)))+(((x202)*(((((IkReal(-1.00000000000000))*(x200)*(x204)))+(((IkReal(-1.00000000000000))*(x199)*(x204)))))))+(((x201)*(((x207)+(x206))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x208=((py)*(sj0));
IkReal x209=((cj0)*(px));
gconst3=IKsign(((((cj3)*(x209)))+(((cj3)*(x208)))+(((IkReal(0.900000000000000))*(x208)))+(((IkReal(0.900000000000000))*(x209)))+(((cj2)*(pz)*(sj3)))));
IkReal x210=((py)*(sj0));
IkReal x211=((IkReal(1.11111111111111))*(cj3));
IkReal x212=((cj0)*(px));
dummyeval[0]=((((IkReal(1.11111111111111))*(cj2)*(pz)*(sj3)))+(((x210)*(x211)))+(((x211)*(x212)))+(x210)+(x212));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x213=((IkReal(2.00000000000000))*(pz));
IkReal x214=((cj2)*(sj3));
if( IKabs(((gconst3)*(((IkReal(0.405000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x213)))+(((IkReal(0.900000000000000))*(cj3)))+(((IkReal(0.500000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((cj0)*(px)*(x213)))+(((IkReal(0.450000000000000))*(x214)))+(((py)*(sj0)*(x213)))+(((IkReal(0.500000000000000))*(cj3)*(x214))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst3)*(((IkReal(0.405000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x213)))+(((IkReal(0.900000000000000))*(cj3)))+(((IkReal(0.500000000000000))*((cj3)*(cj3))))))), ((gconst3)*(((((cj0)*(px)*(x213)))+(((IkReal(0.450000000000000))*(x214)))+(((py)*(sj0)*(x213)))+(((IkReal(0.500000000000000))*(cj3)*(x214)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x215=IKcos(j1);
IkReal x216=IKsin(j1);
IkReal x217=((px)*(sj2));
IkReal x218=((IkReal(0.500000000000000))*(sj3));
IkReal x219=((IkReal(0.500000000000000))*(cj3));
IkReal x220=((py)*(sj0));
IkReal x221=((IkReal(1.00000000000000))*(cj2));
IkReal x222=((cj0)*(py));
IkReal x223=((IkReal(1.00000000000000))*(sj2));
IkReal x224=((cj0)*(px));
IkReal x225=((pz)*(x215));
IkReal x226=((cj0)*(x215));
IkReal x227=((cj2)*(x216));
IkReal x228=((IkReal(0.900000000000000))*(x216));
evalcond[0]=((((IkReal(-0.450000000000000))*(x215)))+(pz)+(((x218)*(x227)))+(((IkReal(-1.00000000000000))*(x215)*(x219))));
evalcond[1]=((IkReal(-0.450000000000000))+(((x216)*(x224)))+(((x216)*(x220)))+(x225)+(((IkReal(-1.00000000000000))*(x219))));
evalcond[2]=((IkReal(0.0475000000000000))+(((x224)*(x228)))+(((IkReal(0.900000000000000))*(x225)))+(((IkReal(-1.00000000000000))*(pp)))+(((x220)*(x228))));
evalcond[3]=((((cj2)*(x215)*(x218)))+(((x216)*(x219)))+(((IkReal(0.450000000000000))*(x216)))+(((IkReal(-1.00000000000000))*(x220)))+(((IkReal(-1.00000000000000))*(x224))));
evalcond[4]=((((sj2)*(x215)*(x220)))+(((x217)*(x226)))+(((IkReal(-1.00000000000000))*(x221)*(x222)))+(((cj2)*(px)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(x216)*(x223))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x215)*(x221)*(x224)))+(((pz)*(x227)))+(((IkReal(-1.00000000000000))*(x215)*(x220)*(x221)))+(((IkReal(-1.00000000000000))*(x222)*(x223)))+(x218)+(((sj0)*(x217))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x229=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.500000000000000))*(sj2)*(sj3)*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.500000000000000))*(sj2)*(sj3)*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x230=IKasin(((IkReal(0.500000000000000))*(sj2)*(sj3)*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))));
j0array[0]=((((IkReal(-1.00000000000000))*(x230)))+(((IkReal(-1.00000000000000))*(x229))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x230)+(((IkReal(-1.00000000000000))*(x229))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x231=((py)*(sj0));
IkReal x232=((cj0)*(px));
gconst3=IKsign(((((cj3)*(x232)))+(((cj3)*(x231)))+(((IkReal(0.900000000000000))*(x232)))+(((IkReal(0.900000000000000))*(x231)))+(((cj2)*(pz)*(sj3)))));
IkReal x233=((py)*(sj0));
IkReal x234=((IkReal(1.11111111111111))*(cj3));
IkReal x235=((cj0)*(px));
dummyeval[0]=((((x234)*(x235)))+(((IkReal(1.11111111111111))*(cj2)*(pz)*(sj3)))+(((x233)*(x234)))+(x233)+(x235));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x236=((IkReal(2.00000000000000))*(pz));
IkReal x237=((cj2)*(sj3));
if( IKabs(((gconst3)*(((IkReal(0.405000000000000))+(((IkReal(0.900000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz)*(x236)))+(((IkReal(0.500000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((py)*(sj0)*(x236)))+(((cj0)*(px)*(x236)))+(((IkReal(0.450000000000000))*(x237)))+(((IkReal(0.500000000000000))*(cj3)*(x237))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst3)*(((IkReal(0.405000000000000))+(((IkReal(0.900000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(pz)*(x236)))+(((IkReal(0.500000000000000))*((cj3)*(cj3))))))), ((gconst3)*(((((py)*(sj0)*(x236)))+(((cj0)*(px)*(x236)))+(((IkReal(0.450000000000000))*(x237)))+(((IkReal(0.500000000000000))*(cj3)*(x237)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x238=IKcos(j1);
IkReal x239=IKsin(j1);
IkReal x240=((px)*(sj2));
IkReal x241=((IkReal(0.500000000000000))*(sj3));
IkReal x242=((IkReal(0.500000000000000))*(cj3));
IkReal x243=((py)*(sj0));
IkReal x244=((IkReal(1.00000000000000))*(cj2));
IkReal x245=((cj0)*(py));
IkReal x246=((IkReal(1.00000000000000))*(sj2));
IkReal x247=((cj0)*(px));
IkReal x248=((pz)*(x238));
IkReal x249=((cj0)*(x238));
IkReal x250=((cj2)*(x239));
IkReal x251=((IkReal(0.900000000000000))*(x239));
evalcond[0]=((((IkReal(-0.450000000000000))*(x238)))+(((x241)*(x250)))+(pz)+(((IkReal(-1.00000000000000))*(x238)*(x242))));
evalcond[1]=((IkReal(-0.450000000000000))+(((x239)*(x243)))+(((x239)*(x247)))+(x248)+(((IkReal(-1.00000000000000))*(x242))));
evalcond[2]=((IkReal(0.0475000000000000))+(((x243)*(x251)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.900000000000000))*(x248)))+(((x247)*(x251))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x247)))+(((IkReal(-1.00000000000000))*(x243)))+(((x239)*(x242)))+(((cj2)*(x238)*(x241)))+(((IkReal(0.450000000000000))*(x239))));
evalcond[4]=((((x240)*(x249)))+(((IkReal(-1.00000000000000))*(pz)*(x239)*(x246)))+(((sj2)*(x238)*(x243)))+(((cj2)*(px)*(sj0)))+(((IkReal(-1.00000000000000))*(x244)*(x245))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x238)*(x244)*(x247)))+(((pz)*(x250)))+(((IkReal(-1.00000000000000))*(x238)*(x243)*(x244)))+(x241)+(((IkReal(-1.00000000000000))*(x245)*(x246)))+(((sj0)*(x240))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x100=((IkReal(1.00000000000000))*(cj3));
IkReal x101=((sj0)*(sj2));
IkReal x102=((cj2)*(sj1));
IkReal x103=((IkReal(1.00000000000000))*(sj3));
IkReal x104=((cj1)*(cj2));
IkReal x105=((sj1)*(sj2));
IkReal x106=((cj0)*(sj2));
IkReal x107=((IkReal(1.00000000000000))*(cj1));
IkReal x108=((((cj3)*(x104)))+(((IkReal(-1.00000000000000))*(sj1)*(x103))));
IkReal x109=((((IkReal(-1.00000000000000))*(x101)*(x107)))+(((cj0)*(cj2))));
IkReal x110=((((sj3)*(x104)))+(((cj3)*(sj1))));
IkReal x111=((((cj1)*(cj3)))+(((IkReal(-1.00000000000000))*(x102)*(x103))));
IkReal x112=((cj0)*(x108));
IkReal x113=((((IkReal(-1.00000000000000))*(cj1)*(x103)))+(((IkReal(-1.00000000000000))*(x100)*(x102))));
IkReal x114=((((IkReal(-1.00000000000000))*(cj2)*(sj0)))+(((IkReal(-1.00000000000000))*(x106)*(x107))));
IkReal x115=((((cj3)*(x106)))+(((sj0)*(x108))));
IkReal x116=((((IkReal(-1.00000000000000))*(x101)*(x103)))+(((cj0)*(x110))));
IkReal x117=((((sj0)*(x110)))+(((sj3)*(x106))));
IkReal x118=((x112)+(((IkReal(-1.00000000000000))*(cj3)*(x101))));
new_r00=((((r00)*(((((IkReal(-1.00000000000000))*(x100)*(x101)))+(x112)))))+(((r10)*(x115)))+(((r20)*(x113))));
new_r01=((((r21)*(x113)))+(((r11)*(x115)))+(((r01)*(x118))));
new_r02=((((r22)*(x113)))+(((r02)*(x118)))+(((r12)*(x115))));
new_r10=((((r10)*(x109)))+(((r20)*(x105)))+(((r00)*(x114))));
new_r11=((((r21)*(x105)))+(((r11)*(x109)))+(((r01)*(x114))));
new_r12=((((r02)*(x114)))+(((r22)*(x105)))+(((r12)*(x109))));
new_r20=((((r10)*(x117)))+(((r20)*(x111)))+(((r00)*(x116))));
new_r21=((((r21)*(x111)))+(((r11)*(x117)))+(((r01)*(x116))));
new_r22=((((r22)*(x111)))+(((r02)*(x116)))+(((r12)*(x117))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x119=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x119));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x119))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x120=IKsin(j6);
IkReal x121=((IkReal(1.00000000000000))*(sj4));
IkReal x122=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x121)))+(((IkReal(-1.00000000000000))*(x120))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x121)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x122))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x120));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x122))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x123=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x123;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x123;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x124=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x124));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x124))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x125=IKcos(j6);
IkReal x126=((IkReal(1.00000000000000))*(sj4));
IkReal x127=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x126)))+(((IkReal(-1.00000000000000))*(x127))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x126)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x125))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x127))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x125));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x128=((gconst4)*(sj5));
if( IKabs(((new_r12)*(x128))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x128))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x128)), ((new_r02)*(x128)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x129=IKcos(j4);
IkReal x130=IKsin(j4);
IkReal x131=((IkReal(1.00000000000000))*(sj5));
IkReal x132=((IkReal(1.00000000000000))*(cj5));
IkReal x133=((new_r12)*(x130));
IkReal x134=((new_r02)*(x129));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x130)))+(((new_r12)*(x129))));
evalcond[1]=((x134)+(x133)+(((IkReal(-1.00000000000000))*(x131))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x131)))+(((cj5)*(x133)))+(((cj5)*(x134))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x129)*(x131)))+(((IkReal(-1.00000000000000))*(new_r10)*(x130)*(x131)))+(((IkReal(-1.00000000000000))*(new_r20)*(x132))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x129)*(x131)))+(((IkReal(-1.00000000000000))*(new_r11)*(x130)*(x131)))+(((IkReal(-1.00000000000000))*(new_r21)*(x132))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x132)))+(((IkReal(-1.00000000000000))*(x131)*(x134)))+(((IkReal(-1.00000000000000))*(x131)*(x133))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x135=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x136=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x135;
evalcond[5]=x135;
evalcond[6]=x136;
evalcond[7]=x136;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x137=IKsin(j6);
IkReal x138=((IkReal(1.00000000000000))*(sj4));
IkReal x139=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x138)))+(((IkReal(-1.00000000000000))*(x137))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x138)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x139))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x137));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x139))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x140=((IkReal(1.00000000000000))+(new_r22));
IkReal x141=((cj4)*(new_r02));
IkReal x142=((new_r12)*(sj4));
IkReal x143=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x140;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x143;
evalcond[5]=x143;
evalcond[6]=((x141)+(x142));
evalcond[7]=((((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(x141))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x140;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x144=IKcos(j6);
IkReal x145=((IkReal(1.00000000000000))*(sj4));
IkReal x146=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x146)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x145))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x145)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x144))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x146)))+(((cj4)*(new_r01)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x144));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst6)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst6)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst6)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst6)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x147=IKsin(j6);
IkReal x148=IKcos(j6);
IkReal x149=((cj4)*(new_r01));
IkReal x150=((IkReal(1.00000000000000))*(sj5));
IkReal x151=((new_r10)*(sj4));
IkReal x152=((new_r11)*(sj4));
IkReal x153=((cj4)*(new_r00));
IkReal x154=((IkReal(1.00000000000000))*(sj4));
IkReal x155=((IkReal(1.00000000000000))*(x148));
evalcond[0]=((new_r20)+(((sj5)*(x148))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x147)*(x150)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(new_r00)*(x154))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x155)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x154))));
evalcond[4]=((((cj5)*(x147)))+(x152)+(x149));
evalcond[5]=((x153)+(x151)+(((IkReal(-1.00000000000000))*(cj5)*(x155))));
evalcond[6]=((((cj5)*(x149)))+(((IkReal(-1.00000000000000))*(new_r21)*(x150)))+(x147)+(((cj5)*(x152))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x150)))+(((IkReal(-1.00000000000000))*(x155)))+(((cj5)*(x153)))+(((cj5)*(x151))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst5)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst5)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)*(IKsin(j6))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x156=((gconst7)*(sj5));
if( IKabs(((new_r12)*(x156))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x156))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x156)), ((new_r02)*(x156)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x157=IKcos(j4);
IkReal x158=IKsin(j4);
IkReal x159=((IkReal(1.00000000000000))*(cj6));
IkReal x160=((IkReal(1.00000000000000))*(sj5));
IkReal x161=((IkReal(1.00000000000000))*(cj5));
IkReal x162=((new_r00)*(x157));
IkReal x163=((cj5)*(x158));
IkReal x164=((new_r11)*(x158));
IkReal x165=((cj5)*(x157));
IkReal x166=((new_r02)*(x157));
IkReal x167=((new_r12)*(x158));
IkReal x168=((new_r10)*(x158));
IkReal x169=((IkReal(1.00000000000000))*(x158));
IkReal x170=((new_r01)*(x157));
evalcond[0]=((((new_r12)*(x157)))+(((IkReal(-1.00000000000000))*(new_r02)*(x169))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x160)))+(x166)+(x167));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x169)))+(((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x157))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x159)))+(((new_r11)*(x157)))+(((IkReal(-1.00000000000000))*(new_r01)*(x169))));
evalcond[4]=((((cj5)*(sj6)))+(x170)+(x164));
evalcond[5]=((x168)+(x162)+(((IkReal(-1.00000000000000))*(cj5)*(x159))));
evalcond[6]=((((new_r12)*(x163)))+(((IkReal(-1.00000000000000))*(new_r22)*(x160)))+(((new_r02)*(x165))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x160)*(x168)))+(((IkReal(-1.00000000000000))*(x160)*(x162)))+(((IkReal(-1.00000000000000))*(new_r20)*(x161))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x161)))+(((IkReal(-1.00000000000000))*(x160)*(x164)))+(((IkReal(-1.00000000000000))*(x160)*(x170))));
evalcond[9]=((((new_r01)*(x165)))+(sj6)+(((new_r11)*(x163)))+(((IkReal(-1.00000000000000))*(new_r21)*(x160))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x160)*(x166)))+(((IkReal(-1.00000000000000))*(x160)*(x167)))+(((IkReal(-1.00000000000000))*(new_r22)*(x161))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x159)))+(((new_r10)*(x163)))+(((cj5)*(x162)))+(((IkReal(-1.00000000000000))*(new_r20)*(x160))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "197f863f13f8bc481b0d92a11d69c607"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
