/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-03 01:27:33.858199
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
    x0=IKcos(j[6]);
    x1=IKcos(j[3]);
    x2=IKsin(j[0]);
    x3=IKsin(j[2]);
    x4=IKcos(j[0]);
    x5=IKsin(j[3]);
    x6=IKsin(j[4]);
    x7=IKsin(j[6]);
    x8=IKcos(j[1]);
    x9=IKcos(j[2]);
    x10=IKcos(j[4]);
    x11=IKcos(j[5]);
    x12=IKsin(j[1]);
    x13=IKsin(j[5]);
    eerot[0]=((((-1.00000000000000)*(x0)*(x10)*(x11)*(x12)*(x4)*(x5)))+(((-1.00000000000000)*(x10)*(x3)*(x4)*(x7)*(x8)))+(((x0)*(x1)*(x10)*(x11)*(x4)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x10)*(x11)*(x2)*(x3)))+(((-1.00000000000000)*(x0)*(x11)*(x2)*(x6)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x12)*(x13)*(x4)))+(((-1.00000000000000)*(x0)*(x11)*(x3)*(x4)*(x6)*(x8)))+(((-1.00000000000000)*(x1)*(x4)*(x6)*(x7)*(x8)*(x9)))+(((x0)*(x13)*(x2)*(x3)*(x5)))+(((-1.00000000000000)*(x0)*(x13)*(x4)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x10)*(x2)*(x7)*(x9)))+(((x12)*(x4)*(x5)*(x6)*(x7)))+(((x1)*(x2)*(x3)*(x6)*(x7))));
    eerot[1]=((((x13)*(x4)*(x5)*(x7)*(x8)*(x9)))+(((x0)*(x12)*(x4)*(x5)*(x6)))+(((x1)*(x10)*(x11)*(x2)*(x3)*(x7)))+(((x10)*(x11)*(x12)*(x4)*(x5)*(x7)))+(((x1)*(x12)*(x13)*(x4)*(x7)))+(((x0)*(x1)*(x2)*(x3)*(x6)))+(((-1.00000000000000)*(x13)*(x2)*(x3)*(x5)*(x7)))+(((x11)*(x2)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x4)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x4)*(x8)))+(((-1.00000000000000)*(x0)*(x10)*(x2)*(x9)))+(((x11)*(x3)*(x4)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x4)*(x7)*(x8)*(x9))));
    eerot[2]=((((x1)*(x10)*(x13)*(x2)*(x3)))+(((-1.00000000000000)*(x11)*(x4)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x11)*(x12)*(x4)))+(((x13)*(x2)*(x6)*(x9)))+(((x10)*(x12)*(x13)*(x4)*(x5)))+(((x13)*(x3)*(x4)*(x6)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x13)*(x4)*(x8)*(x9)))+(((x11)*(x2)*(x3)*(x5))));
    eetrans[0]=((((0.182500000000000)*(x10)*(x12)*(x13)*(x4)*(x5)))+(((-0.182500000000000)*(x11)*(x4)*(x5)*(x8)*(x9)))+(((0.276500000000000)*(x2)*(x3)*(x5)))+(((0.182500000000000)*(x1)*(x10)*(x13)*(x2)*(x3)))+(((-0.328000000000000)*(x12)*(x4)))+(((-0.182500000000000)*(x1)*(x11)*(x12)*(x4)))+(((-0.276500000000000)*(x4)*(x5)*(x8)*(x9)))+(((-0.182500000000000)*(x1)*(x10)*(x13)*(x4)*(x8)*(x9)))+(((0.182500000000000)*(x13)*(x2)*(x6)*(x9)))+(((0.182500000000000)*(x11)*(x2)*(x3)*(x5)))+(((0.182500000000000)*(x13)*(x3)*(x4)*(x6)*(x8)))+(((-0.276500000000000)*(x1)*(x12)*(x4))));
    eerot[3]=((((-1.00000000000000)*(x0)*(x11)*(x2)*(x3)*(x6)*(x8)))+(((-1.00000000000000)*(x0)*(x13)*(x3)*(x4)*(x5)))+(((x12)*(x2)*(x5)*(x6)*(x7)))+(((-1.00000000000000)*(x10)*(x2)*(x3)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x1)*(x12)*(x13)*(x2)))+(((x0)*(x1)*(x10)*(x11)*(x2)*(x8)*(x9)))+(((x0)*(x1)*(x10)*(x11)*(x3)*(x4)))+(((-1.00000000000000)*(x1)*(x3)*(x4)*(x6)*(x7)))+(((-1.00000000000000)*(x1)*(x2)*(x6)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x13)*(x2)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x12)*(x2)*(x5)))+(((x0)*(x11)*(x4)*(x6)*(x9)))+(((x10)*(x4)*(x7)*(x9))));
    eerot[4]=((((x13)*(x2)*(x5)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x2)*(x6)*(x8)*(x9)))+(((x13)*(x3)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x3)*(x4)*(x6)))+(((x0)*(x10)*(x4)*(x9)))+(((x1)*(x12)*(x13)*(x2)*(x7)))+(((x11)*(x2)*(x3)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x10)*(x2)*(x3)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x3)*(x4)*(x7)))+(((x10)*(x11)*(x12)*(x2)*(x5)*(x7)))+(((x0)*(x12)*(x2)*(x5)*(x6)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x2)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x11)*(x4)*(x6)*(x7)*(x9))));
    eerot[5]=((((x13)*(x2)*(x3)*(x6)*(x8)))+(((-1.00000000000000)*(x1)*(x11)*(x12)*(x2)))+(((x10)*(x12)*(x13)*(x2)*(x5)))+(((-1.00000000000000)*(x11)*(x2)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x13)*(x4)*(x6)*(x9)))+(((-1.00000000000000)*(x11)*(x3)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x10)*(x13)*(x2)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x13)*(x3)*(x4))));
    eetrans[1]=((((-0.276500000000000)*(x2)*(x5)*(x8)*(x9)))+(((0.182500000000000)*(x10)*(x12)*(x13)*(x2)*(x5)))+(((-0.276500000000000)*(x3)*(x4)*(x5)))+(((-0.328000000000000)*(x12)*(x2)))+(((-0.182500000000000)*(x1)*(x11)*(x12)*(x2)))+(((-0.182500000000000)*(x1)*(x10)*(x13)*(x3)*(x4)))+(((-0.182500000000000)*(x11)*(x3)*(x4)*(x5)))+(((-0.182500000000000)*(x1)*(x10)*(x13)*(x2)*(x8)*(x9)))+(((-0.182500000000000)*(x11)*(x2)*(x5)*(x8)*(x9)))+(((-0.182500000000000)*(x13)*(x4)*(x6)*(x9)))+(((0.182500000000000)*(x13)*(x2)*(x3)*(x6)*(x8)))+(((-0.276500000000000)*(x1)*(x12)*(x2))));
    eerot[6]=((((-1.00000000000000)*(x1)*(x12)*(x6)*(x7)*(x9)))+(((-1.00000000000000)*(x5)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x12)*(x3)*(x7)))+(((-1.00000000000000)*(x0)*(x11)*(x12)*(x3)*(x6)))+(((x0)*(x1)*(x10)*(x11)*(x12)*(x9)))+(((-1.00000000000000)*(x0)*(x12)*(x13)*(x5)*(x9)))+(((x0)*(x10)*(x11)*(x5)*(x8)))+(((x0)*(x1)*(x13)*(x8))));
    eerot[7]=((((-1.00000000000000)*(x0)*(x10)*(x12)*(x3)))+(((-1.00000000000000)*(x1)*(x13)*(x7)*(x8)))+(((x11)*(x12)*(x3)*(x6)*(x7)))+(((-1.00000000000000)*(x0)*(x5)*(x6)*(x8)))+(((-1.00000000000000)*(x10)*(x11)*(x5)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x1)*(x12)*(x6)*(x9)))+(((x12)*(x13)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x12)*(x7)*(x9))));
    eerot[8]=((((-1.00000000000000)*(x10)*(x13)*(x5)*(x8)))+(((x12)*(x13)*(x3)*(x6)))+(((x1)*(x11)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x12)*(x13)*(x9)))+(((-1.00000000000000)*(x11)*(x12)*(x5)*(x9))));
    eetrans[2]=((0.300000000000000)+(((-0.182500000000000)*(x11)*(x12)*(x5)*(x9)))+(((0.182500000000000)*(x12)*(x13)*(x3)*(x6)))+(((-0.182500000000000)*(x10)*(x13)*(x5)*(x8)))+(((-0.182500000000000)*(x1)*(x10)*(x12)*(x13)*(x9)))+(((0.182500000000000)*(x1)*(x11)*(x8)))+(((0.276500000000000)*(x1)*(x8)))+(((-0.276500000000000)*(x12)*(x5)*(x9)))+(((0.328000000000000)*(x8))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
    r00 = eerot[0*3+0];
    r01 = eerot[0*3+1];
    r02 = eerot[0*3+2];
    r10 = eerot[1*3+0];
    r11 = eerot[1*3+1];
    r12 = eerot[1*3+2];
    r20 = eerot[2*3+0];
    r21 = eerot[2*3+1];
    r22 = eerot[2*3+2];
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_r00=r00;
    new_r01=r02;
    new_r02=((-1.00000000000000)*(r01));
    new_px=((px)+(((-0.182500000000000)*(r02))));
    new_r10=r10;
    new_r11=r12;
    new_r12=((-1.00000000000000)*(r11));
    new_py=((py)+(((-0.182500000000000)*(r12))));
    new_r20=r20;
    new_r21=r22;
    new_r22=((-1.00000000000000)*(r21));
    new_pz=((-0.300000000000000)+(((-0.182500000000000)*(r22)))+(pz));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01462229303577)+(((5.51316543906850)*((px)*(px))))+(((5.51316543906850)*((pz)*(pz))))+(((5.51316543906850)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 )
        {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) )
        {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3)
        {
        if( !j3valid[ij3] ) { continue; }
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x0=(px)*(px);
        IKReal x1=(py)*(py);
        IKReal x2=((x1)+(x0));
        if( (x2) < (IKReal)-0.00001 )
            continue;
        IKReal x3=IKsqrt(x2);
        IKReal x4=IKabs(x3);
        IKReal x5=((IKabs(x4) != 0)?((IKReal)1/(x4)):(IKReal)1.0e30);
        IKReal x6=((0.276500000000000)*(sj2)*(sj3)*(x5));
        if( (x6) < -1.0001 || (x6) > 1.0001 )
            continue;
        IKReal x7=IKasin(x6);
        IKReal x8=((-1.00000000000000)*(py));
        IKReal x9=IKatan2(x8, px);
        j0array[0]=((x7)+(((-1.00000000000000)*(x9))));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x7)))+(((-1.00000000000000)*(x9))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
            IKReal j1eval[1];
            j1eval[0]=((((0.276500000000000)*(cj3)*(pz)))+(((0.328000000000000)*(pz)))+(((0.276500000000000)*(cj0)*(cj2)*(px)*(sj3)))+(((0.276500000000000)*(cj2)*(py)*(sj0)*(sj3))));
            if( IKabs(j1eval[0]) < 0.000001  )
            {
                {
                IKReal evalcond[4];
                    IKReal x10=((px)*(sj0));
                    IKReal x11=((0.276500000000000)*(sj3));
                    IKReal x12=((cj0)*(py));
                    IKReal x13=((x11)+(x12));
                    IKReal x14=((((-1.00000000000000)*(x13)))+(x10));
                    evalcond[0]=((IKabs(pz))+(IKabs(((IKfmod(((((0.500000000000000)*(3.14159265358979)))+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979)))))));
                    evalcond[1]=x14;
                    evalcond[2]=((0.184036250000000)+(((0.181384000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                    evalcond[3]=x14;
                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                    {
                    {
                        IKReal j1eval[1];
                        j1eval[0]=((0.328000000000000)+(((0.276500000000000)*(cj3))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j1eval[1];
                                    j1eval[0]=((((cj0)*(px)))+(((py)*(sj0))));
                                    if( IKabs(j1eval[0]) < 0.000001  )
                                    {
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[1];
                                                j1eval[0]=((((-0.276500000000000)*(cj0)*(cj3)))+(((-0.328000000000000)*(cj0))));
                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[5];
                                                        IKReal x15=x11;
                                                        IKReal x16=((((-1.00000000000000)*(x15)))+(px));
                                                        evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x16;
                                                        evalcond[2]=((0.184036250000000)+(((0.181384000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((x15)+(((-1.00000000000000)*(px))));
                                                        evalcond[4]=x16;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[1];
                                                            j1eval[0]=((0.328000000000000)+(((0.276500000000000)*(cj3))));
                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                            {
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[1];
                                                                        j1eval[0]=py;
                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                        {
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[1];
                                                                                    j1eval[0]=py;
                                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                        bool j1valid[2]={false};
                                                                                        IKReal x17=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                                        sj1array[0]=((((-0.0474569359756098)*(x17)))+(((-1.52439024390244)*(x17)*((px)*(px))))+(((-1.52439024390244)*(py))));
                                                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                        {
                                                                                            j1valid[0] = j1valid[1] = true;
                                                                                            j1array[0] = IKasin(sj1array[0]);
                                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                                            sj1array[1] = sj1array[0];
                                                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                            cj1array[1] = -cj1array[0];
                                                                                        }
                                                                                        else if( isnan(sj1array[0]) )
                                                                                        {
                                                                                            // probably any value will work
                                                                                            j1valid[0] = true;
                                                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                        }
                                                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                            j1valid[1]=false;
                                                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                            bool j1valid[2]={false};
                                                                            IKReal x58=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                            sj1array[0]=((((-0.328000000000000)*(x58)))+(((-0.276500000000000)*(cj3)*(x58))));
                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                            {
                                                                                j1valid[0] = j1valid[1] = true;
                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                sj1array[1] = sj1array[0];
                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                cj1array[1] = -cj1array[0];
                                                                            }
                                                                            else if( isnan(sj1array[0]) )
                                                                            {
                                                                                // probably any value will work
                                                                                j1valid[0] = true;
                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                            }
                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                j1valid[1]=false;
                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                bool j1valid[2]={false};
                                                                sj1array[0]=((-1.00000000000000)*(py)*(((IKabs(((0.328000000000000)+(((0.276500000000000)*(cj3))))) != 0)?((IKReal)1/(((0.328000000000000)+(((0.276500000000000)*(cj3)))))):(IKReal)1.0e30)));
                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                {
                                                                    j1valid[0] = j1valid[1] = true;
                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                    sj1array[1] = sj1array[0];
                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                    cj1array[1] = -cj1array[0];
                                                                }
                                                                else if( isnan(sj1array[0]) )
                                                                {
                                                                    // probably any value will work
                                                                    j1valid[0] = true;
                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                }
                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                    j1valid[1]=false;
                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x59=x11;
                                                        IKReal x60=((px)+(x59));
                                                        IKReal x61=((-1.00000000000000)*(x60));
                                                        evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x61;
                                                        evalcond[2]=((0.184036250000000)+(((0.181384000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x61;
                                                        evalcond[4]=x61;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[1];
                                                            j1eval[0]=((0.328000000000000)+(((0.276500000000000)*(cj3))));
                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                            {
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[1];
                                                                        j1eval[0]=py;
                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                        {
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[1];
                                                                                    j1eval[0]=py;
                                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                        bool j1valid[2]={false};
                                                                                        IKReal x62=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                                        sj1array[0]=((((1.52439024390244)*(x62)*((px)*(px))))+(((1.52439024390244)*(py)))+(((0.0474569359756098)*(x62))));
                                                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                        {
                                                                                            j1valid[0] = j1valid[1] = true;
                                                                                            j1array[0] = IKasin(sj1array[0]);
                                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                                            sj1array[1] = sj1array[0];
                                                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                            cj1array[1] = -cj1array[0];
                                                                                        }
                                                                                        else if( isnan(sj1array[0]) )
                                                                                        {
                                                                                            // probably any value will work
                                                                                            j1valid[0] = true;
                                                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                        }
                                                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                            j1valid[1]=false;
                                                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                            bool j1valid[2]={false};
                                                                            IKReal x63=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                            sj1array[0]=((((0.276500000000000)*(cj3)*(x63)))+(((0.328000000000000)*(x63))));
                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                            {
                                                                                j1valid[0] = j1valid[1] = true;
                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                sj1array[1] = sj1array[0];
                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                cj1array[1] = -cj1array[0];
                                                                            }
                                                                            else if( isnan(sj1array[0]) )
                                                                            {
                                                                                // probably any value will work
                                                                                j1valid[0] = true;
                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                            }
                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                j1valid[1]=false;
                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                bool j1valid[2]={false};
                                                                sj1array[0]=((py)*(((IKabs(((0.328000000000000)+(((0.276500000000000)*(cj3))))) != 0)?((IKReal)1/(((0.328000000000000)+(((0.276500000000000)*(cj3)))))):(IKReal)1.0e30)));
                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                {
                                                                    j1valid[0] = j1valid[1] = true;
                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                    sj1array[1] = sj1array[0];
                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                    cj1array[1] = -cj1array[0];
                                                                }
                                                                else if( isnan(sj1array[0]) )
                                                                {
                                                                    // probably any value will work
                                                                    j1valid[0] = true;
                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                }
                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                    j1valid[1]=false;
                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        continue;
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                    bool j1valid[2]={false};
                                                    IKReal x64=((0.328000000000000)*(cj0));
                                                    IKReal x65=((0.276500000000000)*(cj0)*(cj3));
                                                    IKReal x66=((x64)+(x65));
                                                    IKReal x67=((-1.00000000000000)*(x66));
                                                    IKReal x68=((IKabs(x67) != 0)?((IKReal)1/(x67)):(IKReal)1.0e30);
                                                    sj1array[0]=((((px)*(x68)))+(((-0.276500000000000)*(sj0)*(sj3)*(x68))));
                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                    {
                                                        j1valid[0] = j1valid[1] = true;
                                                        j1array[0] = IKasin(sj1array[0]);
                                                        cj1array[0] = IKcos(j1array[0]);
                                                        sj1array[1] = sj1array[0];
                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                        cj1array[1] = -cj1array[0];
                                                    }
                                                    else if( isnan(sj1array[0]) )
                                                    {
                                                        // probably any value will work
                                                        j1valid[0] = true;
                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                    }
                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                        j1valid[1]=false;
                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                        bool j1valid[2]={false};
                                        IKReal x69=((cj0)*(px));
                                        IKReal x70=((py)*(sj0));
                                        IKReal x71=((x70)+(x69));
                                        IKReal x72=((IKabs(x71) != 0)?((IKReal)1/(x71)):(IKReal)1.0e30);
                                        sj1array[0]=((((-0.328000000000000)*(x72)))+(((-0.276500000000000)*(cj3)*(x72))));
                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                        {
                                            j1valid[0] = j1valid[1] = true;
                                            j1array[0] = IKasin(sj1array[0]);
                                            cj1array[0] = IKcos(j1array[0]);
                                            sj1array[1] = sj1array[0];
                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                            cj1array[1] = -cj1array[0];
                                        }
                                        else if( isnan(sj1array[0]) )
                                        {
                                            // probably any value will work
                                            j1valid[0] = true;
                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                        }
                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                            j1valid[1]=false;
                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[2], cj1array[2], sj1array[2];
                            bool j1valid[2]={false};
                            IKReal x73=((0.276500000000000)*(cj3));
                            IKReal x74=((0.328000000000000)+(x73));
                            IKReal x75=((IKabs(x74) != 0)?((IKReal)1/(x74)):(IKReal)1.0e30);
                            sj1array[0]=((((-1.00000000000000)*(py)*(sj0)*(x75)))+(((-1.00000000000000)*(cj0)*(px)*(x75))));
                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                            {
                                j1valid[0] = j1valid[1] = true;
                                j1array[0] = IKasin(sj1array[0]);
                                cj1array[0] = IKcos(j1array[0]);
                                sj1array[1] = sj1array[0];
                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                cj1array[1] = -cj1array[0];
                            }
                            else if( isnan(sj1array[0]) )
                            {
                                // probably any value will work
                                j1valid[0] = true;
                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                            }
                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                j1valid[1]=false;
                            for(int ij1 = 0; ij1 < 2; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                    IKReal x76=((cj0)*(py));
                    IKReal x77=((0.276500000000000)*(sj3));
                    IKReal x78=((px)*(sj0));
                    IKReal x79=((x77)+(x78));
                    evalcond[0]=((IKabs(pz))+(IKabs(((IKfmod(((((1.50000000000000)*(3.14159265358979)))+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979)))))));
                    evalcond[1]=((((-1.00000000000000)*(x76)))+(x79));
                    evalcond[2]=((0.184036250000000)+(((0.181384000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                    evalcond[3]=((((-1.00000000000000)*(x79)))+(x76));
                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                    {
                    {
                        IKReal j1eval[1];
                        j1eval[0]=((0.328000000000000)+(((0.276500000000000)*(cj3))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j1eval[1];
                                    j1eval[0]=((((cj0)*(px)))+(((py)*(sj0))));
                                    if( IKabs(j1eval[0]) < 0.000001  )
                                    {
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[1];
                                                j1eval[0]=((((-0.276500000000000)*(cj0)*(cj3)))+(((-0.328000000000000)*(cj0))));
                                                if( IKabs(j1eval[0]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[5];
                                                        IKReal x80=x77;
                                                        IKReal x81=((px)+(x80));
                                                        IKReal x82=((-1.00000000000000)*(x81));
                                                        evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x81;
                                                        evalcond[2]=((0.184036250000000)+(((0.181384000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x82;
                                                        evalcond[4]=x82;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[1];
                                                            j1eval[0]=((0.328000000000000)+(((0.276500000000000)*(cj3))));
                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                            {
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[1];
                                                                        j1eval[0]=py;
                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                        {
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[1];
                                                                                    j1eval[0]=py;
                                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                        bool j1valid[2]={false};
                                                                                        IKReal x83=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                                        sj1array[0]=((((-0.0474569359756098)*(x83)))+(((-1.52439024390244)*(x83)*((px)*(px))))+(((-1.52439024390244)*(py))));
                                                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                        {
                                                                                            j1valid[0] = j1valid[1] = true;
                                                                                            j1array[0] = IKasin(sj1array[0]);
                                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                                            sj1array[1] = sj1array[0];
                                                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                            cj1array[1] = -cj1array[0];
                                                                                        }
                                                                                        else if( isnan(sj1array[0]) )
                                                                                        {
                                                                                            // probably any value will work
                                                                                            j1valid[0] = true;
                                                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                        }
                                                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                            j1valid[1]=false;
                                                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                            bool j1valid[2]={false};
                                                                            IKReal x84=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                            sj1array[0]=((((-0.276500000000000)*(cj3)*(x84)))+(((-0.328000000000000)*(x84))));
                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                            {
                                                                                j1valid[0] = j1valid[1] = true;
                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                sj1array[1] = sj1array[0];
                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                cj1array[1] = -cj1array[0];
                                                                            }
                                                                            else if( isnan(sj1array[0]) )
                                                                            {
                                                                                // probably any value will work
                                                                                j1valid[0] = true;
                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                            }
                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                j1valid[1]=false;
                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                bool j1valid[2]={false};
                                                                sj1array[0]=((-1.00000000000000)*(py)*(((IKabs(((0.328000000000000)+(((0.276500000000000)*(cj3))))) != 0)?((IKReal)1/(((0.328000000000000)+(((0.276500000000000)*(cj3)))))):(IKReal)1.0e30)));
                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                {
                                                                    j1valid[0] = j1valid[1] = true;
                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                    sj1array[1] = sj1array[0];
                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                    cj1array[1] = -cj1array[0];
                                                                }
                                                                else if( isnan(sj1array[0]) )
                                                                {
                                                                    // probably any value will work
                                                                    j1valid[0] = true;
                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                }
                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                    j1valid[1]=false;
                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x85=x77;
                                                        IKReal x86=((x85)+(((-1.00000000000000)*(px))));
                                                        evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x86;
                                                        evalcond[2]=((0.184036250000000)+(((0.181384000000000)*(cj3)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x86;
                                                        evalcond[4]=((px)+(((-1.00000000000000)*(x85))));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[1];
                                                            j1eval[0]=((0.328000000000000)+(((0.276500000000000)*(cj3))));
                                                            if( IKabs(j1eval[0]) < 0.000001  )
                                                            {
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[1];
                                                                        j1eval[0]=py;
                                                                        if( IKabs(j1eval[0]) < 0.000001  )
                                                                        {
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[1];
                                                                                    j1eval[0]=py;
                                                                                    if( IKabs(j1eval[0]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                        bool j1valid[2]={false};
                                                                                        IKReal x87=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                                        sj1array[0]=((((1.52439024390244)*(py)))+(((1.52439024390244)*(x87)*((px)*(px))))+(((0.0474569359756098)*(x87))));
                                                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                        {
                                                                                            j1valid[0] = j1valid[1] = true;
                                                                                            j1array[0] = IKasin(sj1array[0]);
                                                                                            cj1array[0] = IKcos(j1array[0]);
                                                                                            sj1array[1] = sj1array[0];
                                                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                            cj1array[1] = -cj1array[0];
                                                                                        }
                                                                                        else if( isnan(sj1array[0]) )
                                                                                        {
                                                                                            // probably any value will work
                                                                                            j1valid[0] = true;
                                                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                        }
                                                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                            j1valid[1]=false;
                                                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                            bool j1valid[2]={false};
                                                                            IKReal x88=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                            sj1array[0]=((((0.276500000000000)*(cj3)*(x88)))+(((0.328000000000000)*(x88))));
                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                            {
                                                                                j1valid[0] = j1valid[1] = true;
                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                sj1array[1] = sj1array[0];
                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                cj1array[1] = -cj1array[0];
                                                                            }
                                                                            else if( isnan(sj1array[0]) )
                                                                            {
                                                                                // probably any value will work
                                                                                j1valid[0] = true;
                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                            }
                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                j1valid[1]=false;
                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                bool j1valid[2]={false};
                                                                sj1array[0]=((py)*(((IKabs(((0.328000000000000)+(((0.276500000000000)*(cj3))))) != 0)?((IKReal)1/(((0.328000000000000)+(((0.276500000000000)*(cj3)))))):(IKReal)1.0e30)));
                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                {
                                                                    j1valid[0] = j1valid[1] = true;
                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                    sj1array[1] = sj1array[0];
                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                    cj1array[1] = -cj1array[0];
                                                                }
                                                                else if( isnan(sj1array[0]) )
                                                                {
                                                                    // probably any value will work
                                                                    j1valid[0] = true;
                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                }
                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                    j1valid[1]=false;
                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        continue;
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                    bool j1valid[2]={false};
                                                    IKReal x89=((0.328000000000000)*(cj0));
                                                    IKReal x90=((0.276500000000000)*(cj0)*(cj3));
                                                    IKReal x91=((x89)+(x90));
                                                    IKReal x92=((-1.00000000000000)*(x91));
                                                    IKReal x93=((IKabs(x92) != 0)?((IKReal)1/(x92)):(IKReal)1.0e30);
                                                    sj1array[0]=((((0.276500000000000)*(sj0)*(sj3)*(x93)))+(((px)*(x93))));
                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                    {
                                                        j1valid[0] = j1valid[1] = true;
                                                        j1array[0] = IKasin(sj1array[0]);
                                                        cj1array[0] = IKcos(j1array[0]);
                                                        sj1array[1] = sj1array[0];
                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                        cj1array[1] = -cj1array[0];
                                                    }
                                                    else if( isnan(sj1array[0]) )
                                                    {
                                                        // probably any value will work
                                                        j1valid[0] = true;
                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                    }
                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                        j1valid[1]=false;
                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                        bool j1valid[2]={false};
                                        IKReal x94=((cj0)*(px));
                                        IKReal x95=((py)*(sj0));
                                        IKReal x96=((x95)+(x94));
                                        IKReal x97=((IKabs(x96) != 0)?((IKReal)1/(x96)):(IKReal)1.0e30);
                                        sj1array[0]=((((-0.276500000000000)*(cj3)*(x97)))+(((-0.328000000000000)*(x97))));
                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                        {
                                            j1valid[0] = j1valid[1] = true;
                                            j1array[0] = IKasin(sj1array[0]);
                                            cj1array[0] = IKcos(j1array[0]);
                                            sj1array[1] = sj1array[0];
                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                            cj1array[1] = -cj1array[0];
                                        }
                                        else if( isnan(sj1array[0]) )
                                        {
                                            // probably any value will work
                                            j1valid[0] = true;
                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                        }
                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                            j1valid[1]=false;
                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[2], cj1array[2], sj1array[2];
                            bool j1valid[2]={false};
                            IKReal x98=((0.276500000000000)*(cj3));
                            IKReal x99=((0.328000000000000)+(x98));
                            IKReal x100=((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30);
                            sj1array[0]=((((-1.00000000000000)*(cj0)*(px)*(x100)))+(((-1.00000000000000)*(py)*(sj0)*(x100))));
                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                            {
                                j1valid[0] = j1valid[1] = true;
                                j1array[0] = IKasin(sj1array[0]);
                                cj1array[0] = IKcos(j1array[0]);
                                sj1array[1] = sj1array[0];
                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                cj1array[1] = -cj1array[0];
                            }
                            else if( isnan(sj1array[0]) )
                            {
                                // probably any value will work
                                j1valid[0] = true;
                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                            }
                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                j1valid[1]=false;
                            for(int ij1 = 0; ij1 < 2; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                    evalcond[0]=((IKabs(((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))))))+(IKabs(pz)));
                    evalcond[1]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                    {
                    {
                        IKReal j1eval[2];
                        j1eval[0]=cj0;
                        j1eval[1]=((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2))));
                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                        {
                            {
                            IKReal evalcond[4];
                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                evalcond[1]=px;
                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                evalcond[3]=((-1.00000000000000)*(px));
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                    IKReal j1eval[2];
                                    j1eval[0]=cj2;
                                    j1eval[1]=py;
                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                    {
                                        {
                                        IKReal evalcond[4];
                                            evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=px;
                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=((-1.00000000000000)*(px));
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((-1.65425971877585)*(py));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                            evalcond[1]=px;
                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=((-1.00000000000000)*(px));
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((-1.65425971877585)*(py));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=py;
                                                j1eval[1]=sj2;
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[4];
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=px;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(px));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((-1.65425971877585)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=px;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(px));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((-1.65425971877585)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=py;
                                                            j1eval[1]=cj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[4];
                                                                    evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=px;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(px));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-1.65425971877585)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=px;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(px));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-1.65425971877585)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    continue;
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                IKReal x101=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                j1array[0]=IKatan2(((-0.604500000000000)*(x101)), ((px)*(sj2)*(x101)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((-1.65425971877585)*(py)), ((-1.00000000000000)*(cj2)*(px)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        j1array[0]=IKatan2(((-1.65425971877585)*(py)), ((px)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                                IKReal x102=((-1.00000000000000)*(px));
                                evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                evalcond[1]=x102;
                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                evalcond[3]=x102;
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                    IKReal j1eval[2];
                                    j1eval[0]=cj2;
                                    j1eval[1]=py;
                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                    {
                                        {
                                        IKReal evalcond[6];
                                            IKReal x103=x102;
                                            evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=x103;
                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=x103;
                                            evalcond[4]=x103;
                                            evalcond[5]=x103;
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((1.65425971877585)*(py));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            IKReal x104=x102;
                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                            evalcond[1]=x104;
                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=x104;
                                            evalcond[4]=px;
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((1.65425971877585)*(py));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=py;
                                                j1eval[1]=sj2;
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[5];
                                                        IKReal x105=x102;
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=x105;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x105;
                                                        evalcond[4]=px;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((1.65425971877585)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x106=x102;
                                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x106;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x106;
                                                        evalcond[4]=x106;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((1.65425971877585)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=py;
                                                            j1eval[1]=cj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[6];
                                                                    IKReal x107=x102;
                                                                    evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=x107;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x107;
                                                                    evalcond[4]=x107;
                                                                    evalcond[5]=x107;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((1.65425971877585)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    IKReal x108=x102;
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=x108;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x108;
                                                                    evalcond[4]=px;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((1.65425971877585)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    continue;
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                IKReal x109=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                j1array[0]=IKatan2(((0.604500000000000)*(x109)), ((px)*(sj2)*(x109)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((1.65425971877585)*(py)), ((-1.00000000000000)*(cj2)*(px)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        j1array[0]=IKatan2(((1.65425971877585)*(py)), ((px)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                                IKReal x110=((cj0)*(py));
                                IKReal x111=((px)*(sj0));
                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                evalcond[1]=((((-1.00000000000000)*(x110)))+(x111));
                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                evalcond[3]=((((-1.00000000000000)*(x111)))+(x110));
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                IKReal j1array[2], cj1array[2], sj1array[2];
                                bool j1valid[2]={false};
                                sj1array[0]=((((-1.65425971877585)*(cj0)*(px)))+(((-1.65425971877585)*(py)*(sj0))));
                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                {
                                    j1valid[0] = j1valid[1] = true;
                                    j1array[0] = IKasin(sj1array[0]);
                                    cj1array[0] = IKcos(j1array[0]);
                                    sj1array[1] = sj1array[0];
                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                    cj1array[1] = -cj1array[0];
                                }
                                else if( isnan(sj1array[0]) )
                                {
                                    // probably any value will work
                                    j1valid[0] = true;
                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                }
                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                    j1valid[1]=false;
                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                {
                                if( !j1valid[ij1] ) { continue; }
                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                
                                rotationfunction0(vsolutions);
                                }
                                }
                            
                            } else
                            {
                                IKReal x112=((px)*(sj0));
                                IKReal x113=((cj0)*(py));
                                IKReal x114=((((-1.00000000000000)*(x113)))+(x112));
                                evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                evalcond[1]=x114;
                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                evalcond[3]=x114;
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                IKReal j1array[2], cj1array[2], sj1array[2];
                                bool j1valid[2]={false};
                                sj1array[0]=((((-1.65425971877585)*(cj0)*(px)))+(((-1.65425971877585)*(py)*(sj0))));
                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                {
                                    j1valid[0] = j1valid[1] = true;
                                    j1array[0] = IKasin(sj1array[0]);
                                    cj1array[0] = IKcos(j1array[0]);
                                    sj1array[1] = sj1array[0];
                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                    cj1array[1] = -cj1array[0];
                                }
                                else if( isnan(sj1array[0]) )
                                {
                                    // probably any value will work
                                    j1valid[0] = true;
                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                }
                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                    j1valid[1]=false;
                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                {
                                if( !j1valid[ij1] ) { continue; }
                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                
                                rotationfunction0(vsolutions);
                                }
                                }
                            
                            } else
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j1eval[2];
                                    j1eval[0]=cj0;
                                    j1eval[1]=((((-1.00000000000000)*(cj2)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj2)*(px))));
                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                    {
                                        {
                                        IKReal evalcond[5];
                                            evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=px;
                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=((-1.00000000000000)*(px));
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=cj2;
                                                j1eval[1]=py;
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[4];
                                                        evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=px;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(px));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((-1.65425971877585)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=px;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(px));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((-1.65425971877585)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=py;
                                                            j1eval[1]=sj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[4];
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=px;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(px));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-1.65425971877585)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=px;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(px));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-1.65425971877585)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[2];
                                                                        j1eval[0]=py;
                                                                        j1eval[1]=cj2;
                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[4];
                                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                evalcond[1]=px;
                                                                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(px));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((-1.65425971877585)*(py));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                evalcond[1]=px;
                                                                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(px));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((-1.65425971877585)*(py));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                continue;
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            IKReal x115=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                            j1array[0]=IKatan2(((-0.604500000000000)*(x115)), ((px)*(sj2)*(x115)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                j1array[0]=IKatan2(((-1.65425971877585)*(py)), ((-1.00000000000000)*(cj2)*(px)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((-1.65425971877585)*(py)), ((px)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                            IKReal x116=((-1.00000000000000)*(px));
                                            evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=x116;
                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=x116;
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=cj2;
                                                j1eval[1]=py;
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[6];
                                                        IKReal x117=x116;
                                                        evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x117;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x117;
                                                        evalcond[4]=x117;
                                                        evalcond[5]=x117;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((1.65425971877585)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x118=x116;
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=x118;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x118;
                                                        evalcond[4]=px;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((1.65425971877585)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=py;
                                                            j1eval[1]=sj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[5];
                                                                    IKReal x119=x116;
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=x119;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x119;
                                                                    evalcond[4]=px;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((1.65425971877585)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    IKReal x120=x116;
                                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=x120;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x120;
                                                                    evalcond[4]=x120;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((1.65425971877585)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[2];
                                                                        j1eval[0]=py;
                                                                        j1eval[1]=cj2;
                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[6];
                                                                                IKReal x121=x116;
                                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                evalcond[1]=x121;
                                                                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x121;
                                                                                evalcond[4]=x121;
                                                                                evalcond[5]=x121;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((1.65425971877585)*(py));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                IKReal x122=x116;
                                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                evalcond[1]=x122;
                                                                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x122;
                                                                                evalcond[4]=px;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((1.65425971877585)*(py));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                continue;
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            IKReal x123=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                            j1array[0]=IKatan2(((0.604500000000000)*(x123)), ((px)*(sj2)*(x123)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                j1array[0]=IKatan2(((1.65425971877585)*(py)), ((-1.00000000000000)*(cj2)*(px)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((1.65425971877585)*(py)), ((px)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                            IKReal x124=((px)*(sj0));
                                            IKReal x125=((cj0)*(py));
                                            IKReal x126=((((-1.00000000000000)*(x125)))+(x124));
                                            evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=x126;
                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=x126;
                                            evalcond[4]=x126;
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((((-1.65425971877585)*(cj0)*(px)))+(((-1.65425971877585)*(py)*(sj0))));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            IKReal x127=((cj0)*(py));
                                            IKReal x128=((px)*(sj0));
                                            IKReal x129=((((-1.00000000000000)*(x128)))+(x127));
                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                            evalcond[1]=((((-1.00000000000000)*(x127)))+(x128));
                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=x129;
                                            evalcond[4]=x129;
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((((-1.65425971877585)*(cj0)*(px)))+(((-1.65425971877585)*(py)*(sj0))));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=sj0;
                                                j1eval[1]=((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2))));
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[4];
                                                        IKReal x130=x8;
                                                        evalcond[0]=((IKfmod(((3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x130;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x130;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=px;
                                                            j1eval[1]=sj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[5];
                                                                    IKReal x131=x8;
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=x131;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x131;
                                                                    evalcond[4]=py;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-1.65425971877585)*(px));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    IKReal x132=x8;
                                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=x132;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x132;
                                                                    evalcond[4]=x132;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-1.65425971877585)*(px));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[2];
                                                                        j1eval[0]=cj2;
                                                                        j1eval[1]=px;
                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[6];
                                                                                IKReal x133=x8;
                                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                evalcond[1]=x133;
                                                                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x133;
                                                                                evalcond[4]=x133;
                                                                                evalcond[5]=x133;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((-1.65425971877585)*(px));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                IKReal x134=x8;
                                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                evalcond[1]=x134;
                                                                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x134;
                                                                                evalcond[4]=py;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((-1.65425971877585)*(px));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[2];
                                                                                    j1eval[0]=px;
                                                                                    j1eval[1]=sj2;
                                                                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                        IKReal evalcond[5];
                                                                                            IKReal x135=x8;
                                                                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                            evalcond[1]=x135;
                                                                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                            evalcond[3]=x135;
                                                                                            evalcond[4]=py;
                                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                            {
                                                                                            {
                                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                            bool j1valid[2]={false};
                                                                                            sj1array[0]=((-1.65425971877585)*(px));
                                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                            {
                                                                                                j1valid[0] = j1valid[1] = true;
                                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                                sj1array[1] = sj1array[0];
                                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                                cj1array[1] = -cj1array[0];
                                                                                            }
                                                                                            else if( isnan(sj1array[0]) )
                                                                                            {
                                                                                                // probably any value will work
                                                                                                j1valid[0] = true;
                                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                            }
                                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                                j1valid[1]=false;
                                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                            {
                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                            
                                                                                            rotationfunction0(vsolutions);
                                                                                            }
                                                                                            }
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                            IKReal x136=x8;
                                                                                            evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                            evalcond[1]=x136;
                                                                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                            evalcond[3]=x136;
                                                                                            evalcond[4]=x136;
                                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                            {
                                                                                            {
                                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                            bool j1valid[2]={false};
                                                                                            sj1array[0]=((-1.65425971877585)*(px));
                                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                            {
                                                                                                j1valid[0] = j1valid[1] = true;
                                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                                sj1array[1] = sj1array[0];
                                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                                cj1array[1] = -cj1array[0];
                                                                                            }
                                                                                            else if( isnan(sj1array[0]) )
                                                                                            {
                                                                                                // probably any value will work
                                                                                                j1valid[0] = true;
                                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                            }
                                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                                j1valid[1]=false;
                                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                            {
                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                            
                                                                                            rotationfunction0(vsolutions);
                                                                                            }
                                                                                            }
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]={false};
                                                                                        IKReal x137=((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30);
                                                                                        j1array[0]=IKatan2(((-0.604500000000000)*(x137)), ((cj2)*(py)*(x137)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                            j1array[0]-=IK2PI;
                                                                                        else if( j1array[0] < -IKPI )
                                                                                            j1array[0]+=IK2PI;
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            j1array[0]=IKatan2(((-1.65425971877585)*(px)), ((-1.00000000000000)*(py)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                j1array[0]=IKatan2(((-1.65425971877585)*(px)), ((cj2)*(py)*(((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=py;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(py));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=px;
                                                            j1eval[1]=sj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[4];
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=py;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(py));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((1.65425971877585)*(px));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=py;
                                                                    evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(py));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((1.65425971877585)*(px));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[2];
                                                                        j1eval[0]=cj2;
                                                                        j1eval[1]=px;
                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[4];
                                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                evalcond[1]=py;
                                                                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(py));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((1.65425971877585)*(px));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                evalcond[1]=py;
                                                                                evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(py));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((1.65425971877585)*(px));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[2];
                                                                                    j1eval[0]=px;
                                                                                    j1eval[1]=sj2;
                                                                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                        IKReal evalcond[4];
                                                                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                            evalcond[1]=py;
                                                                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                            evalcond[3]=((-1.00000000000000)*(py));
                                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                            {
                                                                                            {
                                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                            bool j1valid[2]={false};
                                                                                            sj1array[0]=((1.65425971877585)*(px));
                                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                            {
                                                                                                j1valid[0] = j1valid[1] = true;
                                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                                sj1array[1] = sj1array[0];
                                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                                cj1array[1] = -cj1array[0];
                                                                                            }
                                                                                            else if( isnan(sj1array[0]) )
                                                                                            {
                                                                                                // probably any value will work
                                                                                                j1valid[0] = true;
                                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                            }
                                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                                j1valid[1]=false;
                                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                            {
                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                            
                                                                                            rotationfunction0(vsolutions);
                                                                                            }
                                                                                            }
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                            evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                            evalcond[1]=py;
                                                                                            evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                            evalcond[3]=((-1.00000000000000)*(py));
                                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                            {
                                                                                            {
                                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                            bool j1valid[2]={false};
                                                                                            sj1array[0]=((1.65425971877585)*(px));
                                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                            {
                                                                                                j1valid[0] = j1valid[1] = true;
                                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                                sj1array[1] = sj1array[0];
                                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                                cj1array[1] = -cj1array[0];
                                                                                            }
                                                                                            else if( isnan(sj1array[0]) )
                                                                                            {
                                                                                                // probably any value will work
                                                                                                j1valid[0] = true;
                                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                            }
                                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                                j1valid[1]=false;
                                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                            {
                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                            
                                                                                            rotationfunction0(vsolutions);
                                                                                            }
                                                                                            }
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]={false};
                                                                                        IKReal x138=((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30);
                                                                                        j1array[0]=IKatan2(((0.604500000000000)*(x138)), ((cj2)*(py)*(x138)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                            j1array[0]-=IK2PI;
                                                                                        else if( j1array[0] < -IKPI )
                                                                                            j1array[0]+=IK2PI;
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            j1array[0]=IKatan2(((1.65425971877585)*(px)), ((-1.00000000000000)*(py)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                j1array[0]=IKatan2(((1.65425971877585)*(px)), ((cj2)*(py)*(((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x139=((cj0)*(py));
                                                        IKReal x140=((px)*(sj0));
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=((x140)+(((-1.00000000000000)*(x139))));
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((((-1.00000000000000)*(x140)))+(x139));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((((-1.65425971877585)*(cj0)*(px)))+(((-1.65425971877585)*(py)*(sj0))));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x141=((px)*(sj0));
                                                        IKReal x142=((cj0)*(py));
                                                        IKReal x143=((((-1.00000000000000)*(x142)))+(x141));
                                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x143;
                                                        evalcond[2]=((0.365420250000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x143;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((((-1.65425971877585)*(cj0)*(px)))+(((-1.65425971877585)*(py)*(sj0))));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        continue;
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((-1.65425971877585)*(py)*(((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30))), ((((IKabs(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((cj2)*(px)*(sj0)))))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        j1array[0]=IKatan2(((-1.65425971877585)*(px)*(((IKabs(cj0) != 0)?((IKReal)1/(cj0)):(IKReal)1.0e30))), ((((IKabs(((((-1.00000000000000)*(cj2)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj2)*(px))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(cj2)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj2)*(px)))))):(IKReal)1.0e30))*(((((cj0)*(py)*(sj2)))+(((-1.00000000000000)*(px)*(sj0)*(sj2)))))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                            }
                            }
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            j1array[0]=IKatan2(((-1.65425971877585)*(px)*(((IKabs(cj0) != 0)?((IKReal)1/(cj0)):(IKReal)1.0e30))), ((((IKabs(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((cj2)*(px)*(sj0)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                    evalcond[0]=((IKabs(((IKfmod(j3, ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))))))+(IKabs(pz)));
                    evalcond[1]=((((-1.00000000000000)*(cj0)*(py)))+(((px)*(sj0))));
                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                    {
                    {
                        IKReal j1eval[2];
                        j1eval[0]=cj0;
                        j1eval[1]=((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2))));
                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                        {
                            {
                            IKReal evalcond[4];
                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                evalcond[1]=px;
                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                evalcond[3]=((-1.00000000000000)*(px));
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                    IKReal j1eval[2];
                                    j1eval[0]=cj2;
                                    j1eval[1]=py;
                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                    {
                                        {
                                        IKReal evalcond[4];
                                            evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=px;
                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=((-1.00000000000000)*(px));
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((-19.4174757281553)*(py));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                            evalcond[1]=px;
                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=((-1.00000000000000)*(px));
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((-19.4174757281553)*(py));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=py;
                                                j1eval[1]=sj2;
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[4];
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=px;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(px));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((-19.4174757281553)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=px;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(px));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((-19.4174757281553)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=py;
                                                            j1eval[1]=cj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[4];
                                                                    evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=px;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(px));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-19.4174757281553)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=px;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(px));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-19.4174757281553)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    continue;
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                IKReal x144=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                j1array[0]=IKatan2(((-0.0515000000000000)*(x144)), ((px)*(sj2)*(x144)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((-19.4174757281553)*(py)), ((-1.00000000000000)*(cj2)*(px)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        j1array[0]=IKatan2(((-19.4174757281553)*(py)), ((px)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                                IKReal x145=((-1.00000000000000)*(px));
                                evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                evalcond[1]=x145;
                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                evalcond[3]=x145;
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                    IKReal j1eval[2];
                                    j1eval[0]=cj2;
                                    j1eval[1]=py;
                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                    {
                                        {
                                        IKReal evalcond[6];
                                            IKReal x146=x145;
                                            evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=x146;
                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=x146;
                                            evalcond[4]=x146;
                                            evalcond[5]=px;
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((19.4174757281553)*(py));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            IKReal x147=x145;
                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                            evalcond[1]=x147;
                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=x147;
                                            evalcond[4]=px;
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((19.4174757281553)*(py));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=py;
                                                j1eval[1]=sj2;
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[5];
                                                        IKReal x148=x145;
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=x148;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x148;
                                                        evalcond[4]=px;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((19.4174757281553)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x149=x145;
                                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x149;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x149;
                                                        evalcond[4]=x149;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((19.4174757281553)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=py;
                                                            j1eval[1]=cj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[6];
                                                                    IKReal x150=x145;
                                                                    evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=x150;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x150;
                                                                    evalcond[4]=x150;
                                                                    evalcond[5]=px;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((19.4174757281553)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    IKReal x151=x145;
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=x151;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x151;
                                                                    evalcond[4]=px;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((19.4174757281553)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    continue;
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                IKReal x152=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                j1array[0]=IKatan2(((0.0515000000000000)*(x152)), ((px)*(sj2)*(x152)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((19.4174757281553)*(py)), ((-1.00000000000000)*(cj2)*(px)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        j1array[0]=IKatan2(((19.4174757281553)*(py)), ((px)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                                IKReal x153=((cj0)*(py));
                                IKReal x154=((px)*(sj0));
                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                evalcond[1]=((((-1.00000000000000)*(x153)))+(x154));
                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                evalcond[3]=((((-1.00000000000000)*(x154)))+(x153));
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                IKReal j1array[2], cj1array[2], sj1array[2];
                                bool j1valid[2]={false};
                                sj1array[0]=((((-19.4174757281553)*(cj0)*(px)))+(((-19.4174757281553)*(py)*(sj0))));
                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                {
                                    j1valid[0] = j1valid[1] = true;
                                    j1array[0] = IKasin(sj1array[0]);
                                    cj1array[0] = IKcos(j1array[0]);
                                    sj1array[1] = sj1array[0];
                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                    cj1array[1] = -cj1array[0];
                                }
                                else if( isnan(sj1array[0]) )
                                {
                                    // probably any value will work
                                    j1valid[0] = true;
                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                }
                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                    j1valid[1]=false;
                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                {
                                if( !j1valid[ij1] ) { continue; }
                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                
                                rotationfunction0(vsolutions);
                                }
                                }
                            
                            } else
                            {
                                IKReal x155=((px)*(sj0));
                                IKReal x156=((cj0)*(py));
                                IKReal x157=((((-1.00000000000000)*(x156)))+(x155));
                                evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                evalcond[1]=x157;
                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                evalcond[3]=x157;
                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                {
                                {
                                IKReal j1array[2], cj1array[2], sj1array[2];
                                bool j1valid[2]={false};
                                sj1array[0]=((((-19.4174757281553)*(cj0)*(px)))+(((-19.4174757281553)*(py)*(sj0))));
                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                {
                                    j1valid[0] = j1valid[1] = true;
                                    j1array[0] = IKasin(sj1array[0]);
                                    cj1array[0] = IKcos(j1array[0]);
                                    sj1array[1] = sj1array[0];
                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                    cj1array[1] = -cj1array[0];
                                }
                                else if( isnan(sj1array[0]) )
                                {
                                    // probably any value will work
                                    j1valid[0] = true;
                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                }
                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                    j1valid[1]=false;
                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                {
                                if( !j1valid[ij1] ) { continue; }
                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                
                                rotationfunction0(vsolutions);
                                }
                                }
                            
                            } else
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j1eval[2];
                                    j1eval[0]=cj0;
                                    j1eval[1]=((((-1.00000000000000)*(cj2)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj2)*(px))));
                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                    {
                                        {
                                        IKReal evalcond[5];
                                            evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=px;
                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=((-1.00000000000000)*(px));
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=cj2;
                                                j1eval[1]=py;
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[4];
                                                        evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=px;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(px));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((-19.4174757281553)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=px;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(px));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((-19.4174757281553)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=py;
                                                            j1eval[1]=sj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[4];
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=px;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(px));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-19.4174757281553)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=px;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(px));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-19.4174757281553)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[2];
                                                                        j1eval[0]=py;
                                                                        j1eval[1]=cj2;
                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[4];
                                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                evalcond[1]=px;
                                                                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(px));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((-19.4174757281553)*(py));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                evalcond[1]=px;
                                                                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(px));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((-19.4174757281553)*(py));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                continue;
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            IKReal x158=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                            j1array[0]=IKatan2(((-0.0515000000000000)*(x158)), ((px)*(sj2)*(x158)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                j1array[0]=IKatan2(((-19.4174757281553)*(py)), ((-1.00000000000000)*(cj2)*(px)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((-19.4174757281553)*(py)), ((px)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                            IKReal x159=((-1.00000000000000)*(px));
                                            evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=x159;
                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=x159;
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=cj2;
                                                j1eval[1]=py;
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[6];
                                                        IKReal x160=x159;
                                                        evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x160;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x160;
                                                        evalcond[4]=x160;
                                                        evalcond[5]=px;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((19.4174757281553)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x161=x159;
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=x161;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x161;
                                                        evalcond[4]=px;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((19.4174757281553)*(py));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=py;
                                                            j1eval[1]=sj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[5];
                                                                    IKReal x162=x159;
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=x162;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x162;
                                                                    evalcond[4]=px;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((19.4174757281553)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    IKReal x163=x159;
                                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=x163;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x163;
                                                                    evalcond[4]=x163;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((19.4174757281553)*(py));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[2];
                                                                        j1eval[0]=py;
                                                                        j1eval[1]=cj2;
                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[6];
                                                                                IKReal x164=x159;
                                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                evalcond[1]=x164;
                                                                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x164;
                                                                                evalcond[4]=x164;
                                                                                evalcond[5]=px;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((19.4174757281553)*(py));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                IKReal x165=x159;
                                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                evalcond[1]=x165;
                                                                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x165;
                                                                                evalcond[4]=px;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((19.4174757281553)*(py));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                continue;
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            IKReal x166=((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30);
                                                                            j1array[0]=IKatan2(((0.0515000000000000)*(x166)), ((px)*(sj2)*(x166)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                j1array[0]=IKatan2(((19.4174757281553)*(py)), ((-1.00000000000000)*(cj2)*(px)*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((19.4174757281553)*(py)), ((px)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(py) != 0)?((IKReal)1/(py)):(IKReal)1.0e30))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                            IKReal x167=((px)*(sj0));
                                            IKReal x168=((cj0)*(py));
                                            IKReal x169=((((-1.00000000000000)*(x168)))+(x167));
                                            evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                            evalcond[1]=x169;
                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=x169;
                                            evalcond[4]=((((-1.00000000000000)*(x167)))+(x168));
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((((-19.4174757281553)*(cj0)*(px)))+(((-19.4174757281553)*(py)*(sj0))));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            IKReal x170=((cj0)*(py));
                                            IKReal x171=((px)*(sj0));
                                            IKReal x172=((((-1.00000000000000)*(x170)))+(x171));
                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                            evalcond[1]=x172;
                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                            evalcond[3]=((((-1.00000000000000)*(x171)))+(x170));
                                            evalcond[4]=x172;
                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                            {
                                            {
                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                            bool j1valid[2]={false};
                                            sj1array[0]=((((-19.4174757281553)*(cj0)*(px)))+(((-19.4174757281553)*(py)*(sj0))));
                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                            {
                                                j1valid[0] = j1valid[1] = true;
                                                j1array[0] = IKasin(sj1array[0]);
                                                cj1array[0] = IKcos(j1array[0]);
                                                sj1array[1] = sj1array[0];
                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                cj1array[1] = -cj1array[0];
                                            }
                                            else if( isnan(sj1array[0]) )
                                            {
                                                // probably any value will work
                                                j1valid[0] = true;
                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                            }
                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                j1valid[1]=false;
                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                            {
                                            if( !j1valid[ij1] ) { continue; }
                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                            
                                            rotationfunction0(vsolutions);
                                            }
                                            }
                                        
                                        } else
                                        {
                                            if( 1 )
                                            {
                                            {
                                                IKReal j1eval[2];
                                                j1eval[0]=sj0;
                                                j1eval[1]=((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2))));
                                                if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                {
                                                    {
                                                    IKReal evalcond[4];
                                                        IKReal x173=x8;
                                                        evalcond[0]=((IKfmod(((3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x173;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x173;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=px;
                                                            j1eval[1]=sj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[5];
                                                                    IKReal x174=x8;
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=x174;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x174;
                                                                    evalcond[4]=py;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-19.4174757281553)*(px));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    IKReal x175=x8;
                                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=x175;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=x175;
                                                                    evalcond[4]=x175;
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((-19.4174757281553)*(px));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[2];
                                                                        j1eval[0]=cj2;
                                                                        j1eval[1]=px;
                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[6];
                                                                                IKReal x176=x8;
                                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                evalcond[1]=x176;
                                                                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x176;
                                                                                evalcond[4]=x176;
                                                                                evalcond[5]=py;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((-19.4174757281553)*(px));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                IKReal x177=x8;
                                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                evalcond[1]=x177;
                                                                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=x177;
                                                                                evalcond[4]=py;
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((-19.4174757281553)*(px));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[2];
                                                                                    j1eval[0]=px;
                                                                                    j1eval[1]=sj2;
                                                                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                        IKReal evalcond[5];
                                                                                            IKReal x178=x8;
                                                                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                            evalcond[1]=x178;
                                                                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                            evalcond[3]=x178;
                                                                                            evalcond[4]=py;
                                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                            {
                                                                                            {
                                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                            bool j1valid[2]={false};
                                                                                            sj1array[0]=((-19.4174757281553)*(px));
                                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                            {
                                                                                                j1valid[0] = j1valid[1] = true;
                                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                                sj1array[1] = sj1array[0];
                                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                                cj1array[1] = -cj1array[0];
                                                                                            }
                                                                                            else if( isnan(sj1array[0]) )
                                                                                            {
                                                                                                // probably any value will work
                                                                                                j1valid[0] = true;
                                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                            }
                                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                                j1valid[1]=false;
                                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                            {
                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                            
                                                                                            rotationfunction0(vsolutions);
                                                                                            }
                                                                                            }
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                            IKReal x179=x8;
                                                                                            evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                            evalcond[1]=x179;
                                                                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                            evalcond[3]=x179;
                                                                                            evalcond[4]=x179;
                                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                                            {
                                                                                            {
                                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                            bool j1valid[2]={false};
                                                                                            sj1array[0]=((-19.4174757281553)*(px));
                                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                            {
                                                                                                j1valid[0] = j1valid[1] = true;
                                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                                sj1array[1] = sj1array[0];
                                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                                cj1array[1] = -cj1array[0];
                                                                                            }
                                                                                            else if( isnan(sj1array[0]) )
                                                                                            {
                                                                                                // probably any value will work
                                                                                                j1valid[0] = true;
                                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                            }
                                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                                j1valid[1]=false;
                                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                            {
                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                            
                                                                                            rotationfunction0(vsolutions);
                                                                                            }
                                                                                            }
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]={false};
                                                                                        IKReal x180=((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30);
                                                                                        j1array[0]=IKatan2(((-0.0515000000000000)*(x180)), ((cj2)*(py)*(x180)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                            j1array[0]-=IK2PI;
                                                                                        else if( j1array[0] < -IKPI )
                                                                                            j1array[0]+=IK2PI;
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            j1array[0]=IKatan2(((-19.4174757281553)*(px)), ((-1.00000000000000)*(py)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                j1array[0]=IKatan2(((-19.4174757281553)*(px)), ((cj2)*(py)*(((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j0)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=py;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((-1.00000000000000)*(py));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                            IKReal j1eval[2];
                                                            j1eval[0]=px;
                                                            j1eval[1]=sj2;
                                                            if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                            {
                                                                {
                                                                IKReal evalcond[4];
                                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                    evalcond[1]=py;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(py));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((19.4174757281553)*(px));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                    evalcond[1]=py;
                                                                    evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                    evalcond[3]=((-1.00000000000000)*(py));
                                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                    {
                                                                    {
                                                                    IKReal j1array[2], cj1array[2], sj1array[2];
                                                                    bool j1valid[2]={false};
                                                                    sj1array[0]=((19.4174757281553)*(px));
                                                                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                    {
                                                                        j1valid[0] = j1valid[1] = true;
                                                                        j1array[0] = IKasin(sj1array[0]);
                                                                        cj1array[0] = IKcos(j1array[0]);
                                                                        sj1array[1] = sj1array[0];
                                                                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                        cj1array[1] = -cj1array[0];
                                                                    }
                                                                    else if( isnan(sj1array[0]) )
                                                                    {
                                                                        // probably any value will work
                                                                        j1valid[0] = true;
                                                                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                    }
                                                                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                        j1valid[1]=false;
                                                                    for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                    {
                                                                    if( !j1valid[ij1] ) { continue; }
                                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                    
                                                                    rotationfunction0(vsolutions);
                                                                    }
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                    if( 1 )
                                                                    {
                                                                    {
                                                                        IKReal j1eval[2];
                                                                        j1eval[0]=cj2;
                                                                        j1eval[1]=px;
                                                                        if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                        {
                                                                            {
                                                                            IKReal evalcond[4];
                                                                                evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                evalcond[1]=py;
                                                                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(py));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((19.4174757281553)*(px));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                evalcond[1]=py;
                                                                                evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                evalcond[3]=((-1.00000000000000)*(py));
                                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                {
                                                                                {
                                                                                IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                bool j1valid[2]={false};
                                                                                sj1array[0]=((19.4174757281553)*(px));
                                                                                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                {
                                                                                    j1valid[0] = j1valid[1] = true;
                                                                                    j1array[0] = IKasin(sj1array[0]);
                                                                                    cj1array[0] = IKcos(j1array[0]);
                                                                                    sj1array[1] = sj1array[0];
                                                                                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                    cj1array[1] = -cj1array[0];
                                                                                }
                                                                                else if( isnan(sj1array[0]) )
                                                                                {
                                                                                    // probably any value will work
                                                                                    j1valid[0] = true;
                                                                                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                }
                                                                                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                    j1valid[1]=false;
                                                                                for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                {
                                                                                if( !j1valid[ij1] ) { continue; }
                                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                
                                                                                rotationfunction0(vsolutions);
                                                                                }
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                                if( 1 )
                                                                                {
                                                                                {
                                                                                    IKReal j1eval[2];
                                                                                    j1eval[0]=px;
                                                                                    j1eval[1]=sj2;
                                                                                    if( IKabs(j1eval[0]) < 0.000001  || IKabs(j1eval[1]) < 0.000001  )
                                                                                    {
                                                                                        {
                                                                                        IKReal evalcond[4];
                                                                                            evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                                                            evalcond[1]=py;
                                                                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                            evalcond[3]=((-1.00000000000000)*(py));
                                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                            {
                                                                                            {
                                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                            bool j1valid[2]={false};
                                                                                            sj1array[0]=((19.4174757281553)*(px));
                                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                            {
                                                                                                j1valid[0] = j1valid[1] = true;
                                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                                sj1array[1] = sj1array[0];
                                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                                cj1array[1] = -cj1array[0];
                                                                                            }
                                                                                            else if( isnan(sj1array[0]) )
                                                                                            {
                                                                                                // probably any value will work
                                                                                                j1valid[0] = true;
                                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                            }
                                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                                j1valid[1]=false;
                                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                            {
                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                            
                                                                                            rotationfunction0(vsolutions);
                                                                                            }
                                                                                            }
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                            evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                                                            evalcond[1]=py;
                                                                                            evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                                                            evalcond[3]=((-1.00000000000000)*(py));
                                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                                                            {
                                                                                            {
                                                                                            IKReal j1array[2], cj1array[2], sj1array[2];
                                                                                            bool j1valid[2]={false};
                                                                                            sj1array[0]=((19.4174757281553)*(px));
                                                                                            if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                                                            {
                                                                                                j1valid[0] = j1valid[1] = true;
                                                                                                j1array[0] = IKasin(sj1array[0]);
                                                                                                cj1array[0] = IKcos(j1array[0]);
                                                                                                sj1array[1] = sj1array[0];
                                                                                                j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                                                                cj1array[1] = -cj1array[0];
                                                                                            }
                                                                                            else if( isnan(sj1array[0]) )
                                                                                            {
                                                                                                // probably any value will work
                                                                                                j1valid[0] = true;
                                                                                                cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                                                            }
                                                                                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                                                                j1valid[1]=false;
                                                                                            for(int ij1 = 0; ij1 < 2; ++ij1)
                                                                                            {
                                                                                            if( !j1valid[ij1] ) { continue; }
                                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                            
                                                                                            rotationfunction0(vsolutions);
                                                                                            }
                                                                                            }
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                            if( 1 )
                                                                                            {
                                                                                            continue;
                                                                                        
                                                                                        } else
                                                                                        {
                                                                                        }
                                                                                        }
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                                                                        bool j1valid[1]={false};
                                                                                        IKReal x181=((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30);
                                                                                        j1array[0]=IKatan2(((0.0515000000000000)*(x181)), ((cj2)*(py)*(x181)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                                        sj1array[0]=IKsin(j1array[0]);
                                                                                        cj1array[0]=IKcos(j1array[0]);
                                                                                        if( j1array[0] > IKPI )
                                                                                            j1array[0]-=IK2PI;
                                                                                        else if( j1array[0] < -IKPI )
                                                                                            j1array[0]+=IK2PI;
                                                                                        j1valid[0] = true;
                                                                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                                        {
                                                                                        if( !j1valid[ij1] ) { continue; }
                                                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                                        
                                                                                        rotationfunction0(vsolutions);
                                                                                        }
                                                                                        }
                                                                                    
                                                                                    }
                                                                                
                                                                                }
                                                                            
                                                                            } else
                                                                            {
                                                                            }
                                                                            }
                                                                            }
                                                                            }
                                                                        
                                                                        } else
                                                                        {
                                                                            {
                                                                            IKReal j1array[1], cj1array[1], sj1array[1];
                                                                            bool j1valid[1]={false};
                                                                            j1array[0]=IKatan2(((19.4174757281553)*(px)), ((-1.00000000000000)*(py)*(sj2)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30))));
                                                                            sj1array[0]=IKsin(j1array[0]);
                                                                            cj1array[0]=IKcos(j1array[0]);
                                                                            if( j1array[0] > IKPI )
                                                                                j1array[0]-=IK2PI;
                                                                            else if( j1array[0] < -IKPI )
                                                                                j1array[0]+=IK2PI;
                                                                            j1valid[0] = true;
                                                                            for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                            {
                                                                            if( !j1valid[ij1] ) { continue; }
                                                                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                        
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                } else
                                                                {
                                                                }
                                                                }
                                                                }
                                                                }
                                                            
                                                            } else
                                                            {
                                                                {
                                                                IKReal j1array[1], cj1array[1], sj1array[1];
                                                                bool j1valid[1]={false};
                                                                j1array[0]=IKatan2(((19.4174757281553)*(px)), ((cj2)*(py)*(((IKabs(px) != 0)?((IKReal)1/(px)):(IKReal)1.0e30))*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))));
                                                                sj1array[0]=IKsin(j1array[0]);
                                                                cj1array[0]=IKcos(j1array[0]);
                                                                if( j1array[0] > IKPI )
                                                                    j1array[0]-=IK2PI;
                                                                else if( j1array[0] < -IKPI )
                                                                    j1array[0]+=IK2PI;
                                                                j1valid[0] = true;
                                                                for(int ij1 = 0; ij1 < 1; ++ij1)
                                                                {
                                                                if( !j1valid[ij1] ) { continue; }
                                                                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                                
                                                                rotationfunction0(vsolutions);
                                                                }
                                                                }
                                                            
                                                            }
                                                        
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x182=((cj0)*(py));
                                                        IKReal x183=((px)*(sj0));
                                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                        evalcond[1]=((((-1.00000000000000)*(x182)))+(x183));
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=((((-1.00000000000000)*(x183)))+(x182));
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((((-19.4174757281553)*(cj0)*(px)))+(((-19.4174757281553)*(py)*(sj0))));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        IKReal x184=((px)*(sj0));
                                                        IKReal x185=((cj0)*(py));
                                                        IKReal x186=((((-1.00000000000000)*(x185)))+(x184));
                                                        evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                        evalcond[1]=x186;
                                                        evalcond[2]=((0.00265224999999999)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        evalcond[3]=x186;
                                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                        {
                                                        {
                                                        IKReal j1array[2], cj1array[2], sj1array[2];
                                                        bool j1valid[2]={false};
                                                        sj1array[0]=((((-19.4174757281553)*(cj0)*(px)))+(((-19.4174757281553)*(py)*(sj0))));
                                                        if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 )
                                                        {
                                                            j1valid[0] = j1valid[1] = true;
                                                            j1array[0] = IKasin(sj1array[0]);
                                                            cj1array[0] = IKcos(j1array[0]);
                                                            sj1array[1] = sj1array[0];
                                                            j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                                                            cj1array[1] = -cj1array[0];
                                                        }
                                                        else if( isnan(sj1array[0]) )
                                                        {
                                                            // probably any value will work
                                                            j1valid[0] = true;
                                                            cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                                                        }
                                                        if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                                            j1valid[1]=false;
                                                        for(int ij1 = 0; ij1 < 2; ++ij1)
                                                        {
                                                        if( !j1valid[ij1] ) { continue; }
                                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                        
                                                        rotationfunction0(vsolutions);
                                                        }
                                                        }
                                                    
                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                        continue;
                                                    
                                                    } else
                                                    {
                                                    }
                                                    }
                                                    }
                                                    }
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    {
                                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                                    bool j1valid[1]={false};
                                                    j1array[0]=IKatan2(((-19.4174757281553)*(py)*(((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30))), ((((IKabs(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((cj2)*(px)*(sj0)))))));
                                                    sj1array[0]=IKsin(j1array[0]);
                                                    cj1array[0]=IKcos(j1array[0]);
                                                    if( j1array[0] > IKPI )
                                                        j1array[0]-=IK2PI;
                                                    else if( j1array[0] < -IKPI )
                                                        j1array[0]+=IK2PI;
                                                    j1valid[0] = true;
                                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                                    {
                                                    if( !j1valid[ij1] ) { continue; }
                                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                }
                                            
                                            }
                                        
                                        } else
                                        {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        j1array[0]=IKatan2(((-19.4174757281553)*(px)*(((IKabs(cj0) != 0)?((IKReal)1/(cj0)):(IKReal)1.0e30))), ((((IKabs(((((-1.00000000000000)*(cj2)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj2)*(px))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(cj2)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj2)*(px)))))):(IKReal)1.0e30))*(((((cj0)*(py)*(sj2)))+(((-1.00000000000000)*(px)*(sj0)*(sj2)))))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                            }
                            }
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            j1array[0]=IKatan2(((-19.4174757281553)*(px)*(((IKabs(cj0) != 0)?((IKReal)1/(cj0)):(IKReal)1.0e30))), ((((IKabs(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2))))) != 0)?((IKReal)1/(((((-1.00000000000000)*(py)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(px)*(sj2)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((cj2)*(px)*(sj0)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                        IKReal j1eval[1];
                        j1eval[0]=((0.107584000000000)+(((0.181384000000000)*(cj3)))+(((0.0764522500000000)*((cj3)*(cj3))))+(((0.0764522500000000)*((cj2)*(cj2))*((sj3)*(sj3)))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j1eval[1];
                                    j1eval[0]=((((-0.328000000000000)*(cj0)*(px)))+(((-0.328000000000000)*(py)*(sj0)))+(((-0.276500000000000)*(cj3)*(py)*(sj0)))+(((0.276500000000000)*(cj2)*(pz)*(sj3)))+(((-0.276500000000000)*(cj0)*(cj3)*(px))));
                                    if( IKabs(j1eval[0]) < 0.000001  )
                                    {
                                        {
                                            if( 1 )
                                            {
                                            continue;
                                        
                                        } else
                                        {
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x187=((0.276500000000000)*(cj3));
                                        IKReal x188=((0.328000000000000)+(x187));
                                        IKReal x189=((0.276500000000000)*(cj2)*(pz)*(sj3));
                                        IKReal x190=((py)*(sj0)*(x187));
                                        IKReal x191=((0.328000000000000)*(py)*(sj0));
                                        IKReal x192=((cj0)*(px)*(x187));
                                        IKReal x193=((0.328000000000000)*(cj0)*(px));
                                        IKReal x194=((x193)+(x192)+(x191)+(x190));
                                        IKReal x195=((((-1.00000000000000)*(x194)))+(x189));
                                        IKReal x196=((IKabs(x195) != 0)?((IKReal)1/(x195)):(IKReal)1.0e30);
                                        j1array[0]=IKatan2(((x196)*(((((-1.00000000000000)*((pz)*(pz))))+((x188)*(x188))))), ((x196)*(((((0.276500000000000)*(cj2)*(sj3)*(x188)))+(((-1.00000000000000)*(pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        for(int ij1 = 0; ij1 < 1; ++ij1)
                                        {
                                        if( !j1valid[ij1] ) { continue; }
                                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x197=((0.181384000000000)*(cj3));
                            IKReal x198=(cj3)*(cj3);
                            IKReal x199=((0.0764522500000000)*(x198));
                            IKReal x200=(cj2)*(cj2);
                            IKReal x201=(sj3)*(sj3);
                            IKReal x202=((0.0764522500000000)*(x200)*(x201));
                            IKReal x203=((0.107584000000000)+(x199)+(x197)+(x202));
                            IKReal x204=((IKabs(x203) != 0)?((IKReal)1/(x203)):(IKReal)1.0e30);
                            IKReal x205=((0.276500000000000)*(cj3));
                            IKReal x206=((0.328000000000000)+(x205));
                            IKReal x207=((cj0)*(px));
                            IKReal x208=((py)*(sj0));
                            IKReal x209=((x207)+(x208));
                            IKReal x210=((-1.00000000000000)*(x209));
                            j1array[0]=IKatan2(((x204)*(((((x206)*(x210)))+(((-0.276500000000000)*(cj2)*(pz)*(sj3)))))), ((x204)*(((((0.276500000000000)*(cj2)*(sj3)*(x210)))+(((pz)*(x206)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            for(int ij1 = 0; ij1 < 1; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                }
                }
                }
                }
                }
                }
            
            } else
            {
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x211=((0.276500000000000)*(cj3)*(pz));
                IKReal x212=((0.328000000000000)*(pz));
                IKReal x213=((0.276500000000000)*(cj0)*(cj2)*(px)*(sj3));
                IKReal x214=((0.276500000000000)*(cj2)*(py)*(sj0)*(sj3));
                IKReal x215=((x211)+(x212)+(x213)+(x214));
                IKReal x216=((IKabs(x215) != 0)?((IKReal)1/(x215)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x216)*(((((pz)*(((((-1.00000000000000)*(py)*(sj0)))+(((-1.00000000000000)*(cj0)*(px)))))))+(((-0.276500000000000)*(cj2)*(sj3)*(((0.328000000000000)+(((0.276500000000000)*(cj3)))))))))), ((x216)*(((((-0.0764522500000000)*((cj2)*(cj2))*((sj3)*(sj3))))+((pz)*(pz))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                for(int ij1 = 0; ij1 < 1; ++ij1)
                {
                if( !j1valid[ij1] ) { continue; }
                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                
                rotationfunction0(vsolutions);
                }
                }
            
            }
        
        }
        }
        }
        }
        }
    
    } else
    {
    }
    }
}
return vsolutions.size()>0;
}
    inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        IKReal x18=((cj1)*(sj3));
        IKReal x19=((cj2)*(cj3)*(sj1));
        IKReal x20=((x19)+(x18));
        IKReal x21=((cj0)*(cj1)*(cj2)*(cj3));
        IKReal x22=((cj3)*(sj0)*(sj2));
        IKReal x23=((cj0)*(sj1)*(sj3));
        IKReal x24=((x22)+(x23));
        IKReal x25=((((-1.00000000000000)*(x24)))+(x21));
        IKReal x26=((cj0)*(cj3)*(sj2));
        IKReal x27=((cj1)*(cj2)*(cj3)*(sj0));
        IKReal x28=((x26)+(x27));
        IKReal x29=((sj0)*(sj1)*(sj3));
        IKReal x30=((((-1.00000000000000)*(x29)))+(x28));
        IKReal x31=((cj1)*(cj3));
        IKReal x32=((cj2)*(sj1)*(sj3));
        IKReal x33=((((-1.00000000000000)*(x32)))+(x31));
        IKReal x34=((sj0)*(sj2)*(sj3));
        IKReal x35=((cj0)*(cj3)*(sj1));
        IKReal x36=((cj0)*(cj2)*(x18));
        IKReal x37=((x36)+(x35));
        IKReal x38=((((-1.00000000000000)*(x37)))+(x34));
        IKReal x39=((cj2)*(sj0)*(x18));
        IKReal x40=((cj3)*(sj0)*(sj1));
        IKReal x41=((cj0)*(sj2)*(sj3));
        IKReal x42=((x39)+(x40)+(x41));
        IKReal x43=((-1.00000000000000)*(x42));
        IKReal x44=((cj2)*(sj0));
        IKReal x45=((cj0)*(cj1)*(sj2));
        IKReal x46=((x44)+(x45));
        IKReal x47=((cj1)*(sj0)*(sj2));
        IKReal x48=((cj0)*(cj2));
        IKReal x49=((((-1.00000000000000)*(x48)))+(x47));
        new_r00=((((r10)*(x30)))+(((r20)*(x20)))+(((r00)*(x25))));
        new_r01=((((r21)*(x20)))+(((r11)*(x30)))+(((r01)*(x25))));
        new_r02=((((r22)*(x20)))+(((r02)*(x25)))+(((r12)*(x30))));
        new_r10=((((r20)*(x33)))+(((r00)*(x38)))+(((r10)*(x43))));
        new_r11=((((r01)*(x38)))+(((r11)*(x43)))+(((r21)*(x33))));
        new_r12=((((r22)*(x33)))+(((r02)*(x38)))+(((r12)*(x43))));
        new_r20=((((r00)*(x46)))+(((r10)*(x49)))+(((r20)*(sj1)*(sj2))));
        new_r21=((((r01)*(x46)))+(((r21)*(sj1)*(sj2)))+(((r11)*(x49))));
        new_r22=((((r02)*(x46)))+(((r22)*(sj1)*(sj2)))+(((r12)*(x49))));
        {
        IKReal j5eval;
        j5eval=new_r11;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(new_r20, new_r22)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(new_r02, ((-1.00000000000000)*(new_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
        
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(new_r21, ((-1.00000000000000)*(new_r01)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond[1];
                evalcond[0]=IKsin(j4);
                if( IKabs(evalcond[0]) < 0.000010  )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x50=IKcos(j4);
                IKReal x51=((IKabs(x50) != 0)?((IKReal)1/(x50)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(x51)), ((new_r22)*(x51)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
            
            } else
            {
                if( 1 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((new_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), new_r11);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal evalcond[1];
                    evalcond[0]=IKsin(j5);
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x52=IKcos(j5);
                    IKReal x53=((IKabs(x52) != 0)?((IKReal)1/(x52)):(IKReal)1.0e30);
                    IKReal x54=IKsin(j4);
                    IKReal x55=IKcos(j4);
                    j6array[0]=IKatan2(((((new_r02)*(x53)*(x55)))+(((-1.00000000000000)*(new_r22)*(x53)*(x54)))), ((((new_r22)*(x55)))+(((new_r02)*(x54)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x56=IKsin(j5);
                    IKReal x57=((IKabs(x56) != 0)?((IKReal)1/(x56)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((new_r12)*(x57)), ((new_r10)*(x57)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                }
                }
                }
                }
                }
            
            } else
            {
            }
            }
            }
            }
            }
        
        }
        }
    }};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "bcb25302dbec7575df10994dd89abd19"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
