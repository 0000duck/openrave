/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-10-29 14:52:26.449932
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 2; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0, 3}; return freeparams; }
IKFAST_API int getNumJoints() { return 8; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108,x109,x110,x111,x112,x113,x114,x115,x116,x117,x118,x119,x120,x121,x122,x123,x124;
    x0=IKcos(j[4]);
    x1=IKcos(j[5]);
    x2=IKsin(j[6]);
    x3=IKcos(j[6]);
    x4=IKsin(j[4]);
    x5=IKsin(j[3]);
    x6=IKcos(j[3]);
    x7=IKsin(j[5]);
    x8=((0.0415698169996759)*(x0)*(x1)*(x2));
    x9=((0.0415698169996759)*(x3)*(x4));
    x10=((x9)+(x8));
    x11=((0.999135601564979)*(x0)*(x1)*(x2));
    x12=((0.999135601564979)*(x3)*(x4));
    x13=((x11)+(x12));
    x14=((-1.00000000000000)*(x13));
    x15=IKsin(j[1]);
    x16=IKcos(j[7]);
    x17=IKsin(j[7]);
    x18=IKcos(j[1]);
    x19=IKsin(j[2]);
    x20=((0.0415698169996759)*(x16)*(x7));
    x21=((0.0415698169996759)*(x1)*(x17)*(x3));
    x22=((x20)+(x21));
    x23=((0.0415698169996759)*(x17)*(x2)*(x4));
    x24=((0.999135601564979)*(x1)*(x16));
    x25=((0.999135601564979)*(x17)*(x3)*(x7));
    x26=((0.0415698169996759)*(x17)*(x3)*(x7));
    x27=((0.0415698169996759)*(x1)*(x16));
    x28=((((-1.00000000000000)*(x27)))+(x26));
    x29=((0.999135601564979)*(x16)*(x7));
    x30=((0.999135601564979)*(x1)*(x17)*(x3));
    x31=((x30)+(x29));
    x32=((x0)*(x31));
    x33=((0.999135601564979)*(x17)*(x2)*(x4));
    x34=((((-1.00000000000000)*(x33)))+(x32));
    x35=IKcos(j[2]);
    x36=((0.0415698169996759)*(x17)*(x7));
    x37=((x27)*(x3));
    x38=((0.0415698169996759)*(x16)*(x2)*(x4));
    x39=((0.999135601564979)*(x1)*(x17));
    x40=((x29)*(x3));
    x41=((x39)+(x40));
    x42=((x24)*(x3));
    x43=((0.999135601564979)*(x17)*(x7));
    x44=((((-1.00000000000000)*(x43)))+(x42));
    x45=((x0)*(x44));
    x46=((0.999135601564979)*(x16)*(x2)*(x4));
    x47=((((-1.00000000000000)*(x46)))+(x45));
    x48=((x20)*(x3));
    x49=((0.0415698169996759)*(x1)*(x17));
    x50=((x48)+(x49));
    x51=((x0)*(x3));
    x52=((x1)*(x2)*(x4));
    x53=((x51)+(((-1.00000000000000)*(x52))));
    x54=((x35)*(x53));
    x55=((-1.00000000000000)*(x10));
    x56=((x5)*(x55));
    x57=((-0.0415698169996759)*(x2)*(x6)*(x7));
    x58=((x14)*(x6));
    x59=((0.999135601564979)*(x2)*(x5)*(x7));
    x60=((x59)+(x58)+(x57)+(x56));
    x61=((x19)*(x60));
    x62=((x54)+(x61));
    x63=((x14)*(x5));
    x64=((x10)*(x6));
    x65=((x63)+(x64));
    x66=((0.0415698169996759)*(x2)*(x5)*(x7));
    x67=((0.999135601564979)*(x2)*(x6)*(x7));
    x68=((x66)+(x67));
    x69=((x65)+(((-1.00000000000000)*(x68))));
    x70=((x0)*(x22));
    x71=((((-1.00000000000000)*(x23)))+(x70));
    x72=((x5)*(x71));
    x73=((((-1.00000000000000)*(x25)))+(x24));
    x74=((x5)*(x73));
    x75=((x28)*(x6));
    x76=((x34)*(x6));
    x77=((x76)+(x75)+(x74)+(x72));
    x78=((x19)*(x77));
    x79=((x16)*(x7));
    x80=((x1)*(x17)*(x3));
    x81=((x79)+(x80));
    x82=((x4)*(x81));
    x83=((x0)*(x17)*(x2));
    x84=((x82)+(x83));
    x85=((x35)*(x84));
    x86=((x78)+(x85));
    x87=((((-1.00000000000000)*(x36)))+(x37));
    x88=((x0)*(x87));
    x89=((((-1.00000000000000)*(x38)))+(x88));
    x90=((-1.00000000000000)*(x41));
    x91=((x1)*(x16)*(x3));
    x92=((x17)*(x7));
    x93=((x91)+(((-1.00000000000000)*(x92))));
    x94=((x4)*(x93));
    x95=((x0)*(x16)*(x2));
    x96=((x95)+(x94));
    x97=((x35)*(x96));
    x98=((x50)*(x6));
    x99=((x5)*(x90));
    x100=((x5)*(x89));
    x101=((x47)*(x6));
    x102=((x100)+(x101)+(x99)+(x98));
    x103=((x102)*(x19));
    x104=((x103)+(x97));
    x105=((x55)*(x6));
    x106=((x13)*(x5));
    x107=((x105)+(x106)+(x68));
    x108=((0.320722528102358)*(x4)*(x5));
    x109=((0.0133439112568960)*(x4)*(x6));
    x110=((0.0133439112568960)*(x4)*(x5));
    x111=((0.320722528102358)*(x4)*(x6));
    x112=((x111)+(x110));
    x113=((-1.00000000000000)*(x112));
    x114=((x113)*(x19));
    x115=((0.321000000000000)*(x0));
    x116=((0.400000000000000)+(x115));
    x117=((x116)*(x35));
    x118=((0.100000000000000)+(x117)+(x114));
    x119=((x59)+(x58)+(x56));
    x120=((0.0415698169996759)*(x2)*(x6)*(x7));
    x121=((((-1.00000000000000)*(x120)))+(x119));
    x122=((x121)*(x19));
    x123=((x122)+(x54));
    x124=((x52)+(((-1.00000000000000)*(x51))));
    eerot[0]=((((x15)*(x69)))+(((x18)*(x62))));
    eerot[1]=((((x18)*(x86)))+(((x15)*(((((x34)*(x5)))+(((x6)*(((((-1.00000000000000)*(x0)*(x22)))+(x23)))))+(((x6)*(((((-1.00000000000000)*(x24)))+(x25)))))+(((x28)*(x5))))))));
    eerot[2]=((((x104)*(x18)))+(((x15)*(((((x47)*(x5)))+(((x41)*(x6)))+(((x5)*(x50)))+(((x6)*(((x38)+(((x0)*(((((-1.00000000000000)*(x37)))+(x36))))))))))))));
    eetrans[0]=((-0.0500000000000000)+(((x118)*(x18)))+(((0.180000000000000)*(x18)*(x62)))+(((x15)*(((((-1.00000000000000)*(x108)))+(x109)))))+(((0.180000000000000)*(x15)*(x69))));
    eerot[3]=((((x107)*(x18)))+(((x123)*(x15))));
    eerot[4]=((((x15)*(x86)))+(((x18)*(((((x5)*(((((-1.00000000000000)*(x0)*(x31)))+(x33)))))+(((x6)*(x73)))+(((x6)*(x71)))+(((x5)*(((((-1.00000000000000)*(x26)))+(x27))))))))));
    eerot[5]=((((x18)*(((((-1.00000000000000)*(x5)*(x50)))+(((x6)*(x89)))+(((x6)*(x90)))+(((x5)*(((((x0)*(((((-1.00000000000000)*(x42)))+(x43)))))+(x46)))))))))+(((x104)*(x15))));
    eetrans[1]=((-0.188000000000000)+(((x118)*(x15)))+(((x18)*(((((-1.00000000000000)*(x109)))+(x108)))))+(((0.180000000000000)*(x123)*(x15)))+(((0.180000000000000)*(x107)*(x18))));
    eerot[6]=((((x121)*(x35)))+(((x124)*(x19))));
    eerot[7]=((((x35)*(x77)))+(((x19)*(((((-1.00000000000000)*(x4)*(x81)))+(((-1.00000000000000)*(x83))))))));
    eerot[8]=((((x102)*(x35)))+(((x19)*(((((x4)*(((x92)+(((-1.00000000000000)*(x91)))))))+(((-1.00000000000000)*(x95))))))));
    eetrans[2]=((0.739680000000000)+(((-1.00000000000000)*(x116)*(x19)))+(((x113)*(x35)))+(((0.180000000000000)*(x121)*(x35)))+(((0.180000000000000)*(x124)*(x19)))+(j[0]));
}

class IKSolver {
public:
IKReal j1, cj1, sj1,
j2, cj2, sj2,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j7, cj7, sj7,
j0, cj0, sj0,
j3, cj3, sj3,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
    j3=pfree[1]; cj3=cos(pfree[1]); sj3=sin(pfree[1]);
    r00 = eerot[0*3+0];
    r01 = eerot[0*3+1];
    r02 = eerot[0*3+2];
    r10 = eerot[1*3+0];
    r11 = eerot[1*3+1];
    r12 = eerot[1*3+2];
    r20 = eerot[2*3+0];
    r21 = eerot[2*3+1];
    r22 = eerot[2*3+2];
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_r00=r00;
    new_r01=r01;
    new_r02=r02;
    new_px=((0.0500000000000000)+(px)+(((-0.180000000000000)*(r00))));
    new_r10=r10;
    new_r11=r11;
    new_r12=r12;
    new_py=((0.188000000000000)+(py)+(((-0.180000000000000)*(r10))));
    new_r20=r20;
    new_r21=r21;
    new_r22=r22;
    new_pz=((-0.739680000000000)+(pz)+(((-0.180000000000000)*(r20))));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        IKReal coniccoeffs[6], j1array[4];
        int numsolutions;
        IKReal x0=(py)*(py);
        IKReal x1=(px)*(px);
        IKReal x2=(sj3)*(sj3);
        IKReal x3=(cj3)*(cj3);
        IKReal x4=(j0)*(j0);
        IKReal x5=(pz)*(pz);
        IKReal x6=(px)*(px)*(px);
        IKReal x7=(py)*(py)*(py);
        IKReal x8=(j0)*(j0)*(j0);
        IKReal x9=(pz)*(pz)*(pz);
        IKReal x10=((0.0164865600000000)*(x1));
        IKReal x11=(j0)*(j0)*(j0)*(j0);
        IKReal x12=(py)*(py)*(py)*(py);
        IKReal x13=(pz)*(pz)*(pz)*(pz);
        IKReal x14=(px)*(px)*(px)*(px);
        coniccoeffs[0]=((((1.78059967631915e-6)*(x0)*(x3)))+(((0.00102862940032368)*(x0)*(x2)))+(((-8.55938590617039e-5)*(cj3)*(sj3)*(x0)))+(((-0.0164865600000000)*(x0)))+(x10)+(((-0.00102862940032368)*(x1)*(x2)))+(((8.55938590617039e-5)*(cj3)*(sj3)*(x1)))+(((-1.78059967631915e-6)*(x1)*(x3))));
        coniccoeffs[1]=((((-1.78059967631915e-6)*(px)*(py)*(x3)))+(((0.0164865600000000)*(px)*(py)))+(((8.55938590617039e-5)*(cj3)*(px)*(py)*(sj3)))+(((-0.00102862940032368)*(px)*(py)*(x2))));
        coniccoeffs[2]=((((0.000855938590617039)*(cj3)*(j0)*(px)*(pz)*(sj3)))+(((-0.00130142706043652)*(px)*(x2)))+(((-2.25282361347737e-6)*(px)*(x3)))+(((0.00514314700161840)*(px)*(x0)*(x2)))+(((0.000108293778454163)*(cj3)*(px)*(sj3)))+(((0.00514314700161840)*(px)*(x1)*(x2)))+(((-0.0102862940032368)*(j0)*(px)*(pz)*(x2)))+(((8.90299838159575e-6)*(px)*(x3)*(x4)))+(((8.90299838159575e-6)*(px)*(x3)*(x5)))+(((8.90299838159575e-6)*(px)*(x1)*(x3)))+(((-0.000427969295308520)*(cj3)*(px)*(sj3)*(x4)))+(((-0.000427969295308520)*(cj3)*(px)*(sj3)*(x5)))+(((-0.000427969295308520)*(cj3)*(px)*(sj3)*(x0)))+(((-0.000427969295308520)*(cj3)*(px)*(sj3)*(x1)))+(((0.00514314700161840)*(px)*(x2)*(x4)))+(((0.00514314700161840)*(px)*(x2)*(x5)))+(((8.90299838159575e-6)*(px)*(x0)*(x3)))+(((-1.78059967631915e-5)*(j0)*(px)*(pz)*(x3))));
        coniccoeffs[3]=0;
        coniccoeffs[4]=((((-0.0102862940032368)*(j0)*(py)*(pz)*(x2)))+(((0.000855938590617039)*(cj3)*(j0)*(py)*(pz)*(sj3)))+(((-1.78059967631915e-5)*(j0)*(py)*(pz)*(x3)))+(((0.00514314700161840)*(py)*(x2)*(x4)))+(((0.00514314700161840)*(py)*(x2)*(x5)))+(((-0.00130142706043652)*(py)*(x2)))+(((-0.000427969295308520)*(cj3)*(py)*(sj3)*(x1)))+(((-0.000427969295308520)*(cj3)*(py)*(sj3)*(x0)))+(((-0.000427969295308520)*(cj3)*(py)*(sj3)*(x5)))+(((-0.000427969295308520)*(cj3)*(py)*(sj3)*(x4)))+(((0.00514314700161840)*(py)*(x0)*(x2)))+(((-2.25282361347737e-6)*(py)*(x3)))+(((8.90299838159575e-6)*(py)*(x3)*(x5)))+(((8.90299838159575e-6)*(py)*(x3)*(x4)))+(((8.90299838159575e-6)*(py)*(x1)*(x3)))+(((0.00514314700161840)*(py)*(x1)*(x2)))+(((8.90299838159575e-6)*(py)*(x0)*(x3)))+(((0.000108293778454163)*(cj3)*(py)*(sj3))));
        coniccoeffs[5]=((((-0.000997343925479927)*(cj3)*(sj3)*(x0)))+(((8.53126400719886e-8)*(x3)))+(((-0.0514314700161840)*(x0)*(x2)*(x5)))+(((-0.0514314700161840)*(x0)*(x2)*(x4)))+(((-1.00000000000000)*(x10)))+(((0.000178059967631915)*(j0)*(pz)*(x1)*(x3)))+(((-4.10099933613311e-6)*(cj3)*(sj3)))+(((0.0130142706043652)*(x1)*(x2)))+(((0.102862940032368)*(j0)*(pz)*(x2)*(x4)))+(((0.102862940032368)*(j0)*(pz)*(x2)*(x5)))+(((2.25282361347737e-5)*(x1)*(x3)))+(((0.000178059967631915)*(j0)*(pz)*(x0)*(x3)))+(((0.0128390788592556)*(cj3)*(sj3)*(x4)*(x5)))+(((-0.00108293778454163)*(cj3)*(sj3)*(x4)))+(((-0.00108293778454163)*(cj3)*(sj3)*(x5)))+(((-0.00108293778454163)*(cj3)*(sj3)*(x1)))+(((-4.45149919079788e-5)*(x11)*(x3)))+(((-8.90299838159575e-5)*(x1)*(x3)*(x5)))+(((-8.90299838159575e-5)*(x1)*(x3)*(x4)))+(((0.0130142706043652)*(x2)*(x5)))+(((0.0130142706043652)*(x2)*(x4)))+(((0.00427969295308519)*(cj3)*(sj3)*(x1)*(x5)))+(((0.00427969295308519)*(cj3)*(sj3)*(x1)*(x4)))+(((-4.45149919079788e-5)*(x13)*(x3)))+(((-0.154294410048552)*(x2)*(x4)*(x5)))+(((-0.0514314700161840)*(x0)*(x1)*(x2)))+(((-0.00855938590617039)*(cj3)*(j0)*(pz)*(sj3)*(x4)))+(((-0.00855938590617039)*(cj3)*(j0)*(pz)*(sj3)*(x5)))+(((-0.00855938590617039)*(cj3)*(j0)*(pz)*(sj3)*(x0)))+(((-0.00855938590617039)*(cj3)*(j0)*(pz)*(sj3)*(x1)))+(((-0.000267089951447873)*(x3)*(x4)*(x5)))+(((-8.90299838159575e-5)*(x0)*(x1)*(x3)))+(((-0.0257157350080920)*(x13)*(x2)))+(((0.102862940032368)*(j0)*(pz)*(x0)*(x2)))+(((-0.0260285412087305)*(j0)*(pz)*(x2)))+(((0.000178059967631915)*(j0)*(pz)*(x3)*(x5)))+(((0.000178059967631915)*(j0)*(pz)*(x3)*(x4)))+(((-0.0257157350080920)*(x14)*(x2)))+(((-0.0514314700161840)*(x1)*(x2)*(x4)))+(((-0.0514314700161840)*(x1)*(x2)*(x5)))+(((0.00213984647654260)*(cj3)*(sj3)*(x13)))+(((0.00213984647654260)*(cj3)*(sj3)*(x12)))+(((0.00213984647654260)*(cj3)*(sj3)*(x11)))+(((0.00213984647654260)*(cj3)*(sj3)*(x14)))+(((-0.0257157350080920)*(x11)*(x2)))+(((-4.45149919079788e-5)*(x12)*(x3)))+(((2.07476364584546e-5)*(x0)*(x3)))+(((4.92840086204478e-5)*(x2)))+(((-0.0257157350080920)*(x12)*(x2)))+(((0.102862940032368)*(j0)*(pz)*(x1)*(x2)))+(((0.00427969295308519)*(cj3)*(sj3)*(x0)*(x5)))+(((0.00427969295308519)*(cj3)*(sj3)*(x0)*(x4)))+(((0.00427969295308519)*(cj3)*(sj3)*(x0)*(x1)))+(((-4.50564722695474e-5)*(j0)*(pz)*(x3)))+(((-4.45149919079788e-5)*(x14)*(x3)))+(((0.0119856412040415)*(x0)*(x2)))+(((0.00216587556908326)*(cj3)*(j0)*(pz)*(sj3)))+(((-8.90299838159575e-5)*(x0)*(x3)*(x4)))+(((-8.90299838159575e-5)*(x0)*(x3)*(x5)))+(((2.25282361347737e-5)*(x3)*(x4)))+(((2.25282361347737e-5)*(x3)*(x5))));
        conicsolver(coniccoeffs,j1array,numsolutions);
        for(int ij1 = 0; ij1 < numsolutions; ++ij1)
        {
            j1 = j1array[ij1]; cj1 = IKcos(j1); sj1 = IKsin(j1);
        
        {
            IKReal j4eval[1];
            j4eval[0]=((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))));
            if( IKabs(j4eval[0]) < 0.000001  )
            {
                {
                IKReal evalcond[1];
                    evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j4array[1], cj4array[1], sj4array[1];
                    bool j4valid[1]={false};
                    j4array[0]=IKatan2(((((5.76460752303423e+17)*(cj1)*(py)))+(((-5.76460752303423e+17)*(px)*(sj1)))), ((-0.985362149532710)+(((-7.78816199376947)*(j0)*(pz)))+(((3.89408099688473)*((j0)*(j0))))+(((3.89408099688473)*((pz)*(pz))))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(py)*(sj1)))+(((3.89408099688473)*((py)*(py))))+(((-0.778816199376947)*(cj1)*(px)))));
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    for(int ij4 = 0; ij4 < 1; ++ij4)
                    {
                    if( !j4valid[ij4] ) { continue; }
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                        IKReal j2eval[1];
                        j2eval[0]=((((-1.00000000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj4)))))*(((0.400000000000000)+(((0.321000000000000)*(cj4))))))))+(((-0.103041000000000)*((sj4)*(sj4)))));
                        if( IKabs(j2eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j2eval[1];
                                    j2eval[0]=((((-1.00000000000000)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))*(((((-1.00000000000000)*(pz)))+(j0)))))+(((0.321000000000000)*(sj4)*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1))))))));
                                    if( IKabs(j2eval[0]) < 0.000001  )
                                    {
                                        {
                                            if( 1 )
                                            {
                                            continue;
                                        
                                        } else
                                        {
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j2array[1], cj2array[1], sj2array[1];
                                        bool j2valid[1]={false};
                                        IKReal x15=((((-1.00000000000000)*(pz)))+(j0));
                                        IKReal x16=((cj1)*(px));
                                        IKReal x17=((py)*(sj1));
                                        IKReal x18=((x17)+(x16));
                                        IKReal x19=((0.100000000000000)+(((-1.00000000000000)*(x18))));
                                        IKReal x20=((0.321000000000000)*(cj4));
                                        IKReal x21=((0.400000000000000)+(x20));
                                        IKReal x22=((0.321000000000000)*(sj4)*(x19));
                                        IKReal x23=((x15)*(x21));
                                        IKReal x24=((((-1.00000000000000)*(x23)))+(x22));
                                        IKReal x25=((IKabs(x24) != 0)?((IKReal)1/(x24)):(IKReal)1.0e30);
                                        j2array[0]=IKatan2(((x25)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x15)*(x15))))))), ((x25)*(((((-0.321000000000000)*(sj4)*(x21)))+(((x15)*(x19)))))));
                                        sj2array[0]=IKsin(j2array[0]);
                                        cj2array[0]=IKcos(j2array[0]);
                                        if( j2array[0] > IKPI )
                                            j2array[0]-=IK2PI;
                                        else if( j2array[0] < -IKPI )
                                            j2array[0]+=IK2PI;
                                        j2valid[0] = true;
                                        for(int ij2 = 0; ij2 < 1; ++ij2)
                                        {
                                        if( !j2valid[ij2] ) { continue; }
                                        j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j2array[1], cj2array[1], sj2array[1];
                            bool j2valid[1]={false};
                            IKReal x93=((0.321000000000000)*(cj4));
                            IKReal x94=((0.400000000000000)+(x93));
                            IKReal x95=((cj1)*(px));
                            IKReal x96=((py)*(sj1));
                            IKReal x97=((x95)+(x96));
                            IKReal x98=((0.100000000000000)+(((-1.00000000000000)*(x97))));
                            IKReal x99=((((-1.00000000000000)*(pz)))+(j0));
                            IKReal x100=(sj4)*(sj4);
                            IKReal x101=((0.103041000000000)*(x100));
                            IKReal x102=(x94)*(x94);
                            IKReal x103=((x101)+(x102));
                            IKReal x104=((-1.00000000000000)*(x103));
                            IKReal x105=((IKabs(x104) != 0)?((IKReal)1/(x104)):(IKReal)1.0e30);
                            j2array[0]=IKatan2(((x105)*(((((-1.00000000000000)*(x94)*(x99)))+(((-0.321000000000000)*(sj4)*(x98)))))), ((x105)*(((((-0.321000000000000)*(sj4)*(x99)))+(((x94)*(x98)))))));
                            sj2array[0]=IKsin(j2array[0]);
                            cj2array[0]=IKcos(j2array[0]);
                            if( j2array[0] > IKPI )
                                j2array[0]-=IK2PI;
                            else if( j2array[0] < -IKPI )
                                j2array[0]+=IK2PI;
                            j2valid[0] = true;
                            for(int ij2 = 0; ij2 < 1; ++ij2)
                            {
                            if( !j2valid[ij2] ) { continue; }
                            j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                    }
                    }
                
                } else
                {
                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-3.18317445236063)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j4array[1], cj4array[1], sj4array[1];
                    bool j4valid[1]={false};
                    j4array[0]=IKatan2(((((-5.24055229366749e+16)*(px)*(sj1)))+(((5.24055229366749e+16)*(cj1)*(py)))), ((-0.985362149532710)+(((-7.78816199376947)*(j0)*(pz)))+(((3.89408099688473)*((j0)*(j0))))+(((3.89408099688473)*((pz)*(pz))))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(py)*(sj1)))+(((3.89408099688473)*((py)*(py))))+(((-0.778816199376947)*(cj1)*(px)))));
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    for(int ij4 = 0; ij4 < 1; ++ij4)
                    {
                    if( !j4valid[ij4] ) { continue; }
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                        IKReal j2eval[1];
                        j2eval[0]=((((-1.00000000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj4)))))*(((0.400000000000000)+(((0.321000000000000)*(cj4))))))))+(((-0.103041000000000)*((sj4)*(sj4)))));
                        if( IKabs(j2eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                {
                                    IKReal j2eval[1];
                                    j2eval[0]=((((-1.00000000000000)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))*(((((-1.00000000000000)*(pz)))+(j0)))))+(((-0.321000000000000)*(sj4)*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1))))))));
                                    if( IKabs(j2eval[0]) < 0.000001  )
                                    {
                                        {
                                            if( 1 )
                                            {
                                            continue;
                                        
                                        } else
                                        {
                                        }
                                        }
                                    
                                    } else
                                    {
                                        {
                                        IKReal j2array[1], cj2array[1], sj2array[1];
                                        bool j2valid[1]={false};
                                        IKReal x106=((((-1.00000000000000)*(pz)))+(j0));
                                        IKReal x107=((cj1)*(px));
                                        IKReal x108=((py)*(sj1));
                                        IKReal x109=((x108)+(x107));
                                        IKReal x110=((0.100000000000000)+(((-1.00000000000000)*(x109))));
                                        IKReal x111=((0.321000000000000)*(cj4));
                                        IKReal x112=((0.400000000000000)+(x111));
                                        IKReal x113=((x106)*(x112));
                                        IKReal x114=((0.321000000000000)*(sj4)*(x110));
                                        IKReal x115=((x113)+(x114));
                                        IKReal x116=((-1.00000000000000)*(x115));
                                        IKReal x117=((IKabs(x116) != 0)?((IKReal)1/(x116)):(IKReal)1.0e30);
                                        j2array[0]=IKatan2(((x117)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x106)*(x106))))))), ((x117)*(((((0.321000000000000)*(sj4)*(x112)))+(((x106)*(x110)))))));
                                        sj2array[0]=IKsin(j2array[0]);
                                        cj2array[0]=IKcos(j2array[0]);
                                        if( j2array[0] > IKPI )
                                            j2array[0]-=IK2PI;
                                        else if( j2array[0] < -IKPI )
                                            j2array[0]+=IK2PI;
                                        j2valid[0] = true;
                                        for(int ij2 = 0; ij2 < 1; ++ij2)
                                        {
                                        if( !j2valid[ij2] ) { continue; }
                                        j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                                        
                                        rotationfunction0(vsolutions);
                                        }
                                        }
                                    
                                    }
                                
                                }
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j2array[1], cj2array[1], sj2array[1];
                            bool j2valid[1]={false};
                            IKReal x118=((0.321000000000000)*(cj4));
                            IKReal x119=((0.400000000000000)+(x118));
                            IKReal x120=((cj1)*(px));
                            IKReal x121=((py)*(sj1));
                            IKReal x122=((x120)+(x121));
                            IKReal x123=((0.100000000000000)+(((-1.00000000000000)*(x122))));
                            IKReal x124=((((-1.00000000000000)*(pz)))+(j0));
                            IKReal x125=(sj4)*(sj4);
                            IKReal x126=((0.103041000000000)*(x125));
                            IKReal x127=(x119)*(x119);
                            IKReal x128=((x126)+(x127));
                            IKReal x129=((-1.00000000000000)*(x128));
                            IKReal x130=((IKabs(x129) != 0)?((IKReal)1/(x129)):(IKReal)1.0e30);
                            j2array[0]=IKatan2(((x130)*(((((-1.00000000000000)*(x119)*(x124)))+(((0.321000000000000)*(sj4)*(x123)))))), ((x130)*(((((0.321000000000000)*(sj4)*(x124)))+(((x119)*(x123)))))));
                            sj2array[0]=IKsin(j2array[0]);
                            cj2array[0]=IKcos(j2array[0]);
                            if( j2array[0] > IKPI )
                                j2array[0]-=IK2PI;
                            else if( j2array[0] < -IKPI )
                                j2array[0]+=IK2PI;
                            j2valid[0] = true;
                            for(int ij2 = 0; ij2 < 1; ++ij2)
                            {
                            if( !j2valid[ij2] ) { continue; }
                            j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                            
                            rotationfunction0(vsolutions);
                            }
                            }
                        
                        }
                    
                    }
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                        IKReal j2eval[1];
                        j2eval[0]=((((((((0.800000000000000)*(j0)))+(((-0.800000000000000)*(pz)))))*(((((0.0415698169996759)*(cj3)*(j0)))+(((-0.0415698169996759)*(cj3)*(pz)))+(((-0.999135601564979)*(j0)*(sj3)))+(((0.999135601564979)*(pz)*(sj3)))))))+(((((0.0800000000000000)+(((-0.800000000000000)*(py)*(sj1)))+(((-0.800000000000000)*(cj1)*(px)))))*(((((0.999135601564979)*(cj1)*(px)*(sj3)))+(((-0.0999135601564980)*(sj3)))+(((-0.0415698169996759)*(cj3)*(py)*(sj1)))+(((0.999135601564979)*(py)*(sj1)*(sj3)))+(((0.00415698169996759)*(cj3)))+(((-0.0415698169996759)*(cj1)*(cj3)*(px))))))));
                        if( IKabs(j2eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                continue;
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j2array[1], cj2array[1], sj2array[1];
                            bool j2valid[1]={false};
                            IKReal x131=((0.800000000000000)*(py)*(sj1));
                            IKReal x132=((0.800000000000000)*(cj1)*(px));
                            IKReal x133=((x131)+(x132));
                            IKReal x134=((0.0800000000000000)+(((-1.00000000000000)*(x133))));
                            IKReal x135=((0.0415698169996759)*(cj3)*(j0));
                            IKReal x136=((0.999135601564979)*(pz)*(sj3));
                            IKReal x137=((x135)+(x136));
                            IKReal x138=((0.0415698169996759)*(cj3)*(pz));
                            IKReal x139=((0.999135601564979)*(j0)*(sj3));
                            IKReal x140=((x139)+(x138));
                            IKReal x141=((((-1.00000000000000)*(x140)))+(x137));
                            IKReal x142=((0.999135601564979)*(cj1)*(px)*(sj3));
                            IKReal x143=((0.999135601564979)*(py)*(sj1)*(sj3));
                            IKReal x144=((0.00415698169996759)*(cj3));
                            IKReal x145=((x142)+(x143)+(x144));
                            IKReal x146=((0.0415698169996759)*(cj3)*(py)*(sj1));
                            IKReal x147=((0.0415698169996759)*(cj1)*(cj3)*(px));
                            IKReal x148=((0.0999135601564980)*(sj3));
                            IKReal x149=((x146)+(x147)+(x148));
                            IKReal x150=((((-1.00000000000000)*(x149)))+(x145));
                            IKReal x151=((x134)*(x150));
                            IKReal x152=((0.800000000000000)*(j0));
                            IKReal x153=((0.800000000000000)*(pz));
                            IKReal x154=((((-1.00000000000000)*(x153)))+(x152));
                            IKReal x155=((x141)*(x154));
                            IKReal x156=((x155)+(x151));
                            IKReal x157=((IKabs(x156) != 0)?((IKReal)1/(x156)):(IKReal)1.0e30);
                            IKReal x158=((-0.0415698169996759)*(cj1)*(py)*(sj3));
                            IKReal x159=((-0.999135601564979)*(cj1)*(cj3)*(py));
                            IKReal x160=((0.0415698169996759)*(px)*(sj1)*(sj3));
                            IKReal x161=((0.999135601564979)*(cj3)*(px)*(sj1));
                            IKReal x162=((x160)+(x161)+(x159)+(x158));
                            IKReal x163=x4;
                            IKReal x164=((2.00000000000000)*(j0)*(pz));
                            IKReal x165=x1;
                            IKReal x166=x0;
                            IKReal x167=x5;
                            IKReal x168=((0.200000000000000)*(cj1)*(px));
                            IKReal x169=((0.200000000000000)*(py)*(sj1));
                            j2array[0]=IKatan2(((x157)*(((((x141)*(((0.0669590000000000)+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x164)))+(x163)+(x166)+(x167)+(x165)))))+(((x134)*(x162)))))), ((x157)*(((((-1.00000000000000)*(x150)*(((0.0669590000000000)+(((-0.200000000000000)*(py)*(sj1)))+(x163)+(x166)+(x167)+(x165)+(((-2.00000000000000)*(j0)*(pz)))+(((-0.200000000000000)*(cj1)*(px)))))))+(((x154)*(x162)))))));
                            sj2array[0]=IKsin(j2array[0]);
                            cj2array[0]=IKcos(j2array[0]);
                            if( j2array[0] > IKPI )
                                j2array[0]-=IK2PI;
                            else if( j2array[0] < -IKPI )
                                j2array[0]+=IK2PI;
                            j2valid[0] = true;
                            for(int ij2 = 0; ij2 < 1; ++ij2)
                            {
                            if( !j2valid[ij2] ) { continue; }
                            j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                            
                            {
                                IKReal j4eval[1];
                                j4eval[0]=((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))));
                                if( IKabs(j4eval[0]) < 0.000001  )
                                {
                                    {
                                    IKReal evalcond[3];
                                        evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                        evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(j0)*(sj2)))+(((-0.0800000000000000)*(cj2)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((0.800000000000000)*(cj2)*(py)*(sj1)))+(((0.800000000000000)*(cj1)*(cj2)*(px))));
                                        evalcond[2]=((((-6.93889390390723e-18)*(cj2)*(j0)))+(((-1.00000000000000)*(px)*(sj1)))+(((6.93889390390723e-18)*(cj2)*(pz)))+(((6.93889390390723e-18)*(cj1)*(px)*(sj2)))+(((cj1)*(py)))+(((6.93889390390723e-18)*(py)*(sj1)*(sj2)))+(((-8.67361737988404e-19)*(sj2))));
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                        {
                                        {
                                            IKReal j4eval[1];
                                            j4eval[0]=sj2;
                                            if( IKabs(j4eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[3];
                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                    evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj1)*(px)))+(((2.00000000000000)*(j0)*(pz)))+(((py)*(sj1))));
                                                    evalcond[2]=((((6.93889390390723e-18)*(pz)))+(((-1.00000000000000)*(px)*(sj1)))+(((-6.93889390390723e-18)*(j0)))+(((cj1)*(py))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                                    bool j4valid[1]={false};
                                                    j4array[0]=IKatan2(((((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
                                                    sj4array[0]=IKsin(j4array[0]);
                                                    cj4array[0]=IKcos(j4array[0]);
                                                    if( j4array[0] > IKPI )
                                                        j4array[0]-=IK2PI;
                                                    else if( j4array[0] < -IKPI )
                                                        j4array[0]+=IK2PI;
                                                    j4valid[0] = true;
                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                    {
                                                    if( !j4valid[ij4] ) { continue; }
                                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((-0.600000000000000)*(cj1)*(px)))+(((-0.600000000000000)*(py)*(sj1))));
                                                    evalcond[2]=((((-1.00000000000000)*(px)*(sj1)))+(((6.93889390390723e-18)*(j0)))+(((cj1)*(py)))+(((-6.93889390390723e-18)*(pz))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                                    bool j4valid[1]={false};
                                                    j4array[0]=IKatan2(((((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
                                                    sj4array[0]=IKsin(j4array[0]);
                                                    cj4array[0]=IKcos(j4array[0]);
                                                    if( j4array[0] > IKPI )
                                                        j4array[0]-=IK2PI;
                                                    else if( j4array[0] < -IKPI )
                                                        j4array[0]+=IK2PI;
                                                    j4valid[0] = true;
                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                    {
                                                    if( !j4valid[ij4] ) { continue; }
                                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    continue;
                                                
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j4array[1], cj4array[1], sj4array[1];
                                                bool j4valid[1]={false};
                                                j4array[0]=IKatan2(((((5.76460752303423e+17)*(cj1)*(py)))+(((-5.76460752303423e+17)*(px)*(sj1)))), ((-1.79582788879571e+18)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((-1.73472347597681e-18)*(j0)))+(((1.73472347597681e-18)*(pz)))+(((6.93889390390723e-19)*(sj2)))+(((-0.321000000000000)*(cj2)*(((((-1.00000000000000)*(cj1)*(py)))+(((px)*(sj1)))))))))));
                                                sj4array[0]=IKsin(j4array[0]);
                                                cj4array[0]=IKcos(j4array[0]);
                                                if( j4array[0] > IKPI )
                                                    j4array[0]-=IK2PI;
                                                else if( j4array[0] < -IKPI )
                                                    j4array[0]+=IK2PI;
                                                j4valid[0] = true;
                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                {
                                                if( !j4valid[ij4] ) { continue; }
                                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                        evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-3.18317445236063)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
                                        evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(j0)*(sj2)))+(((-0.0800000000000000)*(cj2)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((0.800000000000000)*(cj2)*(py)*(sj1)))+(((0.800000000000000)*(cj1)*(cj2)*(px))));
                                        evalcond[2]=((((5.55111512312578e-17)*(cj2)*(pz)))+(((5.55111512312578e-17)*(py)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(py)))+(((5.55111512312578e-17)*(cj1)*(px)*(sj2)))+(((px)*(sj1)))+(((-5.20417042793042e-18)*(sj2)))+(((-5.55111512312578e-17)*(cj2)*(j0))));
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                        {
                                        {
                                            IKReal j4eval[1];
                                            j4eval[0]=sj2;
                                            if( IKabs(j4eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[3];
                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
                                                    evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj1)*(px)))+(((2.00000000000000)*(j0)*(pz)))+(((py)*(sj1))));
                                                    evalcond[2]=((((-1.00000000000000)*(cj1)*(py)))+(((px)*(sj1)))+(((-5.55111512312578e-17)*(j0)))+(((5.55111512312578e-17)*(pz))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                                    bool j4valid[1]={false};
                                                    j4array[0]=IKatan2(((((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
                                                    sj4array[0]=IKsin(j4array[0]);
                                                    cj4array[0]=IKcos(j4array[0]);
                                                    if( j4array[0] > IKPI )
                                                        j4array[0]-=IK2PI;
                                                    else if( j4array[0] < -IKPI )
                                                        j4array[0]+=IK2PI;
                                                    j4valid[0] = true;
                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                    {
                                                    if( !j4valid[ij4] ) { continue; }
                                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((-0.600000000000000)*(cj1)*(px)))+(((-0.600000000000000)*(py)*(sj1))));
                                                    evalcond[2]=((((-1.00000000000000)*(cj1)*(py)))+(((-5.55111512312578e-17)*(pz)))+(((5.55111512312578e-17)*(j0)))+(((px)*(sj1))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
                                                    {
                                                    {
                                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                                    bool j4valid[1]={false};
                                                    j4array[0]=IKatan2(((((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
                                                    sj4array[0]=IKsin(j4array[0]);
                                                    cj4array[0]=IKcos(j4array[0]);
                                                    if( j4array[0] > IKPI )
                                                        j4array[0]-=IK2PI;
                                                    else if( j4array[0] < -IKPI )
                                                        j4array[0]+=IK2PI;
                                                    j4valid[0] = true;
                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                    {
                                                    if( !j4valid[ij4] ) { continue; }
                                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                                    
                                                    rotationfunction0(vsolutions);
                                                    }
                                                    }
                                                
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    continue;
                                                
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j4array[1], cj4array[1], sj4array[1];
                                                bool j4valid[1]={false};
                                                j4array[0]=IKatan2(((((-5.24055229366749e+16)*(px)*(sj1)))+(((5.24055229366749e+16)*(cj1)*(py)))), ((-1.63257080799610e+17)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((-1.90819582357449e-17)*(j0)))+(((7.63278329429795e-18)*(sj2)))+(((1.90819582357449e-17)*(pz)))+(((0.321000000000000)*(cj2)*(((((-1.00000000000000)*(cj1)*(py)))+(((px)*(sj1)))))))))));
                                                sj4array[0]=IKsin(j4array[0]);
                                                cj4array[0]=IKcos(j4array[0]);
                                                if( j4array[0] > IKPI )
                                                    j4array[0]-=IK2PI;
                                                else if( j4array[0] < -IKPI )
                                                    j4array[0]+=IK2PI;
                                                j4valid[0] = true;
                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                {
                                                if( !j4valid[ij4] ) { continue; }
                                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                        if( 1 )
                                        {
                                        continue;
                                    
                                    } else
                                    {
                                    }
                                    }
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1]={false};
                                    j4array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))+(((3.11526479750779)*(j0)*(sj2)))+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))));
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                    {
                                    if( !j4valid[ij4] ) { continue; }
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                }
                }
                }
                }
            
            } else
            {
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((j0)*(j0))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(py)*(sj1)))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(cj1)*(px)))+(((-7.78816199376947)*(j0)*(pz)))));
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                {
                    IKReal j2eval[1];
                    j2eval[0]=((((-1.00000000000000)*((((((0.320722528102358)*(cj3)*(sj4)))+(((0.0133439112568960)*(sj3)*(sj4)))))*(((((0.320722528102358)*(cj3)*(sj4)))+(((0.0133439112568960)*(sj3)*(sj4))))))))+(((-1.00000000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj4)))))*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))));
                    if( IKabs(j2eval[0]) < 0.000001  )
                    {
                        {
                            if( 1 )
                            {
                            {
                                IKReal j2eval[1];
                                j2eval[0]=((((-1.00000000000000)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))))+(((((pz)+(((-1.00000000000000)*(j0)))))*(((((0.320722528102358)*(cj3)*(sj4)))+(((0.0133439112568960)*(sj3)*(sj4))))))));
                                if( IKabs(j2eval[0]) < 0.000001  )
                                {
                                    {
                                        if( 1 )
                                        {
                                        continue;
                                    
                                    } else
                                    {
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j2array[1], cj2array[1], sj2array[1];
                                    bool j2valid[1]={false};
                                    IKReal x170=((0.320722528102358)*(cj3)*(sj4));
                                    IKReal x171=((0.0133439112568960)*(sj3)*(sj4));
                                    IKReal x172=((x171)+(x170));
                                    IKReal x173=((-1.00000000000000)*(x172));
                                    IKReal x174=((pz)+(((-1.00000000000000)*(j0))));
                                    IKReal x175=((0.321000000000000)*(cj4));
                                    IKReal x176=((0.400000000000000)+(x175));
                                    IKReal x177=((cj1)*(px));
                                    IKReal x178=((py)*(sj1));
                                    IKReal x179=((x178)+(x177));
                                    IKReal x180=((0.100000000000000)+(((-1.00000000000000)*(x179))));
                                    IKReal x181=((x173)*(x174));
                                    IKReal x182=((x176)*(x180));
                                    IKReal x183=((x181)+(x182));
                                    IKReal x184=((-1.00000000000000)*(x183));
                                    IKReal x185=((IKabs(x184) != 0)?((IKReal)1/(x184)):(IKReal)1.0e30);
                                    j2array[0]=IKatan2(((x185)*(((((x174)*(x180)))+(((x173)*(x176)))))), ((x185)*(((((x174)*(((((-1.00000000000000)*(pz)))+(j0)))))+((x176)*(x176))))));
                                    sj2array[0]=IKsin(j2array[0]);
                                    cj2array[0]=IKcos(j2array[0]);
                                    if( j2array[0] > IKPI )
                                        j2array[0]-=IK2PI;
                                    else if( j2array[0] < -IKPI )
                                        j2array[0]+=IK2PI;
                                    j2valid[0] = true;
                                    for(int ij2 = 0; ij2 < 1; ++ij2)
                                    {
                                    if( !j2valid[ij2] ) { continue; }
                                    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                        
                        } else
                        {
                        }
                        }
                    
                    } else
                    {
                        {
                        IKReal j2array[1], cj2array[1], sj2array[1];
                        bool j2valid[1]={false};
                        IKReal x186=((0.320722528102358)*(cj3)*(sj4));
                        IKReal x187=((0.0133439112568960)*(sj3)*(sj4));
                        IKReal x188=((x186)+(x187));
                        IKReal x189=((-1.00000000000000)*(x188));
                        IKReal x190=((((-1.00000000000000)*(pz)))+(j0));
                        IKReal x191=((0.321000000000000)*(cj4));
                        IKReal x192=((0.400000000000000)+(x191));
                        IKReal x193=((cj1)*(px));
                        IKReal x194=((py)*(sj1));
                        IKReal x195=((x193)+(x194));
                        IKReal x196=((0.100000000000000)+(((-1.00000000000000)*(x195))));
                        IKReal x197=(x192)*(x192);
                        IKReal x198=(x189)*(x189);
                        IKReal x199=((x198)+(x197));
                        IKReal x200=((-1.00000000000000)*(x199));
                        IKReal x201=((IKabs(x200) != 0)?((IKReal)1/(x200)):(IKReal)1.0e30);
                        j2array[0]=IKatan2(((x201)*(((((-1.00000000000000)*(x190)*(x192)))+(((x189)*(x196)))))), ((x201)*(((((x189)*(x190)))+(((x192)*(x196)))))));
                        sj2array[0]=IKsin(j2array[0]);
                        cj2array[0]=IKcos(j2array[0]);
                        if( j2array[0] > IKPI )
                            j2array[0]-=IK2PI;
                        else if( j2array[0] < -IKPI )
                            j2array[0]+=IK2PI;
                        j2valid[0] = true;
                        for(int ij2 = 0; ij2 < 1; ++ij2)
                        {
                        if( !j2valid[ij2] ) { continue; }
                        j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                        
                        rotationfunction0(vsolutions);
                        }
                        }
                    
                    }
                
                }
                }
                }
            
            }
        
        }
            }
    
    } else
    {
    }
    }
}
return vsolutions.size()>0;
}
    void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        IKReal x26=((cj2)*(cj4)*(sj1));
        IKReal x27=((0.0415698169996759)*(cj1));
        IKReal x28=((0.999135601564979)*(sj1)*(sj2));
        IKReal x29=((x27)+(x28));
        IKReal x30=((-1.00000000000000)*(x29));
        IKReal x31=((cj3)*(x30));
        IKReal x32=((0.999135601564979)*(cj1));
        IKReal x33=((0.0415698169996759)*(sj1)*(sj2));
        IKReal x34=((((-1.00000000000000)*(x33)))+(x32));
        IKReal x35=((sj3)*(x34));
        IKReal x36=((x31)+(x35));
        IKReal x37=((sj4)*(x36));
        IKReal x38=((x37)+(x26));
        IKReal x39=((cj1)*(cj2)*(cj4));
        IKReal x40=((0.0415698169996759)*(sj1));
        IKReal x41=((sj2)*(x32));
        IKReal x42=((((-1.00000000000000)*(x41)))+(x40));
        IKReal x43=((cj3)*(x42));
        IKReal x44=((0.999135601564979)*(sj1));
        IKReal x45=((sj2)*(x27));
        IKReal x46=((x44)+(x45));
        IKReal x47=((-1.00000000000000)*(x46));
        IKReal x48=((sj3)*(x47));
        IKReal x49=((x48)+(x43));
        IKReal x50=((sj4)*(x49));
        IKReal x51=((x39)+(x50));
        IKReal x52=((0.0415698169996759)*(cj2)*(sj3));
        IKReal x53=((0.999135601564979)*(cj2)*(cj3));
        IKReal x54=((x53)+(x52));
        IKReal x55=((-1.00000000000000)*(x54));
        IKReal x56=((sj4)*(x55));
        IKReal x57=((cj4)*(sj2));
        IKReal x58=((x56)+(((-1.00000000000000)*(x57))));
        IKReal x59=((cj3)*(x47));
        IKReal x60=((((-1.00000000000000)*(x40)))+(x41));
        IKReal x61=((sj3)*(x60));
        IKReal x62=((x59)+(x61));
        IKReal x63=((0.999135601564979)*(cj2)*(sj3));
        IKReal x64=((0.0415698169996759)*(cj2)*(cj3));
        IKReal x65=((x63)+(((-1.00000000000000)*(x64))));
        IKReal x66=((sj3)*(x29));
        IKReal x67=((cj3)*(x34));
        IKReal x68=((x66)+(x67));
        IKReal x69=((cj3)*(x29));
        IKReal x70=((((-1.00000000000000)*(x32)))+(x33));
        IKReal x71=((sj3)*(x70));
        IKReal x72=((x71)+(x69));
        IKReal x73=((cj4)*(x72));
        IKReal x74=((cj2)*(sj1)*(sj4));
        IKReal x75=((x74)+(x73));
        IKReal x76=((cj4)*(x54));
        IKReal x77=((sj2)*(sj4));
        IKReal x78=((((-1.00000000000000)*(x77)))+(x76));
        IKReal x79=((cj1)*(cj2)*(sj4));
        IKReal x80=((cj3)*(x60));
        IKReal x81=((sj3)*(x46));
        IKReal x82=((x80)+(x81));
        IKReal x83=((cj4)*(x82));
        IKReal x84=((x79)+(x83));
        new_r00=((((r10)*(x38)))+(((r00)*(x51)))+(((r20)*(x58))));
        new_r01=((((r01)*(x51)))+(((r11)*(x38)))+(((r21)*(x58))));
        new_r02=((((r22)*(x58)))+(((r02)*(x51)))+(((r12)*(x38))));
        new_r10=((((r10)*(x68)))+(((r20)*(x65)))+(((r00)*(x62))));
        new_r11=((((r11)*(x68)))+(((r01)*(x62)))+(((r21)*(x65))));
        new_r12=((((r22)*(x65)))+(((r02)*(x62)))+(((r12)*(x68))));
        new_r20=((((r10)*(x75)))+(((r00)*(x84)))+(((r20)*(x78))));
        new_r21=((((r21)*(x78)))+(((r11)*(x75)))+(((r01)*(x84))));
        new_r22=((((r22)*(x78)))+(((r02)*(x84)))+(((r12)*(x75))));
        {
        IKReal j6eval;
        j6eval=new_r00;
        if( j6eval >= -1.000010 && j6eval <= -0.999990 )
        {
            {
            j6 = 3.141593; sj6 = 0.000000; cj6 = -1.000000;
            IKReal j5mul = 1;
            j5=0;
            IKReal j7mul=1.00000000000000;
            j7=((-1.00000000000000)*(IKatan2(new_r12, new_r11)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(8);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.basesol[6].foffset = j6;
            solution.basesol[7].foffset = j7;
            solution.basesol[7].fmul = j7mul;
            solution.basesol[7].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 5;
            }
        
        } else
        if( j6eval >= 0.999990 && j6eval <= 1.000010 )
        {
            {
            j6 = 0.000000; sj6 = 0.000000; cj6 = 1.000000;
            IKReal j5mul = 1;
            j5=0;
            IKReal j7mul=-1.00000000000000;
            j7=((((-1.00000000000000)*(IKatan2(new_r21, ((-1.00000000000000)*(new_r22))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(8);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.basesol[6].foffset = j6;
            solution.basesol[7].foffset = j7;
            solution.basesol[7].fmul = j7mul;
            solution.basesol[7].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 5;
            }
        
        } else
        {
            {
            IKReal j5array[2], cj5array[2], sj5array[2];
            bool j5valid[2]={false};
            j5array[0]=IKatan2(new_r10, ((-1.00000000000000)*(new_r20)));
            sj5array[0]=IKsin(j5array[0]);
            cj5array[0]=IKcos(j5array[0]);
            j5array[1] = j5array[0] > 0 ? j5array[0]-IKPI : j5array[0]+IKPI;
            sj5array[1] = -sj5array[0];
            cj5array[1] = -cj5array[0];
            if( j5array[0] > IKPI )
                j5array[0]-=IK2PI;
            else if( j5array[0] < -IKPI )
                j5array[0]+=IK2PI;
            j5valid[0] = true;
            if( j5array[1] > IKPI )
                j5array[1]-=IK2PI;
            else if( j5array[1] < -IKPI )
                j5array[1]+=IK2PI;
            j5valid[1] = true;
            if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
                j5valid[1]=false;
            for(int ij5 = 0; ij5 < 2; ++ij5)
            {
            if( !j5valid[ij5] ) { continue; }
            j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
            
            {
            IKReal evalcond[1];
                evalcond[0]=IKsin(j5);
                if( IKabs(evalcond[0]) < 0.000010  )
                {
                {
                IKReal j7array[1], cj7array[1], sj7array[1];
                bool j7valid[1]={false};
                IKReal x85=IKcos(j5);
                IKReal x86=((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30);
                j7array[0]=IKatan2(((-1.00000000000000)*(new_r12)*(x86)), ((new_r11)*(x86)));
                sj7array[0]=IKsin(j7array[0]);
                cj7array[0]=IKcos(j7array[0]);
                if( j7array[0] > IKPI )
                    j7array[0]-=IK2PI;
                else if( j7array[0] < -IKPI )
                    j7array[0]+=IK2PI;
                j7valid[0] = true;
                for(int ij7 = 0; ij7 < 1; ++ij7)
                {
                if( !j7valid[ij7] ) { continue; }
                j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                j6array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(((IKabs(IKcos(j5)) != 0)?((IKReal)1/(IKcos(j5))):(IKReal)1.0e30))), new_r00);
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(8);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.basesol[7].foffset = j7;
                solution.vfree.resize(0);
                }
                }
                }
                }
            
            } else
            {
                if( 1 )
                {
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                j6array[0]=IKatan2(((new_r10)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))), new_r00);
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                {
                IKReal evalcond[1];
                    evalcond[0]=IKsin(j6);
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j7array[1], cj7array[1], sj7array[1];
                    bool j7valid[1]={false};
                    IKReal x87=IKcos(j6);
                    IKReal x88=((IKabs(x87) != 0)?((IKReal)1/(x87)):(IKReal)1.0e30);
                    IKReal x89=IKcos(j5);
                    IKReal x90=IKsin(j5);
                    j7array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(x88)*(x90)))+(((new_r21)*(x88)*(x89)))), ((((new_r21)*(x90)))+(((new_r11)*(x89)))));
                    sj7array[0]=IKsin(j7array[0]);
                    cj7array[0]=IKcos(j7array[0]);
                    if( j7array[0] > IKPI )
                        j7array[0]-=IK2PI;
                    else if( j7array[0] < -IKPI )
                        j7array[0]+=IK2PI;
                    j7valid[0] = true;
                    for(int ij7 = 0; ij7 < 1; ++ij7)
                    {
                    if( !j7valid[ij7] ) { continue; }
                    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(8);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[7].foffset = j7;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j7array[1], cj7array[1], sj7array[1];
                    bool j7valid[1]={false};
                    IKReal x91=IKsin(j6);
                    IKReal x92=((IKabs(x91) != 0)?((IKReal)1/(x91)):(IKReal)1.0e30);
                    j7array[0]=IKatan2(((new_r01)*(x92)), ((new_r02)*(x92)));
                    sj7array[0]=IKsin(j7array[0]);
                    cj7array[0]=IKcos(j7array[0]);
                    if( j7array[0] > IKPI )
                        j7array[0]-=IK2PI;
                    else if( j7array[0] < -IKPI )
                        j7array[0]+=IK2PI;
                    j7valid[0] = true;
                    for(int ij7 = 0; ij7 < 1; ++ij7)
                    {
                    if( !j7valid[ij7] ) { continue; }
                    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(8);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[7].foffset = j7;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                }
                }
                }
                }
                }
            
            } else
            {
            }
            }
            }
            }
            }
        
        }
        }
    }    /// Durand-Kerner polynomial root finding method
    static void polyroots3(IKReal rawcoeffs[3+1], IKReal rawroots[3], int& numroots)
    {
        using std::complex;
        assert(rawcoeffs[0] != 0);
        const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
        complex<IKReal> coeffs[3];
        const int maxsteps = 50;
        for(int i = 0; i < 3; ++i) {
            coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
        }
        complex<IKReal> roots[3];
        IKReal err[3];
        roots[0] = complex<IKReal>(1,0);
        roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
        err[0] = 1.0;
        err[1] = 1.0;
        for(int i = 2; i < 3; ++i) {
            roots[i] = roots[i-1]*roots[1];
            err[i] = 1.0;
        }
        for(int step = 0; step < maxsteps; ++step) {
            bool changed = false;
            for(int i = 0; i < 3; ++i) {
                if ( err[i] >= tol ) {
                    changed = true;
                    // evaluate
                    complex<IKReal> x = roots[i] + coeffs[0];
                    for(int j = 1; j < 3; ++j) {
                        x = roots[i] * x + coeffs[j];
                    }
                    for(int j = 0; j < 3; ++j) {
                        if( i != j ) {
                            if( roots[i] != roots[j] ) {
                                x /= (roots[i] - roots[j]);
                            }
                        }
                    }
                    roots[i] -= x;
                    err[i] = abs(x);
                }
            }
            if( !changed ) {
                break;
            }
        }
        numroots = 0;
        for(int i = 0; i < 3; ++i) {
            if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
                rawroots[numroots++] = real(roots[i]);
            }
        }
    }
    static void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
        IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
        if( det < 0 ) {
            numroots=0;
        }
        else if( det == 0 ) {
            rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
            numroots = 1;
        }
        else {
            det = IKsqrt(det);
            rawroots[0] = 0.5*(-rawcoeffs[1]+det)/rawcoeffs[0];
            rawroots[1] = 0.5*(-rawcoeffs[1]-det)/rawcoeffs[0];
            numroots = 2;
        }
    }
    /// intersection of a conic and the unit circle
    static void conicsolver(IKReal C0[6], IKReal roots[4], int& numroots)
    {
        IKReal rawcoeffs[4] = {-1,
                               C0[5] - C0[0] - C0[3],
                               C0[0]*C0[5] + C0[3]*C0[5] - C0[0]*C0[3] + C0[1]*C0[1] - C0[2]*C0[2] - C0[4]*C0[4],
                               C0[0]*C0[3]*C0[5] + 2*C0[1]*C0[2]*C0[4] - C0[0]*C0[4]*C0[4] - C0[3]*C0[2]*C0[2] - C0[5]*C0[1]*C0[1]};
        IKReal proots[3];
        int numproots, numyroots;
        polyroots3(rawcoeffs,proots,numproots);
        numroots = 0;
        int iroot=0;
        IKReal a, b, c, d, e, f;
        a = C0[0]+proots[iroot]; b = C0[1]; c = C0[3]+proots[iroot]; d = C0[2]; e = C0[4]; f = C0[5]-proots[iroot];
        IKReal adjugate[9] = {c*f-e*e, -b*f+e*d, b*e-c*d, -b*f+d*e, a*f-d*d, -a*e+b*d, b*e-d*c, -a*e+d*b, a*c-b*b};
        // find the greatest absolute value of adjugate and take that column
        int maxindex = 0;
        IKReal val = IKabs(adjugate[maxindex]);
        for(int i = 1; i < 9; ++i) {
            IKReal newval = IKabs(adjugate[i]);
            if( val < newval ) {
                val = newval;
                maxindex = i;
            }
        }
        maxindex = maxindex%3;
        if( adjugate[0] > 0 || adjugate[4] > 0 || adjugate[8] > 0 || adjugate[4*maxindex] >= 0 ) {
            // according to the structure of the matrix, should be always negative if a solution exists...
            return;
        }
        IKReal bmult = 1.0/IKsqrt(-adjugate[4*maxindex]);
        IKReal p[3] = {adjugate[maxindex]*bmult, adjugate[3+maxindex]*bmult, adjugate[6+maxindex]*bmult}; // intersection point
        // C = C0 - [p_x] = 2gh^t, C is rank1
        IKReal C[9] = {a,b+p[2],d-p[1],b-p[2],c,e+p[0],d+p[1],e-p[0],f};
        maxindex = 0;
        val = IKabs(C[maxindex]);
        for(int i = 1; i < 9; ++i) {
            IKReal newval = IKabs(C[i]);
            if( val < newval ) {
                val = newval;
                maxindex = i;
            }
        }
        int row = maxindex/3;
        int col = maxindex%3;
        IKReal lineequation[3], coeffs[3], yintersections[2];
        for(int i = 0; i < 2; ++i) {
            if( i == 0 ) {
                lineequation[0] = C[3*row];
                lineequation[1] = C[3*row+1];
                lineequation[2] = C[3*row+2];
            }
            else {
                lineequation[0] = C[col];
                lineequation[1] = C[3+col];
                lineequation[2] = C[6+col];
            }
    
            if( IKabs(lineequation[0]) < std::numeric_limits<IKReal>::epsilon() ) {
                yintersections[0] = -lineequation[2]/lineequation[1];
                IKReal x = 1-yintersections[0]*yintersections[0];
                if( x <= 0 && x > -std::numeric_limits<IKReal>::epsilon() ) {
                    roots[numroots++] = yintersections[0] > 0 ? IKPI_2 : -IKPI_2;
                }
                else {
                    x = IKsqrt(x);
                    roots[numroots++] = IKatan2(yintersections[0], x);
                    roots[numroots] = IKPI - roots[numroots-1]; numroots++;
                }
            }
            else {
                coeffs[0] = lineequation[0]*lineequation[0]+lineequation[1]*lineequation[1];
                coeffs[1] = 2*lineequation[1]*lineequation[2];
                coeffs[2] = lineequation[2]*lineequation[2]-lineequation[0]*lineequation[0];
                polyroots2(coeffs,yintersections,numyroots);
                for(int j = 0; j < numyroots; ++j) {
                    roots[numroots++] = IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
                }
            }
        }
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
