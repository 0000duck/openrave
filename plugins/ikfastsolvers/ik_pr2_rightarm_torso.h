/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 26 generated 2011-02-09 16:40:07.431525
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 2; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0, 3}; return freeparams; }
IKFAST_API int getNumJoints() { return 8; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x60000001; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60;
x0=IKcos(j[1]);
x1=IKsin(j[2]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=((x2)*(x4));
x7=((x0)*(x1)*(x3));
x8=((x7)+(x6));
x9=((-1.00000000000000)*(x8));
x10=IKcos(j[2]);
x11=IKcos(j[4]);
x12=IKcos(j[5]);
x13=((x0)*(x1)*(x2));
x14=((x3)*(x4));
x15=((((-1.00000000000000)*(x14)))+(x13));
x16=IKsin(j[5]);
x17=((x11)*(x9));
x18=((x0)*(x10)*(x5));
x19=((((-1.00000000000000)*(x18)))+(x17));
x20=IKcos(j[7]);
x21=((x12)*(x15));
x22=IKsin(j[7]);
x23=IKcos(j[6]);
x24=((x12)*(x19));
x25=((x15)*(x16));
x26=((x24)+(x25));
x27=((x23)*(x26));
x28=IKsin(j[6]);
x29=((x5)*(x9));
x30=((x0)*(x10)*(x11));
x31=((x30)+(x29));
x32=((x0)*(x2));
x33=((x1)*(x14));
x34=((((-1.00000000000000)*(x33)))+(x32));
x35=((x11)*(x34));
x36=((x10)*(x4)*(x5));
x37=((((-1.00000000000000)*(x36)))+(x35));
x38=((x1)*(x6));
x39=((x0)*(x3));
x40=((x39)+(x38));
x41=((x12)*(x40));
x42=((x12)*(x37));
x43=((x16)*(x40));
x44=((x42)+(x43));
x45=((x23)*(x44));
x46=((x10)*(x11)*(x4));
x47=((x34)*(x5));
x48=((x46)+(x47));
x49=((x1)*(x5));
x50=((x10)*(x11)*(x3));
x51=((x49)+(((-1.00000000000000)*(x50))));
x52=((x10)*(x12)*(x2));
x53=((x10)*(x3)*(x5));
x54=((x1)*(x11));
x55=((x54)+(x53));
x56=((-1.00000000000000)*(x55));
x57=((x10)*(x16)*(x2));
x58=((x12)*(x51));
x59=((x58)+(x57));
x60=((x23)*(x59));
eerot[0]=((((x20)*(((((-1.00000000000000)*(x28)*(x31)))+(x27)))))+(((x22)*(((((-1.00000000000000)*(x16)*(x19)))+(x21))))));
eerot[1]=((((x20)*(((((-1.00000000000000)*(x16)*(x19)))+(x21)))))+(((-1.00000000000000)*(x22)*(((((-1.00000000000000)*(x28)*(x31)))+(x27))))));
eerot[2]=((((x23)*(x31)))+(((x26)*(x28))));
eetrans[0]=((-0.0500000000000000)+(((0.100000000000000)*(x0)))+(((0.400000000000000)*(x0)*(x10)))+(((0.321000000000000)*(x29)))+(((0.321000000000000)*(x30)))+(((0.180000000000000)*(x23)*(x31)))+(((0.180000000000000)*(x26)*(x28))));
eerot[3]=((((x20)*(((((-1.00000000000000)*(x28)*(x48)))+(x45)))))+(((x22)*(((x41)+(((-1.00000000000000)*(x16)*(x37))))))));
eerot[4]=((((x20)*(((x41)+(((-1.00000000000000)*(x16)*(x37)))))))+(((-1.00000000000000)*(x22)*(((((-1.00000000000000)*(x28)*(x48)))+(x45))))));
eerot[5]=((((x28)*(((((x12)*(((((-1.00000000000000)*(x36)))+(x35)))))+(x43)))))+(((x23)*(x48))));
eetrans[1]=((-0.188000000000000)+(((0.100000000000000)*(x4)))+(((0.321000000000000)*(x47)))+(((0.321000000000000)*(x46)))+(((0.400000000000000)*(x10)*(x4)))+(((0.180000000000000)*(x28)*(x44)))+(((0.180000000000000)*(x23)*(x48))));
eerot[6]=((((x20)*(((x60)+(((-1.00000000000000)*(x28)*(x56)))))))+(((x22)*(((((-1.00000000000000)*(x16)*(x51)))+(x52))))));
eerot[7]=((((-1.00000000000000)*(x22)*(((x60)+(((-1.00000000000000)*(x28)*(x56)))))))+(((x20)*(((((-1.00000000000000)*(x16)*(x51)))+(x52))))));
eerot[8]=((((x28)*(x59)))+(((x23)*(x56))));
eetrans[2]=((0.739675000000000)+(((0.180000000000000)*(x28)*(x59)))+(((-0.400000000000000)*(x1)))+(((-0.321000000000000)*(x53)))+(((-0.321000000000000)*(x54)))+(((0.180000000000000)*(x23)*(x56)))+(j[0]));
}

class IKSolver {
public:
IKReal j25, cj25, sj25,
j26, cj26, sj26,
j28, cj28, sj28,
j29, cj29, sj29,
j30, cj30, sj30,
j31, cj31, sj31,
j12, cj12, sj12,
j27, cj27, sj27,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j12=pfree[0]; cj12=cos(pfree[0]); sj12=sin(pfree[0]);
j27=pfree[1]; cj27=cos(pfree[1]); sj27=sin(pfree[1]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((0.0500000000000000)+(((-0.180000000000000)*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((0.188000000000000)+(((-0.180000000000000)*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.739675000000000)+(((-0.180000000000000)*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal dummyeval[1];
IKReal x0=(sj27)*(sj27);
IKReal x1=(j12)*(j12);
dummyeval[0]=((((-1581506.25000000)*(j12)*(pz)*(x0)))+(((2994.51924843750)*(x0)))+(((790753.125000000)*(x0)*(x1)))+(((-1000000.00000000)*((py)*(py))))+(((-6250000.00000000)*(x0)*(x1)*((pz)*(pz))))+(((-625000.000000000)*(pp)*(px)*(x0)))+(((790753.125000000)*(pp)*(x0)))+(((158150.625000000)*(px)*(x0)))+(((-3125000.00000000)*(pp)*(x0)*(x1)))+(((6250000.00000000)*(j12)*(pz)*(x0)*(x1)))+(((-1562500.00000000)*(x0)*((x1)*(x1))))+(((6250000.00000000)*(j12)*(pp)*(pz)*(x0)))+(((-625000.000000000)*(px)*(x0)*(x1)))+(((-62500.0000000000)*(x0)*((px)*(px))))+(((-1562500.00000000)*(x0)*((pp)*(pp))))+(((1250000.00000000)*(j12)*(px)*(pz)*(x0))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[1];
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((j27)+(3.14159265358979)), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.000010  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x2=(j12)*(j12);
IKReal x3=(cj28)*(cj28);
IKReal x4=(j12)*(j12)*(j12);
IKReal x5=(j12)*(j12)*(j12)*(j12);
IKReal x6=(pz)*(pz);
IKReal x7=(pp)*(pp);
IKReal x8=(px)*(px);
IKReal x9=((6.06554672411953)*(px)*(x2));
IKReal x10=((60.6554672411953)*(j12)*(pp)*(pz));
IKReal x11=((7.67416004308964)*(x2));
IKReal x12=((6.06554672411953)*(pp)*(px));
IKReal x13=((7.67416004308964)*(pp));
IKReal x14=((60.6554672411953)*(j12)*(pz)*(x2));
IKReal x15=((15.3483200861793)*(j12)*(pz));
IKReal x16=((15.1638668102988)*(x7));
IKReal x17=((1.53483200861793)*(px));
IKReal x18=((0.606554672411953)*(x8));
IKReal x19=((15.1638668102988)*(x5));
IKReal x20=((12.1310934482391)*(j12)*(px)*(pz));
IKReal x21=((30.3277336205976)*(pp)*(x2));
IKReal x22=((60.6554672411953)*(x2)*(x6));
op[0]=((-0.970938565731723)+(((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x16)))+(((-1.00000000000000)*(x15)))+(((-1.00000000000000)*(x12)))+(((-1.00000000000000)*(x22)))+(((-1.00000000000000)*(x21)))+(x3)+(x11)+(x10)+(x13)+(x14)+(x17)+(x20)+(((-1.00000000000000)*(x9))));
op[1]=0;
op[2]=((-1.94187713146345)+(((-60.6554672411953)*(pp)*(x2)))+(((2.00000000000000)*(x3)))+(((-121.310934482391)*(x2)*(x6)))+(((-2.78689065517609)*(x8)))+(((15.3483200861793)*(x2)))+(((121.310934482391)*(j12)*(pp)*(pz)))+(((15.3483200861793)*(pp)))+(((121.310934482391)*(j12)*(pz)*(x2)))+(((-30.3277336205976)*(x5)))+(((-30.3277336205976)*(x7)))+(((-30.6966401723586)*(j12)*(pz))));
op[3]=0;
op[4]=((-0.970938565731723)+(((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x16)))+(((-1.00000000000000)*(x17)))+(((-1.00000000000000)*(x15)))+(((-1.00000000000000)*(x20)))+(((-1.00000000000000)*(x22)))+(((-1.00000000000000)*(x21)))+(x3)+(x9)+(x11)+(x10)+(x13)+(x12)+(x14));
polyroots4(op,zeror,numroots);
IKReal j25array[4], cj25array[4], sj25array[4], tempj25array[1];
int numsolutions = 0;
for(int ij25 = 0; ij25 < numroots; ++ij25)
{
IKReal dummy0 = zeror[ij25];
tempj25array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj25 = 0; kj25 < 1; ++kj25)
{
j25array[numsolutions] = tempj25array[kj25];
if( j25array[numsolutions] > IKPI )
    j25array[numsolutions]-=IK2PI;
else if( j25array[numsolutions] < -IKPI )
    j25array[numsolutions]+=IK2PI;
sj25array[numsolutions] = IKsin(j25array[numsolutions]);
cj25array[numsolutions] = IKcos(j25array[numsolutions]);
bool valid = true;
for( int kj25 = 0; kj25 < numsolutions; ++kj25)
{
    if( IKabs(cj25array[kj25]-cj25array[numsolutions]) < 0.0001 && IKabs(sj25array[kj25]-sj25array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij25 = 0; ij25 < numsolutions; ++ij25)
    {
    j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IKReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
cj28array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12))))+(((-0.778816199376947)*(cj25)*(px))));
if( cj28array[0] >= -1.0001 && cj28array[0] <= 1.0001 )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
if( j28valid[0] && j28valid[1] && IKabs(cj28array[0]-cj28array[1]) < 0.0001 && IKabs(sj28array[0]-sj28array[1]) < 0.0001 )
    j28valid[1]=false;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((40.0000000000000)+(((321.000000000000)*(j12)*(sj28)))+(((-321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
dummyeval[1]=((40000.0000000000)+(((32100.0000000000)*(cj28)))+(((-400000.000000000)*(cj25)*(px)))+(((-321000.000000000)*(pz)*(sj28)))+(((321000.000000000)*(j12)*(sj28)))+(((-321000.000000000)*(cj25)*(cj28)*(px))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz))));
dummyeval[1]=((((-400.000000000000)*(j12)))+(((400.000000000000)*(pz)))+(((-321.000000000000)*(cj28)*(j12)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x23=((((-1.00000000000000)*(j12)))+(pz));
j26array[0]=IKatan2(((((IKabs(((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj28)*(sj28))))+(((-1000000.00000000)*((x23)*(x23))))))), ((((IKabs(((((-400.000000000000)*(j12)))+(((400.000000000000)*(pz)))+(((-321.000000000000)*(cj28)*(j12)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((-400.000000000000)*(j12)))+(((400.000000000000)*(pz)))+(((-321.000000000000)*(cj28)*(j12)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x23)*(((100.000000000000)+(((-1000.00000000000)*(cj25)*(px)))))))+(((-321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x109=((cj25)*(px));
IKReal x110=((0.100000000000000)+(((-1.00000000000000)*(x109))));
j26array[0]=IKatan2(((((IKabs(((40.0000000000000)+(((321.000000000000)*(j12)*(sj28)))+(((-321.000000000000)*(pz)*(sj28)))+(((-400.000000000000)*(x109)))+(((32.1000000000000)*(cj28)))+(((-321.000000000000)*(cj28)*(x109))))) != 0)?((IKReal)1/(((40.0000000000000)+(((321.000000000000)*(j12)*(sj28)))+(((-321.000000000000)*(pz)*(sj28)))+(((-400.000000000000)*(x109)))+(((32.1000000000000)*(cj28)))+(((-321.000000000000)*(cj28)*(x109)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(x110)*(((((-1000.00000000000)*(j12)))+(((1000.00000000000)*(pz)))))))+(((321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))), ((((IKabs(((40000.0000000000)+(((32100.0000000000)*(cj28)))+(((-321000.000000000)*(pz)*(sj28)))+(((-321000.000000000)*(cj28)*(x109)))+(((-400000.000000000)*(x109)))+(((321000.000000000)*(j12)*(sj28))))) != 0)?((IKReal)1/(((40000.0000000000)+(((32100.0000000000)*(cj28)))+(((-321000.000000000)*(pz)*(sj28)))+(((-321000.000000000)*(cj28)*(x109)))+(((-400000.000000000)*(x109)))+(((321000.000000000)*(j12)*(sj28)))))):(IKReal)1.0e30))*(((((103041.000000000)*((sj28)*(sj28))))+(((-1000000.00000000)*((x110)*(x110))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x111=(sj28)*(sj28);
IKReal x112=((103041.000000000)*(x111));
IKReal x113=((256800.000000000)*(cj28));
IKReal x114=x3;
IKReal x115=((103041.000000000)*(x114));
IKReal x116=((160000.000000000)+(x113)+(x112)+(x115));
IKReal x117=((IKabs(x116) != 0)?((IKReal)1/(x116)):(IKReal)1.0e30);
IKReal x118=((321000.000000000)*(cj28));
IKReal x119=((400000.000000000)+(x118));
IKReal x120=((cj25)*(px));
IKReal x121=((0.100000000000000)+(((-1.00000000000000)*(x120))));
IKReal x122=((((-1.00000000000000)*(j12)))+(pz));
j26array[0]=IKatan2(((-1.00000000000000)*(x117)*(((((-321000.000000000)*(sj28)*(x121)))+(((x119)*(x122)))))), ((-1.00000000000000)*(x117)*(((((321000.000000000)*(sj28)*(x122)))+(((x119)*(x121)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

} else
{
evalcond[0]=((IKabs(py))+(IKabs(((IKfmod(j27, 6.28318530717959))+(-3.14159265358979)))));
if( IKabs(evalcond[0]) < 0.000010  )
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x123=(j12)*(j12);
IKReal x124=(cj28)*(cj28);
IKReal x125=(j12)*(j12)*(j12);
IKReal x126=(j12)*(j12)*(j12)*(j12);
IKReal x127=(pz)*(pz);
IKReal x128=(pp)*(pp);
IKReal x129=(px)*(px);
IKReal x130=((6.06554672411953)*(px)*(x123));
IKReal x131=((60.6554672411953)*(j12)*(pp)*(pz));
IKReal x132=((7.67416004308964)*(x123));
IKReal x133=((6.06554672411953)*(pp)*(px));
IKReal x134=((7.67416004308964)*(pp));
IKReal x135=((60.6554672411953)*(j12)*(pz)*(x123));
IKReal x136=((15.3483200861793)*(j12)*(pz));
IKReal x137=((15.1638668102988)*(x128));
IKReal x138=((1.53483200861793)*(px));
IKReal x139=((0.606554672411953)*(x129));
IKReal x140=((15.1638668102988)*(x126));
IKReal x141=((12.1310934482391)*(j12)*(px)*(pz));
IKReal x142=((30.3277336205976)*(pp)*(x123));
IKReal x143=((60.6554672411953)*(x123)*(x127));
op[0]=((-0.970938565731723)+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x140)))+(x141)+(x135)+(x134)+(x131)+(x132)+(x138)+(x124)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x139))));
op[1]=0;
op[2]=((-1.94187713146345)+(((2.00000000000000)*(x124)))+(((-60.6554672411953)*(pp)*(x123)))+(((-30.3277336205976)*(x128)))+(((-30.3277336205976)*(x126)))+(((-2.78689065517609)*(x129)))+(((121.310934482391)*(j12)*(pp)*(pz)))+(((15.3483200861793)*(x123)))+(((15.3483200861793)*(pp)))+(((121.310934482391)*(j12)*(pz)*(x123)))+(((-30.6966401723586)*(j12)*(pz)))+(((-121.310934482391)*(x123)*(x127))));
op[3]=0;
op[4]=((-0.970938565731723)+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(x140)))+(x135)+(x134)+(x131)+(x130)+(x133)+(x132)+(x124)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x138)))+(((-1.00000000000000)*(x139))));
polyroots4(op,zeror,numroots);
IKReal j25array[4], cj25array[4], sj25array[4], tempj25array[1];
int numsolutions = 0;
for(int ij25 = 0; ij25 < numroots; ++ij25)
{
IKReal dummy0 = zeror[ij25];
tempj25array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj25 = 0; kj25 < 1; ++kj25)
{
j25array[numsolutions] = tempj25array[kj25];
if( j25array[numsolutions] > IKPI )
    j25array[numsolutions]-=IK2PI;
else if( j25array[numsolutions] < -IKPI )
    j25array[numsolutions]+=IK2PI;
sj25array[numsolutions] = IKsin(j25array[numsolutions]);
cj25array[numsolutions] = IKcos(j25array[numsolutions]);
bool valid = true;
for( int kj25 = 0; kj25 < numsolutions; ++kj25)
{
    if( IKabs(cj25array[kj25]-cj25array[numsolutions]) < 0.0001 && IKabs(sj25array[kj25]-sj25array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij25 = 0; ij25 < numsolutions; ++ij25)
    {
    j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IKReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
cj28array[0]=((-0.985362149532710)+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12))))+(((-0.778816199376947)*(cj25)*(px))));
if( cj28array[0] >= -1.0001 && cj28array[0] <= 1.0001 )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
if( j28valid[0] && j28valid[1] && IKabs(cj28array[0]-cj28array[1]) < 0.0001 && IKabs(sj28array[0]-sj28array[1]) < 0.0001 )
    j28valid[1]=false;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((40.0000000000000)+(((321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-321.000000000000)*(j12)*(sj28)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
dummyeval[1]=((40000.0000000000)+(((-321000.000000000)*(j12)*(sj28)))+(((32100.0000000000)*(cj28)))+(((-400000.000000000)*(cj25)*(px)))+(((321000.000000000)*(pz)*(sj28)))+(((-321000.000000000)*(cj25)*(cj28)*(px))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((321000.000000000)*(cj25)*(px)*(sj28)))+(((-32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((400000.000000000)*(pz))));
dummyeval[1]=((((400.000000000000)*(j12)))+(((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(j12)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((321000.000000000)*(cj25)*(px)*(sj28)))+(((-32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((321000.000000000)*(cj25)*(px)*(sj28)))+(((-32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((((j12)+(((-1.00000000000000)*(pz)))))*(((((1000000.00000000)*(pz)))+(((-1000000.00000000)*(j12)))))))+(((103041.000000000)*((sj28)*(sj28))))))), ((((IKabs(((((400.000000000000)*(j12)))+(((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(j12)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((400.000000000000)*(j12)))+(((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(j12)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((((100.000000000000)+(((-1000.00000000000)*(cj25)*(px)))))*(((((-1.00000000000000)*(j12)))+(pz)))))+(((-321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x144=((cj25)*(px));
IKReal x145=((0.100000000000000)+(((-1.00000000000000)*(x144))));
j26array[0]=IKatan2(((((IKabs(((40.0000000000000)+(((321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(j12)*(sj28)))+(((-400.000000000000)*(x144)))+(((-321.000000000000)*(cj28)*(x144)))+(((32.1000000000000)*(cj28))))) != 0)?((IKReal)1/(((40.0000000000000)+(((321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(j12)*(sj28)))+(((-400.000000000000)*(x144)))+(((-321.000000000000)*(cj28)*(x144)))+(((32.1000000000000)*(cj28)))))):(IKReal)1.0e30))*(((((-321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))+(((x145)*(((((1000.00000000000)*(j12)))+(((-1000.00000000000)*(pz)))))))))), ((((IKabs(((40000.0000000000)+(((-400000.000000000)*(x144)))+(((-321000.000000000)*(j12)*(sj28)))+(((32100.0000000000)*(cj28)))+(((321000.000000000)*(pz)*(sj28)))+(((-321000.000000000)*(cj28)*(x144))))) != 0)?((IKReal)1/(((40000.0000000000)+(((-400000.000000000)*(x144)))+(((-321000.000000000)*(j12)*(sj28)))+(((32100.0000000000)*(cj28)))+(((321000.000000000)*(pz)*(sj28)))+(((-321000.000000000)*(cj28)*(x144)))))):(IKReal)1.0e30))*(((((-1000000.00000000)*((x145)*(x145))))+(((103041.000000000)*((sj28)*(sj28))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x146=(sj28)*(sj28);
IKReal x147=((103041.000000000)*(x146));
IKReal x148=((256800.000000000)*(cj28));
IKReal x149=x124;
IKReal x150=((103041.000000000)*(x149));
IKReal x151=((160000.000000000)+(x150)+(x147)+(x148));
IKReal x152=((IKabs(x151) != 0)?((IKReal)1/(x151)):(IKReal)1.0e30);
IKReal x153=((cj25)*(px));
IKReal x154=((0.100000000000000)+(((-1.00000000000000)*(x153))));
IKReal x155=((((-1.00000000000000)*(j12)))+(pz));
j26array[0]=IKatan2(((-1.00000000000000)*(x152)*(((((x155)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))+(((321000.000000000)*(sj28)*(x154)))))), ((x152)*(((((-1.00000000000000)*(x154)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))+(((321000.000000000)*(sj28)*(x155)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}
    }

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
IKReal op[4+1], zeror[4];
int numroots;
IKReal x156=(sj27)*(sj27);
IKReal x157=(j12)*(j12);
IKReal x158=(j12)*(j12)*(j12);
IKReal x159=(py)*(py);
IKReal x160=(px)*(px);
IKReal x161=(pp)*(pp);
IKReal x162=(j12)*(j12)*(j12)*(j12);
IKReal x163=(pz)*(pz);
IKReal x164=((1250000.00000000)*(pp)*(py)*(x156));
IKReal x165=((1250000.00000000)*(py)*(x156)*(x157));
IKReal x166=((4000000.00000000)*(px)*(py));
IKReal x167=((316301.250000000)*(py)*(x156));
IKReal x168=((250000.000000000)*(px)*(py)*(x156));
IKReal x169=((2500000.00000000)*(j12)*(py)*(pz)*(x156));
IKReal x170=((625000.000000000)*(px)*(x156)*(x157));
IKReal x171=((2994.51924843750)*(x156));
IKReal x172=((790753.125000000)*(pp)*(x156));
IKReal x173=((6250000.00000000)*(j12)*(pz)*(x156)*(x157));
IKReal x174=((790753.125000000)*(x156)*(x157));
IKReal x175=((6250000.00000000)*(j12)*(pp)*(pz)*(x156));
IKReal x176=((625000.000000000)*(pp)*(px)*(x156));
IKReal x177=((1562500.00000000)*(x156)*(x162));
IKReal x178=((1250000.00000000)*(j12)*(px)*(pz)*(x156));
IKReal x179=((1000000.00000000)*(x159));
IKReal x180=((62500.0000000000)*(x156)*(x160));
IKReal x181=((6250000.00000000)*(x156)*(x157)*(x163));
IKReal x182=((3125000.00000000)*(pp)*(x156)*(x157));
IKReal x183=((158150.625000000)*(px)*(x156));
IKReal x184=((1562500.00000000)*(x156)*(x161));
IKReal x185=((1581506.25000000)*(j12)*(pz)*(x156));
op[0]=((((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x176)))+(((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(x181)))+(x178)+(x171)+(x173)+(x172)+(x175)+(x174)+(x183));
op[1]=((((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(x168)+(x164)+(x165));
op[2]=((((-4000000.00000000)*(x160)))+(((1581506.25000000)*(x156)*(x157)))+(((-6250000.00000000)*(pp)*(x156)*(x157)))+(((-3125000.00000000)*(x156)*(x162)))+(((-3125000.00000000)*(x156)*(x161)))+(((2000000.00000000)*(x159)))+(((-250000.000000000)*(x156)*(x159)))+(((-3163012.50000000)*(j12)*(pz)*(x156)))+(((-12500000.0000000)*(x156)*(x157)*(x163)))+(((12500000.0000000)*(j12)*(pz)*(x156)*(x157)))+(((125000.000000000)*(x156)*(x160)))+(((1581506.25000000)*(pp)*(x156)))+(((12500000.0000000)*(j12)*(pp)*(pz)*(x156)))+(((5989.03849687500)*(x156))));
op[3]=((((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x167)))+(x166)+(x164)+(x165));
op[4]=((((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x183)))+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(x181)))+(x171)+(x170)+(x173)+(x172)+(x175)+(x174)+(x176));
polyroots4(op,zeror,numroots);
IKReal j25array[4], cj25array[4], sj25array[4], tempj25array[1];
int numsolutions = 0;
for(int ij25 = 0; ij25 < numroots; ++ij25)
{
IKReal dummy0 = zeror[ij25];
tempj25array[0]=((2.00000000000000)*(atan(dummy0)));
for(int kj25 = 0; kj25 < 1; ++kj25)
{
j25array[numsolutions] = tempj25array[kj25];
if( j25array[numsolutions] > IKPI )
    j25array[numsolutions]-=IK2PI;
else if( j25array[numsolutions] < -IKPI )
    j25array[numsolutions]+=IK2PI;
sj25array[numsolutions] = IKsin(j25array[numsolutions]);
cj25array[numsolutions] = IKcos(j25array[numsolutions]);
bool valid = true;
for( int kj25 = 0; kj25 < numsolutions; ++kj25)
{
    if( IKabs(cj25array[kj25]-cj25array[numsolutions]) < 0.0001 && IKabs(sj25array[kj25]-sj25array[numsolutions]) < 0.0001 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
}
for(int ij25 = 0; ij25 < numsolutions; ++ij25)
    {
    j25 = j25array[ij25]; cj25 = cj25array[ij25]; sj25 = sj25array[ij25];

{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-0.160000000000000)*(cj25)*(px)*(sj27)))+(((1.60000000000000)*(cj25)*(px)*(py)*(sj25)*(sj27)))+(((0.800000000000000)*(sj27)*((j12)*(j12))))+(((0.800000000000000)*(sj27)*((py)*(py))*((sj25)*(sj25))))+(((-1.60000000000000)*(j12)*(pz)*(sj27)))+(((0.00800000000000000)*(sj27)))+(((0.800000000000000)*(sj27)*((cj25)*(cj25))*((px)*(px))))+(((-0.160000000000000)*(py)*(sj25)*(sj27)))+(((0.800000000000000)*(sj27)*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[3];
IKReal x186=((px)*(sj25));
IKReal x187=((cj25)*(py));
IKReal x188=((((-1.00000000000000)*(x187)))+(x186));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x188;
evalcond[2]=x188;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
cj28array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12))))+(((-0.778816199376947)*(cj25)*(px))));
if( cj28array[0] >= -1.0001 && cj28array[0] <= 1.0001 )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
if( j28valid[0] && j28valid[1] && IKabs(cj28array[0]-cj28array[1]) < 0.0001 && IKabs(sj28array[0]-sj28array[1]) < 0.0001 )
    j28valid[1]=false;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-321000.000000000)*(py)*(sj25)*(sj28)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz))));
dummyeval[1]=((((-400.000000000000)*(j12)))+(((400.000000000000)*(pz)))+(((-321.000000000000)*(cj28)*(j12)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((40.0000000000000)+(((-400.000000000000)*(py)*(sj25)))+(((-321.000000000000)*(cj28)*(py)*(sj25)))+(((321.000000000000)*(j12)*(sj28)))+(((-321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x189=((0.321000000000000)*(cj28));
IKReal x190=((0.400000000000000)+(x189));
IKReal x191=((((-1.00000000000000)*(j12)))+(pz));
IKReal x192=((321.000000000000)*(j12)*(sj28));
IKReal x193=((32.1000000000000)*(cj28));
IKReal x194=((40.0000000000000)+(x193)+(x192));
IKReal x195=((321.000000000000)*(pz)*(sj28));
IKReal x196=((400.000000000000)*(cj25)*(px));
IKReal x197=((400.000000000000)*(py)*(sj25));
IKReal x198=((321.000000000000)*(cj28)*(py)*(sj25));
IKReal x199=((321.000000000000)*(cj25)*(cj28)*(px));
IKReal x200=((x199)+(x198)+(x197)+(x196)+(x195));
IKReal x201=((x194)+(((-1.00000000000000)*(x200))));
IKReal x202=((IKabs(x201) != 0)?((IKReal)1/(x201)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x202)*(((((-1.00000000000000)*(x191)*(((100.000000000000)+(((-1000.00000000000)*(cj25)*(px)))+(((-1000.00000000000)*(py)*(sj25)))))))+(((321.000000000000)*(sj28)*(x190)))))), ((x202)*(((((-1000.00000000000)*((x190)*(x190))))+(((1000.00000000000)*((x191)*(x191))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x203=((((-1.00000000000000)*(j12)))+(pz));
j26array[0]=IKatan2(((((IKabs(((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-321000.000000000)*(py)*(sj25)*(sj28)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((32100.0000000000)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-321000.000000000)*(py)*(sj25)*(sj28)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((-321000.000000000)*(cj25)*(px)*(sj28)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((-1000000.00000000)*((x203)*(x203))))+(((103041.000000000)*((sj28)*(sj28))))))), ((((IKabs(((((-400.000000000000)*(j12)))+(((400.000000000000)*(pz)))+(((-321.000000000000)*(cj28)*(j12)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((-400.000000000000)*(j12)))+(((400.000000000000)*(pz)))+(((-321.000000000000)*(cj28)*(j12)))+(((321.000000000000)*(cj28)*(pz)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((-321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))+(((-1.00000000000000)*(x203)*(((100.000000000000)+(((-1000.00000000000)*(cj25)*(px)))+(((-1000.00000000000)*(py)*(sj25)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x204=(sj28)*(sj28);
IKReal x205=((103041.000000000)*(x204));
IKReal x206=((256800.000000000)*(cj28));
IKReal x207=(cj28)*(cj28);
IKReal x208=((103041.000000000)*(x207));
IKReal x209=((160000.000000000)+(x206)+(x205)+(x208));
IKReal x210=((IKabs(x209) != 0)?((IKReal)1/(x209)):(IKReal)1.0e30);
IKReal x211=((321000.000000000)*(cj28));
IKReal x212=((400000.000000000)+(x211));
IKReal x213=((cj25)*(px));
IKReal x214=((py)*(sj25));
IKReal x215=((x213)+(x214));
IKReal x216=((0.100000000000000)+(((-1.00000000000000)*(x215))));
IKReal x217=((((-1.00000000000000)*(j12)))+(pz));
j26array[0]=IKatan2(((-1.00000000000000)*(x210)*(((((x212)*(x217)))+(((-321000.000000000)*(sj28)*(x216)))))), ((-1.00000000000000)*(x210)*(((((321000.000000000)*(sj28)*(x217)))+(((x212)*(x216)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
IKReal x218=((cj25)*(py));
IKReal x219=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((x219)+(((-1.00000000000000)*(x218))));
evalcond[2]=((x218)+(((-1.00000000000000)*(x219))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j28array[2], cj28array[2], sj28array[2];
bool j28valid[2]={false};
cj28array[0]=((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12))))+(((-0.778816199376947)*(cj25)*(px))));
if( cj28array[0] >= -1.0001 && cj28array[0] <= 1.0001 )
{
    j28valid[0] = j28valid[1] = true;
    j28array[0] = IKacos(cj28array[0]);
    sj28array[0] = IKsin(j28array[0]);
    cj28array[1] = cj28array[0];
    j28array[1] = -j28array[0];
    sj28array[1] = -sj28array[0];
}
else if( isnan(cj28array[0]) )
{
    // probably any value will work
    j28valid[0] = true;
    cj28array[0] = 1; sj28array[0] = 0; j28array[0] = 0;
}
if( j28valid[0] && j28valid[1] && IKabs(cj28array[0]-cj28array[1]) < 0.0001 && IKabs(sj28array[0]-sj28array[1]) < 0.0001 )
    j28valid[1]=false;
for(int ij28 = 0; ij28 < 2; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=((((321000.000000000)*(cj25)*(px)*(sj28)))+(((-32100.0000000000)*(sj28)))+(((321000.000000000)*(py)*(sj25)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((400000.000000000)*(pz))));
dummyeval[1]=((((400.000000000000)*(j12)))+(((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(j12)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((40.0000000000000)+(((-400.000000000000)*(py)*(sj25)))+(((-321.000000000000)*(cj28)*(py)*(sj25)))+(((321.000000000000)*(pz)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-321.000000000000)*(j12)*(sj28)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x220=((0.321000000000000)*(cj28));
IKReal x221=((0.400000000000000)+(x220));
IKReal x222=((((-1.00000000000000)*(j12)))+(pz));
IKReal x223=((321.000000000000)*(pz)*(sj28));
IKReal x224=((32.1000000000000)*(cj28));
IKReal x225=((40.0000000000000)+(x223)+(x224));
IKReal x226=((321.000000000000)*(j12)*(sj28));
IKReal x227=((400.000000000000)*(cj25)*(px));
IKReal x228=((400.000000000000)*(py)*(sj25));
IKReal x229=((321.000000000000)*(cj28)*(py)*(sj25));
IKReal x230=((321.000000000000)*(cj25)*(cj28)*(px));
IKReal x231=((x229)+(x228)+(x227)+(x226)+(x230));
IKReal x232=((((-1.00000000000000)*(x231)))+(x225));
IKReal x233=((IKabs(x232) != 0)?((IKReal)1/(x232)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x233)*(((((-321.000000000000)*(sj28)*(x221)))+(((-1.00000000000000)*(x222)*(((100.000000000000)+(((-1000.00000000000)*(cj25)*(px)))+(((-1000.00000000000)*(py)*(sj25)))))))))), ((x233)*(((((1000.00000000000)*((x222)*(x222))))+(((-1000.00000000000)*((x221)*(x221))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
j26array[0]=IKatan2(((((IKabs(((((321000.000000000)*(cj25)*(px)*(sj28)))+(((-32100.0000000000)*(sj28)))+(((321000.000000000)*(py)*(sj25)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((400000.000000000)*(pz))))) != 0)?((IKReal)1/(((((321000.000000000)*(cj25)*(px)*(sj28)))+(((-32100.0000000000)*(sj28)))+(((321000.000000000)*(py)*(sj25)*(sj28)))+(((321000.000000000)*(cj28)*(pz)))+(((-400000.000000000)*(j12)))+(((-321000.000000000)*(cj28)*(j12)))+(((400000.000000000)*(pz)))))):(IKReal)1.0e30))*(((((((j12)+(((-1.00000000000000)*(pz)))))*(((((1000000.00000000)*(pz)))+(((-1000000.00000000)*(j12)))))))+(((103041.000000000)*((sj28)*(sj28))))))), ((((IKabs(((((400.000000000000)*(j12)))+(((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(j12)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28))))) != 0)?((IKReal)1/(((((400.000000000000)*(j12)))+(((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(j12)))+(((32.1000000000000)*(sj28)))+(((-321.000000000000)*(py)*(sj25)*(sj28)))+(((-321.000000000000)*(cj25)*(px)*(sj28)))))):(IKReal)1.0e30))*(((((((((-1.00000000000000)*(j12)))+(pz)))*(((100.000000000000)+(((-1000.00000000000)*(cj25)*(px)))+(((-1000.00000000000)*(py)*(sj25)))))))+(((-321.000000000000)*(sj28)*(((0.400000000000000)+(((0.321000000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x234=(sj28)*(sj28);
IKReal x235=((103041.000000000)*(x234));
IKReal x236=((256800.000000000)*(cj28));
IKReal x237=(cj28)*(cj28);
IKReal x238=((103041.000000000)*(x237));
IKReal x239=((160000.000000000)+(x238)+(x236)+(x235));
IKReal x240=((IKabs(x239) != 0)?((IKReal)1/(x239)):(IKReal)1.0e30);
IKReal x241=((cj25)*(px));
IKReal x242=((py)*(sj25));
IKReal x243=((x242)+(x241));
IKReal x244=((0.100000000000000)+(((-1.00000000000000)*(x243))));
IKReal x245=((((-1.00000000000000)*(j12)))+(pz));
j26array[0]=IKatan2(((-1.00000000000000)*(x240)*(((((x245)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))+(((321000.000000000)*(sj28)*(x244)))))), ((x240)*(((((321000.000000000)*(sj28)*(x245)))+(((-1.00000000000000)*(x244)*(((400000.000000000)+(((321000.000000000)*(cj28)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x246=x157;
IKReal x247=((cj27)*(px)*(sj25));
IKReal x248=((cj25)*(cj27)*(py));
IKReal x249=((x247)+(((-1.00000000000000)*(x248))));
IKReal x250=((0.0669590000000000)+(x246)+(pp));
IKReal x251=((2.00000000000000)*(j12)*(pz));
IKReal x252=((0.200000000000000)*(cj25)*(px));
IKReal x253=((0.200000000000000)*(py)*(sj25));
IKReal x254=((x251)+(x252)+(x253));
IKReal x255=((x250)+(((-1.00000000000000)*(x254))));
IKReal x256=((1.60000000000000)*(cj25)*(px)*(py)*(sj25)*(sj27));
IKReal x257=((0.800000000000000)*(sj27)*(x246));
IKReal x258=x159;
IKReal x259=(sj25)*(sj25);
IKReal x260=((0.800000000000000)*(sj27)*(x258)*(x259));
IKReal x261=((0.00800000000000000)*(sj27));
IKReal x262=(cj25)*(cj25);
IKReal x263=x160;
IKReal x264=((0.800000000000000)*(sj27)*(x262)*(x263));
IKReal x265=x163;
IKReal x266=((0.800000000000000)*(sj27)*(x265));
IKReal x267=((x256)+(x257)+(x264)+(x266)+(x261)+(x260));
IKReal x268=((0.160000000000000)*(py)*(sj25)*(sj27));
IKReal x269=((1.60000000000000)*(j12)*(pz)*(sj27));
IKReal x270=((0.160000000000000)*(cj25)*(px)*(sj27));
IKReal x271=((x269)+(x268)+(x270));
IKReal x272=((x267)+(((-1.00000000000000)*(x271))));
IKReal x273=((IKabs(x272) != 0)?((IKReal)1/(x272)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x273)*(((((-1.00000000000000)*(x249)*(((0.0800000000000000)+(((-0.800000000000000)*(py)*(sj25)))+(((-0.800000000000000)*(cj25)*(px)))))))+(((x255)*(((((j12)*(sj27)))+(((-1.00000000000000)*(pz)*(sj27)))))))))), ((x273)*(((((x255)*(((((cj25)*(px)*(sj27)))+(((-0.100000000000000)*(sj27)))+(((py)*(sj25)*(sj27)))))))+(((x249)*(((((0.800000000000000)*(pz)))+(((-0.800000000000000)*(j12)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj27;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[2];
dummyeval[0]=sj27;
dummyeval[1]=sj26;
if( IKabs(dummyeval[0]) < 0.000010  || IKabs(dummyeval[1]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x274=((px)*(sj25));
IKReal x275=((cj25)*(py));
IKReal x276=((x274)+(((-1.00000000000000)*(x275))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=x276;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)*(sj26)))+(((0.200000000000000)*(cj25)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((-0.0800000000000000)*(cj26)))+(((0.800000000000000)*(j12)*(sj26)))+(((0.800000000000000)*(cj26)*(py)*(sj25)))+(((0.800000000000000)*(cj25)*(cj26)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=x276;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj26;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj26;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj26;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x277=x274;
IKReal x278=x275;
IKReal x279=((x277)+(((-1.00000000000000)*(x278))));
evalcond[0]=((IKfmod(((-1.57079632679490)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x279;
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.800000000000000)*(j12)))+(((0.200000000000000)*(cj25)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=x279;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj25)*(px)))+(((-3.11526479750779)*(py)*(sj25)))), ((-1.24610591900312)+(((3.11526479750779)*(j12)))+(((-3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x280=x274;
IKReal x281=x275;
IKReal x282=((x280)+(((-1.00000000000000)*(x281))));
evalcond[0]=((IKfmod(((1.57079632679490)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x282;
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25)))+(((-1.00000000000000)*((j12)*(j12))))+(((-0.800000000000000)*(j12))));
evalcond[3]=x282;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj25)*(px)))+(((3.11526479750779)*(py)*(sj25)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))+(((-3.11526479750779)*(j12)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x283=x274;
IKReal x284=x275;
IKReal x285=((x283)+(((-1.00000000000000)*(x284))));
evalcond[0]=((IKfmod(((j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x285;
evalcond[2]=((-0.146959000000000)+(((2.00000000000000)*(j12)*(pz)))+(((cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((py)*(sj25)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=x285;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((3.11526479750779)*(j12)))+(((-3.11526479750779)*(pz)))), ((-1.55763239875389)+(((3.11526479750779)*(cj25)*(px)))+(((3.11526479750779)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x286=x274;
IKReal x287=x275;
IKReal x288=((x286)+(((-1.00000000000000)*(x287))));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x288;
evalcond[2]=((0.0130410000000000)+(((2.00000000000000)*(j12)*(pz)))+(((-0.600000000000000)*(py)*(sj25)))+(((-0.600000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=x288;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((3.11526479750779)*(pz)))+(((-3.11526479750779)*(j12)))), ((-0.934579439252336)+(((-3.11526479750779)*(cj25)*(px)))+(((-3.11526479750779)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj26) != 0)?((IKReal)1/(cj26)):(IKReal)1.0e30))*(((((1000.00000000000)*(j12)))+(((-400.000000000000)*(sj26)))+(((1000.00000000000)*(sj26)*(((0.400000000000000)+(((-1.00000000000000)*(cj25)*(cj26)*(px)))+(((0.100000000000000)*(cj26)))+(((-1.00000000000000)*(j12)*(sj26)))+(((-1.00000000000000)*(cj26)*(py)*(sj25)))+(((pz)*(sj26)))))))+(((-1000.00000000000)*(pz)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj25)*(cj26)*(px)))+(((3.11526479750779)*(j12)*(sj26)))+(((-3.11526479750779)*(pz)*(sj26)))+(((-0.311526479750779)*(cj26)))+(((3.11526479750779)*(cj26)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
IKReal x289=x157;
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj26) != 0)?((IKReal)1/(cj26)):(IKReal)1.0e30))*(((((1000.00000000000)*(j12)))+(((-400.000000000000)*(sj26)))+(((1250.00000000000)*(sj26)*(((0.253041000000000)+(((2.00000000000000)*(j12)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(x289)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25)))))))+(((-1000.00000000000)*(pz)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((-0.778816199376947)*(cj25)*(px)))+(((3.89408099688474)*(x289)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((0.311526479750779)*(sj26)))+(((-3.11526479750779)*(cj25)*(px)*(sj26)))+(((-3.11526479750779)*(cj26)*(pz)))+(((-3.11526479750779)*(py)*(sj25)*(sj26)))+(((3.11526479750779)*(cj26)*(j12)))), ((0.00311526479750779)*(((IKabs(sj26) != 0)?((IKReal)1/(sj26)):(IKReal)1.0e30))*(((((1000.00000000000)*(j12)))+(((1000.00000000000)*(cj26)*(((((cj26)*(pz)))+(((cj25)*(px)*(sj26)))+(((-1.00000000000000)*(cj26)*(j12)))+(((-0.100000000000000)*(sj26)))+(((py)*(sj25)*(sj26)))))))+(((-400.000000000000)*(sj26)))+(((-1000.00000000000)*(pz)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x290=((cj25)*(py));
IKReal x291=((px)*(sj25));
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(j27)+(3.14159265358979)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x290)))+(x291));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)*(sj26)))+(((0.200000000000000)*(cj25)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((-0.0800000000000000)*(cj26)))+(((0.800000000000000)*(j12)*(sj26)))+(((0.800000000000000)*(cj26)*(py)*(sj25)))+(((0.800000000000000)*(cj25)*(cj26)*(px)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=((((-1.00000000000000)*(x291)))+(x290));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj26;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj26;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj26;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[4];
IKReal x292=x290;
IKReal x293=x291;
evalcond[0]=((IKfmod(((-1.57079632679490)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((-1.00000000000000)*(x292)))+(x293));
evalcond[2]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.800000000000000)*(j12)))+(((0.200000000000000)*(cj25)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=((((-1.00000000000000)*(x293)))+(x292));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj25)*(px)))+(((3.11526479750779)*(py)*(sj25)))), ((-1.24610591900312)+(((3.11526479750779)*(j12)))+(((-3.11526479750779)*(pz)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x294=x290;
IKReal x295=x291;
evalcond[0]=((IKfmod(((1.57079632679490)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((-1.00000000000000)*(x294)))+(x295));
evalcond[2]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((2.00000000000000)*(j12)*(pz)))+(((-1.00000000000000)*(pp)))+(((0.200000000000000)*(py)*(sj25)))+(((-1.00000000000000)*((j12)*(j12))))+(((-0.800000000000000)*(j12))));
evalcond[3]=((((-1.00000000000000)*(x295)))+(x294));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(cj25)*(px)))+(((-3.11526479750779)*(py)*(sj25)))), ((-1.24610591900312)+(((3.11526479750779)*(pz)))+(((-3.11526479750779)*(j12)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x296=x290;
IKReal x297=x291;
evalcond[0]=((IKfmod(((j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((-1.00000000000000)*(x296)))+(x297));
evalcond[2]=((-0.146959000000000)+(((2.00000000000000)*(j12)*(pz)))+(((cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((py)*(sj25)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=((((-1.00000000000000)*(x297)))+(x296));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((3.11526479750779)*(pz)))+(((-3.11526479750779)*(j12)))), ((-1.55763239875389)+(((3.11526479750779)*(cj25)*(px)))+(((3.11526479750779)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
IKReal x298=x290;
IKReal x299=x291;
evalcond[0]=((IKfmod(((-3.14159265358979)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((-1.00000000000000)*(x298)))+(x299));
evalcond[2]=((0.0130410000000000)+(((2.00000000000000)*(j12)*(pz)))+(((-0.600000000000000)*(py)*(sj25)))+(((-0.600000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[3]=((((-1.00000000000000)*(x299)))+(x298));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((3.11526479750779)*(j12)))+(((-3.11526479750779)*(pz)))), ((-0.934579439252336)+(((-3.11526479750779)*(cj25)*(px)))+(((-3.11526479750779)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj26) != 0)?((IKReal)1/(cj26)):(IKReal)1.0e30))*(((((-1000.00000000000)*(j12)))+(((-1000.00000000000)*(sj26)*(((0.400000000000000)+(((-1.00000000000000)*(cj25)*(cj26)*(px)))+(((0.100000000000000)*(cj26)))+(((-1.00000000000000)*(j12)*(sj26)))+(((-1.00000000000000)*(cj26)*(py)*(sj25)))+(((pz)*(sj26)))))))+(((1000.00000000000)*(pz)))+(((400.000000000000)*(sj26)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj25)*(cj26)*(px)))+(((3.11526479750779)*(j12)*(sj26)))+(((-3.11526479750779)*(pz)*(sj26)))+(((-0.311526479750779)*(cj26)))+(((3.11526479750779)*(cj26)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
IKReal x300=x157;
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(cj26) != 0)?((IKReal)1/(cj26)):(IKReal)1.0e30))*(((((-1250.00000000000)*(sj26)*(((0.253041000000000)+(((2.00000000000000)*(j12)*(pz)))+(((0.200000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*(x300)))+(((0.200000000000000)*(py)*(sj25)))))))+(((-1000.00000000000)*(j12)))+(((1000.00000000000)*(pz)))+(((400.000000000000)*(sj26)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((3.89408099688474)*(x300)))+(((-7.78816199376947)*(j12)*(pz)))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((-0.311526479750779)*(sj26)))+(((-3.11526479750779)*(cj26)*(j12)))+(((3.11526479750779)*(py)*(sj25)*(sj26)))+(((3.11526479750779)*(cj26)*(pz)))+(((3.11526479750779)*(cj25)*(px)*(sj26)))), ((0.00311526479750779)*(((IKabs(sj26) != 0)?((IKReal)1/(sj26)):(IKReal)1.0e30))*(((((1000.00000000000)*(j12)))+(((-400.000000000000)*(sj26)))+(((-1000.00000000000)*(cj26)*(((((-1.00000000000000)*(cj26)*(pz)))+(((-1.00000000000000)*(py)*(sj25)*(sj26)))+(((-1.00000000000000)*(cj25)*(px)*(sj26)))+(((0.100000000000000)*(sj26)))+(((cj26)*(j12)))))))+(((-1000.00000000000)*(pz)))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-0.146959000000000)+(((2.00000000000000)*(j12)*(pz)))+(((cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((py)*(sj25)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[2]=((((-1.00000000000000)*(cj25)*(cj27)*(py)))+(((j12)*(sj27)))+(((-1.00000000000000)*(pz)*(sj27)))+(((cj27)*(px)*(sj25))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((3.11526479750779)*(cj25)*(py)*(sj27)))+(((3.11526479750779)*(cj27)*(j12)))+(((-3.11526479750779)*(px)*(sj25)*(sj27)))+(((-3.11526479750779)*(cj27)*(pz)))), ((-1.55763239875389)+(((3.11526479750779)*(cj25)*(px)))+(((3.11526479750779)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j26)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((0.0130410000000000)+(((2.00000000000000)*(j12)*(pz)))+(((-0.600000000000000)*(py)*(sj25)))+(((-0.600000000000000)*(cj25)*(px)))+(((-1.00000000000000)*(pp)))+(((-1.00000000000000)*((j12)*(j12)))));
evalcond[2]=((((-1.00000000000000)*(cj25)*(cj27)*(py)))+(((cj27)*(px)*(sj25)))+(((-1.00000000000000)*(j12)*(sj27)))+(((pz)*(sj27))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((((3.11526479750779)*(cj25)*(py)*(sj27)))+(((-3.11526479750779)*(cj27)*(j12)))+(((-3.11526479750779)*(px)*(sj25)*(sj27)))+(((3.11526479750779)*(cj27)*(pz)))), ((-0.934579439252336)+(((-3.11526479750779)*(cj25)*(px)))+(((-3.11526479750779)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
IKReal x301=((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30);
j28array[0]=IKatan2(((0.00311526479750779)*(x301)*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((0.00311526479750779)*(x301)*(((IKabs(sj26) != 0)?((IKReal)1/(sj26)):(IKReal)1.0e30))*(((((1000.00000000000)*(cj26)*(cj27)*(((((-1.00000000000000)*(cj25)*(py)))+(((px)*(sj25)))))))+(((-1000.00000000000)*(sj27)*(((((0.400000000000000)*(sj26)))+(((-1.00000000000000)*(j12)))+(pz)))))))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj25)*(cj26)*(px)))+(((3.11526479750779)*(j12)*(sj26)))+(((-3.11526479750779)*(pz)*(sj26)))+(((-0.311526479750779)*(cj26)))+(((3.11526479750779)*(cj26)*(py)*(sj25)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12))))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j28array[1], cj28array[1], sj28array[1];
bool j28valid[1]={false};
j28array[0]=IKatan2(((0.00311526479750779)*(((IKabs(sj27) != 0)?((IKReal)1/(sj27)):(IKReal)1.0e30))*(((((-1000.00000000000)*(px)*(sj25)))+(((1000.00000000000)*(cj25)*(py)))))), ((-0.985362149532710)+(((-0.778816199376947)*(py)*(sj25)))+(((3.89408099688474)*(pp)))+(((-7.78816199376947)*(j12)*(pz)))+(((3.89408099688474)*((j12)*(j12))))+(((-0.778816199376947)*(cj25)*(px)))));
sj28array[0]=IKsin(j28array[0]);
cj28array[0]=IKcos(j28array[0]);
if( j28array[0] > IKPI )
    j28array[0]-=IK2PI;
else if( j28array[0] < -IKPI )
    j28array[0]+=IK2PI;
j28valid[0] = true;
for(int ij28 = 0; ij28 < 1; ++ij28)
{
if( !j28valid[ij28] ) { continue; }
j28 = j28array[ij28]; cj28 = cj28array[ij28]; sj28 = sj28array[ij28];

{
IKReal dummyeval[1];
dummyeval[0]=((160000.000000000)+(((103041.000000000)*((cj27)*(cj27))*((sj28)*(sj28))))+(((256800.000000000)*(cj28)))+(((103041.000000000)*((cj28)*(cj28)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((40.0000000000000)+(((-400.000000000000)*(py)*(sj25)))+(((-321.000000000000)*(cj28)*(py)*(sj25)))+(((-321.000000000000)*(cj27)*(pz)*(sj28)))+(((321.000000000000)*(cj27)*(j12)*(sj28)))+(((-321.000000000000)*(cj25)*(cj28)*(px)))+(((-400.000000000000)*(cj25)*(px)))+(((32.1000000000000)*(cj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((321.000000000000)*(cj27)*(py)*(sj25)*(sj28)))+(((400.000000000000)*(j12)))+(((-321.000000000000)*(cj28)*(pz)))+(((-400.000000000000)*(pz)))+(((321.000000000000)*(cj28)*(j12)))+(((321.000000000000)*(cj25)*(cj27)*(px)*(sj28)))+(((-32.1000000000000)*(cj27)*(sj28))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x302=((cj25)*(px));
IKReal x303=((py)*(sj25));
IKReal x304=((x302)+(x303));
IKReal x305=((0.100000000000000)+(((-1.00000000000000)*(x304))));
IKReal x306=((0.321000000000000)*(cj28));
IKReal x307=((0.400000000000000)+(x306));
IKReal x308=((321.000000000000)*(cj27)*(sj28)*(x303));
IKReal x309=((400.000000000000)*(j12));
IKReal x310=((321.000000000000)*(cj28)*(j12));
IKReal x311=((321.000000000000)*(cj27)*(sj28)*(x302));
IKReal x312=((x308)+(x309)+(x311)+(x310));
IKReal x313=((400.000000000000)*(pz));
IKReal x314=((321.000000000000)*(cj28)*(pz));
IKReal x315=((32.1000000000000)*(cj27)*(sj28));
IKReal x316=((x315)+(x314)+(x313));
IKReal x317=((x312)+(((-1.00000000000000)*(x316))));
IKReal x318=((IKabs(x317) != 0)?((IKReal)1/(x317)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x318)*(((((-1000.00000000000)*((x305)*(x305))))+(((1000.00000000000)*((x307)*(x307))))))), ((x318)*(((((321.000000000000)*(cj27)*(sj28)*(x307)))+(((x305)*(((((-1000.00000000000)*(j12)))+(((1000.00000000000)*(pz)))))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x319=((0.321000000000000)*(cj28));
IKReal x320=((0.400000000000000)+(x319));
IKReal x321=((((-1.00000000000000)*(j12)))+(pz));
IKReal x322=((321.000000000000)*(cj27)*(j12)*(sj28));
IKReal x323=((32.1000000000000)*(cj28));
IKReal x324=((40.0000000000000)+(x322)+(x323));
IKReal x325=((321.000000000000)*(cj27)*(pz)*(sj28));
IKReal x326=((400.000000000000)*(cj25)*(px));
IKReal x327=((400.000000000000)*(py)*(sj25));
IKReal x328=((321.000000000000)*(cj28)*(py)*(sj25));
IKReal x329=((321.000000000000)*(cj25)*(cj28)*(px));
IKReal x330=((x325)+(x326)+(x327)+(x328)+(x329));
IKReal x331=((x324)+(((-1.00000000000000)*(x330))));
IKReal x332=((IKabs(x331) != 0)?((IKReal)1/(x331)):(IKReal)1.0e30);
j26array[0]=IKatan2(((x332)*(((((321.000000000000)*(cj27)*(sj28)*(x320)))+(((-1.00000000000000)*(x321)*(((100.000000000000)+(((-1000.00000000000)*(cj25)*(px)))+(((-1000.00000000000)*(py)*(sj25)))))))))), ((x332)*(((((-1000.00000000000)*((x320)*(x320))))+(((1000.00000000000)*((x321)*(x321))))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
IKReal x333=(cj27)*(cj27);
IKReal x334=(sj28)*(sj28);
IKReal x335=((103041.000000000)*(x333)*(x334));
IKReal x336=((256800.000000000)*(cj28));
IKReal x337=(cj28)*(cj28);
IKReal x338=((103041.000000000)*(x337));
IKReal x339=((160000.000000000)+(x338)+(x336)+(x335));
IKReal x340=((IKabs(x339) != 0)?((IKReal)1/(x339)):(IKReal)1.0e30);
IKReal x341=((321000.000000000)*(cj28));
IKReal x342=((400000.000000000)+(x341));
IKReal x343=((cj25)*(px));
IKReal x344=((py)*(sj25));
IKReal x345=((x343)+(x344));
IKReal x346=((0.100000000000000)+(((-1.00000000000000)*(x345))));
IKReal x347=((((-1.00000000000000)*(j12)))+(pz));
j26array[0]=IKatan2(((-1.00000000000000)*(x340)*(((((-321000.000000000)*(cj27)*(sj28)*(x346)))+(((x342)*(x347)))))), ((-1.00000000000000)*(x340)*(((((321000.000000000)*(cj27)*(sj28)*(x347)))+(((x342)*(x346)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
    j26array[0]-=IK2PI;
else if( j26array[0] < -IKPI )
    j26array[0]+=IK2PI;
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] ) { continue; }
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

}

}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x24=((cj26)*(sj28));
IKReal x25=((cj27)*(cj28)*(sj26));
IKReal x26=((x24)+(x25));
IKReal x27=((-1.00000000000000)*(x26));
IKReal x28=((sj26)*(sj28));
IKReal x29=((cj26)*(cj27)*(cj28));
IKReal x30=((((-1.00000000000000)*(x29)))+(x28));
IKReal x31=((cj25)*(cj28)*(sj27));
IKReal x32=((sj25)*(x27));
IKReal x33=((x32)+(x31));
IKReal x34=((cj25)*(x27));
IKReal x35=((cj28)*(sj25)*(sj27));
IKReal x36=((((-1.00000000000000)*(x35)))+(x34));
IKReal x37=((cj25)*(sj26)*(sj27));
IKReal x38=((cj27)*(sj25));
IKReal x39=((((-1.00000000000000)*(x38)))+(x37));
IKReal x40=((sj25)*(sj26)*(sj27));
IKReal x41=((cj25)*(cj27));
IKReal x42=((x40)+(x41));
IKReal x43=((cj26)*(cj28));
IKReal x44=((cj27)*(x28));
IKReal x45=((((-1.00000000000000)*(x44)))+(x43));
IKReal x46=((cj28)*(sj26));
IKReal x47=((cj27)*(x24));
IKReal x48=((x46)+(x47));
IKReal x49=((-1.00000000000000)*(x48));
IKReal x50=((cj25)*(x45));
IKReal x51=((sj25)*(sj27)*(sj28));
IKReal x52=((x50)+(((-1.00000000000000)*(x51))));
IKReal x53=((sj25)*(x45));
IKReal x54=((cj25)*(sj27)*(sj28));
IKReal x55=((x54)+(x53));
new_r00=((((r20)*(x30)))+(((r00)*(x36)))+(((r10)*(x33))));
new_r01=((((r01)*(x36)))+(((r11)*(x33)))+(((r21)*(x30))));
new_r02=((((r22)*(x30)))+(((r02)*(x36)))+(((r12)*(x33))));
new_r10=((((r00)*(x39)))+(((cj26)*(r20)*(sj27)))+(((r10)*(x42))));
new_r11=((((cj26)*(r21)*(sj27)))+(((r01)*(x39)))+(((r11)*(x42))));
new_r12=((((cj26)*(r22)*(sj27)))+(((r02)*(x39)))+(((r12)*(x42))));
new_r20=((((r20)*(x49)))+(((r10)*(x55)))+(((r00)*(x52))));
new_r21=((((r11)*(x55)))+(((r01)*(x52)))+(((r21)*(x49))));
new_r22=((((r02)*(((x50)+(((-1.00000000000000)*(x51)))))))+(((r22)*(x49)))+(((r12)*(x55))));
{
IKReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
cj30array[0]=new_r22;
if( cj30array[0] >= -1.0001 && cj30array[0] <= 1.0001 )
{
    j30valid[0] = j30valid[1] = true;
    j30array[0] = IKacos(cj30array[0]);
    sj30array[0] = IKsin(j30array[0]);
    cj30array[1] = cj30array[0];
    j30array[1] = -j30array[0];
    sj30array[1] = -sj30array[0];
}
else if( isnan(cj30array[0]) )
{
    // probably any value will work
    j30valid[0] = true;
    cj30array[0] = 1; sj30array[0] = 0; j30array[0] = 0;
}
if( j30valid[0] && j30valid[1] && IKabs(cj30array[0]-cj30array[1]) < 0.0001 && IKabs(sj30array[0]-sj30array[1]) < 0.0001 )
    j30valid[1]=false;
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] ) { continue; }
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];

{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r10)*(new_r12)*(sj30)))+(((-1.00000000000000)*(new_r00)*(new_r02)*(sj30))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[7];
IKReal x56=((-1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x56;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x56;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j29array[2], cj29array[2], sj29array[2];
bool j29valid[2]={false};
IKReal x57=IKatan2(new_r02, new_r12);
j29array[0]=((-1.00000000000000)*(x57));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
j29array[1]=((3.14159265358979)+(((-1.00000000000000)*(x57))));
sj29array[1]=IKsin(j29array[1]);
cj29array[1]=IKcos(j29array[1]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
if( j29array[1] > IKPI )
    j29array[1]-=IK2PI;
else if( j29array[1] < -IKPI )
    j29array[1]+=IK2PI;
j29valid[1] = true;
if( j29valid[0] && j29valid[1] && IKabs(cj29array[0]-cj29array[1]) < 0.0001 && IKabs(sj29array[0]-sj29array[1]) < 0.0001 )
    j29valid[1]=false;
for(int ij29 = 0; ij29 < 2; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((-1.00000000000000)*(cj29)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj29)))), ((((new_r10)*(sj29)))+(((cj29)*(new_r00)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j29array[2], cj29array[2], sj29array[2];
bool j29valid[2]={false};
IKReal x58=IKatan2(new_r02, new_r12);
j29array[0]=((-1.00000000000000)*(x58));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
j29array[1]=((3.14159265358979)+(((-1.00000000000000)*(x58))));
sj29array[1]=IKsin(j29array[1]);
cj29array[1]=IKcos(j29array[1]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
if( j29array[1] > IKPI )
    j29array[1]-=IK2PI;
else if( j29array[1] < -IKPI )
    j29array[1]+=IK2PI;
j29valid[1] = true;
if( j29valid[0] && j29valid[1] && IKabs(cj29array[0]-cj29array[1]) < 0.0001 && IKabs(sj29array[0]-sj29array[1]) < 0.0001 )
    j29valid[1]=false;
for(int ij29 = 0; ij29 < 2; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r01)))+(((new_r11)*(sj29)))), ((((-1.00000000000000)*(cj29)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x59=((new_r00)*(new_r02)*(sj30));
IKReal x60=((new_r10)*(new_r12)*(sj30));
IKReal x61=((x59)+(x60));
IKReal x62=((-1.00000000000000)*(x61));
IKReal x63=((IKabs(x62) != 0)?((IKReal)1/(x62)):(IKReal)1.0e30);
j29array[0]=IKatan2(((cj30)*(new_r12)*(new_r20)*(x63)), ((cj30)*(new_r02)*(new_r20)*(x63)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x64=((cj29)*(new_r12));
IKReal x65=((new_r02)*(sj29));
IKReal x66=((x64)+(((-1.00000000000000)*(x65))));
IKReal x67=((-1.00000000000000)+(new_r22));
IKReal x68=((new_r12)*(sj29));
IKReal x69=((cj29)*(new_r02));
IKReal x70=((x68)+(x69));
evalcond[0]=((IKfmod(((j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x67;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x66;
evalcond[5]=x66;
evalcond[6]=x70;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x67;
evalcond[10]=x70;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((-1.00000000000000)*(cj29)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj29)))), ((((new_r10)*(sj29)))+(((cj29)*(new_r00)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

} else
{
IKReal x71=((cj29)*(new_r12));
IKReal x72=((new_r02)*(sj29));
IKReal x73=((((-1.00000000000000)*(x72)))+(x71));
IKReal x74=((new_r12)*(sj29));
IKReal x75=((cj29)*(new_r02));
IKReal x76=((x75)+(x74));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x73;
evalcond[5]=x73;
evalcond[6]=x76;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x76));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r01)))+(((new_r11)*(sj29)))), ((((-1.00000000000000)*(cj29)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
IKReal x77=((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30);
j31array[0]=IKatan2(((new_r21)*(x77)), ((-1.00000000000000)*(new_r20)*(x77)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj29)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((new_r21)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))), ((((cj29)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x78=(new_r12)*(new_r12);
IKReal x79=(new_r02)*(new_r02);
IKReal x80=((x79)+(x78));
IKReal x81=((IKabs(x80) != 0)?((IKReal)1/(x80)):(IKReal)1.0e30);
j29array[0]=IKatan2(((new_r12)*(sj30)*(x81)), ((new_r02)*(sj30)*(x81)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj30;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x82=((cj29)*(new_r12));
IKReal x83=((new_r02)*(sj29));
IKReal x84=((x82)+(((-1.00000000000000)*(x83))));
IKReal x85=((-1.00000000000000)+(new_r22));
IKReal x86=((new_r12)*(sj29));
IKReal x87=((cj29)*(new_r02));
IKReal x88=((x86)+(x87));
evalcond[0]=((IKfmod(((j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x85;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x84;
evalcond[5]=x84;
evalcond[6]=x88;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x85;
evalcond[10]=x88;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((-1.00000000000000)*(cj29)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj29)))), ((((new_r10)*(sj29)))+(((cj29)*(new_r00)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

} else
{
IKReal x89=((cj29)*(new_r12));
IKReal x90=((new_r02)*(sj29));
IKReal x91=((x89)+(((-1.00000000000000)*(x90))));
IKReal x92=((new_r12)*(sj29));
IKReal x93=((cj29)*(new_r02));
IKReal x94=((x93)+(x92));
evalcond[0]=((IKfmod(((-3.14159265358979)+(j30)+(3.14159265358979)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x91;
evalcond[5]=x91;
evalcond[6]=x94;
evalcond[7]=((-1.00000000000000)*(new_r20));
evalcond[8]=((-1.00000000000000)*(new_r21));
evalcond[9]=((-1.00000000000000)+(((-1.00000000000000)*(new_r22))));
evalcond[10]=((-1.00000000000000)*(x94));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r01)))+(((new_r11)*(sj29)))), ((((-1.00000000000000)*(cj29)*(new_r00)))+(((-1.00000000000000)*(new_r10)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
IKReal x95=((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30);
j31array[0]=IKatan2(((new_r21)*(x95)), ((-1.00000000000000)*(new_r20)*(x95)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((((cj29)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj29)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
j31array[0]=IKatan2(((new_r21)*(((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30))), ((((cj29)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj29)))));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j31array[1], cj31array[1], sj31array[1];
bool j31valid[1]={false};
IKReal x96=((IKabs(sj30) != 0)?((IKReal)1/(sj30)):(IKReal)1.0e30);
j31array[0]=IKatan2(((new_r21)*(x96)), ((-1.00000000000000)*(new_r20)*(x96)));
sj31array[0]=IKsin(j31array[0]);
cj31array[0]=IKcos(j31array[0]);
if( j31array[0] > IKPI )
    j31array[0]-=IK2PI;
else if( j31array[0] < -IKPI )
    j31array[0]+=IK2PI;
j31valid[0] = true;
for(int ij31 = 0; ij31 < 1; ++ij31)
{
if( !j31valid[ij31] ) { continue; }
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
IKReal dummyeval[1];
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r02)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x97=((new_r02)*(new_r11));
IKReal x98=((new_r01)*(new_r12));
IKReal x99=((x97)+(((-1.00000000000000)*(x98))));
IKReal x100=((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30);
j29array[0]=IKatan2(((cj31)*(new_r12)*(x100)), ((cj31)*(new_r02)*(x100)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x101=((new_r02)*(new_r10));
IKReal x102=((new_r00)*(new_r12));
IKReal x103=((((-1.00000000000000)*(x102)))+(x101));
IKReal x104=((IKabs(x103) != 0)?((IKReal)1/(x103)):(IKReal)1.0e30);
j29array[0]=IKatan2(((new_r12)*(sj31)*(x104)), ((new_r02)*(sj31)*(x104)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j29array[1], cj29array[1], sj29array[1];
bool j29valid[1]={false};
IKReal x105=(new_r12)*(new_r12);
IKReal x106=(new_r02)*(new_r02);
IKReal x107=((x105)+(x106));
IKReal x108=((IKabs(x107) != 0)?((IKReal)1/(x107)):(IKReal)1.0e30);
j29array[0]=IKatan2(((new_r12)*(sj30)*(x108)), ((new_r02)*(sj30)*(x108)));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
if( j29array[0] > IKPI )
    j29array[0]-=IK2PI;
else if( j29array[0] < -IKPI )
    j29array[0]+=IK2PI;
j29valid[0] = true;
for(int ij29 = 0; ij29 < 1; ++ij29)
{
if( !j29valid[ij29] ) { continue; }
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j12;
solution.basesol[1].foffset = j25;
solution.basesol[2].foffset = j26;
solution.basesol[3].foffset = j27;
solution.basesol[4].foffset = j28;
solution.basesol[5].foffset = j29;
solution.basesol[6].foffset = j30;
solution.basesol[7].foffset = j31;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}
}
}/// Durand-Kerner polynomial root finding method
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[4];
    const int maxsteps = 50;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 4; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "c363859a2d7a151a22dc1e251d6d8669"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
