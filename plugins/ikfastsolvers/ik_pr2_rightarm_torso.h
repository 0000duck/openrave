/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-18 16:51:19.181447
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 2; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0, 3}; return freeparams; }
IKFAST_API int getNumJoints() { return 8; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKcos(j[3]);
x1=IKsin(j[1]);
x2=IKsin(j[6]);
x3=IKcos(j[1]);
x4=IKcos(j[4]);
x5=IKcos(j[6]);
x6=IKcos(j[5]);
x7=IKsin(j[2]);
x8=IKsin(j[5]);
x9=IKsin(j[3]);
x10=IKsin(j[4]);
x11=IKcos(j[2]);
x12=IKcos(j[7]);
x13=IKsin(j[7]);
eerot[0]=((((-0.999135601564979)*(x0)*(x1)*(x2)*(x8)))+(((-0.0415698169996759)*(x10)*(x3)*(x5)*(x7)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x2)*(x3)*(x6)))+(((-0.0415698169996759)*(x2)*(x3)*(x4)*(x6)*(x7)*(x9)))+(((0.0415698169996759)*(x0)*(x1)*(x2)*(x4)*(x6)))+(((0.0415698169996759)*(x0)*(x1)*(x10)*(x5)))+(((-0.0415698169996759)*(x1)*(x2)*(x8)*(x9)))+(((-0.999135601564979)*(x0)*(x2)*(x3)*(x4)*(x6)*(x7)))+(((0.999135601564979)*(x2)*(x3)*(x7)*(x8)*(x9)))+(((-0.999135601564979)*(x0)*(x10)*(x3)*(x5)*(x7)))+(((-0.999135601564979)*(x1)*(x2)*(x4)*(x6)*(x9)))+(((-0.0415698169996759)*(x0)*(x2)*(x3)*(x7)*(x8)))+(((-0.999135601564979)*(x1)*(x10)*(x5)*(x9)))+(((x11)*(x3)*(x4)*(x5))));
eerot[1]=((((-0.999135601564979)*(x13)*(x3)*(x5)*(x7)*(x8)*(x9)))+(((0.999135601564979)*(x0)*(x1)*(x13)*(x5)*(x8)))+(((x10)*(x11)*(x12)*(x3)*(x8)))+(((-0.0415698169996759)*(x0)*(x1)*(x13)*(x4)*(x5)*(x6)))+(((0.999135601564979)*(x0)*(x13)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((0.999135601564979)*(x1)*(x12)*(x4)*(x8)*(x9)))+(((0.0415698169996759)*(x13)*(x3)*(x4)*(x5)*(x6)*(x7)*(x9)))+(((0.999135601564979)*(x12)*(x3)*(x6)*(x7)*(x9)))+(((-0.0415698169996759)*(x10)*(x13)*(x2)*(x3)*(x7)*(x9)))+(((0.999135601564979)*(x0)*(x12)*(x3)*(x4)*(x7)*(x8)))+(((-0.999135601564979)*(x0)*(x1)*(x12)*(x6)))+(((x11)*(x13)*(x2)*(x3)*(x4)))+(((-0.0415698169996759)*(x1)*(x12)*(x6)*(x9)))+(((-0.999135601564979)*(x1)*(x10)*(x13)*(x2)*(x9)))+(((x10)*(x11)*(x13)*(x3)*(x5)*(x6)))+(((-0.0415698169996759)*(x0)*(x12)*(x3)*(x6)*(x7)))+(((0.999135601564979)*(x1)*(x13)*(x4)*(x5)*(x6)*(x9)))+(((-0.0415698169996759)*(x0)*(x1)*(x12)*(x4)*(x8)))+(((0.0415698169996759)*(x0)*(x13)*(x3)*(x5)*(x7)*(x8)))+(((0.0415698169996759)*(x12)*(x3)*(x4)*(x7)*(x8)*(x9)))+(((0.0415698169996759)*(x0)*(x1)*(x10)*(x13)*(x2)))+(((0.0415698169996759)*(x1)*(x13)*(x5)*(x8)*(x9)))+(((-0.999135601564979)*(x0)*(x10)*(x13)*(x2)*(x3)*(x7))));
eerot[2]=((((-1.00000000000000)*(x10)*(x11)*(x13)*(x3)*(x8)))+(((-0.0415698169996759)*(x10)*(x12)*(x2)*(x3)*(x7)*(x9)))+(((-0.999135601564979)*(x12)*(x3)*(x5)*(x7)*(x8)*(x9)))+(((-0.999135601564979)*(x1)*(x13)*(x4)*(x8)*(x9)))+(((0.0415698169996759)*(x1)*(x12)*(x5)*(x8)*(x9)))+(((-0.999135601564979)*(x1)*(x10)*(x12)*(x2)*(x9)))+(((0.0415698169996759)*(x0)*(x13)*(x3)*(x6)*(x7)))+(((0.0415698169996759)*(x0)*(x12)*(x3)*(x5)*(x7)*(x8)))+(((-0.0415698169996759)*(x0)*(x1)*(x12)*(x4)*(x5)*(x6)))+(((-0.0415698169996759)*(x13)*(x3)*(x4)*(x7)*(x8)*(x9)))+(((0.999135601564979)*(x1)*(x12)*(x4)*(x5)*(x6)*(x9)))+(((0.0415698169996759)*(x12)*(x3)*(x4)*(x5)*(x6)*(x7)*(x9)))+(((-0.999135601564979)*(x0)*(x13)*(x3)*(x4)*(x7)*(x8)))+(((-0.999135601564979)*(x13)*(x3)*(x6)*(x7)*(x9)))+(((0.0415698169996759)*(x0)*(x1)*(x13)*(x4)*(x8)))+(((x10)*(x11)*(x12)*(x3)*(x5)*(x6)))+(((-0.999135601564979)*(x0)*(x10)*(x12)*(x2)*(x3)*(x7)))+(((0.999135601564979)*(x0)*(x12)*(x3)*(x4)*(x5)*(x6)*(x7)))+(((x11)*(x12)*(x2)*(x3)*(x4)))+(((0.0415698169996759)*(x0)*(x1)*(x10)*(x12)*(x2)))+(((0.999135601564979)*(x0)*(x1)*(x12)*(x5)*(x8)))+(((0.0415698169996759)*(x1)*(x13)*(x6)*(x9)))+(((0.999135601564979)*(x0)*(x1)*(x13)*(x6))));
eetrans[0]=((-0.0500000000000000)+(((-0.00748256705994167)*(x2)*(x3)*(x4)*(x6)*(x7)*(x9)))+(((-0.179844408281696)*(x1)*(x2)*(x4)*(x6)*(x9)))+(((-0.00748256705994167)*(x1)*(x2)*(x8)*(x9)))+(((0.180000000000000)*(x11)*(x3)*(x4)*(x5)))+(((-0.179844408281696)*(x0)*(x2)*(x3)*(x4)*(x6)*(x7)))+(((-0.320722528102358)*(x0)*(x10)*(x3)*(x7)))+(((-0.180000000000000)*(x10)*(x11)*(x2)*(x3)*(x6)))+(((-0.179844408281696)*(x0)*(x1)*(x2)*(x8)))+(((-0.0133439112568960)*(x10)*(x3)*(x7)*(x9)))+(((0.00748256705994167)*(x0)*(x1)*(x2)*(x4)*(x6)))+(((-0.320722528102358)*(x1)*(x10)*(x9)))+(((-0.179844408281696)*(x0)*(x10)*(x3)*(x5)*(x7)))+(((0.100000000000000)*(x3)))+(((-0.00748256705994167)*(x0)*(x2)*(x3)*(x7)*(x8)))+(((0.0133439112568960)*(x0)*(x1)*(x10)))+(((0.179844408281696)*(x2)*(x3)*(x7)*(x8)*(x9)))+(((-0.179844408281696)*(x1)*(x10)*(x5)*(x9)))+(((0.00748256705994167)*(x0)*(x1)*(x10)*(x5)))+(((0.400000000000000)*(x11)*(x3)))+(((0.321000000000000)*(x11)*(x3)*(x4)))+(((-0.00748256705994167)*(x10)*(x3)*(x5)*(x7)*(x9))));
eerot[3]=((((-0.999135601564979)*(x0)*(x1)*(x10)*(x5)*(x7)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x2)*(x6)))+(((-0.0415698169996759)*(x0)*(x2)*(x3)*(x4)*(x6)))+(((-0.0415698169996759)*(x1)*(x2)*(x4)*(x6)*(x7)*(x9)))+(((0.0415698169996759)*(x2)*(x3)*(x8)*(x9)))+(((-0.0415698169996759)*(x0)*(x10)*(x3)*(x5)))+(((0.999135601564979)*(x2)*(x3)*(x4)*(x6)*(x9)))+(((0.999135601564979)*(x0)*(x2)*(x3)*(x8)))+(((-0.0415698169996759)*(x0)*(x1)*(x2)*(x7)*(x8)))+(((0.999135601564979)*(x10)*(x3)*(x5)*(x9)))+(((-0.0415698169996759)*(x1)*(x10)*(x5)*(x7)*(x9)))+(((x1)*(x11)*(x4)*(x5)))+(((0.999135601564979)*(x1)*(x2)*(x7)*(x8)*(x9)))+(((-0.999135601564979)*(x0)*(x1)*(x2)*(x4)*(x6)*(x7))));
eerot[4]=((((0.0415698169996759)*(x0)*(x13)*(x3)*(x4)*(x5)*(x6)))+(((0.999135601564979)*(x0)*(x12)*(x3)*(x6)))+(((0.0415698169996759)*(x1)*(x13)*(x4)*(x5)*(x6)*(x7)*(x9)))+(((0.999135601564979)*(x0)*(x1)*(x13)*(x4)*(x5)*(x6)*(x7)))+(((-0.999135601564979)*(x1)*(x13)*(x5)*(x7)*(x8)*(x9)))+(((-0.0415698169996759)*(x0)*(x10)*(x13)*(x2)*(x3)))+(((x1)*(x10)*(x11)*(x12)*(x8)))+(((0.0415698169996759)*(x1)*(x12)*(x4)*(x7)*(x8)*(x9)))+(((x1)*(x10)*(x11)*(x13)*(x5)*(x6)))+(((x1)*(x11)*(x13)*(x2)*(x4)))+(((-0.0415698169996759)*(x0)*(x1)*(x12)*(x6)*(x7)))+(((-0.999135601564979)*(x12)*(x3)*(x4)*(x8)*(x9)))+(((-0.0415698169996759)*(x1)*(x10)*(x13)*(x2)*(x7)*(x9)))+(((0.999135601564979)*(x10)*(x13)*(x2)*(x3)*(x9)))+(((-0.999135601564979)*(x13)*(x3)*(x4)*(x5)*(x6)*(x9)))+(((-0.999135601564979)*(x0)*(x13)*(x3)*(x5)*(x8)))+(((0.0415698169996759)*(x0)*(x12)*(x3)*(x4)*(x8)))+(((0.0415698169996759)*(x12)*(x3)*(x6)*(x9)))+(((-0.0415698169996759)*(x13)*(x3)*(x5)*(x8)*(x9)))+(((-0.999135601564979)*(x0)*(x1)*(x10)*(x13)*(x2)*(x7)))+(((0.999135601564979)*(x0)*(x1)*(x12)*(x4)*(x7)*(x8)))+(((0.999135601564979)*(x1)*(x12)*(x6)*(x7)*(x9)))+(((0.0415698169996759)*(x0)*(x1)*(x13)*(x5)*(x7)*(x8))));
eerot[5]=((((-0.999135601564979)*(x1)*(x12)*(x5)*(x7)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x13)*(x8)))+(((-0.0415698169996759)*(x1)*(x10)*(x12)*(x2)*(x7)*(x9)))+(((0.999135601564979)*(x13)*(x3)*(x4)*(x8)*(x9)))+(((0.0415698169996759)*(x1)*(x12)*(x4)*(x5)*(x6)*(x7)*(x9)))+(((-0.999135601564979)*(x1)*(x13)*(x6)*(x7)*(x9)))+(((x1)*(x10)*(x11)*(x12)*(x5)*(x6)))+(((-0.999135601564979)*(x0)*(x12)*(x3)*(x5)*(x8)))+(((-0.0415698169996759)*(x1)*(x13)*(x4)*(x7)*(x8)*(x9)))+(((-0.999135601564979)*(x0)*(x1)*(x10)*(x12)*(x2)*(x7)))+(((-0.0415698169996759)*(x12)*(x3)*(x5)*(x8)*(x9)))+(((0.999135601564979)*(x10)*(x12)*(x2)*(x3)*(x9)))+(((-0.0415698169996759)*(x13)*(x3)*(x6)*(x9)))+(((-0.999135601564979)*(x0)*(x13)*(x3)*(x6)))+(((0.999135601564979)*(x0)*(x1)*(x12)*(x4)*(x5)*(x6)*(x7)))+(((-0.999135601564979)*(x12)*(x3)*(x4)*(x5)*(x6)*(x9)))+(((-0.0415698169996759)*(x0)*(x10)*(x12)*(x2)*(x3)))+(((-0.999135601564979)*(x0)*(x1)*(x13)*(x4)*(x7)*(x8)))+(((x1)*(x11)*(x12)*(x2)*(x4)))+(((0.0415698169996759)*(x0)*(x12)*(x3)*(x4)*(x5)*(x6)))+(((0.0415698169996759)*(x0)*(x1)*(x12)*(x5)*(x7)*(x8)))+(((0.0415698169996759)*(x0)*(x1)*(x13)*(x6)*(x7)))+(((-0.0415698169996759)*(x0)*(x13)*(x3)*(x4)*(x8))));
eetrans[1]=((-0.188000000000000)+(((0.400000000000000)*(x1)*(x11)))+(((-0.00748256705994167)*(x1)*(x10)*(x5)*(x7)*(x9)))+(((-0.180000000000000)*(x1)*(x10)*(x11)*(x2)*(x6)))+(((0.180000000000000)*(x1)*(x11)*(x4)*(x5)))+(((-0.00748256705994167)*(x1)*(x2)*(x4)*(x6)*(x7)*(x9)))+(((-0.320722528102358)*(x0)*(x1)*(x10)*(x7)))+(((-0.179844408281696)*(x0)*(x1)*(x2)*(x4)*(x6)*(x7)))+(((-0.00748256705994167)*(x0)*(x1)*(x2)*(x7)*(x8)))+(((0.100000000000000)*(x1)))+(((0.179844408281696)*(x2)*(x3)*(x4)*(x6)*(x9)))+(((0.00748256705994167)*(x2)*(x3)*(x8)*(x9)))+(((-0.0133439112568960)*(x1)*(x10)*(x7)*(x9)))+(((0.179844408281696)*(x0)*(x2)*(x3)*(x8)))+(((-0.0133439112568960)*(x0)*(x10)*(x3)))+(((-0.179844408281696)*(x0)*(x1)*(x10)*(x5)*(x7)))+(((0.179844408281696)*(x1)*(x2)*(x7)*(x8)*(x9)))+(((0.321000000000000)*(x1)*(x11)*(x4)))+(((-0.00748256705994167)*(x0)*(x10)*(x3)*(x5)))+(((-0.00748256705994167)*(x0)*(x2)*(x3)*(x4)*(x6)))+(((0.179844408281696)*(x10)*(x3)*(x5)*(x9)))+(((0.320722528102358)*(x10)*(x3)*(x9))));
eerot[6]=((((-1.00000000000000)*(x4)*(x5)*(x7)))+(((-0.0415698169996759)*(x11)*(x2)*(x4)*(x6)*(x9)))+(((-0.0415698169996759)*(x10)*(x11)*(x5)*(x9)))+(((-0.999135601564979)*(x0)*(x10)*(x11)*(x5)))+(((-0.999135601564979)*(x0)*(x11)*(x2)*(x4)*(x6)))+(((-0.0415698169996759)*(x0)*(x11)*(x2)*(x8)))+(((0.999135601564979)*(x11)*(x2)*(x8)*(x9)))+(((x10)*(x2)*(x6)*(x7))));
eerot[7]=((((0.0415698169996759)*(x11)*(x12)*(x4)*(x8)*(x9)))+(((0.999135601564979)*(x11)*(x12)*(x6)*(x9)))+(((0.999135601564979)*(x0)*(x11)*(x12)*(x4)*(x8)))+(((-0.999135601564979)*(x11)*(x13)*(x5)*(x8)*(x9)))+(((0.0415698169996759)*(x11)*(x13)*(x4)*(x5)*(x6)*(x9)))+(((-0.0415698169996759)*(x10)*(x11)*(x13)*(x2)*(x9)))+(((0.999135601564979)*(x0)*(x11)*(x13)*(x4)*(x5)*(x6)))+(((-0.999135601564979)*(x0)*(x10)*(x11)*(x13)*(x2)))+(((-1.00000000000000)*(x10)*(x12)*(x7)*(x8)))+(((-1.00000000000000)*(x13)*(x2)*(x4)*(x7)))+(((-0.0415698169996759)*(x0)*(x11)*(x12)*(x6)))+(((-1.00000000000000)*(x10)*(x13)*(x5)*(x6)*(x7)))+(((0.0415698169996759)*(x0)*(x11)*(x13)*(x5)*(x8))));
eerot[8]=((((-1.00000000000000)*(x10)*(x12)*(x5)*(x6)*(x7)))+(((-0.999135601564979)*(x11)*(x13)*(x6)*(x9)))+(((-1.00000000000000)*(x12)*(x2)*(x4)*(x7)))+(((-0.999135601564979)*(x0)*(x11)*(x13)*(x4)*(x8)))+(((0.0415698169996759)*(x0)*(x11)*(x13)*(x6)))+(((0.0415698169996759)*(x0)*(x11)*(x12)*(x5)*(x8)))+(((0.999135601564979)*(x0)*(x11)*(x12)*(x4)*(x5)*(x6)))+(((-0.0415698169996759)*(x10)*(x11)*(x12)*(x2)*(x9)))+(((-0.999135601564979)*(x0)*(x10)*(x11)*(x12)*(x2)))+(((0.0415698169996759)*(x11)*(x12)*(x4)*(x5)*(x6)*(x9)))+(((x10)*(x13)*(x7)*(x8)))+(((-0.0415698169996759)*(x11)*(x13)*(x4)*(x8)*(x9)))+(((-0.999135601564979)*(x11)*(x12)*(x5)*(x8)*(x9))));
eetrans[2]=((0.739680000000000)+(((-0.321000000000000)*(x4)*(x7)))+(((-0.0133439112568960)*(x10)*(x11)*(x9)))+(((-0.00748256705994167)*(x11)*(x2)*(x4)*(x6)*(x9)))+(((-0.179844408281696)*(x0)*(x10)*(x11)*(x5)))+(((-0.320722528102358)*(x0)*(x10)*(x11)))+(((-0.180000000000000)*(x4)*(x5)*(x7)))+(((-0.00748256705994167)*(x10)*(x11)*(x5)*(x9)))+(((-0.00748256705994167)*(x0)*(x11)*(x2)*(x8)))+(((-0.179844408281696)*(x0)*(x11)*(x2)*(x4)*(x6)))+(((0.180000000000000)*(x10)*(x2)*(x6)*(x7)))+(((0.179844408281696)*(x11)*(x2)*(x8)*(x9)))+(j[0])+(((-0.400000000000000)*(x7))));
}

class IKSolver {
public:
IKReal j1, cj1, sj1,
j2, cj2, sj2,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j7, cj7, sj7,
j0, cj0, sj0,
j3, cj3, sj3,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
j3=pfree[1]; cj3=cos(pfree[1]); sj3=sin(pfree[1]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((0.0500000000000000)+(px)+(((-0.180000000000000)*(r00))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((0.188000000000000)+(py)+(((-0.180000000000000)*(r10))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.739680000000000)+(pz)+(((-0.180000000000000)*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
IKReal coniccoeffs[6], j1array[4];
int numsolutions;
IKReal x0=(py)*(py);
IKReal x1=(px)*(px);
IKReal x2=(sj3)*(sj3);
IKReal x3=(cj3)*(cj3);
IKReal x4=(j0)*(j0);
IKReal x5=(pz)*(pz);
IKReal x6=(px)*(px)*(px);
IKReal x7=(py)*(py)*(py);
IKReal x8=(j0)*(j0)*(j0);
IKReal x9=(pz)*(pz)*(pz);
IKReal x10=((0.0164865600000000)*(x1));
IKReal x11=(j0)*(j0)*(j0)*(j0);
IKReal x12=(py)*(py)*(py)*(py);
IKReal x13=(pz)*(pz)*(pz)*(pz);
IKReal x14=(px)*(px)*(px)*(px);
coniccoeffs[0]=((((1.78059967631915e-6)*(x0)*(x3)))+(((0.00102862940032368)*(x0)*(x2)))+(((-8.55938590617039e-5)*(cj3)*(sj3)*(x0)))+(((-0.0164865600000000)*(x0)))+(x10)+(((-0.00102862940032368)*(x1)*(x2)))+(((8.55938590617039e-5)*(cj3)*(sj3)*(x1)))+(((-1.78059967631915e-6)*(x1)*(x3))));
coniccoeffs[1]=((((-1.78059967631915e-6)*(px)*(py)*(x3)))+(((0.0164865600000000)*(px)*(py)))+(((8.55938590617039e-5)*(cj3)*(px)*(py)*(sj3)))+(((-0.00102862940032368)*(px)*(py)*(x2))));
coniccoeffs[2]=((((0.000855938590617039)*(cj3)*(j0)*(px)*(pz)*(sj3)))+(((-0.00130142706043652)*(px)*(x2)))+(((-2.25282361347737e-6)*(px)*(x3)))+(((0.00514314700161840)*(px)*(x0)*(x2)))+(((0.000108293778454163)*(cj3)*(px)*(sj3)))+(((0.00514314700161840)*(px)*(x1)*(x2)))+(((-0.0102862940032368)*(j0)*(px)*(pz)*(x2)))+(((8.90299838159575e-6)*(px)*(x3)*(x4)))+(((8.90299838159575e-6)*(px)*(x3)*(x5)))+(((8.90299838159575e-6)*(px)*(x1)*(x3)))+(((-0.000427969295308520)*(cj3)*(px)*(sj3)*(x4)))+(((-0.000427969295308520)*(cj3)*(px)*(sj3)*(x5)))+(((-0.000427969295308520)*(cj3)*(px)*(sj3)*(x0)))+(((-0.000427969295308520)*(cj3)*(px)*(sj3)*(x1)))+(((0.00514314700161840)*(px)*(x2)*(x4)))+(((0.00514314700161840)*(px)*(x2)*(x5)))+(((8.90299838159575e-6)*(px)*(x0)*(x3)))+(((-1.78059967631915e-5)*(j0)*(px)*(pz)*(x3))));
coniccoeffs[3]=0;
coniccoeffs[4]=((((-0.0102862940032368)*(j0)*(py)*(pz)*(x2)))+(((0.000855938590617039)*(cj3)*(j0)*(py)*(pz)*(sj3)))+(((-1.78059967631915e-5)*(j0)*(py)*(pz)*(x3)))+(((0.00514314700161840)*(py)*(x2)*(x4)))+(((0.00514314700161840)*(py)*(x2)*(x5)))+(((-0.00130142706043652)*(py)*(x2)))+(((-0.000427969295308520)*(cj3)*(py)*(sj3)*(x1)))+(((-0.000427969295308520)*(cj3)*(py)*(sj3)*(x0)))+(((-0.000427969295308520)*(cj3)*(py)*(sj3)*(x5)))+(((-0.000427969295308520)*(cj3)*(py)*(sj3)*(x4)))+(((0.00514314700161840)*(py)*(x0)*(x2)))+(((-2.25282361347737e-6)*(py)*(x3)))+(((8.90299838159575e-6)*(py)*(x3)*(x5)))+(((8.90299838159575e-6)*(py)*(x3)*(x4)))+(((8.90299838159575e-6)*(py)*(x1)*(x3)))+(((0.00514314700161840)*(py)*(x1)*(x2)))+(((8.90299838159575e-6)*(py)*(x0)*(x3)))+(((0.000108293778454163)*(cj3)*(py)*(sj3))));
coniccoeffs[5]=((((-0.000997343925479927)*(cj3)*(sj3)*(x0)))+(((8.53126400719886e-8)*(x3)))+(((-0.0514314700161840)*(x0)*(x2)*(x5)))+(((-0.0514314700161840)*(x0)*(x2)*(x4)))+(((-1.00000000000000)*(x10)))+(((0.000178059967631915)*(j0)*(pz)*(x1)*(x3)))+(((-4.10099933613311e-6)*(cj3)*(sj3)))+(((0.0130142706043652)*(x1)*(x2)))+(((0.102862940032368)*(j0)*(pz)*(x2)*(x4)))+(((0.102862940032368)*(j0)*(pz)*(x2)*(x5)))+(((2.25282361347737e-5)*(x1)*(x3)))+(((0.000178059967631915)*(j0)*(pz)*(x0)*(x3)))+(((0.0128390788592556)*(cj3)*(sj3)*(x4)*(x5)))+(((-0.00108293778454163)*(cj3)*(sj3)*(x4)))+(((-0.00108293778454163)*(cj3)*(sj3)*(x5)))+(((-0.00108293778454163)*(cj3)*(sj3)*(x1)))+(((-4.45149919079788e-5)*(x11)*(x3)))+(((-8.90299838159575e-5)*(x1)*(x3)*(x5)))+(((-8.90299838159575e-5)*(x1)*(x3)*(x4)))+(((0.0130142706043652)*(x2)*(x5)))+(((0.0130142706043652)*(x2)*(x4)))+(((0.00427969295308519)*(cj3)*(sj3)*(x1)*(x5)))+(((0.00427969295308519)*(cj3)*(sj3)*(x1)*(x4)))+(((-4.45149919079788e-5)*(x13)*(x3)))+(((-0.154294410048552)*(x2)*(x4)*(x5)))+(((-0.0514314700161840)*(x0)*(x1)*(x2)))+(((-0.00855938590617039)*(cj3)*(j0)*(pz)*(sj3)*(x4)))+(((-0.00855938590617039)*(cj3)*(j0)*(pz)*(sj3)*(x5)))+(((-0.00855938590617039)*(cj3)*(j0)*(pz)*(sj3)*(x0)))+(((-0.00855938590617039)*(cj3)*(j0)*(pz)*(sj3)*(x1)))+(((-0.000267089951447873)*(x3)*(x4)*(x5)))+(((-8.90299838159575e-5)*(x0)*(x1)*(x3)))+(((-0.0257157350080920)*(x13)*(x2)))+(((0.102862940032368)*(j0)*(pz)*(x0)*(x2)))+(((-0.0260285412087305)*(j0)*(pz)*(x2)))+(((0.000178059967631915)*(j0)*(pz)*(x3)*(x5)))+(((0.000178059967631915)*(j0)*(pz)*(x3)*(x4)))+(((-0.0257157350080920)*(x14)*(x2)))+(((-0.0514314700161840)*(x1)*(x2)*(x4)))+(((-0.0514314700161840)*(x1)*(x2)*(x5)))+(((0.00213984647654260)*(cj3)*(sj3)*(x13)))+(((0.00213984647654260)*(cj3)*(sj3)*(x12)))+(((0.00213984647654260)*(cj3)*(sj3)*(x11)))+(((0.00213984647654260)*(cj3)*(sj3)*(x14)))+(((-0.0257157350080920)*(x11)*(x2)))+(((-4.45149919079788e-5)*(x12)*(x3)))+(((2.07476364584546e-5)*(x0)*(x3)))+(((4.92840086204478e-5)*(x2)))+(((-0.0257157350080920)*(x12)*(x2)))+(((0.102862940032368)*(j0)*(pz)*(x1)*(x2)))+(((0.00427969295308519)*(cj3)*(sj3)*(x0)*(x5)))+(((0.00427969295308519)*(cj3)*(sj3)*(x0)*(x4)))+(((0.00427969295308519)*(cj3)*(sj3)*(x0)*(x1)))+(((-4.50564722695474e-5)*(j0)*(pz)*(x3)))+(((-4.45149919079788e-5)*(x14)*(x3)))+(((0.0119856412040415)*(x0)*(x2)))+(((0.00216587556908326)*(cj3)*(j0)*(pz)*(sj3)))+(((-8.90299838159575e-5)*(x0)*(x3)*(x4)))+(((-8.90299838159575e-5)*(x0)*(x3)*(x5)))+(((2.25282361347737e-5)*(x3)*(x4)))+(((2.25282361347737e-5)*(x3)*(x5))));
conicsolver(coniccoeffs,j1array,numsolutions);
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
{
    j1 = j1array[ij1]; cj1 = IKcos(j1); sj1 = IKsin(j1);

{
IKReal j4eval[1];
j4eval[0]=((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
IKReal x15=x5;
IKReal x16=x0;
IKReal x17=(sj1)*(sj1);
IKReal x18=(cj1)*(cj1);
IKReal x19=x1;
IKReal x20=x4;
j2eval[0]=((((0.159861696250397)*(cj1)*(px)*(sj3)))+(((-0.799308481251984)*(sj3)*(x15)))+(((-0.799308481251984)*(sj3)*(x16)*(x17)))+(((-0.00665117071994815)*(cj1)*(cj3)*(px)))+(((1.59861696250397)*(j0)*(pz)*(sj3)))+(((0.0332558535997407)*(cj3)*(x16)*(x17)))+(((-0.00665117071994815)*(cj3)*(py)*(sj1)))+(((-0.0665117071994815)*(cj3)*(j0)*(pz)))+(((0.0332558535997407)*(cj3)*(x18)*(x19)))+(((-0.00799308481251984)*(sj3)))+(((0.159861696250397)*(py)*(sj1)*(sj3)))+(((0.0332558535997407)*(cj3)*(x20)))+(((0.0332558535997407)*(cj3)*(x15)))+(((-1.59861696250397)*(cj1)*(px)*(py)*(sj1)*(sj3)))+(((0.000332558535997407)*(cj3)))+(((0.0665117071994815)*(cj1)*(cj3)*(px)*(py)*(sj1)))+(((-0.799308481251984)*(sj3)*(x18)*(x19)))+(((-0.799308481251984)*(sj3)*(x20))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal evalcond[1];
evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
sj4array[0]=((((5.76460752303423e+17)*(cj1)*(py)))+(((-5.76460752303423e+17)*(px)*(sj1))));
if( sj4array[0] >= -1.0001 && sj4array[0] <= 1.0001 )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.160000000000000)*(cj1)))+(((-0.256800000000000)*(cj1)*(cj4)))+(((-0.103041000000000)*(cj1)*((sj4)*(sj4))))+(((-0.103041000000000)*(cj1)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.103041000000000)*(sj1)*((sj4)*(sj4))))+(((-0.256800000000000)*(cj4)*(sj1)))+(((-0.160000000000000)*(sj1)))+(((-0.103041000000000)*(sj1)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x21=((1.73472347597681e-18)*(sj4));
IKReal x22=((x21)+(((-1.00000000000000)*(py))));
evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x22;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(px)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[3]=x22;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(px)))+(((-0.321000000000000)*(cj4)*(px)))+(((-0.321000000000000)*(pz)*(sj4)))+(((0.321000000000000)*(j0)*(sj4)))+(((0.0321000000000000)*(cj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.400000000000000)*(j0)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(cj4)*(j0)))+(((-0.321000000000000)*(px)*(sj4)))+(((0.0321000000000000)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x23=((((-1.00000000000000)*(pz)))+(j0));
IKReal x24=((0.400000000000000)*(pz));
IKReal x25=((0.0321000000000000)*(sj4));
IKReal x26=((0.321000000000000)*(cj4)*(pz));
IKReal x27=((x24)+(x25)+(x26));
IKReal x28=((0.400000000000000)*(j0));
IKReal x29=((0.321000000000000)*(cj4)*(j0));
IKReal x30=((0.321000000000000)*(px)*(sj4));
IKReal x31=((x30)+(x28)+(x29));
IKReal x32=((((-1.00000000000000)*(x31)))+(x27));
IKReal x33=((IKabs(x32) != 0)?((IKReal)1/(x32)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x33)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x23)*(x23))))))), ((x33)*(((((-0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x23)*(((0.100000000000000)+(((-1.00000000000000)*(px)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x97=((0.100000000000000)+(((-1.00000000000000)*(px))));
IKReal x98=((0.321000000000000)*(j0)*(sj4));
IKReal x99=((0.0321000000000000)*(cj4));
IKReal x100=((0.0400000000000000)+(x99)+(x98));
IKReal x101=((0.400000000000000)*(px));
IKReal x102=((0.321000000000000)*(pz)*(sj4));
IKReal x103=((0.321000000000000)*(cj4)*(px));
IKReal x104=((x101)+(x102)+(x103));
IKReal x105=((((-1.00000000000000)*(x104)))+(x100));
IKReal x106=((IKabs(x105) != 0)?((IKReal)1/(x105)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x106)*(((((x97)*(((((-1.00000000000000)*(pz)))+(j0)))))+(((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))), ((x106)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x97)*(x97))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x107=((0.256800000000000)*(cj4));
IKReal x108=(sj4)*(sj4);
IKReal x109=((0.103041000000000)*(x108));
IKReal x110=(cj4)*(cj4);
IKReal x111=((0.103041000000000)*(x110));
IKReal x112=((0.160000000000000)+(x111)+(x109)+(x107));
IKReal x113=((IKabs(x112) != 0)?((IKReal)1/(x112)):(IKReal)1.0e30);
IKReal x114=((((-1.00000000000000)*(pz)))+(j0));
IKReal x115=((0.321000000000000)*(cj4));
IKReal x116=((0.400000000000000)+(x115));
IKReal x117=((0.100000000000000)+(((-1.00000000000000)*(px))));
j2array[0]=IKatan2(((-1.00000000000000)*(x113)*(((((-0.321000000000000)*(sj4)*(x117)))+(((-1.00000000000000)*(x114)*(x116)))))), ((-1.00000000000000)*(x113)*(((((-0.321000000000000)*(sj4)*(x114)))+(((x116)*(x117)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x118=((1.73472347597681e-18)*(sj4));
IKReal x119=((x118)+(py));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x119;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(px)))+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[3]=((-1.00000000000000)*(x119));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0400000000000000)+(((-0.321000000000000)*(pz)*(sj4)))+(((0.400000000000000)*(px)))+(((0.321000000000000)*(j0)*(sj4)))+(((0.321000000000000)*(cj4)*(px)))+(((0.0321000000000000)*(cj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.400000000000000)*(j0)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(cj4)*(j0)))+(((0.0321000000000000)*(sj4)))+(((0.321000000000000)*(cj4)*(pz)))+(((0.321000000000000)*(px)*(sj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x120=((((-1.00000000000000)*(pz)))+(j0));
IKReal x121=((0.400000000000000)*(pz));
IKReal x122=((0.0321000000000000)*(sj4));
IKReal x123=((0.321000000000000)*(cj4)*(pz));
IKReal x124=((0.321000000000000)*(px)*(sj4));
IKReal x125=((x124)+(x122)+(x123)+(x121));
IKReal x126=((0.400000000000000)*(j0));
IKReal x127=((0.321000000000000)*(cj4)*(j0));
IKReal x128=((x126)+(x127));
IKReal x129=((((-1.00000000000000)*(x128)))+(x125));
IKReal x130=((IKabs(x129) != 0)?((IKReal)1/(x129)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x130)*(((((-1.00000000000000)*((x120)*(x120))))+(((0.103041000000000)*((sj4)*(sj4))))))), ((x130)*(((((-0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x120)*(((0.100000000000000)+(px)))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x131=((0.100000000000000)+(px));
IKReal x132=((0.400000000000000)*(px));
IKReal x133=((0.321000000000000)*(j0)*(sj4));
IKReal x134=((0.321000000000000)*(cj4)*(px));
IKReal x135=((0.0321000000000000)*(cj4));
IKReal x136=((0.0400000000000000)+(x135)+(x134)+(x133)+(x132));
IKReal x137=((0.321000000000000)*(pz)*(sj4));
IKReal x138=((x136)+(((-1.00000000000000)*(x137))));
IKReal x139=((IKabs(x138) != 0)?((IKReal)1/(x138)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x139)*(((((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x131)*(((((-1.00000000000000)*(pz)))+(j0)))))))), ((x139)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x131)*(x131))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x140=((0.256800000000000)*(cj4));
IKReal x141=(sj4)*(sj4);
IKReal x142=((0.103041000000000)*(x141));
IKReal x143=(cj4)*(cj4);
IKReal x144=((0.103041000000000)*(x143));
IKReal x145=((0.160000000000000)+(x140)+(x142)+(x144));
IKReal x146=((IKabs(x145) != 0)?((IKReal)1/(x145)):(IKReal)1.0e30);
IKReal x147=((((-1.00000000000000)*(pz)))+(j0));
IKReal x148=((0.100000000000000)+(px));
IKReal x149=((0.321000000000000)*(cj4));
IKReal x150=((0.400000000000000)+(x149));
j2array[0]=IKatan2(((-1.00000000000000)*(x146)*(((((-1.00000000000000)*(x147)*(x150)))+(((-0.321000000000000)*(sj4)*(x148)))))), ((-1.00000000000000)*(x146)*(((((x148)*(x150)))+(((-0.321000000000000)*(sj4)*(x147)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x151=((1.73472347597681e-18)*(sj4));
IKReal x152=((x151)+(px));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x152;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[3]=((-1.00000000000000)*(x152));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(cj4)*(py)))+(((-0.321000000000000)*(pz)*(sj4)))+(((0.321000000000000)*(j0)*(sj4)))+(((0.0321000000000000)*(cj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.400000000000000)*(j0)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(cj4)*(j0)))+(((-0.321000000000000)*(py)*(sj4)))+(((0.0321000000000000)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x153=((((-1.00000000000000)*(pz)))+(j0));
IKReal x154=((0.400000000000000)*(pz));
IKReal x155=((0.0321000000000000)*(sj4));
IKReal x156=((0.321000000000000)*(cj4)*(pz));
IKReal x157=((x156)+(x155)+(x154));
IKReal x158=((0.400000000000000)*(j0));
IKReal x159=((0.321000000000000)*(py)*(sj4));
IKReal x160=((0.321000000000000)*(cj4)*(j0));
IKReal x161=((x160)+(x159)+(x158));
IKReal x162=((((-1.00000000000000)*(x161)))+(x157));
IKReal x163=((IKabs(x162) != 0)?((IKReal)1/(x162)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x163)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x153)*(x153))))))), ((x163)*(((((-0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x153)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x164=((0.100000000000000)+(((-1.00000000000000)*(py))));
IKReal x165=((0.321000000000000)*(j0)*(sj4));
IKReal x166=((0.0321000000000000)*(cj4));
IKReal x167=((0.0400000000000000)+(x166)+(x165));
IKReal x168=((0.400000000000000)*(py));
IKReal x169=((0.321000000000000)*(pz)*(sj4));
IKReal x170=((0.321000000000000)*(cj4)*(py));
IKReal x171=((x170)+(x168)+(x169));
IKReal x172=((((-1.00000000000000)*(x171)))+(x167));
IKReal x173=((IKabs(x172) != 0)?((IKReal)1/(x172)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x173)*(((((x164)*(((((-1.00000000000000)*(pz)))+(j0)))))+(((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))), ((x173)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x164)*(x164))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x174=((0.256800000000000)*(cj4));
IKReal x175=(sj4)*(sj4);
IKReal x176=((0.103041000000000)*(x175));
IKReal x177=(cj4)*(cj4);
IKReal x178=((0.103041000000000)*(x177));
IKReal x179=((0.160000000000000)+(x178)+(x174)+(x176));
IKReal x180=((IKabs(x179) != 0)?((IKReal)1/(x179)):(IKReal)1.0e30);
IKReal x181=((((-1.00000000000000)*(pz)))+(j0));
IKReal x182=((0.321000000000000)*(cj4));
IKReal x183=((0.400000000000000)+(x182));
IKReal x184=((0.100000000000000)+(((-1.00000000000000)*(py))));
j2array[0]=IKatan2(((-1.00000000000000)*(x180)*(((((-0.321000000000000)*(sj4)*(x184)))+(((-1.00000000000000)*(x181)*(x183)))))), ((-1.00000000000000)*(x180)*(((((-0.321000000000000)*(sj4)*(x181)))+(((x183)*(x184)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x185=((1.73472347597681e-18)*(sj4));
IKReal x186=((x185)+(((-1.00000000000000)*(px))));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x186;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[3]=x186;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0400000000000000)+(((-0.321000000000000)*(pz)*(sj4)))+(((0.400000000000000)*(py)))+(((0.321000000000000)*(j0)*(sj4)))+(((0.321000000000000)*(cj4)*(py)))+(((0.0321000000000000)*(cj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((0.321000000000000)*(py)*(sj4)))+(((-0.400000000000000)*(j0)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(cj4)*(j0)))+(((0.0321000000000000)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x187=((((-1.00000000000000)*(pz)))+(j0));
IKReal x188=((0.321000000000000)*(py)*(sj4));
IKReal x189=((0.400000000000000)*(pz));
IKReal x190=((0.0321000000000000)*(sj4));
IKReal x191=((0.321000000000000)*(cj4)*(pz));
IKReal x192=((x191)+(x190)+(x188)+(x189));
IKReal x193=((0.400000000000000)*(j0));
IKReal x194=((0.321000000000000)*(cj4)*(j0));
IKReal x195=((x193)+(x194));
IKReal x196=((((-1.00000000000000)*(x195)))+(x192));
IKReal x197=((IKabs(x196) != 0)?((IKReal)1/(x196)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x197)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x187)*(x187))))))), ((x197)*(((((-0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x187)*(((0.100000000000000)+(py)))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x198=((0.100000000000000)+(py));
IKReal x199=((0.400000000000000)*(py));
IKReal x200=((0.321000000000000)*(j0)*(sj4));
IKReal x201=((0.321000000000000)*(cj4)*(py));
IKReal x202=((0.0321000000000000)*(cj4));
IKReal x203=((0.0400000000000000)+(x199)+(x202)+(x201)+(x200));
IKReal x204=((0.321000000000000)*(pz)*(sj4));
IKReal x205=((((-1.00000000000000)*(x204)))+(x203));
IKReal x206=((IKabs(x205) != 0)?((IKReal)1/(x205)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x206)*(((((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x198)*(((((-1.00000000000000)*(pz)))+(j0)))))))), ((x206)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x198)*(x198))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x207=((0.256800000000000)*(cj4));
IKReal x208=(sj4)*(sj4);
IKReal x209=((0.103041000000000)*(x208));
IKReal x210=(cj4)*(cj4);
IKReal x211=((0.103041000000000)*(x210));
IKReal x212=((0.160000000000000)+(x211)+(x207)+(x209));
IKReal x213=((IKabs(x212) != 0)?((IKReal)1/(x212)):(IKReal)1.0e30);
IKReal x214=((0.100000000000000)+(py));
IKReal x215=((0.321000000000000)*(cj4));
IKReal x216=((0.400000000000000)+(x215));
IKReal x217=((((-1.00000000000000)*(pz)))+(j0));
j2array[0]=IKatan2(((-1.00000000000000)*(x213)*(((((-0.321000000000000)*(sj4)*(x214)))+(((-1.00000000000000)*(x216)*(x217)))))), ((-1.00000000000000)*(x213)*(((((x214)*(x216)))+(((-0.321000000000000)*(sj4)*(x217)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x218=((0.100000000000000)*(sj1));
IKReal x219=((1.73472347597681e-18)*(cj1)*(sj4));
IKReal x220=((x218)+(x219));
IKReal x221=((x220)+(((-1.00000000000000)*(py))));
IKReal x222=(cj4)*(cj4);
IKReal x223=((0.103041000000000)*(sj1)*(x222));
IKReal x224=(sj4)*(sj4);
IKReal x225=((0.103041000000000)*(sj1)*(x224));
IKReal x226=((0.256800000000000)*(cj4)*(sj1));
IKReal x227=((0.160000000000000)*(sj1));
IKReal x228=((x223)+(x225)+(x227)+(x226));
IKReal x229=((-1.00000000000000)*(x228));
IKReal x230=((IKabs(x229) != 0)?((IKReal)1/(x229)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x230)*(((((-0.321000000000000)*(sj4)*(x221)))+(((((pz)+(((-1.00000000000000)*(j0)))))*(((((0.400000000000000)*(sj1)))+(((0.321000000000000)*(cj4)*(sj1)))))))))), ((x230)*(((((-0.321000000000000)*(sj1)*(sj4)*(((((-1.00000000000000)*(pz)))+(j0)))))+(((x221)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x231=((0.100000000000000)*(cj1));
IKReal x232=((1.73472347597681e-18)*(sj1)*(sj4));
IKReal x233=((x232)+(px));
IKReal x234=((((-1.00000000000000)*(x233)))+(x231));
IKReal x235=((0.256800000000000)*(cj1)*(cj4));
IKReal x236=(sj4)*(sj4);
IKReal x237=((0.103041000000000)*(cj1)*(x236));
IKReal x238=((0.160000000000000)*(cj1));
IKReal x239=(cj4)*(cj4);
IKReal x240=((0.103041000000000)*(cj1)*(x239));
IKReal x241=((x238)+(x237)+(x235)+(x240));
IKReal x242=((-1.00000000000000)*(x241));
IKReal x243=((IKabs(x242) != 0)?((IKReal)1/(x242)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x243)*(((((-0.321000000000000)*(sj4)*(x234)))+(((((pz)+(((-1.00000000000000)*(j0)))))*(((((0.400000000000000)*(cj1)))+(((0.321000000000000)*(cj1)*(cj4)))))))))), ((x243)*(((((-0.321000000000000)*(cj1)*(sj4)*(((((-1.00000000000000)*(pz)))+(j0)))))+(((x234)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x244=((0.256800000000000)*(cj4));
IKReal x245=(sj4)*(sj4);
IKReal x246=((0.103041000000000)*(x245));
IKReal x247=(cj4)*(cj4);
IKReal x248=((0.103041000000000)*(x247));
IKReal x249=((0.160000000000000)+(x246)+(x244)+(x248));
IKReal x250=((IKabs(x249) != 0)?((IKReal)1/(x249)):(IKReal)1.0e30);
IKReal x251=((0.321000000000000)*(cj4));
IKReal x252=((0.400000000000000)+(x251));
IKReal x253=((cj1)*(px));
IKReal x254=((py)*(sj1));
IKReal x255=((x254)+(x253));
IKReal x256=((0.100000000000000)+(((-1.00000000000000)*(x255))));
IKReal x257=((((-1.00000000000000)*(pz)))+(j0));
j2array[0]=IKatan2(((-1.00000000000000)*(x250)*(((((-1.00000000000000)*(x252)*(x257)))+(((-0.321000000000000)*(sj4)*(x256)))))), ((-1.00000000000000)*(x250)*(((((-0.321000000000000)*(sj4)*(x257)))+(((x252)*(x256)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-3.18317445236063)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
sj4array[0]=((((-5.24055229366749e+16)*(px)*(sj1)))+(((5.24055229366749e+16)*(cj1)*(py))));
if( sj4array[0] >= -1.0001 && sj4array[0] <= 1.0001 )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.160000000000000)*(cj1)))+(((-0.256800000000000)*(cj1)*(cj4)))+(((-0.103041000000000)*(cj1)*((sj4)*(sj4))))+(((-0.103041000000000)*(cj1)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.103041000000000)*(sj1)*((sj4)*(sj4))))+(((-0.256800000000000)*(cj4)*(sj1)))+(((-0.160000000000000)*(sj1)))+(((-0.103041000000000)*(sj1)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal evalcond[4];
IKReal x258=((1.90819582357449e-17)*(sj4));
IKReal x259=((x258)+(((-1.00000000000000)*(py))));
evalcond[0]=((IKfmod(((3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x259;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(px)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[3]=x259;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(px)))+(((-0.321000000000000)*(cj4)*(px)))+(((-0.321000000000000)*(j0)*(sj4)))+(((0.321000000000000)*(pz)*(sj4)))+(((0.0321000000000000)*(cj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.0321000000000000)*(sj4)))+(((-0.400000000000000)*(j0)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(cj4)*(j0)))+(((0.321000000000000)*(cj4)*(pz)))+(((0.321000000000000)*(px)*(sj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x260=((((-1.00000000000000)*(pz)))+(j0));
IKReal x261=((0.400000000000000)*(pz));
IKReal x262=((0.321000000000000)*(cj4)*(pz));
IKReal x263=((0.321000000000000)*(px)*(sj4));
IKReal x264=((x261)+(x263)+(x262));
IKReal x265=((0.400000000000000)*(j0));
IKReal x266=((0.321000000000000)*(cj4)*(j0));
IKReal x267=((0.0321000000000000)*(sj4));
IKReal x268=((x265)+(x267)+(x266));
IKReal x269=((x264)+(((-1.00000000000000)*(x268))));
IKReal x270=((IKabs(x269) != 0)?((IKReal)1/(x269)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x270)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x260)*(x260))))))), ((x270)*(((((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x260)*(((0.100000000000000)+(((-1.00000000000000)*(px)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x271=((0.100000000000000)+(((-1.00000000000000)*(px))));
IKReal x272=((0.321000000000000)*(pz)*(sj4));
IKReal x273=((0.0321000000000000)*(cj4));
IKReal x274=((0.0400000000000000)+(x272)+(x273));
IKReal x275=((0.400000000000000)*(px));
IKReal x276=((0.321000000000000)*(j0)*(sj4));
IKReal x277=((0.321000000000000)*(cj4)*(px));
IKReal x278=((x276)+(x277)+(x275));
IKReal x279=((x274)+(((-1.00000000000000)*(x278))));
IKReal x280=((IKabs(x279) != 0)?((IKReal)1/(x279)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x280)*(((((-0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x271)*(((((-1.00000000000000)*(pz)))+(j0)))))))), ((x280)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x271)*(x271))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x281=((0.256800000000000)*(cj4));
IKReal x282=(sj4)*(sj4);
IKReal x283=((0.103041000000000)*(x282));
IKReal x284=(cj4)*(cj4);
IKReal x285=((0.103041000000000)*(x284));
IKReal x286=((0.160000000000000)+(x285)+(x283)+(x281));
IKReal x287=((IKabs(x286) != 0)?((IKReal)1/(x286)):(IKReal)1.0e30);
IKReal x288=((((-1.00000000000000)*(pz)))+(j0));
IKReal x289=((0.321000000000000)*(cj4));
IKReal x290=((0.400000000000000)+(x289));
IKReal x291=((0.100000000000000)+(((-1.00000000000000)*(px))));
j2array[0]=IKatan2(((-1.00000000000000)*(x287)*(((((-1.00000000000000)*(x288)*(x290)))+(((0.321000000000000)*(sj4)*(x291)))))), ((-1.00000000000000)*(x287)*(((((x290)*(x291)))+(((0.321000000000000)*(sj4)*(x288)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x292=((1.90819582357449e-17)*(sj4));
IKReal x293=((x292)+(py));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x293;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(px)))+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[3]=((-1.00000000000000)*(x293));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0400000000000000)+(((-0.321000000000000)*(j0)*(sj4)))+(((0.400000000000000)*(px)))+(((0.321000000000000)*(pz)*(sj4)))+(((0.321000000000000)*(cj4)*(px)))+(((0.0321000000000000)*(cj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.0321000000000000)*(sj4)))+(((-0.400000000000000)*(j0)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(cj4)*(j0)))+(((-0.321000000000000)*(px)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x294=((((-1.00000000000000)*(pz)))+(j0));
IKReal x295=((0.400000000000000)*(pz));
IKReal x296=((0.321000000000000)*(cj4)*(pz));
IKReal x297=((x295)+(x296));
IKReal x298=((0.400000000000000)*(j0));
IKReal x299=((0.321000000000000)*(cj4)*(j0));
IKReal x300=((0.0321000000000000)*(sj4));
IKReal x301=((0.321000000000000)*(px)*(sj4));
IKReal x302=((x300)+(x301)+(x298)+(x299));
IKReal x303=((x297)+(((-1.00000000000000)*(x302))));
IKReal x304=((IKabs(x303) != 0)?((IKReal)1/(x303)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x304)*(((((-1.00000000000000)*((x294)*(x294))))+(((0.103041000000000)*((sj4)*(sj4))))))), ((x304)*(((((x294)*(((0.100000000000000)+(px)))))+(((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x305=((0.100000000000000)+(px));
IKReal x306=((0.400000000000000)*(px));
IKReal x307=((0.321000000000000)*(pz)*(sj4));
IKReal x308=((0.321000000000000)*(cj4)*(px));
IKReal x309=((0.0321000000000000)*(cj4));
IKReal x310=((0.0400000000000000)+(x308)+(x309)+(x306)+(x307));
IKReal x311=((0.321000000000000)*(j0)*(sj4));
IKReal x312=((x310)+(((-1.00000000000000)*(x311))));
IKReal x313=((IKabs(x312) != 0)?((IKReal)1/(x312)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x313)*(((((-0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x305)*(((((-1.00000000000000)*(pz)))+(j0)))))))), ((x313)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x305)*(x305))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x314=((0.256800000000000)*(cj4));
IKReal x315=(sj4)*(sj4);
IKReal x316=((0.103041000000000)*(x315));
IKReal x317=(cj4)*(cj4);
IKReal x318=((0.103041000000000)*(x317));
IKReal x319=((0.160000000000000)+(x318)+(x314)+(x316));
IKReal x320=((IKabs(x319) != 0)?((IKReal)1/(x319)):(IKReal)1.0e30);
IKReal x321=((0.100000000000000)+(px));
IKReal x322=((0.321000000000000)*(cj4));
IKReal x323=((0.400000000000000)+(x322));
IKReal x324=((((-1.00000000000000)*(pz)))+(j0));
j2array[0]=IKatan2(((-1.00000000000000)*(x320)*(((((-1.00000000000000)*(x323)*(x324)))+(((0.321000000000000)*(sj4)*(x321)))))), ((-1.00000000000000)*(x320)*(((((0.321000000000000)*(sj4)*(x324)))+(((x321)*(x323)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x325=((1.90819582357449e-17)*(sj4));
IKReal x326=((x325)+(px));
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=x326;
evalcond[2]=((0.253041000000000)+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((0.200000000000000)*(py)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[3]=((-1.00000000000000)*(x326));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0400000000000000)+(((-0.400000000000000)*(py)))+(((-0.321000000000000)*(cj4)*(py)))+(((-0.321000000000000)*(j0)*(sj4)))+(((0.321000000000000)*(pz)*(sj4)))+(((0.0321000000000000)*(cj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((0.321000000000000)*(py)*(sj4)))+(((-0.0321000000000000)*(sj4)))+(((-0.400000000000000)*(j0)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(cj4)*(j0)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x327=((((-1.00000000000000)*(pz)))+(j0));
IKReal x328=((0.321000000000000)*(py)*(sj4));
IKReal x329=((0.400000000000000)*(pz));
IKReal x330=((0.321000000000000)*(cj4)*(pz));
IKReal x331=((x330)+(x328)+(x329));
IKReal x332=((0.400000000000000)*(j0));
IKReal x333=((0.321000000000000)*(cj4)*(j0));
IKReal x334=((0.0321000000000000)*(sj4));
IKReal x335=((x333)+(x332)+(x334));
IKReal x336=((x331)+(((-1.00000000000000)*(x335))));
IKReal x337=((IKabs(x336) != 0)?((IKReal)1/(x336)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x337)*(((((-1.00000000000000)*((x327)*(x327))))+(((0.103041000000000)*((sj4)*(sj4))))))), ((x337)*(((((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x327)*(((0.100000000000000)+(((-1.00000000000000)*(py)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x338=((0.100000000000000)+(((-1.00000000000000)*(py))));
IKReal x339=((0.321000000000000)*(pz)*(sj4));
IKReal x340=((0.0321000000000000)*(cj4));
IKReal x341=((0.0400000000000000)+(x339)+(x340));
IKReal x342=((0.400000000000000)*(py));
IKReal x343=((0.321000000000000)*(j0)*(sj4));
IKReal x344=((0.321000000000000)*(cj4)*(py));
IKReal x345=((x342)+(x343)+(x344));
IKReal x346=((x341)+(((-1.00000000000000)*(x345))));
IKReal x347=((IKabs(x346) != 0)?((IKReal)1/(x346)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x347)*(((((-0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x338)*(((((-1.00000000000000)*(pz)))+(j0)))))))), ((x347)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x338)*(x338))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x348=((0.256800000000000)*(cj4));
IKReal x349=(sj4)*(sj4);
IKReal x350=((0.103041000000000)*(x349));
IKReal x351=(cj4)*(cj4);
IKReal x352=((0.103041000000000)*(x351));
IKReal x353=((0.160000000000000)+(x350)+(x352)+(x348));
IKReal x354=((IKabs(x353) != 0)?((IKReal)1/(x353)):(IKReal)1.0e30);
IKReal x355=((0.321000000000000)*(cj4));
IKReal x356=((0.400000000000000)+(x355));
IKReal x357=((0.100000000000000)+(((-1.00000000000000)*(py))));
IKReal x358=((((-1.00000000000000)*(pz)))+(j0));
j2array[0]=IKatan2(((-1.00000000000000)*(x354)*(((((-1.00000000000000)*(x356)*(x358)))+(((0.321000000000000)*(sj4)*(x357)))))), ((-1.00000000000000)*(x354)*(((((x356)*(x357)))+(((0.321000000000000)*(sj4)*(x358)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x359=((1.90819582357449e-17)*(sj4));
IKReal x360=((x359)+(((-1.00000000000000)*(px))));
evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=x360;
evalcond[2]=((0.253041000000000)+(((-0.200000000000000)*(py)))+(((0.256800000000000)*(cj4)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[3]=x360;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.160000000000000)+(((0.256800000000000)*(cj4)))+(((0.103041000000000)*((sj4)*(sj4))))+(((0.103041000000000)*((cj4)*(cj4)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0400000000000000)+(((-0.321000000000000)*(j0)*(sj4)))+(((0.400000000000000)*(py)))+(((0.321000000000000)*(pz)*(sj4)))+(((0.321000000000000)*(cj4)*(py)))+(((0.0321000000000000)*(cj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((-0.0321000000000000)*(sj4)))+(((-0.400000000000000)*(j0)))+(((0.400000000000000)*(pz)))+(((-0.321000000000000)*(cj4)*(j0)))+(((-0.321000000000000)*(py)*(sj4)))+(((0.321000000000000)*(cj4)*(pz))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x361=((((-1.00000000000000)*(pz)))+(j0));
IKReal x362=((0.400000000000000)*(pz));
IKReal x363=((0.321000000000000)*(cj4)*(pz));
IKReal x364=((x362)+(x363));
IKReal x365=((0.400000000000000)*(j0));
IKReal x366=((0.321000000000000)*(py)*(sj4));
IKReal x367=((0.321000000000000)*(cj4)*(j0));
IKReal x368=((0.0321000000000000)*(sj4));
IKReal x369=((x368)+(x365)+(x366)+(x367));
IKReal x370=((((-1.00000000000000)*(x369)))+(x364));
IKReal x371=((IKabs(x370) != 0)?((IKReal)1/(x370)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x371)*(((((0.103041000000000)*((sj4)*(sj4))))+(((-1.00000000000000)*((x361)*(x361))))))), ((x371)*(((((0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x361)*(((0.100000000000000)+(py)))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x372=((0.100000000000000)+(py));
IKReal x373=((0.400000000000000)*(py));
IKReal x374=((0.321000000000000)*(pz)*(sj4));
IKReal x375=((0.321000000000000)*(cj4)*(py));
IKReal x376=((0.0321000000000000)*(cj4));
IKReal x377=((0.0400000000000000)+(x376)+(x375)+(x374)+(x373));
IKReal x378=((0.321000000000000)*(j0)*(sj4));
IKReal x379=((((-1.00000000000000)*(x378)))+(x377));
IKReal x380=((IKabs(x379) != 0)?((IKReal)1/(x379)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x380)*(((((-0.321000000000000)*(sj4)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x372)*(((((-1.00000000000000)*(pz)))+(j0)))))))), ((x380)*(((((-1.00000000000000)*((x372)*(x372))))+(((0.103041000000000)*((sj4)*(sj4))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x381=((0.256800000000000)*(cj4));
IKReal x382=(sj4)*(sj4);
IKReal x383=((0.103041000000000)*(x382));
IKReal x384=(cj4)*(cj4);
IKReal x385=((0.103041000000000)*(x384));
IKReal x386=((0.160000000000000)+(x385)+(x383)+(x381));
IKReal x387=((IKabs(x386) != 0)?((IKReal)1/(x386)):(IKReal)1.0e30);
IKReal x388=((0.100000000000000)+(py));
IKReal x389=((0.321000000000000)*(cj4));
IKReal x390=((0.400000000000000)+(x389));
IKReal x391=((((-1.00000000000000)*(pz)))+(j0));
j2array[0]=IKatan2(((-1.00000000000000)*(x387)*(((((0.321000000000000)*(sj4)*(x388)))+(((-1.00000000000000)*(x390)*(x391)))))), ((-1.00000000000000)*(x387)*(((((0.321000000000000)*(sj4)*(x391)))+(((x388)*(x390)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x392=((0.100000000000000)*(sj1));
IKReal x393=((1.90819582357449e-17)*(cj1)*(sj4));
IKReal x394=((x393)+(x392));
IKReal x395=((x394)+(((-1.00000000000000)*(py))));
IKReal x396=(cj4)*(cj4);
IKReal x397=((0.103041000000000)*(sj1)*(x396));
IKReal x398=(sj4)*(sj4);
IKReal x399=((0.103041000000000)*(sj1)*(x398));
IKReal x400=((0.256800000000000)*(cj4)*(sj1));
IKReal x401=((0.160000000000000)*(sj1));
IKReal x402=((x397)+(x399)+(x401)+(x400));
IKReal x403=((-1.00000000000000)*(x402));
IKReal x404=((IKabs(x403) != 0)?((IKReal)1/(x403)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x404)*(((((0.321000000000000)*(sj4)*(x395)))+(((((pz)+(((-1.00000000000000)*(j0)))))*(((((0.400000000000000)*(sj1)))+(((0.321000000000000)*(cj4)*(sj1)))))))))), ((x404)*(((((0.321000000000000)*(sj1)*(sj4)*(((((-1.00000000000000)*(pz)))+(j0)))))+(((x395)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x405=((0.100000000000000)*(cj1));
IKReal x406=((1.90819582357449e-17)*(sj1)*(sj4));
IKReal x407=((x406)+(px));
IKReal x408=((x405)+(((-1.00000000000000)*(x407))));
IKReal x409=((0.256800000000000)*(cj1)*(cj4));
IKReal x410=(sj4)*(sj4);
IKReal x411=((0.103041000000000)*(cj1)*(x410));
IKReal x412=((0.160000000000000)*(cj1));
IKReal x413=(cj4)*(cj4);
IKReal x414=((0.103041000000000)*(cj1)*(x413));
IKReal x415=((x409)+(x412)+(x411)+(x414));
IKReal x416=((-1.00000000000000)*(x415));
IKReal x417=((IKabs(x416) != 0)?((IKReal)1/(x416)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x417)*(((((((pz)+(((-1.00000000000000)*(j0)))))*(((((0.400000000000000)*(cj1)))+(((0.321000000000000)*(cj1)*(cj4)))))))+(((0.321000000000000)*(sj4)*(x408)))))), ((x417)*(((((0.321000000000000)*(cj1)*(sj4)*(((((-1.00000000000000)*(pz)))+(j0)))))+(((x408)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x418=((0.256800000000000)*(cj4));
IKReal x419=(sj4)*(sj4);
IKReal x420=((0.103041000000000)*(x419));
IKReal x421=(cj4)*(cj4);
IKReal x422=((0.103041000000000)*(x421));
IKReal x423=((0.160000000000000)+(x418)+(x422)+(x420));
IKReal x424=((IKabs(x423) != 0)?((IKReal)1/(x423)):(IKReal)1.0e30);
IKReal x425=((0.321000000000000)*(cj4));
IKReal x426=((0.400000000000000)+(x425));
IKReal x427=((cj1)*(px));
IKReal x428=((py)*(sj1));
IKReal x429=((x428)+(x427));
IKReal x430=((0.100000000000000)+(((-1.00000000000000)*(x429))));
IKReal x431=((((-1.00000000000000)*(pz)))+(j0));
j2array[0]=IKatan2(((-1.00000000000000)*(x424)*(((((-1.00000000000000)*(x426)*(x431)))+(((0.321000000000000)*(sj4)*(x430)))))), ((-1.00000000000000)*(x424)*(((((x426)*(x430)))+(((0.321000000000000)*(sj4)*(x431)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x432=x0;
IKReal x433=x1;
IKReal x434=x5;
IKReal x435=x4;
IKReal x436=(sj1)*(sj1);
IKReal x437=(cj1)*(cj1);
IKReal x438=((0.0669590000000000)+(x432)+(x433)+(x434)+(x435));
IKReal x439=((2.00000000000000)*(j0)*(pz));
IKReal x440=((0.200000000000000)*(cj1)*(px));
IKReal x441=((0.200000000000000)*(py)*(sj1));
IKReal x442=((x439)+(x441)+(x440));
IKReal x443=((((-1.00000000000000)*(x442)))+(x438));
IKReal x444=((0.0415698169996759)*(cj1)*(py)*(sj3));
IKReal x445=((0.999135601564979)*(cj1)*(cj3)*(py));
IKReal x446=((x445)+(x444));
IKReal x447=((0.0415698169996759)*(px)*(sj1)*(sj3));
IKReal x448=((0.999135601564979)*(cj3)*(px)*(sj1));
IKReal x449=((x448)+(x447));
IKReal x450=((((-1.00000000000000)*(x449)))+(x446));
IKReal x451=((0.159861696250397)*(cj1)*(px)*(sj3));
IKReal x452=((0.0332558535997407)*(cj3)*(x432)*(x436));
IKReal x453=((1.59861696250397)*(j0)*(pz)*(sj3));
IKReal x454=((0.0332558535997407)*(cj3)*(x433)*(x437));
IKReal x455=((0.159861696250397)*(py)*(sj1)*(sj3));
IKReal x456=((0.0332558535997407)*(cj3)*(x434));
IKReal x457=((0.000332558535997407)*(cj3));
IKReal x458=((0.0332558535997407)*(cj3)*(x435));
IKReal x459=((0.0665117071994815)*(cj1)*(cj3)*(px)*(py)*(sj1));
IKReal x460=((x458)+(x459)+(x456)+(x457)+(x454)+(x455)+(x452)+(x453)+(x451));
IKReal x461=((0.0665117071994815)*(cj3)*(j0)*(pz));
IKReal x462=((0.00665117071994815)*(cj1)*(cj3)*(px));
IKReal x463=((0.799308481251984)*(sj3)*(x434));
IKReal x464=((0.799308481251984)*(sj3)*(x432)*(x436));
IKReal x465=((0.799308481251984)*(sj3)*(x433)*(x437));
IKReal x466=((0.00665117071994815)*(cj3)*(py)*(sj1));
IKReal x467=((1.59861696250397)*(cj1)*(px)*(py)*(sj1)*(sj3));
IKReal x468=((0.00799308481251984)*(sj3));
IKReal x469=((0.799308481251984)*(sj3)*(x435));
IKReal x470=((x469)+(x468)+(x463)+(x462)+(x461)+(x467)+(x466)+(x465)+(x464));
IKReal x471=((((-1.00000000000000)*(x470)))+(x460));
IKReal x472=((IKabs(x471) != 0)?((IKReal)1/(x471)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x472)*(((((x443)*(((((0.0415698169996759)*(cj3)*(j0)))+(((-0.0415698169996759)*(cj3)*(pz)))+(((-0.999135601564979)*(j0)*(sj3)))+(((0.999135601564979)*(pz)*(sj3)))))))+(((-1.00000000000000)*(x450)*(((0.0800000000000000)+(((-0.800000000000000)*(py)*(sj1)))+(((-0.800000000000000)*(cj1)*(px)))))))))), ((x472)*(((((x443)*(((((0.0415698169996759)*(cj3)*(py)*(sj1)))+(((0.0415698169996759)*(cj1)*(cj3)*(px)))+(((-0.999135601564979)*(py)*(sj1)*(sj3)))+(((0.0999135601564980)*(sj3)))+(((-0.999135601564979)*(cj1)*(px)*(sj3)))+(((-0.00415698169996759)*(cj3)))))))+(((x450)*(((((-0.800000000000000)*(j0)))+(((0.800000000000000)*(pz)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IKReal j4eval[1];
j4eval[0]=((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=((((-0.102951931520857)*(cj2)*(cj3)))+(((-0.00428339551346361)*(cj2)*(sj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal evalcond[3];
evalcond[0]=((IKfmod(((-1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((0.800000000000000)*(j0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[2]=((((0.0415698169996759)*(cj1)*(py)*(sj3)))+(((-0.0415698169996759)*(cj3)*(py)*(sj1)))+(((-0.0415698169996759)*(px)*(sj1)*(sj3)))+(((-0.999135601564979)*(cj3)*(px)*(sj1)))+(((-0.0999135601564980)*(sj3)))+(((0.999135601564979)*(cj1)*(cj3)*(py)))+(((-0.0415698169996759)*(cj1)*(cj3)*(px)))+(((0.00415698169996759)*(cj3)))+(((0.999135601564979)*(py)*(sj1)*(sj3)))+(((0.999135601564979)*(cj1)*(px)*(sj3))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4eval[1];
j4eval[0]=((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=((((-0.0133439112568960)*(sj3)))+(((-0.320722528102358)*(cj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=((((0.0133439112568960)*(cj3)*(sj1)))+(((-0.320722528102358)*(sj1)*(sj3)))+(((-0.0133439112568960)*(cj1)*(sj3)))+(((-0.320722528102358)*(cj1)*(cj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal evalcond[3];
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.61237812556574)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((0.800000000000000)*(j0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[2]=((-0.100000000000000)+(((-6.93889390390723e-18)*(cj1)*(py)))+(((6.93889390390723e-18)*(px)*(sj1)))+(((cj1)*(px)))+(((py)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(py)))+(((-3.11526479750779)*(px)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-4.75397077915553)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((0.800000000000000)*(j0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[2]=((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))+(((-3.26128013483640e-16)*(px)*(sj1)))+(((3.26128013483640e-16)*(cj1)*(py))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(py)))), ((-1.24610591900312)+(((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((0.800000000000000)*(j0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[2]=((-8.67361737988404e-19)+(((6.93889390390723e-18)*(cj1)*(px)))+(((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))+(((6.93889390390723e-18)*(py)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))), ((-1.24610591900312)+(((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-3.18317445236063)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.0669590000000000)+(((-0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((0.800000000000000)*(j0)))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz))));
evalcond[2]=((-5.20417042793042e-18)+(((-1.00000000000000)*(cj1)*(py)))+(((5.55111512312578e-17)*(py)*(sj1)))+(((5.55111512312578e-17)*(cj1)*(px)))+(((px)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))), ((-1.24610591900312)+(((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((IKabs(((((0.0133439112568960)*(cj3)*(sj1)))+(((-0.320722528102358)*(sj1)*(sj3)))+(((-0.0133439112568960)*(cj1)*(sj3)))+(((-0.320722528102358)*(cj1)*(cj3))))) != 0)?((IKReal)1/(((((0.0133439112568960)*(cj3)*(sj1)))+(((-0.320722528102358)*(sj1)*(sj3)))+(((-0.0133439112568960)*(cj1)*(sj3)))+(((-0.320722528102358)*(cj1)*(cj3)))))):(IKReal)1.0e30))*(((((-0.100000000000000)*(cj1)))+(px)))), ((-1.24610591900312)+(((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((((-0.0133439112568960)*(sj3)))+(((-0.320722528102358)*(cj3))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(sj3)))+(((-0.320722528102358)*(cj3)))))):(IKReal)1.0e30))*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))), ((-1.24610591900312)+(((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((-0.800000000000000)*(j0))));
evalcond[2]=((((0.0415698169996759)*(cj1)*(py)*(sj3)))+(((-0.0415698169996759)*(px)*(sj1)*(sj3)))+(((-0.999135601564979)*(cj3)*(px)*(sj1)))+(((0.999135601564979)*(cj1)*(cj3)*(py)))+(((-0.999135601564979)*(py)*(sj1)*(sj3)))+(((0.0999135601564980)*(sj3)))+(((0.0415698169996759)*(cj1)*(cj3)*(px)))+(((-0.999135601564979)*(cj1)*(px)*(sj3)))+(((0.0415698169996759)*(cj3)*(py)*(sj1)))+(((-0.00415698169996759)*(cj3))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4eval[1];
j4eval[0]=((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=((((0.320722528102358)*(cj3)))+(((0.0133439112568960)*(sj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=((((0.320722528102358)*(cj1)*(cj3)))+(((0.0133439112568960)*(cj3)*(sj1)))+(((-0.320722528102358)*(sj1)*(sj3)))+(((0.0133439112568960)*(cj1)*(sj3))));
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal evalcond[3];
evalcond[0]=((IKfmod(((1.52921452802406)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((-0.800000000000000)*(j0))));
evalcond[2]=((-0.100000000000000)+(((9.02056207507940e-17)*(px)*(sj1)))+(((cj1)*(px)))+(((-9.02056207507940e-17)*(cj1)*(py)))+(((py)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(px)*(sj1)))+(((-3.11526479750779)*(cj1)*(py)))), ((-1.24610591900312)+(((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.61237812556574)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((-0.800000000000000)*(j0))));
evalcond[2]=((0.100000000000000)+(((-6.93889390390723e-18)*(cj1)*(py)))+(((6.93889390390723e-18)*(px)*(sj1)))+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(py)))+(((-3.11526479750779)*(px)*(sj1)))), ((-1.24610591900312)+(((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((-0.800000000000000)*(j0))));
evalcond[2]=((8.67361737988404e-19)+(((-1.00000000000000)*(px)*(sj1)))+(((-6.93889390390723e-18)*(py)*(sj1)))+(((-6.93889390390723e-18)*(cj1)*(px)))+(((cj1)*(py))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-0.311526479750779)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))), ((-1.24610591900312)+(((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-3.18317445236063)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(pz)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((-0.800000000000000)*(j0))));
evalcond[2]=((5.20417042793042e-18)+(((-1.00000000000000)*(cj1)*(py)))+(((-5.55111512312578e-17)*(py)*(sj1)))+(((-5.55111512312578e-17)*(cj1)*(px)))+(((px)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((0.311526479750779)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))), ((-1.24610591900312)+(((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((IKabs(((((0.320722528102358)*(cj1)*(cj3)))+(((0.0133439112568960)*(cj3)*(sj1)))+(((-0.320722528102358)*(sj1)*(sj3)))+(((0.0133439112568960)*(cj1)*(sj3))))) != 0)?((IKReal)1/(((((0.320722528102358)*(cj1)*(cj3)))+(((0.0133439112568960)*(cj3)*(sj1)))+(((-0.320722528102358)*(sj1)*(sj3)))+(((0.0133439112568960)*(cj1)*(sj3)))))):(IKReal)1.0e30))*(((((-0.100000000000000)*(cj1)))+(px)))), ((-1.24610591900312)+(((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(((((0.320722528102358)*(cj3)))+(((0.0133439112568960)*(sj3))))) != 0)?((IKReal)1/(((((0.320722528102358)*(cj3)))+(((0.0133439112568960)*(sj3)))))):(IKReal)1.0e30))*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))), ((-1.24610591900312)+(((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-1.24610591900312)+(((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((-0.0415817987708408)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(j0)*(sj2)))+(((-0.0800000000000000)*(cj2)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((0.800000000000000)*(cj2)*(py)*(sj1)))+(((0.800000000000000)*(cj1)*(cj2)*(px))));
evalcond[2]=((((-6.93889390390723e-18)*(cj2)*(j0)))+(((-1.00000000000000)*(px)*(sj1)))+(((6.93889390390723e-18)*(cj2)*(pz)))+(((6.93889390390723e-18)*(cj1)*(px)*(sj2)))+(((cj1)*(py)))+(((6.93889390390723e-18)*(py)*(sj1)*(sj2)))+(((-8.67361737988404e-19)*(sj2))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4eval[1];
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal evalcond[3];
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj1)*(px)))+(((2.00000000000000)*(j0)*(pz)))+(((py)*(sj1))));
evalcond[2]=((((6.93889390390723e-18)*(pz)))+(((-1.00000000000000)*(px)*(sj1)))+(((-6.93889390390723e-18)*(j0)))+(((cj1)*(py))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((-0.600000000000000)*(cj1)*(px)))+(((-0.600000000000000)*(py)*(sj1))));
evalcond[2]=((((-1.00000000000000)*(px)*(sj1)))+(((6.93889390390723e-18)*(j0)))+(((cj1)*(py)))+(((-6.93889390390723e-18)*(pz))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((-3.11526479750779)*(cj2)*(pz)))+(((-3.11526479750779)*(cj1)*(px)*(sj2)))+(((3.11526479750779)*(cj2)*(j0)))+(((-3.11526479750779)*(py)*(sj1)*(sj2)))+(((0.311526479750779)*(sj2)))), ((-9.70487475859124)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((0.0321000000000000)+(((-0.321000000000000)*(cj1)*(px)))+(((0.128400000000000)*(cj2)))+(((-0.321000000000000)*(sj2)*(((((-1.00000000000000)*(cj1)*(px)*(sj2)))+(((-1.00000000000000)*(py)*(sj1)*(sj2)))+(((0.100000000000000)*(sj2)))+(((cj2)*(j0)))+(((-1.00000000000000)*(cj2)*(pz)))))))+(((-0.321000000000000)*(py)*(sj1)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-9.70487475859124)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-0.321000000000000)*(j0)))+(((-0.321000000000000)*(sj2)*(((0.400000000000000)+(((-1.00000000000000)*(cj2)*(py)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(px)))+(((pz)*(sj2)))+(((-1.00000000000000)*(j0)*(sj2)))+(((0.100000000000000)*(cj2)))))))+(((0.128400000000000)*(sj2)))+(((0.321000000000000)*(pz)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))+(((3.11526479750779)*(j0)*(sj2)))+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((-3.11526479750779)*(cj2)*(pz)))+(((-3.11526479750779)*(cj1)*(px)*(sj2)))+(((3.11526479750779)*(cj2)*(j0)))+(((-3.11526479750779)*(py)*(sj1)*(sj2)))+(((0.311526479750779)*(sj2)))), ((9.70487475859124)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((-0.321000000000000)*(cj2)*(((((-1.00000000000000)*(cj1)*(px)*(sj2)))+(((-1.00000000000000)*(py)*(sj1)*(sj2)))+(((0.100000000000000)*(sj2)))+(((cj2)*(j0)))+(((-1.00000000000000)*(cj2)*(pz)))))))+(((0.321000000000000)*(j0)))+(((-0.321000000000000)*(pz)))+(((-0.128400000000000)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-3.18317445236063)+(3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.0669590000000000)+(((0.800000000000000)*(j0)*(sj2)))+(((-0.0800000000000000)*(cj2)))+(((0.200000000000000)*(cj1)*(px)))+(((0.200000000000000)*(py)*(sj1)))+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-0.800000000000000)*(pz)*(sj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((0.800000000000000)*(cj2)*(py)*(sj1)))+(((0.800000000000000)*(cj1)*(cj2)*(px))));
evalcond[2]=((((5.55111512312578e-17)*(cj2)*(pz)))+(((5.55111512312578e-17)*(py)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(py)))+(((5.55111512312578e-17)*(cj1)*(px)*(sj2)))+(((px)*(sj1)))+(((-5.20417042793042e-18)*(sj2)))+(((-5.55111512312578e-17)*(cj2)*(j0))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4eval[1];
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal j4eval[1];
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.000001  )
{
{
IKReal evalcond[3];
evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979)))));
evalcond[1]=((-0.146959000000000)+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((cj1)*(px)))+(((2.00000000000000)*(j0)*(pz)))+(((py)*(sj1))));
evalcond[2]=((((-1.00000000000000)*(cj1)*(py)))+(((px)*(sj1)))+(((-5.55111512312578e-17)*(j0)))+(((5.55111512312578e-17)*(pz))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((-3.11526479750779)*(j0)))+(((3.11526479750779)*(pz)))), ((-1.55763239875389)+(((3.11526479750779)*(cj1)*(px)))+(((3.11526479750779)*(py)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
evalcond[1]=((0.0130410000000000)+(((-1.00000000000000)*((j0)*(j0))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((2.00000000000000)*(j0)*(pz)))+(((-0.600000000000000)*(cj1)*(px)))+(((-0.600000000000000)*(py)*(sj1))));
evalcond[2]=((((-1.00000000000000)*(cj1)*(py)))+(((-5.55111512312578e-17)*(pz)))+(((5.55111512312578e-17)*(j0)))+(((px)*(sj1))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(j0)))+(((-3.11526479750779)*(pz)))), ((-0.934579439252337)+(((-3.11526479750779)*(py)*(sj1)))+(((-3.11526479750779)*(cj1)*(px)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(px)*(sj2)))+(((3.11526479750779)*(cj2)*(pz)))+(((3.11526479750779)*(py)*(sj1)*(sj2)))+(((-0.311526479750779)*(sj2)))+(((-3.11526479750779)*(cj2)*(j0)))), ((-9.70487475859124)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((0.0321000000000000)+(((-0.321000000000000)*(cj1)*(px)))+(((0.128400000000000)*(cj2)))+(((-0.321000000000000)*(sj2)*(((((-1.00000000000000)*(cj1)*(px)*(sj2)))+(((-1.00000000000000)*(py)*(sj1)*(sj2)))+(((0.100000000000000)*(sj2)))+(((cj2)*(j0)))+(((-1.00000000000000)*(cj2)*(pz)))))))+(((-0.321000000000000)*(py)*(sj1)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((9.70487475859124)*(((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-0.321000000000000)*(j0)))+(((-0.321000000000000)*(sj2)*(((0.400000000000000)+(((-1.00000000000000)*(cj2)*(py)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(px)))+(((pz)*(sj2)))+(((-1.00000000000000)*(j0)*(sj2)))+(((0.100000000000000)*(cj2)))))))+(((0.128400000000000)*(sj2)))+(((0.321000000000000)*(pz)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))+(((3.11526479750779)*(j0)*(sj2)))+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((3.11526479750779)*(cj1)*(px)*(sj2)))+(((3.11526479750779)*(cj2)*(pz)))+(((3.11526479750779)*(py)*(sj1)*(sj2)))+(((-0.311526479750779)*(sj2)))+(((-3.11526479750779)*(cj2)*(j0)))), ((-9.70487475859124)*(((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((0.321000000000000)*(cj2)*(((((-1.00000000000000)*(cj1)*(px)*(sj2)))+(((-1.00000000000000)*(py)*(sj1)*(sj2)))+(((0.100000000000000)*(sj2)))+(((cj2)*(j0)))+(((-1.00000000000000)*(cj2)*(pz)))))))+(((-0.321000000000000)*(j0)))+(((0.128400000000000)*(sj2)))+(((0.321000000000000)*(pz)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((IKabs(((((-0.102951931520857)*(cj2)*(cj3)))+(((-0.00428339551346361)*(cj2)*(sj3))))) != 0)?((IKReal)1/(((((-0.102951931520857)*(cj2)*(cj3)))+(((-0.00428339551346361)*(cj2)*(sj3)))))):(IKReal)1.0e30))*(((((0.128400000000000)*(sj2)))+(((0.321000000000000)*(pz)))+(((-0.321000000000000)*(j0)))+(((-0.321000000000000)*(sj2)*(((0.400000000000000)+(((0.100000000000000)*(cj2)))+(((-1.00000000000000)*(cj2)*(py)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(px)))+(((pz)*(sj2)))+(((-1.00000000000000)*(j0)*(sj2)))))))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))+(((3.11526479750779)*(j0)*(sj2)))+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((j0)*(j0))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(py)*(sj1)))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(cj1)*(px)))+(((-7.78816199376947)*(j0)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-1.24610591900312)+(((3.11526479750779)*(cj1)*(cj2)*(px)))+(((-0.311526479750779)*(cj2)))+(((3.11526479750779)*(j0)*(sj2)))+(((3.11526479750779)*(cj2)*(py)*(sj1)))+(((-3.11526479750779)*(pz)*(sj2)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((((IKabs(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3))))) != 0)?((IKReal)1/(((((-0.0133439112568960)*(cj3)))+(((0.320722528102358)*(sj3)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(px)*(sj1)))+(((cj1)*(py)))))), ((-0.985362149532710)+(((3.89408099688473)*((py)*(py))))+(((3.89408099688473)*((j0)*(j0))))+(((3.89408099688473)*((pz)*(pz))))+(((-0.778816199376947)*(py)*(sj1)))+(((3.89408099688473)*((px)*(px))))+(((-0.778816199376947)*(cj1)*(px)))+(((-7.78816199376947)*(j0)*(pz)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j2eval[1];
IKReal x473=(sj4)*(sj4);
j2eval[0]=((0.160000000000000)+(((0.00855938590617039)*(cj3)*(sj3)*(x473)))+(((0.103041000000000)*((cj4)*(cj4))))+(((0.000178059967631915)*(x473)*((sj3)*(sj3))))+(((0.256800000000000)*(cj4)))+(((0.102862940032368)*(x473)*((cj3)*(cj3)))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((0.0400000000000000)+(((-0.320722528102358)*(cj3)*(pz)*(sj4)))+(((0.0321000000000000)*(cj4)))+(((-0.321000000000000)*(cj4)*(py)*(sj1)))+(((-0.400000000000000)*(cj1)*(px)))+(((-0.0133439112568960)*(pz)*(sj3)*(sj4)))+(((-0.321000000000000)*(cj1)*(cj4)*(px)))+(((0.0133439112568960)*(j0)*(sj3)*(sj4)))+(((0.320722528102358)*(cj3)*(j0)*(sj4)))+(((-0.400000000000000)*(py)*(sj1))));
if( IKabs(j2eval[0]) < 0.000001  )
{
{
IKReal j2eval[1];
j2eval[0]=((((0.321000000000000)*(cj4)*(pz)))+(((0.0320722528102358)*(cj3)*(sj4)))+(((-0.320722528102358)*(cj1)*(cj3)*(px)*(sj4)))+(((-0.400000000000000)*(j0)))+(((-0.0133439112568960)*(py)*(sj1)*(sj3)*(sj4)))+(((-0.321000000000000)*(cj4)*(j0)))+(((-0.0133439112568960)*(cj1)*(px)*(sj3)*(sj4)))+(((0.400000000000000)*(pz)))+(((-0.320722528102358)*(cj3)*(py)*(sj1)*(sj4)))+(((0.00133439112568960)*(sj3)*(sj4))));
if( IKabs(j2eval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x474=((0.320722528102358)*(cj3)*(sj4));
IKReal x475=((0.0133439112568960)*(sj3)*(sj4));
IKReal x476=((x474)+(x475));
IKReal x477=((-1.00000000000000)*(x476));
IKReal x478=((((-1.00000000000000)*(pz)))+(j0));
IKReal x479=((0.321000000000000)*(cj4)*(pz));
IKReal x480=((0.0320722528102358)*(cj3)*(sj4));
IKReal x481=((0.400000000000000)*(pz));
IKReal x482=((0.00133439112568960)*(sj3)*(sj4));
IKReal x483=((x481)+(x480)+(x482)+(x479));
IKReal x484=((py)*(sj1)*(x475));
IKReal x485=((1.00000000000000)*(py)*(sj1)*(x474));
IKReal x486=((0.321000000000000)*(cj4)*(j0));
IKReal x487=((cj1)*(px)*(x475));
IKReal x488=((0.400000000000000)*(j0));
IKReal x489=((1.00000000000000)*(cj1)*(px)*(x474));
IKReal x490=((x489)+(x488)+(x485)+(x484)+(x487)+(x486));
IKReal x491=((((-1.00000000000000)*(x490)))+(x483));
IKReal x492=((IKabs(x491) != 0)?((IKReal)1/(x491)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x492)*((((x477)*(x477))+(((-1.00000000000000)*((x478)*(x478))))))), ((x492)*(((((x477)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))))+(((x478)*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x493=((pz)+(((-1.00000000000000)*(j0))));
IKReal x494=((0.0321000000000000)*(cj4));
IKReal x495=((0.0133439112568960)*(j0)*(sj3)*(sj4));
IKReal x496=((0.320722528102358)*(cj3)*(j0)*(sj4));
IKReal x497=((0.0400000000000000)+(x496)+(x494)+(x495));
IKReal x498=((0.400000000000000)*(cj1)*(px));
IKReal x499=((0.400000000000000)*(py)*(sj1));
IKReal x500=((0.321000000000000)*(cj1)*(cj4)*(px));
IKReal x501=((0.0133439112568960)*(pz)*(sj3)*(sj4));
IKReal x502=((0.321000000000000)*(cj4)*(py)*(sj1));
IKReal x503=((0.320722528102358)*(cj3)*(pz)*(sj4));
IKReal x504=((x498)+(x499)+(x500)+(x501)+(x502)+(x503));
IKReal x505=((((-1.00000000000000)*(x504)))+(x497));
IKReal x506=((IKabs(x505) != 0)?((IKReal)1/(x505)):(IKReal)1.0e30);
j2array[0]=IKatan2(((x506)*(((((-1.00000000000000)*(((0.400000000000000)+(((0.321000000000000)*(cj4)))))*(((((-0.0133439112568960)*(sj3)*(sj4)))+(((-0.320722528102358)*(cj3)*(sj4)))))))+(((-1.00000000000000)*(x493)*(((0.100000000000000)+(((-1.00000000000000)*(cj1)*(px)))+(((-1.00000000000000)*(py)*(sj1)))))))))), ((x506)*((((x493)*(x493))+(((-1.00000000000000)*((((0.400000000000000)+(((0.321000000000000)*(cj4)))))*(((0.400000000000000)+(((0.321000000000000)*(cj4))))))))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
IKReal x507=(sj4)*(sj4);
IKReal x508=x2;
IKReal x509=((0.000178059967631915)*(x507)*(x508));
IKReal x510=((0.00855938590617039)*(cj3)*(sj3)*(x507));
IKReal x511=x3;
IKReal x512=((0.102862940032368)*(x507)*(x511));
IKReal x513=(cj4)*(cj4);
IKReal x514=((0.103041000000000)*(x513));
IKReal x515=((0.256800000000000)*(cj4));
IKReal x516=((0.160000000000000)+(x509)+(x515)+(x514)+(x512)+(x510));
IKReal x517=((IKabs(x516) != 0)?((IKReal)1/(x516)):(IKReal)1.0e30);
IKReal x518=((((-1.00000000000000)*(pz)))+(j0));
IKReal x519=((0.320722528102358)*(cj3)*(sj4));
IKReal x520=((0.0133439112568960)*(sj3)*(sj4));
IKReal x521=((x520)+(x519));
IKReal x522=((-1.00000000000000)*(x521));
IKReal x523=((0.321000000000000)*(cj4));
IKReal x524=((0.400000000000000)+(x523));
IKReal x525=((cj1)*(px));
IKReal x526=((py)*(sj1));
IKReal x527=((x526)+(x525));
IKReal x528=((0.100000000000000)+(((-1.00000000000000)*(x527))));
j2array[0]=IKatan2(((-1.00000000000000)*(x517)*(((((x522)*(x528)))+(((-1.00000000000000)*(x518)*(x524)))))), ((-1.00000000000000)*(x517)*(((((x518)*(x522)))+(((x524)*(x528)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
    j2array[0]-=IK2PI;
else if( j2array[0] < -IKPI )
    j2array[0]+=IK2PI;
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
    }

} else
{
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
IKReal x34=((cj1)*(cj2)*(cj4));
IKReal x35=((0.0415698169996759)*(cj3)*(sj1)*(sj4));
IKReal x36=((x35)+(x34));
IKReal x37=((0.0415698169996759)*(cj1)*(sj2)*(sj3)*(sj4));
IKReal x38=((0.999135601564979)*(sj1)*(sj3)*(sj4));
IKReal x39=((0.999135601564979)*(cj1)*(cj3)*(sj2)*(sj4));
IKReal x40=((x39)+(x38)+(x37));
IKReal x41=((((-1.00000000000000)*(x40)))+(x36));
IKReal x42=((0.999135601564979)*(cj2)*(cj3)*(sj4));
IKReal x43=((cj4)*(sj2));
IKReal x44=((0.0415698169996759)*(cj2)*(sj3)*(sj4));
IKReal x45=((x44)+(x42)+(x43));
IKReal x46=((-1.00000000000000)*(x45));
IKReal x47=((cj2)*(cj4)*(sj1));
IKReal x48=((0.999135601564979)*(cj1)*(sj3)*(sj4));
IKReal x49=((x48)+(x47));
IKReal x50=((0.999135601564979)*(cj3)*(sj1)*(sj2)*(sj4));
IKReal x51=((0.0415698169996759)*(sj1)*(sj2)*(sj3)*(sj4));
IKReal x52=((0.0415698169996759)*(cj1)*(cj3)*(sj4));
IKReal x53=((x51)+(x50)+(x52));
IKReal x54=((x49)+(((-1.00000000000000)*(x53))));
IKReal x55=((0.999135601564979)*(cj1)*(sj2)*(sj3));
IKReal x56=((0.999135601564979)*(cj3)*(sj1));
IKReal x57=((0.0415698169996759)*(sj1)*(sj3));
IKReal x58=((0.0415698169996759)*(cj1)*(cj3)*(sj2));
IKReal x59=((x58)+(x57)+(x56));
IKReal x60=((x55)+(((-1.00000000000000)*(x59))));
IKReal x61=((0.0415698169996759)*(cj1)*(sj3));
IKReal x62=((0.999135601564979)*(sj1)*(sj2)*(sj3));
IKReal x63=((0.999135601564979)*(cj1)*(cj3));
IKReal x64=((x61)+(x62)+(x63));
IKReal x65=((0.0415698169996759)*(cj3)*(sj1)*(sj2));
IKReal x66=((x64)+(((-1.00000000000000)*(x65))));
IKReal x67=((0.999135601564979)*(cj2)*(sj3));
IKReal x68=((0.0415698169996759)*(cj2)*(cj3));
IKReal x69=((x67)+(((-1.00000000000000)*(x68))));
IKReal x70=((x43)*(x57));
IKReal x71=((0.0415698169996759)*(cj1)*(cj3)*(cj4));
IKReal x72=((cj2)*(sj1)*(sj4));
IKReal x73=((x43)*(x56));
IKReal x74=((x73)+(x72)+(x71)+(x70));
IKReal x75=((0.999135601564979)*(cj1)*(cj4)*(sj3));
IKReal x76=((((-1.00000000000000)*(x75)))+(x74));
IKReal x77=((0.0415698169996759)*(cj2)*(cj4)*(sj3));
IKReal x78=((0.999135601564979)*(cj2)*(cj3)*(cj4));
IKReal x79=((x77)+(x78));
IKReal x80=((sj2)*(sj4));
IKReal x81=((x79)+(((-1.00000000000000)*(x80))));
IKReal x82=((cj1)*(cj2)*(sj4));
IKReal x83=((x43)*(x63));
IKReal x84=((0.999135601564979)*(cj4)*(sj1)*(sj3));
IKReal x85=((x43)*(x61));
IKReal x86=((x82)+(x83)+(x84)+(x85));
IKReal x87=((0.0415698169996759)*(cj3)*(cj4)*(sj1));
IKReal x88=((x86)+(((-1.00000000000000)*(x87))));
new_r00=((((r20)*(x46)))+(((r10)*(x54)))+(((r00)*(x41))));
new_r01=((((r11)*(x54)))+(((r01)*(x41)))+(((r21)*(x46))));
new_r02=((((r22)*(x46)))+(((r02)*(x41)))+(((r12)*(x54))));
new_r10=((((r10)*(x66)))+(((r20)*(x69)))+(((r00)*(x60))));
new_r11=((((r11)*(x66)))+(((r01)*(x60)))+(((r21)*(x69))));
new_r12=((((r22)*(x69)))+(((r02)*(x60)))+(((r12)*(x66))));
new_r20=((((r10)*(x76)))+(((r00)*(x88)))+(((r20)*(x81))));
new_r21=((((r21)*(x81)))+(((r11)*(x76)))+(((r01)*(x88))));
new_r22=((((r22)*(x81)))+(((r02)*(x88)))+(((r12)*(x76))));
{
IKReal j6eval;
j6eval=new_r00;
if( j6eval >= -1.000010 && j6eval <= -0.999990 )
{
{
j6 = 3.141593; sj6 = 0.000000; cj6 = -1.000000;
IKReal j5mul = 1;
j5=0;
IKReal j7mul=1.00000000000000;
j7=((-1.00000000000000)*(IKatan2(new_r12, new_r11)));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[5].fmul = j5mul;
solution.basesol[5].freeind = 0;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.basesol[7].fmul = j7mul;
solution.basesol[7].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 5;
}

} else
if( j6eval >= 0.999990 && j6eval <= 1.000010 )
{
{
j6 = 0.000000; sj6 = 0.000000; cj6 = 1.000000;
IKReal j5mul = 1;
j5=0;
IKReal j7mul=-1.00000000000000;
j7=((((-1.00000000000000)*(IKatan2(new_r21, ((-1.00000000000000)*(new_r22))))))+(((-1.00000000000000)*(3.14159265358979))));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[5].fmul = j5mul;
solution.basesol[5].freeind = 0;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.basesol[7].fmul = j7mul;
solution.basesol[7].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 5;
}

} else
{
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
j5array[0]=IKatan2(new_r10, ((-1.00000000000000)*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1] = j5array[0] > 0 ? j5array[0]-IKPI : j5array[0]+IKPI;
sj5array[1] = -sj5array[0];
cj5array[1] = -cj5array[0];
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
if( j5array[1] > IKPI )
    j5array[1]-=IK2PI;
else if( j5array[1] < -IKPI )
    j5array[1]+=IK2PI;
j5valid[1] = true;
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
    j5valid[1]=false;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j5);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
IKReal x89=IKcos(j5);
IKReal x90=((IKabs(x89) != 0)?((IKReal)1/(x89)):(IKReal)1.0e30);
j7array[0]=IKatan2(((-1.00000000000000)*(new_r12)*(x90)), ((new_r11)*(x90)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
    j7array[0]-=IK2PI;
else if( j7array[0] < -IKPI )
    j7array[0]+=IK2PI;
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] ) { continue; }
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(((IKabs(IKcos(j5)) != 0)?((IKReal)1/(IKcos(j5))):(IKReal)1.0e30))), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((new_r10)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j6);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
IKReal x91=IKcos(j6);
IKReal x92=((IKabs(x91) != 0)?((IKReal)1/(x91)):(IKReal)1.0e30);
IKReal x93=IKcos(j5);
IKReal x94=IKsin(j5);
j7array[0]=IKatan2(((((new_r21)*(x92)*(x93)))+(((-1.00000000000000)*(new_r11)*(x92)*(x94)))), ((((new_r21)*(x94)))+(((new_r11)*(x93)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
    j7array[0]-=IK2PI;
else if( j7array[0] < -IKPI )
    j7array[0]+=IK2PI;
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] ) { continue; }
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
{
IKReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
IKReal x95=IKsin(j6);
IKReal x96=((IKabs(x95) != 0)?((IKReal)1/(x95)):(IKReal)1.0e30);
j7array[0]=IKatan2(((new_r01)*(x96)), ((new_r02)*(x96)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
    j7array[0]-=IK2PI;
else if( j7array[0] < -IKPI )
    j7array[0]+=IK2PI;
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] ) { continue; }
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(8);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.basesol[7].foffset = j7;
solution.vfree.resize(0);
}
}

} else
{
}
}
}
}
}

} else
{
}
}
}
}
}

}
}
}/// Durand-Kerner polynomial root finding method
static void polyroots3(IKReal rawcoeffs[3+1], IKReal rawroots[3], int& numroots)
{
    using std::complex;
    assert(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    complex<IKReal> coeffs[3];
    const int maxsteps = 50;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[3];
    IKReal err[3];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < 3; ++i) {
        if( IKabs(imag(roots[i])) < std::numeric_limits<IKReal>::epsilon() ) {
            rawroots[numroots++] = real(roots[i]);
        }
    }
}
static void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = 0.5*(-rawcoeffs[1]+det)/rawcoeffs[0];
        rawroots[1] = 0.5*(-rawcoeffs[1]-det)/rawcoeffs[0];
        numroots = 2;
    }
}
/// intersection of a conic and the unit circle
static void conicsolver(IKReal _C0[6], IKReal roots[4], int& numroots)
{
    // have to normalize _C0
    IKReal maxval = IKabs(_C0[0]);
    for(int i = 1; i < 6; ++i) {
        if( maxval < IKabs(_C0[i]) ) {
            maxval = IKabs(_C0[i]);
        }
    }
    IKReal C0[6];
    for(int i = 0; i < 6; ++i) {
        C0[i]=_C0[i]/maxval;
    }
    IKReal rawcoeffs[4] = {-1,
                           C0[5] - C0[0] - C0[3],
                           C0[0]*C0[5] + C0[3]*C0[5] - C0[0]*C0[3] + C0[1]*C0[1] - C0[2]*C0[2] - C0[4]*C0[4],
                           C0[0]*C0[3]*C0[5] + 2*C0[1]*C0[2]*C0[4] - C0[0]*C0[4]*C0[4] - C0[3]*C0[2]*C0[2] - C0[5]*C0[1]*C0[1]};
    IKReal proots[3];
    int numproots, numyroots;
    polyroots3(rawcoeffs,proots,numproots);
    numroots = 0;
    int iroot=0;
    IKReal a, b, c, d, e, f;
    a = C0[0]+proots[iroot]; b = C0[1]; c = C0[3]+proots[iroot]; d = C0[2]; e = C0[4]; f = C0[5]-proots[iroot];
    IKReal adjugate[9] = {c*f-e*e, -b*f+e*d, b*e-c*d, -b*f+d*e, a*f-d*d, -a*e+b*d, b*e-d*c, -a*e+d*b, a*c-b*b};
    // find the greatest absolute value of adjugate and take that column
    int maxindex = 0;
    IKReal val = IKabs(adjugate[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(adjugate[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    maxindex = maxindex%3;
    if( adjugate[0] > 0 || adjugate[4] > 0 || adjugate[8] > 0 || adjugate[4*maxindex] >= 0 ) {
        // according to the structure of the matrix, should be always negative if a solution exists...
        return;
    }
    IKReal bmult = 1.0/IKsqrt(-adjugate[4*maxindex]);
    IKReal p[3] = {adjugate[maxindex]*bmult, adjugate[3+maxindex]*bmult, adjugate[6+maxindex]*bmult}; // intersection point
    // C = C0 - [p_x] = 2gh^t, C is rank1
    IKReal C[9] = {a,b+p[2],d-p[1],b-p[2],c,e+p[0],d+p[1],e-p[0],f};
    maxindex = 0;
    val = IKabs(C[maxindex]);
    for(int i = 1; i < 9; ++i) {
        IKReal newval = IKabs(C[i]);
        if( val < newval ) {
            val = newval;
            maxindex = i;
        }
    }
    int row = maxindex/3;
    int col = maxindex%3;
    IKReal lineequation[3], coeffs[3], yintersections[2];
    for(int i = 0; i < 2; ++i) {
        if( i == 0 ) {
            lineequation[0] = C[3*row];
            lineequation[1] = C[3*row+1];
            lineequation[2] = C[3*row+2];
        }
        else {
            lineequation[0] = C[col];
            lineequation[1] = C[3+col];
            lineequation[2] = C[6+col];
        }

        if( IKabs(lineequation[0]) < std::numeric_limits<IKReal>::epsilon() ) {
            yintersections[0] = -lineequation[2]/lineequation[1];
            IKReal x = 1-yintersections[0]*yintersections[0];
            if( x <= 0 && x > -std::numeric_limits<IKReal>::epsilon() ) {
                roots[numroots++] = yintersections[0] > 0 ? IKPI_2 : -IKPI_2;
            }
            else {
                x = IKsqrt(x);
                roots[numroots++] = IKatan2(yintersections[0], x);
                roots[numroots] = IKPI - roots[numroots-1]; numroots++;
            }
        }
        else {
            coeffs[0] = lineequation[0]*lineequation[0]+lineequation[1]*lineequation[1];
            coeffs[1] = 2*lineequation[1]*lineequation[2];
            coeffs[2] = lineequation[2]*lineequation[2]-lineequation[0]*lineequation[0];
            polyroots2(coeffs,yintersections,numyroots);
            for(int j = 0; j < numyroots; ++j) {
                roots[numroots++] = IKatan2(yintersections[j],-(lineequation[1]*yintersections[j]+lineequation[2])/lineequation[0]);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "63aa5661bbae9c2637e1f44660108a4f"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
