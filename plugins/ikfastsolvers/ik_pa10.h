/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-10-19 01:52:10.303680
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80;
    x0=IKcos(j[6]);
    x1=IKcos(j[3]);
    x2=IKcos(j[4]);
    x3=IKcos(j[5]);
    x4=((x0)*(x2)*(x3));
    x5=IKsin(j[4]);
    x6=IKsin(j[6]);
    x7=((x5)*(x6));
    x8=IKsin(j[3]);
    x9=IKsin(j[5]);
    x10=IKsin(j[2]);
    x11=((x7)+(((-1.00000000000000)*(x4))));
    x12=((x0)*(x8)*(x9));
    x13=IKcos(j[2]);
    x14=((x0)*(x3)*(x5));
    x15=((x2)*(x6));
    x16=((x15)+(x14));
    x17=((-1.00000000000000)*(x16));
    x18=IKsin(j[0]);
    x19=IKcos(j[0]);
    x20=((x15)*(x3));
    x21=((x0)*(x5));
    x22=((x20)+(x21));
    x23=IKsin(j[1]);
    x24=IKcos(j[1]);
    x25=((x6)*(x8)*(x9));
    x26=((x3)*(x7));
    x27=((x0)*(x2));
    x28=((((-1.00000000000000)*(x27)))+(x26));
    x29=((x1)*(x2)*(x9));
    x30=((x3)*(x8));
    x31=((x30)+(x29));
    x32=((-1.00000000000000)*(x31));
    x33=((x10)*(x32));
    x34=((x13)*(x5)*(x9));
    x35=((((-1.00000000000000)*(x34)))+(x33));
    x36=((x1)*(x3));
    x37=((x2)*(x8)*(x9));
    x38=((((-1.00000000000000)*(x37)))+(x36));
    x39=((x23)*(x38));
    x40=((x13)*(x31));
    x41=((x10)*(x5)*(x9));
    x42=((((-1.00000000000000)*(x41)))+(x40));
    x43=((x24)*(x42));
    x44=((x39)+(x43));
    x45=((x11)*(x8));
    x46=((x4)+(((-1.00000000000000)*(x7))));
    x47=((x1)*(x46));
    x48=((((-1.00000000000000)*(x12)))+(x47));
    x49=((x13)*(x48));
    x50=((x10)*(x17));
    x51=((x49)+(x50));
    x52=((x24)*(x51));
    x53=((x1)*(x6)*(x9));
    x54=((x22)*(x8));
    x55=((x54)+(x53));
    x56=((x23)*(x55));
    x57=((-1.00000000000000)*(x22));
    x58=((x1)*(x57));
    x59=((x58)+(x25));
    x60=((x13)*(x59));
    x61=((x10)*(x28));
    x62=((x60)+(x61));
    x63=((x24)*(x62));
    x64=((x56)+(x63));
    x65=((x10)*(x31));
    x66=((x34)+(x65));
    x67=((0.500000000000000)*(x13)*(x24)*(x8));
    x68=((0.500000000000000)*(x1));
    x69=((0.450000000000728)+(x68));
    x70=((x23)*(x69));
    x71=((x70)+(x67));
    x72=((x1)*(x11));
    x73=((x72)+(x12));
    x74=((-1.00000000000000)*(x0)*(x1)*(x9));
    x75=((x74)+(x45));
    x76=((((-1.00000000000000)*(x26)))+(x27));
    x77=((x1)*(x22));
    x78=((((-1.00000000000000)*(x25)))+(x77));
    x79=((x13)*(x32));
    x80=((x79)+(x41));
    eerot[0]=((((x19)*(((((x23)*(x75)))+(x52)))))+(((x18)*(((((x10)*(x73)))+(((x13)*(x17))))))));
    eerot[1]=((((x18)*(((((x10)*(x78)))+(((x13)*(x28)))))))+(((x19)*(x64))));
    eerot[2]=((((x19)*(x44)))+(((x18)*(x35))));
    eetrans[0]=((((x19)*(x71)))+(((-0.500000000000000)*(x10)*(x18)*(x8)))+(((0.0850000000000000)*(x19)*(x44)))+(((0.0850000000000000)*(x18)*(x35))));
    eerot[3]=((((x18)*(((((x23)*(((((-1.00000000000000)*(x0)*(x1)*(x9)))+(x45)))))+(x52)))))+(((x19)*(((((x10)*(x48)))+(((x13)*(x16))))))));
    eerot[4]=((((x19)*(((((x10)*(x59)))+(((x13)*(x76)))))))+(((x18)*(x64))));
    eerot[5]=((((x18)*(x44)))+(((x19)*(x66))));
    eetrans[1]=((((x18)*(x71)))+(((0.0850000000000000)*(x19)*(x66)))+(((0.500000000000000)*(x10)*(x19)*(x8)))+(((0.0850000000000000)*(x18)*(x44))));
    eerot[6]=((((x23)*(((((x13)*(x73)))+(((x10)*(x16)))))))+(((x24)*(x75))));
    eerot[7]=((((x24)*(x55)))+(((x23)*(((((x10)*(x76)))+(((x13)*(x78))))))));
    eerot[8]=((((x23)*(x80)))+(((x24)*(x38))));
    eetrans[2]=((0.315000000000000)+(((0.0850000000000000)*(x24)*(x38)))+(((x24)*(x69)))+(((0.0850000000000000)*(x23)*(x80)))+(((-0.500000000000000)*(x13)*(x23)*(x8))));
    }

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
    vsolutions.resize(0); vsolutions.reserve(8);
    r00 = eerot[0*3+0];
    r01 = eerot[0*3+1];
    r02 = eerot[0*3+2];
    r10 = eerot[1*3+0];
    r11 = eerot[1*3+1];
    r12 = eerot[1*3+2];
    r20 = eerot[2*3+0];
    r21 = eerot[2*3+1];
    r22 = eerot[2*3+2];
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_r00=r00;
    new_r01=r01;
    new_r02=r02;
    new_px=((px)+(((-0.0850000000000000)*(r02))));
    new_r10=r10;
    new_r11=r11;
    new_r12=r12;
    new_py=((py)+(((-0.0850000000000000)*(r12))));
    new_r20=r20;
    new_r21=r21;
    new_r22=r22;
    new_pz=((-0.315000000000000)+(((-0.0850000000000000)*(r22)))+(pz));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.00555555555911)+(((2.22222222221899)*((pz)*(pz))))+(((2.22222222221899)*((px)*(px))))+(((2.22222222221899)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 )
        {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) )
        {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3)
        {
        if( !j3valid[ij3] ) { continue; }
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            if( ((((px)*(px))+((py)*(py)))) < (IKReal)-0.00001 )
                continue;
            j0eval[0]=IKabs(IKsqrt((((px)*(px))+((py)*(py)))));
            if( IKabs(j0eval[0]) < 0.000001  )
            {
                {
                    if( 1 )
                    {
                    {
                        IKReal j1eval[1];
                        if( (((((0.250000000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+((((0.450000000000728)+(((0.500000000000000)*(cj3)))))*(((0.450000000000728)+(((0.500000000000000)*(cj3)))))))) < (IKReal)-0.00001 )
                            continue;
                        j1eval[0]=IKabs(IKsqrt(((((0.250000000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+((((0.450000000000728)+(((0.500000000000000)*(cj3)))))*(((0.450000000000728)+(((0.500000000000000)*(cj3)))))))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                continue;
                                
                            } else
                            {
                            }
                            }
                            
                        } else
                        {
                            {
                            IKReal j1array[2], cj1array[2], sj1array[2];
                            bool j1valid[2]={false};
                            IKReal x0=((0.500000000000000)*(cj3));
                            IKReal x1=((0.450000000000728)+(x0));
                            IKReal x2=(cj2)*(cj2);
                            IKReal x3=(sj3)*(sj3);
                            IKReal x4=((0.250000000000000)*(x2)*(x3));
                            IKReal x5=(x1)*(x1);
                            IKReal x6=((x5)+(x4));
                            if( (x6) < (IKReal)-0.00001 )
                                continue;
                            IKReal x7=IKsqrt(x6);
                            IKReal x8=IKabs(x7);
                            IKReal x9=((IKabs(x8) != 0)?((IKReal)1/(x8)):(IKReal)1.0e30);
                            IKReal x10=((pz)*(x9));
                            if( (x10) < -1.0001 || (x10) > 1.0001 )
                                continue;
                            IKReal x11=IKasin(x10);
                            IKReal x12=((-0.500000000000000)*(cj2)*(sj3));
                            IKReal x13=IKatan2(x1, x12);
                            j1array[0]=((((-1.00000000000000)*(x13)))+(x11));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x13)))+(((-1.00000000000000)*(x11))));
                            sj1array[1]=IKsin(j1array[1]);
                            cj1array[1]=IKcos(j1array[1]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            if( j1array[1] > IKPI )
                                j1array[1]-=IK2PI;
                            else if( j1array[1] < -IKPI )
                                j1array[1]+=IK2PI;
                            j1valid[1] = true;
                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                j1valid[1]=false;
                            for(int ij1 = 0; ij1 < 2; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            {
                                IKReal j0eval[1];
                                j0eval[0]=((((-1.00000000000000)*(cj1)*((py)*(py))))+(((-1.00000000000000)*(cj1)*((px)*(px)))));
                                if( IKabs(j0eval[0]) < 0.000001  )
                                {
                                    {
                                    IKReal evalcond[4];
                                        IKReal x14=((0.500000000000000)*(cj2)*(sj3));
                                        IKReal x15=((pz)+(x14));
                                        evalcond[0]=IKfmod(((-1.57079632679490)+(j1)), ((2.00000000000000)*(3.14159265358979)));
                                        evalcond[1]=((0.452499999999418)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.450000000000728)*(cj3))));
                                        evalcond[2]=((-1.00000000000000)*(x15));
                                        evalcond[3]=x15;
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=((((cj2)*((py)*(py))))+(((cj2)*((px)*(px)))));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[4];
                                                    evalcond[0]=IKfmod(((-1.57079632679490)+(j2)), ((2.00000000000000)*(3.14159265358979)));
                                                    evalcond[1]=((0.452499999999418)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.450000000000728)*(cj3))));
                                                    evalcond[2]=((-1.00000000000000)*(pz));
                                                    evalcond[3]=pz;
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((px)*(((0.450000000000728)+(((0.500000000000000)*(cj3)))))))+(((-0.500000000000000)*(py)*(sj3))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((py)*(((0.450000000000728)+(((0.500000000000000)*(cj3)))))))+(((0.500000000000000)*(px)*(sj3))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                            
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                        
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x16=x0;
                                                                        IKReal x17=((0.450000000000728)+(x16));
                                                                        IKReal x18=((py)*(x17));
                                                                        IKReal x19=((0.500000000000000)*(px)*(sj3));
                                                                        IKReal x20=((x19)+(x18));
                                                                        IKReal x21=((IKabs(x20) != 0)?((IKReal)1/(x20)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x21)*((((py)*(py))+(((-0.250000000000000)*((sj3)*(sj3))))))), ((x21)*(((((0.500000000000000)*(sj3)*(x17)))+(((px)*(py)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                }
                                                                
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x61=x0;
                                                            IKReal x62=((0.450000000000728)+(x61));
                                                            IKReal x63=((px)*(x62));
                                                            IKReal x64=((0.500000000000000)*(py)*(sj3));
                                                            IKReal x65=((x63)+(((-1.00000000000000)*(x64))));
                                                            IKReal x66=((IKabs(x65) != 0)?((IKReal)1/(x65)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((x66)*(((((-0.500000000000000)*(sj3)*(x62)))+(((px)*(py)))))), ((x66)*((((px)*(px))+(((-0.250000000000000)*((sj3)*(sj3))))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                } else
                                                {
                                                    evalcond[0]=IKfmod(((1.57079632679490)+(j2)), ((2.00000000000000)*(3.14159265358979)));
                                                    evalcond[1]=((0.452499999999418)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.450000000000728)*(cj3))));
                                                    evalcond[2]=((-1.00000000000000)*(pz));
                                                    evalcond[3]=pz;
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((px)*(((0.450000000000728)+(((0.500000000000000)*(cj3)))))))+(((0.500000000000000)*(py)*(sj3))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((-0.500000000000000)*(px)*(sj3)))+(((py)*(((0.450000000000728)+(((0.500000000000000)*(cj3))))))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                            
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                        
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x67=x0;
                                                                        IKReal x68=((0.450000000000728)+(x67));
                                                                        IKReal x69=((py)*(x68));
                                                                        IKReal x70=((0.500000000000000)*(px)*(sj3));
                                                                        IKReal x71=((((-1.00000000000000)*(x70)))+(x69));
                                                                        IKReal x72=((IKabs(x71) != 0)?((IKReal)1/(x71)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x72)*((((py)*(py))+(((-0.250000000000000)*((sj3)*(sj3))))))), ((x72)*(((((-0.500000000000000)*(sj3)*(x68)))+(((px)*(py)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                }
                                                                
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x73=x0;
                                                            IKReal x74=((0.450000000000728)+(x73));
                                                            IKReal x75=((px)*(x74));
                                                            IKReal x76=((0.500000000000000)*(py)*(sj3));
                                                            IKReal x77=((x76)+(x75));
                                                            IKReal x78=((IKabs(x77) != 0)?((IKReal)1/(x77)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((x78)*(((((0.500000000000000)*(sj3)*(x74)))+(((px)*(py)))))), ((x78)*((((px)*(px))+(((-0.250000000000000)*((sj3)*(sj3))))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                continue;
                                                                
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x79=x0;
                                                            IKReal x80=((0.450000000000728)+(x79));
                                                            IKReal x81=(px)*(px);
                                                            IKReal x82=(py)*(py);
                                                            IKReal x83=((x82)+(x81));
                                                            IKReal x84=((-1.00000000000000)*(x83));
                                                            IKReal x85=((IKabs(x84) != 0)?((IKReal)1/(x84)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((x85)*(((((-1.00000000000000)*(py)*(x80)))+(((0.500000000000000)*(px)*(sj2)*(sj3)))))), ((x85)*(((((-1.00000000000000)*(px)*(x80)))+(((-0.500000000000000)*(py)*(sj2)*(sj3)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                                
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x86=(py)*(py);
                                                IKReal x87=((cj2)*(x86));
                                                IKReal x88=(px)*(px);
                                                IKReal x89=((cj2)*(x88));
                                                IKReal x90=((x89)+(x87));
                                                IKReal x91=((IKabs(x90) != 0)?((IKReal)1/(x90)):(IKReal)1.0e30);
                                                IKReal x92=x0;
                                                IKReal x93=((0.450000000000728)+(x92));
                                                j0array[0]=IKatan2(((x91)*(((((px)*(pz)*(sj2)))+(((cj2)*(py)*(x93)))))), ((x91)*(((((cj2)*(px)*(x93)))+(((-1.00000000000000)*(py)*(pz)*(sj2)))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    } else
                                    {
                                        IKReal x94=((0.500000000000000)*(cj2)*(sj3));
                                        IKReal x95=((x94)+(((-1.00000000000000)*(pz))));
                                        evalcond[0]=IKfmod(((1.57079632679490)+(j1)), ((2.00000000000000)*(3.14159265358979)));
                                        evalcond[1]=((0.452499999999418)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.450000000000728)*(cj3))));
                                        evalcond[2]=x95;
                                        evalcond[3]=x95;
                                        if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=(((px)*(px))+((py)*(py)));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                    if( 1 )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((-1.00000000000000)*(cj2)*((py)*(py))))+(((-1.00000000000000)*(cj2)*((px)*(px)))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                            IKReal evalcond[5];
                                                                IKReal x96=((-1.00000000000000)*(pz));
                                                                evalcond[0]=IKfmod(((-1.57079632679490)+(j2)), ((2.00000000000000)*(3.14159265358979)));
                                                                evalcond[1]=((0.452499999999418)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.450000000000728)*(cj3))));
                                                                evalcond[2]=x96;
                                                                evalcond[3]=x96;
                                                                evalcond[4]=pz;
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=(((px)*(px))+((py)*(py)));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            {
                                                                                IKReal j0eval[1];
                                                                                j0eval[0]=((((-0.500000000000000)*(py)*(sj3)))+(((-1.00000000000000)*(px)*(((0.450000000000728)+(((0.500000000000000)*(cj3))))))));
                                                                                if( IKabs(j0eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        continue;
                                                                                        
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                    
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                                                                    bool j0valid[1]={false};
                                                                                    IKReal x97=x0;
                                                                                    IKReal x98=((0.450000000000728)+(x97));
                                                                                    IKReal x99=((px)*(x98));
                                                                                    IKReal x100=((0.500000000000000)*(py)*(sj3));
                                                                                    IKReal x101=((x100)+(x99));
                                                                                    IKReal x102=((-1.00000000000000)*(x101));
                                                                                    IKReal x103=((IKabs(x102) != 0)?((IKReal)1/(x102)):(IKReal)1.0e30);
                                                                                    j0array[0]=IKatan2(((x103)*(((((0.500000000000000)*(sj3)*(x98)))+(((px)*(py)))))), ((x103)*((((px)*(px))+(((-0.250000000000000)*((sj3)*(sj3))))))));
                                                                                    sj0array[0]=IKsin(j0array[0]);
                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                    if( j0array[0] > IKPI )
                                                                                        j0array[0]-=IK2PI;
                                                                                    else if( j0array[0] < -IKPI )
                                                                                        j0array[0]+=IK2PI;
                                                                                    j0valid[0] = true;
                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                    {
                                                                                    if( !j0valid[ij0] ) { continue; }
                                                                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                            }
                                                                            
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                        
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x104=(px)*(px);
                                                                        IKReal x105=(py)*(py);
                                                                        IKReal x106=((x104)+(x105));
                                                                        IKReal x107=((IKabs(x106) != 0)?((IKReal)1/(x106)):(IKReal)1.0e30);
                                                                        IKReal x108=x0;
                                                                        IKReal x109=((0.450000000000728)+(x108));
                                                                        j0array[0]=IKatan2(((x107)*(((((-0.500000000000000)*(px)*(sj3)))+(((-1.00000000000000)*(py)*(x109)))))), ((x107)*(((((-1.00000000000000)*(px)*(x109)))+(((0.500000000000000)*(py)*(sj3)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                }
                                                                
                                                            } else
                                                            {
                                                                IKReal x110=((-1.00000000000000)*(pz));
                                                                evalcond[0]=IKfmod(((1.57079632679490)+(j2)), ((2.00000000000000)*(3.14159265358979)));
                                                                evalcond[1]=((0.452499999999418)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((pz)*(pz))))+(((0.450000000000728)*(cj3))));
                                                                evalcond[2]=x110;
                                                                evalcond[3]=x110;
                                                                evalcond[4]=x110;
                                                                if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=(((px)*(px))+((py)*(py)));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            {
                                                                                IKReal j0eval[1];
                                                                                j0eval[0]=((((0.500000000000000)*(py)*(sj3)))+(((-1.00000000000000)*(px)*(((0.450000000000728)+(((0.500000000000000)*(cj3))))))));
                                                                                if( IKabs(j0eval[0]) < 0.000001  )
                                                                                {
                                                                                    {
                                                                                        if( 1 )
                                                                                        {
                                                                                        continue;
                                                                                        
                                                                                    } else
                                                                                    {
                                                                                    }
                                                                                    }
                                                                                    
                                                                                } else
                                                                                {
                                                                                    {
                                                                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                                                                    bool j0valid[1]={false};
                                                                                    IKReal x111=x0;
                                                                                    IKReal x112=((0.450000000000728)+(x111));
                                                                                    IKReal x113=((0.500000000000000)*(py)*(sj3));
                                                                                    IKReal x114=((px)*(x112));
                                                                                    IKReal x115=((((-1.00000000000000)*(x114)))+(x113));
                                                                                    IKReal x116=((IKabs(x115) != 0)?((IKReal)1/(x115)):(IKReal)1.0e30);
                                                                                    j0array[0]=IKatan2(((x116)*(((((-0.500000000000000)*(sj3)*(x112)))+(((px)*(py)))))), ((x116)*((((px)*(px))+(((-0.250000000000000)*((sj3)*(sj3))))))));
                                                                                    sj0array[0]=IKsin(j0array[0]);
                                                                                    cj0array[0]=IKcos(j0array[0]);
                                                                                    if( j0array[0] > IKPI )
                                                                                        j0array[0]-=IK2PI;
                                                                                    else if( j0array[0] < -IKPI )
                                                                                        j0array[0]+=IK2PI;
                                                                                    j0valid[0] = true;
                                                                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                                    {
                                                                                    if( !j0valid[ij0] ) { continue; }
                                                                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                                    
                                                                                    rotationfunction0(vsolutions);
                                                                                    }
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                            }
                                                                            
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                        
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x117=(px)*(px);
                                                                        IKReal x118=(py)*(py);
                                                                        IKReal x119=((x117)+(x118));
                                                                        IKReal x120=((IKabs(x119) != 0)?((IKReal)1/(x119)):(IKReal)1.0e30);
                                                                        IKReal x121=x0;
                                                                        IKReal x122=((0.450000000000728)+(x121));
                                                                        j0array[0]=IKatan2(((x120)*(((((-1.00000000000000)*(py)*(x122)))+(((0.500000000000000)*(px)*(sj3)))))), ((x120)*(((((-0.500000000000000)*(py)*(sj3)))+(((-1.00000000000000)*(px)*(x122)))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                }
                                                                
                                                            } else
                                                            {
                                                                if( 1 )
                                                                {
                                                                continue;
                                                                
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            }
                                                            }
                                                            
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x123=x0;
                                                            IKReal x124=((0.450000000000728)+(x123));
                                                            IKReal x125=(py)*(py);
                                                            IKReal x126=((cj2)*(x125));
                                                            IKReal x127=(px)*(px);
                                                            IKReal x128=((cj2)*(x127));
                                                            IKReal x129=((x126)+(x128));
                                                            IKReal x130=((-1.00000000000000)*(x129));
                                                            IKReal x131=((IKabs(x130) != 0)?((IKReal)1/(x130)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((x131)*(((((cj2)*(py)*(x124)))+(((px)*(pz)*(sj2)))))), ((x131)*(((((cj2)*(px)*(x124)))+(((-1.00000000000000)*(py)*(pz)*(sj2)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                } else
                                                {
                                                }
                                                }
                                                
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x132=(px)*(px);
                                                IKReal x133=(py)*(py);
                                                IKReal x134=((x133)+(x132));
                                                IKReal x135=((IKabs(x134) != 0)?((IKReal)1/(x134)):(IKReal)1.0e30);
                                                IKReal x136=x0;
                                                IKReal x137=((0.450000000000728)+(x136));
                                                j0array[0]=IKatan2(((x135)*(((((-1.00000000000000)*(py)*(x137)))+(((-0.500000000000000)*(px)*(sj2)*(sj3)))))), ((x135)*(((((-1.00000000000000)*(px)*(x137)))+(((0.500000000000000)*(py)*(sj2)*(sj3)))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    } else
                                    {
                                        if( 1 )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px)))));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[5];
                                                    IKReal x138=x0;
                                                    IKReal x139=((0.450000000000728)+(x138));
                                                    IKReal x140=((x139)+(((-1.00000000000000)*(pz))));
                                                    IKReal x141=(px)*(px);
                                                    IKReal x142=(py)*(py);
                                                    IKReal x143=(pz)*(pz);
                                                    IKReal x144=((x141)+(x142)+(x143));
                                                    evalcond[0]=IKfmod(j1, ((2.00000000000000)*(3.14159265358979)));
                                                    evalcond[1]=((0.452499999999418)+(((-1.00000000000000)*(x144)))+(((0.450000000000728)*(cj3))));
                                                    evalcond[2]=x140;
                                                    evalcond[3]=x140;
                                                    evalcond[4]=((0.0474999999987631)+(((-1.00000000000000)*(x144)))+(((0.900000000001455)*(pz))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((0.500000000000000)*(cj2)*(px)*(sj3)))+(((-0.500000000000000)*(py)*(sj2)*(sj3))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                        IKReal evalcond[8];
                                                                            IKReal x145=((0.949999999997090)+(((-1.00000000000000)*(pz))));
                                                                            IKReal x146=x141;
                                                                            IKReal x147=x142;
                                                                            IKReal x148=x143;
                                                                            IKReal x149=((x146)+(x147)+(x148));
                                                                            evalcond[0]=IKfmod(j3, ((2.00000000000000)*(3.14159265358979)));
                                                                            evalcond[1]=((0.902499999996508)+(((-1.00000000000000)*(x149))));
                                                                            evalcond[2]=x145;
                                                                            evalcond[3]=x145;
                                                                            evalcond[4]=((0.0474999999987631)+(((-1.00000000000000)*(x149)))+(((0.900000000001455)*(pz))));
                                                                            evalcond[5]=((-1.00000000000000)*(px));
                                                                            evalcond[6]=((-1.00000000000000)*(py));
                                                                            evalcond[7]=x145;
                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  )
                                                                            {
                                                                            {
                                                                            IKReal j0array[2], cj0array[2], sj0array[2];
                                                                            bool j0valid[2]={false};
                                                                            IKReal x150=((-1.00000000000000)*(py));
                                                                            IKReal x151=IKatan2(x150, px);
                                                                            j0array[0]=((-1.00000000000000)*(x151));
                                                                            sj0array[0]=IKsin(j0array[0]);
                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                            j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x151))));
                                                                            sj0array[1]=IKsin(j0array[1]);
                                                                            cj0array[1]=IKcos(j0array[1]);
                                                                            if( j0array[0] > IKPI )
                                                                                j0array[0]-=IK2PI;
                                                                            else if( j0array[0] < -IKPI )
                                                                                j0array[0]+=IK2PI;
                                                                            j0valid[0] = true;
                                                                            if( j0array[1] > IKPI )
                                                                                j0array[1]-=IK2PI;
                                                                            else if( j0array[1] < -IKPI )
                                                                                j0array[1]+=IK2PI;
                                                                            j0valid[1] = true;
                                                                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                                                                j0valid[1]=false;
                                                                            for(int ij0 = 0; ij0 < 2; ++ij0)
                                                                            {
                                                                            if( !j0valid[ij0] ) { continue; }
                                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                            
                                                                        } else
                                                                        {
                                                                            IKReal x152=((-0.0499999999992724)+(((-1.00000000000000)*(pz))));
                                                                            IKReal x153=x141;
                                                                            IKReal x154=x142;
                                                                            IKReal x155=x143;
                                                                            IKReal x156=((x155)+(x154)+(x153));
                                                                            evalcond[0]=IKfmod(((-3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)));
                                                                            evalcond[1]=((0.00249999999869033)+(((-1.00000000000000)*(x156))));
                                                                            evalcond[2]=x152;
                                                                            evalcond[3]=x152;
                                                                            evalcond[4]=((0.0474999999987631)+(((-1.00000000000000)*(x156)))+(((0.900000000001455)*(pz))));
                                                                            evalcond[5]=((-1.00000000000000)*(px));
                                                                            evalcond[6]=((-1.00000000000000)*(py));
                                                                            evalcond[7]=((0.0499999999992724)+(pz));
                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  )
                                                                            {
                                                                            {
                                                                            IKReal j0array[2], cj0array[2], sj0array[2];
                                                                            bool j0valid[2]={false};
                                                                            IKReal x157=((-1.00000000000000)*(py));
                                                                            IKReal x158=IKatan2(x157, px);
                                                                            j0array[0]=((-1.00000000000000)*(x158));
                                                                            sj0array[0]=IKsin(j0array[0]);
                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                            j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x158))));
                                                                            sj0array[1]=IKsin(j0array[1]);
                                                                            cj0array[1]=IKcos(j0array[1]);
                                                                            if( j0array[0] > IKPI )
                                                                                j0array[0]-=IK2PI;
                                                                            else if( j0array[0] < -IKPI )
                                                                                j0array[0]+=IK2PI;
                                                                            j0valid[0] = true;
                                                                            if( j0array[1] > IKPI )
                                                                                j0array[1]-=IK2PI;
                                                                            else if( j0array[1] < -IKPI )
                                                                                j0array[1]+=IK2PI;
                                                                            j0valid[1] = true;
                                                                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                                                                j0valid[1]=false;
                                                                            for(int ij0 = 0; ij0 < 2; ++ij0)
                                                                            {
                                                                            if( !j0valid[ij0] ) { continue; }
                                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                            
                                                                        } else
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                            
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                        }
                                                                        }
                                                                        
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x159=x3;
                                                                        IKReal x160=((0.500000000000000)*(cj2)*(px)*(sj3));
                                                                        IKReal x161=((0.500000000000000)*(py)*(sj2)*(sj3));
                                                                        IKReal x162=((((-1.00000000000000)*(x161)))+(x160));
                                                                        IKReal x163=((IKabs(x162) != 0)?((IKReal)1/(x162)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x163)*(((((-0.250000000000000)*(cj2)*(sj2)*(x159)))+(((px)*(py)))))), ((x163)*(((((-0.250000000000000)*(x159)*((sj2)*(sj2))))+((px)*(px))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                }
                                                                
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x164=x141;
                                                            IKReal x165=x142;
                                                            IKReal x166=((x164)+(x165));
                                                            IKReal x167=((-1.00000000000000)*(x166));
                                                            IKReal x168=((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((x168)*(((((-0.500000000000000)*(cj2)*(py)*(sj3)))+(((0.500000000000000)*(px)*(sj2)*(sj3)))))), ((x168)*(((((-0.500000000000000)*(cj2)*(px)*(sj3)))+(((-0.500000000000000)*(py)*(sj2)*(sj3)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                } else
                                                {
                                                    IKReal x169=x0;
                                                    IKReal x170=(px)*(px);
                                                    IKReal x171=(py)*(py);
                                                    IKReal x172=(pz)*(pz);
                                                    evalcond[0]=IKfmod(((-3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)));
                                                    evalcond[1]=((0.452499999999418)+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x172)))+(((0.450000000000728)*(cj3))));
                                                    evalcond[2]=((-0.450000000000728)+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(pz))));
                                                    evalcond[3]=((0.450000000000728)+(x169)+(pz));
                                                    evalcond[4]=((0.0474999999987631)+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x172)))+(((-0.900000000001455)*(pz))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=(((px)*(px))+((py)*(py)));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((-0.500000000000000)*(cj2)*(px)*(sj3)))+(((-0.500000000000000)*(py)*(sj2)*(sj3))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                        IKReal evalcond[7];
                                                                            IKReal x173=x170;
                                                                            IKReal x174=x171;
                                                                            IKReal x175=x172;
                                                                            evalcond[0]=IKfmod(j3, ((2.00000000000000)*(3.14159265358979)));
                                                                            evalcond[1]=((0.902499999996508)+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x175)))+(((-1.00000000000000)*(x173))));
                                                                            evalcond[2]=((-0.949999999997090)+(((-1.00000000000000)*(pz))));
                                                                            evalcond[3]=((0.949999999997090)+(pz));
                                                                            evalcond[4]=((0.0474999999987631)+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x175)))+(((-1.00000000000000)*(x173)))+(((-0.900000000001455)*(pz))));
                                                                            evalcond[5]=((-1.00000000000000)*(px));
                                                                            evalcond[6]=((-1.00000000000000)*(py));
                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
                                                                            {
                                                                            {
                                                                            IKReal j0array[2], cj0array[2], sj0array[2];
                                                                            bool j0valid[2]={false};
                                                                            IKReal x176=IKatan2(px, py);
                                                                            j0array[0]=((-1.00000000000000)*(x176));
                                                                            sj0array[0]=IKsin(j0array[0]);
                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                            j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x176))));
                                                                            sj0array[1]=IKsin(j0array[1]);
                                                                            cj0array[1]=IKcos(j0array[1]);
                                                                            if( j0array[0] > IKPI )
                                                                                j0array[0]-=IK2PI;
                                                                            else if( j0array[0] < -IKPI )
                                                                                j0array[0]+=IK2PI;
                                                                            j0valid[0] = true;
                                                                            if( j0array[1] > IKPI )
                                                                                j0array[1]-=IK2PI;
                                                                            else if( j0array[1] < -IKPI )
                                                                                j0array[1]+=IK2PI;
                                                                            j0valid[1] = true;
                                                                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                                                                j0valid[1]=false;
                                                                            for(int ij0 = 0; ij0 < 2; ++ij0)
                                                                            {
                                                                            if( !j0valid[ij0] ) { continue; }
                                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                            
                                                                        } else
                                                                        {
                                                                            IKReal x177=x170;
                                                                            IKReal x178=x171;
                                                                            IKReal x179=x172;
                                                                            evalcond[0]=IKfmod(((-3.14159265358979)+(j3)), ((2.00000000000000)*(3.14159265358979)));
                                                                            evalcond[1]=((0.00249999999869033)+(((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x177))));
                                                                            evalcond[2]=((0.0499999999992724)+(((-1.00000000000000)*(pz))));
                                                                            evalcond[3]=((-0.0499999999992724)+(pz));
                                                                            evalcond[4]=((0.0474999999987631)+(((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x177)))+(((-0.900000000001455)*(pz))));
                                                                            evalcond[5]=((-1.00000000000000)*(px));
                                                                            evalcond[6]=((-1.00000000000000)*(py));
                                                                            if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
                                                                            {
                                                                            {
                                                                            IKReal j0array[2], cj0array[2], sj0array[2];
                                                                            bool j0valid[2]={false};
                                                                            IKReal x180=IKatan2(px, py);
                                                                            j0array[0]=((-1.00000000000000)*(x180));
                                                                            sj0array[0]=IKsin(j0array[0]);
                                                                            cj0array[0]=IKcos(j0array[0]);
                                                                            j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x180))));
                                                                            sj0array[1]=IKsin(j0array[1]);
                                                                            cj0array[1]=IKcos(j0array[1]);
                                                                            if( j0array[0] > IKPI )
                                                                                j0array[0]-=IK2PI;
                                                                            else if( j0array[0] < -IKPI )
                                                                                j0array[0]+=IK2PI;
                                                                            j0valid[0] = true;
                                                                            if( j0array[1] > IKPI )
                                                                                j0array[1]-=IK2PI;
                                                                            else if( j0array[1] < -IKPI )
                                                                                j0array[1]+=IK2PI;
                                                                            j0valid[1] = true;
                                                                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                                                                j0valid[1]=false;
                                                                            for(int ij0 = 0; ij0 < 2; ++ij0)
                                                                            {
                                                                            if( !j0valid[ij0] ) { continue; }
                                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                            
                                                                            rotationfunction0(vsolutions);
                                                                            }
                                                                            }
                                                                            
                                                                        } else
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                            
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                        }
                                                                        }
                                                                        
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x181=x3;
                                                                        IKReal x182=((0.500000000000000)*(cj2)*(px)*(sj3));
                                                                        IKReal x183=((0.500000000000000)*(py)*(sj2)*(sj3));
                                                                        IKReal x184=((x182)+(x183));
                                                                        IKReal x185=((-1.00000000000000)*(x184));
                                                                        IKReal x186=((IKabs(x185) != 0)?((IKReal)1/(x185)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x186)*(((((0.250000000000000)*(cj2)*(sj2)*(x181)))+(((px)*(py)))))), ((x186)*((((px)*(px))+(((-0.250000000000000)*(x181)*((sj2)*(sj2))))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                }
                                                                
                                                            } else
                                                            {
                                                            }
                                                            }
                                                            
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x187=x170;
                                                            IKReal x188=x171;
                                                            IKReal x189=((x187)+(x188));
                                                            IKReal x190=((IKabs(x189) != 0)?((IKReal)1/(x189)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((x190)*(((((-0.500000000000000)*(cj2)*(py)*(sj3)))+(((-0.500000000000000)*(px)*(sj2)*(sj3)))))), ((x190)*(((((-0.500000000000000)*(cj2)*(px)*(sj3)))+(((0.500000000000000)*(py)*(sj2)*(sj3)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                            
                                                        }
                                                        
                                                    }
                                                    
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    continue;
                                                    
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                                
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x191=x0;
                                                IKReal x192=((0.450000000000728)+(x191));
                                                IKReal x193=((cj1)*(pz));
                                                IKReal x194=((((-1.00000000000000)*(x193)))+(x192));
                                                IKReal x195=(py)*(py);
                                                IKReal x196=((sj1)*(x195));
                                                IKReal x197=(px)*(px);
                                                IKReal x198=((sj1)*(x197));
                                                IKReal x199=((x198)+(x196));
                                                IKReal x200=((-1.00000000000000)*(x199));
                                                IKReal x201=((IKabs(x200) != 0)?((IKReal)1/(x200)):(IKReal)1.0e30);
                                                j0array[0]=IKatan2(((x201)*(((((-1.00000000000000)*(py)*(x194)))+(((0.500000000000000)*(px)*(sj1)*(sj2)*(sj3)))))), ((x201)*(((((-0.500000000000000)*(py)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(px)*(x194)))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                                
                                            }
                                            
                                        }
                                        
                                    } else
                                    {
                                    }
                                    }
                                    }
                                    }
                                    
                                } else
                                {
                                    {
                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                    bool j0valid[1]={false};
                                    IKReal x202=((0.500000000000000)*(cj2)*(sj3));
                                    IKReal x203=((pz)*(sj1));
                                    IKReal x204=((x203)+(x202));
                                    IKReal x205=(px)*(px);
                                    IKReal x206=((cj1)*(x205));
                                    IKReal x207=(py)*(py);
                                    IKReal x208=((cj1)*(x207));
                                    IKReal x209=((x206)+(x208));
                                    IKReal x210=((-1.00000000000000)*(x209));
                                    IKReal x211=((IKabs(x210) != 0)?((IKReal)1/(x210)):(IKReal)1.0e30);
                                    j0array[0]=IKatan2(((x211)*(((((-1.00000000000000)*(py)*(x204)))+(((0.500000000000000)*(cj1)*(px)*(sj2)*(sj3)))))), ((x211)*(((((-1.00000000000000)*(px)*(x204)))+(((-0.500000000000000)*(cj1)*(py)*(sj2)*(sj3)))))));
                                    sj0array[0]=IKsin(j0array[0]);
                                    cj0array[0]=IKcos(j0array[0]);
                                    if( j0array[0] > IKPI )
                                        j0array[0]-=IK2PI;
                                    else if( j0array[0] < -IKPI )
                                        j0array[0]+=IK2PI;
                                    j0valid[0] = true;
                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                    {
                                    if( !j0valid[ij0] ) { continue; }
                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                    
                                }
                                
                            }
                            }
                            }
                            
                        }
                        
                    }
                    
                } else
                {
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x212=(px)*(px);
                IKReal x213=(py)*(py);
                IKReal x214=((x212)+(x213));
                if( (x214) < (IKReal)-0.00001 )
                    continue;
                IKReal x215=IKsqrt(x214);
                IKReal x216=IKabs(x215);
                IKReal x217=((IKabs(x216) != 0)?((IKReal)1/(x216)):(IKReal)1.0e30);
                IKReal x218=((0.500000000000000)*(sj2)*(sj3)*(x217));
                if( (x218) < -1.0001 || (x218) > 1.0001 )
                    continue;
                IKReal x219=IKasin(x218);
                IKReal x220=((-1.00000000000000)*(py));
                IKReal x221=IKatan2(x220, px);
                j0array[0]=((((-1.00000000000000)*(x219)))+(((-1.00000000000000)*(x221))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(x219)+(((-1.00000000000000)*(x221))));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0)
                {
                if( !j0valid[ij0] ) { continue; }
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                    IKReal j1eval[1];
                    j1eval[0]=((((-1.00000000000000)*(pz)*(((0.450000000000728)+(((0.500000000000000)*(cj3)))))))+(((0.500000000000000)*(cj2)*(sj3)*(((((cj0)*(px)))+(((py)*(sj0))))))));
                    if( IKabs(j1eval[0]) < 0.000001  )
                    {
                        {
                            if( 1 )
                            {
                            {
                                IKReal j1eval[1];
                                j1eval[0]=((((-1.00000000000000)*((((0.450000000000728)+(((0.500000000000000)*(cj3)))))*(((0.450000000000728)+(((0.500000000000000)*(cj3))))))))+(((-0.250000000000000)*((cj2)*(cj2))*((sj3)*(sj3)))));
                                if( IKabs(j1eval[0]) < 0.000001  )
                                {
                                    {
                                        if( 1 )
                                        {
                                        continue;
                                        
                                    } else
                                    {
                                    }
                                    }
                                    
                                } else
                                {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x222=((0.500000000000000)*(cj3));
                                    IKReal x223=((0.450000000000728)+(x222));
                                    IKReal x224=((cj0)*(px));
                                    IKReal x225=((py)*(sj0));
                                    IKReal x226=((x225)+(x224));
                                    IKReal x227=((-1.00000000000000)*(x226));
                                    IKReal x228=(cj2)*(cj2);
                                    IKReal x229=(sj3)*(sj3);
                                    IKReal x230=((0.250000000000000)*(x228)*(x229));
                                    IKReal x231=(x223)*(x223);
                                    IKReal x232=((x230)+(x231));
                                    IKReal x233=((-1.00000000000000)*(x232));
                                    IKReal x234=((IKabs(x233) != 0)?((IKReal)1/(x233)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((x234)*(((((0.500000000000000)*(cj2)*(pz)*(sj3)))+(((x223)*(x227)))))), ((x234)*(((((-1.00000000000000)*(pz)*(x223)))+(((0.500000000000000)*(cj2)*(sj3)*(x227)))))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                    {
                                    if( !j1valid[ij1] ) { continue; }
                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                    
                                }
                                
                            }
                            
                        } else
                        {
                        }
                        }
                        
                    } else
                    {
                        {
                        IKReal j1array[1], cj1array[1], sj1array[1];
                        bool j1valid[1]={false};
                        IKReal x235=((cj0)*(px));
                        IKReal x236=((py)*(sj0));
                        IKReal x237=((x236)+(x235));
                        IKReal x238=((-1.00000000000000)*(x237));
                        IKReal x239=((0.500000000000000)*(cj3));
                        IKReal x240=((0.450000000000728)+(x239));
                        IKReal x241=((0.500000000000000)*(cj2)*(sj3)*(x238));
                        IKReal x242=((pz)*(x240));
                        IKReal x243=((x242)+(x241));
                        IKReal x244=((-1.00000000000000)*(x243));
                        IKReal x245=((IKabs(x244) != 0)?((IKReal)1/(x244)):(IKReal)1.0e30);
                        j1array[0]=IKatan2(((x245)*(((((pz)*(x238)))+(((0.500000000000000)*(cj2)*(sj3)*(x240)))))), ((x245)*(((((0.250000000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+(((-1.00000000000000)*((pz)*(pz))))))));
                        sj1array[0]=IKsin(j1array[0]);
                        cj1array[0]=IKcos(j1array[0]);
                        if( j1array[0] > IKPI )
                            j1array[0]-=IK2PI;
                        else if( j1array[0] < -IKPI )
                            j1array[0]+=IK2PI;
                        j1valid[0] = true;
                        for(int ij1 = 0; ij1 < 1; ++ij1)
                        {
                        if( !j1valid[ij1] ) { continue; }
                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                        
                        rotationfunction0(vsolutions);
                        }
                        }
                        
                    }
                    
                }
                }
                }
                
            }
            
        }
        }
        }
        
    } else
    {
    }
    }
    }
return vsolutions.size()>0;
}
    void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        IKReal x22=((cj1)*(sj3));
        IKReal x23=((cj2)*(cj3)*(sj1));
        IKReal x24=((x22)+(x23));
        IKReal x25=((-1.00000000000000)*(x24));
        IKReal x26=((cj0)*(cj1)*(cj2));
        IKReal x27=((sj0)*(sj2));
        IKReal x28=((((-1.00000000000000)*(x27)))+(x26));
        IKReal x29=((cj3)*(x28));
        IKReal x30=((cj0)*(sj1)*(sj3));
        IKReal x31=((((-1.00000000000000)*(x30)))+(x29));
        IKReal x32=((cj1)*(cj2)*(sj0));
        IKReal x33=((cj0)*(sj2));
        IKReal x34=((x33)+(x32));
        IKReal x35=((cj3)*(x34));
        IKReal x36=((sj0)*(sj1)*(sj3));
        IKReal x37=((((-1.00000000000000)*(x36)))+(x35));
        IKReal x38=((cj0)*(cj2));
        IKReal x39=((cj1)*(x27));
        IKReal x40=((((-1.00000000000000)*(x39)))+(x38));
        IKReal x41=((cj2)*(sj0));
        IKReal x42=((cj1)*(x33));
        IKReal x43=((x42)+(x41));
        IKReal x44=((-1.00000000000000)*(x43));
        IKReal x45=((sj3)*(x34));
        IKReal x46=((cj3)*(sj0)*(sj1));
        IKReal x47=((x46)+(x45));
        IKReal x48=((cj1)*(cj3));
        IKReal x49=((cj2)*(sj1)*(sj3));
        IKReal x50=((((-1.00000000000000)*(x49)))+(x48));
        IKReal x51=((cj0)*(cj3)*(sj1));
        IKReal x52=((sj3)*(x28));
        IKReal x53=((x51)+(x52));
        new_r00=((((r00)*(x31)))+(((r10)*(x37)))+(((r20)*(x25))));
        new_r01=((((r01)*(x31)))+(((r21)*(x25)))+(((r11)*(x37))));
        new_r02=((((r22)*(x25)))+(((r02)*(x31)))+(((r12)*(x37))));
        new_r10=((((r00)*(x44)))+(((r10)*(x40)))+(((r20)*(sj1)*(sj2))));
        new_r11=((((r01)*(x44)))+(((r21)*(sj1)*(sj2)))+(((r11)*(x40))));
        new_r12=((((r02)*(x44)))+(((r22)*(sj1)*(sj2)))+(((r12)*(x40))));
        new_r20=((((r10)*(x47)))+(((r00)*(x53)))+(((r20)*(x50))));
        new_r21=((((r01)*(x53)))+(((r21)*(x50)))+(((r11)*(x47))));
        new_r22=((((r22)*(x50)))+(((r02)*(x53)))+(((r12)*(x47))));
            {
        IKReal j5eval;
        j5eval=new_r22;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 )
        {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(new_r10)), new_r11)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        if( j5eval >= 0.999990 && j5eval <= 1.000010 )
        {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(new_r10, ((-1.00000000000000)*(new_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            
        } else
        {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(new_r12, new_r02);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4)
            {
            if( !j4valid[ij4] ) { continue; }
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond[1];
                evalcond[0]=IKsin(j4);
                if( IKabs(evalcond[0]) < 0.000010  )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((new_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), new_r22);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x54=IKcos(j4);
                IKReal x55=((IKabs(x54) != 0)?((IKReal)1/(x54)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((new_r10)*(x55)), ((new_r11)*(x55)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                for(int ij6 = 0; ij6 < 1; ++ij6)
                {
                if( !j6valid[ij6] ) { continue; }
                j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                
            } else
            {
                if( 1 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((new_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), new_r22);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal evalcond[1];
                    evalcond[0]=IKsin(j5);
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x56=IKcos(j4);
                    IKReal x57=IKcos(j5);
                    IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
                    IKReal x59=IKsin(j4);
                    j6array[0]=IKatan2(((((new_r10)*(x56)))+(((-1.00000000000000)*(new_r00)*(x59)))), ((((new_r00)*(x56)*(x58)))+(((new_r10)*(x58)*(x59)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x60=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((new_r21)*(x60)), ((-1.00000000000000)*(new_r20)*(x60)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    for(int ij6 = 0; ij6 < 1; ++ij6)
                    {
                    if( !j6valid[ij6] ) { continue; }
                    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                }
                }
                }
                }
                }
                
            } else
            {
            }
            }
            }
            }
            }
            
        }
        }
        }};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
