/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-06-09 23:20:56.402895
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    j6, cj6, sj6,
    j2=pfree[0], cj2=cos(pfree[0]), sj2=sin(pfree[0]),
    _r00, r00 = eerot[0*3+0],
    _r01, r01 = eerot[0*3+1],
    _r02, r02 = eerot[0*3+2],
    _r10, r10 = eerot[1*3+0],
    _r11, r11 = eerot[1*3+1],
    _r12, r12 = eerot[1*3+2],
    _r20, r20 = eerot[2*3+0],
    _r21, r21 = eerot[2*3+1],
    _r22, r22 = eerot[2*3+2],
    _px, _py, _pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    _r00=r00;
    _r01=r01;
    _r02=r02;
    _px=((((-0.0850000000000000)*(r02)))+(px));
    _r10=r10;
    _r11=r11;
    _r12=r12;
    _py=((py)+(((-0.0850000000000000)*(r12))));
    _r20=r20;
    _r21=r21;
    _r22=r22;
    _pz=((-0.315000000000000)+(((-0.0850000000000000)*(r22)))+(pz));
    r00 = _r00; r01 = _r01; r02 = _r02; r10 = _r10; r11 = _r11; r12 = _r12; r20 = _r20; r21 = _r21; r22 = _r22; px = _px; py = _py; pz = _pz;
    {
    IKReal evalcond;
        evalcond=j2;
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.00555555555911)+(((2.22222222221899)*((py)*(py))))+(((2.22222222221899)*((px)*(px))))+(((2.22222222221899)*((pz)*(pz)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x0=((-1.00000000000000)*(py));
        IKReal x1=IKatan2(x0, px);
        j0array[0]=((-1.00000000000000)*(x1));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x1))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x2=((0.500000000000000)*(cj3));
        IKReal x3=((0.450000000000728)+(x2));
        IKReal x4=((py)*(sj0));
        IKReal x5=((cj0)*(px));
        IKReal x6=((x5)+(x4));
        IKReal x7=((-1.00000000000000)*(x6));
        IKReal x8=((pz)*(x3));
        IKReal x9=((0.500000000000000)*(sj3)*(x7));
        IKReal x10=((x9)+(x8));
        IKReal x11=((-1.00000000000000)*(x10));
        IKReal x12=((IKabs(x11) != 0)?((IKReal)1/(x11)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((x12)*(((((0.500000000000000)*(sj3)*(x3)))+(((pz)*(x7)))))), ((x12)*(((((0.250000000000000)*((sj3)*(sj3))))+(((-1.00000000000000)*((pz)*(pz))))))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj1)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj0))));
        _r01=((((cj1)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(cj3)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r01)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3))));
        _r02=((((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj1)))+(((cj0)*(cj1)*(cj3)*(r02)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
        _r10=((((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r10))));
        _r11=((((-1.00000000000000)*(r01)*(sj0)))+(((cj0)*(r11))));
        _r12=((((-1.00000000000000)*(r02)*(sj0)))+(((cj0)*(r12))));
        _r20=((((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r20)*(sj1)*(sj3)))+(((cj1)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(r00)*(sj3))));
        _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((cj1)*(r11)*(sj0)*(sj3)))+(((cj0)*(cj1)*(r01)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1)))+(((-1.00000000000000)*(r21)*(sj1)*(sj3))));
        _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj1)*(r12)*(sj0)*(sj3)))+(((cj0)*(cj1)*(r02)*(sj3)))+(((-1.00000000000000)*(r22)*(sj1)*(sj3))));
        {
        IKReal j5eval;
        j5eval=_r22;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(_r12, _r02);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4) {
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond;
                evalcond=IKsin(j4);
                if( IKabs(evalcond) < 0.00001 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x13=IKcos(j4);
                IKReal x14=((IKabs(x13) != 0)?((IKReal)1/(x13)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((_r10)*(x14)), ((_r11)*(x14)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                { int ij6 = 0;
                if( !j6valid[ij6] )
                    continue;
                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                } else {
                if( 1 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal evalcond;
                    evalcond=IKsin(j5);
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x15=IKsin(j4);
                    IKReal x16=IKcos(j5);
                    IKReal x17=((IKabs(x16) != 0)?((IKReal)1/(x16)):(IKReal)1.0e30);
                    IKReal x18=IKcos(j4);
                    j6array[0]=IKatan2(((((_r10)*(x18)))+(((-1.00000000000000)*(_r00)*(x15)))), ((((_r10)*(x15)*(x17)))+(((_r00)*(x17)*(x18)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x19=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((_r21)*(x19)), ((-1.00000000000000)*(_r20)*(x19)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    } else {
                }
                }
                }
                }
                }
                } else {
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        evalcond=((((-0.500000000000000)*(3.14159265358979)))+(j2));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.00555555555911)+(((2.22222222221899)*((py)*(py))))+(((2.22222222221899)*((px)*(px))))+(((2.22222222221899)*((pz)*(pz)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j1eval[1];
            j1eval[0]=((0.450000000000728)+(((0.500000000000000)*(IKcos(j3)))));
            if( IKabs(j1eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=((0.450000000000728)+(((0.500000000000000)*(IKcos(j3)))));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x20=((0.500000000000000)*(sj3));
                        IKReal x21=((((-1.00000000000000)*(py)))+(x20));
                        j0eval[0]=x21;
                        j0eval[1]=x21;
                        j0eval[2]=x21;
                        j0eval[3]=x21;
                        j0eval[4]=x21;
                        j0eval[5]=x21;
                        j0eval[6]=x21;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal evalcond;
                                if( (-0.900000000001455) < -1.0001 || (-0.900000000001455) > 1.0001 )
                                    continue;
                                evalcond=((j3)+(((-1.00000000000000)*(IKacos(-0.900000000001455)))));
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                if( (-0.900000000001455) < -1.0001 || (-0.900000000001455) > 1.0001 )
                                    continue;
                                IKReal x22=IKacos(-0.900000000001455);
                                IKReal x23=IKcos(x22);
                                IKReal x24=((0.500000000000000)*(x23));
                                IKReal x25=((0.450000000000728)+(x24));
                                IKReal x26=((IKabs(x25) != 0)?((IKReal)1/(x25)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((px)*(x26)), ((pz)*(x26)));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                                _r01=((((cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0))));
                                _r02=((((-1.00000000000000)*(cj3)*(r02)*(sj0)))+(((cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                                _r10=((((r20)*(sj1)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00))));
                                _r11=((((-1.00000000000000)*(cj0)*(cj1)*(r01)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)))+(((r21)*(sj1))));
                                _r12=((((r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02))));
                                _r20=((((cj0)*(r10)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)*(sj1))));
                                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj3)))+(((cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                                _r22=((((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(r02)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj3))));
                                {
                                IKReal j5eval;
                                j5eval=_r22;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r12, _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x27=IKcos(j4);
                                        IKReal x28=((IKabs(x27) != 0)?((IKReal)1/(x27)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r10)*(x28)), ((_r11)*(x28)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x29=IKsin(j4);
                                            IKReal x30=IKcos(j5);
                                            IKReal x31=((IKabs(x30) != 0)?((IKReal)1/(x30)):(IKReal)1.0e30);
                                            IKReal x32=IKcos(j4);
                                            j6array[0]=IKatan2(((((_r10)*(x32)))+(((-1.00000000000000)*(_r00)*(x29)))), ((((_r00)*(x31)*(x32)))+(((_r10)*(x29)*(x31)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x33=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r21)*(x33)), ((-1.00000000000000)*(_r20)*(x33)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x34=((0.500000000000000)*(cj3));
                                IKReal x35=((0.450000000000728)+(x34));
                                IKReal x36=((IKabs(x35) != 0)?((IKReal)1/(x35)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((px)*(x36)), ((pz)*(x36)));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                                _r01=((((cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0))));
                                _r02=((((-1.00000000000000)*(cj3)*(r02)*(sj0)))+(((cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                                _r10=((((r20)*(sj1)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00))));
                                _r11=((((-1.00000000000000)*(cj0)*(cj1)*(r01)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)))+(((r21)*(sj1))));
                                _r12=((((r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02))));
                                _r20=((((cj0)*(r10)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)*(sj1))));
                                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj3)))+(((cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                                _r22=((((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(r02)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj3))));
                                {
                                IKReal j5eval;
                                j5eval=_r22;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r12, _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x37=IKcos(j4);
                                        IKReal x38=((IKabs(x37) != 0)?((IKReal)1/(x37)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r10)*(x38)), ((_r11)*(x38)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x39=IKsin(j4);
                                            IKReal x40=IKcos(j5);
                                            IKReal x41=((IKabs(x40) != 0)?((IKReal)1/(x40)):(IKReal)1.0e30);
                                            IKReal x42=IKcos(j4);
                                            j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(x39)))+(((_r10)*(x42)))), ((((_r00)*(x41)*(x42)))+(((_r10)*(x39)*(x41)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x43=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r21)*(x43)), ((-1.00000000000000)*(_r20)*(x43)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[7];
                        IKReal x44=((0.500000000000000)*(cj3));
                        IKReal x45=((0.450000000000728)+(x44));
                        IKReal x46=((((-1.00000000000000)*(pz)))+(x45));
                        j1eval[0]=x46;
                        j1eval[1]=x46;
                        j1eval[2]=x46;
                        j1eval[3]=x46;
                        j1eval[4]=x46;
                        j1eval[5]=x46;
                        j1eval[6]=x46;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  && IKabs(j1eval[6]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal evalcond;
                                evalcond=j3;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j0array[2], cj0array[2], sj0array[2];
                                bool j0valid[2]={false};
                                IKReal x47=((-1.00000000000000)*(px));
                                IKReal x48=((-1.00000000000000)*(py));
                                IKReal x49=IKatan2(x47, x48);
                                j0array[0]=((-1.00000000000000)*(x49));
                                sj0array[0]=IKsin(j0array[0]);
                                cj0array[0]=IKcos(j0array[0]);
                                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x49))));
                                sj0array[1]=IKsin(j0array[1]);
                                cj0array[1]=IKcos(j0array[1]);
                                if( j0array[0] > IKPI )
                                    j0array[0]-=IK2PI;
                                else if( j0array[0] < -IKPI )
                                    j0array[0]+=IK2PI;
                                j0valid[0] = true;
                                if( j0array[1] > IKPI )
                                    j0array[1]-=IK2PI;
                                else if( j0array[1] < -IKPI )
                                    j0array[1]+=IK2PI;
                                j0valid[1] = true;
                                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                    j0valid[1]=false;
                                for(int ij0 = 0; ij0 < 2; ++ij0) {
                                if( !j0valid[ij0] )
                                    continue;
                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                
                                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                                _r01=((((cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0))));
                                _r02=((((-1.00000000000000)*(cj3)*(r02)*(sj0)))+(((cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                                _r10=((((r20)*(sj1)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00))));
                                _r11=((((-1.00000000000000)*(cj0)*(cj1)*(r01)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)))+(((r21)*(sj1))));
                                _r12=((((r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02))));
                                _r20=((((cj0)*(r10)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)*(sj1))));
                                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj3)))+(((cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                                _r22=((((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(r02)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj3))));
                                {
                                IKReal j5eval;
                                j5eval=_r22;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r12, _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x50=IKcos(j4);
                                        IKReal x51=((IKabs(x50) != 0)?((IKReal)1/(x50)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r10)*(x51)), ((_r11)*(x51)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x52=IKsin(j4);
                                            IKReal x53=IKcos(j5);
                                            IKReal x54=((IKabs(x53) != 0)?((IKReal)1/(x53)):(IKReal)1.0e30);
                                            IKReal x55=IKcos(j4);
                                            j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(x52)))+(((_r10)*(x55)))), ((((_r00)*(x54)*(x55)))+(((_r10)*(x52)*(x54)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x56=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r21)*(x56)), ((-1.00000000000000)*(_r20)*(x56)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j0array[1], cj0array[1], sj0array[1];
                                bool j0valid[1]={false};
                                IKReal x57=((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30);
                                j0array[0]=IKatan2(((-2.00000000000000)*(px)*(x57)), ((2.00000000000000)*(py)*(x57)));
                                sj0array[0]=IKsin(j0array[0]);
                                cj0array[0]=IKcos(j0array[0]);
                                if( j0array[0] > IKPI )
                                    j0array[0]-=IK2PI;
                                else if( j0array[0] < -IKPI )
                                    j0array[0]+=IK2PI;
                                j0valid[0] = true;
                                { int ij0 = 0;
                                if( !j0valid[ij0] )
                                    continue;
                                j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                                
                                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                                _r01=((((cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0))));
                                _r02=((((-1.00000000000000)*(cj3)*(r02)*(sj0)))+(((cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                                _r10=((((r20)*(sj1)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00))));
                                _r11=((((-1.00000000000000)*(cj0)*(cj1)*(r01)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)))+(((r21)*(sj1))));
                                _r12=((((r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02))));
                                _r20=((((cj0)*(r10)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)*(sj1))));
                                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj3)))+(((cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                                _r22=((((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(r02)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj3))));
                                {
                                IKReal j5eval;
                                j5eval=_r22;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r12, _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x58=IKcos(j4);
                                        IKReal x59=((IKabs(x58) != 0)?((IKReal)1/(x58)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r10)*(x59)), ((_r11)*(x59)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x60=IKsin(j4);
                                            IKReal x61=IKcos(j5);
                                            IKReal x62=((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30);
                                            IKReal x63=IKcos(j4);
                                            j6array[0]=IKatan2(((((_r10)*(x63)))+(((-1.00000000000000)*(_r00)*(x60)))), ((((_r00)*(x62)*(x63)))+(((_r10)*(x60)*(x62)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x64=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r21)*(x64)), ((-1.00000000000000)*(_r20)*(x64)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j1array[2], cj1array[2], sj1array[2];
                    bool j1valid[2]={false};
                    cj1array[0]=((pz)*(((IKabs(((0.450000000000728)+(((0.500000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.450000000000728)+(((0.500000000000000)*(cj3)))))):(IKReal)1.0e30)));
                    if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 ) {
                        j1valid[0] = j1valid[1] = true;
                        j1array[0] = IKacos(cj1array[0]);
                        sj1array[0] = IKsin(j1array[0]);
                        cj1array[1] = cj1array[0];
                        j1array[1] = -j1array[0];
                        sj1array[1] = -sj1array[0];
                    }
                    else if( isnan(cj1array[0]) ) {
                        // probably any value will work
                        j1valid[0] = true;
                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                    }
                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                        j1valid[1]=false;
                    for(int ij1 = 0; ij1 < 2; ++ij1) {
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                    
                    {
                    IKReal j0array[1], cj0array[1], sj0array[1];
                    bool j0valid[1]={false};
                    IKReal x65=(px)*(px);
                    IKReal x66=(py)*(py);
                    IKReal x67=((x65)+(x66));
                    IKReal x68=((IKabs(x67) != 0)?((IKReal)1/(x67)):(IKReal)1.0e30);
                    IKReal x69=((0.450000000000728)*(sj1));
                    IKReal x70=((1.11111111110949)*(cj3)*(x69));
                    IKReal x71=((x69)+(x70));
                    j0array[0]=IKatan2(((x68)*(((((py)*(x71)))+(((-0.500000000000000)*(px)*(sj3)))))), ((x68)*(((((px)*(x71)))+(((0.500000000000000)*(py)*(sj3)))))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    { int ij0 = 0;
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                    
                    _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                    _r01=((((cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0))));
                    _r02=((((-1.00000000000000)*(cj3)*(r02)*(sj0)))+(((cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                    _r10=((((r20)*(sj1)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00))));
                    _r11=((((-1.00000000000000)*(cj0)*(cj1)*(r01)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)))+(((r21)*(sj1))));
                    _r12=((((r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02))));
                    _r20=((((cj0)*(r10)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)*(sj1))));
                    _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj3)))+(((cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                    _r22=((((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(r02)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj3))));
                    {
                    IKReal j5eval;
                    j5eval=_r22;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(_r12, _r02);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x72=IKcos(j4);
                            IKReal x73=((IKabs(x72) != 0)?((IKReal)1/(x72)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r10)*(x73)), ((_r11)*(x73)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal evalcond;
                                evalcond=IKsin(j5);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x74=IKsin(j4);
                                IKReal x75=IKcos(j5);
                                IKReal x76=((IKabs(x75) != 0)?((IKReal)1/(x75)):(IKReal)1.0e30);
                                IKReal x77=IKcos(j4);
                                j6array[0]=IKatan2(((((_r10)*(x77)))+(((-1.00000000000000)*(_r00)*(x74)))), ((((_r10)*(x74)*(x76)))+(((_r00)*(x76)*(x77)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x78=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r21)*(x78)), ((-1.00000000000000)*(_r20)*(x78)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j1array[2], cj1array[2], sj1array[2];
                bool j1valid[2]={false};
                cj1array[0]=((pz)*(((IKabs(((0.450000000000728)+(((0.500000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.450000000000728)+(((0.500000000000000)*(cj3)))))):(IKReal)1.0e30)));
                if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 ) {
                    j1valid[0] = j1valid[1] = true;
                    j1array[0] = IKacos(cj1array[0]);
                    sj1array[0] = IKsin(j1array[0]);
                    cj1array[1] = cj1array[0];
                    j1array[1] = -j1array[0];
                    sj1array[1] = -sj1array[0];
                }
                else if( isnan(cj1array[0]) ) {
                    // probably any value will work
                    j1valid[0] = true;
                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                }
                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                    j1valid[1]=false;
                for(int ij1 = 0; ij1 < 2; ++ij1) {
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                
                {
                IKReal j0array[1], cj0array[1], sj0array[1];
                bool j0valid[1]={false};
                IKReal x79=(px)*(px);
                IKReal x80=(py)*(py);
                IKReal x81=((x79)+(x80));
                IKReal x82=((IKabs(x81) != 0)?((IKReal)1/(x81)):(IKReal)1.0e30);
                IKReal x83=((0.450000000000728)*(sj1));
                IKReal x84=((1.11111111110949)*(cj3)*(x83));
                IKReal x85=((x83)+(x84));
                j0array[0]=IKatan2(((x82)*(((((py)*(x85)))+(((-0.500000000000000)*(px)*(sj3)))))), ((x82)*(((((px)*(x85)))+(((0.500000000000000)*(py)*(sj3)))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                { int ij0 = 0;
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                
                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                _r01=((((cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0))));
                _r02=((((-1.00000000000000)*(cj3)*(r02)*(sj0)))+(((cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                _r10=((((r20)*(sj1)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00))));
                _r11=((((-1.00000000000000)*(cj0)*(cj1)*(r01)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)))+(((r21)*(sj1))));
                _r12=((((r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02))));
                _r20=((((cj0)*(r10)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)*(sj1))));
                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj3)))+(((cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                _r22=((((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(r02)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj3))));
                {
                IKReal j5eval;
                j5eval=_r22;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(_r12, _r02);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKsin(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x86=IKcos(j4);
                        IKReal x87=((IKabs(x86) != 0)?((IKReal)1/(x86)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r10)*(x87)), ((_r11)*(x87)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j5);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x88=IKsin(j4);
                            IKReal x89=IKcos(j5);
                            IKReal x90=((IKabs(x89) != 0)?((IKReal)1/(x89)):(IKReal)1.0e30);
                            IKReal x91=IKcos(j4);
                            j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(x88)))+(((_r10)*(x91)))), ((((_r00)*(x90)*(x91)))+(((_r10)*(x88)*(x90)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x92=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r21)*(x92)), ((-1.00000000000000)*(_r20)*(x92)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((j2)+(((-1.00000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.00555555555911)+(((2.22222222221899)*((py)*(py))))+(((2.22222222221899)*((px)*(px))))+(((2.22222222221899)*((pz)*(pz)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x93=((-1.00000000000000)*(py));
        IKReal x94=IKatan2(x93, px);
        j0array[0]=((-1.00000000000000)*(x94));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x94))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x95=((py)*(sj0));
        IKReal x96=((cj0)*(px));
        IKReal x97=((x95)+(x96));
        IKReal x98=((-1.00000000000000)*(x97));
        IKReal x99=((0.500000000000000)*(cj3));
        IKReal x100=((0.450000000000728)+(x99));
        IKReal x101=((0.500000000000000)*(sj3)*(x98));
        IKReal x102=((pz)*(x100));
        IKReal x103=((((-1.00000000000000)*(x102)))+(x101));
        IKReal x104=((IKabs(x103) != 0)?((IKReal)1/(x103)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((x104)*(((((-0.500000000000000)*(sj3)*(x100)))+(((pz)*(x98)))))), ((x104)*(((((0.250000000000000)*((sj3)*(sj3))))+(((-1.00000000000000)*((pz)*(pz))))))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((cj3)*(r20)*(sj1)))+(((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r00)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r10)*(sj0))));
        _r01=((((cj3)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r11)*(sj0))));
        _r02=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r02)))+(((-1.00000000000000)*(cj1)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
        _r10=((((r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r10))));
        _r11=((((-1.00000000000000)*(cj0)*(r11)))+(((r01)*(sj0))));
        _r12=((((r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r12))));
        _r20=((((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)*(sj3)))+(((r20)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj3))));
        _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)*(sj3)))+(((r21)*(sj1)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r01)*(sj3))));
        _r22=((((r22)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02)*(sj3))));
        {
        IKReal j5eval;
        j5eval=_r22;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(_r12, _r02);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4) {
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal j5array[1], cj5array[1], sj5array[1];
            bool j5valid[1]={false};
            j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
            sj5array[0]=IKsin(j5array[0]);
            cj5array[0]=IKcos(j5array[0]);
            if( j5array[0] > IKPI )
                j5array[0]-=IK2PI;
            else if( j5array[0] < -IKPI )
                j5array[0]+=IK2PI;
            j5valid[0] = true;
            { int ij5 = 0;
            if( !j5valid[ij5] )
                continue;
            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
            
            {
            IKReal j6array[1], cj6array[1], sj6array[1];
            bool j6valid[1]={false};
            IKReal x105=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
            j6array[0]=IKatan2(((_r21)*(x105)), ((-1.00000000000000)*(_r20)*(x105)));
            sj6array[0]=IKsin(j6array[0]);
            cj6array[0]=IKcos(j6array[0]);
            if( j6array[0] > IKPI )
                j6array[0]-=IK2PI;
            else if( j6array[0] < -IKPI )
                j6array[0]+=IK2PI;
            j6valid[0] = true;
            { int ij6 = 0;
            if( !j6valid[ij6] )
                continue;
            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
            
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.vfree.resize(0);
            }
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        evalcond=((j2)+(((0.500000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.00555555555911)+(((2.22222222221899)*((py)*(py))))+(((2.22222222221899)*((px)*(px))))+(((2.22222222221899)*((pz)*(pz)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j1eval[1];
            j1eval[0]=((0.450000000000728)+(((0.500000000000000)*(IKcos(j3)))));
            if( IKabs(j1eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=((0.450000000000728)+(((0.500000000000000)*(IKcos(j3)))));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x106=((0.500000000000000)*(sj3));
                        IKReal x107=((py)+(x106));
                        IKReal x108=((-1.00000000000000)*(x107));
                        j0eval[0]=x108;
                        j0eval[1]=x108;
                        j0eval[2]=x108;
                        j0eval[3]=x108;
                        j0eval[4]=x108;
                        j0eval[5]=x107;
                        j0eval[6]=x107;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal evalcond;
                                if( (-0.900000000001455) < -1.0001 || (-0.900000000001455) > 1.0001 )
                                    continue;
                                evalcond=((j3)+(((-1.00000000000000)*(IKacos(-0.900000000001455)))));
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                if( (-0.900000000001455) < -1.0001 || (-0.900000000001455) > 1.0001 )
                                    continue;
                                IKReal x109=IKacos(-0.900000000001455);
                                IKReal x110=IKcos(x109);
                                IKReal x111=((0.500000000000000)*(x110));
                                IKReal x112=((0.450000000000728)+(x111));
                                IKReal x113=((IKabs(x112) != 0)?((IKReal)1/(x112)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((px)*(x113)), ((pz)*(x113)));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                                _r01=((((cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3))));
                                _r02=((((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                                _r10=((((cj0)*(cj1)*(r00)))+(((cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(r20)*(sj1))));
                                _r11=((((cj1)*(r11)*(sj0)))+(((-1.00000000000000)*(r21)*(sj1)))+(((cj0)*(cj1)*(r01))));
                                _r12=((((-1.00000000000000)*(r22)*(sj1)))+(((cj0)*(cj1)*(r02)))+(((cj1)*(r12)*(sj0))));
                                _r20=((((-1.00000000000000)*(cj0)*(r10)*(sj3)))+(((r00)*(sj0)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1))));
                                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                                _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r12)*(sj3)))+(((r02)*(sj0)*(sj3))));
                                {
                                IKReal j5eval;
                                j5eval=_r22;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r12, _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x114=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r21)*(x114)), ((-1.00000000000000)*(_r20)*(x114)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x115=((0.500000000000000)*(cj3));
                                IKReal x116=((0.450000000000728)+(x115));
                                IKReal x117=((IKabs(x116) != 0)?((IKReal)1/(x116)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((px)*(x117)), ((pz)*(x117)));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                                _r01=((((cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3))));
                                _r02=((((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                                _r10=((((cj0)*(cj1)*(r00)))+(((cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(r20)*(sj1))));
                                _r11=((((cj1)*(r11)*(sj0)))+(((-1.00000000000000)*(r21)*(sj1)))+(((cj0)*(cj1)*(r01))));
                                _r12=((((-1.00000000000000)*(r22)*(sj1)))+(((cj0)*(cj1)*(r02)))+(((cj1)*(r12)*(sj0))));
                                _r20=((((-1.00000000000000)*(cj0)*(r10)*(sj3)))+(((r00)*(sj0)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1))));
                                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                                _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r12)*(sj3)))+(((r02)*(sj0)*(sj3))));
                                {
                                IKReal j5eval;
                                j5eval=_r22;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r12, _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x118=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r21)*(x118)), ((-1.00000000000000)*(_r20)*(x118)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[7];
                        IKReal x119=((0.500000000000000)*(cj3));
                        IKReal x120=((0.450000000000728)+(x119));
                        IKReal x121=((((-1.00000000000000)*(pz)))+(x120));
                        j1eval[0]=x121;
                        j1eval[1]=x121;
                        j1eval[2]=x121;
                        j1eval[3]=x121;
                        j1eval[4]=x121;
                        j1eval[5]=x121;
                        j1eval[6]=x121;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  && IKabs(j1eval[6]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal evalcond;
                                evalcond=j3;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j0array[2], cj0array[2], sj0array[2];
                                bool j0valid[2]={false};
                                IKReal x122=((-1.00000000000000)*(px));
                                IKReal x123=((-1.00000000000000)*(py));
                                IKReal x124=IKatan2(x122, x123);
                                j0array[0]=((-1.00000000000000)*(x124));
                                sj0array[0]=IKsin(j0array[0]);
                                cj0array[0]=IKcos(j0array[0]);
                                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x124))));
                                sj0array[1]=IKsin(j0array[1]);
                                cj0array[1]=IKcos(j0array[1]);
                                if( j0array[0] > IKPI )
                                    j0array[0]-=IK2PI;
                                else if( j0array[0] < -IKPI )
                                    j0array[0]+=IK2PI;
                                j0valid[0] = true;
                                if( j0array[1] > IKPI )
                                    j0array[1]-=IK2PI;
                                else if( j0array[1] < -IKPI )
                                    j0array[1]+=IK2PI;
                                j0valid[1] = true;
                                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                    j0valid[1]=false;
                                for(int ij0 = 0; ij0 < 2; ++ij0) {
                                if( !j0valid[ij0] )
                                    continue;
                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                
                                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                                _r01=((((cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3))));
                                _r02=((((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                                _r10=((((cj0)*(cj1)*(r00)))+(((cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(r20)*(sj1))));
                                _r11=((((cj1)*(r11)*(sj0)))+(((-1.00000000000000)*(r21)*(sj1)))+(((cj0)*(cj1)*(r01))));
                                _r12=((((-1.00000000000000)*(r22)*(sj1)))+(((cj0)*(cj1)*(r02)))+(((cj1)*(r12)*(sj0))));
                                _r20=((((-1.00000000000000)*(cj0)*(r10)*(sj3)))+(((r00)*(sj0)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1))));
                                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                                _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r12)*(sj3)))+(((r02)*(sj0)*(sj3))));
                                {
                                IKReal j5eval;
                                j5eval=_r22;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r12, _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x125=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r21)*(x125)), ((-1.00000000000000)*(_r20)*(x125)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j0array[1], cj0array[1], sj0array[1];
                                bool j0valid[1]={false};
                                IKReal x126=((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30);
                                j0array[0]=IKatan2(((2.00000000000000)*(px)*(x126)), ((-2.00000000000000)*(py)*(x126)));
                                sj0array[0]=IKsin(j0array[0]);
                                cj0array[0]=IKcos(j0array[0]);
                                if( j0array[0] > IKPI )
                                    j0array[0]-=IK2PI;
                                else if( j0array[0] < -IKPI )
                                    j0array[0]+=IK2PI;
                                j0valid[0] = true;
                                { int ij0 = 0;
                                if( !j0valid[ij0] )
                                    continue;
                                j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                                
                                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                                _r01=((((cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3))));
                                _r02=((((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                                _r10=((((cj0)*(cj1)*(r00)))+(((cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(r20)*(sj1))));
                                _r11=((((cj1)*(r11)*(sj0)))+(((-1.00000000000000)*(r21)*(sj1)))+(((cj0)*(cj1)*(r01))));
                                _r12=((((-1.00000000000000)*(r22)*(sj1)))+(((cj0)*(cj1)*(r02)))+(((cj1)*(r12)*(sj0))));
                                _r20=((((-1.00000000000000)*(cj0)*(r10)*(sj3)))+(((r00)*(sj0)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1))));
                                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                                _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r12)*(sj3)))+(((r02)*(sj0)*(sj3))));
                                {
                                IKReal j5eval;
                                j5eval=_r22;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r12, _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x127=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r21)*(x127)), ((-1.00000000000000)*(_r20)*(x127)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j1array[2], cj1array[2], sj1array[2];
                    bool j1valid[2]={false};
                    cj1array[0]=((pz)*(((IKabs(((0.450000000000728)+(((0.500000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.450000000000728)+(((0.500000000000000)*(cj3)))))):(IKReal)1.0e30)));
                    if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 ) {
                        j1valid[0] = j1valid[1] = true;
                        j1array[0] = IKacos(cj1array[0]);
                        sj1array[0] = IKsin(j1array[0]);
                        cj1array[1] = cj1array[0];
                        j1array[1] = -j1array[0];
                        sj1array[1] = -sj1array[0];
                    }
                    else if( isnan(cj1array[0]) ) {
                        // probably any value will work
                        j1valid[0] = true;
                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                    }
                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                        j1valid[1]=false;
                    for(int ij1 = 0; ij1 < 2; ++ij1) {
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                    
                    {
                    IKReal j0array[1], cj0array[1], sj0array[1];
                    bool j0valid[1]={false};
                    IKReal x128=(px)*(px);
                    IKReal x129=(py)*(py);
                    IKReal x130=((x128)+(x129));
                    IKReal x131=((IKabs(x130) != 0)?((IKReal)1/(x130)):(IKReal)1.0e30);
                    IKReal x132=((0.450000000000728)*(sj1));
                    IKReal x133=((1.11111111110949)*(cj3)*(x132));
                    IKReal x134=((x133)+(x132));
                    j0array[0]=IKatan2(((x131)*(((((0.500000000000000)*(px)*(sj3)))+(((py)*(x134)))))), ((x131)*(((((px)*(x134)))+(((-0.500000000000000)*(py)*(sj3)))))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    { int ij0 = 0;
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                    
                    _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                    _r01=((((cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3))));
                    _r02=((((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                    _r10=((((cj0)*(cj1)*(r00)))+(((cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(r20)*(sj1))));
                    _r11=((((cj1)*(r11)*(sj0)))+(((-1.00000000000000)*(r21)*(sj1)))+(((cj0)*(cj1)*(r01))));
                    _r12=((((-1.00000000000000)*(r22)*(sj1)))+(((cj0)*(cj1)*(r02)))+(((cj1)*(r12)*(sj0))));
                    _r20=((((-1.00000000000000)*(cj0)*(r10)*(sj3)))+(((r00)*(sj0)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1))));
                    _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                    _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r12)*(sj3)))+(((r02)*(sj0)*(sj3))));
                    {
                    IKReal j5eval;
                    j5eval=_r22;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(_r12, _r02);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x135=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r21)*(x135)), ((-1.00000000000000)*(_r20)*(x135)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j1array[2], cj1array[2], sj1array[2];
                bool j1valid[2]={false};
                cj1array[0]=((pz)*(((IKabs(((0.450000000000728)+(((0.500000000000000)*(cj3))))) != 0)?((IKReal)1/(((0.450000000000728)+(((0.500000000000000)*(cj3)))))):(IKReal)1.0e30)));
                if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 ) {
                    j1valid[0] = j1valid[1] = true;
                    j1array[0] = IKacos(cj1array[0]);
                    sj1array[0] = IKsin(j1array[0]);
                    cj1array[1] = cj1array[0];
                    j1array[1] = -j1array[0];
                    sj1array[1] = -sj1array[0];
                }
                else if( isnan(cj1array[0]) ) {
                    // probably any value will work
                    j1valid[0] = true;
                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                }
                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                    j1valid[1]=false;
                for(int ij1 = 0; ij1 < 2; ++ij1) {
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                
                {
                IKReal j0array[1], cj0array[1], sj0array[1];
                bool j0valid[1]={false};
                IKReal x136=(px)*(px);
                IKReal x137=(py)*(py);
                IKReal x138=((x137)+(x136));
                IKReal x139=((IKabs(x138) != 0)?((IKReal)1/(x138)):(IKReal)1.0e30);
                IKReal x140=((0.450000000000728)*(sj1));
                IKReal x141=((1.11111111110949)*(cj3)*(x140));
                IKReal x142=((x140)+(x141));
                j0array[0]=IKatan2(((x139)*(((((0.500000000000000)*(px)*(sj3)))+(((py)*(x142)))))), ((x139)*(((((px)*(x142)))+(((-0.500000000000000)*(py)*(sj3)))))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                { int ij0 = 0;
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                
                _r00=((((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3))));
                _r01=((((cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3))));
                _r02=((((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3))));
                _r10=((((cj0)*(cj1)*(r00)))+(((cj1)*(r10)*(sj0)))+(((-1.00000000000000)*(r20)*(sj1))));
                _r11=((((cj1)*(r11)*(sj0)))+(((-1.00000000000000)*(r21)*(sj1)))+(((cj0)*(cj1)*(r01))));
                _r12=((((-1.00000000000000)*(r22)*(sj1)))+(((cj0)*(cj1)*(r02)))+(((cj1)*(r12)*(sj0))));
                _r20=((((-1.00000000000000)*(cj0)*(r10)*(sj3)))+(((r00)*(sj0)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1))));
                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1))));
                _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r12)*(sj3)))+(((r02)*(sj0)*(sj3))));
                {
                IKReal j5eval;
                j5eval=_r22;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(_r12, _r02);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    { int ij5 = 0;
                    if( !j5valid[ij5] )
                        continue;
                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                    
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x143=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((_r21)*(x143)), ((-1.00000000000000)*(_r20)*(x143)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        if( 1 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.00555555555911)+(((2.22222222221899)*((py)*(py))))+(((2.22222222221899)*((px)*(px))))+(((2.22222222221899)*((pz)*(pz)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            j0eval[0]=(((px)*(px))+((py)*(py)));
            if( IKabs(j0eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=(((px)*(px))+((py)*(py)));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[5];
                        IKReal x144=((0.500000000000000)*(sj2)*(sj3));
                        IKReal x145=((((-1.00000000000000)*(py)))+(x144));
                        j0eval[0]=x145;
                        j0eval[1]=x145;
                        j0eval[2]=x145;
                        j0eval[3]=x145;
                        j0eval[4]=x145;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x146=((0.500000000000000)*(cj3));
                            IKReal x147=((0.450000000000728)+(x146));
                            IKReal x148=(px)*(px);
                            IKReal x149=(pz)*(pz);
                            IKReal x150=((x148)+(x149));
                            IKReal x151=((-1.00000000000000)*(x150));
                            IKReal x152=((IKabs(x151) != 0)?((IKReal)1/(x151)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((x152)*(((((-1.00000000000000)*(px)*(x147)))+(((0.500000000000000)*(cj2)*(pz)*(sj3)))))), ((x152)*(((((-0.500000000000000)*(cj2)*(px)*(sj3)))+(((-1.00000000000000)*(pz)*(x147)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((cj0)*(cj1)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((cj0)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj1))));
                            _r01=((((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r11)*(sj0)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r11)*(sj2))));
                            _r02=((((cj0)*(cj3)*(r12)*(sj2)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj3)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r12)*(sj0))));
                            _r10=((((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)))+(((cj0)*(cj2)*(r10)))+(((r20)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)*(sj2))));
                            _r11=((((-1.00000000000000)*(cj2)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r01)*(sj2)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)*(sj2)))+(((cj0)*(cj2)*(r11)))+(((r21)*(sj1)*(sj2))));
                            _r12=((((cj0)*(cj2)*(r12)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02)*(sj2)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)))+(((r22)*(sj1)*(sj2))));
                            _r20=((((cj0)*(r10)*(sj2)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r00)*(sj3)))+(((-1.00000000000000)*(cj2)*(r20)*(sj1)*(sj3)))+(((cj1)*(cj2)*(r10)*(sj0)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj2)*(sj3))));
                            _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((cj0)*(r11)*(sj2)*(sj3)))+(((cj1)*(cj2)*(r11)*(sj0)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj2)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj3))));
                            _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r12)*(sj0)*(sj3)))+(((cj0)*(r12)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj2)*(r22)*(sj1)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj2)*(sj3))));
                            {
                            IKReal j5eval;
                            j5eval=_r22;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(_r12, _r02);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x153=IKcos(j4);
                                    IKReal x154=((IKabs(x153) != 0)?((IKReal)1/(x153)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r10)*(x154)), ((_r11)*(x154)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x155=IKsin(j4);
                                        IKReal x156=IKcos(j5);
                                        IKReal x157=((IKabs(x156) != 0)?((IKReal)1/(x156)):(IKReal)1.0e30);
                                        IKReal x158=IKcos(j4);
                                        j6array[0]=IKatan2(((((_r10)*(x158)))+(((-1.00000000000000)*(_r00)*(x155)))), ((((_r10)*(x155)*(x157)))+(((_r00)*(x157)*(x158)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x159=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r21)*(x159)), ((-1.00000000000000)*(_r20)*(x159)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[7];
                        IKReal x160=((0.500000000000000)*(cj3));
                        IKReal x161=((0.450000000000728)+(x160));
                        IKReal x162=((((-1.00000000000000)*(pz)))+(x161));
                        j1eval[0]=x162;
                        j1eval[1]=x162;
                        j1eval[2]=x162;
                        j1eval[3]=x162;
                        j1eval[4]=x162;
                        j1eval[5]=x162;
                        j1eval[6]=x162;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  && IKabs(j1eval[6]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x163=(px)*(px);
                            IKReal x164=(py)*(py);
                            IKReal x165=((x163)+(x164));
                            IKReal x166=((IKabs(x165) != 0)?((IKReal)1/(x165)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((x166)*(((((-0.500000000000000)*(px)*(sj2)*(sj3)))+(((0.500000000000000)*(cj2)*(py)*(sj3)))))), ((x166)*(((((0.500000000000000)*(cj2)*(px)*(sj3)))+(((0.500000000000000)*(py)*(sj2)*(sj3)))))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((cj0)*(cj1)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((cj0)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj1))));
                            _r01=((((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r11)*(sj0)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r11)*(sj2))));
                            _r02=((((cj0)*(cj3)*(r12)*(sj2)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj3)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r12)*(sj0))));
                            _r10=((((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)))+(((cj0)*(cj2)*(r10)))+(((r20)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)*(sj2))));
                            _r11=((((-1.00000000000000)*(cj2)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r01)*(sj2)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)*(sj2)))+(((cj0)*(cj2)*(r11)))+(((r21)*(sj1)*(sj2))));
                            _r12=((((cj0)*(cj2)*(r12)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02)*(sj2)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)))+(((r22)*(sj1)*(sj2))));
                            _r20=((((cj0)*(r10)*(sj2)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r00)*(sj3)))+(((-1.00000000000000)*(cj2)*(r20)*(sj1)*(sj3)))+(((cj1)*(cj2)*(r10)*(sj0)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj2)*(sj3))));
                            _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((cj0)*(r11)*(sj2)*(sj3)))+(((cj1)*(cj2)*(r11)*(sj0)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj2)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj3))));
                            _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r12)*(sj0)*(sj3)))+(((cj0)*(r12)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj2)*(r22)*(sj1)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj2)*(sj3))));
                            {
                            IKReal j5eval;
                            j5eval=_r22;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(_r12, _r02);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x167=IKcos(j4);
                                    IKReal x168=((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r10)*(x168)), ((_r11)*(x168)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x169=IKsin(j4);
                                        IKReal x170=IKcos(j5);
                                        IKReal x171=((IKabs(x170) != 0)?((IKReal)1/(x170)):(IKReal)1.0e30);
                                        IKReal x172=IKcos(j4);
                                        j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(x169)))+(((_r10)*(x172)))), ((((_r00)*(x171)*(x172)))+(((_r10)*(x169)*(x171)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x173=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r21)*(x173)), ((-1.00000000000000)*(_r20)*(x173)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j0array[2], cj0array[2], sj0array[2];
                    bool j0valid[2]={false};
                    IKReal x174=(px)*(px);
                    IKReal x175=(py)*(py);
                    IKReal x176=((x175)+(x174));
                    IKReal x177=((IKabs(x176) != 0)?(pow(x176,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x178=((0.500000000000000)*(sj2)*(sj3)*(x177));
                    if( (x178) < -1.0001 || (x178) > 1.0001 )
                        continue;
                    IKReal x179=IKasin(x178);
                    IKReal x180=((-1.00000000000000)*(py));
                    IKReal x181=IKatan2(x180, px);
                    j0array[0]=((((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x181))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    j0array[1]=((3.14159265358979)+(x179)+(((-1.00000000000000)*(x181))));
                    sj0array[1]=IKsin(j0array[1]);
                    cj0array[1]=IKcos(j0array[1]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    if( j0array[1] > IKPI )
                        j0array[1]-=IK2PI;
                    else if( j0array[1] < -IKPI )
                        j0array[1]+=IK2PI;
                    j0valid[1] = true;
                    if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                        j0valid[1]=false;
                    for(int ij0 = 0; ij0 < 2; ++ij0) {
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x182=((py)*(sj0));
                    IKReal x183=((cj0)*(px));
                    IKReal x184=((x182)+(x183));
                    IKReal x185=((-1.00000000000000)*(x184));
                    IKReal x186=((0.500000000000000)*(cj3));
                    IKReal x187=((0.450000000000728)+(x186));
                    IKReal x188=((0.500000000000000)*(cj2)*(sj3)*(x185));
                    IKReal x189=((pz)*(x187));
                    IKReal x190=((x188)+(x189));
                    IKReal x191=((-1.00000000000000)*(x190));
                    IKReal x192=((IKabs(x191) != 0)?((IKReal)1/(x191)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((x192)*(((((pz)*(x185)))+(((0.500000000000000)*(cj2)*(sj3)*(x187)))))), ((x192)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.250000000000000)*((cj2)*(cj2))*((sj3)*(sj3))))))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((cj0)*(cj1)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((cj0)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj1))));
                    _r01=((((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r11)*(sj0)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r11)*(sj2))));
                    _r02=((((cj0)*(cj3)*(r12)*(sj2)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj3)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r12)*(sj0))));
                    _r10=((((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)))+(((cj0)*(cj2)*(r10)))+(((r20)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)*(sj2))));
                    _r11=((((-1.00000000000000)*(cj2)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r01)*(sj2)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)*(sj2)))+(((cj0)*(cj2)*(r11)))+(((r21)*(sj1)*(sj2))));
                    _r12=((((cj0)*(cj2)*(r12)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02)*(sj2)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)))+(((r22)*(sj1)*(sj2))));
                    _r20=((((cj0)*(r10)*(sj2)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r00)*(sj3)))+(((-1.00000000000000)*(cj2)*(r20)*(sj1)*(sj3)))+(((cj1)*(cj2)*(r10)*(sj0)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj2)*(sj3))));
                    _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((cj0)*(r11)*(sj2)*(sj3)))+(((cj1)*(cj2)*(r11)*(sj0)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj2)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj3))));
                    _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r12)*(sj0)*(sj3)))+(((cj0)*(r12)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj2)*(r22)*(sj1)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj2)*(sj3))));
                    {
                    IKReal j5eval;
                    j5eval=_r22;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(_r12, _r02);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x193=IKcos(j4);
                            IKReal x194=((IKabs(x193) != 0)?((IKReal)1/(x193)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r10)*(x194)), ((_r11)*(x194)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal evalcond;
                                evalcond=IKsin(j5);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x195=IKsin(j4);
                                IKReal x196=IKcos(j5);
                                IKReal x197=((IKabs(x196) != 0)?((IKReal)1/(x196)):(IKReal)1.0e30);
                                IKReal x198=IKcos(j4);
                                j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(x195)))+(((_r10)*(x198)))), ((((_r00)*(x197)*(x198)))+(((_r10)*(x195)*(x197)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x199=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r21)*(x199)), ((-1.00000000000000)*(_r20)*(x199)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x200=(px)*(px);
                IKReal x201=(py)*(py);
                IKReal x202=((x201)+(x200));
                IKReal x203=((IKabs(x202) != 0)?(pow(x202,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x204=((0.500000000000000)*(sj2)*(sj3)*(x203));
                if( (x204) < -1.0001 || (x204) > 1.0001 )
                    continue;
                IKReal x205=IKasin(x204);
                IKReal x206=((-1.00000000000000)*(py));
                IKReal x207=IKatan2(x206, px);
                j0array[0]=((((-1.00000000000000)*(x205)))+(((-1.00000000000000)*(x207))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(x205)+(((-1.00000000000000)*(x207))));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0) {
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x208=((py)*(sj0));
                IKReal x209=((cj0)*(px));
                IKReal x210=((x209)+(x208));
                IKReal x211=((-1.00000000000000)*(x210));
                IKReal x212=((0.500000000000000)*(cj3));
                IKReal x213=((0.450000000000728)+(x212));
                IKReal x214=((0.500000000000000)*(cj2)*(sj3)*(x211));
                IKReal x215=((pz)*(x213));
                IKReal x216=((x214)+(x215));
                IKReal x217=((-1.00000000000000)*(x216));
                IKReal x218=((IKabs(x217) != 0)?((IKReal)1/(x217)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x218)*(((((pz)*(x211)))+(((0.500000000000000)*(cj2)*(sj3)*(x213)))))), ((x218)*(((((-1.00000000000000)*((pz)*(pz))))+(((0.250000000000000)*((cj2)*(cj2))*((sj3)*(sj3))))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((cj0)*(cj1)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((cj0)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj1))));
                _r01=((((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj1)))+(((-1.00000000000000)*(r11)*(sj0)*(sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r11)*(sj0)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(r01)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r11)*(sj2))));
                _r02=((((cj0)*(cj3)*(r12)*(sj2)))+(((cj0)*(cj1)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(r12)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj3)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3)))+(((cj1)*(cj2)*(cj3)*(r12)*(sj0))));
                _r10=((((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)))+(((cj0)*(cj2)*(r10)))+(((r20)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(r10)*(sj0)*(sj2))));
                _r11=((((-1.00000000000000)*(cj2)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r01)*(sj2)))+(((-1.00000000000000)*(cj1)*(r11)*(sj0)*(sj2)))+(((cj0)*(cj2)*(r11)))+(((r21)*(sj1)*(sj2))));
                _r12=((((cj0)*(cj2)*(r12)))+(((-1.00000000000000)*(cj0)*(cj1)*(r02)*(sj2)))+(((-1.00000000000000)*(cj1)*(r12)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)))+(((r22)*(sj1)*(sj2))));
                _r20=((((cj0)*(r10)*(sj2)*(sj3)))+(((cj3)*(r10)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r20)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r00)*(sj3)))+(((-1.00000000000000)*(cj2)*(r20)*(sj1)*(sj3)))+(((cj1)*(cj2)*(r10)*(sj0)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj2)*(sj3))));
                _r21=((((cj1)*(cj3)*(r21)))+(((cj0)*(cj3)*(r01)*(sj1)))+(((cj0)*(r11)*(sj2)*(sj3)))+(((cj1)*(cj2)*(r11)*(sj0)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj2)*(sj3)))+(((cj3)*(r11)*(sj0)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj3))));
                _r22=((((cj1)*(cj3)*(r22)))+(((cj0)*(cj3)*(r02)*(sj1)))+(((cj3)*(r12)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r12)*(sj0)*(sj3)))+(((cj0)*(r12)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj2)*(r22)*(sj1)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj2)*(sj3))));
                {
                IKReal j5eval;
                j5eval=_r22;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = 3.141593; sj5 = 0.000000; cj5 = -1.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r10)), _r11)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 0.000000; sj5 = 0.000000; cj5 = 1.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r10, ((-1.00000000000000)*(_r11))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(_r12, _r02);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKsin(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((_r02)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))), _r22);
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x219=IKcos(j4);
                        IKReal x220=((IKabs(x219) != 0)?((IKReal)1/(x219)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r10)*(x220)), ((_r11)*(x220)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((_r12)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))), _r22);
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j5);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x221=IKsin(j4);
                            IKReal x222=IKcos(j5);
                            IKReal x223=((IKabs(x222) != 0)?((IKReal)1/(x222)):(IKReal)1.0e30);
                            IKReal x224=IKcos(j4);
                            j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(x221)))+(((_r10)*(x224)))), ((((_r00)*(x223)*(x224)))+(((_r10)*(x221)*(x223)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x225=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r21)*(x225)), ((-1.00000000000000)*(_r20)*(x225)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
    }
    }
    }
    }
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
