/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2011-02-07 22:04:30.642509
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[3]);
x8=((x0)*(x1)*(x2));
x9=((x3)*(x4));
x10=((x8)+(((-1.00000000000000)*(x9))));
x11=IKcos(j[4]);
x12=((x10)*(x5));
x13=((-1.00000000000000)*(x0)*(x6)*(x7));
x14=((x13)+(x12));
x15=IKsin(j[4]);
x16=((x2)*(x3));
x17=((x0)*(x1)*(x4));
x18=((x17)+(x16));
x19=((-1.00000000000000)*(x18));
x20=707106.781186548;
x21=IKsin(j[6]);
x22=((x11)*(x19));
x23=((-1.00000000000000)*(x14)*(x15));
x24=((x22)+(x23));
x25=IKcos(j[6]);
x26=IKsin(j[5]);
x27=((x0)*(x5)*(x6));
x28=((x10)*(x7));
x29=((x27)+(x28));
x30=((-1.00000000000000)*(x29));
x31=((x26)*(x30));
x32=IKcos(j[5]);
x33=((x11)*(x14));
x34=((x15)*(x19));
x35=((x33)+(x34));
x36=((x32)*(x35));
x37=((x31)+(x36));
x38=((x24)*(x25));
x39=((x21)*(x24));
x40=((x25)*(x37));
x41=((x39)+(x40));
x42=((1.00000000000000e-6)*(x20)*(x41));
x43=((x0)*(x6)*(x7));
x44=((((-1.00000000000000)*(x43)))+(x12));
x45=((x11)*(x44));
x46=((x34)+(x45));
x47=((-1.00000000000000)*(x27));
x48=((-1.00000000000000)*(x28));
x49=((x48)+(x47));
x50=((x0)*(x4));
x51=((x1)*(x16));
x52=((x51)+(x50));
x53=((x5)*(x52));
x54=((x3)*(x6)*(x7));
x55=((x53)+(((-1.00000000000000)*(x54))));
x56=((x0)*(x2));
x57=((x1)*(x9));
x58=((x56)+(((-1.00000000000000)*(x57))));
x59=((x52)*(x7));
x60=((x3)*(x5)*(x6));
x61=((x59)+(x60));
x62=((-1.00000000000000)*(x61));
x63=((x26)*(x62));
x64=((x15)*(x58));
x65=((x11)*(x55));
x66=((x64)+(x65));
x67=((x32)*(x66));
x68=((x63)+(x67));
x69=((-1.00000000000000)*(x15)*(x55));
x70=((x11)*(x58));
x71=((x70)+(x69));
x72=((x25)*(x68));
x73=((x15)*(x55));
x74=((((-1.00000000000000)*(x73)))+(x70));
x75=((x1)*(x7));
x76=((x2)*(x5)*(x6));
x77=((x76)+(x75));
x78=((-1.00000000000000)*(x77));
x79=((x15)*(x4)*(x6));
x80=((x11)*(x78));
x81=((x79)+(x80));
x82=((x32)*(x81));
x83=((x2)*(x6)*(x7));
x84=((x1)*(x5));
x85=((x83)+(((-1.00000000000000)*(x84))));
x86=((x26)*(x85));
x87=((x82)+(x86));
x88=((x11)*(x4)*(x6));
x89=((x15)*(x78));
x90=((x88)+(((-1.00000000000000)*(x89))));
x91=((x25)*(x90));
x92=((x21)*(x87));
x93=((x91)+(((-1.00000000000000)*(x92))));
x94=((1.00000000000000e-6)*(x20)*(x93));
x95=((x25)*(x87));
x96=((x21)*(x90));
x97=((x95)+(x96));
x98=((1.00000000000000e-6)*(x20)*(x97));
eerot[0]=((((-1.00000000000000)*(x42)))+(((1.00000000000000e-6)*(x20)*(((((-1.00000000000000)*(x21)*(x37)))+(x38))))));
eerot[1]=((((-1.00000000000000)*(x42)))+(((-1.00000000000000e-6)*(x20)*(((((-1.00000000000000)*(x21)*(x37)))+(x38))))));
eerot[2]=((((x26)*(x46)))+(((-1.00000000000000)*(x32)*(x49))));
eetrans[0]=((((0.500000000000000)*(x27)))+(((0.500000000000000)*(x28)))+(((0.450000000000000)*(x0)*(x6)))+(((0.0850000000000000)*(x26)*(x46)))+(((-0.0850000000000000)*(x32)*(x49))));
eerot[3]=((((1.00000000000000e-6)*(x20)*(((((-1.00000000000000)*(x21)*(x68)))+(((x25)*(x71)))))))+(((-1.00000000000000e-6)*(x20)*(((((x21)*(x71)))+(x72))))));
eerot[4]=((((-1.00000000000000e-6)*(x20)*(((((-1.00000000000000)*(x21)*(x68)))+(((x25)*(x74)))))))+(((-1.00000000000000e-6)*(x20)*(((((x21)*(x74)))+(x72))))));
eerot[5]=((((x26)*(x66)))+(((-1.00000000000000)*(x32)*(x62))));
eetrans[1]=((((0.0850000000000000)*(x26)*(x66)))+(((0.450000000000000)*(x3)*(x6)))+(((-0.0850000000000000)*(x32)*(x62)))+(((0.500000000000000)*(x60)))+(((0.500000000000000)*(x59))));
eerot[6]=((x94)+(((-1.00000000000000)*(x98))));
eerot[7]=((((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x98))));
eerot[8]=((((x26)*(x81)))+(((-1.00000000000000)*(x32)*(x85))));
eetrans[2]=((0.315000000000000)+(((0.0850000000000000)*(x26)*(x81)))+(((-0.500000000000000)*(x83)))+(((0.450000000000000)*(x1)))+(((0.500000000000000)*(x84)))+(((-0.0850000000000000)*(x32)*(x85))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j2, cj2, sj2,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IKReal x0=707106.781186548;
new_r00=((((-1.00000000000000e-6)*(r00)*(x0)))+(((-1.00000000000000e-6)*(r01)*(x0))));
IKReal x1=x0;
new_r01=((((1.00000000000000e-6)*(r00)*(x1)))+(((-1.00000000000000e-6)*(r01)*(x1))));
new_r02=r02;
new_px=((((-0.0850000000000000)*(r02)))+(px));
IKReal x2=x0;
new_r10=((((-1.00000000000000e-6)*(r10)*(x2)))+(((-1.00000000000000e-6)*(r11)*(x2))));
IKReal x3=x0;
new_r11=((((1.00000000000000e-6)*(r10)*(x3)))+(((-1.00000000000000e-6)*(r11)*(x3))));
new_r12=r12;
new_py=((py)+(((-0.0850000000000000)*(r12))));
IKReal x4=x0;
new_r20=((((-1.00000000000000e-6)*(r21)*(x4)))+(((-1.00000000000000e-6)*(r20)*(x4))));
IKReal x5=x0;
new_r21=((((1.00000000000000e-6)*(r20)*(x5)))+(((-1.00000000000000e-6)*(r21)*(x5))));
new_r22=r22;
new_pz=((-0.315000000000000)+(((-0.0850000000000000)*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
cj3array[0]=((-1.00555555555556)+(((2.22222222222222)*(pp))));
if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x6=(px)*(px);
IKReal x7=(py)*(py);
IKReal x8=((x7)+(x6));
if( (x8) < (IKReal)-0.00001 )
    continue;
IKReal x9=IKsqrt(x8);
IKReal x10=IKabs(x9);
IKReal x11=((IKabs(x10) != 0)?((IKReal)1/(x10)):(IKReal)1.0e30);
IKReal x12=((0.500000000000000)*(sj2)*(sj3)*(x11));
if( (x12) < -1.0001 || (x12) > 1.0001 )
    continue;
IKReal x13=IKasin(x12);
IKReal x14=((-1.00000000000000)*(py));
IKReal x15=IKatan2(x14, px);
j0array[0]=((((-1.00000000000000)*(x15)))+(((-1.00000000000000)*(x13))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x15)))+(x13));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
if( j0array[1] > IKPI )
    j0array[1]-=IK2PI;
else if( j0array[1] < -IKPI )
    j0array[1]+=IK2PI;
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
    j0valid[1]=false;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
dummyeval[0]=((0.202500000000000)+(((0.450000000000000)*(cj3)))+(((0.250000000000000)*((cj2)*(cj2))*((sj3)*(sj3))))+(((0.250000000000000)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.500000000000000)*(cj2)*(pz)*(sj3)))+(((0.500000000000000)*(cj3)*(py)*(sj0)))+(((0.450000000000000)*(py)*(sj0)))+(((0.450000000000000)*(cj0)*(px)))+(((0.500000000000000)*(cj0)*(cj3)*(px))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((0.405000000000000)*(py)*(sj0)))+(((0.450000000000000)*(cj0)*(cj3)*(px)))+(((0.450000000000000)*(cj3)*(py)*(sj0)))+(((0.405000000000000)*(cj0)*(px)))+(((0.450000000000000)*(cj2)*(pz)*(sj3))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x16=((0.405000000000000)*(py)*(sj0));
IKReal x17=((0.450000000000000)*(cj0)*(cj3)*(px));
IKReal x18=((0.450000000000000)*(cj3)*(py)*(sj0));
IKReal x19=((0.405000000000000)*(cj0)*(px));
IKReal x20=((0.450000000000000)*(cj2)*(pz)*(sj3));
IKReal x21=((x17)+(x16)+(x19)+(x18)+(x20));
IKReal x22=((IKabs(x21) != 0)?((IKReal)1/(x21)):(IKReal)1.0e30);
IKReal x23=((0.0475000000000000)+(((-1.00000000000000)*(pp))));
j1array[0]=IKatan2(((x22)*(((((-1.00000000000000)*(x23)*(((0.450000000000000)+(((0.500000000000000)*(cj3)))))))+(((-0.900000000000000)*((pz)*(pz))))))), ((x22)*(((((-0.500000000000000)*(cj2)*(sj3)*(x23)))+(((pz)*(((((0.900000000000000)*(cj0)*(px)))+(((0.900000000000000)*(py)*(sj0)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x103=((0.500000000000000)*(cj2)*(pz)*(sj3));
IKReal x104=((0.500000000000000)*(cj3)*(py)*(sj0));
IKReal x105=((0.450000000000000)*(py)*(sj0));
IKReal x106=((0.450000000000000)*(cj0)*(px));
IKReal x107=((0.500000000000000)*(cj0)*(cj3)*(px));
IKReal x108=((x104)+(x105)+(x106)+(x107)+(x103));
IKReal x109=((IKabs(x108) != 0)?((IKReal)1/(x108)):(IKReal)1.0e30);
IKReal x110=((0.500000000000000)*(cj3));
IKReal x111=((0.450000000000000)+(x110));
j1array[0]=IKatan2(((x109)*(((((-1.00000000000000)*((pz)*(pz))))+((x111)*(x111))))), ((x109)*(((((pz)*(((((cj0)*(px)))+(((py)*(sj0)))))))+(((0.500000000000000)*(cj2)*(sj3)*(x111)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x112=((0.450000000000000)*(cj3));
IKReal x113=(cj2)*(cj2);
IKReal x114=(sj3)*(sj3);
IKReal x115=((0.250000000000000)*(x113)*(x114));
IKReal x116=(cj3)*(cj3);
IKReal x117=((0.250000000000000)*(x116));
IKReal x118=((0.202500000000000)+(x112)+(x117)+(x115));
IKReal x119=((IKabs(x118) != 0)?((IKReal)1/(x118)):(IKReal)1.0e30);
IKReal x120=((0.500000000000000)*(cj3));
IKReal x121=((0.450000000000000)+(x120));
IKReal x122=((cj0)*(px));
IKReal x123=((py)*(sj0));
IKReal x124=((x122)+(x123));
IKReal x125=((-1.00000000000000)*(x124));
j1array[0]=IKatan2(((x119)*(((((-1.00000000000000)*(x121)*(x125)))+(((-0.500000000000000)*(cj2)*(pz)*(sj3)))))), ((x119)*(((((-0.500000000000000)*(cj2)*(sj3)*(x125)))+(((pz)*(x121)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x24=((cj1)*(cj2)*(cj3));
IKReal x25=((sj1)*(sj3));
IKReal x26=((((-1.00000000000000)*(x25)))+(x24));
IKReal x27=((cj1)*(sj3));
IKReal x28=((cj2)*(cj3)*(sj1));
IKReal x29=((x27)+(x28));
IKReal x30=((-1.00000000000000)*(x29));
IKReal x31=((cj0)*(cj3)*(sj2));
IKReal x32=((sj0)*(x26));
IKReal x33=((x32)+(x31));
IKReal x34=((-1.00000000000000)*(cj3)*(sj0)*(sj2));
IKReal x35=((cj0)*(x26));
IKReal x36=((x35)+(x34));
IKReal x37=((cj0)*(cj2));
IKReal x38=((cj1)*(sj0)*(sj2));
IKReal x39=((((-1.00000000000000)*(x38)))+(x37));
IKReal x40=((cj2)*(sj0));
IKReal x41=((cj0)*(cj1)*(sj2));
IKReal x42=((x40)+(x41));
IKReal x43=((-1.00000000000000)*(x42));
IKReal x44=((cj2)*(x27));
IKReal x45=((cj3)*(sj1));
IKReal x46=((x44)+(x45));
IKReal x47=((cj1)*(cj3));
IKReal x48=((cj2)*(x25));
IKReal x49=((((-1.00000000000000)*(x48)))+(x47));
IKReal x50=((sj0)*(x46));
IKReal x51=((cj0)*(sj2)*(sj3));
IKReal x52=((x51)+(x50));
IKReal x53=((cj0)*(x46));
IKReal x54=((sj0)*(sj2)*(sj3));
IKReal x55=((x53)+(((-1.00000000000000)*(x54))));
new_r00=((((r20)*(x30)))+(((r00)*(x36)))+(((r10)*(x33))));
new_r01=((((r01)*(x36)))+(((r11)*(x33)))+(((r21)*(x30))));
new_r02=((((r22)*(x30)))+(((r02)*(((x35)+(((-1.00000000000000)*(cj3)*(sj0)*(sj2)))))))+(((r12)*(x33))));
new_r10=((((r00)*(x43)))+(((r10)*(x39)))+(((r20)*(sj1)*(sj2))));
new_r11=((((r01)*(x43)))+(((r21)*(sj1)*(sj2)))+(((r11)*(x39))));
new_r12=((((r02)*(x43)))+(((r22)*(sj1)*(sj2)))+(((r12)*(x39))));
new_r20=((((r20)*(x49)))+(((r10)*(x52)))+(((r00)*(x55))));
new_r21=((((r11)*(x52)))+(((r01)*(x55)))+(((r21)*(x49))));
new_r22=((((r02)*(x55)))+(((r22)*(x49)))+(((r12)*(x52))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
cj5array[0]=new_r22;
if( cj5array[0] >= -1.0001 && cj5array[0] <= 1.0001 )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
    j5valid[1]=false;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((new_r10)*(new_r12)*(sj5)))+(((new_r00)*(new_r02)*(sj5))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[7];
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x56=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x56));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x56))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
IKReal x57=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x57;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x57;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
IKReal x58=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x58));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x58))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
if( j4array[1] > IKPI )
    j4array[1]-=IK2PI;
else if( j4array[1] < -IKPI )
    j4array[1]+=IK2PI;
j4valid[1] = true;
if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
    j4valid[1]=false;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x59=((new_r10)*(new_r12)*(sj5));
IKReal x60=((new_r00)*(new_r02)*(sj5));
IKReal x61=((x59)+(x60));
j4array[0]=IKatan2(((-1.00000000000000)*(cj5)*(new_r12)*(new_r20)*(((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30))), ((-1.00000000000000)*(cj5)*(new_r02)*(new_r20)*(((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x62=((cj4)*(new_r12));
IKReal x63=((new_r02)*(sj4));
IKReal x64=((x62)+(((-1.00000000000000)*(x63))));
IKReal x65=((new_r12)*(sj4));
IKReal x66=((cj4)*(new_r02));
IKReal x67=((x65)+(x66));
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x64;
evalcond[5]=x64;
evalcond[6]=x67;
evalcond[7]=x67;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x68=((cj4)*(new_r12));
IKReal x69=((new_r02)*(sj4));
IKReal x70=((x68)+(((-1.00000000000000)*(x69))));
IKReal x71=((new_r12)*(sj4));
IKReal x72=((cj4)*(new_r02));
IKReal x73=((x72)+(x71));
IKReal x74=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x74;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x70;
evalcond[5]=x70;
evalcond[6]=x73;
evalcond[7]=((-1.00000000000000)*(x73));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x74;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x75=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x75)), ((-1.00000000000000)*(new_r20)*(x75)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(cj5)*(new_r01)))+(((new_r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(new_r11)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x76=(new_r12)*(new_r12);
IKReal x77=(new_r02)*(new_r02);
IKReal x78=((x77)+(x76));
j4array[0]=IKatan2(((new_r12)*(sj5)*(((IKabs(x78) != 0)?((IKReal)1/(x78)):(IKReal)1.0e30))), ((new_r02)*(sj5)*(((IKabs(x78) != 0)?((IKReal)1/(x78)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal evalcond[11];
IKReal x79=((cj4)*(new_r12));
IKReal x80=((new_r02)*(sj4));
IKReal x81=((x79)+(((-1.00000000000000)*(x80))));
IKReal x82=((new_r12)*(sj4));
IKReal x83=((cj4)*(new_r02));
IKReal x84=((x82)+(x83));
evalcond[0]=((IKfmod(((3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x81;
evalcond[5]=x81;
evalcond[6]=x84;
evalcond[7]=x84;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
IKReal x85=((cj4)*(new_r12));
IKReal x86=((new_r02)*(sj4));
IKReal x87=((x85)+(((-1.00000000000000)*(x86))));
IKReal x88=((new_r12)*(sj4));
IKReal x89=((cj4)*(new_r02));
IKReal x90=((x88)+(x89));
IKReal x91=((1.00000000000000)+(new_r22));
evalcond[0]=((IKfmod(((-3.14159265358979)+(3.14159265358979)+(j5)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=x91;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x87;
evalcond[5]=x87;
evalcond[6]=x90;
evalcond[7]=((-1.00000000000000)*(x90));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x91;
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  && IKabs(evalcond[5]) < 0.000010  && IKabs(evalcond[6]) < 0.000010  && IKabs(evalcond[7]) < 0.000010  && IKabs(evalcond[8]) < 0.000010  && IKabs(evalcond[9]) < 0.000010  && IKabs(evalcond[10]) < 0.000010  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x92=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x92)), ((-1.00000000000000)*(new_r20)*(x92)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(cj5)*(new_r01)))+(((new_r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(new_r11)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4)))), ((-1.00000000000000)*(new_r20)*(((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
IKReal x93=((IKabs(sj5) != 0)?((IKReal)1/(sj5)):(IKReal)1.0e30);
j6array[0]=IKatan2(((new_r21)*(x93)), ((-1.00000000000000)*(new_r20)*(x93)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
    j6array[0]-=IK2PI;
else if( j6array[0] < -IKPI )
    j6array[0]+=IK2PI;
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] ) { continue; }
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((new_r02)*(new_r02))))+(((-1.00000000000000)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r11)*(new_r12)))+(((-1.00000000000000)*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r02)))+(((-1.00000000000000)*(new_r10)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.000010  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x94=((new_r10)*(new_r12));
IKReal x95=((new_r00)*(new_r02));
IKReal x96=((x95)+(x94));
j4array[0]=IKatan2(((cj5)*(cj6)*(new_r12)*(((IKabs(x96) != 0)?((IKReal)1/(x96)):(IKReal)1.0e30))), ((cj5)*(cj6)*(new_r02)*(((IKabs(x96) != 0)?((IKReal)1/(x96)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x97=((new_r11)*(new_r12));
IKReal x98=((new_r01)*(new_r02));
IKReal x99=((x98)+(x97));
j4array[0]=IKatan2(((-1.00000000000000)*(cj5)*(new_r12)*(sj6)*(((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30))), ((-1.00000000000000)*(cj5)*(new_r02)*(sj6)*(((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x100=(new_r12)*(new_r12);
IKReal x101=(new_r02)*(new_r02);
IKReal x102=((x100)+(x101));
j4array[0]=IKatan2(((new_r12)*(sj5)*(((IKabs(x102) != 0)?((IKReal)1/(x102)):(IKReal)1.0e30))), ((new_r02)*(sj5)*(((IKabs(x102) != 0)?((IKReal)1/(x102)):(IKReal)1.0e30))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[6].foffset = j6;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "197f863f13f8bc481b0d92a11d69c607"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
