#define IKFAST_NAMESPACE ik_barrettwam
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 56 generated on 2012-05-16 11:32:02.850620
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[0]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=((x0)*(x1)*(x3));
x7=((x2)*(x4));
x8=IKsin(j[1]);
x9=IKsin(j[3]);
x10=IKcos(j[4]);
x11=((x1)*(x2));
x12=((x0)*(x3)*(x4));
x13=((x11)+(x12));
x14=((-1.00000000000000)*(x13));
x15=IKsin(j[4]);
x16=((x6)+(((-1.00000000000000)*(x7))));
x17=((x16)*(x5));
x18=IKcos(j[6]);
x19=((x10)*(x14));
x20=((x0)*(x8)*(x9));
x21=((((-1.00000000000000)*(x17)))+(x20));
x22=((x15)*(x21));
x23=((x19)+(x22));
x24=IKsin(j[6]);
x25=IKsin(j[5]);
x26=((x7)+(((-1.00000000000000)*(x6))));
x27=((x26)*(x9));
x28=((x0)*(x5)*(x8));
x29=((((-1.00000000000000)*(x28)))+(x27));
x30=IKcos(j[5]);
x31=((x14)*(x15));
x32=((-1.00000000000000)*(x20));
x33=((x32)+(x17));
x34=((x10)*(x33));
x35=((x31)+(x34));
x36=((((-1.00000000000000)*(x20)))+(x17));
x37=((0.0450000000000000)*(x6));
x38=((0.0450000000000000)*(x7));
x39=((x0)*(x4));
x40=((x11)*(x3));
x41=((x39)+(x40));
x42=((x0)*(x1));
x43=((x3)*(x7));
x44=((((-1.00000000000000)*(x43)))+(x42));
x45=((x41)*(x5));
x46=((x2)*(x8)*(x9));
x47=((x10)*(x44));
x48=((((-1.00000000000000)*(x45)))+(x46));
x49=((x15)*(x48));
x50=((x49)+(x47));
x51=((x15)*(x44));
x52=((((-1.00000000000000)*(x46)))+(x45));
x53=((x10)*(x52));
x54=((x51)+(x53));
x55=((-1.00000000000000)*(x41));
x56=((x55)*(x9));
x57=((x2)*(x5)*(x8));
x58=((x56)+(((-1.00000000000000)*(x57))));
x59=((0.0450000000000000)*(x39));
x60=((0.0450000000000000)*(x40));
x61=((x3)*(x9));
x62=((x1)*(x5)*(x8));
x63=((x61)+(x62));
x64=((x15)*(x4)*(x8));
x65=((-1.00000000000000)*(x63));
x66=((x10)*(x65));
x67=((x64)+(x66));
x68=((x30)*(x67));
x69=((x1)*(x8)*(x9));
x70=((x3)*(x5));
x71=((((-1.00000000000000)*(x70)))+(x69));
x72=((x25)*(x71));
x73=((x72)+(x68));
x74=((x10)*(x4)*(x8));
x75=((x15)*(x63));
x76=((x75)+(x74));
eerot[0]=((((x23)*(x24)))+(((x18)*(((((x30)*(x35)))+(((x25)*(x29))))))));
eerot[1]=((((x24)*(((((-1.00000000000000)*(x30)*(x35)))+(((-1.00000000000000)*(x25)*(x29)))))))+(((x18)*(x23))));
eerot[2]=((((x30)*(((((-1.00000000000000)*(x27)))+(x28)))))+(((x25)*(((((x10)*(x36)))+(x31))))));
eetrans[0]=((0.220000000000000)+(((0.300000000000000)*(x28)))+(((0.550000000000000)*(x0)*(x8)))+(((-1.00000000000000)*(x38)))+(((x5)*(((((-1.00000000000000)*(x37)))+(x38)))))+(((x9)*(((((-0.300000000000000)*(x7)))+(((0.300000000000000)*(x6)))))))+(x37)+(((x30)*(((((0.220000000000000)*(x28)))+(((-0.220000000000000)*(x27)))))))+(((0.0450000000000000)*(x20)))+(((x25)*(((((0.220000000000000)*(x31)))+(((0.220000000000000)*(x10)*(x36))))))));
eerot[3]=((((x18)*(((((x25)*(x58)))+(((x30)*(x54)))))))+(((x24)*(x50))));
eerot[4]=((((x18)*(x50)))+(((x24)*(((((-1.00000000000000)*(x25)*(x58)))+(((-1.00000000000000)*(x30)*(x54))))))));
eerot[5]=((((x30)*(((x57)+(((-1.00000000000000)*(x56)))))))+(((x25)*(x54))));
eetrans[1]=((0.140000000000000)+(((0.550000000000000)*(x2)*(x8)))+(((x30)*(((((-0.220000000000000)*(x56)))+(((0.220000000000000)*(x57)))))))+(((x9)*(((((0.300000000000000)*(x39)))+(((0.300000000000000)*(x40)))))))+(((0.0450000000000000)*(x46)))+(((x25)*(((((0.220000000000000)*(x51)))+(((0.220000000000000)*(x53)))))))+(x59)+(x60)+(((x5)*(((((-1.00000000000000)*(x60)))+(((-1.00000000000000)*(x59)))))))+(((0.300000000000000)*(x57))));
eerot[6]=((((x18)*(x73)))+(((x24)*(x76))));
eerot[7]=((((-1.00000000000000)*(x24)*(x73)))+(((x18)*(x76))));
eerot[8]=((((x25)*(x67)))+(((x30)*(((x70)+(((-1.00000000000000)*(x69))))))));
eetrans[2]=((0.346000000000000)+(((-0.0450000000000000)*(x1)*(x8)))+(((x30)*(((((0.220000000000000)*(x70)))+(((-0.220000000000000)*(x69)))))))+(((0.550000000000000)*(x3)))+(((-0.300000000000000)*(x69)))+(((0.0450000000000000)*(x61)))+(((0.0450000000000000)*(x62)))+(((0.300000000000000)*(x70)))+(((x25)*(((((0.220000000000000)*(x66)))+(((0.220000000000000)*(x64))))))));
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j0=numeric_limits<IKReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IKReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IKReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IKReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IKReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IKReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.220000000000000)+(px)+(((-0.220000000000000)*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.140000000000000)+(py)+(((-0.220000000000000)*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346000000000000)+(pz)+(((-0.220000000000000)*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IKReal x77=((2.98679637348110)*(pp));
IKReal x78=((-1.18441410190393)+(x77));
if( (((1.18441410190393)+(((-1.00000000000000)*(x77))))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-1.00000000000000)*(x77))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x79=((-1.00000000000000)*(IKasin(((1.18441410190393)+(((-1.00000000000000)*(x77)))))));
j3array[0]=((-1.34027003705633)+(x79));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+(((-1.00000000000000)*(x79))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x80=(cj2)*(cj2);
IKReal x81=(sj3)*(sj3);
IKReal x82=(cj3)*(cj3);
dummyeval[0]=((149.382716049383)+(((-2.00000000000000)*(cj3)*(x80)))+(((24.4444444444444)*(sj3)))+(((44.4444444444444)*(x80)*(x81)))+(x80)+(x81)+(((-13.3333333333333)*(cj3)*(sj3)*(x80)))+(((44.4444444444444)*(x82)))+(((x80)*(x82)))+(((13.3333333333333)*(sj3)*(x80)))+(((162.962962962963)*(cj3)))+(((13.3333333333333)*(cj3)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IKReal x83=((0.0450000000000000)*(sj3));
IKReal x84=((0.300000000000000)*(cj3));
IKReal x85=((0.300000000000000)*(cj2)*(sj3));
IKReal x86=((0.0450000000000000)*(cj2));
IKReal x87=((x86)+(x85));
IKReal x88=((1.00000000000000)*(cj3)*(x86));
IKReal x89=((x87)+(((-1.00000000000000)*(x88))));
IKReal x90=(x89)*(x89);
IKReal x91=((0.550000000000000)+(x83)+(x84));
IKReal x92=(x91)*(x91);
IKReal x93=((x90)+(x92));
if( (x93) < (IKReal)-0.00001 )
    continue;
IKReal x94=IKsqrt(x93);
IKReal x95=IKabs(x94);
IKReal x96=((IKabs(x95) != 0)?((IKReal)1/(x95)):(IKReal)1.0e30);
IKReal x97=((pz)*(x96));
if( (x97) < -1-IKFAST_SINCOS_THRESH || (x97) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x98=IKasin(x97);
IKReal x99=((-0.550000000000000)+(x91));
IKReal x100=((-0.550000000000000)+(((-1.00000000000000)*(x99))));
if( IKabs(x100) < IKFAST_ATAN2_MAGTHRESH && IKabs(x89) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x101=IKatan2(x100, x89);
j1array[0]=((((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x98))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x101)))+(x98));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=IKsign(((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px))))));
dummyeval[0]=((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[4];
IKReal x102=((-0.550000000000000)+(pz));
IKReal x103=((0.0450000000000000)*(sj3));
IKReal x104=((0.300000000000000)*(cj3));
IKReal x105=((x104)+(x103));
IKReal x106=((((-1.00000000000000)*(x105)))+(x102));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x106;
evalcond[3]=x106;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign(((((-1.00000000000000)*(sj2)*((py)*(py))))+(((-1.00000000000000)*(sj2)*((px)*(px))))));
dummyeval[0]=((((-1.00000000000000)*(sj2)*((py)*(py))))+(((-1.00000000000000)*(sj2)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[4];
IKReal x107=((-0.550000000000000)+(pz));
IKReal x108=((0.0450000000000000)*(sj3));
IKReal x109=((0.300000000000000)*(cj3));
IKReal x110=((x108)+(x109));
IKReal x111=((((-1.00000000000000)*(x110)))+(x107));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x111;
evalcond[3]=x111;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst2)*(((((0.300000000000000)*(py)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)))+(((0.0450000000000000)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((0.300000000000000)*(px)*(sj3)))+(((-0.0450000000000000)*(cj3)*(px)))+(((0.0450000000000000)*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((0.300000000000000)*(py)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)))+(((0.0450000000000000)*(py)))))), ((gconst2)*(((((0.300000000000000)*(px)*(sj3)))+(((-0.0450000000000000)*(cj3)*(px)))+(((0.0450000000000000)*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[3];
IKReal x112=IKsin(j0);
IKReal x113=IKcos(j0);
evalcond[0]=((((px)*(x112)))+(((-1.00000000000000)*(py)*(x113))));
evalcond[1]=((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((-1.00000000000000)*(px)*(x113)))+(((0.300000000000000)*(sj3)))+(((-1.00000000000000)*(py)*(x112))));
evalcond[2]=((-0.212500000000000)+(((1.10000000000000)*(pz)))+(((0.0900000000000000)*(px)*(x113)))+(((0.0900000000000000)*(py)*(x112)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x176=((-0.550000000000000)+(pz));
IKReal x177=((0.0450000000000000)*(sj3));
IKReal x178=((0.300000000000000)*(cj3));
IKReal x179=((x178)+(x177));
IKReal x180=((((-1.00000000000000)*(x179)))+(x176));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x180;
evalcond[3]=x180;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))));
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst3)*(((((0.300000000000000)*(py)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)))+(((0.0450000000000000)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((0.300000000000000)*(px)*(sj3)))+(((-0.0450000000000000)*(cj3)*(px)))+(((0.0450000000000000)*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((0.300000000000000)*(py)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)))+(((0.0450000000000000)*(py)))))), ((gconst3)*(((((0.300000000000000)*(px)*(sj3)))+(((-0.0450000000000000)*(cj3)*(px)))+(((0.0450000000000000)*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[3];
IKReal x181=IKsin(j0);
IKReal x182=IKcos(j0);
evalcond[0]=((((-1.00000000000000)*(py)*(x182)))+(((px)*(x181))));
evalcond[1]=((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((0.300000000000000)*(sj3)))+(((px)*(x182)))+(((py)*(x181))));
evalcond[2]=((-0.212500000000000)+(((1.10000000000000)*(pz)))+(((-0.0900000000000000)*(px)*(x182)))+(((-0.0900000000000000)*(py)*(x181)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IKReal x183=(sj2)*(sj2);
if( IKabs(((gconst1)*(((((-0.0450000000000000)*(cj3)*(px)*(x183)))+(((0.300000000000000)*(px)*(sj3)*(x183)))+(((0.0450000000000000)*(px)*(x183)))+(((-0.0450000000000000)*(cj2)*(py)*(sj2)))+(((-0.300000000000000)*(cj2)*(py)*(sj2)*(sj3)))+(((0.0450000000000000)*(cj2)*(cj3)*(py)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-0.0450000000000000)*(cj2)*(px)*(sj2)))+(((0.0450000000000000)*(cj3)*(py)*(x183)))+(((-0.300000000000000)*(cj2)*(px)*(sj2)*(sj3)))+(((-0.0450000000000000)*(py)*(x183)))+(((0.0450000000000000)*(cj2)*(cj3)*(px)*(sj2)))+(((-0.300000000000000)*(py)*(sj3)*(x183))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((-0.0450000000000000)*(cj3)*(px)*(x183)))+(((0.300000000000000)*(px)*(sj3)*(x183)))+(((0.0450000000000000)*(px)*(x183)))+(((-0.0450000000000000)*(cj2)*(py)*(sj2)))+(((-0.300000000000000)*(cj2)*(py)*(sj2)*(sj3)))+(((0.0450000000000000)*(cj2)*(cj3)*(py)*(sj2)))))), ((gconst1)*(((((-0.0450000000000000)*(cj2)*(px)*(sj2)))+(((0.0450000000000000)*(cj3)*(py)*(x183)))+(((-0.300000000000000)*(cj2)*(px)*(sj2)*(sj3)))+(((-0.0450000000000000)*(py)*(x183)))+(((0.0450000000000000)*(cj2)*(cj3)*(px)*(sj2)))+(((-0.300000000000000)*(py)*(sj3)*(x183)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[5];
IKReal x184=IKcos(j0);
IKReal x185=IKsin(j0);
evalcond[0]=((((-1.00000000000000)*(py)*(x184)))+(((0.0450000000000000)*(sj2)))+(((-0.0450000000000000)*(cj3)*(sj2)))+(((0.300000000000000)*(sj2)*(sj3)))+(((px)*(x185))));
evalcond[1]=((((cj2)*(px)*(x185)))+(((py)*(sj2)*(x185)))+(((px)*(sj2)*(x184)))+(((-1.00000000000000)*(cj2)*(py)*(x184))));
evalcond[2]=((0.0450000000000000)+(((-1.00000000000000)*(cj2)*(px)*(x184)))+(((-0.0450000000000000)*(cj3)))+(((-1.00000000000000)*(py)*(sj2)*(x184)))+(((0.300000000000000)*(sj3)))+(((px)*(sj2)*(x185)))+(((-1.00000000000000)*(cj2)*(py)*(x185))));
evalcond[3]=((((-1.00000000000000)*(py)*(x185)))+(((0.300000000000000)*(cj2)*(sj3)))+(((0.0450000000000000)*(cj2)))+(((-1.00000000000000)*(px)*(x184)))+(((-0.0450000000000000)*(cj2)*(cj3))));
evalcond[4]=((-0.212500000000000)+(((1.10000000000000)*(pz)))+(((0.0900000000000000)*(py)*(sj2)*(x184)))+(((0.0900000000000000)*(cj2)*(px)*(x184)))+(((-0.0900000000000000)*(px)*(sj2)*(x185)))+(((0.0900000000000000)*(cj2)*(py)*(x185)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
IKReal x186=((0.0450000000000000)*(sj3));
IKReal x187=((0.300000000000000)*(cj3));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((-0.550000000000000)+(((-1.00000000000000)*(x187)))+(((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(pz))));
evalcond[3]=((0.550000000000000)+(x186)+(x187)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst4)*(((((0.0450000000000000)*(cj3)*(px)*(sj2)))+(((0.0450000000000000)*(cj2)*(cj3)*(py)))+(((-0.0450000000000000)*(cj2)*(py)))+(((-0.300000000000000)*(cj2)*(py)*(sj3)))+(((-0.300000000000000)*(px)*(sj2)*(sj3)))+(((-0.0450000000000000)*(px)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((0.0450000000000000)*(cj2)*(cj3)*(px)))+(((-0.0450000000000000)*(cj2)*(px)))+(((-0.300000000000000)*(cj2)*(px)*(sj3)))+(((0.0450000000000000)*(py)*(sj2)))+(((0.300000000000000)*(py)*(sj2)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((((0.0450000000000000)*(cj3)*(px)*(sj2)))+(((0.0450000000000000)*(cj2)*(cj3)*(py)))+(((-0.0450000000000000)*(cj2)*(py)))+(((-0.300000000000000)*(cj2)*(py)*(sj3)))+(((-0.300000000000000)*(px)*(sj2)*(sj3)))+(((-0.0450000000000000)*(px)*(sj2)))))), ((gconst4)*(((((0.0450000000000000)*(cj2)*(cj3)*(px)))+(((-0.0450000000000000)*(cj2)*(px)))+(((-0.300000000000000)*(cj2)*(px)*(sj3)))+(((0.0450000000000000)*(py)*(sj2)))+(((0.300000000000000)*(py)*(sj2)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[5];
IKReal x188=IKsin(j0);
IKReal x189=IKcos(j0);
evalcond[0]=((((-1.00000000000000)*(py)*(x189)))+(((0.0450000000000000)*(sj2)))+(((-0.0450000000000000)*(cj3)*(sj2)))+(((0.300000000000000)*(sj2)*(sj3)))+(((px)*(x188))));
evalcond[1]=((((-1.00000000000000)*(px)*(sj2)*(x189)))+(((-1.00000000000000)*(py)*(sj2)*(x188)))+(((cj2)*(px)*(x188)))+(((-1.00000000000000)*(cj2)*(py)*(x189))));
evalcond[2]=((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((-1.00000000000000)*(py)*(sj2)*(x189)))+(((cj2)*(px)*(x189)))+(((0.300000000000000)*(sj3)))+(((cj2)*(py)*(x188)))+(((px)*(sj2)*(x188))));
evalcond[3]=((((0.0450000000000000)*(cj2)*(cj3)))+(((-0.0450000000000000)*(cj2)))+(((-1.00000000000000)*(py)*(x188)))+(((-0.300000000000000)*(cj2)*(sj3)))+(((-1.00000000000000)*(px)*(x189))));
evalcond[4]=((-0.212500000000000)+(((-0.0900000000000000)*(cj2)*(py)*(x188)))+(((-1.10000000000000)*(pz)))+(((0.0900000000000000)*(py)*(sj2)*(x189)))+(((-0.0900000000000000)*(px)*(sj2)*(x188)))+(((-0.0900000000000000)*(cj2)*(px)*(x189)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst0)*(((((-0.0450000000000000)*(py)*(sj3)))+(((0.0450000000000000)*(px)*(sj1)*(sj2)))+(((cj1)*(py)*(pz)))+(((-0.0450000000000000)*(cj3)*(px)*(sj1)*(sj2)))+(((-0.300000000000000)*(cj3)*(py)))+(((0.300000000000000)*(px)*(sj1)*(sj2)*(sj3)))+(((-0.550000000000000)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((-0.0450000000000000)*(py)*(sj1)*(sj2)))+(((cj1)*(px)*(pz)))+(((0.0450000000000000)*(cj3)*(py)*(sj1)*(sj2)))+(((-0.300000000000000)*(cj3)*(px)))+(((-0.0450000000000000)*(px)*(sj3)))+(((-0.300000000000000)*(py)*(sj1)*(sj2)*(sj3)))+(((-0.550000000000000)*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((-0.0450000000000000)*(py)*(sj3)))+(((0.0450000000000000)*(px)*(sj1)*(sj2)))+(((cj1)*(py)*(pz)))+(((-0.0450000000000000)*(cj3)*(px)*(sj1)*(sj2)))+(((-0.300000000000000)*(cj3)*(py)))+(((0.300000000000000)*(px)*(sj1)*(sj2)*(sj3)))+(((-0.550000000000000)*(py)))))), ((gconst0)*(((((-0.0450000000000000)*(py)*(sj1)*(sj2)))+(((cj1)*(px)*(pz)))+(((0.0450000000000000)*(cj3)*(py)*(sj1)*(sj2)))+(((-0.300000000000000)*(cj3)*(px)))+(((-0.0450000000000000)*(px)*(sj3)))+(((-0.300000000000000)*(py)*(sj1)*(sj2)*(sj3)))+(((-0.550000000000000)*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[6];
IKReal x190=IKsin(j0);
IKReal x191=IKcos(j0);
evalcond[0]=((-0.550000000000000)+(((-0.0450000000000000)*(sj3)))+(((-0.300000000000000)*(cj3)))+(((px)*(sj1)*(x191)))+(((cj1)*(pz)))+(((py)*(sj1)*(x190))));
evalcond[1]=((((0.0450000000000000)*(sj2)))+(((-1.00000000000000)*(py)*(x191)))+(((-0.0450000000000000)*(cj3)*(sj2)))+(((px)*(x190)))+(((0.300000000000000)*(sj2)*(sj3))));
evalcond[2]=((((-1.00000000000000)*(pz)*(sj1)*(sj2)))+(((cj1)*(py)*(sj2)*(x190)))+(((cj2)*(px)*(x190)))+(((-1.00000000000000)*(cj2)*(py)*(x191)))+(((cj1)*(px)*(sj2)*(x191))));
evalcond[3]=((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((-1.00000000000000)*(py)*(sj2)*(x191)))+(((cj2)*(pz)*(sj1)))+(((0.300000000000000)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj2)*(px)*(x191)))+(((-1.00000000000000)*(cj1)*(cj2)*(py)*(x190)))+(((px)*(sj2)*(x190))));
evalcond[4]=((((0.300000000000000)*(cj1)*(cj2)*(sj3)))+(((-1.00000000000000)*(py)*(x190)))+(((0.0450000000000000)*(sj1)*(sj3)))+(((0.550000000000000)*(sj1)))+(((-0.0450000000000000)*(cj1)*(cj2)*(cj3)))+(((0.300000000000000)*(cj3)*(sj1)))+(((-1.00000000000000)*(px)*(x191)))+(((0.0450000000000000)*(cj1)*(cj2))));
evalcond[5]=((-0.212500000000000)+(((0.0900000000000000)*(py)*(sj2)*(x191)))+(((1.10000000000000)*(py)*(sj1)*(x190)))+(((-0.0900000000000000)*(cj2)*(pz)*(sj1)))+(((1.10000000000000)*(cj1)*(pz)))+(((1.10000000000000)*(px)*(sj1)*(x191)))+(((0.0900000000000000)*(cj1)*(cj2)*(py)*(x190)))+(((-0.0900000000000000)*(px)*(sj2)*(x190)))+(((0.0900000000000000)*(cj1)*(cj2)*(px)*(x191)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IKReal x192=(px)*(px);
IKReal x193=(py)*(py);
IKReal x194=((x193)+(x192));
if( (x194) < (IKReal)-0.00001 )
    continue;
IKReal x195=IKsqrt(x194);
IKReal x196=IKabs(x195);
IKReal x197=((IKabs(x196) != 0)?((IKReal)1/(x196)):(IKReal)1.0e30);
IKReal x198=((0.0450000000000000)*(sj2));
IKReal x199=((0.300000000000000)*(sj2)*(sj3));
IKReal x200=((x199)+(x198));
IKReal x201=((1.00000000000000)*(cj3)*(x198));
IKReal x202=((((-1.00000000000000)*(x201)))+(x200));
IKReal x203=((x197)*(x202));
if( (x203) < -1-IKFAST_SINCOS_THRESH || (x203) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x204=IKasin(x203);
IKReal x205=((-1.00000000000000)*(py));
if( IKabs(x205) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x206=IKatan2(x205, px);
j0array[0]=((((-1.00000000000000)*(x206)))+(((-1.00000000000000)*(x204))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x206)))+(x204));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IKReal evalcond[2];
IKReal x207=(cj2)*(cj2);
IKReal x208=(py)*(py);
IKReal x209=(sj2)*(sj2);
IKReal x210=((px)*(py)*(x209));
IKReal x211=((px)*(py)*(x207));
IKReal x212=((x210)+(x211));
IKReal x213=IKcos(j0);
IKReal x214=IKsin(j0);
IKReal x215=(px)*(px);
evalcond[0]=((((-0.0450000000000000)*(py)*(sj2)))+(((x213)*(((((x208)*(x209)))+(((x207)*(x208)))))))+(((0.0450000000000000)*(cj3)*(py)*(sj2)))+(((-1.00000000000000)*(x212)*(x214)))+(((-0.300000000000000)*(py)*(sj2)*(sj3))));
evalcond[1]=((((0.0450000000000000)*(cj3)*(px)*(sj2)))+(((-0.300000000000000)*(px)*(sj2)*(sj3)))+(((x212)*(x213)))+(((-0.0450000000000000)*(px)*(sj2)))+(((x214)*(((((-1.00000000000000)*(x207)*(x215)))+(((-1.00000000000000)*(x209)*(x215))))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign(((((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((0.0450000000000000)*(cj2)*(cj3)*(pz)))+(((-0.300000000000000)*(cj2)*(pz)*(sj3)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj2)*(pz)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3)))));
dummyeval[0]=((((-1.00000000000000)*(py)*(sj0)*(sj3)))+(((-6.66666666666667)*(cj0)*(cj3)*(px)))+(((-12.2222222222222)*(py)*(sj0)))+(((-6.66666666666667)*(cj2)*(pz)*(sj3)))+(((-1.00000000000000)*(cj2)*(pz)))+(((-1.00000000000000)*(cj0)*(px)*(sj3)))+(((cj2)*(cj3)*(pz)))+(((-6.66666666666667)*(cj3)*(py)*(sj0)))+(((-12.2222222222222)*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IKReal x216=(cj3)*(cj3);
IKReal x217=(sj3)*(sj3);
if( IKabs(((-1.00000000000000)*(gconst5)*(((0.302500000000000)+(((0.0495000000000000)*(sj3)))+(((-1.00000000000000)*((pz)*(pz))))+(((0.330000000000000)*(cj3)))+(((0.0270000000000000)*(cj3)*(sj3)))+(((0.0900000000000000)*(x216)))+(((0.00202500000000000)*(x217))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((-1.00000000000000)*(cj0)*(px)*(pz)))+(((0.0112500000000000)*(cj2)*(cj3)))+(((-0.0135000000000000)*(cj2)*(x217)))+(((0.0135000000000000)*(cj2)*(x216)))+(((-0.0247500000000000)*(cj2)))+(((-1.00000000000000)*(py)*(pz)*(sj0)))+(((-0.167025000000000)*(cj2)*(sj3)))+(((-0.0879750000000000)*(cj2)*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((-1.00000000000000)*(gconst5)*(((0.302500000000000)+(((0.0495000000000000)*(sj3)))+(((-1.00000000000000)*((pz)*(pz))))+(((0.330000000000000)*(cj3)))+(((0.0270000000000000)*(cj3)*(sj3)))+(((0.0900000000000000)*(x216)))+(((0.00202500000000000)*(x217)))))), ((gconst5)*(((((-1.00000000000000)*(cj0)*(px)*(pz)))+(((0.0112500000000000)*(cj2)*(cj3)))+(((-0.0135000000000000)*(cj2)*(x217)))+(((0.0135000000000000)*(cj2)*(x216)))+(((-0.0247500000000000)*(cj2)))+(((-1.00000000000000)*(py)*(pz)*(sj0)))+(((-0.167025000000000)*(cj2)*(sj3)))+(((-0.0879750000000000)*(cj2)*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IKReal evalcond[6];
IKReal x218=IKsin(j1);
IKReal x219=IKcos(j1);
evalcond[0]=((-0.550000000000000)+(((-0.0450000000000000)*(sj3)))+(((cj0)*(px)*(x218)))+(((-0.300000000000000)*(cj3)))+(((pz)*(x219)))+(((py)*(sj0)*(x218))));
evalcond[1]=((((py)*(sj0)*(sj2)*(x219)))+(((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((-1.00000000000000)*(pz)*(sj2)*(x218)))+(((cj0)*(px)*(sj2)*(x219)))+(((cj2)*(px)*(sj0))));
evalcond[2]=((((-0.0450000000000000)*(sj3)*(x219)))+(((-0.0450000000000000)*(cj2)*(cj3)*(x218)))+(((0.0450000000000000)*(cj2)*(x218)))+(pz)+(((-0.300000000000000)*(cj3)*(x219)))+(((0.300000000000000)*(cj2)*(sj3)*(x218)))+(((-0.550000000000000)*(x219))));
evalcond[3]=((0.0450000000000000)+(((-1.00000000000000)*(cj2)*(py)*(sj0)*(x219)))+(((-0.0450000000000000)*(cj3)))+(((px)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(py)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(px)*(x219)))+(((cj2)*(pz)*(x218)))+(((0.300000000000000)*(sj3))));
evalcond[4]=((((-0.0450000000000000)*(cj2)*(cj3)*(x219)))+(((0.0450000000000000)*(cj2)*(x219)))+(((-1.00000000000000)*(py)*(sj0)))+(((0.550000000000000)*(x218)))+(((0.0450000000000000)*(sj3)*(x218)))+(((-1.00000000000000)*(cj0)*(px)))+(((0.300000000000000)*(cj3)*(x218)))+(((0.300000000000000)*(cj2)*(sj3)*(x219))));
evalcond[5]=((-0.212500000000000)+(((0.0900000000000000)*(cj0)*(cj2)*(px)*(x219)))+(((0.0900000000000000)*(cj0)*(py)*(sj2)))+(((1.10000000000000)*(py)*(sj0)*(x218)))+(((-0.0900000000000000)*(cj2)*(pz)*(x218)))+(((1.10000000000000)*(cj0)*(px)*(x218)))+(((-0.0900000000000000)*(px)*(sj0)*(sj2)))+(((0.0900000000000000)*(cj2)*(py)*(sj0)*(x219)))+(((1.10000000000000)*(pz)*(x219)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IKReal x220=(px)*(px);
IKReal x221=(py)*(py);
IKReal x222=((x221)+(x220));
if( (x222) < (IKReal)-0.00001 )
    continue;
IKReal x223=IKsqrt(x222);
IKReal x224=IKabs(x223);
IKReal x225=((IKabs(x224) != 0)?((IKReal)1/(x224)):(IKReal)1.0e30);
IKReal x226=((0.0450000000000000)*(sj2));
IKReal x227=((0.300000000000000)*(sj2)*(sj3));
IKReal x228=((x227)+(x226));
IKReal x229=((1.00000000000000)*(cj3)*(x226));
IKReal x230=((x228)+(((-1.00000000000000)*(x229))));
IKReal x231=((x225)*(x230));
if( (x231) < -1-IKFAST_SINCOS_THRESH || (x231) > 1+IKFAST_SINCOS_THRESH )
    continue;
IKReal x232=IKasin(x231);
IKReal x233=((-1.00000000000000)*(py));
if( IKabs(x233) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x234=IKatan2(x233, px);
j0array[0]=((((-1.00000000000000)*(x232)))+(((-1.00000000000000)*(x234))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x234)))+(x232));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign(((((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((0.0450000000000000)*(cj2)*(cj3)*(pz)))+(((-0.300000000000000)*(cj2)*(pz)*(sj3)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj2)*(pz)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3)))));
dummyeval[0]=((((-1.00000000000000)*(py)*(sj0)*(sj3)))+(((-6.66666666666667)*(cj0)*(cj3)*(px)))+(((-12.2222222222222)*(py)*(sj0)))+(((-6.66666666666667)*(cj2)*(pz)*(sj3)))+(((-1.00000000000000)*(cj2)*(pz)))+(((-1.00000000000000)*(cj0)*(px)*(sj3)))+(((cj2)*(cj3)*(pz)))+(((-6.66666666666667)*(cj3)*(py)*(sj0)))+(((-12.2222222222222)*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IKReal x235=(cj3)*(cj3);
IKReal x236=(sj3)*(sj3);
if( IKabs(((-1.00000000000000)*(gconst5)*(((0.302500000000000)+(((0.0900000000000000)*(x235)))+(((0.0495000000000000)*(sj3)))+(((0.00202500000000000)*(x236)))+(((-1.00000000000000)*((pz)*(pz))))+(((0.330000000000000)*(cj3)))+(((0.0270000000000000)*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((-1.00000000000000)*(cj0)*(px)*(pz)))+(((0.0112500000000000)*(cj2)*(cj3)))+(((0.0135000000000000)*(cj2)*(x235)))+(((-0.0135000000000000)*(cj2)*(x236)))+(((-0.0247500000000000)*(cj2)))+(((-1.00000000000000)*(py)*(pz)*(sj0)))+(((-0.167025000000000)*(cj2)*(sj3)))+(((-0.0879750000000000)*(cj2)*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((-1.00000000000000)*(gconst5)*(((0.302500000000000)+(((0.0900000000000000)*(x235)))+(((0.0495000000000000)*(sj3)))+(((0.00202500000000000)*(x236)))+(((-1.00000000000000)*((pz)*(pz))))+(((0.330000000000000)*(cj3)))+(((0.0270000000000000)*(cj3)*(sj3)))))), ((gconst5)*(((((-1.00000000000000)*(cj0)*(px)*(pz)))+(((0.0112500000000000)*(cj2)*(cj3)))+(((0.0135000000000000)*(cj2)*(x235)))+(((-0.0135000000000000)*(cj2)*(x236)))+(((-0.0247500000000000)*(cj2)))+(((-1.00000000000000)*(py)*(pz)*(sj0)))+(((-0.167025000000000)*(cj2)*(sj3)))+(((-0.0879750000000000)*(cj2)*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IKReal evalcond[6];
IKReal x237=IKsin(j1);
IKReal x238=IKcos(j1);
evalcond[0]=((-0.550000000000000)+(((-0.0450000000000000)*(sj3)))+(((-0.300000000000000)*(cj3)))+(((py)*(sj0)*(x237)))+(((pz)*(x238)))+(((cj0)*(px)*(x237))));
evalcond[1]=((((cj0)*(px)*(sj2)*(x238)))+(((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((-1.00000000000000)*(pz)*(sj2)*(x237)))+(((py)*(sj0)*(sj2)*(x238)))+(((cj2)*(px)*(sj0))));
evalcond[2]=((((0.300000000000000)*(cj2)*(sj3)*(x237)))+(((-0.300000000000000)*(cj3)*(x238)))+(((-0.550000000000000)*(x238)))+(pz)+(((-0.0450000000000000)*(sj3)*(x238)))+(((0.0450000000000000)*(cj2)*(x237)))+(((-0.0450000000000000)*(cj2)*(cj3)*(x237))));
evalcond[3]=((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((-1.00000000000000)*(cj2)*(py)*(sj0)*(x238)))+(((px)*(sj0)*(sj2)))+(((cj2)*(pz)*(x237)))+(((-1.00000000000000)*(cj0)*(py)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(px)*(x238)))+(((0.300000000000000)*(sj3))));
evalcond[4]=((((0.300000000000000)*(cj2)*(sj3)*(x238)))+(((-1.00000000000000)*(py)*(sj0)))+(((0.300000000000000)*(cj3)*(x237)))+(((-1.00000000000000)*(cj0)*(px)))+(((0.0450000000000000)*(cj2)*(x238)))+(((-0.0450000000000000)*(cj2)*(cj3)*(x238)))+(((0.550000000000000)*(x237)))+(((0.0450000000000000)*(sj3)*(x237))));
evalcond[5]=((-0.212500000000000)+(((1.10000000000000)*(cj0)*(px)*(x237)))+(((-0.0900000000000000)*(cj2)*(pz)*(x237)))+(((1.10000000000000)*(py)*(sj0)*(x237)))+(((0.0900000000000000)*(cj0)*(py)*(sj2)))+(((0.0900000000000000)*(cj0)*(cj2)*(px)*(x238)))+(((1.10000000000000)*(pz)*(x238)))+(((-0.0900000000000000)*(px)*(sj0)*(sj2)))+(((0.0900000000000000)*(cj2)*(py)*(sj0)*(x238)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(vsolutions);
}
}

}

}
}
}

}

}
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IKReal x114=((cj1)*(cj2)*(cj3));
IKReal x115=((sj1)*(sj3));
IKReal x116=((((-1.00000000000000)*(x115)))+(x114));
IKReal x117=((-1.00000000000000)*(cj3)*(sj0)*(sj2));
IKReal x118=((cj0)*(x116));
IKReal x119=((x117)+(x118));
IKReal x120=((cj1)*(sj3));
IKReal x121=((cj2)*(cj3)*(sj1));
IKReal x122=((x120)+(x121));
IKReal x123=((-1.00000000000000)*(x122));
IKReal x124=((cj0)*(cj3)*(sj2));
IKReal x125=((sj0)*(x116));
IKReal x126=((x124)+(x125));
IKReal x127=((cj0)*(cj2));
IKReal x128=((cj1)*(sj0)*(sj2));
IKReal x129=((((-1.00000000000000)*(x128)))+(x127));
IKReal x130=((cj2)*(sj0));
IKReal x131=((cj0)*(cj1)*(sj2));
IKReal x132=((x131)+(x130));
IKReal x133=((-1.00000000000000)*(x132));
IKReal x134=((cj2)*(x120));
IKReal x135=((cj3)*(sj1));
IKReal x136=((x135)+(x134));
IKReal x137=((cj1)*(cj3));
IKReal x138=((cj2)*(x115));
IKReal x139=((x137)+(((-1.00000000000000)*(x138))));
IKReal x140=((sj0)*(x136));
IKReal x141=((cj0)*(sj2)*(sj3));
IKReal x142=((x140)+(x141));
IKReal x143=((cj0)*(x136));
IKReal x144=((sj0)*(sj2)*(sj3));
IKReal x145=((((-1.00000000000000)*(x144)))+(x143));
new_r00=((((r00)*(x119)))+(((r20)*(x123)))+(((r10)*(x126))));
new_r01=((((r21)*(x123)))+(((r01)*(x119)))+(((r11)*(x126))));
new_r02=((((r02)*(x119)))+(((r22)*(x123)))+(((r12)*(x126))));
new_r10=((((r00)*(x133)))+(((r20)*(sj1)*(sj2)))+(((r10)*(x129))));
new_r11=((((r01)*(x133)))+(((r21)*(sj1)*(sj2)))+(((r11)*(x129))));
new_r12=((((r02)*(x133)))+(((r12)*(x129)))+(((r22)*(sj1)*(sj2))));
new_r20=((((r00)*(x145)))+(((r20)*(x139)))+(((r10)*(x142))));
new_r21=((((r01)*(x145)))+(((r21)*(x139)))+(((r11)*(x142))));
new_r22=((((r22)*(x139)))+(((r02)*(x145)))+(((r12)*(x142))));
{
IKReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst6;
gconst6=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x146=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x146));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x146))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((-1.00000000000000)*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IKReal evalcond[4];
IKReal x147=IKsin(j6);
IKReal x148=IKcos(j6);
evalcond[0]=((((-1.00000000000000)*(x147)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[1]=((((-1.00000000000000)*(x148)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x147));
evalcond[3]=((((-1.00000000000000)*(x148)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
IKReal x149=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=x149;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x149;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x150=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x150));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x150))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((-1.00000000000000)*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IKReal evalcond[4];
IKReal x151=IKsin(j6);
IKReal x152=IKcos(j6);
evalcond[0]=((((-1.00000000000000)*(x151)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[1]=((((-1.00000000000000)*(x152)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[2]=((((-1.00000000000000)*(x151)))+(((cj4)*(new_r01)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x152));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst6)*(new_r12)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(new_r02)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst6)*(new_r12)*(sj5)), ((gconst6)*(new_r02)*(sj5)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x153=IKcos(j4);
IKReal x154=IKsin(j4);
evalcond[0]=((((new_r12)*(x153)))+(((-1.00000000000000)*(new_r02)*(x154))));
evalcond[1]=((((new_r12)*(x154)))+(((new_r02)*(x153)))+(((-1.00000000000000)*(sj5))));
evalcond[2]=((((cj5)*(new_r02)*(x153)))+(((-1.00000000000000)*(new_r22)*(sj5)))+(((cj5)*(new_r12)*(x154))));
evalcond[3]=((((-1.00000000000000)*(new_r10)*(sj5)*(x154)))+(((-1.00000000000000)*(new_r00)*(sj5)*(x153)))+(((-1.00000000000000)*(cj5)*(new_r20))));
evalcond[4]=((((-1.00000000000000)*(new_r01)*(sj5)*(x153)))+(((-1.00000000000000)*(new_r11)*(sj5)*(x154)))+(((-1.00000000000000)*(cj5)*(new_r21))));
evalcond[5]=((1.00000000000000)+(((-1.00000000000000)*(new_r02)*(sj5)*(x153)))+(((-1.00000000000000)*(new_r12)*(sj5)*(x154)))+(((-1.00000000000000)*(cj5)*(new_r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst8;
gconst8=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x155=((cj4)*(new_r12));
IKReal x156=((new_r02)*(sj4));
IKReal x157=((((-1.00000000000000)*(x156)))+(x155));
IKReal x158=((new_r12)*(sj4));
IKReal x159=((cj4)*(new_r02));
IKReal x160=((x159)+(x158));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x157;
evalcond[5]=x157;
evalcond[6]=x160;
evalcond[7]=x160;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IKReal evalcond[4];
IKReal x161=IKsin(j6);
IKReal x162=IKcos(j6);
evalcond[0]=((((-1.00000000000000)*(x161)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[1]=((((-1.00000000000000)*(x162)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x161));
evalcond[3]=((((-1.00000000000000)*(x162)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
IKReal x163=((cj4)*(new_r12));
IKReal x164=((new_r02)*(sj4));
IKReal x165=((((-1.00000000000000)*(x164)))+(x163));
IKReal x166=((new_r12)*(sj4));
IKReal x167=((cj4)*(new_r02));
IKReal x168=((x166)+(x167));
IKReal x169=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=x169;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x165;
evalcond[5]=x165;
evalcond[6]=x168;
evalcond[7]=((-1.00000000000000)*(x168));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x169;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IKReal evalcond[4];
IKReal x170=IKsin(j6);
IKReal x171=IKcos(j6);
evalcond[0]=((((-1.00000000000000)*(x170)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[1]=((((-1.00000000000000)*(x171)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[2]=((((cj4)*(new_r01)))+(((-1.00000000000000)*(x170)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x171));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst8)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst8)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst8)*(new_r21)), ((-1.00000000000000)*(gconst8)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IKReal evalcond[8];
IKReal x172=IKsin(j6);
IKReal x173=IKcos(j6);
evalcond[0]=((new_r20)+(((sj5)*(x173))));
evalcond[1]=((((-1.00000000000000)*(sj5)*(x172)))+(new_r21));
evalcond[2]=((((-1.00000000000000)*(x172)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[3]=((((-1.00000000000000)*(x173)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[4]=((((cj5)*(x172)))+(((cj4)*(new_r01)))+(((new_r11)*(sj4))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(x173)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
evalcond[6]=((((-1.00000000000000)*(new_r21)*(sj5)))+(x172)+(((cj4)*(cj5)*(new_r01)))+(((cj5)*(new_r11)*(sj4))));
evalcond[7]=((((-1.00000000000000)*(x173)))+(((cj4)*(cj5)*(new_r00)))+(((cj5)*(new_r10)*(sj4)))+(((-1.00000000000000)*(new_r20)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst7)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst7)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst7)*(new_r21)), ((-1.00000000000000)*(gconst7)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IKReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((new_r21)+(((-1.00000000000000)*(sj5)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst9;
gconst9=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst9)*(new_r12)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(new_r02)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst9)*(new_r12)*(sj5)), ((gconst9)*(new_r02)*(sj5)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[12];
IKReal x174=IKcos(j4);
IKReal x175=IKsin(j4);
evalcond[0]=((((new_r12)*(x174)))+(((-1.00000000000000)*(new_r02)*(x175))));
evalcond[1]=((((new_r02)*(x174)))+(((new_r12)*(x175)))+(((-1.00000000000000)*(sj5))));
evalcond[2]=((((new_r10)*(x174)))+(((-1.00000000000000)*(sj6)))+(((-1.00000000000000)*(new_r00)*(x175))));
evalcond[3]=((((new_r11)*(x174)))+(((-1.00000000000000)*(cj6)))+(((-1.00000000000000)*(new_r01)*(x175))));
evalcond[4]=((((new_r01)*(x174)))+(((new_r11)*(x175)))+(((cj5)*(sj6))));
evalcond[5]=((((new_r00)*(x174)))+(((new_r10)*(x175)))+(((-1.00000000000000)*(cj5)*(cj6))));
evalcond[6]=((((-1.00000000000000)*(new_r22)*(sj5)))+(((cj5)*(new_r12)*(x175)))+(((cj5)*(new_r02)*(x174))));
evalcond[7]=((((-1.00000000000000)*(new_r00)*(sj5)*(x174)))+(((-1.00000000000000)*(new_r10)*(sj5)*(x175)))+(((-1.00000000000000)*(cj5)*(new_r20))));
evalcond[8]=((((-1.00000000000000)*(new_r01)*(sj5)*(x174)))+(((-1.00000000000000)*(new_r11)*(sj5)*(x175)))+(((-1.00000000000000)*(cj5)*(new_r21))));
evalcond[9]=((((cj5)*(new_r01)*(x174)))+(((-1.00000000000000)*(new_r21)*(sj5)))+(sj6)+(((cj5)*(new_r11)*(x175))));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r02)*(sj5)*(x174)))+(((-1.00000000000000)*(new_r12)*(sj5)*(x175)))+(((-1.00000000000000)*(cj5)*(new_r22))));
evalcond[11]=((((-1.00000000000000)*(cj6)))+(((cj5)*(new_r10)*(x175)))+(((cj5)*(new_r00)*(x174)))+(((-1.00000000000000)*(new_r20)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "2ac375a0aaf420715f482953e36187a5"; }

IKFAST_API const char* getIKFastVersion() { return "56"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "ikbase.h"
namespace IKFAST_NAMESPACE {
#ifdef RAVE_REGISTER_BOOST
#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()
BOOST_TYPEOF_REGISTER_TYPE(IKSolution)
#endif
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, const std::vector<dReal>& vfreeinc) {
    std::vector<int> vfree(getNumFreeParameters());
    for(size_t i = 0; i < vfree.size(); ++i) {
        vfree[i] = getFreeParameters()[i];
    }
    return IkSolverBasePtr(new IkFastSolver<IKReal,IKSolution>(ik,vfree,vfreeinc,getNumJoints(),static_cast<IkParameterizationType>(getIKType()), boost::shared_ptr<void>(), getKinematicsHash(), penv));
}
} // end namespace
