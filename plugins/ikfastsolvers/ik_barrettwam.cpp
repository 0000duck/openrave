#define IKFAST_NAMESPACE ik_barrettwam
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 66 generated on 2013-07-25 00:01:43.699401
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==66);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.045)*x1);
x15=((1.0)*x5);
x16=((0.3)*x1);
x17=((1.0)*x11);
x18=((0.045)*x5);
x19=((1.0)*x1);
x20=((0.22)*x8);
x21=((1.0)*x12);
x22=((0.22)*x5);
x23=((1.0)*x6);
x24=((0.22)*x9);
x25=((0.22)*x6);
x26=(x0*x4);
x27=(x0*x2);
x28=(x2*x7);
x29=(x3*x4);
x30=(x0*x7);
x31=(x2*x3);
x32=(x3*x7);
x33=((1.0)*x29);
x34=((0.045)*x29);
x35=((0.045)*x26);
x36=(x19*x6);
x37=(x32*x6);
x38=(x4*x7*x9);
x39=(x15*x30);
x40=(x23*x30);
x41=(x14*x27);
x42=(x15*x32);
x43=(x23*x32);
x44=(x14*x31);
x45=((((-1.0)*x33))+((x1*x27)));
x46=(x26+((x1*x31)));
x47=((((-1.0)*x19*x29))+x27);
x48=((((-1.0)*x36))+((x28*x5)));
x49=((((-1.0)*x19*x27))+x33);
x50=((((-1.0)*x31))+(((-1.0)*x19*x26)));
x51=((((-1.0)*x26))+(((-1.0)*x19*x31)));
x52=(((x1*x15))+((x23*x28)));
x53=((-1.0)*x52);
x54=(x35+x44);
x55=(x46*x6);
x56=(x11*x48);
x57=(x45*x6);
x58=(x5*x51);
x59=(x50*x9);
x60=((((-1.0)*x39))+x57);
x61=((((-1.0)*x42))+x55);
x62=((((-1.0)*x40))+((x49*x5)));
x63=((((-1.0)*x43))+x58);
x64=(((x4*x7*x8))+((x52*x9)));
x65=(((x53*x8))+x38);
x66=(x11*x63);
x67=(((x47*x9))+((x61*x8)));
x68=(((x9*((x42+(((-1.0)*x23*x46))))))+((x47*x8)));
x69=(((x60*x8))+x59);
x70=(x12*x67);
x71=(((x50*x8))+((x9*((x39+(((-1.0)*x57)))))));
eerot[0]=(((x10*x71))+((x13*((((x12*x69))+((x11*x62)))))));
eerot[1]=(((x13*x71))+((x10*(((((-1.0)*x21*x69))+(((-1.0)*x17*x62)))))));
eerot[2]=(((x11*x69))+((x12*(((((-1.0)*x15*x49))+x40)))));
eetrans[0]=((0.22)+(((-1.0)*x34))+((x11*((((x20*x60))+((x24*x50))))))+((x5*(((((-0.3)*x29))+((x16*x27))))))+((x18*x30))+((x12*(((((-1.0)*x22*x49))+((x25*x30))))))+(((0.3)*x30*x6))+(((0.55)*x30))+x41+((x6*(((((-1.0)*x41))+x34)))));
eerot[3]=(((x13*((x70+x66))))+((x10*x68)));
eerot[4]=(((x10*(((((-1.0)*x21*x67))+(((-1.0)*x17*x63))))))+((x13*x68)));
eerot[5]=(((x12*((x43+(((-1.0)*x15*x51))))))+((x11*x67)));
eetrans[1]=((0.14)+((x18*x32))+(((-1.0)*x54*x6))+((x11*((((x20*x61))+((x24*x47))))))+((x12*((((x25*x32))+(((-1.0)*x22*x51))))))+(((0.55)*x32))+x54+((x5*((((x16*x31))+(((0.3)*x26))))))+(((0.3)*x37)));
eerot[6]=(((x10*x64))+((x13*((((x12*x65))+x56)))));
eerot[7]=(((x13*x64))+((x10*(((((-1.0)*x17*x48))+(((-1.0)*x21*x65)))))));
eerot[8]=(((x11*x65))+((x12*(((((-1.0)*x15*x28))+x36)))));
IkReal x72=((0.045)*x28);
eetrans[2]=((0.346)+(((-0.3)*x28*x5))+(((-1.0)*x72))+((x14*x5))+((x12*((((x1*x25))+(((-1.0)*x22*x28))))))+((x16*x6))+((x6*x72))+(((0.55)*x1))+((x11*((((x20*x53))+((x24*x4*x7)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.22)+(((-0.22)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.14)+(((-0.22)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346)+(((-0.22)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*py*r20))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*pz*r00)));
rxp0_2=((((-1.0)*px*r10))+((py*r00)));
rxp1_0=((((-1.0)*py*r21))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*pz*r01)));
rxp1_2=((((-1.0)*px*r11))+((py*r01)));
rxp2_0=((((-1.0)*py*r22))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*pz*r02)));
rxp2_2=((((-1.0)*px*r12))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x73=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));
j3array[0]=((-1.34027003705633)+(((-1.0)*x73)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+x73);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x74=cj2*cj2;
IkReal x75=sj3*sj3;
IkReal x76=cj3*cj3;
IkReal x77=((13.3333333333333)*cj3*sj3);
dummyeval[0]=((149.382716049383)+(((44.4444444444444)*x76))+(((24.4444444444444)*sj3))+(((13.3333333333333)*sj3*x74))+(((-2.0)*cj3*x74))+(((44.4444444444444)*x74*x75))+(((-1.0)*x74*x77))+x77+x75+x74+((x74*x76))+(((162.962962962963)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x78=((0.045)*cj2);
IkReal x79=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
IkReal x80=((((-1.0)*cj3*x78))+(((0.3)*cj2*sj3))+x78);
CheckValue<IkReal> x83 = IKatan2WithCheck(x79,x80,IKFAST_ATAN2_MAGTHRESH);
if(!x83.valid){
continue;
}
IkReal x81=((1.0)*(x83.value));
if((((x79*x79)+(x80*x80))) < -0.00001)
continue;
CheckValue<IkReal> x84=IKPowWithIntegerCheck(IKabs(IKsqrt(((x79*x79)+(x80*x80)))),-1);
if(!x84.valid){
continue;
}
if( ((pz*(x84.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x84.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x82=IKasin((pz*(x84.value)));
j1array[0]=((((-1.0)*x82))+(((-1.0)*x81)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x82+(((-1.0)*x81)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign((((sj1*(py*py)))+((sj1*(px*px)))));
dummyeval[0]=(((sj1*(py*py)))+((sj1*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x85=((1.0)*cj2*sj1);
gconst1=IKsign(((((-1.0)*x85*(py*py)))+(((-1.0)*x85*(px*px)))));
IkReal x86=((1.0)*cj2*sj1);
dummyeval[0]=((((-1.0)*x86*(px*px)))+(((-1.0)*x86*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((cj1*(px*px)))+((cj1*(py*py)))));
dummyeval[0]=(((cj1*(px*px)))+((cj1*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((sj1*(py*py)))+((sj1*(px*px)))));
dummyeval[0]=(((sj1*(py*py)))+((sj1*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x87=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x87;
evalcond[3]=x87;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x88=((110.0)*pz);
IkReal x89=((100.0)*pp);
CheckValue<IkReal> x90 = IKatan2WithCheck((gconst5*((((px*x88))+(((-21.25)*px))+(((-1.0)*px*x89))))),(gconst5*(((((-1.0)*py*x88))+(((21.25)*py))+((py*x89))))),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
j0array[0]=x90.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x91=IKsin(j0);
IkReal x92=IKcos(j0);
IkReal x93=(px*x91);
IkReal x94=(py*x92);
evalcond[0]=(((py*x91))+((px*x92)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x93+(((-1.0)*x94))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x94))+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*x93)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x679=((0.3)*sj3);
IkReal x680=((0.045)*px);
IkReal x681=((0.045)*py);
CheckValue<IkReal> x682 = IKatan2WithCheck((gconst4*((x680+(((-1.0)*cj3*x680))+((px*x679))))),(gconst4*(((((-1.0)*x681))+(((-1.0)*py*x679))+((cj3*x681))))),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
j0array[0]=x682.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x683=IKsin(j0);
IkReal x684=IKcos(j0);
IkReal x685=(px*x683);
IkReal x686=(py*x684);
evalcond[0]=(((px*x684))+((py*x683)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x685+(((0.3)*sj3))+(((-1.0)*x686)));
evalcond[2]=((-0.2125)+(((-0.09)*x685))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x687=((0.045)*sj3);
IkReal x688=((0.3)*cj3);
IkReal x689=(x688+x687);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x689))+(((-1.0)*pz)));
evalcond[3]=((0.55)+pz+x689);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x690=((110.0)*pz);
IkReal x691=((100.0)*pp);
CheckValue<IkReal> x692 = IKatan2WithCheck((gconst7*(((((-1.0)*px*x691))+(((-1.0)*px*x690))+(((-21.25)*px))))),(gconst7*(((((21.25)*py))+((py*x691))+((py*x690))))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
j0array[0]=x692.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x693=IKsin(j0);
IkReal x694=IKcos(j0);
IkReal x695=(px*x693);
IkReal x696=((1.0)*x694);
evalcond[0]=((((-1.0)*py*x693))+(((-1.0)*px*x696)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x695+(((-1.0)*py*x696))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x695))+(((0.09)*py*x694))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x697=((0.3)*sj3);
IkReal x698=((0.045)*px);
IkReal x699=((0.045)*py);
CheckValue<IkReal> x700 = IKatan2WithCheck((gconst6*(((((-1.0)*cj3*x698))+((px*x697))+x698))),(gconst6*((((cj3*x699))+(((-1.0)*x699))+(((-1.0)*py*x697))))),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
j0array[0]=x700.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x701=IKsin(j0);
IkReal x702=IKcos(j0);
IkReal x703=(px*x701);
IkReal x704=((1.0)*x702);
evalcond[0]=((((-1.0)*px*x704))+(((-1.0)*py*x701)));
evalcond[1]=((0.045)+(((-1.0)*py*x704))+(((-0.045)*cj3))+(((0.3)*sj3))+x703);
evalcond[2]=((-0.2125)+(((0.09)*py*x702))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((0.09)*(py*py)))+(((0.09)*(px*px)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x705=((0.33)*cj3);
IkReal x706=((0.027)*cj3);
IkReal x707=((0.00405)*sj3);
IkReal x708=((0.0495)*sj3);
CheckValue<IkReal> x709 = IKatan2WithCheck((gconst9*(((((-1.0)*pp*px))+(((0.0495)*py))+((px*x708))+((px*x705))+(((0.3925)*px))+((py*x707))+((py*x706))))),(gconst9*(((((-1.0)*py*x708))+(((-1.0)*py*x705))+(((0.0495)*px))+((px*x707))+((px*x706))+(((-0.3925)*py))+((pp*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x709.valid){
continue;
}
j0array[0]=x709.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x710=IKsin(j0);
IkReal x711=IKcos(j0);
IkReal x712=(px*x710);
IkReal x713=(py*x711);
IkReal x714=(px*x711);
IkReal x715=(py*x710);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x715+x714);
evalcond[1]=((0.045)+(((-1.0)*x713))+(((-0.045)*cj3))+(((0.3)*sj3))+x712);
evalcond[2]=((-0.2125)+(((0.09)*x713))+(((1.1)*x715))+(((1.1)*x714))+(((-1.0)*pp))+(((-0.09)*x712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x716=((0.3)*py);
IkReal x717=((0.045)*px);
IkReal x718=((0.045)*py);
IkReal x719=((0.3)*px);
CheckValue<IkReal> x720 = IKatan2WithCheck((gconst8*(((((-0.55)*py))+(((-1.0)*cj3*x717))+(((-1.0)*cj3*x716))+((sj3*x719))+x717+(((-1.0)*sj3*x718))))),(gconst8*(((((-0.55)*px))+(((-1.0)*cj3*x719))+(((-1.0)*x718))+((cj3*x718))+(((-1.0)*sj3*x716))+(((-1.0)*sj3*x717))))),IKFAST_ATAN2_MAGTHRESH);
if(!x720.valid){
continue;
}
j0array[0]=x720.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x721=IKsin(j0);
IkReal x722=IKcos(j0);
IkReal x723=(px*x721);
IkReal x724=(py*x722);
IkReal x725=(px*x722);
IkReal x726=(py*x721);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x725+x726);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x724))+(((0.3)*sj3))+x723);
evalcond[2]=((-0.2125)+(((1.1)*x725))+(((1.1)*x726))+(((0.09)*x724))+(((-1.0)*pp))+(((-0.09)*x723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((1.1)*(py*py)))+(((1.1)*(px*px)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x727=(cj3*py);
IkReal x728=(py*sj3);
IkReal x729=((1.0)*pp);
IkReal x730=(cj3*px);
IkReal x731=(px*sj3);
CheckValue<IkReal> x732 = IKatan2WithCheck((gconst11*(((((-0.0495)*px))+(((0.0495)*x730))+(((-0.33)*x731))+(((-0.00405)*x727))+(((0.027)*x728))+(((-1.0)*py*x729))+(((-0.20845)*py))))),(gconst11*(((((0.0495)*py))+(((0.33)*x728))+(((-1.0)*px*x729))+(((-0.0495)*x727))+(((-0.00405)*x730))+(((0.027)*x731))+(((-0.20845)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x732.valid){
continue;
}
j0array[0]=x732.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x733=IKcos(j0);
IkReal x734=IKsin(j0);
IkReal x735=(px*x734);
IkReal x736=((1.0)*x733);
IkReal x737=(py*x734);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x735+(((-1.0)*py*x736)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x737))+(((-1.0)*px*x736)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*x737))+(((-1.1)*px*x733))+(((-0.09)*x735))+(((0.09)*py*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x738=((0.3)*py);
IkReal x739=((0.045)*px);
IkReal x740=((0.045)*py);
IkReal x741=((0.3)*px);
CheckValue<IkReal> x742 = IKatan2WithCheck((gconst10*(((((-0.55)*py))+(((-1.0)*cj3*x738))+(((-1.0)*x739))+((cj3*x739))+(((-1.0)*sj3*x741))+(((-1.0)*sj3*x740))))),(gconst10*(((((-1.0)*cj3*x740))+(((-1.0)*cj3*x741))+(((-0.55)*px))+((sj3*x738))+(((-1.0)*sj3*x739))+x740))),IKFAST_ATAN2_MAGTHRESH);
if(!x742.valid){
continue;
}
j0array[0]=x742.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x743=IKcos(j0);
IkReal x744=IKsin(j0);
IkReal x745=(px*x744);
IkReal x746=((1.0)*x743);
IkReal x747=(py*x744);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((-1.0)*py*x746))+(((0.3)*sj3))+x745);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*px*x746))+(((-0.3)*cj3))+(((-1.0)*x747)));
evalcond[2]=((-0.2125)+(((0.09)*py*x743))+(((-1.1)*px*x743))+(((-1.1)*x747))+(((-1.0)*pp))+(((-0.09)*x745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x748=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x748;
evalcond[3]=x748;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x750=IKPowWithIntegerCheck(py,-1);
if(!x750.valid){
continue;
}
IkReal x749=x750.value;
cj0array[0]=((((-12.2222222222222)*pz*x749))+(((2.36111111111111)*x749))+(((11.1111111111111)*pp*x749)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x753=IKPowWithIntegerCheck(py,-1);
if(!x753.valid){
continue;
}
IkReal x751=x753.value;
IkReal x752=((0.045)*x751);
cj0array[0]=((((-1.0)*cj3*x752))+(((0.3)*sj3*x751))+x752);
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x754=((0.045)*sj3);
IkReal x755=((0.3)*cj3);
IkReal x756=(x755+x754);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x756)));
evalcond[3]=((0.55)+pz+x756);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x758=IKPowWithIntegerCheck(py,-1);
if(!x758.valid){
continue;
}
IkReal x757=x758.value;
cj0array[0]=((((11.1111111111111)*pp*x757))+(((2.36111111111111)*x757))+(((12.2222222222222)*pz*x757)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x761=IKPowWithIntegerCheck(py,-1);
if(!x761.valid){
continue;
}
IkReal x759=x761.value;
IkReal x760=((0.045)*x759);
cj0array[0]=((((-1.0)*cj3*x760))+(((0.3)*sj3*x759))+x760);
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x762=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x762;
evalcond[3]=x762;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x764=IKPowWithIntegerCheck(px,-1);
if(!x764.valid){
continue;
}
IkReal x763=x764.value;
sj0array[0]=((((-11.1111111111111)*pp*x763))+(((12.2222222222222)*pz*x763))+(((-2.36111111111111)*x763)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((0.045)+((px*(IKsin(j0))))+(((-0.045)*cj3))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x767=IKPowWithIntegerCheck(px,-1);
if(!x767.valid){
continue;
}
IkReal x765=x767.value;
IkReal x766=((0.045)*x765);
sj0array[0]=(((cj3*x766))+(((-0.3)*sj3*x765))+(((-1.0)*x766)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x768=((0.045)*sj3);
IkReal x769=((0.3)*cj3);
IkReal x770=(x768+x769);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x770)));
evalcond[3]=((0.55)+pz+x770);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x772=IKPowWithIntegerCheck(px,-1);
if(!x772.valid){
continue;
}
IkReal x771=x772.value;
sj0array[0]=((((-12.2222222222222)*pz*x771))+(((-11.1111111111111)*pp*x771))+(((-2.36111111111111)*x771)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((0.045)+((px*(IKsin(j0))))+(((-0.045)*cj3))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x775=IKPowWithIntegerCheck(px,-1);
if(!x775.valid){
continue;
}
IkReal x773=x775.value;
IkReal x774=((0.045)*x773);
sj0array[0]=(((cj3*x774))+(((-0.3)*sj3*x773))+(((-1.0)*x774)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x777=IKPowWithIntegerCheck(py,-1);
if(!x777.valid){
continue;
}
IkReal x776=x777.value;
if( IKabs(((0.00909090909090909)*x776*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x776*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x776*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))+IKsqr((x776*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x776*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))), (x776*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x778=IKsin(j0);
IkReal x779=IKcos(j0);
IkReal x780=(py*x779);
IkReal x781=(py*x778);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x781);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x780)));
evalcond[2]=((-0.2125)+(((0.09)*x780))+(((1.1)*x781))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x783=IKPowWithIntegerCheck(py,-1);
if(!x783.valid){
continue;
}
IkReal x782=x783.value;
if( IKabs((x782*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x782*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x782*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x782*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x782*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x782*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x784=IKsin(j0);
IkReal x785=IKcos(j0);
IkReal x786=(py*x785);
IkReal x787=(py*x784);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x787);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x786)));
evalcond[2]=((-0.2125)+(((0.09)*x786))+(((1.1)*x787))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x788 = IKatan2WithCheck((gconst12*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst12*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x788.valid){
continue;
}
j0array[0]=x788.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x789=IKsin(j0);
IkReal x790=IKcos(j0);
IkReal x791=(py*x790);
IkReal x792=(py*x789);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x792);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x791)));
evalcond[2]=((-0.2125)+(((0.09)*x791))+(((1.1)*x792))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x794=IKPowWithIntegerCheck(py,-1);
if(!x794.valid){
continue;
}
IkReal x793=x794.value;
if( IKabs(((0.00909090909090909)*x793*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x793*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x793*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))+IKsqr((x793*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x793*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))), (x793*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x795=IKcos(j0);
IkReal x796=IKsin(j0);
IkReal x797=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x796*x797))+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-1.0)*x795*x797))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x795))+(((-1.0)*pp))+(((-1.1)*py*x796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x799=IKPowWithIntegerCheck(py,-1);
if(!x799.valid){
continue;
}
IkReal x798=x799.value;
if( IKabs((x798*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x798*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x798*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x798*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x798*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x798*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x800=IKcos(j0);
IkReal x801=IKsin(j0);
IkReal x802=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x801*x802)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x800*x802))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x801))+(((-1.0)*pp))+(((0.09)*py*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x803 = IKatan2WithCheck((gconst13*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst13*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x803.valid){
continue;
}
j0array[0]=x803.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x804=IKcos(j0);
IkReal x805=IKsin(j0);
IkReal x806=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x805*x806))+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-1.0)*x804*x806))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x805))+(((-1.0)*pp))+(((0.09)*py*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x808=IKPowWithIntegerCheck(px,-1);
if(!x808.valid){
continue;
}
IkReal x807=x808.value;
if( IKabs((x807*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x807*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x807*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x807*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x807*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x807*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x809=IKcos(j0);
IkReal x810=IKsin(j0);
IkReal x811=(px*x810);
IkReal x812=(px*x809);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x812);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x811);
evalcond[2]=((-0.2125)+(((1.1)*x812))+(((-1.0)*pp))+(((-0.09)*x811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x814=IKPowWithIntegerCheck(px,-1);
if(!x814.valid){
continue;
}
IkReal x813=x814.value;
if( IKabs(((0.111111111111111)*x813*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x813*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x813*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x813*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x813*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x813*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x815=IKcos(j0);
IkReal x816=IKsin(j0);
IkReal x817=(px*x816);
IkReal x818=(px*x815);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x818);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x817);
evalcond[2]=((-0.2125)+(((1.1)*x818))+(((-1.0)*pp))+(((-0.09)*x817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x819 = IKatan2WithCheck((gconst14*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst14*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x819.valid){
continue;
}
j0array[0]=x819.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x820=IKcos(j0);
IkReal x821=IKsin(j0);
IkReal x822=(px*x821);
IkReal x823=(px*x820);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x823);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x822);
evalcond[2]=((-0.2125)+(((-0.09)*x822))+(((-1.0)*pp))+(((1.1)*x823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x825=IKPowWithIntegerCheck(px,-1);
if(!x825.valid){
continue;
}
IkReal x824=x825.value;
if( IKabs(((0.111111111111111)*x824*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x824*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x824*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x824*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x824*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x824*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x826=IKsin(j0);
IkReal x827=IKcos(j0);
IkReal x828=(px*x826);
IkReal x829=(px*x827);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x828);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x829)));
evalcond[2]=((-0.2125)+(((-0.09)*x828))+(((-1.0)*pp))+(((-1.1)*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x831=IKPowWithIntegerCheck(px,-1);
if(!x831.valid){
continue;
}
IkReal x830=x831.value;
if( IKabs((x830*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x830*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x830*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x830*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x830*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x830*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x832=IKsin(j0);
IkReal x833=IKcos(j0);
IkReal x834=(px*x832);
IkReal x835=(px*x833);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x834);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x835)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x834))+(((-1.1)*x835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x836 = IKatan2WithCheck((gconst15*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst15*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x836.valid){
continue;
}
j0array[0]=x836.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x837=IKsin(j0);
IkReal x838=IKcos(j0);
IkReal x839=(px*x837);
IkReal x840=(px*x838);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x839);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x840)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x839))+(((-1.1)*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x841=(px*sj3);
IkReal x842=(py*sj1);
IkReal x843=((0.3)*cj3);
IkReal x844=((0.045)*cj3);
IkReal x845=(px*sj1);
IkReal x846=((1.0)*cj1*pz);
CheckValue<IkReal> x847 = IKatan2WithCheck((gconst3*(((((-0.3)*sj1*x841))+(((-1.0)*py*x846))+(((0.045)*py*sj3))+(((-0.045)*x845))+((py*x843))+((x844*x845))+(((0.55)*py))))),(gconst3*(((((0.3)*sj3*x842))+(((-1.0)*px*x846))+(((-1.0)*x842*x844))+(((0.045)*x841))+(((0.045)*x842))+(((0.55)*px))+((px*x843))))),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
j0array[0]=x847.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x848=IKsin(j0);
IkReal x849=IKcos(j0);
IkReal x850=((0.3)*cj3);
IkReal x851=((0.045)*sj3);
IkReal x852=(cj1*pz);
IkReal x853=(px*x848);
IkReal x854=(px*x849);
IkReal x855=(py*x848);
IkReal x856=(py*x849);
IkReal x857=(sj1*x855);
evalcond[0]=(((cj1*x855))+((cj1*x854))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-1.0)*x856))+(((-0.045)*cj3))+(((0.3)*sj3))+x853);
evalcond[2]=((-0.55)+(((-1.0)*x850))+(((-1.0)*x851))+((sj1*x854))+x852+x857);
evalcond[3]=((((-1.0)*x855))+(((-1.0)*x854))+((sj1*x851))+((sj1*x850))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-0.09)*x853))+(((1.1)*x857))+(((1.1)*x852))+(((-1.0)*pp))+(((0.09)*x856))+(((1.1)*sj1*x854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x858=((0.045)*cj1);
IkReal x859=(pz*sj1);
IkReal x860=((0.3)*cj1*sj3);
CheckValue<IkReal> x861 = IKatan2WithCheck((gconst2*((((cj3*px*x858))+((py*x859))+(((-1.0)*px*x860))+(((-1.0)*px*x858))))),(gconst2*((((px*x859))+(((-1.0)*cj3*py*x858))+((py*x860))+((py*x858))))),IKFAST_ATAN2_MAGTHRESH);
if(!x861.valid){
continue;
}
j0array[0]=x861.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x862=IKsin(j0);
IkReal x863=IKcos(j0);
IkReal x864=((0.3)*cj3);
IkReal x865=((0.045)*sj3);
IkReal x866=(cj1*pz);
IkReal x867=(px*x862);
IkReal x868=(px*x863);
IkReal x869=(py*x862);
IkReal x870=(py*x863);
IkReal x871=(sj1*x869);
evalcond[0]=(((cj1*x869))+((cj1*x868))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-1.0)*x870))+(((-0.045)*cj3))+(((0.3)*sj3))+x867);
evalcond[2]=((-0.55)+(((-1.0)*x864))+(((-1.0)*x865))+((sj1*x868))+x866+x871);
evalcond[3]=((((-1.0)*x869))+(((-1.0)*x868))+((sj1*x864))+((sj1*x865))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*x866))+(((1.1)*x871))+(((-0.09)*x867))+(((-1.0)*pp))+(((0.09)*x870))+(((1.1)*sj1*x868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign((((cj1*(px*px)))+((cj1*(py*py)))));
dummyeval[0]=(((cj1*(px*px)))+((cj1*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign((((sj1*(py*py)))+((sj1*(px*px)))));
dummyeval[0]=(((sj1*(py*py)))+((sj1*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x872=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x872;
evalcond[3]=x872;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x873=((110.0)*pz);
IkReal x874=((100.0)*pp);
CheckValue<IkReal> x875 = IKatan2WithCheck((gconst19*(((((-21.25)*px))+((px*x873))+(((-1.0)*px*x874))))),(gconst19*(((((21.25)*py))+(((-1.0)*py*x873))+((py*x874))))),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
j0array[0]=x875.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x876=IKsin(j0);
IkReal x877=IKcos(j0);
IkReal x878=(px*x876);
IkReal x879=((1.0)*x877);
evalcond[0]=((((-1.0)*py*x876))+(((-1.0)*px*x879)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*py*x879))+x878+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*py*x877))+(((1.1)*pz))+(((0.09)*x878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x880=((0.3)*sj3);
IkReal x881=((0.045)*px);
IkReal x882=((0.045)*py);
CheckValue<IkReal> x883 = IKatan2WithCheck((gconst18*((((cj3*x881))+(((-1.0)*x881))+(((-1.0)*px*x880))))),(gconst18*(((((-1.0)*cj3*x882))+((py*x880))+x882))),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
j0array[0]=x883.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x884=IKsin(j0);
IkReal x885=IKcos(j0);
IkReal x886=(px*x884);
IkReal x887=((1.0)*x885);
evalcond[0]=((((-1.0)*py*x884))+(((-1.0)*px*x887)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*py*x887))+x886+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x886))+(((-0.09)*py*x885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x888=((0.045)*sj3);
IkReal x889=((0.3)*cj3);
IkReal x890=(x889+x888);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x890))+(((-1.0)*pz)));
evalcond[3]=((0.55)+pz+x890);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x891=((110.0)*pz);
IkReal x892=((100.0)*pp);
CheckValue<IkReal> x893 = IKatan2WithCheck((gconst21*(((((-21.25)*px))+(((-1.0)*px*x892))+(((-1.0)*px*x891))))),(gconst21*((((py*x892))+((py*x891))+(((21.25)*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x893.valid){
continue;
}
j0array[0]=x893.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x894=IKsin(j0);
IkReal x895=IKcos(j0);
IkReal x896=(px*x894);
IkReal x897=(py*x895);
evalcond[0]=(((py*x894))+((px*x895)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x897))+x896+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x896))+(((-0.09)*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x898=((0.3)*sj3);
IkReal x899=((0.045)*px);
IkReal x900=((0.045)*py);
CheckValue<IkReal> x901 = IKatan2WithCheck((gconst20*((((cj3*x899))+(((-1.0)*x899))+(((-1.0)*px*x898))))),(gconst20*((((py*x898))+(((-1.0)*cj3*x900))+x900))),IKFAST_ATAN2_MAGTHRESH);
if(!x901.valid){
continue;
}
j0array[0]=x901.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x902=IKsin(j0);
IkReal x903=IKcos(j0);
IkReal x904=(px*x902);
IkReal x905=(py*x903);
evalcond[0]=(((px*x903))+((py*x902)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x905))+x904+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x904))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(((((-0.09)*(px*px)))+(((-0.09)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x906=(py*sj3);
IkReal x907=((0.33)*cj3);
IkReal x908=((0.027)*cj3);
IkReal x909=(px*sj3);
CheckValue<IkReal> x910 = IKatan2WithCheck((gconst23*(((((-0.00405)*x906))+(((-1.0)*pp*px))+(((0.0495)*x909))+((px*x907))+(((-1.0)*py*x908))+(((-0.0495)*py))+(((0.3925)*px))))),(gconst23*(((((-0.00405)*x909))+(((-1.0)*px*x908))+(((-0.0495)*x906))+(((-1.0)*py*x907))+(((-0.0495)*px))+(((-0.3925)*py))+((pp*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
j0array[0]=x910.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x911=IKsin(j0);
IkReal x912=IKcos(j0);
IkReal x913=(px*x911);
IkReal x914=(py*x912);
IkReal x915=(px*x912);
IkReal x916=(py*x911);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x916+x915);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x914))+x913+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x916))+(((1.1)*x915))+(((-1.0)*pp))+(((-0.09)*x914))+(((0.09)*x913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x917=((0.3)*py);
IkReal x918=((0.045)*px);
IkReal x919=((0.045)*py);
IkReal x920=((0.3)*px);
CheckValue<IkReal> x921 = IKatan2WithCheck((gconst22*(((((-0.55)*py))+(((-1.0)*cj3*x917))+(((-1.0)*sj3*x920))+(((-1.0)*x918))+((cj3*x918))+(((-1.0)*sj3*x919))))),(gconst22*(((((-0.55)*px))+(((-1.0)*cj3*x919))+(((-1.0)*cj3*x920))+((sj3*x917))+(((-1.0)*sj3*x918))+x919))),IKFAST_ATAN2_MAGTHRESH);
if(!x921.valid){
continue;
}
j0array[0]=x921.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x922=IKsin(j0);
IkReal x923=IKcos(j0);
IkReal x924=(px*x922);
IkReal x925=(py*x923);
IkReal x926=(px*x923);
IkReal x927=(py*x922);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x926+x927);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x925))+x924+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x925))+(((1.1)*x926))+(((1.1)*x927))+(((-1.0)*pp))+(((0.09)*x924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((1.1)*(py*py)))+(((1.1)*(px*px)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x928=(cj3*py);
IkReal x929=(py*sj3);
IkReal x930=((1.0)*pp);
IkReal x931=(cj3*px);
IkReal x932=(px*sj3);
CheckValue<IkReal> x933 = IKatan2WithCheck((gconst25*(((((0.33)*x932))+(((0.0495)*px))+(((-0.0495)*x931))+(((0.027)*x929))+(((-1.0)*py*x930))+(((-0.00405)*x928))+(((-0.20845)*py))))),(gconst25*(((((0.0495)*x928))+(((-1.0)*px*x930))+(((-0.0495)*py))+(((-0.33)*x929))+(((0.027)*x932))+(((-0.00405)*x931))+(((-0.20845)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x933.valid){
continue;
}
j0array[0]=x933.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x934=IKcos(j0);
IkReal x935=IKsin(j0);
IkReal x936=(px*x935);
IkReal x937=((1.0)*x934);
IkReal x938=(py*x935);
evalcond[0]=((-0.045)+(((0.045)*cj3))+(((-1.0)*py*x937))+x936+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*px*x937))+(((-1.0)*x938)));
evalcond[2]=((-0.2125)+(((-1.1)*x938))+(((-0.09)*py*x934))+(((-1.1)*px*x934))+(((-1.0)*pp))+(((0.09)*x936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x939=((0.3)*py);
IkReal x940=((0.045)*px);
IkReal x941=((0.045)*py);
IkReal x942=((0.3)*px);
CheckValue<IkReal> x943 = IKatan2WithCheck((gconst24*(((((-0.55)*py))+((sj3*x942))+(((-1.0)*cj3*x940))+(((-1.0)*cj3*x939))+x940+(((-1.0)*sj3*x941))))),(gconst24*(((((-0.55)*px))+(((-1.0)*sj3*x939))+(((-1.0)*x941))+(((-1.0)*cj3*x942))+((cj3*x941))+(((-1.0)*sj3*x940))))),IKFAST_ATAN2_MAGTHRESH);
if(!x943.valid){
continue;
}
j0array[0]=x943.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x944=IKcos(j0);
IkReal x945=IKsin(j0);
IkReal x946=(px*x945);
IkReal x947=((1.0)*x944);
IkReal x948=(py*x945);
evalcond[0]=((-0.045)+(((-1.0)*py*x947))+(((0.045)*cj3))+x946+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x948))+(((-1.0)*px*x947)));
evalcond[2]=((-0.2125)+(((-1.1)*x948))+(((0.09)*x946))+(((-1.0)*pp))+(((-0.09)*py*x944))+(((-1.1)*px*x944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x949=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x949;
evalcond[3]=x949;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x951=IKPowWithIntegerCheck(py,-1);
if(!x951.valid){
continue;
}
IkReal x950=x951.value;
cj0array[0]=((((-11.1111111111111)*pp*x950))+(((12.2222222222222)*pz*x950))+(((-2.36111111111111)*x950)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x954=IKPowWithIntegerCheck(py,-1);
if(!x954.valid){
continue;
}
IkReal x952=x954.value;
IkReal x953=((0.045)*x952);
cj0array[0]=(((cj3*x953))+(((-0.3)*sj3*x952))+(((-1.0)*x953)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x955=((0.045)*sj3);
IkReal x956=((0.3)*cj3);
IkReal x957=(x956+x955);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x957)));
evalcond[3]=((0.55)+pz+x957);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x959=IKPowWithIntegerCheck(py,-1);
if(!x959.valid){
continue;
}
IkReal x958=x959.value;
cj0array[0]=((((-11.1111111111111)*pp*x958))+(((-12.2222222222222)*pz*x958))+(((-2.36111111111111)*x958)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x962=IKPowWithIntegerCheck(py,-1);
if(!x962.valid){
continue;
}
IkReal x960=x962.value;
IkReal x961=((0.045)*x960);
cj0array[0]=(((cj3*x961))+(((-0.3)*sj3*x960))+(((-1.0)*x961)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x963=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x963;
evalcond[3]=x963;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x965=IKPowWithIntegerCheck(px,-1);
if(!x965.valid){
continue;
}
IkReal x964=x965.value;
sj0array[0]=((((11.1111111111111)*pp*x964))+(((-12.2222222222222)*pz*x964))+(((2.36111111111111)*x964)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+((px*(IKsin(j0))))+(((-0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x968=IKPowWithIntegerCheck(px,-1);
if(!x968.valid){
continue;
}
IkReal x966=x968.value;
IkReal x967=((0.045)*x966);
sj0array[0]=((((-1.0)*cj3*x967))+(((0.3)*sj3*x966))+x967);
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x969=((0.045)*sj3);
IkReal x970=((0.3)*cj3);
IkReal x971=(x970+x969);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x971)));
evalcond[3]=((0.55)+pz+x971);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x973=IKPowWithIntegerCheck(px,-1);
if(!x973.valid){
continue;
}
IkReal x972=x973.value;
sj0array[0]=((((12.2222222222222)*pz*x972))+(((11.1111111111111)*pp*x972))+(((2.36111111111111)*x972)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+((px*(IKsin(j0))))+(((-0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x976=IKPowWithIntegerCheck(px,-1);
if(!x976.valid){
continue;
}
IkReal x974=x976.value;
IkReal x975=((0.045)*x974);
sj0array[0]=((((-1.0)*cj3*x975))+x975+(((0.3)*sj3*x974)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x978=IKPowWithIntegerCheck(py,-1);
if(!x978.valid){
continue;
}
IkReal x977=x978.value;
if( IKabs(((0.00909090909090909)*x977*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x977*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x977*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))+IKsqr((x977*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x977*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))), (x977*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x979=IKsin(j0);
IkReal x980=IKcos(j0);
IkReal x981=(py*x980);
IkReal x982=(py*x979);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x982);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x981))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x981))+(((-1.0)*pp))+(((1.1)*x982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x984=IKPowWithIntegerCheck(py,-1);
if(!x984.valid){
continue;
}
IkReal x983=x984.value;
if( IKabs((x983*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x983*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x983*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x983*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x983*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x983*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x985=IKsin(j0);
IkReal x986=IKcos(j0);
IkReal x987=(py*x986);
IkReal x988=(py*x985);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x988);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x987))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x987))+(((-1.0)*pp))+(((1.1)*x988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x989 = IKatan2WithCheck((gconst26*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst26*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x989.valid){
continue;
}
j0array[0]=x989.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x990=IKsin(j0);
IkReal x991=IKcos(j0);
IkReal x992=(py*x991);
IkReal x993=(py*x990);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x993);
evalcond[1]=((-0.045)+(((-1.0)*x992))+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x993))+(((-1.0)*pp))+(((-0.09)*x992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x995=IKPowWithIntegerCheck(py,-1);
if(!x995.valid){
continue;
}
IkReal x994=x995.value;
if( IKabs(((0.00909090909090909)*x994*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x994*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x994*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))+IKsqr((x994*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x994*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))), (x994*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x996=IKsin(j0);
IkReal x997=IKcos(j0);
IkReal x998=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x996*x998)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x997*x998))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x996))+(((-1.0)*pp))+(((-0.09)*py*x997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1000=IKPowWithIntegerCheck(py,-1);
if(!x1000.valid){
continue;
}
IkReal x999=x1000.value;
if( IKabs((x999*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x999*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x999*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x999*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x999*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x999*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1001=IKsin(j0);
IkReal x1002=IKcos(j0);
IkReal x1003=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1001*x1003)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1002*x1003))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x1001))+(((-0.09)*py*x1002))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1004 = IKatan2WithCheck((gconst27*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst27*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1004.valid){
continue;
}
j0array[0]=x1004.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1005=IKsin(j0);
IkReal x1006=IKcos(j0);
IkReal x1007=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1005*x1007)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1006*x1007))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x1005))+(((-0.09)*py*x1006))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1009=IKPowWithIntegerCheck(px,-1);
if(!x1009.valid){
continue;
}
IkReal x1008=x1009.value;
if( IKabs((x1008*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1008*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1008*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1008*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1008*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x1008*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1010=IKsin(j0);
IkReal x1011=IKcos(j0);
IkReal x1012=(px*x1010);
IkReal x1013=(px*x1011);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1013+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1012+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1012))+(((1.1)*x1013))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1015=IKPowWithIntegerCheck(px,-1);
if(!x1015.valid){
continue;
}
IkReal x1014=x1015.value;
if( IKabs(((0.111111111111111)*x1014*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1014*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1014*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1014*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1014*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1014*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1016=IKsin(j0);
IkReal x1017=IKcos(j0);
IkReal x1018=(px*x1016);
IkReal x1019=(px*x1017);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1019+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1018+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1018))+(((1.1)*x1019))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1020 = IKatan2WithCheck((gconst28*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst28*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1020.valid){
continue;
}
j0array[0]=x1020.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1021=IKsin(j0);
IkReal x1022=IKcos(j0);
IkReal x1023=(px*x1021);
IkReal x1024=(px*x1022);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1024+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1023+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1023))+(((-1.0)*pp))+(((1.1)*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(px,-1);
if(!x1026.valid){
continue;
}
IkReal x1025=x1026.value;
if( IKabs(((0.111111111111111)*x1025*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1025*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1025*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1025*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1025*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1025*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1027=IKsin(j0);
IkReal x1028=IKcos(j0);
IkReal x1029=(px*x1027);
IkReal x1030=(px*x1028);
evalcond[0]=((-0.045)+x1029+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1030))+(((-0.3)*cj3)));
evalcond[2]=((-0.2125)+(((-1.1)*x1030))+(((0.09)*x1029))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(px,-1);
if(!x1032.valid){
continue;
}
IkReal x1031=x1032.value;
if( IKabs((x1031*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1031*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1031*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1031*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1031*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x1031*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1033=IKsin(j0);
IkReal x1034=IKcos(j0);
IkReal x1035=(px*x1033);
IkReal x1036=(px*x1034);
evalcond[0]=((-0.045)+x1035+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1036))+(((-0.3)*cj3)));
evalcond[2]=((-0.2125)+(((-1.1)*x1036))+(((0.09)*x1035))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1037 = IKatan2WithCheck((gconst29*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst29*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1037.valid){
continue;
}
j0array[0]=x1037.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1038=IKsin(j0);
IkReal x1039=IKcos(j0);
IkReal x1040=(px*x1038);
IkReal x1041=(px*x1039);
evalcond[0]=((-0.045)+x1040+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1041)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*x1041))+(((0.09)*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1042=(px*sj3);
IkReal x1043=((0.3)*cj3);
IkReal x1044=((0.3)*sj1);
IkReal x1045=(py*sj3);
IkReal x1046=((1.0)*cj1*pz);
IkReal x1047=((0.045)*py*sj1);
IkReal x1048=((0.045)*px*sj1);
CheckValue<IkReal> x1049 = IKatan2WithCheck((gconst17*(((((-1.0)*cj3*x1048))+x1048+((x1042*x1044))+((py*x1043))+(((-1.0)*py*x1046))+(((0.55)*py))+(((0.045)*x1045))))),(gconst17*(((((-1.0)*x1044*x1045))+((px*x1043))+(((-1.0)*px*x1046))+((cj3*x1047))+(((0.55)*px))+(((0.045)*x1042))+(((-1.0)*x1047))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1049.valid){
continue;
}
j0array[0]=x1049.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1050=IKsin(j0);
IkReal x1051=IKcos(j0);
IkReal x1052=((1.1)*sj1);
IkReal x1053=((0.3)*cj3);
IkReal x1054=((0.045)*sj3);
IkReal x1055=((1.0)*cj1);
IkReal x1056=(cj1*pz);
IkReal x1057=(px*x1050);
IkReal x1058=(px*x1051);
IkReal x1059=(py*x1050);
IkReal x1060=(py*x1051);
evalcond[0]=((((-1.0)*x1055*x1059))+(((-1.0)*x1055*x1058))+((pz*sj1)));
evalcond[1]=((-0.045)+x1057+(((0.045)*cj3))+(((-1.0)*x1060))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1054))+(((-1.0)*x1053))+x1056+((sj1*x1059))+((sj1*x1058)));
evalcond[3]=(((sj1*x1054))+((sj1*x1053))+(((-1.0)*x1058))+(((-1.0)*x1059))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+((x1052*x1058))+((x1052*x1059))+(((1.1)*x1056))+(((-1.0)*pp))+(((-0.09)*x1060))+(((0.09)*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1061=((0.045)*cj1);
IkReal x1062=(pz*sj1);
IkReal x1063=((0.3)*cj1*sj3);
CheckValue<IkReal> x1064 = IKatan2WithCheck((gconst16*((((py*x1062))+((px*x1061))+((px*x1063))+(((-1.0)*cj3*px*x1061))))),(gconst16*(((((-1.0)*py*x1063))+(((-1.0)*py*x1061))+((px*x1062))+((cj3*py*x1061))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1064.valid){
continue;
}
j0array[0]=x1064.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1065=IKsin(j0);
IkReal x1066=IKcos(j0);
IkReal x1067=((1.1)*sj1);
IkReal x1068=((0.3)*cj3);
IkReal x1069=((0.045)*sj3);
IkReal x1070=((1.0)*cj1);
IkReal x1071=(cj1*pz);
IkReal x1072=(px*x1065);
IkReal x1073=(px*x1066);
IkReal x1074=(py*x1065);
IkReal x1075=(py*x1066);
evalcond[0]=((((-1.0)*x1070*x1074))+(((-1.0)*x1070*x1073))+((pz*sj1)));
evalcond[1]=((-0.045)+x1072+(((0.045)*cj3))+(((-1.0)*x1075))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x1071+((sj1*x1073))+((sj1*x1074))+(((-1.0)*x1069))+(((-1.0)*x1068)));
evalcond[3]=(((sj1*x1068))+((sj1*x1069))+(((-1.0)*x1073))+(((-1.0)*x1074))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((0.09)*x1072))+(((1.1)*x1071))+((x1067*x1073))+((x1067*x1074))+(((-1.0)*pp))+(((-0.09)*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1076=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1076;
evalcond[3]=x1076;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
IkReal x1077=((1.0)*sj2);
gconst31=IKsign(((((-1.0)*x1077*(py*py)))+(((-1.0)*x1077*(px*px)))));
IkReal x1078=((1.0)*sj2);
dummyeval[0]=((((-1.0)*x1078*(py*py)))+(((-1.0)*x1078*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1079=x1076;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1079;
evalcond[3]=x1079;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1080=((110.0)*pz);
IkReal x1081=((100.0)*pp);
CheckValue<IkReal> x1082 = IKatan2WithCheck((gconst33*(((((-1.0)*py*x1081))+((py*x1080))+(((-21.25)*py))))),(gconst33*((((px*x1080))+(((-21.25)*px))+(((-1.0)*px*x1081))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1082.valid){
continue;
}
j0array[0]=x1082.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1083=IKcos(j0);
IkReal x1084=IKsin(j0);
IkReal x1085=((1.0)*py);
IkReal x1086=(px*x1083);
evalcond[0]=(((px*x1084))+(((-1.0)*x1083*x1085)));
evalcond[1]=((0.045)+(((-1.0)*x1086))+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1084*x1085)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*x1084))+(((0.09)*x1086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1087=((0.3)*sj3);
IkReal x1088=((0.045)*px);
IkReal x1089=((0.045)*py);
CheckValue<IkReal> x1090 = IKatan2WithCheck((gconst32*((x1089+((py*x1087))+(((-1.0)*cj3*x1089))))),(gconst32*((x1088+((px*x1087))+(((-1.0)*cj3*x1088))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1090.valid){
continue;
}
j0array[0]=x1090.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1091=IKcos(j0);
IkReal x1092=IKsin(j0);
IkReal x1093=((1.0)*py);
IkReal x1094=(px*x1091);
evalcond[0]=((((-1.0)*x1091*x1093))+((px*x1092)));
evalcond[1]=((0.045)+(((-1.0)*x1094))+(((-0.045)*cj3))+(((-1.0)*x1092*x1093))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1092))+(((-1.0)*pp))+(((0.09)*x1094))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1095=x1076;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1095;
evalcond[3]=x1095;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1096=((110.0)*pz);
IkReal x1097=((100.0)*pp);
CheckValue<IkReal> x1098 = IKatan2WithCheck((gconst35*(((((-1.0)*py*x1097))+(((-21.25)*py))+((py*x1096))))),(gconst35*(((((-21.25)*px))+((px*x1096))+(((-1.0)*px*x1097))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1098.valid){
continue;
}
j0array[0]=x1098.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1099=IKsin(j0);
IkReal x1100=IKcos(j0);
IkReal x1101=(px*x1100);
IkReal x1102=(py*x1099);
evalcond[0]=(((px*x1099))+(((-1.0)*py*x1100)));
evalcond[1]=((0.045)+x1102+x1101+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*x1102))+(((-0.09)*x1101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1103=((0.3)*sj3);
IkReal x1104=((0.045)*px);
IkReal x1105=((0.045)*py);
CheckValue<IkReal> x1106 = IKatan2WithCheck((gconst34*((x1105+((py*x1103))+(((-1.0)*cj3*x1105))))),(gconst34*((x1104+((px*x1103))+(((-1.0)*cj3*x1104))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1106.valid){
continue;
}
j0array[0]=x1106.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1107=IKsin(j0);
IkReal x1108=IKcos(j0);
IkReal x1109=(px*x1108);
IkReal x1110=(py*x1107);
evalcond[0]=(((px*x1107))+(((-1.0)*py*x1108)));
evalcond[1]=((0.045)+x1109+x1110+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*x1109))+(((-0.09)*x1110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1111=x1076;
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1111;
evalcond[3]=x1111;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1113=IKPowWithIntegerCheck(py,-1);
if(!x1113.valid){
continue;
}
IkReal x1112=x1113.value;
sj0array[0]=((((-12.2222222222222)*pz*x1112))+(((11.1111111111111)*pp*x1112))+(((2.36111111111111)*x1112)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1116=IKPowWithIntegerCheck(py,-1);
if(!x1116.valid){
continue;
}
IkReal x1114=x1116.value;
IkReal x1115=((0.045)*x1114);
sj0array[0]=(x1115+(((0.3)*sj3*x1114))+(((-1.0)*cj3*x1115)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1117=x1076;
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1117;
evalcond[3]=x1117;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1119=IKPowWithIntegerCheck(py,-1);
if(!x1119.valid){
continue;
}
IkReal x1118=x1119.value;
sj0array[0]=((((-2.36111111111111)*x1118))+(((12.2222222222222)*pz*x1118))+(((-11.1111111111111)*pp*x1118)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+((py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1122=IKPowWithIntegerCheck(py,-1);
if(!x1122.valid){
continue;
}
IkReal x1120=x1122.value;
IkReal x1121=((0.045)*x1120);
sj0array[0]=((((-0.3)*sj3*x1120))+(((-1.0)*x1121))+((cj3*x1121)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1123=x1076;
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1123;
evalcond[3]=x1123;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1125=IKPowWithIntegerCheck(px,-1);
if(!x1125.valid){
continue;
}
IkReal x1124=x1125.value;
cj0array[0]=((((-12.2222222222222)*pz*x1124))+(((11.1111111111111)*pp*x1124))+(((2.36111111111111)*x1124)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1128=IKPowWithIntegerCheck(px,-1);
if(!x1128.valid){
continue;
}
IkReal x1126=x1128.value;
IkReal x1127=((0.045)*x1126);
cj0array[0]=(x1127+(((0.3)*sj3*x1126))+(((-1.0)*cj3*x1127)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1129=x1076;
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1129;
evalcond[3]=x1129;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1131=IKPowWithIntegerCheck(px,-1);
if(!x1131.valid){
continue;
}
IkReal x1130=x1131.value;
cj0array[0]=((((-11.1111111111111)*pp*x1130))+(((12.2222222222222)*pz*x1130))+(((-2.36111111111111)*x1130)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(px,-1);
if(!x1134.valid){
continue;
}
IkReal x1132=x1134.value;
IkReal x1133=((0.045)*x1132);
cj0array[0]=(((cj3*x1133))+(((-0.3)*sj3*x1132))+(((-1.0)*x1133)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1135=sj2*sj2;
IkReal x1136=(cj2*sj2);
IkReal x1137=((0.3)*sj3);
IkReal x1138=((0.045)*py);
IkReal x1139=((0.045)*cj3*px);
IkReal x1140=(px*x1135);
IkReal x1141=(x1135*x1138);
CheckValue<IkReal> x1142 = IKatan2WithCheck((gconst31*((((x1137*x1140))+(((-1.0)*x1136*x1138))+(((-1.0)*x1135*x1139))+(((0.045)*x1140))+((cj3*x1136*x1138))+(((-1.0)*py*x1136*x1137))))),(gconst31*(((((-0.045)*px*x1136))+((x1136*x1139))+((cj3*x1141))+(((-1.0)*x1141))+(((-1.0)*px*x1136*x1137))+(((-1.0)*py*x1135*x1137))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1142.valid){
continue;
}
j0array[0]=x1142.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1143=IKcos(j0);
IkReal x1144=IKsin(j0);
IkReal x1145=((0.045)*cj2);
IkReal x1146=((0.09)*sj2);
IkReal x1147=((0.3)*sj3);
IkReal x1148=((0.045)*cj3);
IkReal x1149=((0.09)*cj2);
IkReal x1150=((1.0)*cj2);
IkReal x1151=(px*x1144);
IkReal x1152=(px*x1143);
IkReal x1153=(py*x1143);
IkReal x1154=(py*x1144);
evalcond[0]=(x1151+(((0.045)*sj2))+((sj2*x1147))+(((-1.0)*x1153))+(((-1.0)*sj2*x1148)));
evalcond[1]=((((-1.0)*cj3*x1145))+x1145+((cj2*x1147))+(((-1.0)*x1152))+(((-1.0)*x1154)));
evalcond[2]=(((cj2*x1151))+((sj2*x1154))+((sj2*x1152))+(((-1.0)*x1150*x1153)));
evalcond[3]=((0.045)+x1147+((sj2*x1151))+(((-1.0)*x1148))+(((-1.0)*sj2*x1153))+(((-1.0)*x1150*x1154))+(((-1.0)*x1150*x1152)));
evalcond[4]=((-0.2125)+((x1149*x1154))+((x1149*x1152))+((x1146*x1153))+(((-1.0)*pp))+(((-1.0)*x1146*x1151))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1155=(px*sj2);
IkReal x1156=((0.3)*sj3);
IkReal x1157=(cj2*py);
IkReal x1158=(py*sj2);
IkReal x1159=((0.045)*cj3*py);
IkReal x1160=((0.045)*cj2*px);
CheckValue<IkReal> x1161 = IKatan2WithCheck((gconst30*(((((-1.0)*x1155*x1156))+(((-0.045)*x1155))+(((0.045)*cj3*x1155))+(((-0.045)*cj3*x1157))+((x1156*x1157))+(((0.045)*x1157))))),(gconst30*((x1160+((cj2*px*x1156))+(((-1.0)*cj3*x1160))+(((-0.045)*cj3*x1158))+((x1156*x1158))+(((0.045)*x1158))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1161.valid){
continue;
}
j0array[0]=x1161.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1162=IKcos(j0);
IkReal x1163=IKsin(j0);
IkReal x1164=((0.045)*cj2);
IkReal x1165=((0.09)*sj2);
IkReal x1166=((0.3)*sj3);
IkReal x1167=((0.045)*cj3);
IkReal x1168=((0.09)*cj2);
IkReal x1169=((1.0)*cj2);
IkReal x1170=(px*x1163);
IkReal x1171=(px*x1162);
IkReal x1172=(py*x1162);
IkReal x1173=(py*x1163);
evalcond[0]=(((sj2*x1166))+x1170+(((-1.0)*sj2*x1167))+(((0.045)*sj2))+(((-1.0)*x1172)));
evalcond[1]=(x1164+(((-1.0)*cj3*x1164))+((cj2*x1166))+(((-1.0)*x1171))+(((-1.0)*x1173)));
evalcond[2]=((((-1.0)*x1169*x1172))+((cj2*x1170))+((sj2*x1171))+((sj2*x1173)));
evalcond[3]=((0.045)+x1166+(((-1.0)*sj2*x1172))+(((-1.0)*x1169*x1173))+(((-1.0)*x1169*x1171))+(((-1.0)*x1167))+((sj2*x1170)));
evalcond[4]=((-0.2125)+(((-1.0)*x1165*x1170))+((x1168*x1171))+((x1168*x1173))+((x1165*x1172))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1174=((0.045)*sj3);
IkReal x1175=((0.3)*cj3);
IkReal x1176=(x1175+x1174);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1176)));
evalcond[3]=((0.55)+x1176+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign((((sj2*(px*px)))+((sj2*(py*py)))));
dummyeval[0]=(((sj2*(px*px)))+((sj2*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1177=((0.045)*sj3);
IkReal x1178=((0.3)*cj3);
IkReal x1179=(x1177+x1178);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1179)));
evalcond[3]=((0.55)+x1179+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1180=((110.0)*pz);
IkReal x1181=((100.0)*pp);
CheckValue<IkReal> x1182 = IKatan2WithCheck((gconst39*(((((-1.0)*py*x1181))+(((-1.0)*py*x1180))+(((-21.25)*py))))),(gconst39*(((((-21.25)*px))+(((-1.0)*px*x1181))+(((-1.0)*px*x1180))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
j0array[0]=x1182.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1183=IKsin(j0);
IkReal x1184=IKcos(j0);
IkReal x1185=(px*x1184);
IkReal x1186=(py*x1183);
evalcond[0]=(((px*x1183))+(((-1.0)*py*x1184)));
evalcond[1]=((0.045)+x1186+x1185+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1186))+(((-0.09)*x1185))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1187=((0.3)*sj3);
IkReal x1188=((0.045)*px);
IkReal x1189=((0.045)*py);
CheckValue<IkReal> x1190 = IKatan2WithCheck((gconst38*((x1189+((py*x1187))+(((-1.0)*cj3*x1189))))),(gconst38*((x1188+(((-1.0)*cj3*x1188))+((px*x1187))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1190.valid){
continue;
}
j0array[0]=x1190.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1191=IKsin(j0);
IkReal x1192=IKcos(j0);
IkReal x1193=(px*x1192);
IkReal x1194=(py*x1191);
evalcond[0]=((((-1.0)*py*x1192))+((px*x1191)));
evalcond[1]=((0.045)+x1193+x1194+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1193))+(((-0.09)*x1194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1195=((0.045)*sj3);
IkReal x1196=((0.3)*cj3);
IkReal x1197=(x1195+x1196);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1197))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1197+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1198=((110.0)*pz);
IkReal x1199=((100.0)*pp);
CheckValue<IkReal> x1200 = IKatan2WithCheck((gconst41*(((((-1.0)*py*x1199))+(((-1.0)*py*x1198))+(((-21.25)*py))))),(gconst41*(((((-21.25)*px))+(((-1.0)*px*x1198))+(((-1.0)*px*x1199))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
j0array[0]=x1200.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1201=IKcos(j0);
IkReal x1202=IKsin(j0);
IkReal x1203=((1.0)*py);
IkReal x1204=(px*x1201);
evalcond[0]=(((px*x1202))+(((-1.0)*x1201*x1203)));
evalcond[1]=((0.045)+(((-1.0)*x1202*x1203))+(((-0.045)*cj3))+(((-1.0)*x1204))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1204))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1205=((0.3)*sj3);
IkReal x1206=((0.045)*px);
IkReal x1207=((0.045)*py);
CheckValue<IkReal> x1208 = IKatan2WithCheck((gconst40*((x1207+(((-1.0)*cj3*x1207))+((py*x1205))))),(gconst40*((x1206+((px*x1205))+(((-1.0)*cj3*x1206))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1208.valid){
continue;
}
j0array[0]=x1208.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1209=IKcos(j0);
IkReal x1210=IKsin(j0);
IkReal x1211=((1.0)*py);
IkReal x1212=(px*x1209);
evalcond[0]=((((-1.0)*x1209*x1211))+((px*x1210)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x1210*x1211))+(((0.3)*sj3))+(((-1.0)*x1212)));
evalcond[2]=((-0.2125)+(((0.09)*x1212))+(((0.09)*py*x1210))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1213=((0.045)*sj3);
IkReal x1214=((0.3)*cj3);
IkReal x1215=(x1213+x1214);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1215)));
evalcond[3]=((0.55)+x1215+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(py,-1);
if(!x1217.valid){
continue;
}
IkReal x1216=x1217.value;
sj0array[0]=((((-12.2222222222222)*pz*x1216))+(((-2.36111111111111)*x1216))+(((-11.1111111111111)*pp*x1216)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+((py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(py,-1);
if(!x1220.valid){
continue;
}
IkReal x1218=x1220.value;
IkReal x1219=((0.045)*x1218);
sj0array[0]=(((cj3*x1219))+(((-0.3)*sj3*x1218))+(((-1.0)*x1219)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1221=((0.045)*sj3);
IkReal x1222=((0.3)*cj3);
IkReal x1223=(x1222+x1221);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1223))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1223+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1225=IKPowWithIntegerCheck(py,-1);
if(!x1225.valid){
continue;
}
IkReal x1224=x1225.value;
sj0array[0]=((((2.36111111111111)*x1224))+(((11.1111111111111)*pp*x1224))+(((12.2222222222222)*pz*x1224)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1228=IKPowWithIntegerCheck(py,-1);
if(!x1228.valid){
continue;
}
IkReal x1226=x1228.value;
IkReal x1227=((0.045)*x1226);
sj0array[0]=(x1227+(((0.3)*sj3*x1226))+(((-1.0)*cj3*x1227)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1229=((0.045)*sj3);
IkReal x1230=((0.3)*cj3);
IkReal x1231=(x1230+x1229);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1231))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1231+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(px,-1);
if(!x1233.valid){
continue;
}
IkReal x1232=x1233.value;
cj0array[0]=((((-11.1111111111111)*pp*x1232))+(((-12.2222222222222)*pz*x1232))+(((-2.36111111111111)*x1232)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1236=IKPowWithIntegerCheck(px,-1);
if(!x1236.valid){
continue;
}
IkReal x1234=x1236.value;
IkReal x1235=((0.045)*x1234);
cj0array[0]=(((cj3*x1235))+(((-1.0)*x1235))+(((-0.3)*sj3*x1234)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1237=((0.045)*sj3);
IkReal x1238=((0.3)*cj3);
IkReal x1239=(x1237+x1238);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1239))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1239+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1241=IKPowWithIntegerCheck(px,-1);
if(!x1241.valid){
continue;
}
IkReal x1240=x1241.value;
cj0array[0]=((((2.36111111111111)*x1240))+(((11.1111111111111)*pp*x1240))+(((12.2222222222222)*pz*x1240)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(px,-1);
if(!x1244.valid){
continue;
}
IkReal x1242=x1244.value;
IkReal x1243=((0.045)*x1242);
cj0array[0]=(x1243+(((0.3)*sj3*x1242))+(((-1.0)*cj3*x1243)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1245=sj2*sj2;
IkReal x1246=(cj2*sj2);
IkReal x1247=((0.3)*sj3);
IkReal x1248=((0.045)*py);
IkReal x1249=((0.045)*cj3*px);
IkReal x1250=(px*x1245);
IkReal x1251=(x1245*x1248);
CheckValue<IkReal> x1252 = IKatan2WithCheck((gconst37*(((((-0.045)*x1250))+(((-1.0)*x1247*x1250))+((x1245*x1249))+(((-1.0)*py*x1246*x1247))+(((-1.0)*x1246*x1248))+((cj3*x1246*x1248))))),(gconst37*((x1251+(((-1.0)*cj3*x1251))+((x1246*x1249))+(((-0.045)*px*x1246))+((py*x1245*x1247))+(((-1.0)*px*x1246*x1247))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1252.valid){
continue;
}
j0array[0]=x1252.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1253=IKcos(j0);
IkReal x1254=IKsin(j0);
IkReal x1255=((0.045)*cj2);
IkReal x1256=((0.09)*sj2);
IkReal x1257=((0.3)*sj3);
IkReal x1258=((0.045)*cj3);
IkReal x1259=((1.0)*sj2);
IkReal x1260=((0.09)*cj2);
IkReal x1261=(px*x1254);
IkReal x1262=(px*x1253);
IkReal x1263=(py*x1253);
IkReal x1264=(py*x1254);
evalcond[0]=(x1261+(((0.045)*sj2))+(((-1.0)*sj2*x1258))+(((-1.0)*x1263))+((sj2*x1257)));
evalcond[1]=((((-1.0)*x1255))+(((-1.0)*cj2*x1257))+((cj3*x1255))+(((-1.0)*x1264))+(((-1.0)*x1262)));
evalcond[2]=((((-1.0)*cj2*x1263))+((cj2*x1261))+(((-1.0)*x1259*x1262))+(((-1.0)*x1259*x1264)));
evalcond[3]=((0.045)+(((-1.0)*x1258))+x1257+((cj2*x1264))+((cj2*x1262))+(((-1.0)*x1259*x1263))+((sj2*x1261)));
evalcond[4]=((-0.2125)+(((-1.0)*x1260*x1262))+(((-1.0)*x1260*x1264))+((x1256*x1263))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x1256*x1261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1265=(px*sj2);
IkReal x1266=((0.3)*sj3);
IkReal x1267=((0.045)*cj2);
IkReal x1268=(py*sj2);
IkReal x1269=((0.045)*cj3*py);
CheckValue<IkReal> x1270 = IKatan2WithCheck((gconst36*((((cj3*py*x1267))+(((-1.0)*cj2*py*x1266))+(((-0.045)*x1265))+(((-1.0)*x1265*x1266))+(((0.045)*cj3*x1265))+(((-1.0)*py*x1267))))),(gconst36*(((((0.045)*x1268))+(((-1.0)*px*x1267))+((x1266*x1268))+(((-0.045)*cj3*x1268))+(((-1.0)*cj2*px*x1266))+((cj3*px*x1267))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1270.valid){
continue;
}
j0array[0]=x1270.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1271=IKcos(j0);
IkReal x1272=IKsin(j0);
IkReal x1273=((0.045)*cj2);
IkReal x1274=((0.09)*sj2);
IkReal x1275=((0.3)*sj3);
IkReal x1276=((0.045)*cj3);
IkReal x1277=((1.0)*sj2);
IkReal x1278=((0.09)*cj2);
IkReal x1279=(px*x1272);
IkReal x1280=(px*x1271);
IkReal x1281=(py*x1271);
IkReal x1282=(py*x1272);
evalcond[0]=((((-1.0)*x1281))+x1279+((sj2*x1275))+(((0.045)*sj2))+(((-1.0)*sj2*x1276)));
evalcond[1]=((((-1.0)*x1282))+(((-1.0)*x1280))+(((-1.0)*x1273))+(((-1.0)*cj2*x1275))+((cj3*x1273)));
evalcond[2]=((((-1.0)*cj2*x1281))+(((-1.0)*x1277*x1282))+(((-1.0)*x1277*x1280))+((cj2*x1279)));
evalcond[3]=((0.045)+x1275+((sj2*x1279))+(((-1.0)*x1276))+(((-1.0)*x1277*x1281))+((cj2*x1280))+((cj2*x1282)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x1278*x1282))+(((-1.0)*x1278*x1280))+(((-1.0)*x1274*x1279))+((x1274*x1281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1283=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1283;
evalcond[3]=x1283;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(py,-1);
if(!x1285.valid){
continue;
}
IkReal x1284=x1285.value;
cj0array[0]=((((-12.2222222222222)*pz*x1284))+(((2.36111111111111)*x1284))+(((11.1111111111111)*pp*x1284)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(py,-1);
if(!x1288.valid){
continue;
}
IkReal x1286=x1288.value;
IkReal x1287=((0.045)*x1286);
cj0array[0]=(x1287+(((-1.0)*cj3*x1287))+(((0.3)*sj3*x1286)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1289=((0.045)*sj3);
IkReal x1290=((0.3)*cj3);
IkReal x1291=(x1289+x1290);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1291))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1291+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1293=IKPowWithIntegerCheck(py,-1);
if(!x1293.valid){
continue;
}
IkReal x1292=x1293.value;
cj0array[0]=((((12.2222222222222)*pz*x1292))+(((11.1111111111111)*pp*x1292))+(((2.36111111111111)*x1292)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(py,-1);
if(!x1296.valid){
continue;
}
IkReal x1294=x1296.value;
IkReal x1295=((0.045)*x1294);
cj0array[0]=(x1295+(((0.3)*sj3*x1294))+(((-1.0)*cj3*x1295)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1298=IKPowWithIntegerCheck(py,-1);
if(!x1298.valid){
continue;
}
IkReal x1297=x1298.value;
if( IKabs(((0.00909090909090909)*x1297*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1297*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x1297*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))+IKsqr((x1297*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x1297*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))), (x1297*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1299=IKsin(j0);
IkReal x1300=IKcos(j0);
IkReal x1301=(py*x1300);
IkReal x1302=(py*x1299);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1302+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-1.0)*x1301))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1301))+(((-1.0)*pp))+(((1.1)*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1304=IKPowWithIntegerCheck(py,-1);
if(!x1304.valid){
continue;
}
IkReal x1303=x1304.value;
if( IKabs((x1303*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x1303*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1303*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x1303*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1303*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x1303*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1305=IKsin(j0);
IkReal x1306=IKcos(j0);
IkReal x1307=(py*x1306);
IkReal x1308=(py*x1305);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1308+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-1.0)*x1307))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1307))+(((-1.0)*pp))+(((1.1)*x1308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1309 = IKatan2WithCheck((gconst43*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst43*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1309.valid){
continue;
}
j0array[0]=x1309.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1310=IKsin(j0);
IkReal x1311=IKcos(j0);
IkReal x1312=(py*x1311);
IkReal x1313=(py*x1310);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1313+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-1.0)*x1312))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1312))+(((-1.0)*pp))+(((1.1)*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1315=IKPowWithIntegerCheck(py,-1);
if(!x1315.valid){
continue;
}
IkReal x1314=x1315.value;
if( IKabs(((0.00909090909090909)*x1314*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1314*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x1314*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))+IKsqr((x1314*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x1314*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))), (x1314*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1316=IKcos(j0);
IkReal x1317=IKsin(j0);
IkReal x1318=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1317*x1318))+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1316*x1318)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1316))+(((-1.0)*pp))+(((-1.1)*py*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1320=IKPowWithIntegerCheck(py,-1);
if(!x1320.valid){
continue;
}
IkReal x1319=x1320.value;
if( IKabs((x1319*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x1319*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1319*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x1319*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1319*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x1319*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1321=IKcos(j0);
IkReal x1322=IKsin(j0);
IkReal x1323=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1322*x1323))+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x1321*x1323))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1321))+(((-1.0)*pp))+(((-1.1)*py*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1324 = IKatan2WithCheck((gconst44*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst44*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1324.valid){
continue;
}
j0array[0]=x1324.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1325=IKcos(j0);
IkReal x1326=IKsin(j0);
IkReal x1327=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1326*x1327)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x1325*x1327))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1325))+(((-1.0)*pp))+(((-1.1)*py*x1326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1329=IKPowWithIntegerCheck(py,-1);
if(!x1329.valid){
continue;
}
IkReal x1328=x1329.value;
CheckValue<IkReal> x1330=IKPowWithIntegerCheck(sj1,-1);
if(!x1330.valid){
continue;
}
if( IKabs((x1328*(x1330.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1328*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1328*(x1330.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))+IKsqr((x1328*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1328*(x1330.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))), (x1328*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1331=IKsin(j0);
IkReal x1332=IKcos(j0);
IkReal x1333=(cj1*pz);
IkReal x1334=((0.3)*cj3);
IkReal x1335=((0.045)*sj3);
IkReal x1336=(py*x1331);
IkReal x1337=(py*x1332);
evalcond[0]=(((cj1*x1336))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-1.0)*x1337))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x1333+((sj1*x1336))+(((-1.0)*x1334))+(((-1.0)*x1335)));
evalcond[3]=((((-1.0)*x1336))+((sj1*x1334))+((sj1*x1335))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((0.09)*x1337))+(((-1.0)*pp))+(((1.1)*x1333))+(((1.1)*sj1*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1339=IKPowWithIntegerCheck(py,-1);
if(!x1339.valid){
continue;
}
IkReal x1338=x1339.value;
CheckValue<IkReal> x1340=IKPowWithIntegerCheck(cj1,-1);
if(!x1340.valid){
continue;
}
if( IKabs((pz*sj1*x1338*(x1340.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1338*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((pz*sj1*x1338*(x1340.value)))+IKsqr((x1338*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((pz*sj1*x1338*(x1340.value)), (x1338*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1341=IKsin(j0);
IkReal x1342=IKcos(j0);
IkReal x1343=(cj1*pz);
IkReal x1344=((0.3)*cj3);
IkReal x1345=((0.045)*sj3);
IkReal x1346=(py*x1341);
IkReal x1347=(py*x1342);
evalcond[0]=(((cj1*x1346))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1347)));
evalcond[2]=((-0.55)+x1343+((sj1*x1346))+(((-1.0)*x1345))+(((-1.0)*x1344)));
evalcond[3]=(((sj1*x1345))+((sj1*x1344))+(((0.55)*sj1))+(((-1.0)*x1346)));
evalcond[4]=((-0.2125)+(((0.09)*x1347))+(((1.1)*x1343))+(((-1.0)*pp))+(((1.1)*sj1*x1346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1348 = IKatan2WithCheck((gconst42*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),(gconst42*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1348.valid){
continue;
}
j0array[0]=x1348.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1349=IKsin(j0);
IkReal x1350=IKcos(j0);
IkReal x1351=(cj1*pz);
IkReal x1352=((0.3)*cj3);
IkReal x1353=((0.045)*sj3);
IkReal x1354=(py*x1349);
IkReal x1355=(py*x1350);
evalcond[0]=(((cj1*x1354))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-1.0)*x1355))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x1351+(((-1.0)*x1352))+(((-1.0)*x1353))+((sj1*x1354)));
evalcond[3]=((((-1.0)*x1354))+((sj1*x1352))+((sj1*x1353))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((0.09)*x1355))+(((-1.0)*pp))+(((1.1)*sj1*x1354))+(((1.1)*x1351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1356=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1356;
evalcond[3]=x1356;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1358=IKPowWithIntegerCheck(py,-1);
if(!x1358.valid){
continue;
}
IkReal x1357=x1358.value;
cj0array[0]=((((-11.1111111111111)*pp*x1357))+(((12.2222222222222)*pz*x1357))+(((-2.36111111111111)*x1357)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(py,-1);
if(!x1361.valid){
continue;
}
IkReal x1359=x1361.value;
IkReal x1360=((0.045)*x1359);
cj0array[0]=((((-0.3)*sj3*x1359))+((cj3*x1360))+(((-1.0)*x1360)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1362=((0.045)*sj3);
IkReal x1363=((0.3)*cj3);
IkReal x1364=(x1362+x1363);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1364)));
evalcond[3]=((0.55)+x1364+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(py,-1);
if(!x1366.valid){
continue;
}
IkReal x1365=x1366.value;
cj0array[0]=((((-2.36111111111111)*x1365))+(((-12.2222222222222)*pz*x1365))+(((-11.1111111111111)*pp*x1365)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(py,-1);
if(!x1369.valid){
continue;
}
IkReal x1367=x1369.value;
IkReal x1368=((0.045)*x1367);
cj0array[0]=((((-0.3)*sj3*x1367))+((cj3*x1368))+(((-1.0)*x1368)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1371=IKPowWithIntegerCheck(py,-1);
if(!x1371.valid){
continue;
}
IkReal x1370=x1371.value;
if( IKabs(((0.00909090909090909)*x1370*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1370*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x1370*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))+IKsqr((x1370*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x1370*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))), (x1370*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1372=IKsin(j0);
IkReal x1373=IKcos(j0);
IkReal x1374=(py*x1373);
IkReal x1375=(py*x1372);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1375+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1374))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1374))+(((1.1)*x1375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1377=IKPowWithIntegerCheck(py,-1);
if(!x1377.valid){
continue;
}
IkReal x1376=x1377.value;
if( IKabs((x1376*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x1376*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1376*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x1376*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1376*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x1376*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1378=IKsin(j0);
IkReal x1379=IKcos(j0);
IkReal x1380=(py*x1379);
IkReal x1381=(py*x1378);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1381+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1380))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1380))+(((1.1)*x1381))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1382 = IKatan2WithCheck((gconst46*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst46*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1382.valid){
continue;
}
j0array[0]=x1382.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1383=IKsin(j0);
IkReal x1384=IKcos(j0);
IkReal x1385=(py*x1384);
IkReal x1386=(py*x1383);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1386+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1385))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1385))+(((1.1)*x1386))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1388=IKPowWithIntegerCheck(py,-1);
if(!x1388.valid){
continue;
}
IkReal x1387=x1388.value;
if( IKabs(((0.00909090909090909)*x1387*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1387*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x1387*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))+IKsqr((x1387*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x1387*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))), (x1387*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1389=IKsin(j0);
IkReal x1390=IKcos(j0);
IkReal x1391=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1389*x1391))+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1390*x1391))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x1390))+(((-1.1)*py*x1389))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1393=IKPowWithIntegerCheck(py,-1);
if(!x1393.valid){
continue;
}
IkReal x1392=x1393.value;
if( IKabs((x1392*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x1392*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1392*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x1392*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1392*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x1392*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1394=IKsin(j0);
IkReal x1395=IKcos(j0);
IkReal x1396=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1394*x1396))+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1395*x1396))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x1395))+(((-1.0)*pp))+(((-1.1)*py*x1394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1397 = IKatan2WithCheck((gconst47*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst47*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1397.valid){
continue;
}
j0array[0]=x1397.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1398=IKsin(j0);
IkReal x1399=IKcos(j0);
IkReal x1400=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1398*x1400)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1399*x1400))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x1399))+(((-1.0)*pp))+(((-1.1)*py*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1402=IKPowWithIntegerCheck(py,-1);
if(!x1402.valid){
continue;
}
IkReal x1401=x1402.value;
CheckValue<IkReal> x1403=IKPowWithIntegerCheck(sj1,-1);
if(!x1403.valid){
continue;
}
if( IKabs((x1401*(x1403.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1401*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1401*(x1403.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))+IKsqr((x1401*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1401*(x1403.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))), (x1401*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1404=IKsin(j0);
IkReal x1405=IKcos(j0);
IkReal x1406=(cj1*pz);
IkReal x1407=((0.045)*sj3);
IkReal x1408=((0.3)*cj3);
IkReal x1409=(py*x1404);
IkReal x1410=(py*x1405);
evalcond[0]=((((-1.0)*cj1*x1409))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))+(((-1.0)*x1410)));
evalcond[2]=((-0.55)+(((-1.0)*x1408))+(((-1.0)*x1407))+((sj1*x1409))+x1406);
evalcond[3]=((((-1.0)*x1409))+((sj1*x1407))+((sj1*x1408))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x1409))+(((-1.0)*pp))+(((1.1)*x1406))+(((-0.09)*x1410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1412=IKPowWithIntegerCheck(py,-1);
if(!x1412.valid){
continue;
}
IkReal x1411=x1412.value;
CheckValue<IkReal> x1413=IKPowWithIntegerCheck(cj1,-1);
if(!x1413.valid){
continue;
}
if( IKabs((pz*sj1*x1411*(x1413.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1411*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((pz*sj1*x1411*(x1413.value)))+IKsqr((x1411*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((pz*sj1*x1411*(x1413.value)), (x1411*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1414=IKsin(j0);
IkReal x1415=IKcos(j0);
IkReal x1416=(cj1*pz);
IkReal x1417=((0.045)*sj3);
IkReal x1418=((0.3)*cj3);
IkReal x1419=(py*x1414);
IkReal x1420=(py*x1415);
evalcond[0]=(((pz*sj1))+(((-1.0)*cj1*x1419)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1420))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1418))+(((-1.0)*x1417))+x1416+((sj1*x1419)));
evalcond[3]=((((0.55)*sj1))+((sj1*x1417))+((sj1*x1418))+(((-1.0)*x1419)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*sj1*x1419))+(((1.1)*x1416))+(((-0.09)*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1421 = IKatan2WithCheck((gconst45*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),(gconst45*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1421.valid){
continue;
}
j0array[0]=x1421.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1422=IKsin(j0);
IkReal x1423=IKcos(j0);
IkReal x1424=(cj1*pz);
IkReal x1425=((0.045)*sj3);
IkReal x1426=((0.3)*cj3);
IkReal x1427=(py*x1422);
IkReal x1428=(py*x1423);
evalcond[0]=((((-1.0)*cj1*x1427))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1428))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+((sj1*x1427))+x1424+(((-1.0)*x1426))+(((-1.0)*x1425)));
evalcond[3]=(((sj1*x1426))+((sj1*x1425))+(((-1.0)*x1427))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*x1424))+(((-1.0)*pp))+(((1.1)*sj1*x1427))+(((-0.09)*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1429=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1429;
evalcond[3]=x1429;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((py*(cj2*cj2)))+((py*(sj2*sj2)))));
dummyeval[0]=(((py*(cj2*cj2)))+((py*(sj2*sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1430=x1429;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1430;
evalcond[3]=x1430;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(py,-1);
if(!x1432.valid){
continue;
}
IkReal x1431=x1432.value;
sj0array[0]=((((2.36111111111111)*x1431))+(((11.1111111111111)*pp*x1431))+(((-12.2222222222222)*pz*x1431)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1435=IKPowWithIntegerCheck(py,-1);
if(!x1435.valid){
continue;
}
IkReal x1433=x1435.value;
IkReal x1434=((0.045)*x1433);
sj0array[0]=((((0.3)*sj3*x1433))+(((-1.0)*cj3*x1434))+x1434);
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1436=x1429;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1436;
evalcond[3]=x1436;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(py,-1);
if(!x1438.valid){
continue;
}
IkReal x1437=x1438.value;
sj0array[0]=((((12.2222222222222)*pz*x1437))+(((-2.36111111111111)*x1437))+(((-11.1111111111111)*pp*x1437)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+((py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1441=IKPowWithIntegerCheck(py,-1);
if(!x1441.valid){
continue;
}
IkReal x1439=x1441.value;
IkReal x1440=((0.045)*x1439);
sj0array[0]=((((-0.3)*sj3*x1439))+((cj3*x1440))+(((-1.0)*x1440)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1445=IKPowWithIntegerCheck(py,-1);
if(!x1445.valid){
continue;
}
IkReal x1442=x1445.value;
IkReal x1443=((0.045)*cj2);
IkReal x1444=((0.3)*cj2*sj3);
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(cj2,-1);
if(!x1446.valid){
continue;
}
if( IKabs((x1442*((x1444+x1443+(((-1.0)*cj3*x1443)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1442*(x1446.value)*(((((-1.0)*cj3*sj2*x1443))+((sj2*x1443))+((sj2*x1444)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1442*((x1444+x1443+(((-1.0)*cj3*x1443))))))+IKsqr((x1442*(x1446.value)*(((((-1.0)*cj3*sj2*x1443))+((sj2*x1443))+((sj2*x1444))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1442*((x1444+x1443+(((-1.0)*cj3*x1443))))), (x1442*(x1446.value)*(((((-1.0)*cj3*sj2*x1443))+((sj2*x1443))+((sj2*x1444))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1447=IKcos(j0);
IkReal x1448=IKsin(j0);
IkReal x1449=((0.045)*cj2);
IkReal x1450=((0.3)*sj3);
IkReal x1451=((1.0)*py);
IkReal x1452=((0.045)*cj3);
IkReal x1453=(py*x1448);
IkReal x1454=(py*sj2*x1447);
evalcond[0]=((((-1.0)*cj2*x1447*x1451))+((sj2*x1453)));
evalcond[1]=((((-1.0)*x1447*x1451))+((sj2*x1450))+(((0.045)*sj2))+(((-1.0)*sj2*x1452)));
evalcond[2]=((((-1.0)*x1448*x1451))+x1449+((cj2*x1450))+(((-1.0)*cj3*x1449)));
evalcond[3]=((0.045)+(((-1.0)*x1452))+(((-1.0)*sj2*x1447*x1451))+x1450+(((-1.0)*cj2*x1448*x1451)));
evalcond[4]=((-0.2125)+(((0.09)*x1454))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*cj2*x1453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(py,-1);
if(!x1459.valid){
continue;
}
IkReal x1455=x1459.value;
IkReal x1456=((0.045)*sj2);
IkReal x1457=((0.3)*sj2*sj3);
IkReal x1458=(cj3*x1456);
CheckValue<IkReal> x1460=IKPowWithIntegerCheck(sj2,-1);
if(!x1460.valid){
continue;
}
if( IKabs((x1455*(x1460.value)*(((((-1.0)*cj2*x1458))+((cj2*x1456))+((cj2*x1457)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1455*(((((-1.0)*x1458))+x1456+x1457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1455*(x1460.value)*(((((-1.0)*cj2*x1458))+((cj2*x1456))+((cj2*x1457))))))+IKsqr((x1455*(((((-1.0)*x1458))+x1456+x1457))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1455*(x1460.value)*(((((-1.0)*cj2*x1458))+((cj2*x1456))+((cj2*x1457))))), (x1455*(((((-1.0)*x1458))+x1456+x1457))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1461=IKcos(j0);
IkReal x1462=IKsin(j0);
IkReal x1463=((0.045)*cj2);
IkReal x1464=((0.3)*sj3);
IkReal x1465=((1.0)*py);
IkReal x1466=((0.045)*cj3);
IkReal x1467=(py*x1462);
IkReal x1468=(py*sj2*x1461);
evalcond[0]=(((sj2*x1467))+(((-1.0)*cj2*x1461*x1465)));
evalcond[1]=(((sj2*x1464))+(((0.045)*sj2))+(((-1.0)*x1461*x1465))+(((-1.0)*sj2*x1466)));
evalcond[2]=(((cj2*x1464))+(((-1.0)*x1462*x1465))+(((-1.0)*cj3*x1463))+x1463);
evalcond[3]=((0.045)+(((-1.0)*x1466))+(((-1.0)*sj2*x1461*x1465))+(((-1.0)*cj2*x1462*x1465))+x1464);
evalcond[4]=((-0.2125)+(((0.09)*x1468))+(((-1.0)*pp))+(((0.09)*cj2*x1467))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1469=((0.045)*cj2);
IkReal x1470=((0.3)*sj3);
IkReal x1471=((0.045)*sj2);
CheckValue<IkReal> x1472 = IKatan2WithCheck((gconst48*(((((-1.0)*cj3*x1469))+((cj2*x1470))+x1469))),(gconst48*(((((-1.0)*cj3*x1471))+((sj2*x1470))+x1471))),IKFAST_ATAN2_MAGTHRESH);
if(!x1472.valid){
continue;
}
j0array[0]=x1472.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1473=IKcos(j0);
IkReal x1474=IKsin(j0);
IkReal x1475=((0.045)*cj2);
IkReal x1476=((0.3)*sj3);
IkReal x1477=((1.0)*py);
IkReal x1478=((0.045)*cj3);
IkReal x1479=(py*x1474);
IkReal x1480=(py*sj2*x1473);
evalcond[0]=((((-1.0)*cj2*x1473*x1477))+((sj2*x1479)));
evalcond[1]=((((-1.0)*sj2*x1478))+(((0.045)*sj2))+((sj2*x1476))+(((-1.0)*x1473*x1477)));
evalcond[2]=((((-1.0)*cj3*x1475))+(((-1.0)*x1474*x1477))+((cj2*x1476))+x1475);
evalcond[3]=((0.045)+(((-1.0)*cj2*x1474*x1477))+x1476+(((-1.0)*x1478))+(((-1.0)*sj2*x1473*x1477)));
evalcond[4]=((-0.2125)+(((0.09)*cj2*x1479))+(((0.09)*x1480))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1481=((0.045)*sj3);
IkReal x1482=((0.3)*cj3);
IkReal x1483=(x1482+x1481);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1483))+(((-1.0)*pz)));
evalcond[3]=((0.55)+pz+x1483);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign((((py*(cj2*cj2)))+((py*(sj2*sj2)))));
dummyeval[0]=(((py*(cj2*cj2)))+((py*(sj2*sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1484=((0.045)*sj3);
IkReal x1485=((0.3)*cj3);
IkReal x1486=(x1485+x1484);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1486))+(((-1.0)*pz)));
evalcond[3]=((0.55)+pz+x1486);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1488=IKPowWithIntegerCheck(py,-1);
if(!x1488.valid){
continue;
}
IkReal x1487=x1488.value;
sj0array[0]=((((-11.1111111111111)*pp*x1487))+(((-12.2222222222222)*pz*x1487))+(((-2.36111111111111)*x1487)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+((py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(py,-1);
if(!x1491.valid){
continue;
}
IkReal x1489=x1491.value;
IkReal x1490=((0.045)*x1489);
sj0array[0]=(((cj3*x1490))+(((-1.0)*x1490))+(((-0.3)*sj3*x1489)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1492=((0.045)*sj3);
IkReal x1493=((0.3)*cj3);
IkReal x1494=(x1492+x1493);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1494))+(((-1.0)*pz)));
evalcond[3]=((0.55)+pz+x1494);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1496=IKPowWithIntegerCheck(py,-1);
if(!x1496.valid){
continue;
}
IkReal x1495=x1496.value;
sj0array[0]=((((12.2222222222222)*pz*x1495))+(((2.36111111111111)*x1495))+(((11.1111111111111)*pp*x1495)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1499=IKPowWithIntegerCheck(py,-1);
if(!x1499.valid){
continue;
}
IkReal x1497=x1499.value;
IkReal x1498=((0.045)*x1497);
sj0array[0]=((((-1.0)*cj3*x1498))+(((0.3)*sj3*x1497))+x1498);
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(py,-1);
if(!x1503.valid){
continue;
}
IkReal x1500=x1503.value;
IkReal x1501=((0.045)*cj2);
IkReal x1502=((0.3)*cj2*sj3);
CheckValue<IkReal> x1504=IKPowWithIntegerCheck(cj2,-1);
if(!x1504.valid){
continue;
}
if( IKabs((x1500*(((((-1.0)*x1502))+(((-1.0)*x1501))+((cj3*x1501)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1500*(x1504.value)*(((((-1.0)*cj3*sj2*x1501))+((sj2*x1502))+((sj2*x1501)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1500*(((((-1.0)*x1502))+(((-1.0)*x1501))+((cj3*x1501))))))+IKsqr((x1500*(x1504.value)*(((((-1.0)*cj3*sj2*x1501))+((sj2*x1502))+((sj2*x1501))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1500*(((((-1.0)*x1502))+(((-1.0)*x1501))+((cj3*x1501))))), (x1500*(x1504.value)*(((((-1.0)*cj3*sj2*x1501))+((sj2*x1502))+((sj2*x1501))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1505=IKcos(j0);
IkReal x1506=IKsin(j0);
IkReal x1507=((0.045)*cj2);
IkReal x1508=((0.3)*sj3);
IkReal x1509=((1.0)*py);
IkReal x1510=((0.045)*cj3);
IkReal x1511=(py*sj2*x1505);
IkReal x1512=(cj2*py*x1506);
evalcond[0]=((((-1.0)*cj2*x1505*x1509))+(((-1.0)*sj2*x1506*x1509)));
evalcond[1]=((((0.045)*sj2))+(((-1.0)*x1505*x1509))+(((-1.0)*sj2*x1510))+((sj2*x1508)));
evalcond[2]=((((-1.0)*x1507))+((cj3*x1507))+(((-1.0)*x1506*x1509))+(((-1.0)*cj2*x1508)));
evalcond[3]=((0.045)+(((-1.0)*x1510))+(((-1.0)*sj2*x1505*x1509))+x1508+x1512);
evalcond[4]=((-0.2125)+(((-0.09)*x1512))+(((0.09)*x1511))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1516=IKPowWithIntegerCheck(py,-1);
if(!x1516.valid){
continue;
}
IkReal x1513=x1516.value;
IkReal x1514=((0.045)*sj2);
IkReal x1515=((0.3)*sj2*sj3);
CheckValue<IkReal> x1517=IKPowWithIntegerCheck(sj2,-1);
if(!x1517.valid){
continue;
}
if( IKabs((x1513*(x1517.value)*((((cj2*cj3*x1514))+(((-1.0)*cj2*x1515))+(((-1.0)*cj2*x1514)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1513*((x1515+x1514+(((-1.0)*cj3*x1514)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1513*(x1517.value)*((((cj2*cj3*x1514))+(((-1.0)*cj2*x1515))+(((-1.0)*cj2*x1514))))))+IKsqr((x1513*((x1515+x1514+(((-1.0)*cj3*x1514))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1513*(x1517.value)*((((cj2*cj3*x1514))+(((-1.0)*cj2*x1515))+(((-1.0)*cj2*x1514))))), (x1513*((x1515+x1514+(((-1.0)*cj3*x1514))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1518=IKcos(j0);
IkReal x1519=IKsin(j0);
IkReal x1520=((0.045)*cj2);
IkReal x1521=((0.3)*sj3);
IkReal x1522=((1.0)*py);
IkReal x1523=((0.045)*cj3);
IkReal x1524=(py*sj2*x1518);
IkReal x1525=(cj2*py*x1519);
evalcond[0]=((((-1.0)*sj2*x1519*x1522))+(((-1.0)*cj2*x1518*x1522)));
evalcond[1]=((((-1.0)*sj2*x1523))+((sj2*x1521))+(((-1.0)*x1518*x1522))+(((0.045)*sj2)));
evalcond[2]=((((-1.0)*x1520))+(((-1.0)*x1519*x1522))+((cj3*x1520))+(((-1.0)*cj2*x1521)));
evalcond[3]=((0.045)+(((-1.0)*x1523))+(((-1.0)*sj2*x1518*x1522))+x1525+x1521);
evalcond[4]=((-0.2125)+(((0.09)*x1524))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1526=((0.045)*cj2);
IkReal x1527=((0.3)*sj3);
IkReal x1528=((0.045)*sj2);
CheckValue<IkReal> x1529 = IKatan2WithCheck((gconst49*(((((-1.0)*x1526))+((cj3*x1526))+(((-1.0)*cj2*x1527))))),(gconst49*((((sj2*x1527))+x1528+(((-1.0)*cj3*x1528))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
j0array[0]=x1529.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1530=IKcos(j0);
IkReal x1531=IKsin(j0);
IkReal x1532=((0.045)*cj2);
IkReal x1533=((0.3)*sj3);
IkReal x1534=((1.0)*py);
IkReal x1535=((0.045)*cj3);
IkReal x1536=(py*sj2*x1530);
IkReal x1537=(cj2*py*x1531);
evalcond[0]=((((-1.0)*sj2*x1531*x1534))+(((-1.0)*cj2*x1530*x1534)));
evalcond[1]=((((-1.0)*sj2*x1535))+((sj2*x1533))+(((-1.0)*x1530*x1534))+(((0.045)*sj2)));
evalcond[2]=((((-1.0)*x1531*x1534))+(((-1.0)*x1532))+((cj3*x1532))+(((-1.0)*cj2*x1533)));
evalcond[3]=((0.045)+(((-1.0)*x1535))+x1537+x1533+(((-1.0)*sj2*x1530*x1534)));
evalcond[4]=((-0.2125)+(((0.09)*x1536))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1538=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1538;
evalcond[3]=x1538;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1540=IKPowWithIntegerCheck(px,-1);
if(!x1540.valid){
continue;
}
IkReal x1539=x1540.value;
sj0array[0]=((((-11.1111111111111)*pp*x1539))+(((-2.36111111111111)*x1539))+(((12.2222222222222)*pz*x1539)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((0.045)+((px*(IKsin(j0))))+(((-0.045)*cj3))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1543=IKPowWithIntegerCheck(px,-1);
if(!x1543.valid){
continue;
}
IkReal x1541=x1543.value;
IkReal x1542=((0.045)*x1541);
sj0array[0]=(((cj3*x1542))+(((-1.0)*x1542))+(((-0.3)*sj3*x1541)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1544=((0.045)*sj3);
IkReal x1545=((0.3)*cj3);
IkReal x1546=(x1544+x1545);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1546)));
evalcond[3]=((0.55)+x1546+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(px,-1);
if(!x1548.valid){
continue;
}
IkReal x1547=x1548.value;
sj0array[0]=((((-11.1111111111111)*pp*x1547))+(((-12.2222222222222)*pz*x1547))+(((-2.36111111111111)*x1547)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((0.045)+((px*(IKsin(j0))))+(((-0.045)*cj3))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1551=IKPowWithIntegerCheck(px,-1);
if(!x1551.valid){
continue;
}
IkReal x1549=x1551.value;
IkReal x1550=((0.045)*x1549);
sj0array[0]=(((cj3*x1550))+(((-1.0)*x1550))+(((-0.3)*sj3*x1549)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1553=IKPowWithIntegerCheck(px,-1);
if(!x1553.valid){
continue;
}
IkReal x1552=x1553.value;
if( IKabs((x1552*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1552*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1552*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1552*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1552*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x1552*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1554=IKcos(j0);
IkReal x1555=IKsin(j0);
IkReal x1556=(px*x1555);
IkReal x1557=(px*x1554);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1557);
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1556+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1557))+(((-0.09)*x1556))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1559=IKPowWithIntegerCheck(px,-1);
if(!x1559.valid){
continue;
}
IkReal x1558=x1559.value;
if( IKabs(((0.111111111111111)*x1558*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1558*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1558*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1558*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1558*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1558*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1560=IKcos(j0);
IkReal x1561=IKsin(j0);
IkReal x1562=(px*x1561);
IkReal x1563=(px*x1560);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1563);
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1562+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1562))+(((-1.0)*pp))+(((1.1)*x1563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1564 = IKatan2WithCheck((gconst51*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst51*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1564.valid){
continue;
}
j0array[0]=x1564.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1565=IKcos(j0);
IkReal x1566=IKsin(j0);
IkReal x1567=(px*x1566);
IkReal x1568=(px*x1565);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1568);
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1567+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1567))+(((-1.0)*pp))+(((1.1)*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1570=IKPowWithIntegerCheck(px,-1);
if(!x1570.valid){
continue;
}
IkReal x1569=x1570.value;
if( IKabs(((0.111111111111111)*x1569*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1569*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1569*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1569*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1569*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1569*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1571=IKsin(j0);
IkReal x1572=IKcos(j0);
IkReal x1573=(px*x1571);
IkReal x1574=(px*x1572);
evalcond[0]=((0.045)+(((-0.045)*cj3))+x1573+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1574)));
evalcond[2]=((-0.2125)+(((-0.09)*x1573))+(((-1.0)*pp))+(((-1.1)*x1574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(px,-1);
if(!x1576.valid){
continue;
}
IkReal x1575=x1576.value;
if( IKabs((x1575*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1575*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1575*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1575*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1575*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x1575*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1577=IKsin(j0);
IkReal x1578=IKcos(j0);
IkReal x1579=(px*x1577);
IkReal x1580=(px*x1578);
evalcond[0]=((0.045)+(((-0.045)*cj3))+x1579+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1580)));
evalcond[2]=((-0.2125)+(((-1.1)*x1580))+(((-0.09)*x1579))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1581 = IKatan2WithCheck((gconst52*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst52*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1581.valid){
continue;
}
j0array[0]=x1581.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1582=IKsin(j0);
IkReal x1583=IKcos(j0);
IkReal x1584=(px*x1582);
IkReal x1585=(px*x1583);
evalcond[0]=((0.045)+(((-0.045)*cj3))+x1584+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1585)));
evalcond[2]=((-0.2125)+(((-1.1)*x1585))+(((-0.09)*x1584))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1587=IKPowWithIntegerCheck(px,-1);
if(!x1587.valid){
continue;
}
IkReal x1586=x1587.value;
CheckValue<IkReal> x1588=IKPowWithIntegerCheck(sj1,-1);
if(!x1588.valid){
continue;
}
if( IKabs((x1586*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1586*(x1588.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1586*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr((x1586*(x1588.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1586*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), (x1586*(x1588.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1589=IKcos(j0);
IkReal x1590=IKsin(j0);
IkReal x1591=(cj1*pz);
IkReal x1592=((0.3)*cj3);
IkReal x1593=((0.045)*sj3);
IkReal x1594=(px*x1590);
IkReal x1595=(px*x1589);
evalcond[0]=(((cj1*x1595))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1594+(((0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1592))+(((-1.0)*x1593))+x1591+((sj1*x1595)));
evalcond[3]=(((sj1*x1592))+((sj1*x1593))+(((0.55)*sj1))+(((-1.0)*x1595)));
evalcond[4]=((-0.2125)+(((-0.09)*x1594))+(((-1.0)*pp))+(((1.1)*x1591))+(((1.1)*sj1*x1595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1597=IKPowWithIntegerCheck(px,-1);
if(!x1597.valid){
continue;
}
IkReal x1596=x1597.value;
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(cj1,-1);
if(!x1598.valid){
continue;
}
if( IKabs((x1596*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((pz*sj1*x1596*(x1598.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1596*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr((pz*sj1*x1596*(x1598.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1596*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), (pz*sj1*x1596*(x1598.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1599=IKcos(j0);
IkReal x1600=IKsin(j0);
IkReal x1601=(cj1*pz);
IkReal x1602=((0.3)*cj3);
IkReal x1603=((0.045)*sj3);
IkReal x1604=(px*x1600);
IkReal x1605=(px*x1599);
evalcond[0]=(((cj1*x1605))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x1604+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1602))+(((-1.0)*x1603))+x1601+((sj1*x1605)));
evalcond[3]=((((-1.0)*x1605))+((sj1*x1602))+((sj1*x1603))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1604))+(((1.1)*sj1*x1605))+(((1.1)*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1606 = IKatan2WithCheck((gconst50*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst50*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1606.valid){
continue;
}
j0array[0]=x1606.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1607=IKcos(j0);
IkReal x1608=IKsin(j0);
IkReal x1609=(cj1*pz);
IkReal x1610=((0.3)*cj3);
IkReal x1611=((0.045)*sj3);
IkReal x1612=(px*x1608);
IkReal x1613=(px*x1607);
evalcond[0]=((((-1.0)*pz*sj1))+((cj1*x1613)));
evalcond[1]=((0.045)+x1612+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x1609+(((-1.0)*x1611))+(((-1.0)*x1610))+((sj1*x1613)));
evalcond[3]=((((-1.0)*x1613))+((sj1*x1611))+((sj1*x1610))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1612))+(((1.1)*x1609))+(((1.1)*sj1*x1613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1614=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1614;
evalcond[3]=x1614;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(px,-1);
if(!x1616.valid){
continue;
}
IkReal x1615=x1616.value;
sj0array[0]=((((11.1111111111111)*pp*x1615))+(((2.36111111111111)*x1615))+(((-12.2222222222222)*pz*x1615)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+((px*(IKsin(j0))))+(((-0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1619=IKPowWithIntegerCheck(px,-1);
if(!x1619.valid){
continue;
}
IkReal x1617=x1619.value;
IkReal x1618=((0.045)*x1617);
sj0array[0]=((((-1.0)*cj3*x1618))+(((0.3)*sj3*x1617))+x1618);
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1620=((0.045)*sj3);
IkReal x1621=((0.3)*cj3);
IkReal x1622=(x1621+x1620);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1622))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1622+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1624=IKPowWithIntegerCheck(px,-1);
if(!x1624.valid){
continue;
}
IkReal x1623=x1624.value;
sj0array[0]=((((11.1111111111111)*pp*x1623))+(((2.36111111111111)*x1623))+(((12.2222222222222)*pz*x1623)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+((px*(IKsin(j0))))+(((-0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1627=IKPowWithIntegerCheck(px,-1);
if(!x1627.valid){
continue;
}
IkReal x1625=x1627.value;
IkReal x1626=((0.045)*x1625);
sj0array[0]=((((0.3)*sj3*x1625))+x1626+(((-1.0)*cj3*x1626)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1629=IKPowWithIntegerCheck(px,-1);
if(!x1629.valid){
continue;
}
IkReal x1628=x1629.value;
if( IKabs((x1628*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1628*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1628*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1628*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1628*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x1628*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1630=IKsin(j0);
IkReal x1631=IKcos(j0);
IkReal x1632=(px*x1630);
IkReal x1633=(px*x1631);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1633);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1632+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1633))+(((0.09)*x1632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(px,-1);
if(!x1635.valid){
continue;
}
IkReal x1634=x1635.value;
if( IKabs(((0.111111111111111)*x1634*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1634*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1634*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1634*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1634*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1634*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1636=IKsin(j0);
IkReal x1637=IKcos(j0);
IkReal x1638=(px*x1636);
IkReal x1639=(px*x1637);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1639);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1638+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1639))+(((0.09)*x1638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1640 = IKatan2WithCheck((gconst54*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst54*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1640.valid){
continue;
}
j0array[0]=x1640.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1641=IKsin(j0);
IkReal x1642=IKcos(j0);
IkReal x1643=(px*x1641);
IkReal x1644=(px*x1642);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1644);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1643+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1644))+(((0.09)*x1643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1646=IKPowWithIntegerCheck(px,-1);
if(!x1646.valid){
continue;
}
IkReal x1645=x1646.value;
if( IKabs(((0.111111111111111)*x1645*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1645*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1645*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1645*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1645*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1645*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1647=IKsin(j0);
IkReal x1648=IKcos(j0);
IkReal x1649=(px*x1647);
IkReal x1650=(px*x1648);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1649+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1650)));
evalcond[2]=((-0.2125)+(((-1.1)*x1650))+(((-1.0)*pp))+(((0.09)*x1649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1652=IKPowWithIntegerCheck(px,-1);
if(!x1652.valid){
continue;
}
IkReal x1651=x1652.value;
if( IKabs((x1651*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1651*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1651*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1651*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1651*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x1651*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1653=IKsin(j0);
IkReal x1654=IKcos(j0);
IkReal x1655=(px*x1653);
IkReal x1656=(px*x1654);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1655+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1656)));
evalcond[2]=((-0.2125)+(((-1.1)*x1656))+(((-1.0)*pp))+(((0.09)*x1655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1657 = IKatan2WithCheck((gconst55*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst55*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1657.valid){
continue;
}
j0array[0]=x1657.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1658=IKsin(j0);
IkReal x1659=IKcos(j0);
IkReal x1660=(px*x1658);
IkReal x1661=(px*x1659);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1660+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1661)));
evalcond[2]=((-0.2125)+(((-1.1)*x1661))+(((-1.0)*pp))+(((0.09)*x1660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1663=IKPowWithIntegerCheck(px,-1);
if(!x1663.valid){
continue;
}
IkReal x1662=x1663.value;
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(sj1,-1);
if(!x1664.valid){
continue;
}
if( IKabs((x1662*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1662*(x1664.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1662*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr((x1662*(x1664.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1662*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), (x1662*(x1664.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1665=IKcos(j0);
IkReal x1666=IKsin(j0);
IkReal x1667=(cj1*pz);
IkReal x1668=((0.045)*sj3);
IkReal x1669=((0.3)*cj3);
IkReal x1670=(px*x1666);
IkReal x1671=(px*x1665);
evalcond[0]=(((pz*sj1))+(((-1.0)*cj1*x1671)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1670+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+((sj1*x1671))+x1667+(((-1.0)*x1668))+(((-1.0)*x1669)));
evalcond[3]=(((sj1*x1668))+((sj1*x1669))+(((-1.0)*x1671))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((0.09)*x1670))+(((1.1)*sj1*x1671))+(((-1.0)*pp))+(((1.1)*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1673=IKPowWithIntegerCheck(px,-1);
if(!x1673.valid){
continue;
}
IkReal x1672=x1673.value;
CheckValue<IkReal> x1674=IKPowWithIntegerCheck(cj1,-1);
if(!x1674.valid){
continue;
}
if( IKabs((x1672*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((pz*sj1*x1672*(x1674.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1672*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr((pz*sj1*x1672*(x1674.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1672*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), (pz*sj1*x1672*(x1674.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1675=IKcos(j0);
IkReal x1676=IKsin(j0);
IkReal x1677=(cj1*pz);
IkReal x1678=((0.045)*sj3);
IkReal x1679=((0.3)*cj3);
IkReal x1680=(px*x1676);
IkReal x1681=(px*x1675);
evalcond[0]=((((-1.0)*cj1*x1681))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1680+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x1677+((sj1*x1681))+(((-1.0)*x1679))+(((-1.0)*x1678)));
evalcond[3]=(((sj1*x1679))+((sj1*x1678))+(((-1.0)*x1681))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x1681))+(((0.09)*x1680))+(((-1.0)*pp))+(((1.1)*x1677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1682 = IKatan2WithCheck((gconst53*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst53*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1682.valid){
continue;
}
j0array[0]=x1682.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1683=IKcos(j0);
IkReal x1684=IKsin(j0);
IkReal x1685=(cj1*pz);
IkReal x1686=((0.045)*sj3);
IkReal x1687=((0.3)*cj3);
IkReal x1688=(px*x1684);
IkReal x1689=(px*x1683);
evalcond[0]=((((-1.0)*cj1*x1689))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1688+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1687))+(((-1.0)*x1686))+x1685+((sj1*x1689)));
evalcond[3]=(((sj1*x1686))+((sj1*x1687))+(((-1.0)*x1689))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*x1685))+(((1.1)*sj1*x1689))+(((0.09)*x1688))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1690=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1690;
evalcond[3]=x1690;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign((((px*(sj2*sj2)))+((px*(cj2*cj2)))));
dummyeval[0]=(((px*(sj2*sj2)))+((px*(cj2*cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1691=x1690;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1691;
evalcond[3]=x1691;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1693=IKPowWithIntegerCheck(px,-1);
if(!x1693.valid){
continue;
}
IkReal x1692=x1693.value;
cj0array[0]=((((11.1111111111111)*pp*x1692))+(((-12.2222222222222)*pz*x1692))+(((2.36111111111111)*x1692)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1696=IKPowWithIntegerCheck(px,-1);
if(!x1696.valid){
continue;
}
IkReal x1694=x1696.value;
IkReal x1695=((0.045)*x1694);
cj0array[0]=((((0.3)*sj3*x1694))+x1695+(((-1.0)*cj3*x1695)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1697=x1690;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1697;
evalcond[3]=x1697;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1699=IKPowWithIntegerCheck(px,-1);
if(!x1699.valid){
continue;
}
IkReal x1698=x1699.value;
cj0array[0]=((((-2.36111111111111)*x1698))+(((-11.1111111111111)*pp*x1698))+(((12.2222222222222)*pz*x1698)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1702=IKPowWithIntegerCheck(px,-1);
if(!x1702.valid){
continue;
}
IkReal x1700=x1702.value;
IkReal x1701=((0.045)*x1700);
cj0array[0]=((((-0.3)*sj3*x1700))+(((-1.0)*x1701))+((cj3*x1701)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(px,-1);
if(!x1706.valid){
continue;
}
IkReal x1703=x1706.value;
IkReal x1704=((0.045)*cj2);
IkReal x1705=((0.3)*cj2*sj3);
CheckValue<IkReal> x1707=IKPowWithIntegerCheck(cj2,-1);
if(!x1707.valid){
continue;
}
if( IKabs((x1703*(x1707.value)*((((cj3*sj2*x1704))+(((-1.0)*sj2*x1704))+(((-1.0)*sj2*x1705)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1703*(((((-1.0)*cj3*x1704))+x1704+x1705)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1703*(x1707.value)*((((cj3*sj2*x1704))+(((-1.0)*sj2*x1704))+(((-1.0)*sj2*x1705))))))+IKsqr((x1703*(((((-1.0)*cj3*x1704))+x1704+x1705))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1703*(x1707.value)*((((cj3*sj2*x1704))+(((-1.0)*sj2*x1704))+(((-1.0)*sj2*x1705))))), (x1703*(((((-1.0)*cj3*x1704))+x1704+x1705))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1708=IKsin(j0);
IkReal x1709=IKcos(j0);
IkReal x1710=((0.045)*cj2);
IkReal x1711=((0.3)*sj3);
IkReal x1712=((0.045)*cj3);
IkReal x1713=(px*x1708);
IkReal x1714=(px*x1709);
evalcond[0]=(((sj2*x1714))+((cj2*x1713)));
evalcond[1]=(x1713+(((-1.0)*sj2*x1712))+(((0.045)*sj2))+((sj2*x1711)));
evalcond[2]=((((-1.0)*cj3*x1710))+x1710+(((-1.0)*x1714))+((cj2*x1711)));
evalcond[3]=((0.045)+x1711+(((-1.0)*x1712))+((sj2*x1713))+(((-1.0)*cj2*x1714)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*sj2*x1713))+(((0.09)*cj2*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1719=IKPowWithIntegerCheck(px,-1);
if(!x1719.valid){
continue;
}
IkReal x1715=x1719.value;
IkReal x1716=((0.045)*sj2);
IkReal x1717=((0.3)*sj2*sj3);
IkReal x1718=(cj3*x1716);
CheckValue<IkReal> x1720=IKPowWithIntegerCheck(sj2,-1);
if(!x1720.valid){
continue;
}
if( IKabs((x1715*((x1718+(((-1.0)*x1716))+(((-1.0)*x1717)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1715*(x1720.value)*((((cj2*x1717))+((cj2*x1716))+(((-1.0)*cj2*x1718)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1715*((x1718+(((-1.0)*x1716))+(((-1.0)*x1717))))))+IKsqr((x1715*(x1720.value)*((((cj2*x1717))+((cj2*x1716))+(((-1.0)*cj2*x1718))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1715*((x1718+(((-1.0)*x1716))+(((-1.0)*x1717))))), (x1715*(x1720.value)*((((cj2*x1717))+((cj2*x1716))+(((-1.0)*cj2*x1718))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1721=IKsin(j0);
IkReal x1722=IKcos(j0);
IkReal x1723=((0.045)*cj2);
IkReal x1724=((0.3)*sj3);
IkReal x1725=((0.045)*cj3);
IkReal x1726=(px*x1721);
IkReal x1727=(px*x1722);
evalcond[0]=(((cj2*x1726))+((sj2*x1727)));
evalcond[1]=(x1726+(((0.045)*sj2))+((sj2*x1724))+(((-1.0)*sj2*x1725)));
evalcond[2]=(((cj2*x1724))+x1723+(((-1.0)*cj3*x1723))+(((-1.0)*x1727)));
evalcond[3]=((0.045)+x1724+(((-1.0)*cj2*x1727))+(((-1.0)*x1725))+((sj2*x1726)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1726))+(((0.09)*cj2*x1727))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1728=((0.045)*cj2);
IkReal x1729=((0.3)*sj3);
IkReal x1730=((0.045)*sj2);
CheckValue<IkReal> x1731 = IKatan2WithCheck((gconst56*((((cj3*x1730))+(((-1.0)*x1730))+(((-1.0)*sj2*x1729))))),(gconst56*((((cj2*x1729))+x1728+(((-1.0)*cj3*x1728))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
j0array[0]=x1731.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1732=IKsin(j0);
IkReal x1733=IKcos(j0);
IkReal x1734=((0.045)*cj2);
IkReal x1735=((0.3)*sj3);
IkReal x1736=((0.045)*cj3);
IkReal x1737=(px*x1732);
IkReal x1738=(px*x1733);
evalcond[0]=(((cj2*x1737))+((sj2*x1738)));
evalcond[1]=(x1737+(((0.045)*sj2))+(((-1.0)*sj2*x1736))+((sj2*x1735)));
evalcond[2]=(((cj2*x1735))+x1734+(((-1.0)*cj3*x1734))+(((-1.0)*x1738)));
evalcond[3]=((0.045)+x1735+(((-1.0)*cj2*x1738))+(((-1.0)*x1736))+((sj2*x1737)));
evalcond[4]=((-0.2125)+(((0.09)*cj2*x1738))+(((-0.09)*sj2*x1737))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1739=((0.045)*sj3);
IkReal x1740=((0.3)*cj3);
IkReal x1741=(x1739+x1740);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1741)));
evalcond[3]=((0.55)+x1741+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign((((px*(sj2*sj2)))+((px*(cj2*cj2)))));
dummyeval[0]=(((px*(sj2*sj2)))+((px*(cj2*cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1742=((0.045)*sj3);
IkReal x1743=((0.3)*cj3);
IkReal x1744=(x1742+x1743);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1744)));
evalcond[3]=((0.55)+x1744+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1746=IKPowWithIntegerCheck(px,-1);
if(!x1746.valid){
continue;
}
IkReal x1745=x1746.value;
cj0array[0]=((((-2.36111111111111)*x1745))+(((-11.1111111111111)*pp*x1745))+(((-12.2222222222222)*pz*x1745)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1749=IKPowWithIntegerCheck(px,-1);
if(!x1749.valid){
continue;
}
IkReal x1747=x1749.value;
IkReal x1748=((0.045)*x1747);
cj0array[0]=(((cj3*x1748))+(((-0.3)*sj3*x1747))+(((-1.0)*x1748)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1750=((0.045)*sj3);
IkReal x1751=((0.3)*cj3);
IkReal x1752=(x1751+x1750);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1752)));
evalcond[3]=((0.55)+x1752+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1754=IKPowWithIntegerCheck(px,-1);
if(!x1754.valid){
continue;
}
IkReal x1753=x1754.value;
cj0array[0]=((((2.36111111111111)*x1753))+(((12.2222222222222)*pz*x1753))+(((11.1111111111111)*pp*x1753)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1757=IKPowWithIntegerCheck(px,-1);
if(!x1757.valid){
continue;
}
IkReal x1755=x1757.value;
IkReal x1756=((0.045)*x1755);
cj0array[0]=(x1756+(((-1.0)*cj3*x1756))+(((0.3)*sj3*x1755)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1761=IKPowWithIntegerCheck(px,-1);
if(!x1761.valid){
continue;
}
IkReal x1758=x1761.value;
IkReal x1759=((0.045)*cj2);
IkReal x1760=((0.3)*cj2*sj3);
CheckValue<IkReal> x1762=IKPowWithIntegerCheck(cj2,-1);
if(!x1762.valid){
continue;
}
if( IKabs((x1758*(x1762.value)*(((((-1.0)*sj2*x1760))+(((-1.0)*sj2*x1759))+((cj3*sj2*x1759)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1758*(((((-1.0)*x1760))+((cj3*x1759))+(((-1.0)*x1759)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1758*(x1762.value)*(((((-1.0)*sj2*x1760))+(((-1.0)*sj2*x1759))+((cj3*sj2*x1759))))))+IKsqr((x1758*(((((-1.0)*x1760))+((cj3*x1759))+(((-1.0)*x1759))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1758*(x1762.value)*(((((-1.0)*sj2*x1760))+(((-1.0)*sj2*x1759))+((cj3*sj2*x1759))))), (x1758*(((((-1.0)*x1760))+((cj3*x1759))+(((-1.0)*x1759))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1763=IKsin(j0);
IkReal x1764=IKcos(j0);
IkReal x1765=((0.045)*cj2);
IkReal x1766=((0.3)*sj3);
IkReal x1767=((0.045)*cj3);
IkReal x1768=(px*x1763);
IkReal x1769=(px*x1764);
evalcond[0]=((((-1.0)*sj2*x1769))+((cj2*x1768)));
evalcond[1]=((((-1.0)*sj2*x1767))+x1768+((sj2*x1766))+(((0.045)*sj2)));
evalcond[2]=((((-1.0)*cj2*x1766))+(((-1.0)*x1769))+(((-1.0)*x1765))+((cj3*x1765)));
evalcond[3]=((0.045)+(((-1.0)*x1767))+x1766+((sj2*x1768))+((cj2*x1769)));
evalcond[4]=((-0.2125)+(((-0.09)*cj2*x1769))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*sj2*x1768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1774=IKPowWithIntegerCheck(px,-1);
if(!x1774.valid){
continue;
}
IkReal x1770=x1774.value;
IkReal x1771=((0.045)*sj2);
IkReal x1772=((0.3)*sj2*sj3);
IkReal x1773=(cj3*x1771);
CheckValue<IkReal> x1775=IKPowWithIntegerCheck(sj2,-1);
if(!x1775.valid){
continue;
}
if( IKabs((x1770*((x1773+(((-1.0)*x1772))+(((-1.0)*x1771)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1770*(x1775.value)*(((((-1.0)*cj2*x1771))+(((-1.0)*cj2*x1772))+((cj2*x1773)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1770*((x1773+(((-1.0)*x1772))+(((-1.0)*x1771))))))+IKsqr((x1770*(x1775.value)*(((((-1.0)*cj2*x1771))+(((-1.0)*cj2*x1772))+((cj2*x1773))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1770*((x1773+(((-1.0)*x1772))+(((-1.0)*x1771))))), (x1770*(x1775.value)*(((((-1.0)*cj2*x1771))+(((-1.0)*cj2*x1772))+((cj2*x1773))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1776=IKsin(j0);
IkReal x1777=IKcos(j0);
IkReal x1778=((0.045)*cj2);
IkReal x1779=((0.3)*sj3);
IkReal x1780=((0.045)*cj3);
IkReal x1781=(px*x1776);
IkReal x1782=(px*x1777);
evalcond[0]=((((-1.0)*sj2*x1782))+((cj2*x1781)));
evalcond[1]=(x1781+(((0.045)*sj2))+((sj2*x1779))+(((-1.0)*sj2*x1780)));
evalcond[2]=((((-1.0)*cj2*x1779))+(((-1.0)*x1778))+(((-1.0)*x1782))+((cj3*x1778)));
evalcond[3]=((0.045)+(((-1.0)*x1780))+((sj2*x1781))+x1779+((cj2*x1782)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1781))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*cj2*x1782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1783=((0.045)*cj2);
IkReal x1784=((0.045)*sj2);
IkReal x1785=((0.3)*sj3);
CheckValue<IkReal> x1786 = IKatan2WithCheck((gconst57*(((((-1.0)*x1784))+((cj3*x1784))+(((-1.0)*sj2*x1785))))),(gconst57*(((((-1.0)*x1783))+((cj3*x1783))+(((-1.0)*cj2*x1785))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
j0array[0]=x1786.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1787=IKsin(j0);
IkReal x1788=IKcos(j0);
IkReal x1789=((0.045)*cj2);
IkReal x1790=((0.3)*sj3);
IkReal x1791=((0.045)*cj3);
IkReal x1792=(px*x1787);
IkReal x1793=(px*x1788);
evalcond[0]=((((-1.0)*sj2*x1793))+((cj2*x1792)));
evalcond[1]=((((-1.0)*sj2*x1791))+((sj2*x1790))+x1792+(((0.045)*sj2)));
evalcond[2]=((((-1.0)*x1789))+((cj3*x1789))+(((-1.0)*cj2*x1790))+(((-1.0)*x1793)));
evalcond[3]=((0.045)+(((-1.0)*x1791))+((sj2*x1792))+x1790+((cj2*x1793)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*sj2*x1792))+(((-1.1)*pz))+(((-0.09)*cj2*x1793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1794=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1794;
evalcond[3]=x1794;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1795=((110.0)*pz);
IkReal x1796=((100.0)*pp);
CheckValue<IkReal> x1797 = IKatan2WithCheck((gconst59*((((py*x1795))+(((-1.0)*py*x1796))+(((-21.25)*py))))),(gconst59*(((((-21.25)*px))+(((-1.0)*px*x1796))+((px*x1795))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1797.valid){
continue;
}
j0array[0]=x1797.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1798=IKcos(j0);
IkReal x1799=IKsin(j0);
IkReal x1800=((1.0)*py);
IkReal x1801=(px*x1798);
evalcond[0]=((((-1.0)*x1798*x1800))+((px*x1799)));
evalcond[1]=((0.045)+(((-1.0)*x1799*x1800))+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1801)));
evalcond[2]=((-0.2125)+(((0.09)*x1801))+(((-1.0)*pp))+(((0.09)*py*x1799))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1802=((0.3)*sj3);
IkReal x1803=((0.045)*px);
IkReal x1804=((0.045)*py);
CheckValue<IkReal> x1805 = IKatan2WithCheck((gconst58*(((((-1.0)*cj3*x1804))+x1804+((py*x1802))))),(gconst58*(((((-1.0)*cj3*x1803))+x1803+((px*x1802))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1805.valid){
continue;
}
j0array[0]=x1805.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1806=IKcos(j0);
IkReal x1807=IKsin(j0);
IkReal x1808=((1.0)*py);
IkReal x1809=(px*x1806);
evalcond[0]=((((-1.0)*x1806*x1808))+((px*x1807)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1807*x1808))+(((-1.0)*x1809)));
evalcond[2]=((-0.2125)+(((0.09)*x1809))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*x1807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1810=((0.045)*sj3);
IkReal x1811=((0.3)*cj3);
IkReal x1812=(x1810+x1811);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1812))+(((-1.0)*pz)));
evalcond[3]=((0.55)+pz+x1812);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1813=((110.0)*pz);
IkReal x1814=((100.0)*pp);
CheckValue<IkReal> x1815 = IKatan2WithCheck((gconst61*(((((-1.0)*py*x1814))+(((-1.0)*py*x1813))+(((-21.25)*py))))),(gconst61*(((((-21.25)*px))+(((-1.0)*px*x1813))+(((-1.0)*px*x1814))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1815.valid){
continue;
}
j0array[0]=x1815.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1816=IKsin(j0);
IkReal x1817=IKcos(j0);
IkReal x1818=(px*x1817);
IkReal x1819=(py*x1816);
evalcond[0]=(((px*x1816))+(((-1.0)*py*x1817)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1818+x1819+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1819))+(((-0.09)*x1818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1820=((0.3)*sj3);
IkReal x1821=((0.045)*px);
IkReal x1822=((0.045)*py);
CheckValue<IkReal> x1823 = IKatan2WithCheck((gconst60*(((((-1.0)*cj3*x1822))+((py*x1820))+x1822))),(gconst60*(((((-1.0)*cj3*x1821))+((px*x1820))+x1821))),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
j0array[0]=x1823.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1824=IKsin(j0);
IkReal x1825=IKcos(j0);
IkReal x1826=(px*x1825);
IkReal x1827=(py*x1824);
evalcond[0]=((((-1.0)*py*x1825))+((px*x1824)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1827+x1826+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1826))+(((-0.09)*x1827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1828=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1828;
evalcond[3]=x1828;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1829=((110.0)*pz);
IkReal x1830=((100.0)*pp);
CheckValue<IkReal> x1831 = IKatan2WithCheck((gconst63*((((py*x1829))+(((-1.0)*py*x1830))+(((-21.25)*py))))),(gconst63*((((px*x1829))+(((-21.25)*px))+(((-1.0)*px*x1830))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
j0array[0]=x1831.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1832=IKsin(j0);
IkReal x1833=IKcos(j0);
IkReal x1834=(px*x1833);
IkReal x1835=(py*x1832);
evalcond[0]=(((px*x1832))+(((-1.0)*py*x1833)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1834+x1835+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1834))+(((-0.09)*x1835))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1836=((0.3)*sj3);
IkReal x1837=((0.045)*px);
IkReal x1838=((0.045)*py);
CheckValue<IkReal> x1839 = IKatan2WithCheck((gconst62*((x1838+((py*x1836))+(((-1.0)*cj3*x1838))))),(gconst62*((((px*x1836))+x1837+(((-1.0)*cj3*x1837))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1839.valid){
continue;
}
j0array[0]=x1839.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1840=IKsin(j0);
IkReal x1841=IKcos(j0);
IkReal x1842=(px*x1841);
IkReal x1843=(py*x1840);
evalcond[0]=(((px*x1840))+(((-1.0)*py*x1841)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1843+x1842+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*x1842))+(((-0.09)*x1843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1844=((0.045)*sj3);
IkReal x1845=((0.3)*cj3);
IkReal x1846=(x1845+x1844);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1846))+(((-1.0)*pz)));
evalcond[3]=((0.55)+pz+x1846);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1847=((110.0)*pz);
IkReal x1848=((100.0)*pp);
CheckValue<IkReal> x1849 = IKatan2WithCheck((gconst65*(((((-21.25)*py))+(((-1.0)*py*x1848))+(((-1.0)*py*x1847))))),(gconst65*(((((-1.0)*px*x1848))+(((-1.0)*px*x1847))+(((-21.25)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1849.valid){
continue;
}
j0array[0]=x1849.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1850=IKcos(j0);
IkReal x1851=IKsin(j0);
IkReal x1852=((1.0)*py);
IkReal x1853=(px*x1850);
evalcond[0]=((((-1.0)*x1850*x1852))+((px*x1851)));
evalcond[1]=((0.045)+(((-1.0)*x1853))+(((-1.0)*x1851*x1852))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1853))+(((0.09)*py*x1851))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1854=((0.3)*sj3);
IkReal x1855=((0.045)*px);
IkReal x1856=((0.045)*py);
CheckValue<IkReal> x1857 = IKatan2WithCheck((gconst64*((((py*x1854))+(((-1.0)*cj3*x1856))+x1856))),(gconst64*(((((-1.0)*cj3*x1855))+x1855+((px*x1854))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
j0array[0]=x1857.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1858=IKcos(j0);
IkReal x1859=IKsin(j0);
IkReal x1860=((1.0)*py);
IkReal x1861=(px*x1858);
evalcond[0]=(((px*x1859))+(((-1.0)*x1858*x1860)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1859*x1860))+(((-1.0)*x1861)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1859))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1862=sj1*sj1;
IkReal x1863=cj1*cj1;
IkReal x1864=(px*sj2);
IkReal x1865=((0.55)*cj1);
IkReal x1866=((1.0)*pz);
IkReal x1867=(cj2*py);
IkReal x1868=((0.3)*cj3);
IkReal x1869=(py*sj2);
IkReal x1870=(cj2*px);
IkReal x1871=((0.045)*sj3);
IkReal x1872=(cj1*pz);
CheckValue<IkReal> x1873 = IKatan2WithCheck((gconst1*((((cj1*x1864*x1871))+((x1864*x1865))+(((-0.55)*x1867))+(((-1.0)*x1867*x1868))+((cj1*x1864*x1868))+(((-1.0)*x1862*x1864*x1866))+(((-1.0)*x1863*x1864*x1866))+(((-1.0)*x1867*x1871))+((x1867*x1872))))),(gconst1*((((pz*x1862*x1869))+(((-1.0)*cj1*x1869*x1871))+(((-1.0)*x1868*x1870))+(((-1.0)*x1870*x1871))+(((-1.0)*x1865*x1869))+(((-1.0)*cj1*x1868*x1869))+(((-0.55)*x1870))+((pz*x1863*x1869))+((x1870*x1872))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1873.valid){
continue;
}
j0array[0]=x1873.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1874=IKsin(j0);
IkReal x1875=IKcos(j0);
IkReal x1876=(cj1*sj2);
IkReal x1877=((0.09)*sj2);
IkReal x1878=((0.3)*sj3);
IkReal x1879=((0.045)*cj3);
IkReal x1880=((1.1)*sj1);
IkReal x1881=((0.3)*cj3);
IkReal x1882=(cj1*cj2);
IkReal x1883=((0.045)*sj3);
IkReal x1884=((1.0)*sj2);
IkReal x1885=(cj1*pz);
IkReal x1886=(px*x1874);
IkReal x1887=(px*x1875);
IkReal x1888=(py*x1875);
IkReal x1889=(py*x1874);
IkReal x1890=(cj2*pz*sj1);
evalcond[0]=((-0.55)+x1885+(((-1.0)*x1881))+(((-1.0)*x1883))+((sj1*x1887))+((sj1*x1889)));
evalcond[1]=(((sj2*x1878))+(((0.045)*sj2))+(((-1.0)*sj2*x1879))+x1886+(((-1.0)*x1888)));
evalcond[2]=(((x1876*x1889))+((x1876*x1887))+(((-1.0)*cj2*x1888))+((cj2*x1886))+(((-1.0)*pz*sj1*x1884)));
evalcond[3]=((((-1.0)*x1879*x1882))+(((0.045)*x1882))+((x1878*x1882))+(((-1.0)*x1887))+(((-1.0)*x1889))+(((0.55)*sj1))+((sj1*x1881))+((sj1*x1883)));
evalcond[4]=((0.045)+((sj2*x1886))+(((-1.0)*x1879))+(((-1.0)*x1884*x1888))+x1878+x1890+(((-1.0)*x1882*x1889))+(((-1.0)*x1882*x1887)));
evalcond[5]=((-0.2125)+((x1877*x1888))+(((1.1)*x1885))+((x1880*x1887))+((x1880*x1889))+(((0.09)*x1882*x1889))+(((0.09)*x1882*x1887))+(((-1.0)*pp))+(((-0.09)*x1890))+(((-1.0)*x1877*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1891=((0.045)*px);
IkReal x1892=(sj1*sj2);
IkReal x1893=((0.3)*cj3);
IkReal x1894=((0.3)*sj3);
IkReal x1895=((1.0)*cj1*pz);
IkReal x1896=((0.045)*py*x1892);
CheckValue<IkReal> x1897 = IKatan2WithCheck((gconst0*(((((-1.0)*px*x1892*x1894))+(((0.045)*py*sj3))+(((-1.0)*x1891*x1892))+((py*x1893))+(((0.55)*py))+(((-1.0)*py*x1895))+((cj3*x1891*x1892))))),(gconst0*((((sj3*x1891))+(((-1.0)*px*x1895))+((px*x1893))+x1896+(((-1.0)*cj3*x1896))+((py*x1892*x1894))+(((0.55)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
j0array[0]=x1897.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1898=IKsin(j0);
IkReal x1899=IKcos(j0);
IkReal x1900=(cj1*sj2);
IkReal x1901=((0.09)*sj2);
IkReal x1902=((0.3)*sj3);
IkReal x1903=((0.045)*cj3);
IkReal x1904=((1.1)*sj1);
IkReal x1905=((0.3)*cj3);
IkReal x1906=(cj1*cj2);
IkReal x1907=((0.045)*sj3);
IkReal x1908=((1.0)*sj2);
IkReal x1909=(cj1*pz);
IkReal x1910=(px*x1898);
IkReal x1911=(px*x1899);
IkReal x1912=(py*x1899);
IkReal x1913=(py*x1898);
IkReal x1914=(cj2*pz*sj1);
evalcond[0]=((-0.55)+x1909+((sj1*x1913))+((sj1*x1911))+(((-1.0)*x1905))+(((-1.0)*x1907)));
evalcond[1]=((((-1.0)*sj2*x1903))+(((0.045)*sj2))+(((-1.0)*x1912))+x1910+((sj2*x1902)));
evalcond[2]=((((-1.0)*cj2*x1912))+(((-1.0)*pz*sj1*x1908))+((cj2*x1910))+((x1900*x1911))+((x1900*x1913)));
evalcond[3]=((((0.045)*x1906))+(((-1.0)*x1903*x1906))+(((-1.0)*x1911))+(((-1.0)*x1913))+((sj1*x1905))+((sj1*x1907))+(((0.55)*sj1))+((x1902*x1906)));
evalcond[4]=((0.045)+(((-1.0)*x1906*x1913))+(((-1.0)*x1906*x1911))+x1902+x1914+((sj2*x1910))+(((-1.0)*x1903))+(((-1.0)*x1908*x1912)));
evalcond[5]=((-0.2125)+((x1904*x1911))+((x1904*x1913))+(((-0.09)*x1914))+((x1901*x1912))+(((1.1)*x1909))+(((-1.0)*x1901*x1910))+(((-1.0)*pp))+(((0.09)*x1906*x1913))+(((0.09)*x1906*x1911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1915=((0.045)*sj2);
CheckValue<IkReal> x1918 = IKatan2WithCheck(((-1.0)*py),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1918.valid){
continue;
}
IkReal x1916=((1.0)*(x1918.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1919.valid){
continue;
}
if( (((x1919.value)*(((((0.3)*sj2*sj3))+x1915+(((-1.0)*cj3*x1915)))))) < -1-IKFAST_SINCOS_THRESH || (((x1919.value)*(((((0.3)*sj2*sj3))+x1915+(((-1.0)*cj3*x1915)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1917=IKasin(((x1919.value)*(((((0.3)*sj2*sj3))+x1915+(((-1.0)*cj3*x1915))))));
j0array[0]=((((-1.0)*x1917))+(((-1.0)*x1916)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x1917+(((-1.0)*x1916)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1920=py*py;
IkReal x1921=cj2*cj2;
IkReal x1922=sj2*sj2;
IkReal x1923=IKcos(j0);
IkReal x1924=IKsin(j0);
IkReal x1925=px*px;
IkReal x1926=((0.045)*sj2);
IkReal x1927=((1.0)*x1925);
IkReal x1928=((0.3)*sj2*sj3);
IkReal x1929=(px*py*x1922);
IkReal x1930=(px*py*x1921);
evalcond[0]=((((-1.0)*py*x1926))+(((-1.0)*py*x1928))+((cj3*py*x1926))+((x1923*((((x1920*x1921))+((x1920*x1922))))))+((x1924*(((((-1.0)*x1929))+(((-1.0)*x1930)))))));
evalcond[1]=(((cj3*px*x1926))+(((-1.0)*px*x1926))+(((-1.0)*px*x1928))+((x1923*((x1929+x1930))))+((x1924*(((((-1.0)*x1922*x1927))+(((-1.0)*x1921*x1927)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst66;
IkReal x1931=(py*sj0);
IkReal x1932=((0.3)*cj3);
IkReal x1933=(cj0*px);
IkReal x1934=(cj2*pz);
IkReal x1935=((0.045)*sj3);
gconst66=IKsign(((((-1.0)*x1933*x1935))+(((-1.0)*x1932*x1933))+(((-0.55)*x1931))+(((-0.55)*x1933))+(((-0.045)*x1934))+(((-1.0)*x1931*x1935))+(((-1.0)*x1931*x1932))+(((-0.3)*sj3*x1934))+(((0.045)*cj3*x1934))));
IkReal x1936=(py*sj0);
IkReal x1937=(cj2*pz);
IkReal x1938=((6.66666666666667)*cj3);
IkReal x1939=(cj0*px);
IkReal x1940=((1.0)*sj3);
dummyeval[0]=((((-6.66666666666667)*sj3*x1937))+(((-1.0)*x1937))+((cj3*x1937))+(((-12.2222222222222)*x1939))+(((-12.2222222222222)*x1936))+(((-1.0)*x1938*x1939))+(((-1.0)*x1936*x1940))+(((-1.0)*x1939*x1940))+(((-1.0)*x1936*x1938)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign((((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0)))));
dummyeval[0]=(((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1941=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1941;
evalcond[3]=x1941;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst68;
IkReal x1942=(cj0*px);
IkReal x1943=((0.045)*pz);
IkReal x1944=(py*sj0);
IkReal x1945=((0.3)*cj3);
IkReal x1946=((0.045)*sj3);
gconst68=IKsign((((cj3*x1943))+(((-1.0)*x1943))+(((-0.3)*pz*sj3))+(((-1.0)*x1942*x1946))+(((-1.0)*x1942*x1945))+(((-1.0)*x1944*x1946))+(((-1.0)*x1944*x1945))+(((-0.55)*x1942))+(((-0.55)*x1944))));
IkReal x1947=(py*sj0);
IkReal x1948=((6.66666666666667)*cj3);
IkReal x1949=(cj0*px);
IkReal x1950=((1.0)*sj3);
dummyeval[0]=((((-1.0)*x1949*x1950))+(((-6.66666666666667)*pz*sj3))+(((-1.0)*x1947*x1948))+(((-1.0)*x1947*x1950))+(((-1.0)*pz))+((cj3*pz))+(((-12.2222222222222)*x1947))+(((-12.2222222222222)*x1949))+(((-1.0)*x1948*x1949)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst69;
gconst69=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1951=(py*sj0);
IkReal x1952=(cj0*px);
IkReal x1953=((0.3)*sj3);
IkReal x1954=((0.045)*cj3);
IkReal x1955=((0.3)*cj3);
IkReal x1956=((0.045)*pz);
IkReal x1957=((0.045)*sj3);
CheckValue<IkReal> x1958 = IKatan2WithCheck((gconst69*(((((-1.0)*x1952*x1955))+(((-1.0)*x1952*x1957))+((pz*x1953))+(((-1.0)*x1951*x1955))+(((-1.0)*x1951*x1957))+x1956+(((-1.0)*pz*x1954))+(((-0.55)*x1951))+(((-0.55)*x1952))))),(gconst69*(((((-0.55)*pz))+((x1952*x1954))+(((-1.0)*x1952*x1953))+(((-1.0)*sj3*x1956))+((x1951*x1954))+(((-1.0)*x1951*x1953))+(((-1.0)*pz*x1955))+(((-0.045)*x1952))+(((-0.045)*x1951))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1958.valid){
continue;
}
j1array[0]=x1958.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1959=IKsin(j1);
IkReal x1960=IKcos(j1);
IkReal x1961=((0.3)*cj3);
IkReal x1962=((0.045)*cj3);
IkReal x1963=(cj0*px);
IkReal x1964=(py*sj0);
IkReal x1965=((0.045)*sj3);
IkReal x1966=((0.3)*sj3);
IkReal x1967=((0.045)*x1959);
IkReal x1968=((1.0)*x1960);
IkReal x1969=(pz*x1959);
IkReal x1970=(pz*x1960);
IkReal x1971=((0.09)*x1960);
IkReal x1972=((1.1)*x1959);
evalcond[0]=((-0.55)+((x1959*x1963))+((x1959*x1964))+(((-1.0)*x1965))+(((-1.0)*x1961))+x1970);
evalcond[1]=((0.045)+(((-1.0)*x1964*x1968))+(((-1.0)*x1962))+x1969+x1966+(((-1.0)*x1963*x1968)));
evalcond[2]=((((-1.0)*x1959*x1962))+((x1959*x1966))+x1967+pz+(((-1.0)*x1960*x1965))+(((-1.0)*x1960*x1961))+(((-0.55)*x1960)));
evalcond[3]=((((0.55)*x1959))+((x1959*x1961))+((x1959*x1965))+(((-1.0)*x1963))+(((-1.0)*x1964))+(((-1.0)*x1960*x1962))+((x1960*x1966))+(((0.045)*x1960)));
evalcond[4]=((-0.2125)+(((1.1)*x1970))+((x1964*x1971))+((x1964*x1972))+(((-1.0)*pp))+(((-0.09)*x1969))+((x1963*x1971))+((x1963*x1972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1973=cj3*cj3;
IkReal x1974=sj3*sj3;
IkReal x1975=(cj3*sj3);
IkReal x1976=((1.0)*pz);
CheckValue<IkReal> x1977 = IKatan2WithCheck((gconst68*(((-0.3025)+(((-0.027)*x1975))+(((-0.002025)*x1974))+(((-0.0495)*sj3))+(pz*pz)+(((-0.09)*x1973))+(((-0.33)*cj3))))),(gconst68*(((-0.02475)+(((-1.0)*py*sj0*x1976))+(((0.01125)*cj3))+(((0.0135)*x1973))+(((-0.167025)*sj3))+(((-1.0)*cj0*px*x1976))+(((-0.0135)*x1974))+(((-0.087975)*x1975))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
j1array[0]=x1977.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1978=IKsin(j1);
IkReal x1979=IKcos(j1);
IkReal x1980=((0.3)*cj3);
IkReal x1981=((0.045)*cj3);
IkReal x1982=(cj0*px);
IkReal x1983=(py*sj0);
IkReal x1984=((0.045)*sj3);
IkReal x1985=((0.3)*sj3);
IkReal x1986=((0.045)*x1978);
IkReal x1987=((1.0)*x1979);
IkReal x1988=(pz*x1978);
IkReal x1989=(pz*x1979);
IkReal x1990=((0.09)*x1979);
IkReal x1991=((1.1)*x1978);
evalcond[0]=((-0.55)+(((-1.0)*x1984))+(((-1.0)*x1980))+((x1978*x1982))+((x1978*x1983))+x1989);
evalcond[1]=((0.045)+(((-1.0)*x1981))+(((-1.0)*x1983*x1987))+x1985+x1988+(((-1.0)*x1982*x1987)));
evalcond[2]=((((-1.0)*x1979*x1984))+(((-1.0)*x1979*x1980))+((x1978*x1985))+x1986+pz+(((-0.55)*x1979))+(((-1.0)*x1978*x1981)));
evalcond[3]=((((-1.0)*x1979*x1981))+((x1978*x1984))+((x1978*x1980))+((x1979*x1985))+(((-1.0)*x1983))+(((-1.0)*x1982))+(((0.55)*x1978))+(((0.045)*x1979)));
evalcond[4]=((-0.2125)+(((1.1)*x1989))+((x1983*x1990))+((x1983*x1991))+(((-1.0)*pp))+((x1982*x1990))+((x1982*x1991))+(((-0.09)*x1988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1992=(px*sj0);
IkReal x1993=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x1992+(((-1.0)*x1993)));
evalcond[3]=(x1993+(((-1.0)*x1992)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst71;
IkReal x1994=(cj0*px);
IkReal x1995=((0.045)*pz);
IkReal x1996=(py*sj0);
IkReal x1997=((0.3)*cj3);
IkReal x1998=((0.045)*sj3);
gconst71=IKsign(((((-0.55)*x1994))+(((-0.55)*x1996))+(((-1.0)*x1996*x1997))+(((-1.0)*x1996*x1998))+(((-1.0)*cj3*x1995))+x1995+(((-1.0)*x1994*x1998))+(((-1.0)*x1994*x1997))+(((0.3)*pz*sj3))));
IkReal x1999=(py*sj0);
IkReal x2000=((6.66666666666667)*cj3);
IkReal x2001=(cj0*px);
IkReal x2002=((1.0)*sj3);
dummyeval[0]=((((-12.2222222222222)*x2001))+(((-1.0)*cj3*pz))+(((6.66666666666667)*pz*sj3))+(((-1.0)*x2001*x2002))+(((-1.0)*x2000*x2001))+pz+(((-12.2222222222222)*x1999))+(((-1.0)*x1999*x2000))+(((-1.0)*x1999*x2002)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst70;
gconst70=IKsign(((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0))));
dummyeval[0]=((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2003=(py*sj0);
IkReal x2004=(cj0*px);
IkReal x2005=((0.3)*sj3);
IkReal x2006=((0.045)*cj3);
IkReal x2007=((0.3)*cj3);
IkReal x2008=((0.045)*pz);
IkReal x2009=((0.045)*sj3);
CheckValue<IkReal> x2010 = IKatan2WithCheck((gconst70*(((((0.55)*x2004))+(((0.55)*x2003))+x2008+(((-1.0)*pz*x2006))+((pz*x2005))+((x2004*x2009))+((x2004*x2007))+((x2003*x2007))+((x2003*x2009))))),(gconst70*(((((-1.0)*x2004*x2005))+(((-1.0)*x2003*x2005))+((sj3*x2008))+((pz*x2007))+((x2004*x2006))+(((-0.045)*x2003))+(((-0.045)*x2004))+(((0.55)*pz))+((x2003*x2006))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
j1array[0]=x2010.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2011=IKsin(j1);
IkReal x2012=IKcos(j1);
IkReal x2013=((0.3)*cj3);
IkReal x2014=((0.045)*cj3);
IkReal x2015=(cj0*px);
IkReal x2016=(py*sj0);
IkReal x2017=((0.045)*sj3);
IkReal x2018=((0.3)*sj3);
IkReal x2019=((0.045)*x2011);
IkReal x2020=(pz*x2011);
IkReal x2021=(pz*x2012);
IkReal x2022=((0.09)*x2012);
IkReal x2023=((1.1)*x2011);
evalcond[0]=((-0.55)+(((-1.0)*x2017))+(((-1.0)*x2013))+x2021+((x2011*x2016))+((x2011*x2015)));
evalcond[1]=((0.045)+(((-1.0)*x2014))+x2018+(((-1.0)*x2020))+((x2012*x2016))+((x2012*x2015)));
evalcond[2]=((((-1.0)*x2019))+((x2011*x2014))+(((-1.0)*x2011*x2018))+pz+(((-1.0)*x2012*x2013))+(((-1.0)*x2012*x2017))+(((-0.55)*x2012)));
evalcond[3]=((((0.55)*x2011))+(((-0.045)*x2012))+((x2011*x2013))+((x2011*x2017))+(((-1.0)*x2012*x2018))+((x2012*x2014))+(((-1.0)*x2016))+(((-1.0)*x2015)));
evalcond[4]=((-0.2125)+(((-1.0)*x2016*x2022))+(((0.09)*x2020))+(((1.1)*x2021))+(((-1.0)*pp))+((x2016*x2023))+(((-1.0)*x2015*x2022))+((x2015*x2023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2024=sj3*sj3;
IkReal x2025=cj3*cj3;
IkReal x2026=(cj3*sj3);
IkReal x2027=((1.0)*pz);
CheckValue<IkReal> x2028 = IKatan2WithCheck((gconst71*(((-0.3025)+(((-0.0495)*sj3))+(((-0.027)*x2026))+(((-0.09)*x2025))+(pz*pz)+(((-0.002025)*x2024))+(((-0.33)*cj3))))),(gconst71*(((0.02475)+(((-0.01125)*cj3))+(((-1.0)*cj0*px*x2027))+(((-1.0)*py*sj0*x2027))+(((0.167025)*sj3))+(((-0.0135)*x2025))+(((0.087975)*x2026))+(((0.0135)*x2024))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2028.valid){
continue;
}
j1array[0]=x2028.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2029=IKsin(j1);
IkReal x2030=IKcos(j1);
IkReal x2031=((0.3)*cj3);
IkReal x2032=((0.045)*cj3);
IkReal x2033=(cj0*px);
IkReal x2034=(py*sj0);
IkReal x2035=((0.045)*sj3);
IkReal x2036=((0.3)*sj3);
IkReal x2037=((0.045)*x2029);
IkReal x2038=(pz*x2029);
IkReal x2039=(pz*x2030);
IkReal x2040=((0.09)*x2030);
IkReal x2041=((1.1)*x2029);
evalcond[0]=((-0.55)+x2039+(((-1.0)*x2035))+(((-1.0)*x2031))+((x2029*x2034))+((x2029*x2033)));
evalcond[1]=((0.045)+((x2030*x2033))+((x2030*x2034))+x2036+(((-1.0)*x2038))+(((-1.0)*x2032)));
evalcond[2]=((((-1.0)*x2029*x2036))+pz+(((-1.0)*x2030*x2031))+(((-1.0)*x2030*x2035))+(((-0.55)*x2030))+(((-1.0)*x2037))+((x2029*x2032)));
evalcond[3]=((((0.55)*x2029))+((x2030*x2032))+(((-1.0)*x2033))+(((-1.0)*x2034))+(((-1.0)*x2030*x2036))+((x2029*x2035))+((x2029*x2031))+(((-0.045)*x2030)));
evalcond[4]=((-0.2125)+(((1.1)*x2039))+((x2033*x2041))+(((-1.0)*pp))+(((0.09)*x2038))+(((-1.0)*x2034*x2040))+((x2034*x2041))+(((-1.0)*x2033*x2040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2042=((-1.0)*cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2042;
evalcond[3]=x2042;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst72;
gconst72=IKsign(((((-1.0)*(pz*pz)))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(pz*pz)))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst73;
IkReal x2043=((0.045)*pz);
IkReal x2044=(py*sj0);
gconst73=IKsign(((((-1.0)*x2043))+(((-0.3)*pz*sj3))+(((-0.55)*x2044))+(((-0.045)*sj3*x2044))+((cj3*x2043))+(((-0.3)*cj3*x2044))));
IkReal x2045=(py*sj0);
dummyeval[0]=((((-1.0)*sj3*x2045))+(((-6.66666666666667)*pz*sj3))+(((-1.0)*pz))+(((-12.2222222222222)*x2045))+(((-6.66666666666667)*cj3*x2045))+((cj3*pz)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2046=((-1.0)*py);
CheckValue<IkReal> x2047=IKPowWithIntegerCheck(py,-2);
if(!x2047.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2047.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2046;
evalcond[3]=x2046;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst74;
gconst74=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2048=((1.0)*pp);
IkReal x2049=((-1.0)*py);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((-1.0)*x2048))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x2049;
evalcond[4]=x2049;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2048)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2051 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
IkReal x2050=x2051.value;
j1array[0]=((-1.0)*x2050);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2050)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2052=IKsin(j1);
IkReal x2053=IKcos(j1);
IkReal x2054=((0.045)*x2053);
evalcond[0]=((((0.045)*sj3*x2052))+(((-1.0)*cj3*x2054))+(((0.3)*sj3*x2053))+x2054+(((0.3)*cj3*x2052))+(((0.55)*x2052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2056=IKPowWithIntegerCheck(pz,-1);
if(!x2056.valid){
continue;
}
IkReal x2055=x2056.value;
if( IKabs((x2055*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2055*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2055*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2055*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2055*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x2055*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2057=IKcos(j1);
IkReal x2058=IKsin(j1);
IkReal x2059=((0.045)*cj3);
IkReal x2060=((0.3)*cj3);
IkReal x2061=(sj3*x2058);
IkReal x2062=(cj3*x2058);
IkReal x2063=(sj3*x2057);
IkReal x2064=(pz*x2058);
IkReal x2065=(pz*x2057);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2065+(((-1.0)*x2060)));
evalcond[1]=((0.045)+x2064+(((0.3)*sj3))+(((-1.0)*x2059)));
evalcond[2]=((-0.2125)+(((1.1)*x2065))+(((-1.0)*pp))+(((-0.09)*x2064)));
evalcond[3]=((((-1.0)*x2057*x2059))+(((0.3)*x2063))+((x2058*x2060))+(((0.045)*x2057))+(((0.045)*x2061))+(((0.55)*x2058)));
evalcond[4]=((((-1.0)*x2058*x2059))+(((-1.0)*x2057*x2060))+(((0.3)*x2061))+(((-0.55)*x2057))+pz+(((0.045)*x2058))+(((-0.045)*x2063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2067=IKPowWithIntegerCheck(pz,-1);
if(!x2067.valid){
continue;
}
IkReal x2066=x2067.value;
if( IKabs(((0.111111111111111)*x2066*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2066*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2066*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x2066*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2066*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x2066*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2068=IKcos(j1);
IkReal x2069=IKsin(j1);
IkReal x2070=((0.045)*cj3);
IkReal x2071=((0.3)*cj3);
IkReal x2072=(sj3*x2069);
IkReal x2073=(cj3*x2069);
IkReal x2074=(sj3*x2068);
IkReal x2075=(pz*x2069);
IkReal x2076=(pz*x2068);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2076+(((-1.0)*x2071)));
evalcond[1]=((0.045)+x2075+(((-1.0)*x2070))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2076))+(((-1.0)*pp))+(((-0.09)*x2075)));
evalcond[3]=(((x2069*x2071))+(((0.3)*x2074))+(((0.55)*x2069))+(((0.045)*x2068))+(((-1.0)*x2068*x2070))+(((0.045)*x2072)));
evalcond[4]=((((-0.55)*x2068))+(((0.3)*x2072))+(((-1.0)*x2069*x2070))+pz+(((-0.045)*x2074))+(((0.045)*x2069))+(((-1.0)*x2068*x2071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2077 = IKatan2WithCheck((gconst74*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst74*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
j1array[0]=x2077.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2078=IKcos(j1);
IkReal x2079=IKsin(j1);
IkReal x2080=((0.045)*cj3);
IkReal x2081=((0.3)*cj3);
IkReal x2082=(sj3*x2079);
IkReal x2083=(cj3*x2079);
IkReal x2084=(sj3*x2078);
IkReal x2085=(pz*x2079);
IkReal x2086=(pz*x2078);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2086+(((-1.0)*x2081)));
evalcond[1]=((0.045)+x2085+(((-1.0)*x2080))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2086))+(((-0.09)*x2085))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x2082))+(((0.3)*x2084))+(((-1.0)*x2078*x2080))+(((0.55)*x2079))+((x2079*x2081))+(((0.045)*x2078)));
evalcond[4]=((((0.3)*x2082))+(((-1.0)*x2078*x2081))+(((-0.55)*x2078))+pz+(((-0.045)*x2084))+(((-1.0)*x2079*x2080))+(((0.045)*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2087=IKPowWithIntegerCheck(py,-2);
if(!x2087.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2087.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=py;
evalcond[3]=py;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst75;
gconst75=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2088=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((-1.0)*x2088))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2088)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2090 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
IkReal x2089=x2090.value;
j1array[0]=((-1.0)*x2089);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2089)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2091=IKsin(j1);
IkReal x2092=IKcos(j1);
IkReal x2093=((0.045)*x2092);
evalcond[0]=(x2093+(((0.55)*x2091))+(((0.3)*sj3*x2092))+(((0.045)*sj3*x2091))+(((0.3)*cj3*x2091))+(((-1.0)*cj3*x2093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2095=IKPowWithIntegerCheck(pz,-1);
if(!x2095.valid){
continue;
}
IkReal x2094=x2095.value;
if( IKabs((x2094*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2094*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2094*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2094*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2094*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x2094*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2096=IKcos(j1);
IkReal x2097=IKsin(j1);
IkReal x2098=((0.045)*cj3);
IkReal x2099=((0.3)*cj3);
IkReal x2100=(sj3*x2097);
IkReal x2101=(cj3*x2097);
IkReal x2102=(sj3*x2096);
IkReal x2103=(pz*x2097);
IkReal x2104=(pz*x2096);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2099))+x2104);
evalcond[1]=((0.045)+(((-1.0)*x2098))+x2103+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2104))+(((-0.09)*x2103))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x2096*x2098))+(((0.045)*x2100))+(((0.55)*x2097))+(((0.045)*x2096))+(((0.3)*x2102))+((x2097*x2099)));
evalcond[4]=((((-1.0)*x2096*x2099))+(((-1.0)*x2097*x2098))+(((-0.045)*x2102))+(((0.045)*x2097))+(((0.3)*x2100))+pz+(((-0.55)*x2096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2106=IKPowWithIntegerCheck(pz,-1);
if(!x2106.valid){
continue;
}
IkReal x2105=x2106.value;
if( IKabs(((0.111111111111111)*x2105*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2105*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2105*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x2105*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2105*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x2105*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2107=IKcos(j1);
IkReal x2108=IKsin(j1);
IkReal x2109=((0.045)*cj3);
IkReal x2110=((0.3)*cj3);
IkReal x2111=(sj3*x2108);
IkReal x2112=(cj3*x2108);
IkReal x2113=(sj3*x2107);
IkReal x2114=(pz*x2108);
IkReal x2115=(pz*x2107);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2115+(((-1.0)*x2110)));
evalcond[1]=((0.045)+(((-1.0)*x2109))+x2114+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x2114))+(((1.1)*x2115))+(((-1.0)*pp)));
evalcond[3]=((((0.3)*x2113))+(((0.045)*x2107))+(((-1.0)*x2107*x2109))+(((0.55)*x2108))+(((0.045)*x2111))+((x2108*x2110)));
evalcond[4]=((((-1.0)*x2107*x2110))+(((0.3)*x2111))+(((0.045)*x2108))+(((-0.045)*x2113))+pz+(((-0.55)*x2107))+(((-1.0)*x2108*x2109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2116 = IKatan2WithCheck((gconst75*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst75*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2116.valid){
continue;
}
j1array[0]=x2116.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2117=IKcos(j1);
IkReal x2118=IKsin(j1);
IkReal x2119=((0.045)*cj3);
IkReal x2120=((0.3)*cj3);
IkReal x2121=(sj3*x2118);
IkReal x2122=(cj3*x2118);
IkReal x2123=(sj3*x2117);
IkReal x2124=(pz*x2118);
IkReal x2125=(pz*x2117);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2125+(((-1.0)*x2120)));
evalcond[1]=((0.045)+x2124+(((-1.0)*x2119))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x2124))+(((-1.0)*pp))+(((1.1)*x2125)));
evalcond[3]=((((0.045)*x2121))+(((-1.0)*x2117*x2119))+(((0.55)*x2118))+((x2118*x2120))+(((0.3)*x2123))+(((0.045)*x2117)));
evalcond[4]=((((-1.0)*x2117*x2120))+(((-0.045)*x2123))+(((-1.0)*x2118*x2119))+pz+(((-0.55)*x2117))+(((0.3)*x2121))+(((0.045)*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2126=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2126))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2126)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2128 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2128.valid){
continue;
}
IkReal x2127=x2128.value;
j1array[0]=((-1.0)*x2127);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2127)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2129=IKsin(j1);
IkReal x2130=IKcos(j1);
IkReal x2131=((0.045)*x2130);
evalcond[0]=((((0.3)*cj3*x2129))+(((-1.0)*cj3*x2131))+x2131+(((0.045)*sj3*x2129))+(((0.3)*sj3*x2130))+(((0.55)*x2129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2132=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2132)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2132)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2134=IKPowWithIntegerCheck(pz,-1);
if(!x2134.valid){
continue;
}
IkReal x2133=x2134.value;
if( IKabs(((0.0555555555555556)*x2133*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2133)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2133*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2133))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2133*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2133));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2135=IKsin(j1);
IkReal x2136=IKcos(j1);
IkReal x2137=(pz*x2135);
IkReal x2138=(pz*x2136);
evalcond[0]=x2137;
evalcond[1]=((0.85)*x2135);
evalcond[2]=((-0.85)+x2138);
evalcond[3]=(pz+(((-0.85)*x2136)));
evalcond[4]=((-0.2125)+(((1.1)*x2138))+(((-0.09)*x2137))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2139=IKPowWithIntegerCheck(pz,-1);
if(!x2139.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2139.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2139.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2139.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2140=IKsin(j1);
IkReal x2141=IKcos(j1);
IkReal x2142=(pz*x2140);
IkReal x2143=(pz*x2141);
evalcond[0]=x2142;
evalcond[1]=((0.85)*x2140);
evalcond[2]=((-0.85)+x2143);
evalcond[3]=((((-0.85)*x2141))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x2142))+(((-1.0)*pp))+(((1.1)*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2144=((1.0)*pp);
IkReal x2145=((-1.0)*py);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2144))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x2145;
evalcond[4]=x2145;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2144)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2147 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
IkReal x2146=x2147.value;
j1array[0]=((-1.0)*x2146);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2146)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2148=IKsin(j1);
IkReal x2149=IKcos(j1);
IkReal x2150=((0.045)*x2149);
evalcond[0]=(x2150+(((0.045)*sj3*x2148))+(((0.3)*cj3*x2148))+(((0.55)*x2148))+(((-1.0)*cj3*x2150))+(((0.3)*sj3*x2149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2151=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2151))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2151)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2153 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2153.valid){
continue;
}
IkReal x2152=x2153.value;
j1array[0]=((-1.0)*x2152);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2152)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2154=IKsin(j1);
IkReal x2155=IKcos(j1);
IkReal x2156=((0.045)*x2155);
evalcond[0]=(x2156+(((0.3)*cj3*x2154))+(((0.045)*sj3*x2154))+(((0.55)*x2154))+(((-1.0)*cj3*x2156))+(((0.3)*sj3*x2155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2157=((-1.0)*py);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x2157;
evalcond[3]=x2157;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2158=((1.0)*pp);
IkReal x2159=((-1.0)*py);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2158)));
evalcond[2]=-0.85;
evalcond[3]=x2159;
evalcond[4]=x2159;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2158)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(pz,-1);
if(!x2161.valid){
continue;
}
IkReal x2160=x2161.value;
if( IKabs(((0.0555555555555556)*x2160*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2160)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2160*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2160))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2160*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2160));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2162=IKsin(j1);
IkReal x2163=IKcos(j1);
IkReal x2164=(pz*x2162);
IkReal x2165=(pz*x2163);
evalcond[0]=x2164;
evalcond[1]=((0.85)*x2162);
evalcond[2]=((-0.85)+x2165);
evalcond[3]=((((-0.85)*x2163))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2165))+(((-0.09)*x2164))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(pz,-1);
if(!x2166.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2166.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2166.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2166.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2167=IKsin(j1);
IkReal x2168=IKcos(j1);
IkReal x2169=(pz*x2167);
IkReal x2170=(pz*x2168);
evalcond[0]=x2169;
evalcond[1]=((0.85)*x2167);
evalcond[2]=((-0.85)+x2170);
evalcond[3]=((((-0.85)*x2168))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x2169))+(((-1.0)*pp))+(((1.1)*x2170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=py;
evalcond[3]=py;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2171=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2171)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2171)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2173=IKPowWithIntegerCheck(pz,-1);
if(!x2173.valid){
continue;
}
IkReal x2172=x2173.value;
if( IKabs(((0.0555555555555556)*x2172*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2172)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2172*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2172))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2172*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2172));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2174=IKsin(j1);
IkReal x2175=IKcos(j1);
IkReal x2176=(pz*x2174);
IkReal x2177=(pz*x2175);
evalcond[0]=x2176;
evalcond[1]=((0.85)*x2174);
evalcond[2]=((-0.85)+x2177);
evalcond[3]=((((-0.85)*x2175))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x2176))+(((-1.0)*pp))+(((1.1)*x2177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2178=IKPowWithIntegerCheck(pz,-1);
if(!x2178.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2178.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2178.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2178.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2179=IKsin(j1);
IkReal x2180=IKcos(j1);
IkReal x2181=(pz*x2179);
IkReal x2182=(pz*x2180);
evalcond[0]=x2181;
evalcond[1]=((0.85)*x2179);
evalcond[2]=((-0.85)+x2182);
evalcond[3]=((((-0.85)*x2180))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2182))+(((-0.09)*x2181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2183=((1.0)*pp);
CheckValue<IkReal> x2184=IKPowWithIntegerCheck(py,-2);
if(!x2184.valid){
continue;
}
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(pz)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2184.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2183))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2183)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2186 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
IkReal x2185=x2186.value;
j1array[0]=((-1.0)*x2185);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2185)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2187=IKsin(j1);
IkReal x2188=IKcos(j1);
IkReal x2189=((0.045)*x2188);
evalcond[0]=((((0.045)*sj3*x2187))+x2189+(((0.3)*cj3*x2187))+(((-1.0)*cj3*x2189))+(((0.55)*x2187))+(((0.3)*sj3*x2188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(py,-2);
if(!x2190.valid){
continue;
}
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2190.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2191=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2191)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2191)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2193=IKPowWithIntegerCheck(pz,-1);
if(!x2193.valid){
continue;
}
IkReal x2192=x2193.value;
if( IKabs(((0.0555555555555556)*x2192*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2192)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2192*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2192))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2192*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2192));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2194=IKsin(j1);
IkReal x2195=IKcos(j1);
IkReal x2196=(pz*x2194);
IkReal x2197=(pz*x2195);
evalcond[0]=x2196;
evalcond[1]=((0.85)*x2194);
evalcond[2]=((-0.85)+x2197);
evalcond[3]=((((-0.85)*x2195))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2197))+(((-0.09)*x2196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2198=IKPowWithIntegerCheck(pz,-1);
if(!x2198.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2198.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2198.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2198.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2199=IKsin(j1);
IkReal x2200=IKcos(j1);
IkReal x2201=(pz*x2199);
IkReal x2202=(pz*x2200);
evalcond[0]=x2201;
evalcond[1]=((0.85)*x2199);
evalcond[2]=((-0.85)+x2202);
evalcond[3]=(pz+(((-0.85)*x2200)));
evalcond[4]=((-0.2125)+(((-0.09)*x2201))+(((-1.0)*pp))+(((1.1)*x2202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2203=((1.0)*pp);
CheckValue<IkReal> x2204=IKPowWithIntegerCheck(py,-2);
if(!x2204.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2204.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)))))+(IKabs(((IKabs(py))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((-1.0)*x2203))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2203)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2206 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2206.valid){
continue;
}
IkReal x2205=x2206.value;
j1array[0]=((-1.0)*x2205);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2205)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2207=IKsin(j1);
IkReal x2208=IKcos(j1);
IkReal x2209=((0.045)*x2208);
evalcond[0]=(x2209+(((0.55)*x2207))+(((0.3)*cj3*x2207))+(((0.3)*sj3*x2208))+(((0.045)*sj3*x2207))+(((-1.0)*cj3*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2210=IKPowWithIntegerCheck(py,-2);
if(!x2210.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2210.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)))))+(IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2211=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2211)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2211)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2213=IKPowWithIntegerCheck(pz,-1);
if(!x2213.valid){
continue;
}
IkReal x2212=x2213.value;
if( IKabs(((0.0555555555555556)*x2212*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2212)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2212*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2212))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2212*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2212));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2214=IKsin(j1);
IkReal x2215=IKcos(j1);
IkReal x2216=(pz*x2214);
IkReal x2217=(pz*x2215);
evalcond[0]=x2216;
evalcond[1]=((0.85)*x2214);
evalcond[2]=((-0.85)+x2217);
evalcond[3]=(pz+(((-0.85)*x2215)));
evalcond[4]=((-0.2125)+(((-0.09)*x2216))+(((-1.0)*pp))+(((1.1)*x2217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2218=IKPowWithIntegerCheck(pz,-1);
if(!x2218.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2218.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2218.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2218.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2219=IKsin(j1);
IkReal x2220=IKcos(j1);
IkReal x2221=(pz*x2219);
IkReal x2222=(pz*x2220);
evalcond[0]=x2221;
evalcond[1]=((0.85)*x2219);
evalcond[2]=((-0.85)+x2222);
evalcond[3]=((((-0.85)*x2220))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x2221))+(((1.1)*x2222))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2223=cj3*cj3;
IkReal x2224=sj3*sj3;
IkReal x2225=(cj3*sj3);
CheckValue<IkReal> x2226 = IKatan2WithCheck((gconst73*(((-0.3025)+(((-0.027)*x2225))+(((-0.09)*x2223))+(((-0.0495)*sj3))+(((-0.002025)*x2224))+(pz*pz)+(((-0.33)*cj3))))),(gconst73*(((-0.02475)+(((-0.087975)*x2225))+(((0.01125)*cj3))+(((0.0135)*x2223))+(((-0.167025)*sj3))+(((-1.0)*py*pz*sj0))+(((-0.0135)*x2224))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2226.valid){
continue;
}
j1array[0]=x2226.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2227=IKsin(j1);
IkReal x2228=IKcos(j1);
IkReal x2229=((0.3)*cj3);
IkReal x2230=((0.045)*cj3);
IkReal x2231=(py*sj0);
IkReal x2232=((0.045)*sj3);
IkReal x2233=((0.3)*sj3);
IkReal x2234=((0.045)*x2227);
IkReal x2235=(pz*x2227);
IkReal x2236=(pz*x2228);
evalcond[0]=((-0.55)+x2236+((x2227*x2231))+(((-1.0)*x2232))+(((-1.0)*x2229)));
evalcond[1]=((0.045)+x2233+x2235+(((-1.0)*x2230))+(((-1.0)*x2228*x2231)));
evalcond[2]=((-0.2125)+(((1.1)*x2227*x2231))+(((1.1)*x2236))+(((-1.0)*pp))+(((0.09)*x2228*x2231))+(((-0.09)*x2235)));
evalcond[3]=((((-0.55)*x2228))+x2234+(((-1.0)*x2227*x2230))+(((-1.0)*x2228*x2229))+(((-1.0)*x2228*x2232))+((x2227*x2233))+pz);
evalcond[4]=(((x2228*x2233))+((x2227*x2229))+(((-1.0)*x2228*x2230))+((x2227*x2232))+(((-1.0)*x2231))+(((0.045)*x2228))+(((0.55)*x2227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2237=(py*sj0);
IkReal x2238=((0.3)*sj3);
IkReal x2239=((0.045)*cj3);
IkReal x2240=((0.3)*cj3);
IkReal x2241=((0.045)*pz);
CheckValue<IkReal> x2242 = IKatan2WithCheck((gconst72*(((((-1.0)*x2237*x2240))+((pz*x2238))+x2241+(((-0.55)*x2237))+(((-0.045)*sj3*x2237))+(((-1.0)*pz*x2239))))),(gconst72*(((((-0.55)*pz))+(((-1.0)*x2237*x2238))+((x2237*x2239))+(((-1.0)*sj3*x2241))+(((-0.045)*x2237))+(((-1.0)*pz*x2240))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
j1array[0]=x2242.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2243=IKsin(j1);
IkReal x2244=IKcos(j1);
IkReal x2245=((0.3)*cj3);
IkReal x2246=((0.045)*cj3);
IkReal x2247=(py*sj0);
IkReal x2248=((0.045)*sj3);
IkReal x2249=((0.3)*sj3);
IkReal x2250=((0.045)*x2243);
IkReal x2251=(pz*x2243);
IkReal x2252=(pz*x2244);
evalcond[0]=((-0.55)+x2252+((x2243*x2247))+(((-1.0)*x2248))+(((-1.0)*x2245)));
evalcond[1]=((0.045)+x2249+x2251+(((-1.0)*x2244*x2247))+(((-1.0)*x2246)));
evalcond[2]=((-0.2125)+(((-0.09)*x2251))+(((1.1)*x2243*x2247))+(((-1.0)*pp))+(((0.09)*x2244*x2247))+(((1.1)*x2252)));
evalcond[3]=(x2250+((x2243*x2249))+(((-1.0)*x2244*x2245))+(((-1.0)*x2244*x2248))+pz+(((-1.0)*x2243*x2246))+(((-0.55)*x2244)));
evalcond[4]=((((0.045)*x2244))+(((-1.0)*x2247))+((x2243*x2245))+((x2243*x2248))+(((-1.0)*x2244*x2246))+(((0.55)*x2243))+((x2244*x2249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2253=(cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*x2253);
evalcond[3]=x2253;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst76;
gconst76=IKsign(((((py*py)*(sj0*sj0)))+(pz*pz)));
dummyeval[0]=((((py*py)*(sj0*sj0)))+(pz*pz));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst77;
IkReal x2254=(py*sj0);
IkReal x2255=((0.045)*pz);
gconst77=IKsign((x2255+(((-0.3)*cj3*x2254))+(((-1.0)*cj3*x2255))+(((0.3)*pz*sj3))+(((-0.55)*x2254))+(((-0.045)*sj3*x2254))));
IkReal x2256=(py*sj0);
dummyeval[0]=((((-1.0)*cj3*pz))+(((6.66666666666667)*pz*sj3))+pz+(((-12.2222222222222)*x2256))+(((-1.0)*sj3*x2256))+(((-6.66666666666667)*cj3*x2256)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2257=IKPowWithIntegerCheck(py,-2);
if(!x2257.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2257.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*py);
evalcond[3]=py;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst78;
gconst78=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2258=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2258))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2258)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2260 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2260.valid){
continue;
}
IkReal x2259=x2260.value;
j1array[0]=((-1.0)*x2259);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2259)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2261=IKsin(j1);
IkReal x2262=IKcos(j1);
IkReal x2263=((0.045)*x2262);
evalcond[0]=((((0.55)*x2261))+(((-0.3)*sj3*x2262))+((cj3*x2263))+(((0.3)*cj3*x2261))+(((0.045)*sj3*x2261))+(((-1.0)*x2263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2265=IKPowWithIntegerCheck(pz,-1);
if(!x2265.valid){
continue;
}
IkReal x2264=x2265.value;
if( IKabs((x2264*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2264*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2264*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2264*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2264*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x2264*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2266=IKcos(j1);
IkReal x2267=IKsin(j1);
IkReal x2268=((0.045)*cj3);
IkReal x2269=((0.3)*cj3);
IkReal x2270=(sj3*x2267);
IkReal x2271=(cj3*x2267);
IkReal x2272=(sj3*x2266);
IkReal x2273=(pz*x2267);
IkReal x2274=(pz*x2266);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2274+(((-1.0)*x2269)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x2268))+(((-1.0)*x2273)));
evalcond[2]=((-0.2125)+(((1.1)*x2274))+(((0.09)*x2273))+(((-1.0)*pp)));
evalcond[3]=((((0.55)*x2267))+(((-0.3)*x2272))+(((0.045)*x2270))+(((-0.045)*x2266))+((x2266*x2268))+((x2267*x2269)));
evalcond[4]=((((-0.55)*x2266))+(((-0.3)*x2270))+pz+(((-0.045)*x2272))+(((-0.045)*x2267))+((x2267*x2268))+(((-1.0)*x2266*x2269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(pz,-1);
if(!x2276.valid){
continue;
}
IkReal x2275=x2276.value;
if( IKabs(((0.111111111111111)*x2275*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2275*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2275*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x2275*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2275*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x2275*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2277=IKcos(j1);
IkReal x2278=IKsin(j1);
IkReal x2279=((0.045)*cj3);
IkReal x2280=((0.3)*cj3);
IkReal x2281=(sj3*x2278);
IkReal x2282=(cj3*x2278);
IkReal x2283=(sj3*x2277);
IkReal x2284=(pz*x2278);
IkReal x2285=(pz*x2277);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2285+(((-1.0)*x2280)));
evalcond[1]=((0.045)+(((-1.0)*x2284))+(((0.3)*sj3))+(((-1.0)*x2279)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2285))+(((0.09)*x2284)));
evalcond[3]=((((0.045)*x2281))+(((0.55)*x2278))+((x2278*x2280))+(((-0.045)*x2277))+((x2277*x2279))+(((-0.3)*x2283)));
evalcond[4]=((((-1.0)*x2277*x2280))+(((-0.045)*x2283))+(((-0.55)*x2277))+pz+(((-0.045)*x2278))+((x2278*x2279))+(((-0.3)*x2281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2286 = IKatan2WithCheck((gconst78*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst78*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2286.valid){
continue;
}
j1array[0]=x2286.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2287=IKcos(j1);
IkReal x2288=IKsin(j1);
IkReal x2289=((0.045)*cj3);
IkReal x2290=((0.3)*cj3);
IkReal x2291=(sj3*x2288);
IkReal x2292=(cj3*x2288);
IkReal x2293=(sj3*x2287);
IkReal x2294=(pz*x2288);
IkReal x2295=(pz*x2287);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2295+(((-1.0)*x2290)));
evalcond[1]=((0.045)+(((-1.0)*x2289))+(((-1.0)*x2294))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2295))+(((-1.0)*pp))+(((0.09)*x2294)));
evalcond[3]=((((-0.045)*x2287))+((x2287*x2289))+(((0.045)*x2291))+(((-0.3)*x2293))+(((0.55)*x2288))+((x2288*x2290)));
evalcond[4]=((((-0.045)*x2288))+(((-1.0)*x2287*x2290))+pz+(((-0.3)*x2291))+(((-0.045)*x2293))+(((-0.55)*x2287))+((x2288*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2296=IKPowWithIntegerCheck(py,-2);
if(!x2296.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2296.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=py;
evalcond[3]=((-1.0)*py);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst79;
gconst79=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2297=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2297))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2297)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2299 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2299.valid){
continue;
}
IkReal x2298=x2299.value;
j1array[0]=((-1.0)*x2298);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2298)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2300=IKsin(j1);
IkReal x2301=IKcos(j1);
IkReal x2302=((0.045)*x2301);
evalcond[0]=((((-0.3)*sj3*x2301))+(((-1.0)*x2302))+(((0.3)*cj3*x2300))+(((0.55)*x2300))+((cj3*x2302))+(((0.045)*sj3*x2300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2304=IKPowWithIntegerCheck(pz,-1);
if(!x2304.valid){
continue;
}
IkReal x2303=x2304.value;
if( IKabs((x2303*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2303*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2303*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2303*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2303*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x2303*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2305=IKcos(j1);
IkReal x2306=IKsin(j1);
IkReal x2307=((0.045)*cj3);
IkReal x2308=((0.3)*cj3);
IkReal x2309=(sj3*x2306);
IkReal x2310=(cj3*x2306);
IkReal x2311=(sj3*x2305);
IkReal x2312=(pz*x2306);
IkReal x2313=(pz*x2305);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2313+(((-1.0)*x2308)));
evalcond[1]=((0.045)+(((-1.0)*x2312))+(((-1.0)*x2307))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x2312))+(((1.1)*x2313))+(((-1.0)*pp)));
evalcond[3]=(((x2305*x2307))+(((-0.045)*x2305))+((x2306*x2308))+(((0.55)*x2306))+(((-0.3)*x2311))+(((0.045)*x2309)));
evalcond[4]=((((-0.045)*x2306))+((x2306*x2307))+(((-0.3)*x2309))+(((-0.55)*x2305))+pz+(((-0.045)*x2311))+(((-1.0)*x2305*x2308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(pz,-1);
if(!x2315.valid){
continue;
}
IkReal x2314=x2315.value;
if( IKabs(((0.111111111111111)*x2314*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2314*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2314*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x2314*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2314*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x2314*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2316=IKcos(j1);
IkReal x2317=IKsin(j1);
IkReal x2318=((0.045)*cj3);
IkReal x2319=((0.3)*cj3);
IkReal x2320=(sj3*x2317);
IkReal x2321=(cj3*x2317);
IkReal x2322=(sj3*x2316);
IkReal x2323=(pz*x2317);
IkReal x2324=(pz*x2316);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2324+(((-1.0)*x2319)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x2318))+(((-1.0)*x2323)));
evalcond[2]=((-0.2125)+(((0.09)*x2323))+(((1.1)*x2324))+(((-1.0)*pp)));
evalcond[3]=(((x2317*x2319))+((x2316*x2318))+(((0.045)*x2320))+(((0.55)*x2317))+(((-0.045)*x2316))+(((-0.3)*x2322)));
evalcond[4]=(((x2317*x2318))+(((-0.55)*x2316))+pz+(((-0.045)*x2317))+(((-0.045)*x2322))+(((-0.3)*x2320))+(((-1.0)*x2316*x2319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2325 = IKatan2WithCheck((gconst79*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst79*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
j1array[0]=x2325.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2326=IKcos(j1);
IkReal x2327=IKsin(j1);
IkReal x2328=((0.045)*cj3);
IkReal x2329=((0.3)*cj3);
IkReal x2330=(sj3*x2327);
IkReal x2331=(cj3*x2327);
IkReal x2332=(sj3*x2326);
IkReal x2333=(pz*x2327);
IkReal x2334=(pz*x2326);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2334+(((-1.0)*x2329)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x2333))+(((-1.0)*x2328)));
evalcond[2]=((-0.2125)+(((0.09)*x2333))+(((-1.0)*pp))+(((1.1)*x2334)));
evalcond[3]=((((0.045)*x2330))+((x2327*x2329))+(((-0.3)*x2332))+((x2326*x2328))+(((0.55)*x2327))+(((-0.045)*x2326)));
evalcond[4]=((((-0.55)*x2326))+((x2327*x2328))+pz+(((-1.0)*x2326*x2329))+(((-0.3)*x2330))+(((-0.045)*x2327))+(((-0.045)*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2335=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((-1.0)*x2335))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2335)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2337 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
IkReal x2336=x2337.value;
j1array[0]=((-1.0)*x2336);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2336)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2338=IKsin(j1);
IkReal x2339=IKcos(j1);
IkReal x2340=((0.045)*x2339);
evalcond[0]=((((0.3)*cj3*x2338))+(((0.045)*sj3*x2338))+((cj3*x2340))+(((0.55)*x2338))+(((-1.0)*x2340))+(((-0.3)*sj3*x2339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2341=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2341)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2341)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2343=IKPowWithIntegerCheck(pz,-1);
if(!x2343.valid){
continue;
}
IkReal x2342=x2343.value;
if( IKabs(((0.0555555555555556)*x2342*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2342)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2342*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2342))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2342*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2342));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2344=IKsin(j1);
IkReal x2345=IKcos(j1);
IkReal x2346=(pz*x2344);
IkReal x2347=(pz*x2345);
evalcond[0]=((0.85)*x2344);
evalcond[1]=((-1.0)*x2346);
evalcond[2]=((-0.85)+x2347);
evalcond[3]=(pz+(((-0.85)*x2345)));
evalcond[4]=((-0.2125)+(((0.09)*x2346))+(((-1.0)*pp))+(((1.1)*x2347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2348=IKPowWithIntegerCheck(pz,-1);
if(!x2348.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2348.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2348.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2348.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2349=IKsin(j1);
IkReal x2350=IKcos(j1);
IkReal x2351=(pz*x2349);
IkReal x2352=(pz*x2350);
evalcond[0]=((0.85)*x2349);
evalcond[1]=((-1.0)*x2351);
evalcond[2]=((-0.85)+x2352);
evalcond[3]=((((-0.85)*x2350))+pz);
evalcond[4]=((-0.2125)+(((0.09)*x2351))+(((-1.0)*pp))+(((1.1)*x2352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2353=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2353))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2353)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2355 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2355.valid){
continue;
}
IkReal x2354=x2355.value;
j1array[0]=((-1.0)*x2354);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2354)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2356=IKsin(j1);
IkReal x2357=IKcos(j1);
IkReal x2358=((0.045)*x2357);
evalcond[0]=((((0.045)*sj3*x2356))+(((0.55)*x2356))+(((0.3)*cj3*x2356))+((cj3*x2358))+(((-0.3)*sj3*x2357))+(((-1.0)*x2358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2359=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2359))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2359)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2361 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2361.valid){
continue;
}
IkReal x2360=x2361.value;
j1array[0]=((-1.0)*x2360);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2360)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2362=IKsin(j1);
IkReal x2363=IKcos(j1);
IkReal x2364=((0.045)*x2363);
evalcond[0]=((((0.55)*x2362))+(((-0.3)*sj3*x2363))+(((-1.0)*x2364))+(((0.045)*sj3*x2362))+((cj3*x2364))+(((0.3)*cj3*x2362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*py);
evalcond[3]=py;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2365=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2365)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2365)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2367=IKPowWithIntegerCheck(pz,-1);
if(!x2367.valid){
continue;
}
IkReal x2366=x2367.value;
if( IKabs(((0.0555555555555556)*x2366*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2366)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2366*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2366))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2366*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2366));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2368=IKsin(j1);
IkReal x2369=IKcos(j1);
IkReal x2370=(pz*x2368);
IkReal x2371=(pz*x2369);
evalcond[0]=((0.85)*x2368);
evalcond[1]=((-1.0)*x2370);
evalcond[2]=((-0.85)+x2371);
evalcond[3]=((((-0.85)*x2369))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2371))+(((-1.0)*pp))+(((0.09)*x2370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2372=IKPowWithIntegerCheck(pz,-1);
if(!x2372.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2372.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2372.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2372.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2373=IKsin(j1);
IkReal x2374=IKcos(j1);
IkReal x2375=(pz*x2373);
IkReal x2376=(pz*x2374);
evalcond[0]=((0.85)*x2373);
evalcond[1]=((-1.0)*x2375);
evalcond[2]=((-0.85)+x2376);
evalcond[3]=((((-0.85)*x2374))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2376))+(((-1.0)*pp))+(((0.09)*x2375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=py;
evalcond[3]=((-1.0)*py);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2377=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2377)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2377)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2379=IKPowWithIntegerCheck(pz,-1);
if(!x2379.valid){
continue;
}
IkReal x2378=x2379.value;
if( IKabs(((0.0555555555555556)*x2378*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2378)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2378*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2378))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2378*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2378));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2380=IKsin(j1);
IkReal x2381=IKcos(j1);
IkReal x2382=(pz*x2380);
IkReal x2383=(pz*x2381);
evalcond[0]=((0.85)*x2380);
evalcond[1]=((-1.0)*x2382);
evalcond[2]=((-0.85)+x2383);
evalcond[3]=((((-0.85)*x2381))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2382))+(((1.1)*x2383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2384=IKPowWithIntegerCheck(pz,-1);
if(!x2384.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2384.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2384.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2384.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2385=IKsin(j1);
IkReal x2386=IKcos(j1);
IkReal x2387=(pz*x2385);
IkReal x2388=(pz*x2386);
evalcond[0]=((0.85)*x2385);
evalcond[1]=((-1.0)*x2387);
evalcond[2]=((-0.85)+x2388);
evalcond[3]=((((-0.85)*x2386))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2387))+(((1.1)*x2388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2389=((1.0)*pp);
CheckValue<IkReal> x2390=IKPowWithIntegerCheck(py,-2);
if(!x2390.valid){
continue;
}
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(pz)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2390.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2389))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2389)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2392 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2392.valid){
continue;
}
IkReal x2391=x2392.value;
j1array[0]=((-1.0)*x2391);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2391)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2393=IKsin(j1);
IkReal x2394=IKcos(j1);
IkReal x2395=((0.045)*x2394);
evalcond[0]=((((-0.3)*sj3*x2394))+(((0.55)*x2393))+(((-1.0)*x2395))+(((0.3)*cj3*x2393))+((cj3*x2395))+(((0.045)*sj3*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2396=IKPowWithIntegerCheck(py,-2);
if(!x2396.valid){
continue;
}
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2396.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2397=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2397)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2397)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2399=IKPowWithIntegerCheck(pz,-1);
if(!x2399.valid){
continue;
}
IkReal x2398=x2399.value;
if( IKabs(((0.0555555555555556)*x2398*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2398)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2398*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2398))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2398*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2398));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2400=IKsin(j1);
IkReal x2401=IKcos(j1);
IkReal x2402=(pz*x2400);
IkReal x2403=(pz*x2401);
evalcond[0]=((0.85)*x2400);
evalcond[1]=((-1.0)*x2402);
evalcond[2]=((-0.85)+x2403);
evalcond[3]=(pz+(((-0.85)*x2401)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2402))+(((1.1)*x2403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2404=IKPowWithIntegerCheck(pz,-1);
if(!x2404.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2404.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2404.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2404.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2405=IKsin(j1);
IkReal x2406=IKcos(j1);
IkReal x2407=(pz*x2405);
IkReal x2408=(pz*x2406);
evalcond[0]=((0.85)*x2405);
evalcond[1]=((-1.0)*x2407);
evalcond[2]=((-0.85)+x2408);
evalcond[3]=(pz+(((-0.85)*x2406)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2407))+(((1.1)*x2408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2409=((1.0)*pp);
CheckValue<IkReal> x2410=IKPowWithIntegerCheck(py,-2);
if(!x2410.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2410.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)))))+(IKabs(((IKabs(py))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((-1.0)*x2409))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2409)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2412 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2412.valid){
continue;
}
IkReal x2411=x2412.value;
j1array[0]=((-1.0)*x2411);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2411)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2413=IKsin(j1);
IkReal x2414=IKcos(j1);
IkReal x2415=((0.045)*x2414);
evalcond[0]=((((0.045)*sj3*x2413))+((cj3*x2415))+(((0.55)*x2413))+(((-1.0)*x2415))+(((0.3)*cj3*x2413))+(((-0.3)*sj3*x2414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2416=IKPowWithIntegerCheck(py,-2);
if(!x2416.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x2416.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)))))+(IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2417=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2417)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2417)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2419=IKPowWithIntegerCheck(pz,-1);
if(!x2419.valid){
continue;
}
IkReal x2418=x2419.value;
if( IKabs(((0.0555555555555556)*x2418*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2418)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2418*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2418))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2418*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2418));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2420=IKsin(j1);
IkReal x2421=IKcos(j1);
IkReal x2422=(pz*x2420);
IkReal x2423=(pz*x2421);
evalcond[0]=((0.85)*x2420);
evalcond[1]=((-1.0)*x2422);
evalcond[2]=((-0.85)+x2423);
evalcond[3]=((((-0.85)*x2421))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2423))+(((0.09)*x2422))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2424=IKPowWithIntegerCheck(pz,-1);
if(!x2424.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2424.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2424.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2424.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2425=IKsin(j1);
IkReal x2426=IKcos(j1);
IkReal x2427=(pz*x2425);
IkReal x2428=(pz*x2426);
evalcond[0]=((0.85)*x2425);
evalcond[1]=((-1.0)*x2427);
evalcond[2]=((-0.85)+x2428);
evalcond[3]=((((-0.85)*x2426))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2428))+(((0.09)*x2427))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2429=sj3*sj3;
IkReal x2430=cj3*cj3;
IkReal x2431=(cj3*sj3);
CheckValue<IkReal> x2432 = IKatan2WithCheck((gconst77*(((-0.3025)+(((-0.09)*x2430))+(((-0.0495)*sj3))+(((-0.002025)*x2429))+(pz*pz)+(((-0.027)*x2431))+(((-0.33)*cj3))))),(gconst77*(((0.02475)+(((-0.0135)*x2430))+(((-0.01125)*cj3))+(((0.087975)*x2431))+(((0.167025)*sj3))+(((-1.0)*py*pz*sj0))+(((0.0135)*x2429))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2432.valid){
continue;
}
j1array[0]=x2432.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2433=IKcos(j1);
IkReal x2434=IKsin(j1);
IkReal x2435=((0.3)*cj3);
IkReal x2436=((0.045)*cj3);
IkReal x2437=(py*sj0);
IkReal x2438=((0.045)*sj3);
IkReal x2439=((0.3)*sj3);
IkReal x2440=((0.045)*x2434);
IkReal x2441=(pz*x2434);
IkReal x2442=(pz*x2433);
evalcond[0]=((-0.55)+x2442+(((-1.0)*x2438))+(((-1.0)*x2435))+((x2434*x2437)));
evalcond[1]=((0.045)+x2439+(((-1.0)*x2436))+(((-1.0)*x2441))+((x2433*x2437)));
evalcond[2]=((-0.2125)+(((1.1)*x2434*x2437))+(((0.09)*x2441))+(((-0.09)*x2433*x2437))+(((1.1)*x2442))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x2433*x2438))+(((-1.0)*x2433*x2435))+(((-1.0)*x2434*x2439))+pz+(((-1.0)*x2440))+(((-0.55)*x2433))+((x2434*x2436)));
evalcond[4]=((((-1.0)*x2433*x2439))+(((-1.0)*x2437))+(((0.55)*x2434))+((x2433*x2436))+(((-0.045)*x2433))+((x2434*x2438))+((x2434*x2435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2443=(py*sj0);
IkReal x2444=((0.3)*sj3);
IkReal x2445=((0.045)*cj3);
IkReal x2446=((0.045)*pz);
IkReal x2447=((0.3)*cj3);
CheckValue<IkReal> x2448 = IKatan2WithCheck((gconst76*(((((-1.0)*pz*x2445))+x2446+((x2443*x2447))+((pz*x2444))+(((0.55)*x2443))+(((0.045)*sj3*x2443))))),(gconst76*(((((-1.0)*x2443*x2444))+((sj3*x2446))+((x2443*x2445))+((pz*x2447))+(((-0.045)*x2443))+(((0.55)*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2448.valid){
continue;
}
j1array[0]=x2448.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2449=IKcos(j1);
IkReal x2450=IKsin(j1);
IkReal x2451=((0.3)*cj3);
IkReal x2452=((0.045)*cj3);
IkReal x2453=(py*sj0);
IkReal x2454=((0.045)*sj3);
IkReal x2455=((0.3)*sj3);
IkReal x2456=((0.045)*x2450);
IkReal x2457=(pz*x2450);
IkReal x2458=(pz*x2449);
evalcond[0]=((-0.55)+x2458+((x2450*x2453))+(((-1.0)*x2451))+(((-1.0)*x2454)));
evalcond[1]=((0.045)+x2455+((x2449*x2453))+(((-1.0)*x2457))+(((-1.0)*x2452)));
evalcond[2]=((-0.2125)+(((0.09)*x2457))+(((1.1)*x2458))+(((-1.0)*pp))+(((1.1)*x2450*x2453))+(((-0.09)*x2449*x2453)));
evalcond[3]=((((-1.0)*x2450*x2455))+(((-0.55)*x2449))+((x2450*x2452))+(((-1.0)*x2449*x2451))+(((-1.0)*x2449*x2454))+pz+(((-1.0)*x2456)));
evalcond[4]=(((x2450*x2454))+((x2450*x2451))+(((-0.045)*x2449))+(((0.55)*x2450))+((x2449*x2452))+(((-1.0)*x2453))+(((-1.0)*x2449*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2459=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2459;
evalcond[3]=x2459;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst80;
gconst80=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst81;
IkReal x2460=((0.045)*pz);
IkReal x2461=(cj0*px);
gconst81=IKsign(((((-0.045)*sj3*x2461))+((cj3*x2460))+(((-0.3)*pz*sj3))+(((-0.3)*cj3*x2461))+(((-0.55)*x2461))+(((-1.0)*x2460))));
IkReal x2462=(cj0*px);
dummyeval[0]=((((-6.66666666666667)*pz*sj3))+(((-6.66666666666667)*cj3*x2462))+(((-1.0)*pz))+(((-1.0)*sj3*x2462))+(((-12.2222222222222)*x2462))+((cj3*pz)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2463=IKPowWithIntegerCheck(px,-2);
if(!x2463.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x2463.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=px;
evalcond[3]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst82;
gconst82=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2464=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2464))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2464)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2466 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2466.valid){
continue;
}
IkReal x2465=x2466.value;
j1array[0]=((-1.0)*x2465);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2465)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2467=IKsin(j1);
IkReal x2468=IKcos(j1);
IkReal x2469=((0.045)*x2468);
evalcond[0]=((((0.55)*x2467))+x2469+(((0.045)*sj3*x2467))+(((-1.0)*cj3*x2469))+(((0.3)*cj3*x2467))+(((0.3)*sj3*x2468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2471=IKPowWithIntegerCheck(pz,-1);
if(!x2471.valid){
continue;
}
IkReal x2470=x2471.value;
if( IKabs((x2470*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2470*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2470*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2470*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2470*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x2470*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2472=IKcos(j1);
IkReal x2473=IKsin(j1);
IkReal x2474=((0.045)*cj3);
IkReal x2475=((0.3)*cj3);
IkReal x2476=(sj3*x2473);
IkReal x2477=(cj3*x2473);
IkReal x2478=(sj3*x2472);
IkReal x2479=(pz*x2473);
IkReal x2480=(pz*x2472);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2480+(((-1.0)*x2475)));
evalcond[1]=((0.045)+x2479+(((-1.0)*x2474))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2480))+(((-1.0)*pp))+(((-0.09)*x2479)));
evalcond[3]=((((-1.0)*x2472*x2474))+(((0.3)*x2478))+(((0.55)*x2473))+(((0.045)*x2476))+(((0.045)*x2472))+((x2473*x2475)));
evalcond[4]=((((-0.045)*x2478))+(((-0.55)*x2472))+(((-1.0)*x2472*x2475))+(((0.3)*x2476))+(((-1.0)*x2473*x2474))+(((0.045)*x2473))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2482=IKPowWithIntegerCheck(pz,-1);
if(!x2482.valid){
continue;
}
IkReal x2481=x2482.value;
if( IKabs(((0.111111111111111)*x2481*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2481*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2481*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x2481*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2481*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x2481*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2483=IKcos(j1);
IkReal x2484=IKsin(j1);
IkReal x2485=((0.045)*cj3);
IkReal x2486=((0.3)*cj3);
IkReal x2487=(sj3*x2484);
IkReal x2488=(cj3*x2484);
IkReal x2489=(sj3*x2483);
IkReal x2490=(pz*x2484);
IkReal x2491=(pz*x2483);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2491+(((-1.0)*x2486)));
evalcond[1]=((0.045)+x2490+(((-1.0)*x2485))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2491))+(((-1.0)*pp))+(((-0.09)*x2490)));
evalcond[3]=((((0.55)*x2484))+(((0.045)*x2487))+(((0.045)*x2483))+((x2484*x2486))+(((0.3)*x2489))+(((-1.0)*x2483*x2485)));
evalcond[4]=((((-0.045)*x2489))+(((0.045)*x2484))+(((0.3)*x2487))+pz+(((-0.55)*x2483))+(((-1.0)*x2484*x2485))+(((-1.0)*x2483*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2492 = IKatan2WithCheck((gconst82*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst82*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2492.valid){
continue;
}
j1array[0]=x2492.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2493=IKcos(j1);
IkReal x2494=IKsin(j1);
IkReal x2495=((0.045)*cj3);
IkReal x2496=((0.3)*cj3);
IkReal x2497=(sj3*x2494);
IkReal x2498=(cj3*x2494);
IkReal x2499=(sj3*x2493);
IkReal x2500=(pz*x2494);
IkReal x2501=(pz*x2493);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2501+(((-1.0)*x2496)));
evalcond[1]=((0.045)+x2500+(((-1.0)*x2495))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2501))+(((-0.09)*x2500)));
evalcond[3]=((((0.55)*x2494))+((x2494*x2496))+(((-1.0)*x2493*x2495))+(((0.045)*x2493))+(((0.045)*x2497))+(((0.3)*x2499)));
evalcond[4]=((((-0.045)*x2499))+(((-1.0)*x2493*x2496))+(((-1.0)*x2494*x2495))+(((0.045)*x2494))+(((0.3)*x2497))+pz+(((-0.55)*x2493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2502=((-1.0)*px);
CheckValue<IkReal> x2503=IKPowWithIntegerCheck(px,-2);
if(!x2503.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x2503.value)*(pz*pz))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2502;
evalcond[3]=x2502;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst83;
gconst83=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2504=((1.0)*pp);
IkReal x2505=((-1.0)*px);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((-1.0)*x2504))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x2505;
evalcond[4]=x2505;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2504)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2507 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
IkReal x2506=x2507.value;
j1array[0]=((-1.0)*x2506);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2506)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2508=IKsin(j1);
IkReal x2509=IKcos(j1);
IkReal x2510=((0.045)*x2509);
evalcond[0]=(x2510+(((-1.0)*cj3*x2510))+(((0.3)*cj3*x2508))+(((0.045)*sj3*x2508))+(((0.3)*sj3*x2509))+(((0.55)*x2508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2512=IKPowWithIntegerCheck(pz,-1);
if(!x2512.valid){
continue;
}
IkReal x2511=x2512.value;
if( IKabs((x2511*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2511*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2511*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2511*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2511*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x2511*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2513=IKcos(j1);
IkReal x2514=IKsin(j1);
IkReal x2515=((0.045)*cj3);
IkReal x2516=((0.3)*cj3);
IkReal x2517=(sj3*x2514);
IkReal x2518=(cj3*x2514);
IkReal x2519=(sj3*x2513);
IkReal x2520=(pz*x2514);
IkReal x2521=(pz*x2513);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2521+(((-1.0)*x2516)));
evalcond[1]=((0.045)+x2520+(((-1.0)*x2515))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x2520))+(((1.1)*x2521)));
evalcond[3]=((((0.3)*x2519))+((x2514*x2516))+(((0.045)*x2517))+(((0.045)*x2513))+(((-1.0)*x2513*x2515))+(((0.55)*x2514)));
evalcond[4]=((((0.3)*x2517))+(((-0.045)*x2519))+(((-0.55)*x2513))+(((0.045)*x2514))+(((-1.0)*x2513*x2516))+(((-1.0)*x2514*x2515))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2523=IKPowWithIntegerCheck(pz,-1);
if(!x2523.valid){
continue;
}
IkReal x2522=x2523.value;
if( IKabs(((0.111111111111111)*x2522*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2522*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2522*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x2522*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2522*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x2522*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2524=IKcos(j1);
IkReal x2525=IKsin(j1);
IkReal x2526=((0.045)*cj3);
IkReal x2527=((0.3)*cj3);
IkReal x2528=(sj3*x2525);
IkReal x2529=(cj3*x2525);
IkReal x2530=(sj3*x2524);
IkReal x2531=(pz*x2525);
IkReal x2532=(pz*x2524);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2532+(((-1.0)*x2527)));
evalcond[1]=((0.045)+x2531+(((0.3)*sj3))+(((-1.0)*x2526)));
evalcond[2]=((-0.2125)+(((-0.09)*x2531))+(((1.1)*x2532))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x2524*x2526))+(((0.3)*x2530))+(((0.55)*x2525))+(((0.045)*x2524))+(((0.045)*x2528))+((x2525*x2527)));
evalcond[4]=((((-1.0)*x2524*x2527))+(((-0.045)*x2530))+pz+(((0.045)*x2525))+(((-1.0)*x2525*x2526))+(((0.3)*x2528))+(((-0.55)*x2524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2533 = IKatan2WithCheck((gconst83*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst83*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
j1array[0]=x2533.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2534=IKcos(j1);
IkReal x2535=IKsin(j1);
IkReal x2536=((0.045)*cj3);
IkReal x2537=((0.3)*cj3);
IkReal x2538=(sj3*x2535);
IkReal x2539=(cj3*x2535);
IkReal x2540=(sj3*x2534);
IkReal x2541=(pz*x2535);
IkReal x2542=(pz*x2534);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2542+(((-1.0)*x2537)));
evalcond[1]=((0.045)+x2541+(((-1.0)*x2536))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x2541))+(((-1.0)*pp))+(((1.1)*x2542)));
evalcond[3]=((((0.55)*x2535))+(((0.045)*x2538))+(((0.045)*x2534))+(((-1.0)*x2534*x2536))+(((0.3)*x2540))+((x2535*x2537)));
evalcond[4]=((((0.045)*x2535))+(((0.3)*x2538))+(((-1.0)*x2534*x2537))+(((-0.55)*x2534))+(((-1.0)*x2535*x2536))+pz+(((-0.045)*x2540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2543=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2543))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2543)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2545 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2545.valid){
continue;
}
IkReal x2544=x2545.value;
j1array[0]=((-1.0)*x2544);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2544)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2546=IKsin(j1);
IkReal x2547=IKcos(j1);
IkReal x2548=((0.045)*x2547);
evalcond[0]=((((0.045)*sj3*x2546))+(((0.3)*cj3*x2546))+x2548+(((-1.0)*cj3*x2548))+(((0.3)*sj3*x2547))+(((0.55)*x2546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2549=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2549)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2549)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2551=IKPowWithIntegerCheck(pz,-1);
if(!x2551.valid){
continue;
}
IkReal x2550=x2551.value;
if( IKabs(((0.0555555555555556)*x2550*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2550)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2550*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2550))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2550*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2550));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2552=IKsin(j1);
IkReal x2553=IKcos(j1);
IkReal x2554=(pz*x2552);
IkReal x2555=(pz*x2553);
evalcond[0]=x2554;
evalcond[1]=((0.85)*x2552);
evalcond[2]=((-0.85)+x2555);
evalcond[3]=((((-0.85)*x2553))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2555))+(((-1.0)*pp))+(((-0.09)*x2554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2556=IKPowWithIntegerCheck(pz,-1);
if(!x2556.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2556.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2556.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2556.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2557=IKsin(j1);
IkReal x2558=IKcos(j1);
IkReal x2559=(pz*x2557);
IkReal x2560=(pz*x2558);
evalcond[0]=x2559;
evalcond[1]=((0.85)*x2557);
evalcond[2]=((-0.85)+x2560);
evalcond[3]=((((-0.85)*x2558))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2560))+(((-1.0)*pp))+(((-0.09)*x2559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2561=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2561))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2561)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2563 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2563.valid){
continue;
}
IkReal x2562=x2563.value;
j1array[0]=((-1.0)*x2562);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2562)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2564=IKsin(j1);
IkReal x2565=IKcos(j1);
IkReal x2566=((0.045)*x2565);
evalcond[0]=(x2566+(((0.55)*x2564))+(((0.045)*sj3*x2564))+(((-1.0)*cj3*x2566))+(((0.3)*sj3*x2565))+(((0.3)*cj3*x2564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2567=((1.0)*pp);
IkReal x2568=((-1.0)*px);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2567))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x2568;
evalcond[4]=x2568;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2567)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2570 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2570.valid){
continue;
}
IkReal x2569=x2570.value;
j1array[0]=((-1.0)*x2569);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2569)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2571=IKsin(j1);
IkReal x2572=IKcos(j1);
IkReal x2573=((0.045)*x2572);
evalcond[0]=(x2573+(((0.3)*cj3*x2571))+(((-1.0)*cj3*x2573))+(((0.3)*sj3*x2572))+(((0.55)*x2571))+(((0.045)*sj3*x2571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=px;
evalcond[3]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2574=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2574)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2574)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2576=IKPowWithIntegerCheck(pz,-1);
if(!x2576.valid){
continue;
}
IkReal x2575=x2576.value;
if( IKabs(((0.0555555555555556)*x2575*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2575)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2575*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2575))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2575*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2575));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2577=IKsin(j1);
IkReal x2578=IKcos(j1);
IkReal x2579=(pz*x2577);
IkReal x2580=(pz*x2578);
evalcond[0]=x2579;
evalcond[1]=((0.85)*x2577);
evalcond[2]=((-0.85)+x2580);
evalcond[3]=((((-0.85)*x2578))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2580))+(((-1.0)*pp))+(((-0.09)*x2579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2581=IKPowWithIntegerCheck(pz,-1);
if(!x2581.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2581.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2581.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2581.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2582=IKsin(j1);
IkReal x2583=IKcos(j1);
IkReal x2584=(pz*x2582);
IkReal x2585=(pz*x2583);
evalcond[0]=x2584;
evalcond[1]=((0.85)*x2582);
evalcond[2]=((-0.85)+x2585);
evalcond[3]=((((-0.85)*x2583))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2585))+(((-0.09)*x2584))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2586=((-1.0)*px);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x2586;
evalcond[3]=x2586;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2587=((1.0)*pp);
IkReal x2588=((-1.0)*px);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2587)));
evalcond[2]=-0.85;
evalcond[3]=x2588;
evalcond[4]=x2588;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2587)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(pz,-1);
if(!x2590.valid){
continue;
}
IkReal x2589=x2590.value;
if( IKabs(((0.0555555555555556)*x2589*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2589)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2589*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2589))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2589*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2589));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2591=IKsin(j1);
IkReal x2592=IKcos(j1);
IkReal x2593=(pz*x2591);
IkReal x2594=(pz*x2592);
evalcond[0]=x2593;
evalcond[1]=((0.85)*x2591);
evalcond[2]=((-0.85)+x2594);
evalcond[3]=((((-0.85)*x2592))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2594))+(((-0.09)*x2593))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2595=IKPowWithIntegerCheck(pz,-1);
if(!x2595.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2595.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2595.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2595.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2596=IKsin(j1);
IkReal x2597=IKcos(j1);
IkReal x2598=(pz*x2596);
IkReal x2599=(pz*x2597);
evalcond[0]=x2598;
evalcond[1]=((0.85)*x2596);
evalcond[2]=((-0.85)+x2599);
evalcond[3]=((((-0.85)*x2597))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2599))+(((-0.09)*x2598))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2600=((1.0)*pp);
CheckValue<IkReal> x2601=IKPowWithIntegerCheck(px,-2);
if(!x2601.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x2601.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)))))+(IKabs(((IKabs(px))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2600))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2600)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2603 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2603.valid){
continue;
}
IkReal x2602=x2603.value;
j1array[0]=((-1.0)*x2602);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2602)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2604=IKsin(j1);
IkReal x2605=IKcos(j1);
IkReal x2606=((0.045)*x2605);
evalcond[0]=((((-1.0)*cj3*x2606))+(((0.3)*cj3*x2604))+(((0.55)*x2604))+(((0.3)*sj3*x2605))+(((0.045)*sj3*x2604))+x2606);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2607=IKPowWithIntegerCheck(px,-2);
if(!x2607.valid){
continue;
}
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x2607.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2608=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2608)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2608)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2610=IKPowWithIntegerCheck(pz,-1);
if(!x2610.valid){
continue;
}
IkReal x2609=x2610.value;
if( IKabs(((0.0555555555555556)*x2609*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2609)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2609*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2609))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2609*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2609));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2611=IKsin(j1);
IkReal x2612=IKcos(j1);
IkReal x2613=(pz*x2611);
IkReal x2614=(pz*x2612);
evalcond[0]=x2613;
evalcond[1]=((0.85)*x2611);
evalcond[2]=((-0.85)+x2614);
evalcond[3]=(pz+(((-0.85)*x2612)));
evalcond[4]=((-0.2125)+(((1.1)*x2614))+(((-1.0)*pp))+(((-0.09)*x2613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2615=IKPowWithIntegerCheck(pz,-1);
if(!x2615.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2615.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2615.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2615.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2616=IKsin(j1);
IkReal x2617=IKcos(j1);
IkReal x2618=(pz*x2616);
IkReal x2619=(pz*x2617);
evalcond[0]=x2618;
evalcond[1]=((0.85)*x2616);
evalcond[2]=((-0.85)+x2619);
evalcond[3]=(pz+(((-0.85)*x2617)));
evalcond[4]=((-0.2125)+(((1.1)*x2619))+(((-1.0)*pp))+(((-0.09)*x2618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2620=((1.0)*pp);
CheckValue<IkReal> x2621=IKPowWithIntegerCheck(px,-2);
if(!x2621.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x2621.value)*(pz*pz))))), 6.28318530717959)))))+(IKabs(((IKabs(px))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2620))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2620)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2623 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2623.valid){
continue;
}
IkReal x2622=x2623.value;
j1array[0]=((-1.0)*x2622);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2622)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2624=IKsin(j1);
IkReal x2625=IKcos(j1);
IkReal x2626=((0.045)*x2625);
evalcond[0]=((((0.3)*sj3*x2625))+(((0.045)*sj3*x2624))+(((0.55)*x2624))+(((0.3)*cj3*x2624))+(((-1.0)*cj3*x2626))+x2626);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2627=IKPowWithIntegerCheck(px,-2);
if(!x2627.valid){
continue;
}
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x2627.value)*(pz*pz))))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2628=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2628)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2628)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2630=IKPowWithIntegerCheck(pz,-1);
if(!x2630.valid){
continue;
}
IkReal x2629=x2630.value;
if( IKabs(((0.0555555555555556)*x2629*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2629)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2629*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x2629))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2629*(((144.5)+(((-200.0)*pp))))), ((0.85)*x2629));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2631=IKsin(j1);
IkReal x2632=IKcos(j1);
IkReal x2633=(pz*x2631);
IkReal x2634=(pz*x2632);
evalcond[0]=x2633;
evalcond[1]=((0.85)*x2631);
evalcond[2]=((-0.85)+x2634);
evalcond[3]=((((-0.85)*x2632))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x2633))+(((-1.0)*pp))+(((1.1)*x2634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2635=IKPowWithIntegerCheck(pz,-1);
if(!x2635.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2635.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2635.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2635.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2636=IKsin(j1);
IkReal x2637=IKcos(j1);
IkReal x2638=(pz*x2636);
IkReal x2639=(pz*x2637);
evalcond[0]=x2638;
evalcond[1]=((0.85)*x2636);
evalcond[2]=((-0.85)+x2639);
evalcond[3]=((((-0.85)*x2637))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x2638))+(((-1.0)*pp))+(((1.1)*x2639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2640=cj3*cj3;
IkReal x2641=sj3*sj3;
IkReal x2642=(cj3*sj3);
CheckValue<IkReal> x2643 = IKatan2WithCheck((gconst81*(((-0.3025)+(((-0.027)*x2642))+(((-0.002025)*x2641))+(((-0.0495)*sj3))+(pz*pz)+(((-0.09)*x2640))+(((-0.33)*cj3))))),(gconst81*(((-0.02475)+(((0.0135)*x2640))+(((-0.087975)*x2642))+(((0.01125)*cj3))+(((-1.0)*cj0*px*pz))+(((-0.167025)*sj3))+(((-0.0135)*x2641))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2643.valid){
continue;
}
j1array[0]=x2643.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2644=IKsin(j1);
IkReal x2645=IKcos(j1);
IkReal x2646=((0.3)*cj3);
IkReal x2647=((0.045)*cj3);
IkReal x2648=((0.045)*sj3);
IkReal x2649=(cj0*px);
IkReal x2650=((0.3)*sj3);
IkReal x2651=((0.045)*x2644);
IkReal x2652=((1.0)*x2649);
IkReal x2653=(pz*x2644);
IkReal x2654=(pz*x2645);
evalcond[0]=((-0.55)+((x2644*x2649))+(((-1.0)*x2648))+(((-1.0)*x2646))+x2654);
evalcond[1]=((0.045)+(((-1.0)*x2645*x2652))+(((-1.0)*x2647))+x2653+x2650);
evalcond[2]=((-0.2125)+(((1.1)*x2644*x2649))+(((-1.0)*pp))+(((1.1)*x2654))+(((0.09)*x2645*x2649))+(((-0.09)*x2653)));
evalcond[3]=((((-1.0)*x2644*x2647))+(((-1.0)*x2645*x2646))+(((-1.0)*x2645*x2648))+((x2644*x2650))+pz+(((-0.55)*x2645))+x2651);
evalcond[4]=((((0.55)*x2644))+(((-1.0)*x2645*x2647))+((x2644*x2646))+((x2644*x2648))+((x2645*x2650))+(((-1.0)*x2652))+(((0.045)*x2645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2655=((0.3)*sj3);
IkReal x2656=(cj0*px);
IkReal x2657=((0.045)*cj3);
IkReal x2658=((0.045)*pz);
IkReal x2659=((0.3)*cj3);
CheckValue<IkReal> x2660 = IKatan2WithCheck((gconst80*(((((-1.0)*pz*x2657))+(((-0.045)*sj3*x2656))+((pz*x2655))+(((-0.55)*x2656))+(((-1.0)*x2656*x2659))+x2658))),(gconst80*(((((-0.55)*pz))+(((-1.0)*pz*x2659))+((x2656*x2657))+(((-0.045)*x2656))+(((-1.0)*sj3*x2658))+(((-1.0)*x2655*x2656))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2660.valid){
continue;
}
j1array[0]=x2660.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2661=IKsin(j1);
IkReal x2662=IKcos(j1);
IkReal x2663=((0.3)*cj3);
IkReal x2664=((0.045)*cj3);
IkReal x2665=((0.045)*sj3);
IkReal x2666=(cj0*px);
IkReal x2667=((0.3)*sj3);
IkReal x2668=((0.045)*x2661);
IkReal x2669=((1.0)*x2666);
IkReal x2670=(pz*x2661);
IkReal x2671=(pz*x2662);
evalcond[0]=((-0.55)+((x2661*x2666))+(((-1.0)*x2663))+(((-1.0)*x2665))+x2671);
evalcond[1]=((0.045)+(((-1.0)*x2662*x2669))+(((-1.0)*x2664))+x2667+x2670);
evalcond[2]=((-0.2125)+(((-0.09)*x2670))+(((1.1)*x2661*x2666))+(((0.09)*x2662*x2666))+(((1.1)*x2671))+(((-1.0)*pp)));
evalcond[3]=(((x2661*x2667))+(((-1.0)*x2662*x2665))+(((-1.0)*x2662*x2663))+pz+(((-1.0)*x2661*x2664))+x2668+(((-0.55)*x2662)));
evalcond[4]=(((x2661*x2663))+((x2661*x2665))+((x2662*x2667))+(((0.55)*x2661))+(((-1.0)*x2662*x2664))+(((-1.0)*x2669))+(((0.045)*x2662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2672=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2672;
evalcond[3]=((-1.0)*x2672);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst84;
gconst84=IKsign(((pz*pz)+(((cj0*cj0)*(px*px)))));
dummyeval[0]=((pz*pz)+(((cj0*cj0)*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst85;
IkReal x2673=((0.045)*pz);
IkReal x2674=(cj0*px);
gconst85=IKsign(((((-1.0)*cj3*x2673))+(((-0.045)*sj3*x2674))+(((0.3)*pz*sj3))+(((-0.3)*cj3*x2674))+(((-0.55)*x2674))+x2673));
IkReal x2675=(cj0*px);
dummyeval[0]=((((-1.0)*sj3*x2675))+(((-1.0)*cj3*pz))+(((-12.2222222222222)*x2675))+(((6.66666666666667)*pz*sj3))+pz+(((-6.66666666666667)*cj3*x2675)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2676=IKPowWithIntegerCheck(px,-2);
if(!x2676.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x2676.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=px;
evalcond[3]=((-1.0)*px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst86;
gconst86=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2677=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2677))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2677)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2679 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
IkReal x2678=x2679.value;
j1array[0]=((-1.0)*x2678);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2678)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2680=IKsin(j1);
IkReal x2681=IKcos(j1);
IkReal x2682=((0.045)*x2681);
evalcond[0]=(((cj3*x2682))+(((0.045)*sj3*x2680))+(((0.3)*cj3*x2680))+(((-0.3)*sj3*x2681))+(((-1.0)*x2682))+(((0.55)*x2680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2684=IKPowWithIntegerCheck(pz,-1);
if(!x2684.valid){
continue;
}
IkReal x2683=x2684.value;
if( IKabs((x2683*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2683*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2683*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2683*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2683*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x2683*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2685=IKcos(j1);
IkReal x2686=IKsin(j1);
IkReal x2687=((0.045)*cj3);
IkReal x2688=((0.3)*cj3);
IkReal x2689=(sj3*x2686);
IkReal x2690=(cj3*x2686);
IkReal x2691=(sj3*x2685);
IkReal x2692=(pz*x2686);
IkReal x2693=(pz*x2685);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2688))+x2693);
evalcond[1]=((0.045)+(((-1.0)*x2687))+(((0.3)*sj3))+(((-1.0)*x2692)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2692))+(((1.1)*x2693)));
evalcond[3]=((((0.045)*x2689))+((x2685*x2687))+(((-0.3)*x2691))+((x2686*x2688))+(((0.55)*x2686))+(((-0.045)*x2685)));
evalcond[4]=((((-1.0)*x2685*x2688))+(((-0.3)*x2689))+(((-0.55)*x2685))+pz+((x2686*x2687))+(((-0.045)*x2691))+(((-0.045)*x2686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2695=IKPowWithIntegerCheck(pz,-1);
if(!x2695.valid){
continue;
}
IkReal x2694=x2695.value;
if( IKabs(((0.111111111111111)*x2694*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2694*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2694*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x2694*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2694*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x2694*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2696=IKcos(j1);
IkReal x2697=IKsin(j1);
IkReal x2698=((0.045)*cj3);
IkReal x2699=((0.3)*cj3);
IkReal x2700=(sj3*x2697);
IkReal x2701=(cj3*x2697);
IkReal x2702=(sj3*x2696);
IkReal x2703=(pz*x2697);
IkReal x2704=(pz*x2696);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2704+(((-1.0)*x2699)));
evalcond[1]=((0.045)+(((-1.0)*x2698))+(((0.3)*sj3))+(((-1.0)*x2703)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2704))+(((0.09)*x2703)));
evalcond[3]=((((0.55)*x2697))+(((0.045)*x2700))+((x2697*x2699))+(((-0.3)*x2702))+((x2696*x2698))+(((-0.045)*x2696)));
evalcond[4]=((((-1.0)*x2696*x2699))+(((-0.045)*x2702))+((x2697*x2698))+(((-0.3)*x2700))+pz+(((-0.55)*x2696))+(((-0.045)*x2697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2705 = IKatan2WithCheck((gconst86*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst86*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
j1array[0]=x2705.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2706=IKcos(j1);
IkReal x2707=IKsin(j1);
IkReal x2708=((0.045)*cj3);
IkReal x2709=((0.3)*cj3);
IkReal x2710=(sj3*x2707);
IkReal x2711=(cj3*x2707);
IkReal x2712=(sj3*x2706);
IkReal x2713=(pz*x2707);
IkReal x2714=(pz*x2706);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2714+(((-1.0)*x2709)));
evalcond[1]=((0.045)+(((-1.0)*x2713))+(((-1.0)*x2708))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x2713))+(((-1.0)*pp))+(((1.1)*x2714)));
evalcond[3]=((((-0.045)*x2706))+(((-0.3)*x2712))+((x2707*x2709))+((x2706*x2708))+(((0.55)*x2707))+(((0.045)*x2710)));
evalcond[4]=((((-0.55)*x2706))+(((-0.045)*x2707))+(((-0.3)*x2710))+(((-0.045)*x2712))+pz+((x2707*x2708))+(((-1.0)*x2706*x2709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(px,-2);
if(!x2715.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x2715.value)*(pz*pz))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*px);
evalcond[3]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst87;
gconst87=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2716=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((-1.0)*x2716))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2716)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2718 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2718.valid){
continue;
}
IkReal x2717=x2718.value;
j1array[0]=((-1.0)*x2717);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2717)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2719=IKsin(j1);
IkReal x2720=IKcos(j1);
IkReal x2721=((0.045)*x2720);
evalcond[0]=((((0.3)*cj3*x2719))+((cj3*x2721))+(((-0.3)*sj3*x2720))+(((0.045)*sj3*x2719))+(((0.55)*x2719))+(((-1.0)*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2723=IKPowWithIntegerCheck(pz,-1);
if(!x2723.valid){
continue;
}
IkReal x2722=x2723.value;
if( IKabs((x2722*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2722*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2722*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2722*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2722*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x2722*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2724=IKcos(j1);
IkReal x2725=IKsin(j1);
IkReal x2726=((0.045)*cj3);
IkReal x2727=((0.3)*cj3);
IkReal x2728=(sj3*x2725);
IkReal x2729=(cj3*x2725);
IkReal x2730=(sj3*x2724);
IkReal x2731=(pz*x2725);
IkReal x2732=(pz*x2724);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2732+(((-1.0)*x2727)));
evalcond[1]=((0.045)+(((-1.0)*x2731))+(((0.3)*sj3))+(((-1.0)*x2726)));
evalcond[2]=((-0.2125)+(((0.09)*x2731))+(((1.1)*x2732))+(((-1.0)*pp)));
evalcond[3]=((((-0.3)*x2730))+(((0.045)*x2728))+(((0.55)*x2725))+((x2724*x2726))+(((-0.045)*x2724))+((x2725*x2727)));
evalcond[4]=((((-1.0)*x2724*x2727))+(((-0.3)*x2728))+(((-0.045)*x2725))+(((-0.045)*x2730))+((x2725*x2726))+(((-0.55)*x2724))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(pz,-1);
if(!x2734.valid){
continue;
}
IkReal x2733=x2734.value;
if( IKabs(((0.111111111111111)*x2733*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2733*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2733*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x2733*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2733*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x2733*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2735=IKcos(j1);
IkReal x2736=IKsin(j1);
IkReal x2737=((0.045)*cj3);
IkReal x2738=((0.3)*cj3);
IkReal x2739=(sj3*x2736);
IkReal x2740=(cj3*x2736);
IkReal x2741=(sj3*x2735);
IkReal x2742=(pz*x2736);
IkReal x2743=(pz*x2735);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2743+(((-1.0)*x2738)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x2737))+(((-1.0)*x2742)));
evalcond[2]=((-0.2125)+(((0.09)*x2742))+(((1.1)*x2743))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x2739))+(((0.55)*x2736))+((x2735*x2737))+(((-0.045)*x2735))+(((-0.3)*x2741))+((x2736*x2738)));
evalcond[4]=((((-0.3)*x2739))+(((-0.045)*x2741))+(((-0.55)*x2735))+(((-0.045)*x2736))+(((-1.0)*x2735*x2738))+pz+((x2736*x2737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2744 = IKatan2WithCheck((gconst87*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst87*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2744.valid){
continue;
}
j1array[0]=x2744.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2745=IKcos(j1);
IkReal x2746=IKsin(j1);
IkReal x2747=((0.045)*cj3);
IkReal x2748=((0.3)*cj3);
IkReal x2749=(sj3*x2746);
IkReal x2750=(cj3*x2746);
IkReal x2751=(sj3*x2745);
IkReal x2752=(pz*x2746);
IkReal x2753=(pz*x2745);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2753+(((-1.0)*x2748)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x2747))+(((-1.0)*x2752)));
evalcond[2]=((-0.2125)+(((0.09)*x2752))+(((1.1)*x2753))+(((-1.0)*pp)));
evalcond[3]=(((x2746*x2748))+(((-0.045)*x2745))+(((0.55)*x2746))+(((0.045)*x2749))+((x2745*x2747))+(((-0.3)*x2751)));
evalcond[4]=(((x2746*x2747))+(((-0.045)*x2746))+(((-1.0)*x2745*x2748))+(((-0.045)*x2751))+pz+(((-0.3)*x2749))+(((-0.55)*x2745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2754=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2754))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2754)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2756 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2756.valid){
continue;
}
IkReal x2755=x2756.value;
j1array[0]=((-1.0)*x2755);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2755)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2757=IKsin(j1);
IkReal x2758=IKcos(j1);
IkReal x2759=((0.045)*x2758);
evalcond[0]=((((-0.3)*sj3*x2758))+(((0.55)*x2757))+((cj3*x2759))+(((0.3)*cj3*x2757))+(((0.045)*sj3*x2757))+(((-1.0)*x2759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2760=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2760)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2760)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2762=IKPowWithIntegerCheck(pz,-1);
if(!x2762.valid){
continue;
}
IkReal x2761=x2762.value;
if( IKabs(((0.0555555555555556)*x2761*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2761)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2761*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2761))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2761*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2761));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2763=IKsin(j1);
IkReal x2764=IKcos(j1);
IkReal x2765=(pz*x2763);
IkReal x2766=(pz*x2764);
evalcond[0]=((0.85)*x2763);
evalcond[1]=((-1.0)*x2765);
evalcond[2]=((-0.85)+x2766);
evalcond[3]=((((-0.85)*x2764))+pz);
evalcond[4]=((-0.2125)+(((0.09)*x2765))+(((1.1)*x2766))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2767=IKPowWithIntegerCheck(pz,-1);
if(!x2767.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2767.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2767.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2767.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2768=IKsin(j1);
IkReal x2769=IKcos(j1);
IkReal x2770=(pz*x2768);
IkReal x2771=(pz*x2769);
evalcond[0]=((0.85)*x2768);
evalcond[1]=((-1.0)*x2770);
evalcond[2]=((-0.85)+x2771);
evalcond[3]=((((-0.85)*x2769))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2771))+(((0.09)*x2770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2772=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2772))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2772)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2774 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2774.valid){
continue;
}
IkReal x2773=x2774.value;
j1array[0]=((-1.0)*x2773);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2773)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2775=IKsin(j1);
IkReal x2776=IKcos(j1);
IkReal x2777=((0.045)*x2776);
evalcond[0]=((((0.045)*sj3*x2775))+(((0.3)*cj3*x2775))+(((-0.3)*sj3*x2776))+(((-1.0)*x2777))+(((0.55)*x2775))+((cj3*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2778=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2778))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x2778)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2780 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2780.valid){
continue;
}
IkReal x2779=x2780.value;
j1array[0]=((-1.0)*x2779);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2779)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2781=IKsin(j1);
IkReal x2782=IKcos(j1);
IkReal x2783=((0.045)*x2782);
evalcond[0]=((((-1.0)*x2783))+(((-0.3)*sj3*x2782))+(((0.55)*x2781))+((cj3*x2783))+(((0.045)*sj3*x2781))+(((0.3)*cj3*x2781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=px;
evalcond[3]=((-1.0)*px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2784=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2784)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2784)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(pz,-1);
if(!x2786.valid){
continue;
}
IkReal x2785=x2786.value;
if( IKabs(((0.0555555555555556)*x2785*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2785)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2785*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2785))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2785*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2785));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2787=IKsin(j1);
IkReal x2788=IKcos(j1);
IkReal x2789=(pz*x2787);
IkReal x2790=(pz*x2788);
evalcond[0]=((0.85)*x2787);
evalcond[1]=((-1.0)*x2789);
evalcond[2]=((-0.85)+x2790);
evalcond[3]=(pz+(((-0.85)*x2788)));
evalcond[4]=((-0.2125)+(((0.09)*x2789))+(((-1.0)*pp))+(((1.1)*x2790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2791=IKPowWithIntegerCheck(pz,-1);
if(!x2791.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2791.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2791.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2791.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2792=IKsin(j1);
IkReal x2793=IKcos(j1);
IkReal x2794=(pz*x2792);
IkReal x2795=(pz*x2793);
evalcond[0]=((0.85)*x2792);
evalcond[1]=((-1.0)*x2794);
evalcond[2]=((-0.85)+x2795);
evalcond[3]=(pz+(((-0.85)*x2793)));
evalcond[4]=((-0.2125)+(((0.09)*x2794))+(((-1.0)*pp))+(((1.1)*x2795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*px);
evalcond[3]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2796=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2796)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2796)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2798=IKPowWithIntegerCheck(pz,-1);
if(!x2798.valid){
continue;
}
IkReal x2797=x2798.value;
if( IKabs(((0.0555555555555556)*x2797*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2797)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2797*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2797))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2797*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2797));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2799=IKsin(j1);
IkReal x2800=IKcos(j1);
IkReal x2801=(pz*x2799);
IkReal x2802=(pz*x2800);
evalcond[0]=((0.85)*x2799);
evalcond[1]=((-1.0)*x2801);
evalcond[2]=((-0.85)+x2802);
evalcond[3]=((((-0.85)*x2800))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2802))+(((0.09)*x2801))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2803=IKPowWithIntegerCheck(pz,-1);
if(!x2803.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2803.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2803.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2803.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2804=IKsin(j1);
IkReal x2805=IKcos(j1);
IkReal x2806=(pz*x2804);
IkReal x2807=(pz*x2805);
evalcond[0]=((0.85)*x2804);
evalcond[1]=((-1.0)*x2806);
evalcond[2]=((-0.85)+x2807);
evalcond[3]=((((-0.85)*x2805))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2807))+(((0.09)*x2806))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2808=((1.0)*pp);
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(px,-2);
if(!x2809.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x2809.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)))))+(IKabs(((IKabs(px))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((-1.0)*x2808))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2808)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2811 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2811.valid){
continue;
}
IkReal x2810=x2811.value;
j1array[0]=((-1.0)*x2810);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2810)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2812=IKsin(j1);
IkReal x2813=IKcos(j1);
IkReal x2814=((0.045)*x2813);
evalcond[0]=((((-1.0)*x2814))+(((0.3)*cj3*x2812))+(((-0.3)*sj3*x2813))+(((0.045)*sj3*x2812))+((cj3*x2814))+(((0.55)*x2812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2815=IKPowWithIntegerCheck(px,-2);
if(!x2815.valid){
continue;
}
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x2815.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2816=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2816)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2816)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2818=IKPowWithIntegerCheck(pz,-1);
if(!x2818.valid){
continue;
}
IkReal x2817=x2818.value;
if( IKabs(((0.0555555555555556)*x2817*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2817)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2817*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2817))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2817*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2817));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2819=IKsin(j1);
IkReal x2820=IKcos(j1);
IkReal x2821=(pz*x2819);
IkReal x2822=(pz*x2820);
evalcond[0]=((0.85)*x2819);
evalcond[1]=((-1.0)*x2821);
evalcond[2]=((-0.85)+x2822);
evalcond[3]=((((-0.85)*x2820))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2822))+(((0.09)*x2821))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2823=IKPowWithIntegerCheck(pz,-1);
if(!x2823.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2823.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2823.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2823.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2824=IKsin(j1);
IkReal x2825=IKcos(j1);
IkReal x2826=(pz*x2824);
IkReal x2827=(pz*x2825);
evalcond[0]=((0.85)*x2824);
evalcond[1]=((-1.0)*x2826);
evalcond[2]=((-0.85)+x2827);
evalcond[3]=((((-0.85)*x2825))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x2827))+(((0.09)*x2826))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2828=((1.0)*pp);
CheckValue<IkReal> x2829=IKPowWithIntegerCheck(px,-2);
if(!x2829.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x2829.value)*(pz*pz))))), 6.28318530717959)))))+(IKabs(((IKabs(px))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x2828))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2828)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2831 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2831.valid){
continue;
}
IkReal x2830=x2831.value;
j1array[0]=((-1.0)*x2830);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2830)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2832=IKsin(j1);
IkReal x2833=IKcos(j1);
IkReal x2834=((0.045)*x2833);
evalcond[0]=((((0.3)*cj3*x2832))+(((-1.0)*x2834))+(((-0.3)*sj3*x2833))+(((0.55)*x2832))+(((0.045)*sj3*x2832))+((cj3*x2834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x2835=IKPowWithIntegerCheck(px,-2);
if(!x2835.valid){
continue;
}
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x2835.value)*(pz*pz))))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2836=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x2836)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2836)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2838=IKPowWithIntegerCheck(pz,-1);
if(!x2838.valid){
continue;
}
IkReal x2837=x2838.value;
if( IKabs(((0.0555555555555556)*x2837*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x2837)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x2837*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x2837))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x2837*(((-144.5)+(((200.0)*pp))))), ((0.85)*x2837));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2839=IKsin(j1);
IkReal x2840=IKcos(j1);
IkReal x2841=(pz*x2839);
IkReal x2842=(pz*x2840);
evalcond[0]=((0.85)*x2839);
evalcond[1]=((-1.0)*x2841);
evalcond[2]=((-0.85)+x2842);
evalcond[3]=((((-0.85)*x2840))+pz);
evalcond[4]=((-0.2125)+(((0.09)*x2841))+(((1.1)*x2842))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2843=IKPowWithIntegerCheck(pz,-1);
if(!x2843.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x2843.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x2843.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x2843.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2844=IKsin(j1);
IkReal x2845=IKcos(j1);
IkReal x2846=(pz*x2844);
IkReal x2847=(pz*x2845);
evalcond[0]=((0.85)*x2844);
evalcond[1]=((-1.0)*x2846);
evalcond[2]=((-0.85)+x2847);
evalcond[3]=((((-0.85)*x2845))+pz);
evalcond[4]=((-0.2125)+(((0.09)*x2846))+(((1.1)*x2847))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2848=sj3*sj3;
IkReal x2849=cj3*cj3;
IkReal x2850=(cj3*sj3);
CheckValue<IkReal> x2851 = IKatan2WithCheck((gconst85*(((-0.3025)+(((-0.0495)*sj3))+(pz*pz)+(((-0.09)*x2849))+(((-0.002025)*x2848))+(((-0.027)*x2850))+(((-0.33)*cj3))))),(gconst85*(((0.02475)+(((-0.01125)*cj3))+(((0.087975)*x2850))+(((-1.0)*cj0*px*pz))+(((-0.0135)*x2849))+(((0.167025)*sj3))+(((0.0135)*x2848))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
j1array[0]=x2851.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2852=IKcos(j1);
IkReal x2853=IKsin(j1);
IkReal x2854=((0.3)*cj3);
IkReal x2855=((0.045)*cj3);
IkReal x2856=(cj0*px);
IkReal x2857=((0.045)*sj3);
IkReal x2858=((0.3)*sj3);
IkReal x2859=((0.045)*x2853);
IkReal x2860=(pz*x2853);
IkReal x2861=(pz*x2852);
evalcond[0]=((-0.55)+((x2853*x2856))+x2861+(((-1.0)*x2857))+(((-1.0)*x2854)));
evalcond[1]=((0.045)+(((-1.0)*x2860))+((x2852*x2856))+x2858+(((-1.0)*x2855)));
evalcond[2]=((-0.2125)+(((1.1)*x2853*x2856))+(((-0.09)*x2852*x2856))+(((-1.0)*pp))+(((0.09)*x2860))+(((1.1)*x2861)));
evalcond[3]=((((-0.55)*x2852))+((x2853*x2855))+pz+(((-1.0)*x2852*x2854))+(((-1.0)*x2852*x2857))+(((-1.0)*x2859))+(((-1.0)*x2853*x2858)));
evalcond[4]=(((x2852*x2855))+((x2853*x2854))+((x2853*x2857))+(((-0.045)*x2852))+(((0.55)*x2853))+(((-1.0)*x2856))+(((-1.0)*x2852*x2858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2862=(pz*sj3);
IkReal x2863=(cj0*px);
IkReal x2864=((0.045)*pz);
IkReal x2865=((0.3)*cj3);
CheckValue<IkReal> x2866 = IKatan2WithCheck((gconst84*(((((0.3)*x2862))+((x2863*x2865))+(((0.045)*sj3*x2863))+(((-1.0)*cj3*x2864))+x2864+(((0.55)*x2863))))),(gconst84*(((((-0.045)*x2863))+((pz*x2865))+(((0.045)*cj3*x2863))+(((-0.3)*sj3*x2863))+(((0.55)*pz))+(((0.045)*x2862))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2866.valid){
continue;
}
j1array[0]=x2866.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2867=IKcos(j1);
IkReal x2868=IKsin(j1);
IkReal x2869=((0.3)*cj3);
IkReal x2870=((0.045)*cj3);
IkReal x2871=(cj0*px);
IkReal x2872=((0.045)*sj3);
IkReal x2873=((0.3)*sj3);
IkReal x2874=((0.045)*x2868);
IkReal x2875=(pz*x2868);
IkReal x2876=(pz*x2867);
evalcond[0]=((-0.55)+((x2868*x2871))+(((-1.0)*x2872))+(((-1.0)*x2869))+x2876);
evalcond[1]=((0.045)+(((-1.0)*x2875))+(((-1.0)*x2870))+((x2867*x2871))+x2873);
evalcond[2]=((-0.2125)+(((-0.09)*x2867*x2871))+(((-1.0)*pp))+(((1.1)*x2876))+(((0.09)*x2875))+(((1.1)*x2868*x2871)));
evalcond[3]=(((x2868*x2870))+(((-1.0)*x2874))+(((-1.0)*x2868*x2873))+(((-1.0)*x2867*x2869))+pz+(((-0.55)*x2867))+(((-1.0)*x2867*x2872)));
evalcond[4]=((((-0.045)*x2867))+((x2868*x2872))+(((-1.0)*x2871))+((x2867*x2870))+((x2868*x2869))+(((-1.0)*x2867*x2873))+(((0.55)*x2868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2877=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2877;
evalcond[3]=x2877;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst88;
gconst88=IKsign((((cj0*px))+((py*sj0))));
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2878=(cj0*px);
IkReal x2879=(py*sj0);
IkReal x2880=((6.66666666666667)*cj3);
IkReal x2881=((1.0)*sj3);
dummyeval[0]=(x2879+x2878);
dummyeval[1]=((((-12.2222222222222)*x2878))+(((-12.2222222222222)*x2879))+(((-1.0)*x2879*x2881))+(((-1.0)*x2879*x2880))+(((-1.0)*x2878*x2881))+(((-1.0)*x2878*x2880)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2882=(py*sj0);
IkReal x2883=(cj0*px);
IkReal x2884=((6.66666666666667)*sj3);
IkReal x2885=((1.0)*x2883);
IkReal x2886=((1.0)*x2882);
IkReal x2887=(x2886+x2885);
dummyeval[0]=((((-1.0)*x2883*x2884))+(((-1.0)*x2882*x2884))+((cj3*x2882))+((cj3*x2883))+(((-1.0)*x2887)));
dummyeval[1]=((-1.0)*x2887);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2888=x2877;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x2888;
evalcond[3]=x2888;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2889=(cj0*px);
IkReal x2890=(py*sj0);
dummyeval[0]=(x2889+x2890);
dummyeval[1]=((x2890*x2890)+(((2.0)*x2889*x2890))+(x2889*x2889));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2891=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x2891)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2891)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2892=((1.0)*pp);
IkReal x2893=((-1.0)*py);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.7225)+(((-1.0)*x2892)));
evalcond[2]=-0.85;
evalcond[3]=x2893;
evalcond[4]=x2893;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2892)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2894=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x2894)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2894)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2895=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x2895)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2895)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2896=((1.0)*pp);
IkReal x2897=((-1.0)*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x2896)));
evalcond[2]=-0.85;
evalcond[3]=x2897;
evalcond[4]=x2897;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x2896)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2898=(cj0*px);
IkReal x2899=(py*sj0);
IkReal x2900=((20.0)*pp);
CheckValue<IkReal> x2901=IKPowWithIntegerCheck(((((20.0)*x2898))+(((20.0)*x2899))),-1);
if(!x2901.valid){
continue;
}
CheckValue<IkReal> x2902=IKPowWithIntegerCheck(((((1.8)*(x2899*x2899)))+(((1.8)*(x2898*x2898)))+(((3.6)*x2898*x2899))),-1);
if(!x2902.valid){
continue;
}
if( IKabs(((17.0)*(x2901.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2902.value)*((((x2899*x2900))+(((-14.45)*x2899))+(((-14.45)*x2898))+((x2898*x2900)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x2901.value)))+IKsqr(((x2902.value)*((((x2899*x2900))+(((-14.45)*x2899))+(((-14.45)*x2898))+((x2898*x2900))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x2901.value)), ((x2902.value)*((((x2899*x2900))+(((-14.45)*x2899))+(((-14.45)*x2898))+((x2898*x2900))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2903=IKsin(j1);
IkReal x2904=IKcos(j1);
IkReal x2905=(py*sj0);
IkReal x2906=(cj0*px);
IkReal x2907=((0.09)*x2904);
IkReal x2908=((1.0)*x2904);
IkReal x2909=((1.1)*x2903);
evalcond[0]=((-0.85)*x2904);
evalcond[1]=((-0.85)+((x2903*x2906))+((x2903*x2905)));
evalcond[2]=((((0.85)*x2903))+(((-1.0)*x2906))+(((-1.0)*x2905)));
evalcond[3]=((((-1.0)*x2906*x2908))+(((-1.0)*x2905*x2908)));
evalcond[4]=((-0.2125)+((x2906*x2909))+((x2906*x2907))+((x2905*x2907))+((x2905*x2909))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2910=(cj0*px);
IkReal x2911=(py*sj0);
CheckValue<IkReal> x2912=IKPowWithIntegerCheck(((((1.53)*x2910))+(((1.53)*x2911))),-1);
if(!x2912.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x2911))+(((1.17647058823529)*x2910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2912.value)*(((3.6125)+(((-44.0)*x2910*x2911))+(((17.0)*pp))+(((-22.0)*(x2911*x2911)))+(((-22.0)*(x2910*x2910))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x2911))+(((1.17647058823529)*x2910))))+IKsqr(((x2912.value)*(((3.6125)+(((-44.0)*x2910*x2911))+(((17.0)*pp))+(((-22.0)*(x2911*x2911)))+(((-22.0)*(x2910*x2910)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x2911))+(((1.17647058823529)*x2910))), ((x2912.value)*(((3.6125)+(((-44.0)*x2910*x2911))+(((17.0)*pp))+(((-22.0)*(x2911*x2911)))+(((-22.0)*(x2910*x2910)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2913=IKsin(j1);
IkReal x2914=IKcos(j1);
IkReal x2915=(py*sj0);
IkReal x2916=(cj0*px);
IkReal x2917=((0.09)*x2914);
IkReal x2918=((1.0)*x2914);
IkReal x2919=((1.1)*x2913);
evalcond[0]=((-0.85)*x2914);
evalcond[1]=((-0.85)+((x2913*x2916))+((x2913*x2915)));
evalcond[2]=((((0.85)*x2913))+(((-1.0)*x2915))+(((-1.0)*x2916)));
evalcond[3]=((((-1.0)*x2915*x2918))+(((-1.0)*x2916*x2918)));
evalcond[4]=((-0.2125)+((x2916*x2919))+((x2916*x2917))+(((-1.0)*pp))+((x2915*x2919))+((x2915*x2917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst89;
CheckValue<IkReal> x2920 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
gconst89=((-1.0)*(x2920.value));
IkReal gconst90;
gconst90=IKsin(gconst89);
IkReal gconst91;
gconst91=IKcos(gconst89);
IkReal x2921=((((-1.0)*gconst91*py))+((gconst90*px)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst89))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2921;
evalcond[3]=x2921;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst107;
gconst107=IKsign((((gconst91*px))+((gconst90*py))));
dummyeval[0]=(((gconst91*px))+((gconst90*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2922=(gconst90*py);
IkReal x2923=((6.66666666666667)*cj3);
IkReal x2924=(gconst91*px);
IkReal x2925=((1.0)*sj3);
dummyeval[0]=(x2922+x2924);
dummyeval[1]=((((-12.2222222222222)*x2924))+(((-12.2222222222222)*x2922))+(((-1.0)*x2923*x2924))+(((-1.0)*x2924*x2925))+(((-1.0)*x2922*x2923))+(((-1.0)*x2922*x2925)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2926=(gconst91*px);
IkReal x2927=(gconst90*py);
IkReal x2928=((6.66666666666667)*sj3);
IkReal x2929=((1.0)*x2926);
IkReal x2930=((1.0)*x2927);
IkReal x2931=(x2930+x2929);
dummyeval[0]=((((-1.0)*x2927*x2928))+(((-1.0)*x2931))+(((-1.0)*x2926*x2928))+((cj3*x2927))+((cj3*x2926)));
dummyeval[1]=((-1.0)*x2931);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x2932=x2921;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x2932;
evalcond[3]=x2932;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst91*px))+((gconst90*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2933=(gconst91*px);
IkReal x2934=(gconst90*py);
dummyeval[0]=(x2934+x2933);
dummyeval[1]=((((2.0)*x2933*x2934))+(x2934*x2934)+(x2933*x2933));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2935=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x2935)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2935)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2936=(gconst91*px);
IkReal x2937=(gconst90*py);
IkReal x2938=((20.0)*pp);
CheckValue<IkReal> x2939=IKPowWithIntegerCheck(((((20.0)*x2936))+(((20.0)*x2937))),-1);
if(!x2939.valid){
continue;
}
CheckValue<IkReal> x2940=IKPowWithIntegerCheck(((((1.8)*(x2936*x2936)))+(((3.6)*x2936*x2937))+(((1.8)*(x2937*x2937)))),-1);
if(!x2940.valid){
continue;
}
if( IKabs(((17.0)*(x2939.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2940.value)*((((x2936*x2938))+(((-14.45)*x2936))+(((-14.45)*x2937))+((x2937*x2938)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x2939.value)))+IKsqr(((x2940.value)*((((x2936*x2938))+(((-14.45)*x2936))+(((-14.45)*x2937))+((x2937*x2938))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x2939.value)), ((x2940.value)*((((x2936*x2938))+(((-14.45)*x2936))+(((-14.45)*x2937))+((x2937*x2938))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2941=IKsin(j1);
IkReal x2942=IKcos(j1);
IkReal x2943=(gconst90*py);
IkReal x2944=(gconst91*px);
IkReal x2945=((1.0)*x2942);
IkReal x2946=((1.1)*x2941);
IkReal x2947=((0.09)*x2942);
evalcond[0]=((-0.85)*x2942);
evalcond[1]=((-0.85)+((x2941*x2944))+((x2941*x2943)));
evalcond[2]=((((-1.0)*x2944))+(((-1.0)*x2943))+(((0.85)*x2941)));
evalcond[3]=((((-1.0)*x2943*x2945))+(((-1.0)*x2944*x2945)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+((x2944*x2947))+((x2944*x2946))+((x2943*x2946))+((x2943*x2947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2948=(gconst90*py);
IkReal x2949=(gconst91*px);
CheckValue<IkReal> x2950=IKPowWithIntegerCheck(((((1.53)*x2949))+(((1.53)*x2948))),-1);
if(!x2950.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x2949))+(((1.17647058823529)*x2948)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2950.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x2948*x2948)))+(((-44.0)*x2948*x2949))+(((-22.0)*(x2949*x2949))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x2949))+(((1.17647058823529)*x2948))))+IKsqr(((x2950.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x2948*x2948)))+(((-44.0)*x2948*x2949))+(((-22.0)*(x2949*x2949)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x2949))+(((1.17647058823529)*x2948))), ((x2950.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x2948*x2948)))+(((-44.0)*x2948*x2949))+(((-22.0)*(x2949*x2949)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2951=IKsin(j1);
IkReal x2952=IKcos(j1);
IkReal x2953=(gconst90*py);
IkReal x2954=(gconst91*px);
IkReal x2955=((1.0)*x2952);
IkReal x2956=((1.1)*x2951);
IkReal x2957=((0.09)*x2952);
evalcond[0]=((-0.85)*x2952);
evalcond[1]=((-0.85)+((x2951*x2954))+((x2951*x2953)));
evalcond[2]=((((-1.0)*x2953))+(((-1.0)*x2954))+(((0.85)*x2951)));
evalcond[3]=((((-1.0)*x2953*x2955))+(((-1.0)*x2954*x2955)));
evalcond[4]=((-0.2125)+((x2954*x2957))+((x2954*x2956))+(((-1.0)*pp))+((x2953*x2956))+((x2953*x2957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2958=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x2958))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x2958)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2960 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2960.valid){
continue;
}
IkReal x2959=x2960.value;
j1array[0]=((-1.0)*x2959);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2959)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2961=IKsin(j1);
IkReal x2962=IKcos(j1);
IkReal x2963=((0.045)*x2962);
evalcond[0]=((((0.3)*sj3*x2962))+(((-1.0)*cj3*x2963))+(((0.55)*x2961))+(((0.045)*sj3*x2961))+x2963+(((0.3)*cj3*x2961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2964=((-1.0)*gconst91*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x2964;
evalcond[3]=x2964;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst90;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst90;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2965=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x2965)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2965)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2969=IKPowWithIntegerCheck(gconst90,-1);
if(!x2969.valid){
continue;
}
IkReal x2966=x2969.value;
CheckValue<IkReal> x2970=IKPowWithIntegerCheck(py,-1);
if(!x2970.valid){
continue;
}
IkReal x2967=x2970.value;
IkReal x2968=(x2966*x2967);
if( IKabs(((0.85)*x2968)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x2968*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x2968))+IKsqr(((0.0555555555555556)*x2968*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x2968), ((0.0555555555555556)*x2968*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2971=IKcos(j1);
IkReal x2972=IKsin(j1);
IkReal x2973=(gconst90*py);
evalcond[0]=((-0.85)*x2971);
evalcond[1]=((-1.0)*x2971*x2973);
evalcond[2]=((-0.85)+((x2972*x2973)));
evalcond[3]=((((-1.0)*x2973))+(((0.85)*x2972)));
evalcond[4]=((-0.2125)+(((1.1)*x2972*x2973))+(((-1.0)*pp))+(((0.09)*x2971*x2973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2974=IKPowWithIntegerCheck(gconst90,-1);
if(!x2974.valid){
continue;
}
CheckValue<IkReal> x2975=IKPowWithIntegerCheck(py,-1);
if(!x2975.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst90*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x2974.value)*(x2975.value)*(((361.25)+(((-2200.0)*(gconst90*gconst90)*(py*py)))+(((1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst90*py))+IKsqr(((0.0065359477124183)*(x2974.value)*(x2975.value)*(((361.25)+(((-2200.0)*(gconst90*gconst90)*(py*py)))+(((1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst90*py), ((0.0065359477124183)*(x2974.value)*(x2975.value)*(((361.25)+(((-2200.0)*(gconst90*gconst90)*(py*py)))+(((1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2976=IKcos(j1);
IkReal x2977=IKsin(j1);
IkReal x2978=(gconst90*py);
evalcond[0]=((-0.85)*x2976);
evalcond[1]=((-1.0)*x2976*x2978);
evalcond[2]=((-0.85)+((x2977*x2978)));
evalcond[3]=((((-1.0)*x2978))+(((0.85)*x2977)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2976*x2978))+(((1.1)*x2977*x2978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2979=(gconst90*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x2979;
evalcond[3]=x2979;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst91;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst91;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2980=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x2980)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x2980)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2984=IKPowWithIntegerCheck(gconst91,-1);
if(!x2984.valid){
continue;
}
IkReal x2981=x2984.value;
CheckValue<IkReal> x2985=IKPowWithIntegerCheck(px,-1);
if(!x2985.valid){
continue;
}
IkReal x2982=x2985.value;
IkReal x2983=(x2981*x2982);
if( IKabs(((0.85)*x2983)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x2983*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x2983))+IKsqr(((0.0555555555555556)*x2983*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x2983), ((0.0555555555555556)*x2983*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2986=IKcos(j1);
IkReal x2987=IKsin(j1);
IkReal x2988=(gconst91*px);
evalcond[0]=((-0.85)*x2986);
evalcond[1]=((-1.0)*x2986*x2988);
evalcond[2]=((-0.85)+((x2987*x2988)));
evalcond[3]=((((0.85)*x2987))+(((-1.0)*x2988)));
evalcond[4]=((-0.2125)+(((0.09)*x2986*x2988))+(((-1.0)*pp))+(((1.1)*x2987*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2989=IKPowWithIntegerCheck(gconst91,-1);
if(!x2989.valid){
continue;
}
CheckValue<IkReal> x2990=IKPowWithIntegerCheck(px,-1);
if(!x2990.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst91*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x2989.value)*(x2990.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst91*gconst91)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst91*px))+IKsqr(((0.0065359477124183)*(x2989.value)*(x2990.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst91*gconst91)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst91*px), ((0.0065359477124183)*(x2989.value)*(x2990.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst91*gconst91)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2991=IKcos(j1);
IkReal x2992=IKsin(j1);
IkReal x2993=(gconst91*px);
evalcond[0]=((-0.85)*x2991);
evalcond[1]=((-1.0)*x2991*x2993);
evalcond[2]=((-0.85)+((x2992*x2993)));
evalcond[3]=((((0.85)*x2992))+(((-1.0)*x2993)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x2991*x2993))+(((1.1)*x2992*x2993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2994=((0.045)*cj3);
IkReal x2995=(gconst90*py);
IkReal x2996=(gconst91*px);
IkReal x2997=((0.3)*sj3);
CheckValue<IkReal> x2998=IKPowWithIntegerCheck(((((-1.0)*x2996*x2997))+(((-1.0)*x2995*x2997))+(((-0.045)*x2995))+(((-0.045)*x2996))+((x2994*x2995))+((x2994*x2996))),-1);
if(!x2998.valid){
continue;
}
CheckValue<IkReal> x2999=IKPowWithIntegerCheck(((((-1.0)*x2995))+(((-1.0)*x2996))),-1);
if(!x2999.valid){
continue;
}
if( IKabs(((x2998.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2999.value)*(((-0.045)+(((-1.0)*x2997))+x2994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2998.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x2999.value)*(((-0.045)+(((-1.0)*x2997))+x2994))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2998.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x2999.value)*(((-0.045)+(((-1.0)*x2997))+x2994))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3000=IKsin(j1);
IkReal x3001=IKcos(j1);
IkReal x3002=(gconst91*px);
IkReal x3003=((0.045)*cj3);
IkReal x3004=(gconst90*py);
IkReal x3005=((0.045)*sj3);
IkReal x3006=((0.3)*cj3);
IkReal x3007=((0.3)*sj3);
IkReal x3008=(cj3*x3000);
IkReal x3009=((0.09)*x3001);
IkReal x3010=((1.0)*x3001);
IkReal x3011=((1.1)*x3000);
evalcond[0]=((-0.55)+((x3000*x3004))+((x3000*x3002))+(((-1.0)*x3006))+(((-1.0)*x3005)));
evalcond[1]=((0.045)+x3007+(((-1.0)*x3002*x3010))+(((-1.0)*x3003))+(((-1.0)*x3004*x3010)));
evalcond[2]=((-0.2125)+((x3002*x3011))+(((-1.0)*pp))+((x3002*x3009))+((x3004*x3011))+((x3004*x3009)));
evalcond[3]=((((-0.55)*x3001))+(((-1.0)*x3000*x3003))+((x3000*x3007))+(((0.045)*x3000))+(((-1.0)*x3001*x3006))+(((-1.0)*x3001*x3005)));
evalcond[4]=((((-1.0)*x3002))+(((-1.0)*x3004))+((x3001*x3007))+((x3000*x3005))+((x3000*x3006))+(((0.045)*x3001))+(((0.55)*x3000))+(((-1.0)*x3001*x3003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3012=((0.3)*cj3);
IkReal x3013=(gconst91*px);
IkReal x3014=(gconst90*py);
IkReal x3015=((0.045)*sj3);
CheckValue<IkReal> x3016=IKPowWithIntegerCheck((x3013+x3014),-1);
if(!x3016.valid){
continue;
}
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(((((-0.55)*x3013))+(((-0.55)*x3014))+(((-1.0)*x3014*x3015))+(((-1.0)*x3012*x3014))+(((-1.0)*x3012*x3013))+(((-1.0)*x3013*x3015))),-1);
if(!x3017.valid){
continue;
}
if( IKabs(((x3016.value)*(((0.55)+x3012+x3015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3017.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3016.value)*(((0.55)+x3012+x3015))))+IKsqr(((x3017.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3016.value)*(((0.55)+x3012+x3015))), ((x3017.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3018=IKsin(j1);
IkReal x3019=IKcos(j1);
IkReal x3020=(gconst91*px);
IkReal x3021=((0.045)*cj3);
IkReal x3022=(gconst90*py);
IkReal x3023=((0.045)*sj3);
IkReal x3024=((0.3)*cj3);
IkReal x3025=((0.3)*sj3);
IkReal x3026=(cj3*x3018);
IkReal x3027=((0.09)*x3019);
IkReal x3028=((1.0)*x3019);
IkReal x3029=((1.1)*x3018);
evalcond[0]=((-0.55)+(((-1.0)*x3023))+(((-1.0)*x3024))+((x3018*x3020))+((x3018*x3022)));
evalcond[1]=((0.045)+x3025+(((-1.0)*x3021))+(((-1.0)*x3020*x3028))+(((-1.0)*x3022*x3028)));
evalcond[2]=((-0.2125)+((x3020*x3029))+((x3020*x3027))+(((-1.0)*pp))+((x3022*x3027))+((x3022*x3029)));
evalcond[3]=((((-0.55)*x3019))+(((-1.0)*x3018*x3021))+(((-1.0)*x3019*x3023))+(((-1.0)*x3019*x3024))+(((0.045)*x3018))+((x3018*x3025)));
evalcond[4]=(((x3019*x3025))+(((-1.0)*x3019*x3021))+(((-1.0)*x3020))+(((-1.0)*x3022))+(((0.045)*x3019))+((x3018*x3024))+((x3018*x3023))+(((0.55)*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3030 = IKatan2WithCheck((gconst107*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst107*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3030.valid){
continue;
}
j1array[0]=x3030.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3031=IKsin(j1);
IkReal x3032=IKcos(j1);
IkReal x3033=(gconst91*px);
IkReal x3034=((0.045)*cj3);
IkReal x3035=(gconst90*py);
IkReal x3036=((0.045)*sj3);
IkReal x3037=((0.3)*cj3);
IkReal x3038=((0.3)*sj3);
IkReal x3039=(cj3*x3031);
IkReal x3040=((0.09)*x3032);
IkReal x3041=((1.0)*x3032);
IkReal x3042=((1.1)*x3031);
evalcond[0]=((-0.55)+(((-1.0)*x3037))+(((-1.0)*x3036))+((x3031*x3033))+((x3031*x3035)));
evalcond[1]=((0.045)+(((-1.0)*x3033*x3041))+x3038+(((-1.0)*x3034))+(((-1.0)*x3035*x3041)));
evalcond[2]=((-0.2125)+((x3033*x3040))+((x3033*x3042))+(((-1.0)*pp))+((x3035*x3042))+((x3035*x3040)));
evalcond[3]=((((-0.55)*x3032))+(((0.045)*x3031))+(((-1.0)*x3032*x3036))+(((-1.0)*x3032*x3037))+((x3031*x3038))+(((-1.0)*x3031*x3034)));
evalcond[4]=((((0.55)*x3031))+(((-1.0)*x3033))+(((-1.0)*x3035))+(((0.045)*x3032))+((x3032*x3038))+(((-1.0)*x3032*x3034))+((x3031*x3037))+((x3031*x3036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst92;
CheckValue<IkReal> x3043 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x3043.valid){
continue;
}
gconst92=((3.14159265358979)+(((-1.0)*(x3043.value))));
IkReal gconst93;
gconst93=IKsin(gconst92);
IkReal gconst94;
gconst94=IKcos(gconst92);
IkReal x3044=(((gconst93*px))+(((-1.0)*gconst94*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst92))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3044;
evalcond[3]=x3044;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst108;
gconst108=IKsign((((gconst94*px))+((gconst93*py))));
dummyeval[0]=(((gconst94*px))+((gconst93*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3045=(gconst94*px);
IkReal x3046=(gconst93*py);
IkReal x3047=((1.0)*sj3);
IkReal x3048=((6.66666666666667)*cj3);
dummyeval[0]=(x3045+x3046);
dummyeval[1]=((((-1.0)*x3045*x3048))+(((-1.0)*x3045*x3047))+(((-1.0)*x3046*x3048))+(((-1.0)*x3046*x3047))+(((-12.2222222222222)*x3046))+(((-12.2222222222222)*x3045)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3049=(gconst94*px);
IkReal x3050=((6.66666666666667)*sj3);
IkReal x3051=(gconst93*py);
IkReal x3052=((1.0)*x3051);
IkReal x3053=((1.0)*x3049);
IkReal x3054=(x3052+x3053);
dummyeval[0]=(((cj3*x3051))+(((-1.0)*x3050*x3051))+((cj3*x3049))+(((-1.0)*x3054))+(((-1.0)*x3049*x3050)));
dummyeval[1]=((-1.0)*x3054);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3055=x3044;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3055;
evalcond[3]=x3055;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst94*px))+((gconst93*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3056=(gconst93*py);
IkReal x3057=(gconst94*px);
dummyeval[0]=(x3056+x3057);
dummyeval[1]=((x3057*x3057)+(x3056*x3056)+(((2.0)*x3056*x3057)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3058=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x3058)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3058)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3059=(gconst94*px);
IkReal x3060=((20.0)*pp);
IkReal x3061=(gconst93*py);
CheckValue<IkReal> x3062=IKPowWithIntegerCheck(((((20.0)*x3061))+(((20.0)*x3059))),-1);
if(!x3062.valid){
continue;
}
CheckValue<IkReal> x3063=IKPowWithIntegerCheck(((((3.6)*x3059*x3061))+(((1.8)*(x3061*x3061)))+(((1.8)*(x3059*x3059)))),-1);
if(!x3063.valid){
continue;
}
if( IKabs(((17.0)*(x3062.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3063.value)*(((((-14.45)*x3059))+(((-14.45)*x3061))+((x3059*x3060))+((x3060*x3061)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x3062.value)))+IKsqr(((x3063.value)*(((((-14.45)*x3059))+(((-14.45)*x3061))+((x3059*x3060))+((x3060*x3061))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x3062.value)), ((x3063.value)*(((((-14.45)*x3059))+(((-14.45)*x3061))+((x3059*x3060))+((x3060*x3061))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3064=IKsin(j1);
IkReal x3065=IKcos(j1);
IkReal x3066=(gconst93*py);
IkReal x3067=(gconst94*px*x3064);
IkReal x3068=(gconst94*px*x3065);
IkReal x3069=(x3065*x3066);
evalcond[0]=((-0.85)*x3065);
evalcond[1]=((-0.85)+x3067+((x3064*x3066)));
evalcond[2]=((((0.85)*x3064))+(((-1.0)*x3066))+(((-1.0)*gconst94*px)));
evalcond[3]=((((-1.0)*x3069))+(((-1.0)*x3068)));
evalcond[4]=((-0.2125)+(((1.1)*x3064*x3066))+(((0.09)*x3069))+(((0.09)*x3068))+(((-1.0)*pp))+(((1.1)*x3067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3070=(gconst93*py);
IkReal x3071=(gconst94*px);
CheckValue<IkReal> x3072=IKPowWithIntegerCheck(((((1.53)*x3070))+(((1.53)*x3071))),-1);
if(!x3072.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x3071))+(((1.17647058823529)*x3070)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3072.value)*(((3.6125)+(((-22.0)*(x3071*x3071)))+(((17.0)*pp))+(((-44.0)*x3070*x3071))+(((-22.0)*(x3070*x3070))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x3071))+(((1.17647058823529)*x3070))))+IKsqr(((x3072.value)*(((3.6125)+(((-22.0)*(x3071*x3071)))+(((17.0)*pp))+(((-44.0)*x3070*x3071))+(((-22.0)*(x3070*x3070)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x3071))+(((1.17647058823529)*x3070))), ((x3072.value)*(((3.6125)+(((-22.0)*(x3071*x3071)))+(((17.0)*pp))+(((-44.0)*x3070*x3071))+(((-22.0)*(x3070*x3070)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3073=IKsin(j1);
IkReal x3074=IKcos(j1);
IkReal x3075=(gconst93*py);
IkReal x3076=(gconst94*px*x3073);
IkReal x3077=(gconst94*px*x3074);
IkReal x3078=(x3074*x3075);
evalcond[0]=((-0.85)*x3074);
evalcond[1]=((-0.85)+x3076+((x3073*x3075)));
evalcond[2]=((((-1.0)*x3075))+(((0.85)*x3073))+(((-1.0)*gconst94*px)));
evalcond[3]=((((-1.0)*x3077))+(((-1.0)*x3078)));
evalcond[4]=((-0.2125)+(((0.09)*x3077))+(((0.09)*x3078))+(((-1.0)*pp))+(((1.1)*x3076))+(((1.1)*x3073*x3075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3079=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x3079))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x3079)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3081 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3081.valid){
continue;
}
IkReal x3080=x3081.value;
j1array[0]=((-1.0)*x3080);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3080)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3082=IKsin(j1);
IkReal x3083=IKcos(j1);
IkReal x3084=((0.045)*x3083);
evalcond[0]=(x3084+(((0.55)*x3082))+(((0.3)*cj3*x3082))+(((0.3)*sj3*x3083))+(((0.045)*sj3*x3082))+(((-1.0)*cj3*x3084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3085=((-1.0)*gconst94*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3085;
evalcond[3]=x3085;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst93;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst93;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3086=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x3086)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3086)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3090=IKPowWithIntegerCheck(gconst93,-1);
if(!x3090.valid){
continue;
}
IkReal x3087=x3090.value;
CheckValue<IkReal> x3091=IKPowWithIntegerCheck(py,-1);
if(!x3091.valid){
continue;
}
IkReal x3088=x3091.value;
IkReal x3089=(x3087*x3088);
if( IKabs(((0.85)*x3089)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3089*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3089))+IKsqr(((0.0555555555555556)*x3089*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3089), ((0.0555555555555556)*x3089*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3092=IKcos(j1);
IkReal x3093=IKsin(j1);
IkReal x3094=(gconst93*py);
IkReal x3095=(x3092*x3094);
evalcond[0]=((-0.85)*x3092);
evalcond[1]=((-1.0)*x3095);
evalcond[2]=((-0.85)+((x3093*x3094)));
evalcond[3]=((((0.85)*x3093))+(((-1.0)*x3094)));
evalcond[4]=((-0.2125)+(((0.09)*x3095))+(((-1.0)*pp))+(((1.1)*x3093*x3094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3096=IKPowWithIntegerCheck(gconst93,-1);
if(!x3096.valid){
continue;
}
CheckValue<IkReal> x3097=IKPowWithIntegerCheck(py,-1);
if(!x3097.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst93*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3096.value)*(x3097.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst93*gconst93)*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst93*py))+IKsqr(((0.0065359477124183)*(x3096.value)*(x3097.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst93*gconst93)*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst93*py), ((0.0065359477124183)*(x3096.value)*(x3097.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst93*gconst93)*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3098=IKcos(j1);
IkReal x3099=IKsin(j1);
IkReal x3100=(gconst93*py);
IkReal x3101=(x3098*x3100);
evalcond[0]=((-0.85)*x3098);
evalcond[1]=((-1.0)*x3101);
evalcond[2]=((-0.85)+((x3099*x3100)));
evalcond[3]=((((0.85)*x3099))+(((-1.0)*x3100)));
evalcond[4]=((-0.2125)+(((1.1)*x3099*x3100))+(((0.09)*x3101))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3102=(gconst93*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3102;
evalcond[3]=x3102;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst94;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst94;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3103=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x3103)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3103)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3107=IKPowWithIntegerCheck(gconst94,-1);
if(!x3107.valid){
continue;
}
IkReal x3104=x3107.value;
CheckValue<IkReal> x3108=IKPowWithIntegerCheck(px,-1);
if(!x3108.valid){
continue;
}
IkReal x3105=x3108.value;
IkReal x3106=(x3104*x3105);
if( IKabs(((0.85)*x3106)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3106*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3106))+IKsqr(((0.0555555555555556)*x3106*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3106), ((0.0555555555555556)*x3106*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3109=IKcos(j1);
IkReal x3110=IKsin(j1);
IkReal x3111=(gconst94*px*x3110);
IkReal x3112=(gconst94*px*x3109);
evalcond[0]=((-0.85)*x3109);
evalcond[1]=((-1.0)*x3112);
evalcond[2]=((-0.85)+x3111);
evalcond[3]=((((0.85)*x3110))+(((-1.0)*gconst94*px)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x3112))+(((1.1)*x3111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3113=IKPowWithIntegerCheck(gconst94,-1);
if(!x3113.valid){
continue;
}
CheckValue<IkReal> x3114=IKPowWithIntegerCheck(px,-1);
if(!x3114.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst94*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3113.value)*(x3114.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst94*gconst94)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst94*px))+IKsqr(((0.0065359477124183)*(x3113.value)*(x3114.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst94*gconst94)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst94*px), ((0.0065359477124183)*(x3113.value)*(x3114.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst94*gconst94)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3115=IKcos(j1);
IkReal x3116=IKsin(j1);
IkReal x3117=(gconst94*px*x3116);
IkReal x3118=(gconst94*px*x3115);
evalcond[0]=((-0.85)*x3115);
evalcond[1]=((-1.0)*x3118);
evalcond[2]=((-0.85)+x3117);
evalcond[3]=((((0.85)*x3116))+(((-1.0)*gconst94*px)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x3118))+(((1.1)*x3117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3119=((0.3)*sj3);
IkReal x3120=(gconst94*px);
IkReal x3121=((0.045)*cj3);
IkReal x3122=(gconst93*py);
IkReal x3123=((0.045)*x3122);
CheckValue<IkReal> x3124=IKPowWithIntegerCheck((((x3120*x3121))+(((-0.045)*x3120))+((x3121*x3122))+(((-1.0)*x3119*x3120))+(((-1.0)*x3119*x3122))+(((-1.0)*x3123))),-1);
if(!x3124.valid){
continue;
}
CheckValue<IkReal> x3125=IKPowWithIntegerCheck(((((-1.0)*x3122))+(((-1.0)*x3120))),-1);
if(!x3125.valid){
continue;
}
if( IKabs(((x3124.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3125.value)*(((-0.045)+x3121+(((-1.0)*x3119)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3124.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x3125.value)*(((-0.045)+x3121+(((-1.0)*x3119))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3124.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x3125.value)*(((-0.045)+x3121+(((-1.0)*x3119))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3126=IKsin(j1);
IkReal x3127=IKcos(j1);
IkReal x3128=(gconst94*px);
IkReal x3129=((0.045)*cj3);
IkReal x3130=((0.045)*sj3);
IkReal x3131=((0.3)*cj3);
IkReal x3132=(gconst93*py);
IkReal x3133=((0.3)*sj3);
IkReal x3134=((1.0)*x3127);
IkReal x3135=(cj3*x3126);
IkReal x3136=(sj3*x3127);
IkReal x3137=((0.09)*x3127);
IkReal x3138=(x3126*x3132);
evalcond[0]=((-0.55)+x3138+((x3126*x3128))+(((-1.0)*x3130))+(((-1.0)*x3131)));
evalcond[1]=((0.045)+x3133+(((-1.0)*x3132*x3134))+(((-1.0)*x3128*x3134))+(((-1.0)*x3129)));
evalcond[2]=((-0.2125)+((x3132*x3137))+(((-1.0)*pp))+(((1.1)*x3126*x3128))+(((1.1)*x3138))+((x3128*x3137)));
evalcond[3]=((((0.045)*x3126))+((x3126*x3133))+(((-0.55)*x3127))+(((-1.0)*x3126*x3129))+(((-1.0)*x3127*x3131))+(((-1.0)*x3127*x3130)));
evalcond[4]=((((-1.0)*x3128))+(((-1.0)*x3132))+(((0.045)*x3127))+((x3126*x3130))+((x3126*x3131))+((x3127*x3133))+(((0.55)*x3126))+(((-1.0)*x3127*x3129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3139=(gconst94*px);
IkReal x3140=((0.045)*sj3);
IkReal x3141=(gconst93*py);
IkReal x3142=((0.3)*cj3);
CheckValue<IkReal> x3143=IKPowWithIntegerCheck((x3141+x3139),-1);
if(!x3143.valid){
continue;
}
CheckValue<IkReal> x3144=IKPowWithIntegerCheck(((((-1.0)*x3140*x3141))+(((-0.55)*x3141))+(((-1.0)*x3141*x3142))+(((-0.55)*x3139))+(((-1.0)*x3139*x3142))+(((-1.0)*x3139*x3140))),-1);
if(!x3144.valid){
continue;
}
if( IKabs(((x3143.value)*(((0.55)+x3140+x3142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3144.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3143.value)*(((0.55)+x3140+x3142))))+IKsqr(((x3144.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3143.value)*(((0.55)+x3140+x3142))), ((x3144.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3145=IKsin(j1);
IkReal x3146=IKcos(j1);
IkReal x3147=(gconst94*px);
IkReal x3148=((0.045)*cj3);
IkReal x3149=((0.045)*sj3);
IkReal x3150=((0.3)*cj3);
IkReal x3151=(gconst93*py);
IkReal x3152=((0.3)*sj3);
IkReal x3153=((1.0)*x3146);
IkReal x3154=(cj3*x3145);
IkReal x3155=(sj3*x3146);
IkReal x3156=((0.09)*x3146);
IkReal x3157=(x3145*x3151);
evalcond[0]=((-0.55)+(((-1.0)*x3150))+x3157+(((-1.0)*x3149))+((x3145*x3147)));
evalcond[1]=((0.045)+x3152+(((-1.0)*x3148))+(((-1.0)*x3151*x3153))+(((-1.0)*x3147*x3153)));
evalcond[2]=((-0.2125)+((x3151*x3156))+((x3147*x3156))+(((-1.0)*pp))+(((1.1)*x3145*x3147))+(((1.1)*x3157)));
evalcond[3]=((((-1.0)*x3146*x3149))+(((-1.0)*x3146*x3150))+(((-1.0)*x3145*x3148))+(((-0.55)*x3146))+((x3145*x3152))+(((0.045)*x3145)));
evalcond[4]=((((-1.0)*x3147))+(((-1.0)*x3146*x3148))+(((-1.0)*x3151))+(((0.55)*x3145))+((x3145*x3149))+((x3145*x3150))+(((0.045)*x3146))+((x3146*x3152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3158 = IKatan2WithCheck((gconst108*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst108*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3158.valid){
continue;
}
j1array[0]=x3158.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3159=IKsin(j1);
IkReal x3160=IKcos(j1);
IkReal x3161=(gconst94*px);
IkReal x3162=((0.045)*cj3);
IkReal x3163=((0.045)*sj3);
IkReal x3164=((0.3)*cj3);
IkReal x3165=(gconst93*py);
IkReal x3166=((0.3)*sj3);
IkReal x3167=((1.0)*x3160);
IkReal x3168=(cj3*x3159);
IkReal x3169=(sj3*x3160);
IkReal x3170=((0.09)*x3160);
IkReal x3171=(x3159*x3165);
evalcond[0]=((-0.55)+x3171+((x3159*x3161))+(((-1.0)*x3163))+(((-1.0)*x3164)));
evalcond[1]=((0.045)+x3166+(((-1.0)*x3161*x3167))+(((-1.0)*x3165*x3167))+(((-1.0)*x3162)));
evalcond[2]=((-0.2125)+((x3165*x3170))+(((-1.0)*pp))+((x3161*x3170))+(((1.1)*x3171))+(((1.1)*x3159*x3161)));
evalcond[3]=((((-1.0)*x3160*x3163))+(((-1.0)*x3160*x3164))+(((-0.55)*x3160))+((x3159*x3166))+(((-1.0)*x3159*x3162))+(((0.045)*x3159)));
evalcond[4]=((((0.045)*x3160))+(((-1.0)*x3160*x3162))+(((0.55)*x3159))+(((-1.0)*x3165))+(((-1.0)*x3161))+((x3159*x3164))+((x3159*x3163))+((x3160*x3166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst95;
CheckValue<IkReal> x3172 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
gconst95=((-1.0)*(x3172.value));
IkReal gconst96;
gconst96=IKsin(gconst95);
IkReal gconst97;
gconst97=IKcos(gconst95);
IkReal x3173=((((-1.0)*gconst97*py))+((gconst96*px)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst95))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3173;
evalcond[3]=x3173;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst109;
gconst109=IKsign((((gconst97*px))+((gconst96*py))));
dummyeval[0]=(((gconst97*px))+((gconst96*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3174=((6.66666666666667)*cj3);
IkReal x3175=(gconst96*py);
IkReal x3176=(gconst97*px);
IkReal x3177=((1.0)*sj3);
dummyeval[0]=(x3175+x3176);
dummyeval[1]=((((-1.0)*x3174*x3175))+(((-1.0)*x3174*x3176))+(((-12.2222222222222)*x3176))+(((-12.2222222222222)*x3175))+(((-1.0)*x3176*x3177))+(((-1.0)*x3175*x3177)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3178=(gconst97*px);
IkReal x3179=(gconst96*py);
IkReal x3180=((6.66666666666667)*sj3);
IkReal x3181=((1.0)*x3179);
IkReal x3182=((1.0)*x3178);
IkReal x3183=(x3181+x3182);
dummyeval[0]=((((-1.0)*x3179*x3180))+((cj3*x3178))+((cj3*x3179))+(((-1.0)*x3178*x3180))+(((-1.0)*x3183)));
dummyeval[1]=((-1.0)*x3183);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3184=x3173;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3184;
evalcond[3]=x3184;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst97*px))+((gconst96*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3185=(gconst96*py);
IkReal x3186=(gconst97*px);
dummyeval[0]=(x3185+x3186);
dummyeval[1]=((x3186*x3186)+(x3185*x3185)+(((2.0)*x3185*x3186)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3187=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x3187)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3187)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3188=(gconst96*py);
IkReal x3189=(gconst97*px);
IkReal x3190=((20.0)*x3189);
CheckValue<IkReal> x3191=IKPowWithIntegerCheck((x3190+(((20.0)*x3188))),-1);
if(!x3191.valid){
continue;
}
CheckValue<IkReal> x3192=IKPowWithIntegerCheck(((((1.8)*(x3189*x3189)))+(((3.6)*x3188*x3189))+(((1.8)*(x3188*x3188)))),-1);
if(!x3192.valid){
continue;
}
if( IKabs(((17.0)*(x3191.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3192.value)*(((((20.0)*pp*x3188))+(((-14.45)*x3188))+(((-14.45)*x3189))+((pp*x3190)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x3191.value)))+IKsqr(((x3192.value)*(((((20.0)*pp*x3188))+(((-14.45)*x3188))+(((-14.45)*x3189))+((pp*x3190))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x3191.value)), ((x3192.value)*(((((20.0)*pp*x3188))+(((-14.45)*x3188))+(((-14.45)*x3189))+((pp*x3190))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3193=IKsin(j1);
IkReal x3194=IKcos(j1);
IkReal x3195=(gconst96*py);
IkReal x3196=(gconst97*px);
IkReal x3197=((1.0)*x3194);
IkReal x3198=((0.09)*x3194);
IkReal x3199=((1.1)*x3193);
evalcond[0]=((-0.85)*x3194);
evalcond[1]=((-0.85)+((x3193*x3196))+((x3193*x3195)));
evalcond[2]=((((-1.0)*x3196))+(((-1.0)*x3195))+(((0.85)*x3193)));
evalcond[3]=((((-1.0)*x3196*x3197))+(((-1.0)*x3195*x3197)));
evalcond[4]=((-0.2125)+((x3195*x3199))+((x3195*x3198))+(((-1.0)*pp))+((x3196*x3199))+((x3196*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3200=(gconst97*px);
IkReal x3201=(gconst96*py);
CheckValue<IkReal> x3202=IKPowWithIntegerCheck(((((1.53)*x3201))+(((1.53)*x3200))),-1);
if(!x3202.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x3200))+(((1.17647058823529)*x3201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3202.value)*(((3.6125)+(((-22.0)*(x3201*x3201)))+(((17.0)*pp))+(((-44.0)*x3200*x3201))+(((-22.0)*(x3200*x3200))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x3200))+(((1.17647058823529)*x3201))))+IKsqr(((x3202.value)*(((3.6125)+(((-22.0)*(x3201*x3201)))+(((17.0)*pp))+(((-44.0)*x3200*x3201))+(((-22.0)*(x3200*x3200)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x3200))+(((1.17647058823529)*x3201))), ((x3202.value)*(((3.6125)+(((-22.0)*(x3201*x3201)))+(((17.0)*pp))+(((-44.0)*x3200*x3201))+(((-22.0)*(x3200*x3200)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3203=IKsin(j1);
IkReal x3204=IKcos(j1);
IkReal x3205=(gconst96*py);
IkReal x3206=(gconst97*px);
IkReal x3207=((1.0)*x3204);
IkReal x3208=((0.09)*x3204);
IkReal x3209=((1.1)*x3203);
evalcond[0]=((-0.85)*x3204);
evalcond[1]=((-0.85)+((x3203*x3206))+((x3203*x3205)));
evalcond[2]=((((-1.0)*x3206))+(((-1.0)*x3205))+(((0.85)*x3203)));
evalcond[3]=((((-1.0)*x3206*x3207))+(((-1.0)*x3205*x3207)));
evalcond[4]=((-0.2125)+((x3205*x3209))+((x3205*x3208))+((x3206*x3209))+((x3206*x3208))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3210=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x3210))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x3210)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3212 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3212.valid){
continue;
}
IkReal x3211=x3212.value;
j1array[0]=((-1.0)*x3211);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3211)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3213=IKsin(j1);
IkReal x3214=IKcos(j1);
IkReal x3215=((0.045)*x3214);
evalcond[0]=(x3215+(((0.045)*sj3*x3213))+(((0.55)*x3213))+(((-1.0)*cj3*x3215))+(((0.3)*sj3*x3214))+(((0.3)*cj3*x3213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3216=((-1.0)*gconst97*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3216;
evalcond[3]=x3216;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst96;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst96;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3217=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x3217)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3217)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3221=IKPowWithIntegerCheck(gconst96,-1);
if(!x3221.valid){
continue;
}
IkReal x3218=x3221.value;
CheckValue<IkReal> x3222=IKPowWithIntegerCheck(py,-1);
if(!x3222.valid){
continue;
}
IkReal x3219=x3222.value;
IkReal x3220=(x3218*x3219);
if( IKabs(((0.85)*x3220)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3220*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3220))+IKsqr(((0.0555555555555556)*x3220*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3220), ((0.0555555555555556)*x3220*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3223=IKcos(j1);
IkReal x3224=IKsin(j1);
IkReal x3225=(gconst96*py);
evalcond[0]=((-0.85)*x3223);
evalcond[1]=((-1.0)*x3223*x3225);
evalcond[2]=((-0.85)+((x3224*x3225)));
evalcond[3]=((((-1.0)*x3225))+(((0.85)*x3224)));
evalcond[4]=((-0.2125)+(((1.1)*x3224*x3225))+(((-1.0)*pp))+(((0.09)*x3223*x3225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3226=IKPowWithIntegerCheck(gconst96,-1);
if(!x3226.valid){
continue;
}
CheckValue<IkReal> x3227=IKPowWithIntegerCheck(py,-1);
if(!x3227.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst96*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3226.value)*(x3227.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst96*gconst96)*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst96*py))+IKsqr(((0.0065359477124183)*(x3226.value)*(x3227.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst96*gconst96)*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst96*py), ((0.0065359477124183)*(x3226.value)*(x3227.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst96*gconst96)*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3228=IKcos(j1);
IkReal x3229=IKsin(j1);
IkReal x3230=(gconst96*py);
evalcond[0]=((-0.85)*x3228);
evalcond[1]=((-1.0)*x3228*x3230);
evalcond[2]=((-0.85)+((x3229*x3230)));
evalcond[3]=((((-1.0)*x3230))+(((0.85)*x3229)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x3229*x3230))+(((0.09)*x3228*x3230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3231=(gconst96*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3231;
evalcond[3]=x3231;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst97;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst97;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3232=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x3232)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3232)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3236=IKPowWithIntegerCheck(gconst97,-1);
if(!x3236.valid){
continue;
}
IkReal x3233=x3236.value;
CheckValue<IkReal> x3237=IKPowWithIntegerCheck(px,-1);
if(!x3237.valid){
continue;
}
IkReal x3234=x3237.value;
IkReal x3235=(x3233*x3234);
if( IKabs(((0.85)*x3235)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3235*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3235))+IKsqr(((0.0555555555555556)*x3235*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3235), ((0.0555555555555556)*x3235*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3238=IKcos(j1);
IkReal x3239=IKsin(j1);
IkReal x3240=(gconst97*px);
evalcond[0]=((-0.85)*x3238);
evalcond[1]=((-1.0)*x3238*x3240);
evalcond[2]=((-0.85)+((x3239*x3240)));
evalcond[3]=((((-1.0)*x3240))+(((0.85)*x3239)));
evalcond[4]=((-0.2125)+(((1.1)*x3239*x3240))+(((0.09)*x3238*x3240))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3241=IKPowWithIntegerCheck(gconst97,-1);
if(!x3241.valid){
continue;
}
CheckValue<IkReal> x3242=IKPowWithIntegerCheck(px,-1);
if(!x3242.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst97*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3241.value)*(x3242.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst97*gconst97)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst97*px))+IKsqr(((0.0065359477124183)*(x3241.value)*(x3242.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst97*gconst97)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst97*px), ((0.0065359477124183)*(x3241.value)*(x3242.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst97*gconst97)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3243=IKcos(j1);
IkReal x3244=IKsin(j1);
IkReal x3245=(gconst97*px);
evalcond[0]=((-0.85)*x3243);
evalcond[1]=((-1.0)*x3243*x3245);
evalcond[2]=((-0.85)+((x3244*x3245)));
evalcond[3]=((((-1.0)*x3245))+(((0.85)*x3244)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x3243*x3245))+(((1.1)*x3244*x3245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3246=((0.3)*sj3);
IkReal x3247=(gconst97*px);
IkReal x3248=((0.045)*cj3);
IkReal x3249=(gconst96*py);
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(((((-0.045)*x3247))+(((-0.045)*x3249))+(((-1.0)*x3246*x3247))+(((-1.0)*x3246*x3249))+((x3247*x3248))+((x3248*x3249))),-1);
if(!x3250.valid){
continue;
}
CheckValue<IkReal> x3251=IKPowWithIntegerCheck(((((-1.0)*x3247))+(((-1.0)*x3249))),-1);
if(!x3251.valid){
continue;
}
if( IKabs(((x3250.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3251.value)*(((-0.045)+x3248+(((-1.0)*x3246)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3250.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x3251.value)*(((-0.045)+x3248+(((-1.0)*x3246))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3250.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x3251.value)*(((-0.045)+x3248+(((-1.0)*x3246))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3252=IKsin(j1);
IkReal x3253=IKcos(j1);
IkReal x3254=(gconst96*py);
IkReal x3255=((0.3)*cj3);
IkReal x3256=((0.045)*cj3);
IkReal x3257=(gconst97*px);
IkReal x3258=((0.045)*sj3);
IkReal x3259=((0.3)*sj3);
IkReal x3260=((0.045)*x3252);
IkReal x3261=((0.09)*x3253);
IkReal x3262=((1.1)*x3252);
IkReal x3263=((1.0)*x3253);
evalcond[0]=((-0.55)+((x3252*x3257))+((x3252*x3254))+(((-1.0)*x3255))+(((-1.0)*x3258)));
evalcond[1]=((0.045)+(((-1.0)*x3257*x3263))+x3259+(((-1.0)*x3254*x3263))+(((-1.0)*x3256)));
evalcond[2]=((-0.2125)+((x3257*x3262))+((x3257*x3261))+((x3254*x3261))+((x3254*x3262))+(((-1.0)*pp)));
evalcond[3]=(x3260+(((-1.0)*x3253*x3255))+(((-1.0)*x3253*x3258))+(((-0.55)*x3253))+((x3252*x3259))+(((-1.0)*x3252*x3256)));
evalcond[4]=((((0.045)*x3253))+(((-1.0)*x3253*x3256))+(((-1.0)*x3257))+(((-1.0)*x3254))+((x3252*x3258))+((x3252*x3255))+(((0.55)*x3252))+((x3253*x3259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3264=(gconst97*px);
IkReal x3265=((0.3)*cj3);
IkReal x3266=((0.045)*sj3);
IkReal x3267=(gconst96*py);
CheckValue<IkReal> x3268=IKPowWithIntegerCheck((x3264+x3267),-1);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269=IKPowWithIntegerCheck(((((-0.55)*x3264))+(((-0.55)*x3267))+(((-1.0)*x3264*x3266))+(((-1.0)*x3264*x3265))+(((-1.0)*x3265*x3267))+(((-1.0)*x3266*x3267))),-1);
if(!x3269.valid){
continue;
}
if( IKabs(((x3268.value)*(((0.55)+x3265+x3266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3269.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3268.value)*(((0.55)+x3265+x3266))))+IKsqr(((x3269.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3268.value)*(((0.55)+x3265+x3266))), ((x3269.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3270=IKsin(j1);
IkReal x3271=IKcos(j1);
IkReal x3272=(gconst96*py);
IkReal x3273=((0.3)*cj3);
IkReal x3274=((0.045)*cj3);
IkReal x3275=(gconst97*px);
IkReal x3276=((0.045)*sj3);
IkReal x3277=((0.3)*sj3);
IkReal x3278=((0.045)*x3270);
IkReal x3279=((0.09)*x3271);
IkReal x3280=((1.1)*x3270);
IkReal x3281=((1.0)*x3271);
evalcond[0]=((-0.55)+(((-1.0)*x3273))+(((-1.0)*x3276))+((x3270*x3275))+((x3270*x3272)));
evalcond[1]=((0.045)+(((-1.0)*x3272*x3281))+x3277+(((-1.0)*x3274))+(((-1.0)*x3275*x3281)));
evalcond[2]=((-0.2125)+((x3272*x3279))+((x3275*x3279))+((x3272*x3280))+(((-1.0)*pp))+((x3275*x3280)));
evalcond[3]=((((-0.55)*x3271))+x3278+(((-1.0)*x3270*x3274))+(((-1.0)*x3271*x3276))+(((-1.0)*x3271*x3273))+((x3270*x3277)));
evalcond[4]=((((-1.0)*x3275))+(((-1.0)*x3272))+(((0.55)*x3270))+(((0.045)*x3271))+(((-1.0)*x3271*x3274))+((x3270*x3273))+((x3270*x3276))+((x3271*x3277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3282 = IKatan2WithCheck((gconst109*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst109*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3282.valid){
continue;
}
j1array[0]=x3282.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3283=IKsin(j1);
IkReal x3284=IKcos(j1);
IkReal x3285=(gconst96*py);
IkReal x3286=((0.3)*cj3);
IkReal x3287=((0.045)*cj3);
IkReal x3288=(gconst97*px);
IkReal x3289=((0.045)*sj3);
IkReal x3290=((0.3)*sj3);
IkReal x3291=((0.045)*x3283);
IkReal x3292=((0.09)*x3284);
IkReal x3293=((1.1)*x3283);
IkReal x3294=((1.0)*x3284);
evalcond[0]=((-0.55)+(((-1.0)*x3286))+(((-1.0)*x3289))+((x3283*x3288))+((x3283*x3285)));
evalcond[1]=((0.045)+(((-1.0)*x3287))+x3290+(((-1.0)*x3288*x3294))+(((-1.0)*x3285*x3294)));
evalcond[2]=((-0.2125)+((x3288*x3293))+((x3288*x3292))+(((-1.0)*pp))+((x3285*x3293))+((x3285*x3292)));
evalcond[3]=(x3291+(((-1.0)*x3283*x3287))+((x3283*x3290))+(((-0.55)*x3284))+(((-1.0)*x3284*x3289))+(((-1.0)*x3284*x3286)));
evalcond[4]=((((0.045)*x3284))+(((0.55)*x3283))+((x3283*x3289))+((x3283*x3286))+(((-1.0)*x3284*x3287))+(((-1.0)*x3285))+(((-1.0)*x3288))+((x3284*x3290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst98;
CheckValue<IkReal> x3295 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3295.valid){
continue;
}
gconst98=((3.14159265358979)+(((-1.0)*(x3295.value))));
IkReal gconst99;
gconst99=IKsin(gconst98);
IkReal gconst100;
gconst100=IKcos(gconst98);
IkReal x3296=((((-1.0)*gconst100*py))+((gconst99*px)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst98))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3296;
evalcond[3]=x3296;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst110;
gconst110=IKsign((((gconst100*px))+((gconst99*py))));
dummyeval[0]=(((gconst100*px))+((gconst99*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3297=(gconst99*py);
IkReal x3298=((6.66666666666667)*cj3);
IkReal x3299=(gconst100*px);
IkReal x3300=((1.0)*sj3);
dummyeval[0]=(x3299+x3297);
dummyeval[1]=((((-12.2222222222222)*x3297))+(((-12.2222222222222)*x3299))+(((-1.0)*x3298*x3299))+(((-1.0)*x3297*x3298))+(((-1.0)*x3297*x3300))+(((-1.0)*x3299*x3300)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3301=(gconst99*py);
IkReal x3302=((6.66666666666667)*sj3);
IkReal x3303=(gconst100*px);
IkReal x3304=((1.0)*x3301);
IkReal x3305=((1.0)*x3303);
IkReal x3306=(x3304+x3305);
dummyeval[0]=(((cj3*x3303))+((cj3*x3301))+(((-1.0)*x3306))+(((-1.0)*x3302*x3303))+(((-1.0)*x3301*x3302)));
dummyeval[1]=((-1.0)*x3306);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3307=x3296;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3307;
evalcond[3]=x3307;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst100*px))+((gconst99*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3308=(gconst99*py);
IkReal x3309=(gconst100*px);
dummyeval[0]=(x3308+x3309);
dummyeval[1]=((x3308*x3308)+(x3309*x3309)+(((2.0)*x3308*x3309)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3310=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x3310)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3310)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3311=(gconst100*px);
IkReal x3312=(gconst99*py);
IkReal x3313=((20.0)*x3311);
IkReal x3314=((20.0)*x3312);
CheckValue<IkReal> x3315=IKPowWithIntegerCheck((x3313+x3314),-1);
if(!x3315.valid){
continue;
}
CheckValue<IkReal> x3316=IKPowWithIntegerCheck(((((1.8)*(x3311*x3311)))+(((3.6)*x3311*x3312))+(((1.8)*(x3312*x3312)))),-1);
if(!x3316.valid){
continue;
}
if( IKabs(((17.0)*(x3315.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3316.value)*((((pp*x3313))+((pp*x3314))+(((-14.45)*x3311))+(((-14.45)*x3312)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x3315.value)))+IKsqr(((x3316.value)*((((pp*x3313))+((pp*x3314))+(((-14.45)*x3311))+(((-14.45)*x3312))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x3315.value)), ((x3316.value)*((((pp*x3313))+((pp*x3314))+(((-14.45)*x3311))+(((-14.45)*x3312))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3317=IKsin(j1);
IkReal x3318=IKcos(j1);
IkReal x3319=(gconst100*px);
IkReal x3320=(gconst99*py);
IkReal x3321=((1.0)*x3318);
IkReal x3322=((0.09)*x3318);
IkReal x3323=((1.1)*x3317);
evalcond[0]=((-0.85)*x3318);
evalcond[1]=((-0.85)+((x3317*x3319))+((x3317*x3320)));
evalcond[2]=((((-1.0)*x3320))+(((0.85)*x3317))+(((-1.0)*x3319)));
evalcond[3]=((((-1.0)*x3319*x3321))+(((-1.0)*x3320*x3321)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+((x3320*x3322))+((x3320*x3323))+((x3319*x3323))+((x3319*x3322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3324=(gconst100*px);
IkReal x3325=(gconst99*py);
CheckValue<IkReal> x3326=IKPowWithIntegerCheck(((((1.53)*x3324))+(((1.53)*x3325))),-1);
if(!x3326.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x3325))+(((1.17647058823529)*x3324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3326.value)*(((3.6125)+(((-44.0)*x3324*x3325))+(((-22.0)*(x3325*x3325)))+(((17.0)*pp))+(((-22.0)*(x3324*x3324))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x3325))+(((1.17647058823529)*x3324))))+IKsqr(((x3326.value)*(((3.6125)+(((-44.0)*x3324*x3325))+(((-22.0)*(x3325*x3325)))+(((17.0)*pp))+(((-22.0)*(x3324*x3324)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x3325))+(((1.17647058823529)*x3324))), ((x3326.value)*(((3.6125)+(((-44.0)*x3324*x3325))+(((-22.0)*(x3325*x3325)))+(((17.0)*pp))+(((-22.0)*(x3324*x3324)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3327=IKsin(j1);
IkReal x3328=IKcos(j1);
IkReal x3329=(gconst100*px);
IkReal x3330=(gconst99*py);
IkReal x3331=((1.0)*x3328);
IkReal x3332=((0.09)*x3328);
IkReal x3333=((1.1)*x3327);
evalcond[0]=((-0.85)*x3328);
evalcond[1]=((-0.85)+((x3327*x3330))+((x3327*x3329)));
evalcond[2]=((((-1.0)*x3329))+(((0.85)*x3327))+(((-1.0)*x3330)));
evalcond[3]=((((-1.0)*x3330*x3331))+(((-1.0)*x3329*x3331)));
evalcond[4]=((-0.2125)+((x3330*x3333))+((x3330*x3332))+((x3329*x3332))+((x3329*x3333))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3334=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x3334))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x3334)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3336 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3336.valid){
continue;
}
IkReal x3335=x3336.value;
j1array[0]=((-1.0)*x3335);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3335)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3337=IKsin(j1);
IkReal x3338=IKcos(j1);
IkReal x3339=((0.045)*x3338);
evalcond[0]=((((0.55)*x3337))+(((0.045)*sj3*x3337))+x3339+(((0.3)*sj3*x3338))+(((0.3)*cj3*x3337))+(((-1.0)*cj3*x3339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3340=((-1.0)*gconst100*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3340;
evalcond[3]=x3340;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst99;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst99;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3341=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x3341)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3341)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3345=IKPowWithIntegerCheck(gconst99,-1);
if(!x3345.valid){
continue;
}
IkReal x3342=x3345.value;
CheckValue<IkReal> x3346=IKPowWithIntegerCheck(py,-1);
if(!x3346.valid){
continue;
}
IkReal x3343=x3346.value;
IkReal x3344=(x3342*x3343);
if( IKabs(((0.85)*x3344)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3344*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3344))+IKsqr(((0.0555555555555556)*x3344*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3344), ((0.0555555555555556)*x3344*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3347=IKcos(j1);
IkReal x3348=IKsin(j1);
IkReal x3349=(gconst99*py);
evalcond[0]=((-0.85)*x3347);
evalcond[1]=((-1.0)*x3347*x3349);
evalcond[2]=((-0.85)+((x3348*x3349)));
evalcond[3]=((((-1.0)*x3349))+(((0.85)*x3348)));
evalcond[4]=((-0.2125)+(((1.1)*x3348*x3349))+(((-1.0)*pp))+(((0.09)*x3347*x3349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3350=IKPowWithIntegerCheck(gconst99,-1);
if(!x3350.valid){
continue;
}
CheckValue<IkReal> x3351=IKPowWithIntegerCheck(py,-1);
if(!x3351.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst99*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3350.value)*(x3351.value)*(((361.25)+(((-2200.0)*(gconst99*gconst99)*(py*py)))+(((1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst99*py))+IKsqr(((0.0065359477124183)*(x3350.value)*(x3351.value)*(((361.25)+(((-2200.0)*(gconst99*gconst99)*(py*py)))+(((1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst99*py), ((0.0065359477124183)*(x3350.value)*(x3351.value)*(((361.25)+(((-2200.0)*(gconst99*gconst99)*(py*py)))+(((1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3352=IKcos(j1);
IkReal x3353=IKsin(j1);
IkReal x3354=(gconst99*py);
evalcond[0]=((-0.85)*x3352);
evalcond[1]=((-1.0)*x3352*x3354);
evalcond[2]=((-0.85)+((x3353*x3354)));
evalcond[3]=((((0.85)*x3353))+(((-1.0)*x3354)));
evalcond[4]=((-0.2125)+(((1.1)*x3353*x3354))+(((0.09)*x3352*x3354))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3355=(gconst99*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3355;
evalcond[3]=x3355;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst100;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst100;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3356=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x3356)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3356)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3360=IKPowWithIntegerCheck(gconst100,-1);
if(!x3360.valid){
continue;
}
IkReal x3357=x3360.value;
CheckValue<IkReal> x3361=IKPowWithIntegerCheck(px,-1);
if(!x3361.valid){
continue;
}
IkReal x3358=x3361.value;
IkReal x3359=(x3357*x3358);
if( IKabs(((0.85)*x3359)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3359*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3359))+IKsqr(((0.0555555555555556)*x3359*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3359), ((0.0555555555555556)*x3359*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3362=IKcos(j1);
IkReal x3363=IKsin(j1);
IkReal x3364=(gconst100*px);
evalcond[0]=((-0.85)*x3362);
evalcond[1]=((-1.0)*x3362*x3364);
evalcond[2]=((-0.85)+((x3363*x3364)));
evalcond[3]=((((-1.0)*x3364))+(((0.85)*x3363)));
evalcond[4]=((-0.2125)+(((0.09)*x3362*x3364))+(((1.1)*x3363*x3364))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3365=IKPowWithIntegerCheck(gconst100,-1);
if(!x3365.valid){
continue;
}
CheckValue<IkReal> x3366=IKPowWithIntegerCheck(px,-1);
if(!x3366.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst100*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3365.value)*(x3366.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst100*gconst100)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst100*px))+IKsqr(((0.0065359477124183)*(x3365.value)*(x3366.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst100*gconst100)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst100*px), ((0.0065359477124183)*(x3365.value)*(x3366.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst100*gconst100)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3367=IKcos(j1);
IkReal x3368=IKsin(j1);
IkReal x3369=(gconst100*px);
evalcond[0]=((-0.85)*x3367);
evalcond[1]=((-1.0)*x3367*x3369);
evalcond[2]=((-0.85)+((x3368*x3369)));
evalcond[3]=((((-1.0)*x3369))+(((0.85)*x3368)));
evalcond[4]=((-0.2125)+(((1.1)*x3368*x3369))+(((0.09)*x3367*x3369))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3370=(gconst99*py);
IkReal x3371=((0.045)*cj3);
IkReal x3372=(gconst100*px);
IkReal x3373=((0.3)*sj3);
CheckValue<IkReal> x3374=IKPowWithIntegerCheck(((((-0.045)*x3370))+(((-0.045)*x3372))+(((-1.0)*x3370*x3373))+((x3370*x3371))+((x3371*x3372))+(((-1.0)*x3372*x3373))),-1);
if(!x3374.valid){
continue;
}
CheckValue<IkReal> x3375=IKPowWithIntegerCheck(((((-1.0)*x3370))+(((-1.0)*x3372))),-1);
if(!x3375.valid){
continue;
}
if( IKabs(((x3374.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3375.value)*(((-0.045)+x3371+(((-1.0)*x3373)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3374.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x3375.value)*(((-0.045)+x3371+(((-1.0)*x3373))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3374.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x3375.value)*(((-0.045)+x3371+(((-1.0)*x3373))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3376=IKsin(j1);
IkReal x3377=IKcos(j1);
IkReal x3378=(gconst100*px);
IkReal x3379=((0.3)*cj3);
IkReal x3380=(gconst99*py);
IkReal x3381=((0.045)*cj3);
IkReal x3382=((0.3)*sj3);
IkReal x3383=((1.0)*x3377);
IkReal x3384=((0.045)*x3376);
IkReal x3385=((0.09)*x3377);
IkReal x3386=((0.045)*x3377);
IkReal x3387=((1.1)*x3376);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3376*x3378))+(((-1.0)*x3379))+((x3376*x3380)));
evalcond[1]=((0.045)+(((-1.0)*x3378*x3383))+x3382+(((-1.0)*x3380*x3383))+(((-1.0)*x3381)));
evalcond[2]=((-0.2125)+((x3380*x3387))+((x3380*x3385))+(((-1.0)*pp))+((x3378*x3385))+((x3378*x3387)));
evalcond[3]=((((-1.0)*sj3*x3386))+x3384+(((-1.0)*x3376*x3381))+(((-1.0)*x3377*x3379))+(((-0.55)*x3377))+((x3376*x3382)));
evalcond[4]=((((-1.0)*x3378))+(((-1.0)*x3380))+(((-1.0)*x3377*x3381))+x3386+((x3376*x3379))+(((0.55)*x3376))+((x3377*x3382))+((sj3*x3384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3388=(gconst99*py);
IkReal x3389=((0.3)*cj3);
IkReal x3390=(gconst100*px);
IkReal x3391=((0.045)*sj3);
CheckValue<IkReal> x3392=IKPowWithIntegerCheck((x3388+x3390),-1);
if(!x3392.valid){
continue;
}
CheckValue<IkReal> x3393=IKPowWithIntegerCheck(((((-0.55)*x3390))+(((-1.0)*x3389*x3390))+(((-1.0)*x3388*x3391))+(((-0.55)*x3388))+(((-1.0)*x3390*x3391))+(((-1.0)*x3388*x3389))),-1);
if(!x3393.valid){
continue;
}
if( IKabs(((x3392.value)*(((0.55)+x3389+x3391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3393.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3392.value)*(((0.55)+x3389+x3391))))+IKsqr(((x3393.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3392.value)*(((0.55)+x3389+x3391))), ((x3393.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3394=IKsin(j1);
IkReal x3395=IKcos(j1);
IkReal x3396=(gconst100*px);
IkReal x3397=((0.3)*cj3);
IkReal x3398=(gconst99*py);
IkReal x3399=((0.045)*cj3);
IkReal x3400=((0.3)*sj3);
IkReal x3401=((1.0)*x3395);
IkReal x3402=((0.045)*x3394);
IkReal x3403=((0.09)*x3395);
IkReal x3404=((0.045)*x3395);
IkReal x3405=((1.1)*x3394);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3394*x3396))+((x3394*x3398))+(((-1.0)*x3397)));
evalcond[1]=((0.045)+(((-1.0)*x3398*x3401))+(((-1.0)*x3396*x3401))+x3400+(((-1.0)*x3399)));
evalcond[2]=((-0.2125)+((x3398*x3405))+((x3398*x3403))+(((-1.0)*pp))+((x3396*x3403))+((x3396*x3405)));
evalcond[3]=((((-0.55)*x3395))+(((-1.0)*x3394*x3399))+(((-1.0)*sj3*x3404))+((x3394*x3400))+(((-1.0)*x3395*x3397))+x3402);
evalcond[4]=(((x3394*x3397))+(((-1.0)*x3396))+(((-1.0)*x3398))+(((-1.0)*x3395*x3399))+((sj3*x3402))+x3404+((x3395*x3400))+(((0.55)*x3394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3406 = IKatan2WithCheck((gconst110*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst110*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3406.valid){
continue;
}
j1array[0]=x3406.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3407=IKsin(j1);
IkReal x3408=IKcos(j1);
IkReal x3409=(gconst100*px);
IkReal x3410=((0.3)*cj3);
IkReal x3411=(gconst99*py);
IkReal x3412=((0.045)*cj3);
IkReal x3413=((0.3)*sj3);
IkReal x3414=((1.0)*x3408);
IkReal x3415=((0.045)*x3407);
IkReal x3416=((0.09)*x3408);
IkReal x3417=((0.045)*x3408);
IkReal x3418=((1.1)*x3407);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3407*x3411))+((x3407*x3409))+(((-1.0)*x3410)));
evalcond[1]=((0.045)+(((-1.0)*x3411*x3414))+x3413+(((-1.0)*x3409*x3414))+(((-1.0)*x3412)));
evalcond[2]=((-0.2125)+((x3409*x3418))+((x3409*x3416))+((x3411*x3418))+((x3411*x3416))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x3407*x3412))+(((-0.55)*x3408))+(((-1.0)*sj3*x3417))+(((-1.0)*x3408*x3410))+x3415+((x3407*x3413)));
evalcond[4]=((((-1.0)*x3411))+(((-1.0)*x3409))+((x3408*x3413))+(((-1.0)*x3408*x3412))+x3417+((x3407*x3410))+((sj3*x3415))+(((0.55)*x3407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst101;
CheckValue<IkReal> x3419 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3419.valid){
continue;
}
gconst101=((-1.0)*(x3419.value));
IkReal gconst102;
gconst102=IKsin(gconst101);
IkReal gconst103;
gconst103=IKcos(gconst101);
IkReal x3420=(((gconst102*px))+(((-1.0)*gconst103*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst101))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3420;
evalcond[3]=x3420;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst111;
gconst111=IKsign((((gconst102*py))+((gconst103*px))));
dummyeval[0]=(((gconst102*py))+((gconst103*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3421=(gconst102*py);
IkReal x3422=(gconst103*px);
IkReal x3423=((1.0)*sj3);
IkReal x3424=((6.66666666666667)*cj3);
dummyeval[0]=(x3422+x3421);
dummyeval[1]=((((-12.2222222222222)*x3421))+(((-12.2222222222222)*x3422))+(((-1.0)*x3422*x3424))+(((-1.0)*x3422*x3423))+(((-1.0)*x3421*x3424))+(((-1.0)*x3421*x3423)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3425=(gconst103*px);
IkReal x3426=((6.66666666666667)*sj3);
IkReal x3427=(gconst102*py);
IkReal x3428=((1.0)*x3425);
IkReal x3429=((1.0)*x3427);
IkReal x3430=(x3429+x3428);
dummyeval[0]=((((-1.0)*x3426*x3427))+(((-1.0)*x3425*x3426))+(((-1.0)*x3430))+((cj3*x3427))+((cj3*x3425)));
dummyeval[1]=((-1.0)*x3430);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3431=x3420;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3431;
evalcond[3]=x3431;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst102*py))+((gconst103*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3432=(gconst103*px);
IkReal x3433=(gconst102*py);
dummyeval[0]=(x3432+x3433);
dummyeval[1]=((((2.0)*x3432*x3433))+(x3433*x3433)+(x3432*x3432));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3434=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x3434)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3434)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3435=(gconst103*px);
IkReal x3436=(gconst102*py);
IkReal x3437=((20.0)*pp);
CheckValue<IkReal> x3438=IKPowWithIntegerCheck(((((20.0)*x3436))+(((20.0)*x3435))),-1);
if(!x3438.valid){
continue;
}
CheckValue<IkReal> x3439=IKPowWithIntegerCheck(((((1.8)*(x3435*x3435)))+(((1.8)*(x3436*x3436)))+(((3.6)*x3435*x3436))),-1);
if(!x3439.valid){
continue;
}
if( IKabs(((17.0)*(x3438.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3439.value)*((((x3435*x3437))+((x3436*x3437))+(((-14.45)*x3435))+(((-14.45)*x3436)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x3438.value)))+IKsqr(((x3439.value)*((((x3435*x3437))+((x3436*x3437))+(((-14.45)*x3435))+(((-14.45)*x3436))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x3438.value)), ((x3439.value)*((((x3435*x3437))+((x3436*x3437))+(((-14.45)*x3435))+(((-14.45)*x3436))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3440=IKsin(j1);
IkReal x3441=IKcos(j1);
IkReal x3442=(gconst103*px);
IkReal x3443=(gconst102*py);
IkReal x3444=((0.09)*x3441);
IkReal x3445=((1.0)*x3441);
IkReal x3446=((1.1)*x3440);
evalcond[0]=((-0.85)*x3441);
evalcond[1]=((-0.85)+((x3440*x3442))+((x3440*x3443)));
evalcond[2]=((((0.85)*x3440))+(((-1.0)*x3442))+(((-1.0)*x3443)));
evalcond[3]=((((-1.0)*x3443*x3445))+(((-1.0)*x3442*x3445)));
evalcond[4]=((-0.2125)+((x3442*x3446))+((x3442*x3444))+(((-1.0)*pp))+((x3443*x3444))+((x3443*x3446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3447=(gconst103*px);
IkReal x3448=(gconst102*py);
CheckValue<IkReal> x3449=IKPowWithIntegerCheck(((((1.53)*x3448))+(((1.53)*x3447))),-1);
if(!x3449.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x3448))+(((1.17647058823529)*x3447)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3449.value)*(((3.6125)+(((-22.0)*(x3448*x3448)))+(((17.0)*pp))+(((-44.0)*x3447*x3448))+(((-22.0)*(x3447*x3447))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x3448))+(((1.17647058823529)*x3447))))+IKsqr(((x3449.value)*(((3.6125)+(((-22.0)*(x3448*x3448)))+(((17.0)*pp))+(((-44.0)*x3447*x3448))+(((-22.0)*(x3447*x3447)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x3448))+(((1.17647058823529)*x3447))), ((x3449.value)*(((3.6125)+(((-22.0)*(x3448*x3448)))+(((17.0)*pp))+(((-44.0)*x3447*x3448))+(((-22.0)*(x3447*x3447)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3450=IKsin(j1);
IkReal x3451=IKcos(j1);
IkReal x3452=(gconst103*px);
IkReal x3453=(gconst102*py);
IkReal x3454=((0.09)*x3451);
IkReal x3455=((1.0)*x3451);
IkReal x3456=((1.1)*x3450);
evalcond[0]=((-0.85)*x3451);
evalcond[1]=((-0.85)+((x3450*x3452))+((x3450*x3453)));
evalcond[2]=((((0.85)*x3450))+(((-1.0)*x3452))+(((-1.0)*x3453)));
evalcond[3]=((((-1.0)*x3453*x3455))+(((-1.0)*x3452*x3455)));
evalcond[4]=((-0.2125)+((x3453*x3456))+((x3453*x3454))+(((-1.0)*pp))+((x3452*x3454))+((x3452*x3456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3457=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x3457))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x3457)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3459 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3459.valid){
continue;
}
IkReal x3458=x3459.value;
j1array[0]=((-1.0)*x3458);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3458)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3460=IKsin(j1);
IkReal x3461=IKcos(j1);
IkReal x3462=((0.045)*x3461);
evalcond[0]=((((-1.0)*cj3*x3462))+(((0.3)*sj3*x3461))+x3462+(((0.55)*x3460))+(((0.045)*sj3*x3460))+(((0.3)*cj3*x3460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3463=((-1.0)*gconst103*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3463;
evalcond[3]=x3463;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst102;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst102;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3464=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x3464)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3464)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3468=IKPowWithIntegerCheck(gconst102,-1);
if(!x3468.valid){
continue;
}
IkReal x3465=x3468.value;
CheckValue<IkReal> x3469=IKPowWithIntegerCheck(py,-1);
if(!x3469.valid){
continue;
}
IkReal x3466=x3469.value;
IkReal x3467=(x3465*x3466);
if( IKabs(((0.85)*x3467)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3467*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3467))+IKsqr(((0.0555555555555556)*x3467*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3467), ((0.0555555555555556)*x3467*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3470=IKcos(j1);
IkReal x3471=IKsin(j1);
IkReal x3472=(gconst102*py);
evalcond[0]=((-0.85)*x3470);
evalcond[1]=((-1.0)*x3470*x3472);
evalcond[2]=((-0.85)+((x3471*x3472)));
evalcond[3]=((((-1.0)*x3472))+(((0.85)*x3471)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x3471*x3472))+(((0.09)*x3470*x3472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3473=IKPowWithIntegerCheck(gconst102,-1);
if(!x3473.valid){
continue;
}
CheckValue<IkReal> x3474=IKPowWithIntegerCheck(py,-1);
if(!x3474.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst102*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3473.value)*(x3474.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst102*gconst102)*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst102*py))+IKsqr(((0.0065359477124183)*(x3473.value)*(x3474.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst102*gconst102)*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst102*py), ((0.0065359477124183)*(x3473.value)*(x3474.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst102*gconst102)*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3475=IKcos(j1);
IkReal x3476=IKsin(j1);
IkReal x3477=(gconst102*py);
evalcond[0]=((-0.85)*x3475);
evalcond[1]=((-1.0)*x3475*x3477);
evalcond[2]=((-0.85)+((x3476*x3477)));
evalcond[3]=((((-1.0)*x3477))+(((0.85)*x3476)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x3476*x3477))+(((0.09)*x3475*x3477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3478=(gconst102*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3478;
evalcond[3]=x3478;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst103;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst103;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3479=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x3479)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3479)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3483=IKPowWithIntegerCheck(gconst103,-1);
if(!x3483.valid){
continue;
}
IkReal x3480=x3483.value;
CheckValue<IkReal> x3484=IKPowWithIntegerCheck(px,-1);
if(!x3484.valid){
continue;
}
IkReal x3481=x3484.value;
IkReal x3482=(x3480*x3481);
if( IKabs(((0.85)*x3482)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3482*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3482))+IKsqr(((0.0555555555555556)*x3482*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3482), ((0.0555555555555556)*x3482*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3485=IKcos(j1);
IkReal x3486=IKsin(j1);
IkReal x3487=(gconst103*px);
evalcond[0]=((-0.85)*x3485);
evalcond[1]=((-1.0)*x3485*x3487);
evalcond[2]=((-0.85)+((x3486*x3487)));
evalcond[3]=((((-1.0)*x3487))+(((0.85)*x3486)));
evalcond[4]=((-0.2125)+(((1.1)*x3486*x3487))+(((-1.0)*pp))+(((0.09)*x3485*x3487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3488=IKPowWithIntegerCheck(gconst103,-1);
if(!x3488.valid){
continue;
}
CheckValue<IkReal> x3489=IKPowWithIntegerCheck(px,-1);
if(!x3489.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst103*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3488.value)*(x3489.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst103*gconst103)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst103*px))+IKsqr(((0.0065359477124183)*(x3488.value)*(x3489.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst103*gconst103)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst103*px), ((0.0065359477124183)*(x3488.value)*(x3489.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst103*gconst103)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3490=IKcos(j1);
IkReal x3491=IKsin(j1);
IkReal x3492=(gconst103*px);
evalcond[0]=((-0.85)*x3490);
evalcond[1]=((-1.0)*x3490*x3492);
evalcond[2]=((-0.85)+((x3491*x3492)));
evalcond[3]=((((0.85)*x3491))+(((-1.0)*x3492)));
evalcond[4]=((-0.2125)+(((0.09)*x3490*x3492))+(((1.1)*x3491*x3492))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3493=(gconst103*px);
IkReal x3494=(gconst102*py);
IkReal x3495=((0.045)*cj3);
IkReal x3496=((0.3)*sj3);
CheckValue<IkReal> x3497=IKPowWithIntegerCheck(((((-0.045)*x3493))+(((-0.045)*x3494))+(((-1.0)*x3494*x3496))+((x3494*x3495))+(((-1.0)*x3493*x3496))+((x3493*x3495))),-1);
if(!x3497.valid){
continue;
}
CheckValue<IkReal> x3498=IKPowWithIntegerCheck(((((-1.0)*x3494))+(((-1.0)*x3493))),-1);
if(!x3498.valid){
continue;
}
if( IKabs(((x3497.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3498.value)*(((-0.045)+(((-1.0)*x3496))+x3495)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3497.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x3498.value)*(((-0.045)+(((-1.0)*x3496))+x3495))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3497.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x3498.value)*(((-0.045)+(((-1.0)*x3496))+x3495))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3499=IKsin(j1);
IkReal x3500=IKcos(j1);
IkReal x3501=(gconst103*px);
IkReal x3502=((0.3)*cj3);
IkReal x3503=((0.045)*cj3);
IkReal x3504=(gconst102*py);
IkReal x3505=((0.045)*sj3);
IkReal x3506=((0.3)*sj3);
IkReal x3507=((0.045)*x3499);
IkReal x3508=((0.09)*x3500);
IkReal x3509=((1.1)*x3499);
IkReal x3510=((1.0)*x3500);
evalcond[0]=((-0.55)+(((-1.0)*x3502))+(((-1.0)*x3505))+((x3499*x3504))+((x3499*x3501)));
evalcond[1]=((0.045)+x3506+(((-1.0)*x3503))+(((-1.0)*x3504*x3510))+(((-1.0)*x3501*x3510)));
evalcond[2]=((-0.2125)+((x3501*x3509))+((x3501*x3508))+(((-1.0)*pp))+((x3504*x3509))+((x3504*x3508)));
evalcond[3]=(x3507+(((-0.55)*x3500))+((x3499*x3506))+(((-1.0)*x3499*x3503))+(((-1.0)*x3500*x3502))+(((-1.0)*x3500*x3505)));
evalcond[4]=(((x3500*x3506))+(((0.55)*x3499))+((x3499*x3505))+((x3499*x3502))+(((0.045)*x3500))+(((-1.0)*x3504))+(((-1.0)*x3501))+(((-1.0)*x3500*x3503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3511=(gconst103*px);
IkReal x3512=((0.045)*sj3);
IkReal x3513=((0.3)*cj3);
IkReal x3514=(gconst102*py);
CheckValue<IkReal> x3515=IKPowWithIntegerCheck((x3511+x3514),-1);
if(!x3515.valid){
continue;
}
CheckValue<IkReal> x3516=IKPowWithIntegerCheck(((((-1.0)*x3512*x3514))+(((-1.0)*x3511*x3513))+(((-1.0)*x3511*x3512))+(((-1.0)*x3513*x3514))+(((-0.55)*x3514))+(((-0.55)*x3511))),-1);
if(!x3516.valid){
continue;
}
if( IKabs(((x3515.value)*(((0.55)+x3513+x3512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3516.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3515.value)*(((0.55)+x3513+x3512))))+IKsqr(((x3516.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3515.value)*(((0.55)+x3513+x3512))), ((x3516.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3517=IKsin(j1);
IkReal x3518=IKcos(j1);
IkReal x3519=(gconst103*px);
IkReal x3520=((0.3)*cj3);
IkReal x3521=((0.045)*cj3);
IkReal x3522=(gconst102*py);
IkReal x3523=((0.045)*sj3);
IkReal x3524=((0.3)*sj3);
IkReal x3525=((0.045)*x3517);
IkReal x3526=((0.09)*x3518);
IkReal x3527=((1.1)*x3517);
IkReal x3528=((1.0)*x3518);
evalcond[0]=((-0.55)+((x3517*x3522))+(((-1.0)*x3520))+(((-1.0)*x3523))+((x3517*x3519)));
evalcond[1]=((0.045)+(((-1.0)*x3522*x3528))+(((-1.0)*x3519*x3528))+(((-1.0)*x3521))+x3524);
evalcond[2]=((-0.2125)+((x3522*x3527))+((x3522*x3526))+(((-1.0)*pp))+((x3519*x3527))+((x3519*x3526)));
evalcond[3]=(((x3517*x3524))+x3525+(((-1.0)*x3517*x3521))+(((-0.55)*x3518))+(((-1.0)*x3518*x3523))+(((-1.0)*x3518*x3520)));
evalcond[4]=((((-1.0)*x3522))+((x3517*x3523))+((x3517*x3520))+(((0.55)*x3517))+(((0.045)*x3518))+((x3518*x3524))+(((-1.0)*x3519))+(((-1.0)*x3518*x3521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3529 = IKatan2WithCheck((gconst111*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst111*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3529.valid){
continue;
}
j1array[0]=x3529.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3530=IKsin(j1);
IkReal x3531=IKcos(j1);
IkReal x3532=(gconst103*px);
IkReal x3533=((0.3)*cj3);
IkReal x3534=((0.045)*cj3);
IkReal x3535=(gconst102*py);
IkReal x3536=((0.045)*sj3);
IkReal x3537=((0.3)*sj3);
IkReal x3538=((0.045)*x3530);
IkReal x3539=((0.09)*x3531);
IkReal x3540=((1.1)*x3530);
IkReal x3541=((1.0)*x3531);
evalcond[0]=((-0.55)+(((-1.0)*x3533))+(((-1.0)*x3536))+((x3530*x3535))+((x3530*x3532)));
evalcond[1]=((0.045)+x3537+(((-1.0)*x3535*x3541))+(((-1.0)*x3534))+(((-1.0)*x3532*x3541)));
evalcond[2]=((-0.2125)+((x3535*x3539))+((x3532*x3540))+(((-1.0)*pp))+((x3532*x3539))+((x3535*x3540)));
evalcond[3]=((((-0.55)*x3531))+x3538+(((-1.0)*x3531*x3533))+(((-1.0)*x3531*x3536))+(((-1.0)*x3530*x3534))+((x3530*x3537)));
evalcond[4]=(((x3531*x3537))+(((0.045)*x3531))+(((-1.0)*x3531*x3534))+(((-1.0)*x3535))+(((-1.0)*x3532))+((x3530*x3536))+((x3530*x3533))+(((0.55)*x3530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst104;
CheckValue<IkReal> x3542 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
gconst104=((3.14159265358979)+(((-1.0)*(x3542.value))));
IkReal gconst105;
gconst105=IKsin(gconst104);
IkReal gconst106;
gconst106=IKcos(gconst104);
IkReal x3543=((((-1.0)*gconst106*py))+((gconst105*px)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst104))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3543;
evalcond[3]=x3543;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst112;
gconst112=IKsign((((gconst105*py))+((gconst106*px))));
dummyeval[0]=(((gconst105*py))+((gconst106*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3544=(gconst105*py);
IkReal x3545=((1.0)*sj3);
IkReal x3546=(gconst106*px);
IkReal x3547=((6.66666666666667)*cj3);
dummyeval[0]=(x3544+x3546);
dummyeval[1]=((((-1.0)*x3545*x3546))+(((-1.0)*x3546*x3547))+(((-12.2222222222222)*x3546))+(((-12.2222222222222)*x3544))+(((-1.0)*x3544*x3547))+(((-1.0)*x3544*x3545)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3548=(gconst106*px);
IkReal x3549=(gconst105*py);
IkReal x3550=((6.66666666666667)*sj3);
IkReal x3551=((1.0)*x3548);
IkReal x3552=((1.0)*x3549);
IkReal x3553=(x3552+x3551);
dummyeval[0]=((((-1.0)*x3548*x3550))+(((-1.0)*x3553))+(((-1.0)*x3549*x3550))+((cj3*x3548))+((cj3*x3549)));
dummyeval[1]=((-1.0)*x3553);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3554=x3543;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3554;
evalcond[3]=x3554;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst105*py))+((gconst106*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3555=(gconst105*py);
IkReal x3556=(gconst106*px);
dummyeval[0]=(x3556+x3555);
dummyeval[1]=((((2.0)*x3555*x3556))+(x3555*x3555)+(x3556*x3556));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3557=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x3557)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3557)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3558=(gconst106*px);
IkReal x3559=(gconst105*py);
IkReal x3560=((20.0)*pp);
CheckValue<IkReal> x3561=IKPowWithIntegerCheck(((((20.0)*x3558))+(((20.0)*x3559))),-1);
if(!x3561.valid){
continue;
}
CheckValue<IkReal> x3562=IKPowWithIntegerCheck(((((1.8)*(x3558*x3558)))+(((3.6)*x3558*x3559))+(((1.8)*(x3559*x3559)))),-1);
if(!x3562.valid){
continue;
}
if( IKabs(((17.0)*(x3561.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3562.value)*((((x3559*x3560))+(((-14.45)*x3558))+(((-14.45)*x3559))+((x3558*x3560)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x3561.value)))+IKsqr(((x3562.value)*((((x3559*x3560))+(((-14.45)*x3558))+(((-14.45)*x3559))+((x3558*x3560))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x3561.value)), ((x3562.value)*((((x3559*x3560))+(((-14.45)*x3558))+(((-14.45)*x3559))+((x3558*x3560))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3563=IKsin(j1);
IkReal x3564=IKcos(j1);
IkReal x3565=(gconst105*py);
IkReal x3566=(gconst106*px);
IkReal x3567=((1.1)*x3563);
IkReal x3568=((0.09)*x3564);
IkReal x3569=((1.0)*x3564);
evalcond[0]=((-0.85)*x3564);
evalcond[1]=((-0.85)+((x3563*x3566))+((x3563*x3565)));
evalcond[2]=((((0.85)*x3563))+(((-1.0)*x3565))+(((-1.0)*x3566)));
evalcond[3]=((((-1.0)*x3565*x3569))+(((-1.0)*x3566*x3569)));
evalcond[4]=((-0.2125)+((x3565*x3567))+((x3565*x3568))+((x3566*x3568))+((x3566*x3567))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3570=(gconst106*px);
IkReal x3571=(gconst105*py);
CheckValue<IkReal> x3572=IKPowWithIntegerCheck(((((1.53)*x3570))+(((1.53)*x3571))),-1);
if(!x3572.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x3570))+(((1.17647058823529)*x3571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3572.value)*(((3.6125)+(((-22.0)*(x3570*x3570)))+(((17.0)*pp))+(((-22.0)*(x3571*x3571)))+(((-44.0)*x3570*x3571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x3570))+(((1.17647058823529)*x3571))))+IKsqr(((x3572.value)*(((3.6125)+(((-22.0)*(x3570*x3570)))+(((17.0)*pp))+(((-22.0)*(x3571*x3571)))+(((-44.0)*x3570*x3571))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x3570))+(((1.17647058823529)*x3571))), ((x3572.value)*(((3.6125)+(((-22.0)*(x3570*x3570)))+(((17.0)*pp))+(((-22.0)*(x3571*x3571)))+(((-44.0)*x3570*x3571))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3573=IKsin(j1);
IkReal x3574=IKcos(j1);
IkReal x3575=(gconst105*py);
IkReal x3576=(gconst106*px);
IkReal x3577=((1.1)*x3573);
IkReal x3578=((0.09)*x3574);
IkReal x3579=((1.0)*x3574);
evalcond[0]=((-0.85)*x3574);
evalcond[1]=((-0.85)+((x3573*x3575))+((x3573*x3576)));
evalcond[2]=((((-1.0)*x3576))+(((-1.0)*x3575))+(((0.85)*x3573)));
evalcond[3]=((((-1.0)*x3575*x3579))+(((-1.0)*x3576*x3579)));
evalcond[4]=((-0.2125)+((x3575*x3577))+((x3575*x3578))+(((-1.0)*pp))+((x3576*x3577))+((x3576*x3578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3580=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x3580))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x3580)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3582 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3582.valid){
continue;
}
IkReal x3581=x3582.value;
j1array[0]=((-1.0)*x3581);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3581)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3583=IKsin(j1);
IkReal x3584=IKcos(j1);
IkReal x3585=((0.045)*x3584);
evalcond[0]=((((0.3)*sj3*x3584))+(((-1.0)*cj3*x3585))+(((0.3)*cj3*x3583))+x3585+(((0.55)*x3583))+(((0.045)*sj3*x3583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3586=((-1.0)*gconst106*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3586;
evalcond[3]=x3586;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst105;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst105;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3587=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x3587)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3587)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3591=IKPowWithIntegerCheck(gconst105,-1);
if(!x3591.valid){
continue;
}
IkReal x3588=x3591.value;
CheckValue<IkReal> x3592=IKPowWithIntegerCheck(py,-1);
if(!x3592.valid){
continue;
}
IkReal x3589=x3592.value;
IkReal x3590=(x3588*x3589);
if( IKabs(((0.85)*x3590)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3590*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3590))+IKsqr(((0.0555555555555556)*x3590*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3590), ((0.0555555555555556)*x3590*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3593=IKcos(j1);
IkReal x3594=IKsin(j1);
IkReal x3595=(gconst105*py);
evalcond[0]=((-0.85)*x3593);
evalcond[1]=((-1.0)*x3593*x3595);
evalcond[2]=((-0.85)+((x3594*x3595)));
evalcond[3]=((((0.85)*x3594))+(((-1.0)*x3595)));
evalcond[4]=((-0.2125)+(((1.1)*x3594*x3595))+(((-1.0)*pp))+(((0.09)*x3593*x3595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3596=IKPowWithIntegerCheck(gconst105,-1);
if(!x3596.valid){
continue;
}
CheckValue<IkReal> x3597=IKPowWithIntegerCheck(py,-1);
if(!x3597.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst105*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3596.value)*(x3597.value)*(((361.25)+(((-2200.0)*(gconst105*gconst105)*(py*py)))+(((1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst105*py))+IKsqr(((0.0065359477124183)*(x3596.value)*(x3597.value)*(((361.25)+(((-2200.0)*(gconst105*gconst105)*(py*py)))+(((1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst105*py), ((0.0065359477124183)*(x3596.value)*(x3597.value)*(((361.25)+(((-2200.0)*(gconst105*gconst105)*(py*py)))+(((1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3598=IKcos(j1);
IkReal x3599=IKsin(j1);
IkReal x3600=(gconst105*py);
evalcond[0]=((-0.85)*x3598);
evalcond[1]=((-1.0)*x3598*x3600);
evalcond[2]=((-0.85)+((x3599*x3600)));
evalcond[3]=((((0.85)*x3599))+(((-1.0)*x3600)));
evalcond[4]=((-0.2125)+(((0.09)*x3598*x3600))+(((1.1)*x3599*x3600))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3601=(gconst105*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3601;
evalcond[3]=x3601;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst106;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst106;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3602=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x3602)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3602)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3606=IKPowWithIntegerCheck(gconst106,-1);
if(!x3606.valid){
continue;
}
IkReal x3603=x3606.value;
CheckValue<IkReal> x3607=IKPowWithIntegerCheck(px,-1);
if(!x3607.valid){
continue;
}
IkReal x3604=x3607.value;
IkReal x3605=(x3603*x3604);
if( IKabs(((0.85)*x3605)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3605*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3605))+IKsqr(((0.0555555555555556)*x3605*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3605), ((0.0555555555555556)*x3605*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3608=IKcos(j1);
IkReal x3609=IKsin(j1);
IkReal x3610=(gconst106*px);
evalcond[0]=((-0.85)*x3608);
evalcond[1]=((-1.0)*x3608*x3610);
evalcond[2]=((-0.85)+((x3609*x3610)));
evalcond[3]=((((-1.0)*x3610))+(((0.85)*x3609)));
evalcond[4]=((-0.2125)+(((1.1)*x3609*x3610))+(((-1.0)*pp))+(((0.09)*x3608*x3610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(gconst106,-1);
if(!x3611.valid){
continue;
}
CheckValue<IkReal> x3612=IKPowWithIntegerCheck(px,-1);
if(!x3612.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst106*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3611.value)*(x3612.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst106*gconst106)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst106*px))+IKsqr(((0.0065359477124183)*(x3611.value)*(x3612.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst106*gconst106)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst106*px), ((0.0065359477124183)*(x3611.value)*(x3612.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst106*gconst106)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3613=IKcos(j1);
IkReal x3614=IKsin(j1);
IkReal x3615=(gconst106*px);
evalcond[0]=((-0.85)*x3613);
evalcond[1]=((-1.0)*x3613*x3615);
evalcond[2]=((-0.85)+((x3614*x3615)));
evalcond[3]=((((-1.0)*x3615))+(((0.85)*x3614)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x3614*x3615))+(((0.09)*x3613*x3615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3616=((0.045)*cj3);
IkReal x3617=(gconst106*px);
IkReal x3618=((0.3)*sj3);
IkReal x3619=(gconst105*py);
CheckValue<IkReal> x3620=IKPowWithIntegerCheck(((((-1.0)*x3617*x3618))+(((-1.0)*x3618*x3619))+((x3616*x3619))+((x3616*x3617))+(((-0.045)*x3617))+(((-0.045)*x3619))),-1);
if(!x3620.valid){
continue;
}
CheckValue<IkReal> x3621=IKPowWithIntegerCheck(((((-1.0)*x3619))+(((-1.0)*x3617))),-1);
if(!x3621.valid){
continue;
}
if( IKabs(((x3620.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3621.value)*(((-0.045)+x3616+(((-1.0)*x3618)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3620.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x3621.value)*(((-0.045)+x3616+(((-1.0)*x3618))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3620.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x3621.value)*(((-0.045)+x3616+(((-1.0)*x3618))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3622=IKsin(j1);
IkReal x3623=IKcos(j1);
IkReal x3624=((0.3)*cj3);
IkReal x3625=((0.045)*cj3);
IkReal x3626=(gconst106*px);
IkReal x3627=(gconst105*py);
IkReal x3628=((0.045)*sj3);
IkReal x3629=((0.3)*sj3);
IkReal x3630=((0.045)*x3622);
IkReal x3631=((0.09)*x3623);
IkReal x3632=((1.1)*x3622);
IkReal x3633=((1.0)*x3623);
evalcond[0]=((-0.55)+(((-1.0)*x3628))+(((-1.0)*x3624))+((x3622*x3626))+((x3622*x3627)));
evalcond[1]=((0.045)+(((-1.0)*x3627*x3633))+(((-1.0)*x3625))+x3629+(((-1.0)*x3626*x3633)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x3626*x3631))+((x3626*x3632))+((x3627*x3632))+((x3627*x3631)));
evalcond[3]=((((-1.0)*x3622*x3625))+(((-1.0)*x3623*x3628))+(((-1.0)*x3623*x3624))+x3630+((x3622*x3629))+(((-0.55)*x3623)));
evalcond[4]=((((0.55)*x3622))+(((0.045)*x3623))+(((-1.0)*x3623*x3625))+((x3622*x3624))+((x3622*x3628))+((x3623*x3629))+(((-1.0)*x3627))+(((-1.0)*x3626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3634=(gconst106*px);
IkReal x3635=(gconst105*py);
IkReal x3636=((0.3)*cj3);
IkReal x3637=((0.045)*sj3);
CheckValue<IkReal> x3638=IKPowWithIntegerCheck((x3634+x3635),-1);
if(!x3638.valid){
continue;
}
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(((((-1.0)*x3634*x3636))+(((-1.0)*x3634*x3637))+(((-0.55)*x3634))+(((-0.55)*x3635))+(((-1.0)*x3635*x3636))+(((-1.0)*x3635*x3637))),-1);
if(!x3639.valid){
continue;
}
if( IKabs(((x3638.value)*(((0.55)+x3636+x3637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3639.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3638.value)*(((0.55)+x3636+x3637))))+IKsqr(((x3639.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3638.value)*(((0.55)+x3636+x3637))), ((x3639.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3640=IKsin(j1);
IkReal x3641=IKcos(j1);
IkReal x3642=((0.3)*cj3);
IkReal x3643=((0.045)*cj3);
IkReal x3644=(gconst106*px);
IkReal x3645=(gconst105*py);
IkReal x3646=((0.045)*sj3);
IkReal x3647=((0.3)*sj3);
IkReal x3648=((0.045)*x3640);
IkReal x3649=((0.09)*x3641);
IkReal x3650=((1.1)*x3640);
IkReal x3651=((1.0)*x3641);
evalcond[0]=((-0.55)+((x3640*x3645))+((x3640*x3644))+(((-1.0)*x3646))+(((-1.0)*x3642)));
evalcond[1]=((0.045)+(((-1.0)*x3645*x3651))+(((-1.0)*x3644*x3651))+x3647+(((-1.0)*x3643)));
evalcond[2]=((-0.2125)+((x3645*x3650))+((x3644*x3650))+(((-1.0)*pp))+((x3645*x3649))+((x3644*x3649)));
evalcond[3]=((((-1.0)*x3640*x3643))+(((-0.55)*x3641))+x3648+((x3640*x3647))+(((-1.0)*x3641*x3642))+(((-1.0)*x3641*x3646)));
evalcond[4]=(((x3641*x3647))+(((0.55)*x3640))+(((0.045)*x3641))+(((-1.0)*x3645))+(((-1.0)*x3644))+((x3640*x3646))+((x3640*x3642))+(((-1.0)*x3641*x3643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3652 = IKatan2WithCheck((gconst112*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst112*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3652.valid){
continue;
}
j1array[0]=x3652.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3653=IKsin(j1);
IkReal x3654=IKcos(j1);
IkReal x3655=((0.3)*cj3);
IkReal x3656=((0.045)*cj3);
IkReal x3657=(gconst106*px);
IkReal x3658=(gconst105*py);
IkReal x3659=((0.045)*sj3);
IkReal x3660=((0.3)*sj3);
IkReal x3661=((0.045)*x3653);
IkReal x3662=((0.09)*x3654);
IkReal x3663=((1.1)*x3653);
IkReal x3664=((1.0)*x3654);
evalcond[0]=((-0.55)+((x3653*x3658))+((x3653*x3657))+(((-1.0)*x3655))+(((-1.0)*x3659)));
evalcond[1]=((0.045)+x3660+(((-1.0)*x3658*x3664))+(((-1.0)*x3657*x3664))+(((-1.0)*x3656)));
evalcond[2]=((-0.2125)+((x3658*x3662))+((x3658*x3663))+((x3657*x3663))+((x3657*x3662))+(((-1.0)*pp)));
evalcond[3]=((((-0.55)*x3654))+(((-1.0)*x3653*x3656))+((x3653*x3660))+x3661+(((-1.0)*x3654*x3655))+(((-1.0)*x3654*x3659)));
evalcond[4]=(((x3653*x3659))+((x3653*x3655))+(((0.045)*x3654))+(((-1.0)*x3657))+(((-1.0)*x3658))+(((-1.0)*x3654*x3656))+((x3654*x3660))+(((0.55)*x3653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3665=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x3665))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x3665)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3667 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3667.valid){
continue;
}
IkReal x3666=x3667.value;
j1array[0]=((-1.0)*x3666);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3666)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3668=IKsin(j1);
IkReal x3669=IKcos(j1);
IkReal x3670=((0.045)*x3669);
evalcond[0]=((((-1.0)*cj3*x3670))+(((0.55)*x3668))+x3670+(((0.3)*cj3*x3668))+(((0.045)*sj3*x3668))+(((0.3)*sj3*x3669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3671=((-1.0)*cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3671;
evalcond[3]=x3671;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3672=((1.0)*pp);
IkReal x3673=((-1.0)*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x3672)));
evalcond[2]=-0.85;
evalcond[3]=x3673;
evalcond[4]=x3673;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x3672)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3674=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x3674)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x3674)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3675=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x3675)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3675)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3676=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)))))+(IKabs(IKabs(py))));
evalcond[1]=((0.7225)+(((-1.0)*x3676)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3676)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3677=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(py))));
evalcond[1]=((0.7225)+(((-1.0)*x3677)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3677)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3681=IKPowWithIntegerCheck(py,-1);
if(!x3681.valid){
continue;
}
IkReal x3678=x3681.value;
CheckValue<IkReal> x3682=IKPowWithIntegerCheck(sj0,-1);
if(!x3682.valid){
continue;
}
IkReal x3679=x3682.value;
IkReal x3680=(x3678*x3679);
if( IKabs(((0.85)*x3680)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3680*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3680))+IKsqr(((0.0555555555555556)*x3680*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3680), ((0.0555555555555556)*x3680*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3683=IKcos(j1);
IkReal x3684=IKsin(j1);
IkReal x3685=(py*sj0*x3684);
IkReal x3686=(py*sj0*x3683);
evalcond[0]=((-0.85)*x3683);
evalcond[1]=((-1.0)*x3686);
evalcond[2]=((-0.85)+x3685);
evalcond[3]=((((0.85)*x3684))+(((-1.0)*py*sj0)));
evalcond[4]=((-0.2125)+(((0.09)*x3686))+(((-1.0)*pp))+(((1.1)*x3685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3687=IKPowWithIntegerCheck(py,-1);
if(!x3687.valid){
continue;
}
CheckValue<IkReal> x3688=IKPowWithIntegerCheck(sj0,-1);
if(!x3688.valid){
continue;
}
if( IKabs(((1.17647058823529)*py*sj0)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3687.value)*(x3688.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(py*py)*(sj0*sj0))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*py*sj0))+IKsqr(((0.0065359477124183)*(x3687.value)*(x3688.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(py*py)*(sj0*sj0)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*py*sj0), ((0.0065359477124183)*(x3687.value)*(x3688.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(py*py)*(sj0*sj0)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3689=IKcos(j1);
IkReal x3690=IKsin(j1);
IkReal x3691=(py*sj0*x3690);
IkReal x3692=(py*sj0*x3689);
evalcond[0]=((-0.85)*x3689);
evalcond[1]=((-1.0)*x3692);
evalcond[2]=((-0.85)+x3691);
evalcond[3]=((((0.85)*x3690))+(((-1.0)*py*sj0)));
evalcond[4]=((-0.2125)+(((1.1)*x3691))+(((0.09)*x3692))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3693=((1.0)*pp);
IkReal x3694=((-1.0)*py);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x3693))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x3694;
evalcond[4]=x3694;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x3693)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3696 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3696.valid){
continue;
}
IkReal x3695=x3696.value;
j1array[0]=((-1.0)*x3695);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3695)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3697=IKsin(j1);
IkReal x3698=IKcos(j1);
IkReal x3699=((0.045)*x3698);
evalcond[0]=((((0.55)*x3697))+(((0.045)*sj3*x3697))+x3699+(((0.3)*sj3*x3698))+(((-1.0)*cj3*x3699))+(((0.3)*cj3*x3697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3700=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((-1.0)*x3700))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x3700)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3702 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3702.valid){
continue;
}
IkReal x3701=x3702.value;
j1array[0]=((-1.0)*x3701);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3701)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3703=IKsin(j1);
IkReal x3704=IKcos(j1);
IkReal x3705=((0.045)*x3704);
evalcond[0]=((((-1.0)*cj3*x3705))+x3705+(((0.3)*cj3*x3703))+(((0.045)*sj3*x3703))+(((0.55)*x3703))+(((0.3)*sj3*x3704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3706=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3706;
evalcond[3]=x3706;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3707=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x3707)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x3707)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3708=((1.0)*pp);
IkReal x3709=((-1.0)*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x3708)));
evalcond[2]=-0.85;
evalcond[3]=x3709;
evalcond[4]=x3709;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x3708)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3710=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x3710)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3710)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3711=((1.0)*pp);
evalcond[0]=((IKabs(IKabs(px)))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x3711)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3711)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3712=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(px))));
evalcond[1]=((0.7225)+(((-1.0)*x3712)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3712)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3716=IKPowWithIntegerCheck(cj0,-1);
if(!x3716.valid){
continue;
}
IkReal x3713=x3716.value;
CheckValue<IkReal> x3717=IKPowWithIntegerCheck(px,-1);
if(!x3717.valid){
continue;
}
IkReal x3714=x3717.value;
IkReal x3715=(x3713*x3714);
if( IKabs(((0.85)*x3715)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3715*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3715))+IKsqr(((0.0555555555555556)*x3715*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3715), ((0.0555555555555556)*x3715*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3718=IKcos(j1);
IkReal x3719=IKsin(j1);
IkReal x3720=(cj0*px);
IkReal x3721=(x3718*x3720);
evalcond[0]=((-0.85)*x3718);
evalcond[1]=((-1.0)*x3721);
evalcond[2]=((-0.85)+((x3719*x3720)));
evalcond[3]=((((0.85)*x3719))+(((-1.0)*x3720)));
evalcond[4]=((-0.2125)+(((1.1)*x3719*x3720))+(((-1.0)*pp))+(((0.09)*x3721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3722=IKPowWithIntegerCheck(cj0,-1);
if(!x3722.valid){
continue;
}
CheckValue<IkReal> x3723=IKPowWithIntegerCheck(px,-1);
if(!x3723.valid){
continue;
}
if( IKabs(((1.17647058823529)*cj0*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3722.value)*(x3723.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(cj0*cj0)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*cj0*px))+IKsqr(((0.0065359477124183)*(x3722.value)*(x3723.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(cj0*cj0)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*cj0*px), ((0.0065359477124183)*(x3722.value)*(x3723.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(cj0*cj0)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3724=IKcos(j1);
IkReal x3725=IKsin(j1);
IkReal x3726=(cj0*px);
IkReal x3727=(x3724*x3726);
evalcond[0]=((-0.85)*x3724);
evalcond[1]=((-1.0)*x3727);
evalcond[2]=((-0.85)+((x3725*x3726)));
evalcond[3]=((((-1.0)*x3726))+(((0.85)*x3725)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x3725*x3726))+(((0.09)*x3727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3728=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((-1.0)*x3728))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x3728)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3730 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3730.valid){
continue;
}
IkReal x3729=x3730.value;
j1array[0]=((-1.0)*x3729);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3729)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3731=IKsin(j1);
IkReal x3732=IKcos(j1);
IkReal x3733=((0.045)*x3732);
evalcond[0]=((((-1.0)*cj3*x3733))+x3733+(((0.3)*sj3*x3732))+(((0.55)*x3731))+(((0.045)*sj3*x3731))+(((0.3)*cj3*x3731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3734=((1.0)*pp);
IkReal x3735=((-1.0)*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((-1.0)*x3734))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x3735;
evalcond[4]=x3735;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x3734)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3737 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3737.valid){
continue;
}
IkReal x3736=x3737.value;
j1array[0]=((-1.0)*x3736);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3736)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3738=IKsin(j1);
IkReal x3739=IKcos(j1);
IkReal x3740=((0.045)*x3739);
evalcond[0]=((((-1.0)*cj3*x3740))+x3740+(((0.3)*sj3*x3739))+(((0.55)*x3738))+(((0.045)*sj3*x3738))+(((0.3)*cj3*x3738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3741=((0.3)*sj3);
IkReal x3742=(py*sj0);
IkReal x3743=((0.045)*cj3);
IkReal x3744=(cj0*px);
CheckValue<IkReal> x3745=IKPowWithIntegerCheck((((x3742*x3743))+((x3743*x3744))+(((-1.0)*x3741*x3744))+(((-1.0)*x3741*x3742))+(((-0.045)*x3742))+(((-0.045)*x3744))),-1);
if(!x3745.valid){
continue;
}
CheckValue<IkReal> x3746=IKPowWithIntegerCheck(((((-1.0)*x3742))+(((-1.0)*x3744))),-1);
if(!x3746.valid){
continue;
}
if( IKabs(((x3745.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3746.value)*(((-0.045)+(((-1.0)*x3741))+x3743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3745.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x3746.value)*(((-0.045)+(((-1.0)*x3741))+x3743))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3745.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x3746.value)*(((-0.045)+(((-1.0)*x3741))+x3743))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3747=IKsin(j1);
IkReal x3748=IKcos(j1);
IkReal x3749=((0.3)*cj3);
IkReal x3750=((0.045)*cj3);
IkReal x3751=(cj0*px);
IkReal x3752=(py*sj0);
IkReal x3753=((0.045)*sj3);
IkReal x3754=((0.3)*sj3);
IkReal x3755=((0.045)*x3747);
IkReal x3756=((1.0)*x3748);
IkReal x3757=((0.09)*x3748);
IkReal x3758=((1.1)*x3747);
evalcond[0]=((-0.55)+(((-1.0)*x3749))+(((-1.0)*x3753))+((x3747*x3751))+((x3747*x3752)));
evalcond[1]=((0.045)+(((-1.0)*x3752*x3756))+(((-1.0)*x3750))+x3754+(((-1.0)*x3751*x3756)));
evalcond[2]=((-0.2125)+((x3751*x3757))+((x3751*x3758))+((x3752*x3757))+((x3752*x3758))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x3748*x3749))+(((-1.0)*x3748*x3753))+(((-1.0)*x3747*x3750))+x3755+(((-0.55)*x3748))+((x3747*x3754)));
evalcond[4]=((((-1.0)*x3748*x3750))+((x3748*x3754))+(((-1.0)*x3752))+(((-1.0)*x3751))+(((0.55)*x3747))+(((0.045)*x3748))+((x3747*x3749))+((x3747*x3753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3759=(cj0*px);
IkReal x3760=((0.045)*sj3);
IkReal x3761=(py*sj0);
IkReal x3762=((0.3)*cj3);
CheckValue<IkReal> x3763=IKPowWithIntegerCheck((x3761+x3759),-1);
if(!x3763.valid){
continue;
}
CheckValue<IkReal> x3764=IKPowWithIntegerCheck(((((-1.0)*x3761*x3762))+(((-1.0)*x3759*x3762))+(((-1.0)*x3759*x3760))+(((-0.55)*x3761))+(((-1.0)*x3760*x3761))+(((-0.55)*x3759))),-1);
if(!x3764.valid){
continue;
}
if( IKabs(((x3763.value)*(((0.55)+x3760+x3762)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3764.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3763.value)*(((0.55)+x3760+x3762))))+IKsqr(((x3764.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3763.value)*(((0.55)+x3760+x3762))), ((x3764.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3765=IKsin(j1);
IkReal x3766=IKcos(j1);
IkReal x3767=((0.3)*cj3);
IkReal x3768=((0.045)*cj3);
IkReal x3769=(cj0*px);
IkReal x3770=(py*sj0);
IkReal x3771=((0.045)*sj3);
IkReal x3772=((0.3)*sj3);
IkReal x3773=((0.045)*x3765);
IkReal x3774=((1.0)*x3766);
IkReal x3775=((0.09)*x3766);
IkReal x3776=((1.1)*x3765);
evalcond[0]=((-0.55)+(((-1.0)*x3771))+((x3765*x3770))+(((-1.0)*x3767))+((x3765*x3769)));
evalcond[1]=((0.045)+x3772+(((-1.0)*x3770*x3774))+(((-1.0)*x3769*x3774))+(((-1.0)*x3768)));
evalcond[2]=((-0.2125)+((x3769*x3775))+((x3769*x3776))+(((-1.0)*pp))+((x3770*x3775))+((x3770*x3776)));
evalcond[3]=((((-1.0)*x3765*x3768))+x3773+(((-0.55)*x3766))+(((-1.0)*x3766*x3767))+((x3765*x3772))+(((-1.0)*x3766*x3771)));
evalcond[4]=((((-1.0)*x3769))+(((-1.0)*x3770))+(((0.55)*x3765))+((x3766*x3772))+(((-1.0)*x3766*x3768))+((x3765*x3771))+((x3765*x3767))+(((0.045)*x3766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3777 = IKatan2WithCheck((gconst88*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst88*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3777.valid){
continue;
}
j1array[0]=x3777.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3778=IKsin(j1);
IkReal x3779=IKcos(j1);
IkReal x3780=((0.3)*cj3);
IkReal x3781=((0.045)*cj3);
IkReal x3782=(cj0*px);
IkReal x3783=(py*sj0);
IkReal x3784=((0.045)*sj3);
IkReal x3785=((0.3)*sj3);
IkReal x3786=((0.045)*x3778);
IkReal x3787=((1.0)*x3779);
IkReal x3788=((0.09)*x3779);
IkReal x3789=((1.1)*x3778);
evalcond[0]=((-0.55)+(((-1.0)*x3784))+(((-1.0)*x3780))+((x3778*x3783))+((x3778*x3782)));
evalcond[1]=((0.045)+(((-1.0)*x3782*x3787))+(((-1.0)*x3781))+x3785+(((-1.0)*x3783*x3787)));
evalcond[2]=((-0.2125)+((x3782*x3789))+((x3782*x3788))+(((-1.0)*pp))+((x3783*x3789))+((x3783*x3788)));
evalcond[3]=((((-1.0)*x3778*x3781))+(((-1.0)*x3779*x3784))+(((-1.0)*x3779*x3780))+((x3778*x3785))+x3786+(((-0.55)*x3779)));
evalcond[4]=((((0.045)*x3779))+(((-1.0)*x3779*x3781))+(((-1.0)*x3783))+(((-1.0)*x3782))+((x3778*x3780))+((x3778*x3784))+((x3779*x3785))+(((0.55)*x3778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3790=(px*sj0);
IkReal x3791=(cj0*py);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x3791))+x3790);
evalcond[3]=((((-1.0)*x3790))+x3791);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst113;
gconst113=IKsign((((cj0*px))+((py*sj0))));
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3792=(cj0*px);
IkReal x3793=(py*sj0);
IkReal x3794=((6.66666666666667)*cj3);
IkReal x3795=((1.0)*sj3);
dummyeval[0]=(x3793+x3792);
dummyeval[1]=((((-12.2222222222222)*x3792))+(((-12.2222222222222)*x3793))+(((-1.0)*x3793*x3795))+(((-1.0)*x3793*x3794))+(((-1.0)*x3792*x3795))+(((-1.0)*x3792*x3794)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3796=(cj0*px);
IkReal x3797=(py*sj0);
IkReal x3798=((6.66666666666667)*sj3);
dummyeval[0]=((((-1.0)*x3797*x3798))+(((-1.0)*x3796*x3798))+(((-1.0)*x3797))+(((-1.0)*x3796))+((cj3*x3797))+((cj3*x3796)));
dummyeval[1]=(x3797+x3796);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3799=(px*sj0);
IkReal x3800=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=(x3799+(((-1.0)*x3800)));
evalcond[3]=((((-1.0)*x3799))+x3800);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3801=(cj0*px);
IkReal x3802=(py*sj0);
dummyeval[0]=(x3801+x3802);
dummyeval[1]=((((-1.0)*(x3801*x3801)))+(((-2.0)*x3801*x3802))+(((-1.0)*(x3802*x3802))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3803=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x3803)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3803)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3804=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.7225)+(((-1.0)*x3804)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x3804)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3805=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x3805)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x3805)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3806=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x3806)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x3806)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3807=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x3807)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x3807)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3808=(cj0*px);
IkReal x3809=(py*sj0);
IkReal x3810=((20.0)*pp);
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(((((20.0)*x3808))+(((20.0)*x3809))),-1);
if(!x3811.valid){
continue;
}
CheckValue<IkReal> x3812=IKPowWithIntegerCheck(((((-3.6)*x3808*x3809))+(((-1.8)*(x3808*x3808)))+(((-1.8)*(x3809*x3809)))),-1);
if(!x3812.valid){
continue;
}
if( IKabs(((17.0)*(x3811.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3812.value)*((((x3809*x3810))+((x3808*x3810))+(((-14.45)*x3809))+(((-14.45)*x3808)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x3811.value)))+IKsqr(((x3812.value)*((((x3809*x3810))+((x3808*x3810))+(((-14.45)*x3809))+(((-14.45)*x3808))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x3811.value)), ((x3812.value)*((((x3809*x3810))+((x3808*x3810))+(((-14.45)*x3809))+(((-14.45)*x3808))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3813=IKcos(j1);
IkReal x3814=IKsin(j1);
IkReal x3815=(py*sj0);
IkReal x3816=(cj0*px);
IkReal x3817=((0.09)*x3813);
IkReal x3818=(x3814*x3815);
evalcond[0]=((-0.85)*x3813);
evalcond[1]=(((x3813*x3815))+((x3813*x3816)));
evalcond[2]=((-0.85)+x3818+((x3814*x3816)));
evalcond[3]=((((0.85)*x3814))+(((-1.0)*x3816))+(((-1.0)*x3815)));
evalcond[4]=((-0.2125)+(((1.1)*x3814*x3816))+(((-1.0)*x3815*x3817))+(((-1.0)*pp))+(((1.1)*x3818))+(((-1.0)*x3816*x3817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3819=(cj0*px);
IkReal x3820=(py*sj0);
CheckValue<IkReal> x3821=IKPowWithIntegerCheck(((((-1.53)*x3819))+(((-1.53)*x3820))),-1);
if(!x3821.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x3820))+(((1.17647058823529)*x3819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3821.value)*(((3.6125)+(((-44.0)*x3819*x3820))+(((17.0)*pp))+(((-22.0)*(x3820*x3820)))+(((-22.0)*(x3819*x3819))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x3820))+(((1.17647058823529)*x3819))))+IKsqr(((x3821.value)*(((3.6125)+(((-44.0)*x3819*x3820))+(((17.0)*pp))+(((-22.0)*(x3820*x3820)))+(((-22.0)*(x3819*x3819)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x3820))+(((1.17647058823529)*x3819))), ((x3821.value)*(((3.6125)+(((-44.0)*x3819*x3820))+(((17.0)*pp))+(((-22.0)*(x3820*x3820)))+(((-22.0)*(x3819*x3819)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3822=IKcos(j1);
IkReal x3823=IKsin(j1);
IkReal x3824=(py*sj0);
IkReal x3825=(cj0*px);
IkReal x3826=((0.09)*x3822);
IkReal x3827=(x3823*x3824);
evalcond[0]=((-0.85)*x3822);
evalcond[1]=(((x3822*x3824))+((x3822*x3825)));
evalcond[2]=((-0.85)+x3827+((x3823*x3825)));
evalcond[3]=((((0.85)*x3823))+(((-1.0)*x3825))+(((-1.0)*x3824)));
evalcond[4]=((-0.2125)+(((-1.0)*x3824*x3826))+(((-1.0)*x3825*x3826))+(((-1.0)*pp))+(((1.1)*x3823*x3825))+(((1.1)*x3827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst114;
CheckValue<IkReal> x3828 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3828.valid){
continue;
}
gconst114=((-1.0)*(x3828.value));
IkReal gconst115;
gconst115=IKsin(gconst114);
IkReal gconst116;
gconst116=IKcos(gconst114);
IkReal x3829=(gconst115*px);
IkReal x3830=(gconst116*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst114))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x3830))+x3829);
evalcond[3]=((((-1.0)*x3829))+x3830);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst132;
gconst132=IKsign((((gconst116*px))+((gconst115*py))));
dummyeval[0]=(((gconst116*px))+((gconst115*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3831=(gconst115*py);
IkReal x3832=((1.0)*sj3);
IkReal x3833=(gconst116*px);
IkReal x3834=((6.66666666666667)*cj3);
dummyeval[0]=(x3831+x3833);
dummyeval[1]=((((-1.0)*x3831*x3832))+(((-1.0)*x3831*x3834))+(((-1.0)*x3832*x3833))+(((-1.0)*x3833*x3834))+(((-12.2222222222222)*x3833))+(((-12.2222222222222)*x3831)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3835=(gconst116*px);
IkReal x3836=((6.66666666666667)*sj3);
IkReal x3837=(gconst115*py);
dummyeval[0]=((((-1.0)*x3837))+(((-1.0)*x3835))+((cj3*x3835))+((cj3*x3837))+(((-1.0)*x3836*x3837))+(((-1.0)*x3835*x3836)));
dummyeval[1]=(x3835+x3837);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3838=(gconst116*py);
IkReal x3839=(gconst115*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x3838))+x3839);
evalcond[3]=((((-1.0)*x3839))+x3838);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst115*py))+(((-1.0)*gconst116*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3840=(gconst116*px);
IkReal x3841=(gconst115*py);
dummyeval[0]=(x3841+x3840);
dummyeval[1]=((((-1.0)*(x3841*x3841)))+(((-2.0)*x3840*x3841))+(((-1.0)*(x3840*x3840))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3842=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x3842)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3842)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3843=(gconst116*px);
IkReal x3844=(gconst115*py);
IkReal x3845=((20.0)*pp);
CheckValue<IkReal> x3846=IKPowWithIntegerCheck(((((20.0)*x3843))+(((20.0)*x3844))),-1);
if(!x3846.valid){
continue;
}
CheckValue<IkReal> x3847=IKPowWithIntegerCheck(((((-3.6)*x3843*x3844))+(((-1.8)*(x3843*x3843)))+(((-1.8)*(x3844*x3844)))),-1);
if(!x3847.valid){
continue;
}
if( IKabs(((17.0)*(x3846.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3847.value)*(((((-14.45)*x3843))+(((-14.45)*x3844))+((x3844*x3845))+((x3843*x3845)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x3846.value)))+IKsqr(((x3847.value)*(((((-14.45)*x3843))+(((-14.45)*x3844))+((x3844*x3845))+((x3843*x3845))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x3846.value)), ((x3847.value)*(((((-14.45)*x3843))+(((-14.45)*x3844))+((x3844*x3845))+((x3843*x3845))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3848=IKcos(j1);
IkReal x3849=IKsin(j1);
IkReal x3850=(gconst116*px);
IkReal x3851=(gconst115*py);
IkReal x3852=((1.1)*x3849);
IkReal x3853=(x3848*x3851);
evalcond[0]=((-0.85)*x3848);
evalcond[1]=(((x3848*x3850))+x3853);
evalcond[2]=((-0.85)+((x3849*x3851))+((x3849*x3850)));
evalcond[3]=((((-1.0)*x3850))+(((-1.0)*x3851))+(((0.85)*x3849)));
evalcond[4]=((-0.2125)+(((-0.09)*x3853))+((x3850*x3852))+(((-0.09)*x3848*x3850))+(((-1.0)*pp))+((x3851*x3852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3854=(gconst115*py);
IkReal x3855=(gconst116*px);
CheckValue<IkReal> x3856=IKPowWithIntegerCheck(((((-1.53)*x3854))+(((-1.53)*x3855))),-1);
if(!x3856.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x3854))+(((1.17647058823529)*x3855)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3856.value)*(((3.6125)+(((-44.0)*x3854*x3855))+(((-22.0)*(x3855*x3855)))+(((17.0)*pp))+(((-22.0)*(x3854*x3854))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x3854))+(((1.17647058823529)*x3855))))+IKsqr(((x3856.value)*(((3.6125)+(((-44.0)*x3854*x3855))+(((-22.0)*(x3855*x3855)))+(((17.0)*pp))+(((-22.0)*(x3854*x3854)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x3854))+(((1.17647058823529)*x3855))), ((x3856.value)*(((3.6125)+(((-44.0)*x3854*x3855))+(((-22.0)*(x3855*x3855)))+(((17.0)*pp))+(((-22.0)*(x3854*x3854)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3857=IKcos(j1);
IkReal x3858=IKsin(j1);
IkReal x3859=(gconst116*px);
IkReal x3860=(gconst115*py);
IkReal x3861=((1.1)*x3858);
IkReal x3862=(x3857*x3860);
evalcond[0]=((-0.85)*x3857);
evalcond[1]=(((x3857*x3859))+x3862);
evalcond[2]=((-0.85)+((x3858*x3860))+((x3858*x3859)));
evalcond[3]=((((-1.0)*x3860))+(((-1.0)*x3859))+(((0.85)*x3858)));
evalcond[4]=((-0.2125)+((x3860*x3861))+(((-0.09)*x3862))+(((-1.0)*pp))+(((-0.09)*x3857*x3859))+((x3859*x3861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3863=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x3863))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x3863)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3865 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3865.valid){
continue;
}
IkReal x3864=x3865.value;
j1array[0]=((-1.0)*x3864);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3864)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3866=IKsin(j1);
IkReal x3867=IKcos(j1);
IkReal x3868=((0.045)*x3867);
evalcond[0]=((((-1.0)*x3868))+(((0.55)*x3866))+(((-0.3)*sj3*x3867))+(((0.3)*cj3*x3866))+(((0.045)*sj3*x3866))+((cj3*x3868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3869=(gconst116*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x3869);
evalcond[3]=x3869;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst115;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst115;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3870=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x3870)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3870)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3874=IKPowWithIntegerCheck(gconst115,-1);
if(!x3874.valid){
continue;
}
IkReal x3871=x3874.value;
CheckValue<IkReal> x3875=IKPowWithIntegerCheck(py,-1);
if(!x3875.valid){
continue;
}
IkReal x3872=x3875.value;
IkReal x3873=(x3871*x3872);
if( IKabs(((0.85)*x3873)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3873*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3873))+IKsqr(((0.0555555555555556)*x3873*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3873), ((0.0555555555555556)*x3873*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3876=IKcos(j1);
IkReal x3877=IKsin(j1);
IkReal x3878=(gconst115*py);
evalcond[0]=((-0.85)*x3876);
evalcond[1]=(x3876*x3878);
evalcond[2]=((-0.85)+((x3877*x3878)));
evalcond[3]=((((-1.0)*x3878))+(((0.85)*x3877)));
evalcond[4]=((-0.2125)+(((-0.09)*x3876*x3878))+(((1.1)*x3877*x3878))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3879=IKPowWithIntegerCheck(gconst115,-1);
if(!x3879.valid){
continue;
}
CheckValue<IkReal> x3880=IKPowWithIntegerCheck(py,-1);
if(!x3880.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst115*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3879.value)*(x3880.value)*(((-361.25)+(((2200.0)*(gconst115*gconst115)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst115*py))+IKsqr(((0.0065359477124183)*(x3879.value)*(x3880.value)*(((-361.25)+(((2200.0)*(gconst115*gconst115)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst115*py), ((0.0065359477124183)*(x3879.value)*(x3880.value)*(((-361.25)+(((2200.0)*(gconst115*gconst115)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3881=IKcos(j1);
IkReal x3882=IKsin(j1);
IkReal x3883=(gconst115*py);
evalcond[0]=((-0.85)*x3881);
evalcond[1]=(x3881*x3883);
evalcond[2]=((-0.85)+((x3882*x3883)));
evalcond[3]=((((-1.0)*x3883))+(((0.85)*x3882)));
evalcond[4]=((-0.2125)+(((-0.09)*x3881*x3883))+(((-1.0)*pp))+(((1.1)*x3882*x3883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3884=(gconst115*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x3884;
evalcond[3]=((-1.0)*x3884);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst116;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst116;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3885=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x3885)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3885)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(gconst116,-1);
if(!x3889.valid){
continue;
}
IkReal x3886=x3889.value;
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(px,-1);
if(!x3890.valid){
continue;
}
IkReal x3887=x3890.value;
IkReal x3888=(x3886*x3887);
if( IKabs(((0.85)*x3888)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3888*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3888))+IKsqr(((0.0555555555555556)*x3888*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3888), ((0.0555555555555556)*x3888*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3891=IKcos(j1);
IkReal x3892=IKsin(j1);
IkReal x3893=(gconst116*px);
evalcond[0]=((-0.85)*x3891);
evalcond[1]=(x3891*x3893);
evalcond[2]=((-0.85)+((x3892*x3893)));
evalcond[3]=((((-1.0)*x3893))+(((0.85)*x3892)));
evalcond[4]=((-0.2125)+(((1.1)*x3892*x3893))+(((-1.0)*pp))+(((-0.09)*x3891*x3893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3894=IKPowWithIntegerCheck(gconst116,-1);
if(!x3894.valid){
continue;
}
CheckValue<IkReal> x3895=IKPowWithIntegerCheck(px,-1);
if(!x3895.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst116*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3894.value)*(x3895.value)*(((-361.25)+(((2200.0)*(gconst116*gconst116)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst116*px))+IKsqr(((0.0065359477124183)*(x3894.value)*(x3895.value)*(((-361.25)+(((2200.0)*(gconst116*gconst116)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst116*px), ((0.0065359477124183)*(x3894.value)*(x3895.value)*(((-361.25)+(((2200.0)*(gconst116*gconst116)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3896=IKcos(j1);
IkReal x3897=IKsin(j1);
IkReal x3898=(gconst116*px);
evalcond[0]=((-0.85)*x3896);
evalcond[1]=(x3896*x3898);
evalcond[2]=((-0.85)+((x3897*x3898)));
evalcond[3]=((((-1.0)*x3898))+(((0.85)*x3897)));
evalcond[4]=((-0.2125)+(((-0.09)*x3896*x3898))+(((-1.0)*pp))+(((1.1)*x3897*x3898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3899=(gconst116*px);
IkReal x3900=((0.045)*cj3);
IkReal x3901=((0.3)*sj3);
IkReal x3902=(gconst115*py);
CheckValue<IkReal> x3903=IKPowWithIntegerCheck((((x3900*x3902))+(((-1.0)*x3901*x3902))+((x3899*x3900))+(((-0.045)*x3902))+(((-0.045)*x3899))+(((-1.0)*x3899*x3901))),-1);
if(!x3903.valid){
continue;
}
CheckValue<IkReal> x3904=IKPowWithIntegerCheck((x3902+x3899),-1);
if(!x3904.valid){
continue;
}
if( IKabs(((x3903.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3904.value)*(((-0.045)+(((-1.0)*x3901))+x3900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3903.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x3904.value)*(((-0.045)+(((-1.0)*x3901))+x3900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3903.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x3904.value)*(((-0.045)+(((-1.0)*x3901))+x3900))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3905=IKsin(j1);
IkReal x3906=IKcos(j1);
IkReal x3907=((0.3)*cj3);
IkReal x3908=(gconst115*py);
IkReal x3909=((0.045)*cj3);
IkReal x3910=(gconst116*px);
IkReal x3911=((0.045)*sj3);
IkReal x3912=((0.3)*sj3);
IkReal x3913=((0.045)*x3905);
IkReal x3914=((0.09)*x3906);
IkReal x3915=(x3905*x3910);
evalcond[0]=((-0.55)+(((-1.0)*x3911))+(((-1.0)*x3907))+((x3905*x3908))+x3915);
evalcond[1]=((0.045)+(((-1.0)*x3909))+((x3906*x3908))+((x3906*x3910))+x3912);
evalcond[2]=((-0.2125)+(((-1.0)*x3908*x3914))+(((-1.0)*x3910*x3914))+(((-1.0)*pp))+(((1.1)*x3915))+(((1.1)*x3905*x3908)));
evalcond[3]=((((-1.0)*x3905*x3912))+(((-1.0)*x3913))+(((-1.0)*x3906*x3911))+(((-1.0)*x3906*x3907))+((x3905*x3909))+(((-0.55)*x3906)));
evalcond[4]=((((-1.0)*x3906*x3912))+((x3905*x3911))+((x3906*x3909))+((x3905*x3907))+(((-1.0)*x3908))+(((-1.0)*x3910))+(((-0.045)*x3906))+(((0.55)*x3905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3916=(gconst116*px);
IkReal x3917=((0.045)*sj3);
IkReal x3918=((0.3)*cj3);
IkReal x3919=(gconst115*py);
CheckValue<IkReal> x3920=IKPowWithIntegerCheck((x3916+x3919),-1);
if(!x3920.valid){
continue;
}
CheckValue<IkReal> x3921=IKPowWithIntegerCheck(((((-1.0)*x3916*x3918))+(((-1.0)*x3916*x3917))+(((-1.0)*x3917*x3919))+(((-1.0)*x3918*x3919))+(((-0.55)*x3919))+(((-0.55)*x3916))),-1);
if(!x3921.valid){
continue;
}
if( IKabs(((x3920.value)*(((0.55)+x3917+x3918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3921.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3920.value)*(((0.55)+x3917+x3918))))+IKsqr(((x3921.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3920.value)*(((0.55)+x3917+x3918))), ((x3921.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3922=IKsin(j1);
IkReal x3923=IKcos(j1);
IkReal x3924=((0.3)*cj3);
IkReal x3925=(gconst115*py);
IkReal x3926=((0.045)*cj3);
IkReal x3927=(gconst116*px);
IkReal x3928=((0.045)*sj3);
IkReal x3929=((0.3)*sj3);
IkReal x3930=((0.045)*x3922);
IkReal x3931=((0.09)*x3923);
IkReal x3932=(x3922*x3927);
evalcond[0]=((-0.55)+(((-1.0)*x3928))+(((-1.0)*x3924))+x3932+((x3922*x3925)));
evalcond[1]=((0.045)+(((-1.0)*x3926))+x3929+((x3923*x3927))+((x3923*x3925)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x3925*x3931))+(((-1.0)*x3927*x3931))+(((1.1)*x3932))+(((1.1)*x3922*x3925)));
evalcond[3]=((((-1.0)*x3922*x3929))+(((-0.55)*x3923))+(((-1.0)*x3923*x3924))+(((-1.0)*x3923*x3928))+(((-1.0)*x3930))+((x3922*x3926)));
evalcond[4]=((((-1.0)*x3927))+(((-1.0)*x3925))+(((0.55)*x3922))+(((-1.0)*x3923*x3929))+(((-0.045)*x3923))+((x3923*x3926))+((x3922*x3924))+((x3922*x3928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3933 = IKatan2WithCheck((gconst132*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst132*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3933.valid){
continue;
}
j1array[0]=x3933.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3934=IKsin(j1);
IkReal x3935=IKcos(j1);
IkReal x3936=((0.3)*cj3);
IkReal x3937=(gconst115*py);
IkReal x3938=((0.045)*cj3);
IkReal x3939=(gconst116*px);
IkReal x3940=((0.045)*sj3);
IkReal x3941=((0.3)*sj3);
IkReal x3942=((0.045)*x3934);
IkReal x3943=((0.09)*x3935);
IkReal x3944=(x3934*x3939);
evalcond[0]=((-0.55)+x3944+((x3934*x3937))+(((-1.0)*x3940))+(((-1.0)*x3936)));
evalcond[1]=((0.045)+((x3935*x3939))+((x3935*x3937))+x3941+(((-1.0)*x3938)));
evalcond[2]=((-0.2125)+(((-1.0)*x3937*x3943))+(((-1.0)*pp))+(((-1.0)*x3939*x3943))+(((1.1)*x3934*x3937))+(((1.1)*x3944)));
evalcond[3]=((((-1.0)*x3934*x3941))+(((-0.55)*x3935))+((x3934*x3938))+(((-1.0)*x3942))+(((-1.0)*x3935*x3940))+(((-1.0)*x3935*x3936)));
evalcond[4]=((((-1.0)*x3937))+(((-1.0)*x3939))+(((-0.045)*x3935))+((x3934*x3940))+((x3935*x3938))+(((0.55)*x3934))+((x3934*x3936))+(((-1.0)*x3935*x3941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst117;
CheckValue<IkReal> x3945 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3945.valid){
continue;
}
gconst117=((3.14159265358979)+(((-1.0)*(x3945.value))));
IkReal gconst118;
gconst118=IKsin(gconst117);
IkReal gconst119;
gconst119=IKcos(gconst117);
IkReal x3946=(gconst118*px);
IkReal x3947=(gconst119*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst117))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x3947))+x3946);
evalcond[3]=((((-1.0)*x3946))+x3947);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst133;
gconst133=IKsign((((gconst119*px))+((gconst118*py))));
dummyeval[0]=(((gconst119*px))+((gconst118*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3948=(gconst119*px);
IkReal x3949=(gconst118*py);
IkReal x3950=((1.0)*sj3);
IkReal x3951=((6.66666666666667)*cj3);
dummyeval[0]=(x3948+x3949);
dummyeval[1]=((((-1.0)*x3948*x3951))+(((-1.0)*x3948*x3950))+(((-1.0)*x3949*x3951))+(((-1.0)*x3949*x3950))+(((-12.2222222222222)*x3949))+(((-12.2222222222222)*x3948)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3952=(gconst119*px);
IkReal x3953=(gconst118*py);
IkReal x3954=((6.66666666666667)*sj3);
dummyeval[0]=((((-1.0)*x3953*x3954))+(((-1.0)*x3952))+(((-1.0)*x3953))+(((-1.0)*x3952*x3954))+((cj3*x3953))+((cj3*x3952)));
dummyeval[1]=(x3953+x3952);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x3955=(gconst119*py);
IkReal x3956=(gconst118*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x3955))+x3956);
evalcond[3]=((((-1.0)*x3956))+x3955);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst119*px))+(((-1.0)*gconst118*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3957=(gconst119*px);
IkReal x3958=(gconst118*py);
dummyeval[0]=(x3958+x3957);
dummyeval[1]=((((-2.0)*x3957*x3958))+(((-1.0)*(x3957*x3957)))+(((-1.0)*(x3958*x3958))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3959=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x3959)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3960=(gconst119*px);
IkReal x3961=(gconst118*py);
IkReal x3962=((20.0)*pp);
CheckValue<IkReal> x3963=IKPowWithIntegerCheck(((((20.0)*x3960))+(((20.0)*x3961))),-1);
if(!x3963.valid){
continue;
}
CheckValue<IkReal> x3964=IKPowWithIntegerCheck(((((-1.8)*(x3961*x3961)))+(((-3.6)*x3960*x3961))+(((-1.8)*(x3960*x3960)))),-1);
if(!x3964.valid){
continue;
}
if( IKabs(((17.0)*(x3963.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3964.value)*((((x3960*x3962))+((x3961*x3962))+(((-14.45)*x3961))+(((-14.45)*x3960)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x3963.value)))+IKsqr(((x3964.value)*((((x3960*x3962))+((x3961*x3962))+(((-14.45)*x3961))+(((-14.45)*x3960))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x3963.value)), ((x3964.value)*((((x3960*x3962))+((x3961*x3962))+(((-14.45)*x3961))+(((-14.45)*x3960))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3965=IKcos(j1);
IkReal x3966=IKsin(j1);
IkReal x3967=(gconst119*px);
IkReal x3968=(gconst118*py);
IkReal x3969=((0.09)*x3965);
IkReal x3970=((1.1)*x3966);
evalcond[0]=((-0.85)*x3965);
evalcond[1]=(((x3965*x3967))+((x3965*x3968)));
evalcond[2]=((-0.85)+((x3966*x3968))+((x3966*x3967)));
evalcond[3]=((((0.85)*x3966))+(((-1.0)*x3968))+(((-1.0)*x3967)));
evalcond[4]=((-0.2125)+(((-1.0)*x3968*x3969))+(((-1.0)*pp))+((x3968*x3970))+((x3967*x3970))+(((-1.0)*x3967*x3969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3971=(gconst119*px);
IkReal x3972=(gconst118*py);
CheckValue<IkReal> x3973=IKPowWithIntegerCheck(((((-1.53)*x3971))+(((-1.53)*x3972))),-1);
if(!x3973.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x3972))+(((1.17647058823529)*x3971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3973.value)*(((3.6125)+(((-22.0)*(x3972*x3972)))+(((-44.0)*x3971*x3972))+(((17.0)*pp))+(((-22.0)*(x3971*x3971))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x3972))+(((1.17647058823529)*x3971))))+IKsqr(((x3973.value)*(((3.6125)+(((-22.0)*(x3972*x3972)))+(((-44.0)*x3971*x3972))+(((17.0)*pp))+(((-22.0)*(x3971*x3971)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x3972))+(((1.17647058823529)*x3971))), ((x3973.value)*(((3.6125)+(((-22.0)*(x3972*x3972)))+(((-44.0)*x3971*x3972))+(((17.0)*pp))+(((-22.0)*(x3971*x3971)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3974=IKcos(j1);
IkReal x3975=IKsin(j1);
IkReal x3976=(gconst119*px);
IkReal x3977=(gconst118*py);
IkReal x3978=((0.09)*x3974);
IkReal x3979=((1.1)*x3975);
evalcond[0]=((-0.85)*x3974);
evalcond[1]=(((x3974*x3976))+((x3974*x3977)));
evalcond[2]=((-0.85)+((x3975*x3977))+((x3975*x3976)));
evalcond[3]=((((0.85)*x3975))+(((-1.0)*x3977))+(((-1.0)*x3976)));
evalcond[4]=((-0.2125)+(((-1.0)*x3976*x3978))+(((-1.0)*x3977*x3978))+((x3977*x3979))+((x3976*x3979))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3980=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x3980))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x3980)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3982 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3982.valid){
continue;
}
IkReal x3981=x3982.value;
j1array[0]=((-1.0)*x3981);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3981)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3983=IKsin(j1);
IkReal x3984=IKcos(j1);
IkReal x3985=((0.045)*x3984);
evalcond[0]=(((cj3*x3985))+(((-0.3)*sj3*x3984))+(((-1.0)*x3985))+(((0.55)*x3983))+(((0.3)*cj3*x3983))+(((0.045)*sj3*x3983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3986=(gconst119*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x3986);
evalcond[3]=x3986;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst118;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst118;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x3987=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x3987)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x3987)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3991=IKPowWithIntegerCheck(gconst118,-1);
if(!x3991.valid){
continue;
}
IkReal x3988=x3991.value;
CheckValue<IkReal> x3992=IKPowWithIntegerCheck(py,-1);
if(!x3992.valid){
continue;
}
IkReal x3989=x3992.value;
IkReal x3990=(x3988*x3989);
if( IKabs(((0.85)*x3990)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x3990*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x3990))+IKsqr(((0.0555555555555556)*x3990*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x3990), ((0.0555555555555556)*x3990*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3993=IKcos(j1);
IkReal x3994=IKsin(j1);
IkReal x3995=(gconst118*py);
evalcond[0]=((-0.85)*x3993);
evalcond[1]=(x3993*x3995);
evalcond[2]=((-0.85)+((x3994*x3995)));
evalcond[3]=((((0.85)*x3994))+(((-1.0)*x3995)));
evalcond[4]=((-0.2125)+(((1.1)*x3994*x3995))+(((-1.0)*pp))+(((-0.09)*x3993*x3995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3996=IKPowWithIntegerCheck(gconst118,-1);
if(!x3996.valid){
continue;
}
CheckValue<IkReal> x3997=IKPowWithIntegerCheck(py,-1);
if(!x3997.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst118*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x3996.value)*(x3997.value)*(((-361.25)+(((2200.0)*(gconst118*gconst118)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst118*py))+IKsqr(((0.0065359477124183)*(x3996.value)*(x3997.value)*(((-361.25)+(((2200.0)*(gconst118*gconst118)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst118*py), ((0.0065359477124183)*(x3996.value)*(x3997.value)*(((-361.25)+(((2200.0)*(gconst118*gconst118)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3998=IKcos(j1);
IkReal x3999=IKsin(j1);
IkReal x4000=(gconst118*py);
evalcond[0]=((-0.85)*x3998);
evalcond[1]=(x3998*x4000);
evalcond[2]=((-0.85)+((x3999*x4000)));
evalcond[3]=((((0.85)*x3999))+(((-1.0)*x4000)));
evalcond[4]=((-0.2125)+(((-0.09)*x3998*x4000))+(((-1.0)*pp))+(((1.1)*x3999*x4000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4001=(gconst118*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x4001;
evalcond[3]=((-1.0)*x4001);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst119;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst119;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4002=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x4002)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4002)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4006=IKPowWithIntegerCheck(gconst119,-1);
if(!x4006.valid){
continue;
}
IkReal x4003=x4006.value;
CheckValue<IkReal> x4007=IKPowWithIntegerCheck(px,-1);
if(!x4007.valid){
continue;
}
IkReal x4004=x4007.value;
IkReal x4005=(x4003*x4004);
if( IKabs(((0.85)*x4005)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4005*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4005))+IKsqr(((0.0555555555555556)*x4005*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4005), ((0.0555555555555556)*x4005*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4008=IKcos(j1);
IkReal x4009=IKsin(j1);
IkReal x4010=(gconst119*px);
evalcond[0]=((-0.85)*x4008);
evalcond[1]=(x4008*x4010);
evalcond[2]=((-0.85)+((x4009*x4010)));
evalcond[3]=((((0.85)*x4009))+(((-1.0)*x4010)));
evalcond[4]=((-0.2125)+(((-0.09)*x4008*x4010))+(((-1.0)*pp))+(((1.1)*x4009*x4010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4011=IKPowWithIntegerCheck(gconst119,-1);
if(!x4011.valid){
continue;
}
CheckValue<IkReal> x4012=IKPowWithIntegerCheck(px,-1);
if(!x4012.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst119*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4011.value)*(x4012.value)*(((-361.25)+(((2200.0)*(gconst119*gconst119)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst119*px))+IKsqr(((0.0065359477124183)*(x4011.value)*(x4012.value)*(((-361.25)+(((2200.0)*(gconst119*gconst119)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst119*px), ((0.0065359477124183)*(x4011.value)*(x4012.value)*(((-361.25)+(((2200.0)*(gconst119*gconst119)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4013=IKcos(j1);
IkReal x4014=IKsin(j1);
IkReal x4015=(gconst119*px);
evalcond[0]=((-0.85)*x4013);
evalcond[1]=(x4013*x4015);
evalcond[2]=((-0.85)+((x4014*x4015)));
evalcond[3]=((((0.85)*x4014))+(((-1.0)*x4015)));
evalcond[4]=((-0.2125)+(((1.1)*x4014*x4015))+(((-1.0)*pp))+(((-0.09)*x4013*x4015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4016=(gconst119*px);
IkReal x4017=((0.3)*sj3);
IkReal x4018=((0.045)*cj3);
IkReal x4019=(gconst118*py);
CheckValue<IkReal> x4020=IKPowWithIntegerCheck(((((-0.045)*x4019))+(((-0.045)*x4016))+((x4016*x4018))+((x4018*x4019))+(((-1.0)*x4017*x4019))+(((-1.0)*x4016*x4017))),-1);
if(!x4020.valid){
continue;
}
CheckValue<IkReal> x4021=IKPowWithIntegerCheck((x4019+x4016),-1);
if(!x4021.valid){
continue;
}
if( IKabs(((x4020.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4021.value)*(((-0.045)+x4018+(((-1.0)*x4017)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4020.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x4021.value)*(((-0.045)+x4018+(((-1.0)*x4017))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4020.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x4021.value)*(((-0.045)+x4018+(((-1.0)*x4017))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4022=IKsin(j1);
IkReal x4023=IKcos(j1);
IkReal x4024=((0.3)*cj3);
IkReal x4025=((0.045)*cj3);
IkReal x4026=(gconst119*px);
IkReal x4027=((0.045)*sj3);
IkReal x4028=(gconst118*py);
IkReal x4029=((0.3)*sj3);
IkReal x4030=((0.045)*x4022);
IkReal x4031=((0.09)*x4023);
IkReal x4032=((1.1)*x4022);
evalcond[0]=((-0.55)+(((-1.0)*x4024))+(((-1.0)*x4027))+((x4022*x4026))+((x4022*x4028)));
evalcond[1]=((0.045)+(((-1.0)*x4025))+x4029+((x4023*x4028))+((x4023*x4026)));
evalcond[2]=((-0.2125)+((x4028*x4032))+((x4026*x4032))+(((-1.0)*x4026*x4031))+(((-1.0)*pp))+(((-1.0)*x4028*x4031)));
evalcond[3]=((((-1.0)*x4023*x4027))+(((-1.0)*x4023*x4024))+(((-1.0)*x4022*x4029))+((x4022*x4025))+(((-0.55)*x4023))+(((-1.0)*x4030)));
evalcond[4]=((((-1.0)*x4023*x4029))+(((-1.0)*x4026))+(((-1.0)*x4028))+(((0.55)*x4022))+((x4022*x4024))+((x4022*x4027))+((x4023*x4025))+(((-0.045)*x4023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4033=(gconst119*px);
IkReal x4034=((0.045)*sj3);
IkReal x4035=(gconst118*py);
IkReal x4036=((0.3)*cj3);
CheckValue<IkReal> x4037=IKPowWithIntegerCheck((x4033+x4035),-1);
if(!x4037.valid){
continue;
}
CheckValue<IkReal> x4038=IKPowWithIntegerCheck(((((-1.0)*x4034*x4035))+(((-0.55)*x4033))+(((-0.55)*x4035))+(((-1.0)*x4035*x4036))+(((-1.0)*x4033*x4034))+(((-1.0)*x4033*x4036))),-1);
if(!x4038.valid){
continue;
}
if( IKabs(((x4037.value)*(((0.55)+x4034+x4036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4038.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4037.value)*(((0.55)+x4034+x4036))))+IKsqr(((x4038.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4037.value)*(((0.55)+x4034+x4036))), ((x4038.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4039=IKsin(j1);
IkReal x4040=IKcos(j1);
IkReal x4041=((0.3)*cj3);
IkReal x4042=((0.045)*cj3);
IkReal x4043=(gconst119*px);
IkReal x4044=((0.045)*sj3);
IkReal x4045=(gconst118*py);
IkReal x4046=((0.3)*sj3);
IkReal x4047=((0.045)*x4039);
IkReal x4048=((0.09)*x4040);
IkReal x4049=((1.1)*x4039);
evalcond[0]=((-0.55)+((x4039*x4045))+((x4039*x4043))+(((-1.0)*x4044))+(((-1.0)*x4041)));
evalcond[1]=((0.045)+((x4040*x4045))+((x4040*x4043))+x4046+(((-1.0)*x4042)));
evalcond[2]=((-0.2125)+((x4045*x4049))+(((-1.0)*x4043*x4048))+(((-1.0)*x4045*x4048))+((x4043*x4049))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x4039*x4046))+((x4039*x4042))+(((-1.0)*x4040*x4041))+(((-1.0)*x4040*x4044))+(((-0.55)*x4040))+(((-1.0)*x4047)));
evalcond[4]=(((x4040*x4042))+(((-0.045)*x4040))+((x4039*x4044))+((x4039*x4041))+(((-1.0)*x4040*x4046))+(((-1.0)*x4043))+(((-1.0)*x4045))+(((0.55)*x4039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4050 = IKatan2WithCheck((gconst133*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst133*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4050.valid){
continue;
}
j1array[0]=x4050.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4051=IKsin(j1);
IkReal x4052=IKcos(j1);
IkReal x4053=((0.3)*cj3);
IkReal x4054=((0.045)*cj3);
IkReal x4055=(gconst119*px);
IkReal x4056=((0.045)*sj3);
IkReal x4057=(gconst118*py);
IkReal x4058=((0.3)*sj3);
IkReal x4059=((0.045)*x4051);
IkReal x4060=((0.09)*x4052);
IkReal x4061=((1.1)*x4051);
evalcond[0]=((-0.55)+(((-1.0)*x4053))+(((-1.0)*x4056))+((x4051*x4057))+((x4051*x4055)));
evalcond[1]=((0.045)+x4058+(((-1.0)*x4054))+((x4052*x4057))+((x4052*x4055)));
evalcond[2]=((-0.2125)+(((-1.0)*x4055*x4060))+(((-1.0)*pp))+((x4055*x4061))+((x4057*x4061))+(((-1.0)*x4057*x4060)));
evalcond[3]=((((-1.0)*x4051*x4058))+(((-1.0)*x4052*x4056))+(((-1.0)*x4052*x4053))+(((-1.0)*x4059))+((x4051*x4054))+(((-0.55)*x4052)));
evalcond[4]=((((-0.045)*x4052))+(((-1.0)*x4052*x4058))+(((-1.0)*x4057))+(((-1.0)*x4055))+((x4051*x4056))+((x4051*x4053))+(((0.55)*x4051))+((x4052*x4054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst120;
CheckValue<IkReal> x4062 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x4062.valid){
continue;
}
gconst120=((-1.0)*(x4062.value));
IkReal gconst121;
gconst121=IKsin(gconst120);
IkReal gconst122;
gconst122=IKcos(gconst120);
IkReal x4063=(gconst122*py);
IkReal x4064=(gconst121*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst120))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x4064+(((-1.0)*x4063)));
evalcond[3]=(x4063+(((-1.0)*x4064)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst134;
gconst134=IKsign((((gconst121*py))+((gconst122*px))));
dummyeval[0]=(((gconst121*py))+((gconst122*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4065=(gconst122*px);
IkReal x4066=((6.66666666666667)*cj3);
IkReal x4067=(gconst121*py);
IkReal x4068=((1.0)*sj3);
dummyeval[0]=(x4067+x4065);
dummyeval[1]=((((-1.0)*x4065*x4066))+(((-1.0)*x4065*x4068))+(((-1.0)*x4066*x4067))+(((-12.2222222222222)*x4065))+(((-12.2222222222222)*x4067))+(((-1.0)*x4067*x4068)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4069=(gconst121*py);
IkReal x4070=(gconst122*px);
IkReal x4071=((6.66666666666667)*sj3);
dummyeval[0]=((((-1.0)*x4069*x4071))+(((-1.0)*x4070*x4071))+((cj3*x4069))+(((-1.0)*x4070))+(((-1.0)*x4069))+((cj3*x4070)));
dummyeval[1]=(x4070+x4069);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4072=(gconst121*px);
IkReal x4073=(gconst122*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x4073))+x4072);
evalcond[3]=((((-1.0)*x4072))+x4073);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst122*px))+(((-1.0)*gconst121*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4074=(gconst122*px);
IkReal x4075=(gconst121*py);
dummyeval[0]=(x4075+x4074);
dummyeval[1]=((((-1.0)*(x4074*x4074)))+(((-1.0)*(x4075*x4075)))+(((-2.0)*x4074*x4075)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4076=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x4076)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4076)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4077=(gconst121*py);
IkReal x4078=(gconst122*px);
IkReal x4079=((20.0)*pp);
CheckValue<IkReal> x4080=IKPowWithIntegerCheck(((((20.0)*x4077))+(((20.0)*x4078))),-1);
if(!x4080.valid){
continue;
}
CheckValue<IkReal> x4081=IKPowWithIntegerCheck(((((-3.6)*x4077*x4078))+(((-1.8)*(x4078*x4078)))+(((-1.8)*(x4077*x4077)))),-1);
if(!x4081.valid){
continue;
}
if( IKabs(((17.0)*(x4080.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4081.value)*((((x4078*x4079))+((x4077*x4079))+(((-14.45)*x4078))+(((-14.45)*x4077)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x4080.value)))+IKsqr(((x4081.value)*((((x4078*x4079))+((x4077*x4079))+(((-14.45)*x4078))+(((-14.45)*x4077))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x4080.value)), ((x4081.value)*((((x4078*x4079))+((x4077*x4079))+(((-14.45)*x4078))+(((-14.45)*x4077))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4082=IKcos(j1);
IkReal x4083=IKsin(j1);
IkReal x4084=(gconst121*py);
IkReal x4085=(gconst122*px);
IkReal x4086=((1.1)*x4083);
IkReal x4087=(x4082*x4085);
evalcond[0]=((-0.85)*x4082);
evalcond[1]=(((x4082*x4084))+x4087);
evalcond[2]=((-0.85)+((x4083*x4085))+((x4083*x4084)));
evalcond[3]=((((0.85)*x4083))+(((-1.0)*x4084))+(((-1.0)*x4085)));
evalcond[4]=((-0.2125)+((x4085*x4086))+((x4084*x4086))+(((-0.09)*x4087))+(((-1.0)*pp))+(((-0.09)*x4082*x4084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4088=(gconst121*py);
IkReal x4089=(gconst122*px);
CheckValue<IkReal> x4090=IKPowWithIntegerCheck(((((-1.53)*x4088))+(((-1.53)*x4089))),-1);
if(!x4090.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x4089))+(((1.17647058823529)*x4088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4090.value)*(((3.6125)+(((-22.0)*(x4088*x4088)))+(((17.0)*pp))+(((-44.0)*x4088*x4089))+(((-22.0)*(x4089*x4089))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x4089))+(((1.17647058823529)*x4088))))+IKsqr(((x4090.value)*(((3.6125)+(((-22.0)*(x4088*x4088)))+(((17.0)*pp))+(((-44.0)*x4088*x4089))+(((-22.0)*(x4089*x4089)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x4089))+(((1.17647058823529)*x4088))), ((x4090.value)*(((3.6125)+(((-22.0)*(x4088*x4088)))+(((17.0)*pp))+(((-44.0)*x4088*x4089))+(((-22.0)*(x4089*x4089)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4091=IKcos(j1);
IkReal x4092=IKsin(j1);
IkReal x4093=(gconst121*py);
IkReal x4094=(gconst122*px);
IkReal x4095=((1.1)*x4092);
IkReal x4096=(x4091*x4094);
evalcond[0]=((-0.85)*x4091);
evalcond[1]=(x4096+((x4091*x4093)));
evalcond[2]=((-0.85)+((x4092*x4093))+((x4092*x4094)));
evalcond[3]=((((0.85)*x4092))+(((-1.0)*x4094))+(((-1.0)*x4093)));
evalcond[4]=((-0.2125)+((x4094*x4095))+(((-1.0)*pp))+(((-0.09)*x4096))+(((-0.09)*x4091*x4093))+((x4093*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4097=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x4097))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x4097)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4099 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4099.valid){
continue;
}
IkReal x4098=x4099.value;
j1array[0]=((-1.0)*x4098);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4098)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4100=IKsin(j1);
IkReal x4101=IKcos(j1);
IkReal x4102=((0.045)*x4101);
evalcond[0]=((((0.3)*cj3*x4100))+(((-1.0)*x4102))+(((0.045)*sj3*x4100))+((cj3*x4102))+(((0.55)*x4100))+(((-0.3)*sj3*x4101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4103=(gconst122*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x4103);
evalcond[3]=x4103;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst121;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst121;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4104=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x4104)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4104)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4108=IKPowWithIntegerCheck(gconst121,-1);
if(!x4108.valid){
continue;
}
IkReal x4105=x4108.value;
CheckValue<IkReal> x4109=IKPowWithIntegerCheck(py,-1);
if(!x4109.valid){
continue;
}
IkReal x4106=x4109.value;
IkReal x4107=(x4105*x4106);
if( IKabs(((0.85)*x4107)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4107*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4107))+IKsqr(((0.0555555555555556)*x4107*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4107), ((0.0555555555555556)*x4107*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4110=IKcos(j1);
IkReal x4111=IKsin(j1);
IkReal x4112=(gconst121*py);
evalcond[0]=((-0.85)*x4110);
evalcond[1]=(x4110*x4112);
evalcond[2]=((-0.85)+((x4111*x4112)));
evalcond[3]=((((0.85)*x4111))+(((-1.0)*x4112)));
evalcond[4]=((-0.2125)+(((-0.09)*x4110*x4112))+(((1.1)*x4111*x4112))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4113=IKPowWithIntegerCheck(gconst121,-1);
if(!x4113.valid){
continue;
}
CheckValue<IkReal> x4114=IKPowWithIntegerCheck(py,-1);
if(!x4114.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst121*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4113.value)*(x4114.value)*(((-361.25)+(((2200.0)*(gconst121*gconst121)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst121*py))+IKsqr(((0.0065359477124183)*(x4113.value)*(x4114.value)*(((-361.25)+(((2200.0)*(gconst121*gconst121)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst121*py), ((0.0065359477124183)*(x4113.value)*(x4114.value)*(((-361.25)+(((2200.0)*(gconst121*gconst121)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4115=IKcos(j1);
IkReal x4116=IKsin(j1);
IkReal x4117=(gconst121*py);
evalcond[0]=((-0.85)*x4115);
evalcond[1]=(x4115*x4117);
evalcond[2]=((-0.85)+((x4116*x4117)));
evalcond[3]=((((0.85)*x4116))+(((-1.0)*x4117)));
evalcond[4]=((-0.2125)+(((-0.09)*x4115*x4117))+(((1.1)*x4116*x4117))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4118=(gconst121*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x4118;
evalcond[3]=((-1.0)*x4118);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst122;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst122;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4119=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x4119)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4119)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4123=IKPowWithIntegerCheck(gconst122,-1);
if(!x4123.valid){
continue;
}
IkReal x4120=x4123.value;
CheckValue<IkReal> x4124=IKPowWithIntegerCheck(px,-1);
if(!x4124.valid){
continue;
}
IkReal x4121=x4124.value;
IkReal x4122=(x4120*x4121);
if( IKabs(((0.85)*x4122)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4122*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4122))+IKsqr(((0.0555555555555556)*x4122*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4122), ((0.0555555555555556)*x4122*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4125=IKcos(j1);
IkReal x4126=IKsin(j1);
IkReal x4127=(gconst122*px);
IkReal x4128=(x4125*x4127);
evalcond[0]=((-0.85)*x4125);
evalcond[1]=x4128;
evalcond[2]=((-0.85)+((x4126*x4127)));
evalcond[3]=((((0.85)*x4126))+(((-1.0)*x4127)));
evalcond[4]=((-0.2125)+(((1.1)*x4126*x4127))+(((-1.0)*pp))+(((-0.09)*x4128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4129=IKPowWithIntegerCheck(gconst122,-1);
if(!x4129.valid){
continue;
}
CheckValue<IkReal> x4130=IKPowWithIntegerCheck(px,-1);
if(!x4130.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst122*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4129.value)*(x4130.value)*(((-361.25)+(((2200.0)*(gconst122*gconst122)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst122*px))+IKsqr(((0.0065359477124183)*(x4129.value)*(x4130.value)*(((-361.25)+(((2200.0)*(gconst122*gconst122)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst122*px), ((0.0065359477124183)*(x4129.value)*(x4130.value)*(((-361.25)+(((2200.0)*(gconst122*gconst122)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4131=IKcos(j1);
IkReal x4132=IKsin(j1);
IkReal x4133=(gconst122*px);
IkReal x4134=(x4131*x4133);
evalcond[0]=((-0.85)*x4131);
evalcond[1]=x4134;
evalcond[2]=((-0.85)+((x4132*x4133)));
evalcond[3]=((((0.85)*x4132))+(((-1.0)*x4133)));
evalcond[4]=((-0.2125)+(((1.1)*x4132*x4133))+(((-0.09)*x4134))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4135=((0.045)*cj3);
IkReal x4136=((0.3)*sj3);
IkReal x4137=(gconst121*py);
IkReal x4138=(gconst122*px);
IkReal x4139=((0.045)*x4138);
CheckValue<IkReal> x4140=IKPowWithIntegerCheck((((x4135*x4138))+((x4135*x4137))+(((-1.0)*x4139))+(((-0.045)*x4137))+(((-1.0)*x4136*x4137))+(((-1.0)*x4136*x4138))),-1);
if(!x4140.valid){
continue;
}
CheckValue<IkReal> x4141=IKPowWithIntegerCheck((x4138+x4137),-1);
if(!x4141.valid){
continue;
}
if( IKabs(((x4140.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4141.value)*(((-0.045)+x4135+(((-1.0)*x4136)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4140.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x4141.value)*(((-0.045)+x4135+(((-1.0)*x4136))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4140.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x4141.value)*(((-0.045)+x4135+(((-1.0)*x4136))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4142=IKsin(j1);
IkReal x4143=IKcos(j1);
IkReal x4144=((0.3)*cj3);
IkReal x4145=(gconst121*py);
IkReal x4146=((0.045)*cj3);
IkReal x4147=((0.045)*sj3);
IkReal x4148=(gconst122*px);
IkReal x4149=((0.3)*sj3);
IkReal x4150=((0.045)*x4142);
IkReal x4151=((1.1)*x4142);
IkReal x4152=((0.09)*x4143);
evalcond[0]=((-0.55)+((x4142*x4145))+((x4142*x4148))+(((-1.0)*x4147))+(((-1.0)*x4144)));
evalcond[1]=((0.045)+((x4143*x4148))+((x4143*x4145))+x4149+(((-1.0)*x4146)));
evalcond[2]=((-0.2125)+((x4145*x4151))+(((-1.0)*x4148*x4152))+(((-1.0)*pp))+(((-1.0)*x4145*x4152))+((x4148*x4151)));
evalcond[3]=(((x4142*x4146))+(((-1.0)*x4142*x4149))+(((-1.0)*x4143*x4144))+(((-1.0)*x4143*x4147))+(((-0.55)*x4143))+(((-1.0)*x4150)));
evalcond[4]=((((0.55)*x4142))+((x4142*x4147))+((x4142*x4144))+((x4143*x4146))+(((-1.0)*x4145))+(((-1.0)*x4148))+(((-1.0)*x4143*x4149))+(((-0.045)*x4143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4153=(gconst122*px);
IkReal x4154=((0.3)*cj3);
IkReal x4155=(gconst121*py);
IkReal x4156=((0.045)*sj3);
CheckValue<IkReal> x4157=IKPowWithIntegerCheck((x4153+x4155),-1);
if(!x4157.valid){
continue;
}
CheckValue<IkReal> x4158=IKPowWithIntegerCheck(((((-1.0)*x4155*x4156))+(((-1.0)*x4153*x4154))+(((-1.0)*x4153*x4156))+(((-1.0)*x4154*x4155))+(((-0.55)*x4155))+(((-0.55)*x4153))),-1);
if(!x4158.valid){
continue;
}
if( IKabs(((x4157.value)*(((0.55)+x4156+x4154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4158.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4157.value)*(((0.55)+x4156+x4154))))+IKsqr(((x4158.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4157.value)*(((0.55)+x4156+x4154))), ((x4158.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4159=IKsin(j1);
IkReal x4160=IKcos(j1);
IkReal x4161=((0.3)*cj3);
IkReal x4162=(gconst121*py);
IkReal x4163=((0.045)*cj3);
IkReal x4164=((0.045)*sj3);
IkReal x4165=(gconst122*px);
IkReal x4166=((0.3)*sj3);
IkReal x4167=((0.045)*x4159);
IkReal x4168=((1.1)*x4159);
IkReal x4169=((0.09)*x4160);
evalcond[0]=((-0.55)+(((-1.0)*x4161))+(((-1.0)*x4164))+((x4159*x4165))+((x4159*x4162)));
evalcond[1]=((0.045)+(((-1.0)*x4163))+((x4160*x4165))+((x4160*x4162))+x4166);
evalcond[2]=((-0.2125)+((x4165*x4168))+(((-1.0)*x4165*x4169))+(((-1.0)*pp))+(((-1.0)*x4162*x4169))+((x4162*x4168)));
evalcond[3]=((((-1.0)*x4159*x4166))+(((-1.0)*x4167))+(((-1.0)*x4160*x4164))+(((-1.0)*x4160*x4161))+(((-0.55)*x4160))+((x4159*x4163)));
evalcond[4]=((((-1.0)*x4165))+(((-1.0)*x4162))+(((-1.0)*x4160*x4166))+(((-0.045)*x4160))+((x4160*x4163))+((x4159*x4161))+((x4159*x4164))+(((0.55)*x4159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4170 = IKatan2WithCheck((gconst134*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst134*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4170.valid){
continue;
}
j1array[0]=x4170.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4171=IKsin(j1);
IkReal x4172=IKcos(j1);
IkReal x4173=((0.3)*cj3);
IkReal x4174=(gconst121*py);
IkReal x4175=((0.045)*cj3);
IkReal x4176=((0.045)*sj3);
IkReal x4177=(gconst122*px);
IkReal x4178=((0.3)*sj3);
IkReal x4179=((0.045)*x4171);
IkReal x4180=((1.1)*x4171);
IkReal x4181=((0.09)*x4172);
evalcond[0]=((-0.55)+(((-1.0)*x4176))+(((-1.0)*x4173))+((x4171*x4177))+((x4171*x4174)));
evalcond[1]=((0.045)+(((-1.0)*x4175))+x4178+((x4172*x4174))+((x4172*x4177)));
evalcond[2]=((-0.2125)+(((-1.0)*x4177*x4181))+(((-1.0)*x4174*x4181))+((x4177*x4180))+(((-1.0)*pp))+((x4174*x4180)));
evalcond[3]=((((-1.0)*x4179))+(((-1.0)*x4171*x4178))+(((-1.0)*x4172*x4176))+(((-1.0)*x4172*x4173))+((x4171*x4175))+(((-0.55)*x4172)));
evalcond[4]=((((-1.0)*x4172*x4178))+(((0.55)*x4171))+(((-1.0)*x4177))+(((-1.0)*x4174))+((x4171*x4176))+((x4171*x4173))+((x4172*x4175))+(((-0.045)*x4172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst123;
CheckValue<IkReal> x4182 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x4182.valid){
continue;
}
gconst123=((3.14159265358979)+(((-1.0)*(x4182.value))));
IkReal gconst124;
gconst124=IKsin(gconst123);
IkReal gconst125;
gconst125=IKcos(gconst123);
IkReal x4183=(gconst124*px);
IkReal x4184=(gconst125*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst123))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x4184))+x4183);
evalcond[3]=((((-1.0)*x4183))+x4184);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst135;
gconst135=IKsign((((gconst124*py))+((gconst125*px))));
dummyeval[0]=(((gconst124*py))+((gconst125*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4185=(gconst124*py);
IkReal x4186=((1.0)*sj3);
IkReal x4187=(gconst125*px);
IkReal x4188=((6.66666666666667)*cj3);
dummyeval[0]=(x4185+x4187);
dummyeval[1]=((((-12.2222222222222)*x4187))+(((-12.2222222222222)*x4185))+(((-1.0)*x4187*x4188))+(((-1.0)*x4186*x4187))+(((-1.0)*x4185*x4188))+(((-1.0)*x4185*x4186)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4189=((6.66666666666667)*sj3);
IkReal x4190=(gconst124*py);
IkReal x4191=(gconst125*px);
dummyeval[0]=(((cj3*x4191))+((cj3*x4190))+(((-1.0)*x4190))+(((-1.0)*x4191))+(((-1.0)*x4189*x4190))+(((-1.0)*x4189*x4191)));
dummyeval[1]=(x4190+x4191);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4192=(gconst124*px);
IkReal x4193=(gconst125*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x4193))+x4192);
evalcond[3]=((((-1.0)*x4192))+x4193);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst125*px))+(((-1.0)*gconst124*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4194=(gconst124*py);
IkReal x4195=(gconst125*px);
dummyeval[0]=(x4194+x4195);
dummyeval[1]=((((-2.0)*x4194*x4195))+(((-1.0)*(x4195*x4195)))+(((-1.0)*(x4194*x4194))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4196=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x4196)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4196)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4197=(gconst125*px);
IkReal x4198=(gconst124*py);
IkReal x4199=((20.0)*pp);
CheckValue<IkReal> x4200=IKPowWithIntegerCheck(((((20.0)*x4197))+(((20.0)*x4198))),-1);
if(!x4200.valid){
continue;
}
CheckValue<IkReal> x4201=IKPowWithIntegerCheck(((((-1.8)*(x4198*x4198)))+(((-3.6)*x4197*x4198))+(((-1.8)*(x4197*x4197)))),-1);
if(!x4201.valid){
continue;
}
if( IKabs(((17.0)*(x4200.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4201.value)*(((((-14.45)*x4198))+(((-14.45)*x4197))+((x4197*x4199))+((x4198*x4199)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x4200.value)))+IKsqr(((x4201.value)*(((((-14.45)*x4198))+(((-14.45)*x4197))+((x4197*x4199))+((x4198*x4199))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x4200.value)), ((x4201.value)*(((((-14.45)*x4198))+(((-14.45)*x4197))+((x4197*x4199))+((x4198*x4199))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4202=IKcos(j1);
IkReal x4203=IKsin(j1);
IkReal x4204=(gconst125*px);
IkReal x4205=(gconst124*py*x4203);
IkReal x4206=(gconst124*py*x4202);
evalcond[0]=((-0.85)*x4202);
evalcond[1]=(((x4202*x4204))+x4206);
evalcond[2]=((-0.85)+((x4203*x4204))+x4205);
evalcond[3]=((((0.85)*x4203))+(((-1.0)*x4204))+(((-1.0)*gconst124*py)));
evalcond[4]=((-0.2125)+(((1.1)*x4205))+(((-0.09)*x4202*x4204))+(((1.1)*x4203*x4204))+(((-1.0)*pp))+(((-0.09)*x4206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4207=(gconst125*px);
IkReal x4208=(gconst124*py);
CheckValue<IkReal> x4209=IKPowWithIntegerCheck(((((-1.53)*x4207))+(((-1.53)*x4208))),-1);
if(!x4209.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x4208))+(((1.17647058823529)*x4207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4209.value)*(((3.6125)+(((17.0)*pp))+(((-44.0)*x4207*x4208))+(((-22.0)*(x4207*x4207)))+(((-22.0)*(x4208*x4208))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x4208))+(((1.17647058823529)*x4207))))+IKsqr(((x4209.value)*(((3.6125)+(((17.0)*pp))+(((-44.0)*x4207*x4208))+(((-22.0)*(x4207*x4207)))+(((-22.0)*(x4208*x4208)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x4208))+(((1.17647058823529)*x4207))), ((x4209.value)*(((3.6125)+(((17.0)*pp))+(((-44.0)*x4207*x4208))+(((-22.0)*(x4207*x4207)))+(((-22.0)*(x4208*x4208)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4210=IKcos(j1);
IkReal x4211=IKsin(j1);
IkReal x4212=(gconst125*px);
IkReal x4213=(gconst124*py*x4211);
IkReal x4214=(gconst124*py*x4210);
evalcond[0]=((-0.85)*x4210);
evalcond[1]=(((x4210*x4212))+x4214);
evalcond[2]=((-0.85)+x4213+((x4211*x4212)));
evalcond[3]=((((0.85)*x4211))+(((-1.0)*x4212))+(((-1.0)*gconst124*py)));
evalcond[4]=((-0.2125)+(((1.1)*x4213))+(((-0.09)*x4214))+(((1.1)*x4211*x4212))+(((-1.0)*pp))+(((-0.09)*x4210*x4212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4215=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x4215))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x4215)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4217 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4217.valid){
continue;
}
IkReal x4216=x4217.value;
j1array[0]=((-1.0)*x4216);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4216)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4218=IKsin(j1);
IkReal x4219=IKcos(j1);
IkReal x4220=((0.045)*x4219);
evalcond[0]=((((-1.0)*x4220))+(((0.3)*cj3*x4218))+(((0.045)*sj3*x4218))+((cj3*x4220))+(((0.55)*x4218))+(((-0.3)*sj3*x4219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4221=(gconst125*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x4221);
evalcond[3]=x4221;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst124;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst124;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4222=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x4222)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4222)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4226=IKPowWithIntegerCheck(gconst124,-1);
if(!x4226.valid){
continue;
}
IkReal x4223=x4226.value;
CheckValue<IkReal> x4227=IKPowWithIntegerCheck(py,-1);
if(!x4227.valid){
continue;
}
IkReal x4224=x4227.value;
IkReal x4225=(x4223*x4224);
if( IKabs(((0.85)*x4225)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4225*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4225))+IKsqr(((0.0555555555555556)*x4225*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4225), ((0.0555555555555556)*x4225*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4228=IKcos(j1);
IkReal x4229=IKsin(j1);
IkReal x4230=(gconst124*py*x4229);
IkReal x4231=(gconst124*py*x4228);
evalcond[0]=((-0.85)*x4228);
evalcond[1]=x4231;
evalcond[2]=((-0.85)+x4230);
evalcond[3]=((((0.85)*x4229))+(((-1.0)*gconst124*py)));
evalcond[4]=((-0.2125)+(((-0.09)*x4231))+(((-1.0)*pp))+(((1.1)*x4230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4232=IKPowWithIntegerCheck(gconst124,-1);
if(!x4232.valid){
continue;
}
CheckValue<IkReal> x4233=IKPowWithIntegerCheck(py,-1);
if(!x4233.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst124*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4232.value)*(x4233.value)*(((-361.25)+(((-1700.0)*pp))+(((2200.0)*(gconst124*gconst124)*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst124*py))+IKsqr(((0.0065359477124183)*(x4232.value)*(x4233.value)*(((-361.25)+(((-1700.0)*pp))+(((2200.0)*(gconst124*gconst124)*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst124*py), ((0.0065359477124183)*(x4232.value)*(x4233.value)*(((-361.25)+(((-1700.0)*pp))+(((2200.0)*(gconst124*gconst124)*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4234=IKcos(j1);
IkReal x4235=IKsin(j1);
IkReal x4236=(gconst124*py*x4235);
IkReal x4237=(gconst124*py*x4234);
evalcond[0]=((-0.85)*x4234);
evalcond[1]=x4237;
evalcond[2]=((-0.85)+x4236);
evalcond[3]=((((0.85)*x4235))+(((-1.0)*gconst124*py)));
evalcond[4]=((-0.2125)+(((-0.09)*x4237))+(((-1.0)*pp))+(((1.1)*x4236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4238=(gconst124*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x4238;
evalcond[3]=((-1.0)*x4238);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst125;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst125;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4239=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x4239)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4239)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4243=IKPowWithIntegerCheck(gconst125,-1);
if(!x4243.valid){
continue;
}
IkReal x4240=x4243.value;
CheckValue<IkReal> x4244=IKPowWithIntegerCheck(px,-1);
if(!x4244.valid){
continue;
}
IkReal x4241=x4244.value;
IkReal x4242=(x4240*x4241);
if( IKabs(((0.85)*x4242)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4242*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4242))+IKsqr(((0.0555555555555556)*x4242*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4242), ((0.0555555555555556)*x4242*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4245=IKcos(j1);
IkReal x4246=IKsin(j1);
IkReal x4247=(gconst125*px);
IkReal x4248=(x4246*x4247);
evalcond[0]=((-0.85)*x4245);
evalcond[1]=(x4245*x4247);
evalcond[2]=((-0.85)+x4248);
evalcond[3]=((((0.85)*x4246))+(((-1.0)*x4247)));
evalcond[4]=((-0.2125)+(((1.1)*x4248))+(((-0.09)*x4245*x4247))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4249=IKPowWithIntegerCheck(gconst125,-1);
if(!x4249.valid){
continue;
}
CheckValue<IkReal> x4250=IKPowWithIntegerCheck(px,-1);
if(!x4250.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst125*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4249.value)*(x4250.value)*(((-361.25)+(((2200.0)*(gconst125*gconst125)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst125*px))+IKsqr(((0.0065359477124183)*(x4249.value)*(x4250.value)*(((-361.25)+(((2200.0)*(gconst125*gconst125)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst125*px), ((0.0065359477124183)*(x4249.value)*(x4250.value)*(((-361.25)+(((2200.0)*(gconst125*gconst125)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4251=IKcos(j1);
IkReal x4252=IKsin(j1);
IkReal x4253=(gconst125*px);
IkReal x4254=(x4252*x4253);
evalcond[0]=((-0.85)*x4251);
evalcond[1]=(x4251*x4253);
evalcond[2]=((-0.85)+x4254);
evalcond[3]=((((-1.0)*x4253))+(((0.85)*x4252)));
evalcond[4]=((-0.2125)+(((1.1)*x4254))+(((-1.0)*pp))+(((-0.09)*x4251*x4253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4255=((0.3)*sj3);
IkReal x4256=((0.045)*cj3);
IkReal x4257=(gconst124*py);
IkReal x4258=(gconst125*px);
IkReal x4259=((0.045)*x4258);
CheckValue<IkReal> x4260=IKPowWithIntegerCheck(((((-0.045)*x4257))+(((-1.0)*x4255*x4257))+(((-1.0)*x4255*x4258))+(((-1.0)*x4259))+((x4256*x4258))+((x4256*x4257))),-1);
if(!x4260.valid){
continue;
}
CheckValue<IkReal> x4261=IKPowWithIntegerCheck((x4258+x4257),-1);
if(!x4261.valid){
continue;
}
if( IKabs(((x4260.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4261.value)*(((-0.045)+(((-1.0)*x4255))+x4256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4260.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x4261.value)*(((-0.045)+(((-1.0)*x4255))+x4256))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4260.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x4261.value)*(((-0.045)+(((-1.0)*x4255))+x4256))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4262=IKsin(j1);
IkReal x4263=IKcos(j1);
IkReal x4264=(gconst125*px);
IkReal x4265=((0.3)*sj3);
IkReal x4266=((0.045)*cj3);
IkReal x4267=(gconst124*py);
IkReal x4268=((0.045)*sj3);
IkReal x4269=((0.3)*cj3);
IkReal x4270=((1.1)*x4262);
IkReal x4271=(cj3*x4262);
IkReal x4272=((0.09)*x4263);
evalcond[0]=((-0.55)+((x4262*x4264))+((x4262*x4267))+(((-1.0)*x4268))+(((-1.0)*x4269)));
evalcond[1]=((0.045)+((x4263*x4264))+((x4263*x4267))+x4265+(((-1.0)*x4266)));
evalcond[2]=((-0.2125)+((x4267*x4270))+(((-1.0)*x4264*x4272))+((x4264*x4270))+(((-1.0)*pp))+(((-1.0)*x4267*x4272)));
evalcond[3]=((((-1.0)*x4263*x4268))+(((-1.0)*x4263*x4269))+(((-0.55)*x4263))+(((-0.045)*x4262))+((x4262*x4266))+(((-1.0)*x4262*x4265)));
evalcond[4]=((((-1.0)*x4263*x4265))+(((-0.045)*x4263))+((x4263*x4266))+((x4262*x4268))+((x4262*x4269))+(((0.55)*x4262))+(((-1.0)*x4267))+(((-1.0)*x4264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4273=(gconst125*px);
IkReal x4274=((0.3)*cj3);
IkReal x4275=((0.045)*sj3);
IkReal x4276=(gconst124*py);
CheckValue<IkReal> x4277=IKPowWithIntegerCheck((x4273+x4276),-1);
if(!x4277.valid){
continue;
}
CheckValue<IkReal> x4278=IKPowWithIntegerCheck(((((-1.0)*x4273*x4274))+(((-1.0)*x4273*x4275))+(((-1.0)*x4275*x4276))+(((-0.55)*x4273))+(((-0.55)*x4276))+(((-1.0)*x4274*x4276))),-1);
if(!x4278.valid){
continue;
}
if( IKabs(((x4277.value)*(((0.55)+x4275+x4274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4278.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4277.value)*(((0.55)+x4275+x4274))))+IKsqr(((x4278.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4277.value)*(((0.55)+x4275+x4274))), ((x4278.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4279=IKsin(j1);
IkReal x4280=IKcos(j1);
IkReal x4281=(gconst125*px);
IkReal x4282=((0.3)*sj3);
IkReal x4283=((0.045)*cj3);
IkReal x4284=(gconst124*py);
IkReal x4285=((0.045)*sj3);
IkReal x4286=((0.3)*cj3);
IkReal x4287=((1.1)*x4279);
IkReal x4288=(cj3*x4279);
IkReal x4289=((0.09)*x4280);
evalcond[0]=((-0.55)+(((-1.0)*x4285))+(((-1.0)*x4286))+((x4279*x4284))+((x4279*x4281)));
evalcond[1]=((0.045)+(((-1.0)*x4283))+((x4280*x4281))+((x4280*x4284))+x4282);
evalcond[2]=((-0.2125)+((x4284*x4287))+((x4281*x4287))+(((-1.0)*pp))+(((-1.0)*x4284*x4289))+(((-1.0)*x4281*x4289)));
evalcond[3]=(((x4279*x4283))+(((-0.55)*x4280))+(((-0.045)*x4279))+(((-1.0)*x4280*x4285))+(((-1.0)*x4280*x4286))+(((-1.0)*x4279*x4282)));
evalcond[4]=(((x4280*x4283))+((x4279*x4285))+((x4279*x4286))+(((-1.0)*x4280*x4282))+(((-0.045)*x4280))+(((-1.0)*x4284))+(((-1.0)*x4281))+(((0.55)*x4279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4290 = IKatan2WithCheck((gconst135*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst135*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4290.valid){
continue;
}
j1array[0]=x4290.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4291=IKsin(j1);
IkReal x4292=IKcos(j1);
IkReal x4293=(gconst125*px);
IkReal x4294=((0.3)*sj3);
IkReal x4295=((0.045)*cj3);
IkReal x4296=(gconst124*py);
IkReal x4297=((0.045)*sj3);
IkReal x4298=((0.3)*cj3);
IkReal x4299=((1.1)*x4291);
IkReal x4300=(cj3*x4291);
IkReal x4301=((0.09)*x4292);
evalcond[0]=((-0.55)+(((-1.0)*x4298))+(((-1.0)*x4297))+((x4291*x4293))+((x4291*x4296)));
evalcond[1]=((0.045)+((x4292*x4293))+((x4292*x4296))+(((-1.0)*x4295))+x4294);
evalcond[2]=((-0.2125)+((x4293*x4299))+(((-1.0)*x4296*x4301))+(((-1.0)*pp))+((x4296*x4299))+(((-1.0)*x4293*x4301)));
evalcond[3]=((((-1.0)*x4291*x4294))+((x4291*x4295))+(((-0.55)*x4292))+(((-1.0)*x4292*x4297))+(((-1.0)*x4292*x4298))+(((-0.045)*x4291)));
evalcond[4]=(((x4292*x4295))+(((-1.0)*x4293))+(((-1.0)*x4296))+((x4291*x4298))+((x4291*x4297))+(((-1.0)*x4292*x4294))+(((0.55)*x4291))+(((-0.045)*x4292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst126;
CheckValue<IkReal> x4302 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x4302.valid){
continue;
}
gconst126=((-1.0)*(x4302.value));
IkReal gconst127;
gconst127=IKsin(gconst126);
IkReal gconst128;
gconst128=IKcos(gconst126);
IkReal x4303=(gconst127*px);
IkReal x4304=(gconst128*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst126))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x4304))+x4303);
evalcond[3]=((((-1.0)*x4303))+x4304);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst136;
gconst136=IKsign((((gconst127*py))+((gconst128*px))));
dummyeval[0]=(((gconst127*py))+((gconst128*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4305=(gconst128*px);
IkReal x4306=((1.0)*sj3);
IkReal x4307=(gconst127*py);
IkReal x4308=((6.66666666666667)*cj3);
dummyeval[0]=(x4307+x4305);
dummyeval[1]=((((-12.2222222222222)*x4305))+(((-12.2222222222222)*x4307))+(((-1.0)*x4307*x4308))+(((-1.0)*x4305*x4308))+(((-1.0)*x4305*x4306))+(((-1.0)*x4306*x4307)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4309=(gconst127*py);
IkReal x4310=((6.66666666666667)*sj3);
IkReal x4311=(gconst128*px);
dummyeval[0]=(((cj3*x4309))+((cj3*x4311))+(((-1.0)*x4310*x4311))+(((-1.0)*x4309*x4310))+(((-1.0)*x4309))+(((-1.0)*x4311)));
dummyeval[1]=(x4311+x4309);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4312=(gconst127*px);
IkReal x4313=(gconst128*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=(x4312+(((-1.0)*x4313)));
evalcond[3]=(x4313+(((-1.0)*x4312)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst127*py))+(((-1.0)*gconst128*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4314=(gconst127*py);
IkReal x4315=(gconst128*px);
dummyeval[0]=(x4314+x4315);
dummyeval[1]=((((-2.0)*x4314*x4315))+(((-1.0)*(x4314*x4314)))+(((-1.0)*(x4315*x4315))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4316=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x4316)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4316)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4317=(gconst128*px);
IkReal x4318=(gconst127*py);
IkReal x4319=((20.0)*pp);
CheckValue<IkReal> x4320=IKPowWithIntegerCheck(((((20.0)*x4318))+(((20.0)*x4317))),-1);
if(!x4320.valid){
continue;
}
CheckValue<IkReal> x4321=IKPowWithIntegerCheck(((((-1.8)*(x4317*x4317)))+(((-1.8)*(x4318*x4318)))+(((-3.6)*x4317*x4318))),-1);
if(!x4321.valid){
continue;
}
if( IKabs(((17.0)*(x4320.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4321.value)*((((x4317*x4319))+(((-14.45)*x4318))+(((-14.45)*x4317))+((x4318*x4319)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x4320.value)))+IKsqr(((x4321.value)*((((x4317*x4319))+(((-14.45)*x4318))+(((-14.45)*x4317))+((x4318*x4319))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x4320.value)), ((x4321.value)*((((x4317*x4319))+(((-14.45)*x4318))+(((-14.45)*x4317))+((x4318*x4319))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4322=IKcos(j1);
IkReal x4323=IKsin(j1);
IkReal x4324=(gconst127*py);
IkReal x4325=(gconst128*px);
IkReal x4326=((1.1)*x4323);
IkReal x4327=(x4322*x4325);
evalcond[0]=((-0.85)*x4322);
evalcond[1]=(((x4322*x4324))+x4327);
evalcond[2]=((-0.85)+((x4323*x4324))+((x4323*x4325)));
evalcond[3]=((((-1.0)*x4325))+(((-1.0)*x4324))+(((0.85)*x4323)));
evalcond[4]=((-0.2125)+((x4324*x4326))+((x4325*x4326))+(((-1.0)*pp))+(((-0.09)*x4327))+(((-0.09)*x4322*x4324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4328=(gconst127*py);
IkReal x4329=(gconst128*px);
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(((((-1.53)*x4329))+(((-1.53)*x4328))),-1);
if(!x4330.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x4328))+(((1.17647058823529)*x4329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4330.value)*(((3.6125)+(((-44.0)*x4328*x4329))+(((17.0)*pp))+(((-22.0)*(x4329*x4329)))+(((-22.0)*(x4328*x4328))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x4328))+(((1.17647058823529)*x4329))))+IKsqr(((x4330.value)*(((3.6125)+(((-44.0)*x4328*x4329))+(((17.0)*pp))+(((-22.0)*(x4329*x4329)))+(((-22.0)*(x4328*x4328)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x4328))+(((1.17647058823529)*x4329))), ((x4330.value)*(((3.6125)+(((-44.0)*x4328*x4329))+(((17.0)*pp))+(((-22.0)*(x4329*x4329)))+(((-22.0)*(x4328*x4328)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4331=IKcos(j1);
IkReal x4332=IKsin(j1);
IkReal x4333=(gconst127*py);
IkReal x4334=(gconst128*px);
IkReal x4335=((1.1)*x4332);
IkReal x4336=(x4331*x4334);
evalcond[0]=((-0.85)*x4331);
evalcond[1]=(((x4331*x4333))+x4336);
evalcond[2]=((-0.85)+((x4332*x4333))+((x4332*x4334)));
evalcond[3]=((((-1.0)*x4333))+(((-1.0)*x4334))+(((0.85)*x4332)));
evalcond[4]=((-0.2125)+((x4334*x4335))+(((-0.09)*x4331*x4333))+(((-1.0)*pp))+(((-0.09)*x4336))+((x4333*x4335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4337=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x4337))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x4337)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4339 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
IkReal x4338=x4339.value;
j1array[0]=((-1.0)*x4338);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4338)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4340=IKsin(j1);
IkReal x4341=IKcos(j1);
IkReal x4342=((0.045)*x4341);
evalcond[0]=((((0.55)*x4340))+(((0.045)*sj3*x4340))+(((-1.0)*x4342))+(((0.3)*cj3*x4340))+(((-0.3)*sj3*x4341))+((cj3*x4342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4343=(gconst128*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x4343);
evalcond[3]=x4343;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst127;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst127;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4344=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x4344)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4344)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4348=IKPowWithIntegerCheck(gconst127,-1);
if(!x4348.valid){
continue;
}
IkReal x4345=x4348.value;
CheckValue<IkReal> x4349=IKPowWithIntegerCheck(py,-1);
if(!x4349.valid){
continue;
}
IkReal x4346=x4349.value;
IkReal x4347=(x4345*x4346);
if( IKabs(((0.85)*x4347)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4347*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4347))+IKsqr(((0.0555555555555556)*x4347*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4347), ((0.0555555555555556)*x4347*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4350=IKcos(j1);
IkReal x4351=IKsin(j1);
IkReal x4352=(gconst127*py);
evalcond[0]=((-0.85)*x4350);
evalcond[1]=(x4350*x4352);
evalcond[2]=((-0.85)+((x4351*x4352)));
evalcond[3]=((((0.85)*x4351))+(((-1.0)*x4352)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x4350*x4352))+(((1.1)*x4351*x4352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4353=IKPowWithIntegerCheck(gconst127,-1);
if(!x4353.valid){
continue;
}
CheckValue<IkReal> x4354=IKPowWithIntegerCheck(py,-1);
if(!x4354.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst127*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4353.value)*(x4354.value)*(((-361.25)+(((2200.0)*(gconst127*gconst127)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst127*py))+IKsqr(((0.0065359477124183)*(x4353.value)*(x4354.value)*(((-361.25)+(((2200.0)*(gconst127*gconst127)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst127*py), ((0.0065359477124183)*(x4353.value)*(x4354.value)*(((-361.25)+(((2200.0)*(gconst127*gconst127)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4355=IKcos(j1);
IkReal x4356=IKsin(j1);
IkReal x4357=(gconst127*py);
evalcond[0]=((-0.85)*x4355);
evalcond[1]=(x4355*x4357);
evalcond[2]=((-0.85)+((x4356*x4357)));
evalcond[3]=((((0.85)*x4356))+(((-1.0)*x4357)));
evalcond[4]=((-0.2125)+(((-0.09)*x4355*x4357))+(((-1.0)*pp))+(((1.1)*x4356*x4357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4358=(gconst127*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x4358;
evalcond[3]=((-1.0)*x4358);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst128;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst128;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4359=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x4359)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4359)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4363=IKPowWithIntegerCheck(gconst128,-1);
if(!x4363.valid){
continue;
}
IkReal x4360=x4363.value;
CheckValue<IkReal> x4364=IKPowWithIntegerCheck(px,-1);
if(!x4364.valid){
continue;
}
IkReal x4361=x4364.value;
IkReal x4362=(x4360*x4361);
if( IKabs(((0.85)*x4362)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4362*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4362))+IKsqr(((0.0555555555555556)*x4362*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4362), ((0.0555555555555556)*x4362*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4365=IKcos(j1);
IkReal x4366=IKsin(j1);
IkReal x4367=(gconst128*px);
IkReal x4368=(x4365*x4367);
evalcond[0]=((-0.85)*x4365);
evalcond[1]=x4368;
evalcond[2]=((-0.85)+((x4366*x4367)));
evalcond[3]=((((-1.0)*x4367))+(((0.85)*x4366)));
evalcond[4]=((-0.2125)+(((-0.09)*x4368))+(((1.1)*x4366*x4367))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(gconst128,-1);
if(!x4369.valid){
continue;
}
CheckValue<IkReal> x4370=IKPowWithIntegerCheck(px,-1);
if(!x4370.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst128*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4369.value)*(x4370.value)*(((-361.25)+(((2200.0)*(gconst128*gconst128)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst128*px))+IKsqr(((0.0065359477124183)*(x4369.value)*(x4370.value)*(((-361.25)+(((2200.0)*(gconst128*gconst128)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst128*px), ((0.0065359477124183)*(x4369.value)*(x4370.value)*(((-361.25)+(((2200.0)*(gconst128*gconst128)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4371=IKcos(j1);
IkReal x4372=IKsin(j1);
IkReal x4373=(gconst128*px);
IkReal x4374=(x4371*x4373);
evalcond[0]=((-0.85)*x4371);
evalcond[1]=x4374;
evalcond[2]=((-0.85)+((x4372*x4373)));
evalcond[3]=((((0.85)*x4372))+(((-1.0)*x4373)));
evalcond[4]=((-0.2125)+(((-0.09)*x4374))+(((1.1)*x4372*x4373))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4375=(gconst127*py);
IkReal x4376=((0.045)*cj3);
IkReal x4377=(gconst128*px);
IkReal x4378=((0.3)*sj3);
IkReal x4379=((0.045)*x4377);
CheckValue<IkReal> x4380=IKPowWithIntegerCheck(((((-1.0)*x4375*x4378))+((x4376*x4377))+(((-1.0)*x4377*x4378))+((x4375*x4376))+(((-1.0)*x4379))+(((-0.045)*x4375))),-1);
if(!x4380.valid){
continue;
}
CheckValue<IkReal> x4381=IKPowWithIntegerCheck((x4377+x4375),-1);
if(!x4381.valid){
continue;
}
if( IKabs(((x4380.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4381.value)*(((-0.045)+(((-1.0)*x4378))+x4376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4380.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x4381.value)*(((-0.045)+(((-1.0)*x4378))+x4376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4380.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x4381.value)*(((-0.045)+(((-1.0)*x4378))+x4376))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4382=IKsin(j1);
IkReal x4383=IKcos(j1);
IkReal x4384=((0.3)*cj3);
IkReal x4385=((0.045)*cj3);
IkReal x4386=(gconst127*py);
IkReal x4387=(gconst128*px);
IkReal x4388=((0.045)*sj3);
IkReal x4389=((0.3)*sj3);
IkReal x4390=((0.045)*x4382);
IkReal x4391=((0.09)*x4383);
IkReal x4392=((1.1)*x4382);
evalcond[0]=((-0.55)+((x4382*x4387))+((x4382*x4386))+(((-1.0)*x4388))+(((-1.0)*x4384)));
evalcond[1]=((0.045)+((x4383*x4386))+((x4383*x4387))+x4389+(((-1.0)*x4385)));
evalcond[2]=((-0.2125)+(((-1.0)*x4387*x4391))+(((-1.0)*pp))+(((-1.0)*x4386*x4391))+((x4387*x4392))+((x4386*x4392)));
evalcond[3]=((((-1.0)*x4390))+(((-1.0)*x4382*x4389))+((x4382*x4385))+(((-1.0)*x4383*x4384))+(((-1.0)*x4383*x4388))+(((-0.55)*x4383)));
evalcond[4]=((((0.55)*x4382))+(((-1.0)*x4386))+(((-1.0)*x4387))+((x4383*x4385))+((x4382*x4388))+((x4382*x4384))+(((-1.0)*x4383*x4389))+(((-0.045)*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4393=(gconst128*px);
IkReal x4394=((0.045)*sj3);
IkReal x4395=((0.3)*cj3);
IkReal x4396=(gconst127*py);
CheckValue<IkReal> x4397=IKPowWithIntegerCheck((x4393+x4396),-1);
if(!x4397.valid){
continue;
}
CheckValue<IkReal> x4398=IKPowWithIntegerCheck(((((-1.0)*x4395*x4396))+(((-1.0)*x4393*x4395))+(((-1.0)*x4393*x4394))+(((-1.0)*x4394*x4396))+(((-0.55)*x4396))+(((-0.55)*x4393))),-1);
if(!x4398.valid){
continue;
}
if( IKabs(((x4397.value)*(((0.55)+x4394+x4395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4398.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4397.value)*(((0.55)+x4394+x4395))))+IKsqr(((x4398.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4397.value)*(((0.55)+x4394+x4395))), ((x4398.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4399=IKsin(j1);
IkReal x4400=IKcos(j1);
IkReal x4401=((0.3)*cj3);
IkReal x4402=((0.045)*cj3);
IkReal x4403=(gconst127*py);
IkReal x4404=(gconst128*px);
IkReal x4405=((0.045)*sj3);
IkReal x4406=((0.3)*sj3);
IkReal x4407=((0.045)*x4399);
IkReal x4408=((0.09)*x4400);
IkReal x4409=((1.1)*x4399);
evalcond[0]=((-0.55)+(((-1.0)*x4405))+(((-1.0)*x4401))+((x4399*x4404))+((x4399*x4403)));
evalcond[1]=((0.045)+x4406+((x4400*x4403))+((x4400*x4404))+(((-1.0)*x4402)));
evalcond[2]=((-0.2125)+((x4403*x4409))+(((-1.0)*x4403*x4408))+((x4404*x4409))+(((-1.0)*pp))+(((-1.0)*x4404*x4408)));
evalcond[3]=((((-0.55)*x4400))+(((-1.0)*x4400*x4405))+(((-1.0)*x4400*x4401))+(((-1.0)*x4399*x4406))+(((-1.0)*x4407))+((x4399*x4402)));
evalcond[4]=((((0.55)*x4399))+((x4400*x4402))+(((-1.0)*x4400*x4406))+(((-1.0)*x4403))+(((-1.0)*x4404))+(((-0.045)*x4400))+((x4399*x4405))+((x4399*x4401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4410 = IKatan2WithCheck((gconst136*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst136*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4410.valid){
continue;
}
j1array[0]=x4410.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4411=IKsin(j1);
IkReal x4412=IKcos(j1);
IkReal x4413=((0.3)*cj3);
IkReal x4414=((0.045)*cj3);
IkReal x4415=(gconst127*py);
IkReal x4416=(gconst128*px);
IkReal x4417=((0.045)*sj3);
IkReal x4418=((0.3)*sj3);
IkReal x4419=((0.045)*x4411);
IkReal x4420=((0.09)*x4412);
IkReal x4421=((1.1)*x4411);
evalcond[0]=((-0.55)+(((-1.0)*x4413))+(((-1.0)*x4417))+((x4411*x4416))+((x4411*x4415)));
evalcond[1]=((0.045)+x4418+((x4412*x4416))+((x4412*x4415))+(((-1.0)*x4414)));
evalcond[2]=((-0.2125)+(((-1.0)*x4415*x4420))+(((-1.0)*pp))+(((-1.0)*x4416*x4420))+((x4416*x4421))+((x4415*x4421)));
evalcond[3]=((((-0.55)*x4412))+(((-1.0)*x4411*x4418))+(((-1.0)*x4419))+(((-1.0)*x4412*x4413))+(((-1.0)*x4412*x4417))+((x4411*x4414)));
evalcond[4]=(((x4412*x4414))+(((-1.0)*x4412*x4418))+(((-1.0)*x4416))+(((-1.0)*x4415))+(((-0.045)*x4412))+((x4411*x4417))+((x4411*x4413))+(((0.55)*x4411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst129;
CheckValue<IkReal> x4422 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x4422.valid){
continue;
}
gconst129=((3.14159265358979)+(((-1.0)*(x4422.value))));
IkReal gconst130;
gconst130=IKsin(gconst129);
IkReal gconst131;
gconst131=IKcos(gconst129);
IkReal x4423=(gconst131*py);
IkReal x4424=(gconst130*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst129))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x4424+(((-1.0)*x4423)));
evalcond[3]=(x4423+(((-1.0)*x4424)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst137;
gconst137=IKsign((((gconst130*py))+((gconst131*px))));
dummyeval[0]=(((gconst130*py))+((gconst131*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4425=(gconst130*py);
IkReal x4426=((6.66666666666667)*cj3);
IkReal x4427=(gconst131*px);
IkReal x4428=((1.0)*sj3);
dummyeval[0]=(x4427+x4425);
dummyeval[1]=((((-1.0)*x4425*x4426))+(((-1.0)*x4425*x4428))+(((-12.2222222222222)*x4425))+(((-12.2222222222222)*x4427))+(((-1.0)*x4426*x4427))+(((-1.0)*x4427*x4428)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4429=(gconst130*py);
IkReal x4430=((6.66666666666667)*sj3);
IkReal x4431=(gconst131*px);
dummyeval[0]=((((-1.0)*x4430*x4431))+(((-1.0)*x4429*x4430))+((cj3*x4431))+(((-1.0)*x4431))+((cj3*x4429))+(((-1.0)*x4429)));
dummyeval[1]=(x4431+x4429);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x4432=(gconst131*py);
IkReal x4433=(gconst130*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=(x4433+(((-1.0)*x4432)));
evalcond[3]=(x4432+(((-1.0)*x4433)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst131*px))+(((-1.0)*gconst130*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4434=(gconst130*py);
IkReal x4435=(gconst131*px);
dummyeval[0]=(x4435+x4434);
dummyeval[1]=((((-1.0)*(x4434*x4434)))+(((-1.0)*(x4435*x4435)))+(((-2.0)*x4434*x4435)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4436=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x4436)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4436)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4437=(gconst130*py);
IkReal x4438=(gconst131*px);
IkReal x4439=((20.0)*x4438);
CheckValue<IkReal> x4440=IKPowWithIntegerCheck(((((20.0)*x4437))+x4439),-1);
if(!x4440.valid){
continue;
}
CheckValue<IkReal> x4441=IKPowWithIntegerCheck(((((-1.8)*(x4437*x4437)))+(((-1.8)*(x4438*x4438)))+(((-3.6)*x4437*x4438))),-1);
if(!x4441.valid){
continue;
}
if( IKabs(((17.0)*(x4440.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4441.value)*(((((20.0)*pp*x4437))+((pp*x4439))+(((-14.45)*x4438))+(((-14.45)*x4437)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x4440.value)))+IKsqr(((x4441.value)*(((((20.0)*pp*x4437))+((pp*x4439))+(((-14.45)*x4438))+(((-14.45)*x4437))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x4440.value)), ((x4441.value)*(((((20.0)*pp*x4437))+((pp*x4439))+(((-14.45)*x4438))+(((-14.45)*x4437))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4442=IKcos(j1);
IkReal x4443=IKsin(j1);
IkReal x4444=(gconst130*py);
IkReal x4445=(gconst131*px);
IkReal x4446=((1.1)*x4443);
IkReal x4447=(x4442*x4445);
evalcond[0]=((-0.85)*x4442);
evalcond[1]=(x4447+((x4442*x4444)));
evalcond[2]=((-0.85)+((x4443*x4445))+((x4443*x4444)));
evalcond[3]=((((-1.0)*x4444))+(((-1.0)*x4445))+(((0.85)*x4443)));
evalcond[4]=((-0.2125)+(((-0.09)*x4447))+(((-1.0)*pp))+(((-0.09)*x4442*x4444))+((x4444*x4446))+((x4445*x4446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4448=(gconst130*py);
IkReal x4449=(gconst131*px);
CheckValue<IkReal> x4450=IKPowWithIntegerCheck(((((-1.53)*x4448))+(((-1.53)*x4449))),-1);
if(!x4450.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x4449))+(((1.17647058823529)*x4448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4450.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x4448*x4448)))+(((-44.0)*x4448*x4449))+(((-22.0)*(x4449*x4449))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x4449))+(((1.17647058823529)*x4448))))+IKsqr(((x4450.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x4448*x4448)))+(((-44.0)*x4448*x4449))+(((-22.0)*(x4449*x4449)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x4449))+(((1.17647058823529)*x4448))), ((x4450.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x4448*x4448)))+(((-44.0)*x4448*x4449))+(((-22.0)*(x4449*x4449)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4451=IKcos(j1);
IkReal x4452=IKsin(j1);
IkReal x4453=(gconst130*py);
IkReal x4454=(gconst131*px);
IkReal x4455=((1.1)*x4452);
IkReal x4456=(x4451*x4454);
evalcond[0]=((-0.85)*x4451);
evalcond[1]=(x4456+((x4451*x4453)));
evalcond[2]=((-0.85)+((x4452*x4453))+((x4452*x4454)));
evalcond[3]=((((-1.0)*x4454))+(((-1.0)*x4453))+(((0.85)*x4452)));
evalcond[4]=((-0.2125)+(((-0.09)*x4456))+((x4453*x4455))+(((-1.0)*pp))+(((-0.09)*x4451*x4453))+((x4454*x4455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4457=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x4457))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x4457)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4459 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4459.valid){
continue;
}
IkReal x4458=x4459.value;
j1array[0]=((-1.0)*x4458);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4458)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4460=IKsin(j1);
IkReal x4461=IKcos(j1);
IkReal x4462=((0.045)*x4461);
evalcond[0]=(((cj3*x4462))+(((-1.0)*x4462))+(((-0.3)*sj3*x4461))+(((0.3)*cj3*x4460))+(((0.55)*x4460))+(((0.045)*sj3*x4460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4463=(gconst131*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x4463);
evalcond[3]=x4463;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst130;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst130;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4464=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x4464)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4464)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4468=IKPowWithIntegerCheck(gconst130,-1);
if(!x4468.valid){
continue;
}
IkReal x4465=x4468.value;
CheckValue<IkReal> x4469=IKPowWithIntegerCheck(py,-1);
if(!x4469.valid){
continue;
}
IkReal x4466=x4469.value;
IkReal x4467=(x4465*x4466);
if( IKabs(((0.85)*x4467)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4467*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4467))+IKsqr(((0.0555555555555556)*x4467*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4467), ((0.0555555555555556)*x4467*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4470=IKcos(j1);
IkReal x4471=IKsin(j1);
IkReal x4472=(gconst130*py);
evalcond[0]=((-0.85)*x4470);
evalcond[1]=(x4470*x4472);
evalcond[2]=((-0.85)+((x4471*x4472)));
evalcond[3]=((((0.85)*x4471))+(((-1.0)*x4472)));
evalcond[4]=((-0.2125)+(((1.1)*x4471*x4472))+(((-1.0)*pp))+(((-0.09)*x4470*x4472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4473=IKPowWithIntegerCheck(gconst130,-1);
if(!x4473.valid){
continue;
}
CheckValue<IkReal> x4474=IKPowWithIntegerCheck(py,-1);
if(!x4474.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst130*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4473.value)*(x4474.value)*(((-361.25)+(((2200.0)*(gconst130*gconst130)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst130*py))+IKsqr(((0.0065359477124183)*(x4473.value)*(x4474.value)*(((-361.25)+(((2200.0)*(gconst130*gconst130)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst130*py), ((0.0065359477124183)*(x4473.value)*(x4474.value)*(((-361.25)+(((2200.0)*(gconst130*gconst130)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4475=IKcos(j1);
IkReal x4476=IKsin(j1);
IkReal x4477=(gconst130*py);
evalcond[0]=((-0.85)*x4475);
evalcond[1]=(x4475*x4477);
evalcond[2]=((-0.85)+((x4476*x4477)));
evalcond[3]=((((0.85)*x4476))+(((-1.0)*x4477)));
evalcond[4]=((-0.2125)+(((1.1)*x4476*x4477))+(((-1.0)*pp))+(((-0.09)*x4475*x4477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4478=(gconst130*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x4478;
evalcond[3]=((-1.0)*x4478);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst131;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst131;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4479=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x4479)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4479)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4483=IKPowWithIntegerCheck(gconst131,-1);
if(!x4483.valid){
continue;
}
IkReal x4480=x4483.value;
CheckValue<IkReal> x4484=IKPowWithIntegerCheck(px,-1);
if(!x4484.valid){
continue;
}
IkReal x4481=x4484.value;
IkReal x4482=(x4480*x4481);
if( IKabs(((0.85)*x4482)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4482*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4482))+IKsqr(((0.0555555555555556)*x4482*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4482), ((0.0555555555555556)*x4482*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4485=IKcos(j1);
IkReal x4486=IKsin(j1);
IkReal x4487=(gconst131*px);
IkReal x4488=(x4485*x4487);
evalcond[0]=((-0.85)*x4485);
evalcond[1]=x4488;
evalcond[2]=((-0.85)+((x4486*x4487)));
evalcond[3]=((((-1.0)*x4487))+(((0.85)*x4486)));
evalcond[4]=((-0.2125)+(((-0.09)*x4488))+(((-1.0)*pp))+(((1.1)*x4486*x4487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4489=IKPowWithIntegerCheck(gconst131,-1);
if(!x4489.valid){
continue;
}
CheckValue<IkReal> x4490=IKPowWithIntegerCheck(px,-1);
if(!x4490.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst131*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4489.value)*(x4490.value)*(((-361.25)+(((2200.0)*(gconst131*gconst131)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst131*px))+IKsqr(((0.0065359477124183)*(x4489.value)*(x4490.value)*(((-361.25)+(((2200.0)*(gconst131*gconst131)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst131*px), ((0.0065359477124183)*(x4489.value)*(x4490.value)*(((-361.25)+(((2200.0)*(gconst131*gconst131)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4491=IKcos(j1);
IkReal x4492=IKsin(j1);
IkReal x4493=(gconst131*px);
IkReal x4494=(x4491*x4493);
evalcond[0]=((-0.85)*x4491);
evalcond[1]=x4494;
evalcond[2]=((-0.85)+((x4492*x4493)));
evalcond[3]=((((-1.0)*x4493))+(((0.85)*x4492)));
evalcond[4]=((-0.2125)+(((1.1)*x4492*x4493))+(((-0.09)*x4494))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4495=((0.3)*sj3);
IkReal x4496=(gconst130*py);
IkReal x4497=((0.045)*cj3);
IkReal x4498=(gconst131*px);
IkReal x4499=((0.045)*x4498);
CheckValue<IkReal> x4500=IKPowWithIntegerCheck(((((-0.045)*x4496))+(((-1.0)*x4495*x4496))+(((-1.0)*x4495*x4498))+((x4497*x4498))+(((-1.0)*x4499))+((x4496*x4497))),-1);
if(!x4500.valid){
continue;
}
CheckValue<IkReal> x4501=IKPowWithIntegerCheck((x4496+x4498),-1);
if(!x4501.valid){
continue;
}
if( IKabs(((x4500.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4501.value)*(((-0.045)+x4497+(((-1.0)*x4495)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4500.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x4501.value)*(((-0.045)+x4497+(((-1.0)*x4495))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4500.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x4501.value)*(((-0.045)+x4497+(((-1.0)*x4495))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4502=IKsin(j1);
IkReal x4503=IKcos(j1);
IkReal x4504=(gconst131*px);
IkReal x4505=((0.045)*cj3);
IkReal x4506=(gconst130*py);
IkReal x4507=((0.3)*cj3);
IkReal x4508=((0.045)*sj3);
IkReal x4509=((0.3)*sj3);
IkReal x4510=((0.045)*x4502);
IkReal x4511=((1.1)*x4502);
IkReal x4512=(x4503*x4504);
evalcond[0]=((-0.55)+(((-1.0)*x4507))+(((-1.0)*x4508))+((x4502*x4506))+((x4502*x4504)));
evalcond[1]=((0.045)+(((-1.0)*x4505))+x4512+x4509+((x4503*x4506)));
evalcond[2]=((-0.2125)+((x4504*x4511))+(((-0.09)*x4512))+(((-1.0)*pp))+(((-0.09)*x4503*x4506))+((x4506*x4511)));
evalcond[3]=((((-0.55)*x4503))+(((-1.0)*x4503*x4507))+(((-1.0)*x4503*x4508))+((x4502*x4505))+(((-1.0)*x4510))+(((-1.0)*x4502*x4509)));
evalcond[4]=((((-0.045)*x4503))+(((-1.0)*x4503*x4509))+((x4503*x4505))+((x4502*x4508))+((x4502*x4507))+(((0.55)*x4502))+(((-1.0)*x4506))+(((-1.0)*x4504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4513=(gconst131*px);
IkReal x4514=((0.3)*cj3);
IkReal x4515=(gconst130*py);
IkReal x4516=((0.045)*sj3);
CheckValue<IkReal> x4517=IKPowWithIntegerCheck((x4513+x4515),-1);
if(!x4517.valid){
continue;
}
CheckValue<IkReal> x4518=IKPowWithIntegerCheck(((((-1.0)*x4513*x4516))+(((-1.0)*x4513*x4514))+(((-0.55)*x4513))+(((-0.55)*x4515))+(((-1.0)*x4515*x4516))+(((-1.0)*x4514*x4515))),-1);
if(!x4518.valid){
continue;
}
if( IKabs(((x4517.value)*(((0.55)+x4516+x4514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4518.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4517.value)*(((0.55)+x4516+x4514))))+IKsqr(((x4518.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4517.value)*(((0.55)+x4516+x4514))), ((x4518.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4519=IKsin(j1);
IkReal x4520=IKcos(j1);
IkReal x4521=(gconst131*px);
IkReal x4522=((0.045)*cj3);
IkReal x4523=(gconst130*py);
IkReal x4524=((0.3)*cj3);
IkReal x4525=((0.045)*sj3);
IkReal x4526=((0.3)*sj3);
IkReal x4527=((0.045)*x4519);
IkReal x4528=((1.1)*x4519);
IkReal x4529=(x4520*x4521);
evalcond[0]=((-0.55)+(((-1.0)*x4525))+(((-1.0)*x4524))+((x4519*x4521))+((x4519*x4523)));
evalcond[1]=((0.045)+(((-1.0)*x4522))+x4529+x4526+((x4520*x4523)));
evalcond[2]=((-0.2125)+((x4523*x4528))+(((-0.09)*x4520*x4523))+((x4521*x4528))+(((-1.0)*pp))+(((-0.09)*x4529)));
evalcond[3]=((((-1.0)*x4527))+(((-1.0)*x4520*x4525))+(((-1.0)*x4520*x4524))+(((-0.55)*x4520))+(((-1.0)*x4519*x4526))+((x4519*x4522)));
evalcond[4]=((((-1.0)*x4521))+(((-1.0)*x4523))+(((-0.045)*x4520))+(((-1.0)*x4520*x4526))+(((0.55)*x4519))+((x4520*x4522))+((x4519*x4525))+((x4519*x4524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4530 = IKatan2WithCheck((gconst137*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst137*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4530.valid){
continue;
}
j1array[0]=x4530.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4531=IKsin(j1);
IkReal x4532=IKcos(j1);
IkReal x4533=(gconst131*px);
IkReal x4534=((0.045)*cj3);
IkReal x4535=(gconst130*py);
IkReal x4536=((0.3)*cj3);
IkReal x4537=((0.045)*sj3);
IkReal x4538=((0.3)*sj3);
IkReal x4539=((0.045)*x4531);
IkReal x4540=((1.1)*x4531);
IkReal x4541=(x4532*x4533);
evalcond[0]=((-0.55)+((x4531*x4533))+((x4531*x4535))+(((-1.0)*x4536))+(((-1.0)*x4537)));
evalcond[1]=((0.045)+(((-1.0)*x4534))+x4541+x4538+((x4532*x4535)));
evalcond[2]=((-0.2125)+(((-0.09)*x4532*x4535))+((x4533*x4540))+(((-0.09)*x4541))+(((-1.0)*pp))+((x4535*x4540)));
evalcond[3]=(((x4531*x4534))+(((-1.0)*x4539))+(((-1.0)*x4531*x4538))+(((-0.55)*x4532))+(((-1.0)*x4532*x4537))+(((-1.0)*x4532*x4536)));
evalcond[4]=((((0.55)*x4531))+(((-1.0)*x4533))+(((-1.0)*x4535))+((x4531*x4537))+((x4531*x4536))+(((-0.045)*x4532))+((x4532*x4534))+(((-1.0)*x4532*x4538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4542=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x4542))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x4542)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4544 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4544.valid){
continue;
}
IkReal x4543=x4544.value;
j1array[0]=((-1.0)*x4543);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4543)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4545=IKsin(j1);
IkReal x4546=IKcos(j1);
IkReal x4547=((0.045)*x4546);
evalcond[0]=(((cj3*x4547))+(((-0.3)*sj3*x4546))+(((0.3)*cj3*x4545))+(((0.55)*x4545))+(((0.045)*sj3*x4545))+(((-1.0)*x4547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4548=(cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x4548);
evalcond[3]=x4548;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4549=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x4549)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x4549)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4550=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x4550)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x4550)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4551=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x4551)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4551)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4552=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)))))+(IKabs(IKabs(py))));
evalcond[1]=((0.7225)+(((-1.0)*x4552)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4552)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4553=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(py))));
evalcond[1]=((0.7225)+(((-1.0)*x4553)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4553)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4557=IKPowWithIntegerCheck(py,-1);
if(!x4557.valid){
continue;
}
IkReal x4554=x4557.value;
CheckValue<IkReal> x4558=IKPowWithIntegerCheck(sj0,-1);
if(!x4558.valid){
continue;
}
IkReal x4555=x4558.value;
IkReal x4556=(x4554*x4555);
if( IKabs(((0.85)*x4556)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4556*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4556))+IKsqr(((0.0555555555555556)*x4556*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4556), ((0.0555555555555556)*x4556*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4559=IKcos(j1);
IkReal x4560=IKsin(j1);
IkReal x4561=(py*sj0);
IkReal x4562=(x4560*x4561);
evalcond[0]=((-0.85)*x4559);
evalcond[1]=(x4559*x4561);
evalcond[2]=((-0.85)+x4562);
evalcond[3]=((((0.85)*x4560))+(((-1.0)*x4561)));
evalcond[4]=((-0.2125)+(((-0.09)*x4559*x4561))+(((-1.0)*pp))+(((1.1)*x4562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4563=IKPowWithIntegerCheck(py,-1);
if(!x4563.valid){
continue;
}
CheckValue<IkReal> x4564=IKPowWithIntegerCheck(sj0,-1);
if(!x4564.valid){
continue;
}
if( IKabs(((1.17647058823529)*py*sj0)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4563.value)*(x4564.value)*(((-361.25)+(((2200.0)*(py*py)*(sj0*sj0)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*py*sj0))+IKsqr(((0.0065359477124183)*(x4563.value)*(x4564.value)*(((-361.25)+(((2200.0)*(py*py)*(sj0*sj0)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*py*sj0), ((0.0065359477124183)*(x4563.value)*(x4564.value)*(((-361.25)+(((2200.0)*(py*py)*(sj0*sj0)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4565=IKcos(j1);
IkReal x4566=IKsin(j1);
IkReal x4567=(py*sj0);
IkReal x4568=(x4566*x4567);
evalcond[0]=((-0.85)*x4565);
evalcond[1]=(x4565*x4567);
evalcond[2]=((-0.85)+x4568);
evalcond[3]=((((0.85)*x4566))+(((-1.0)*x4567)));
evalcond[4]=((-0.2125)+(((-0.09)*x4565*x4567))+(((-1.0)*pp))+(((1.1)*x4568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4569=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((0.32595)*cj3))+(((-1.0)*x4569)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x4569)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4571 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4571.valid){
continue;
}
IkReal x4570=x4571.value;
j1array[0]=((-1.0)*x4570);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4570)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4572=IKsin(j1);
IkReal x4573=IKcos(j1);
IkReal x4574=((0.045)*x4573);
evalcond[0]=((((0.3)*cj3*x4572))+(((-1.0)*x4574))+(((0.045)*sj3*x4572))+(((-0.3)*sj3*x4573))+(((0.55)*x4572))+((cj3*x4574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4575=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((-1.0)*x4575))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x4575)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4577 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4577.valid){
continue;
}
IkReal x4576=x4577.value;
j1array[0]=((-1.0)*x4576);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4576)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4578=IKsin(j1);
IkReal x4579=IKcos(j1);
IkReal x4580=((0.045)*x4579);
evalcond[0]=((((-1.0)*x4580))+(((0.3)*cj3*x4578))+(((0.045)*sj3*x4578))+(((-0.3)*sj3*x4579))+(((0.55)*x4578))+((cj3*x4580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4581=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x4581;
evalcond[3]=((-1.0)*x4581);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4582=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x4582)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x4582)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4583=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x4583)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x4583)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4584=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x4584)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4584)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4585=((1.0)*pp);
evalcond[0]=((IKabs(IKabs(px)))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x4585)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4585)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4586=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(px))));
evalcond[1]=((0.7225)+(((-1.0)*x4586)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4586)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4590=IKPowWithIntegerCheck(cj0,-1);
if(!x4590.valid){
continue;
}
IkReal x4587=x4590.value;
CheckValue<IkReal> x4591=IKPowWithIntegerCheck(px,-1);
if(!x4591.valid){
continue;
}
IkReal x4588=x4591.value;
IkReal x4589=(x4587*x4588);
if( IKabs(((0.85)*x4589)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x4589*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x4589))+IKsqr(((0.0555555555555556)*x4589*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x4589), ((0.0555555555555556)*x4589*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4592=IKcos(j1);
IkReal x4593=IKsin(j1);
IkReal x4594=(cj0*px);
evalcond[0]=((-0.85)*x4592);
evalcond[1]=(x4592*x4594);
evalcond[2]=((-0.85)+((x4593*x4594)));
evalcond[3]=((((-1.0)*x4594))+(((0.85)*x4593)));
evalcond[4]=((-0.2125)+(((-0.09)*x4592*x4594))+(((1.1)*x4593*x4594))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4595=IKPowWithIntegerCheck(cj0,-1);
if(!x4595.valid){
continue;
}
CheckValue<IkReal> x4596=IKPowWithIntegerCheck(px,-1);
if(!x4596.valid){
continue;
}
if( IKabs(((1.17647058823529)*cj0*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x4595.value)*(x4596.value)*(((-361.25)+(((2200.0)*(cj0*cj0)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*cj0*px))+IKsqr(((0.0065359477124183)*(x4595.value)*(x4596.value)*(((-361.25)+(((2200.0)*(cj0*cj0)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*cj0*px), ((0.0065359477124183)*(x4595.value)*(x4596.value)*(((-361.25)+(((2200.0)*(cj0*cj0)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4597=IKcos(j1);
IkReal x4598=IKsin(j1);
IkReal x4599=(cj0*px);
evalcond[0]=((-0.85)*x4597);
evalcond[1]=(x4597*x4599);
evalcond[2]=((-0.85)+((x4598*x4599)));
evalcond[3]=((((-1.0)*x4599))+(((0.85)*x4598)));
evalcond[4]=((-0.2125)+(((-0.09)*x4597*x4599))+(((-1.0)*pp))+(((1.1)*x4598*x4599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4600=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((-1.0)*x4600))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x4600)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4602 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4602.valid){
continue;
}
IkReal x4601=x4602.value;
j1array[0]=((-1.0)*x4601);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4601)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4603=IKsin(j1);
IkReal x4604=IKcos(j1);
IkReal x4605=((0.045)*x4604);
evalcond[0]=((((0.3)*cj3*x4603))+(((-1.0)*x4605))+(((-0.3)*sj3*x4604))+((cj3*x4605))+(((0.045)*sj3*x4603))+(((0.55)*x4603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4606=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((-1.0)*x4606))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x4606)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4608 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4608.valid){
continue;
}
IkReal x4607=x4608.value;
j1array[0]=((-1.0)*x4607);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4607)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4609=IKsin(j1);
IkReal x4610=IKcos(j1);
IkReal x4611=((0.045)*x4610);
evalcond[0]=((((0.3)*cj3*x4609))+((cj3*x4611))+(((-0.3)*sj3*x4610))+(((-1.0)*x4611))+(((0.045)*sj3*x4609))+(((0.55)*x4609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4612=(cj0*px);
IkReal x4613=((0.3)*sj3);
IkReal x4614=(py*sj0);
IkReal x4615=((0.045)*cj3);
CheckValue<IkReal> x4616=IKPowWithIntegerCheck(((((-1.0)*x4612*x4613))+((x4614*x4615))+((x4612*x4615))+(((-1.0)*x4613*x4614))+(((-0.045)*x4614))+(((-0.045)*x4612))),-1);
if(!x4616.valid){
continue;
}
CheckValue<IkReal> x4617=IKPowWithIntegerCheck((x4612+x4614),-1);
if(!x4617.valid){
continue;
}
if( IKabs(((x4616.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4617.value)*(((-0.045)+x4615+(((-1.0)*x4613)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4616.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x4617.value)*(((-0.045)+x4615+(((-1.0)*x4613))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4616.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x4617.value)*(((-0.045)+x4615+(((-1.0)*x4613))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4618=IKsin(j1);
IkReal x4619=IKcos(j1);
IkReal x4620=((0.3)*cj3);
IkReal x4621=((0.045)*cj3);
IkReal x4622=(cj0*px);
IkReal x4623=(py*sj0);
IkReal x4624=((0.045)*sj3);
IkReal x4625=((0.3)*sj3);
IkReal x4626=((0.045)*x4618);
IkReal x4627=((0.09)*x4619);
IkReal x4628=((1.1)*x4618);
evalcond[0]=((-0.55)+((x4618*x4623))+((x4618*x4622))+(((-1.0)*x4620))+(((-1.0)*x4624)));
evalcond[1]=((0.045)+x4625+((x4619*x4623))+((x4619*x4622))+(((-1.0)*x4621)));
evalcond[2]=((-0.2125)+((x4623*x4628))+(((-1.0)*pp))+((x4622*x4628))+(((-1.0)*x4623*x4627))+(((-1.0)*x4622*x4627)));
evalcond[3]=((((-1.0)*x4618*x4625))+(((-1.0)*x4619*x4624))+(((-1.0)*x4619*x4620))+((x4618*x4621))+(((-0.55)*x4619))+(((-1.0)*x4626)));
evalcond[4]=((((0.55)*x4618))+((x4619*x4621))+(((-1.0)*x4622))+(((-1.0)*x4623))+(((-1.0)*x4619*x4625))+((x4618*x4624))+((x4618*x4620))+(((-0.045)*x4619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4629=(cj0*px);
IkReal x4630=((0.045)*sj3);
IkReal x4631=(py*sj0);
IkReal x4632=((0.3)*cj3);
CheckValue<IkReal> x4633=IKPowWithIntegerCheck((x4631+x4629),-1);
if(!x4633.valid){
continue;
}
CheckValue<IkReal> x4634=IKPowWithIntegerCheck(((((-0.55)*x4629))+(((-1.0)*x4630*x4631))+(((-1.0)*x4631*x4632))+(((-0.55)*x4631))+(((-1.0)*x4629*x4630))+(((-1.0)*x4629*x4632))),-1);
if(!x4634.valid){
continue;
}
if( IKabs(((x4633.value)*(((0.55)+x4632+x4630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4634.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4633.value)*(((0.55)+x4632+x4630))))+IKsqr(((x4634.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4633.value)*(((0.55)+x4632+x4630))), ((x4634.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4635=IKsin(j1);
IkReal x4636=IKcos(j1);
IkReal x4637=((0.3)*cj3);
IkReal x4638=((0.045)*cj3);
IkReal x4639=(cj0*px);
IkReal x4640=(py*sj0);
IkReal x4641=((0.045)*sj3);
IkReal x4642=((0.3)*sj3);
IkReal x4643=((0.045)*x4635);
IkReal x4644=((0.09)*x4636);
IkReal x4645=((1.1)*x4635);
evalcond[0]=((-0.55)+((x4635*x4640))+(((-1.0)*x4637))+(((-1.0)*x4641))+((x4635*x4639)));
evalcond[1]=((0.045)+((x4636*x4640))+(((-1.0)*x4638))+x4642+((x4636*x4639)));
evalcond[2]=((-0.2125)+(((-1.0)*x4640*x4644))+(((-1.0)*pp))+((x4639*x4645))+((x4640*x4645))+(((-1.0)*x4639*x4644)));
evalcond[3]=((((-1.0)*x4636*x4641))+(((-1.0)*x4643))+((x4635*x4638))+(((-1.0)*x4635*x4642))+(((-1.0)*x4636*x4637))+(((-0.55)*x4636)));
evalcond[4]=(((x4635*x4641))+(((-1.0)*x4636*x4642))+(((-1.0)*x4639))+(((-0.045)*x4636))+((x4636*x4638))+(((-1.0)*x4640))+((x4635*x4637))+(((0.55)*x4635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4646 = IKatan2WithCheck((gconst113*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst113*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4646.valid){
continue;
}
j1array[0]=x4646.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4647=IKsin(j1);
IkReal x4648=IKcos(j1);
IkReal x4649=((0.3)*cj3);
IkReal x4650=((0.045)*cj3);
IkReal x4651=(cj0*px);
IkReal x4652=(py*sj0);
IkReal x4653=((0.045)*sj3);
IkReal x4654=((0.3)*sj3);
IkReal x4655=((0.045)*x4647);
IkReal x4656=((0.09)*x4648);
IkReal x4657=((1.1)*x4647);
evalcond[0]=((-0.55)+(((-1.0)*x4653))+((x4647*x4651))+((x4647*x4652))+(((-1.0)*x4649)));
evalcond[1]=((0.045)+(((-1.0)*x4650))+x4654+((x4648*x4651))+((x4648*x4652)));
evalcond[2]=((-0.2125)+(((-1.0)*x4651*x4656))+(((-1.0)*pp))+((x4652*x4657))+(((-1.0)*x4652*x4656))+((x4651*x4657)));
evalcond[3]=((((-1.0)*x4655))+(((-0.55)*x4648))+((x4647*x4650))+(((-1.0)*x4647*x4654))+(((-1.0)*x4648*x4649))+(((-1.0)*x4648*x4653)));
evalcond[4]=(((x4647*x4653))+(((-1.0)*x4651))+(((-1.0)*x4652))+(((0.55)*x4647))+((x4647*x4649))+((x4648*x4650))+(((-1.0)*x4648*x4654))+(((-0.045)*x4648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4658=(cj2*pz);
IkReal x4659=((1.0)*cj0);
IkReal x4660=(cj0*px);
IkReal x4661=(py*sj0);
IkReal x4662=((0.55)*sj2);
IkReal x4663=(cj2*sj0);
IkReal x4664=((0.3)*cj3*sj2);
IkReal x4665=((0.045)*sj2*sj3);
IkReal x4666=(cj2*px*py);
CheckValue<IkReal> x4667 = IKatan2WithCheck((gconst67*(((((-1.0)*py*x4658*x4659))+((x4661*x4665))+((x4661*x4664))+((x4661*x4662))+((x4660*x4662))+((x4660*x4664))+((x4660*x4665))+((px*sj0*x4658))))),(gconst67*(((((-1.0)*x4659*x4663*(px*px)))+(((-1.0)*px*x4661*x4663))+((cj0*cj2*py*x4660))+((cj0*cj2*py*x4661))+((pz*x4665))+((pz*x4664))+((pz*x4662))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4667.valid){
continue;
}
j1array[0]=x4667.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4668=IKsin(j1);
IkReal x4669=IKcos(j1);
IkReal x4670=(px*sj2);
IkReal x4671=((0.3)*sj3);
IkReal x4672=((0.09)*sj0);
IkReal x4673=(cj2*px);
IkReal x4674=((0.045)*cj3);
IkReal x4675=((0.045)*cj2);
IkReal x4676=(py*sj0);
IkReal x4677=((0.045)*sj3);
IkReal x4678=((1.0)*cj0);
IkReal x4679=((0.3)*cj3);
IkReal x4680=(py*sj2);
IkReal x4681=(cj0*x4669);
IkReal x4682=(cj3*x4668);
IkReal x4683=(cj2*x4669);
IkReal x4684=(cj2*x4668);
IkReal x4685=(pz*x4669);
IkReal x4686=(cj0*px*x4668);
evalcond[0]=((-0.55)+x4686+x4685+((x4668*x4676))+(((-1.0)*x4677))+(((-1.0)*x4679)));
evalcond[1]=(((sj2*x4669*x4676))+((x4670*x4681))+((sj0*x4673))+(((-1.0)*pz*sj2*x4668))+(((-1.0)*cj2*py*x4678)));
evalcond[2]=(((x4668*x4675))+pz+((x4671*x4684))+(((-1.0)*x4669*x4679))+(((-1.0)*x4669*x4677))+(((-1.0)*x4674*x4684))+(((-0.55)*x4669)));
evalcond[3]=((0.045)+((sj0*x4670))+x4671+(((-1.0)*x4674))+(((-1.0)*x4669*x4673*x4678))+(((-1.0)*x4676*x4683))+((pz*x4684))+(((-1.0)*x4678*x4680)));
evalcond[4]=(((x4669*x4675))+(((0.55)*x4668))+(((-1.0)*x4676))+((x4668*x4677))+((x4668*x4679))+(((-1.0)*px*x4678))+((x4671*x4683))+(((-1.0)*x4674*x4683)));
evalcond[5]=((-0.2125)+(((-0.09)*pz*x4684))+(((0.09)*cj0*x4680))+(((1.1)*x4668*x4676))+(((0.09)*x4673*x4681))+(((1.1)*x4686))+(((1.1)*x4685))+(((-1.0)*pp))+((py*x4672*x4683))+(((-1.0)*x4670*x4672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4687=cj3*cj3;
IkReal x4688=sj3*sj3;
IkReal x4689=(cj2*sj3);
IkReal x4690=((0.0135)*cj2);
IkReal x4691=((1.0)*pz);
CheckValue<IkReal> x4692 = IKatan2WithCheck((gconst66*(((-0.3025)+(((-0.0495)*sj3))+(((-0.002025)*x4688))+(((-0.09)*x4687))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.33)*cj3))))),(gconst66*(((((-0.167025)*x4689))+(((-0.087975)*cj3*x4689))+(((-1.0)*x4688*x4690))+(((-0.02475)*cj2))+(((-1.0)*py*sj0*x4691))+(((-1.0)*cj0*px*x4691))+(((0.01125)*cj2*cj3))+((x4687*x4690))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4692.valid){
continue;
}
j1array[0]=x4692.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4693=IKsin(j1);
IkReal x4694=IKcos(j1);
IkReal x4695=(px*sj2);
IkReal x4696=((0.3)*sj3);
IkReal x4697=((0.09)*sj0);
IkReal x4698=(cj2*px);
IkReal x4699=((0.045)*cj3);
IkReal x4700=((0.045)*cj2);
IkReal x4701=(py*sj0);
IkReal x4702=((0.045)*sj3);
IkReal x4703=((1.0)*cj0);
IkReal x4704=((0.3)*cj3);
IkReal x4705=(py*sj2);
IkReal x4706=(cj0*x4694);
IkReal x4707=(cj3*x4693);
IkReal x4708=(cj2*x4694);
IkReal x4709=(cj2*x4693);
IkReal x4710=(pz*x4694);
IkReal x4711=(cj0*px*x4693);
evalcond[0]=((-0.55)+x4710+x4711+(((-1.0)*x4702))+(((-1.0)*x4704))+((x4693*x4701)));
evalcond[1]=((((-1.0)*cj2*py*x4703))+((x4695*x4706))+((sj2*x4694*x4701))+((sj0*x4698))+(((-1.0)*pz*sj2*x4693)));
evalcond[2]=((((-1.0)*x4694*x4702))+(((-1.0)*x4694*x4704))+(((-0.55)*x4694))+((x4696*x4709))+pz+(((-1.0)*x4699*x4709))+((x4693*x4700)));
evalcond[3]=((0.045)+(((-1.0)*x4701*x4708))+(((-1.0)*x4703*x4705))+x4696+((pz*x4709))+(((-1.0)*x4694*x4698*x4703))+(((-1.0)*x4699))+((sj0*x4695)));
evalcond[4]=((((-1.0)*x4701))+(((-1.0)*px*x4703))+(((0.55)*x4693))+((x4696*x4708))+((x4694*x4700))+(((-1.0)*x4699*x4708))+((x4693*x4704))+((x4693*x4702)));
evalcond[5]=((-0.2125)+((py*x4697*x4708))+(((0.09)*x4698*x4706))+(((0.09)*cj0*x4705))+(((-1.0)*pp))+(((-0.09)*pz*x4709))+(((1.1)*x4710))+(((1.1)*x4711))+(((-1.0)*x4695*x4697))+(((1.1)*x4693*x4701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x4712=((0.045)*sj2);
CheckValue<IkReal> x4715 = IKatan2WithCheck(((-1.0)*py),px,IKFAST_ATAN2_MAGTHRESH);
if(!x4715.valid){
continue;
}
IkReal x4713=((1.0)*(x4715.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x4716=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x4716.valid){
continue;
}
if( (((x4716.value)*(((((0.3)*sj2*sj3))+x4712+(((-1.0)*cj3*x4712)))))) < -1-IKFAST_SINCOS_THRESH || (((x4716.value)*(((((0.3)*sj2*sj3))+x4712+(((-1.0)*cj3*x4712)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4714=IKasin(((x4716.value)*(((((0.3)*sj2*sj3))+x4712+(((-1.0)*cj3*x4712))))));
j0array[0]=((((-1.0)*x4714))+(((-1.0)*x4713)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x4714+(((-1.0)*x4713)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst66;
IkReal x4717=(py*sj0);
IkReal x4718=((0.3)*cj3);
IkReal x4719=(cj0*px);
IkReal x4720=(cj2*pz);
IkReal x4721=((0.045)*sj3);
gconst66=IKsign(((((0.045)*cj3*x4720))+(((-0.55)*x4717))+(((-0.55)*x4719))+(((-1.0)*x4718*x4719))+(((-1.0)*x4717*x4721))+(((-1.0)*x4719*x4721))+(((-0.3)*sj3*x4720))+(((-1.0)*x4717*x4718))+(((-0.045)*x4720))));
IkReal x4722=(py*sj0);
IkReal x4723=(cj2*pz);
IkReal x4724=((6.66666666666667)*cj3);
IkReal x4725=(cj0*px);
IkReal x4726=((1.0)*sj3);
dummyeval[0]=((((-1.0)*x4722*x4724))+(((-1.0)*x4722*x4726))+(((-12.2222222222222)*x4722))+(((-12.2222222222222)*x4725))+(((-1.0)*x4723))+(((-1.0)*x4724*x4725))+(((-1.0)*x4725*x4726))+((cj3*x4723))+(((-6.66666666666667)*sj3*x4723)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign((((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0)))));
dummyeval[0]=(((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x4727=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4727;
evalcond[3]=x4727;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst68;
IkReal x4728=(cj0*px);
IkReal x4729=((0.045)*pz);
IkReal x4730=(py*sj0);
IkReal x4731=((0.3)*cj3);
IkReal x4732=((0.045)*sj3);
gconst68=IKsign(((((-1.0)*x4730*x4731))+(((-1.0)*x4730*x4732))+(((-0.55)*x4730))+(((-1.0)*x4728*x4731))+(((-1.0)*x4728*x4732))+(((-0.55)*x4728))+(((-0.3)*pz*sj3))+(((-1.0)*x4729))+((cj3*x4729))));
IkReal x4733=(py*sj0);
IkReal x4734=((6.66666666666667)*cj3);
IkReal x4735=(cj0*px);
IkReal x4736=((1.0)*sj3);
dummyeval[0]=((((-1.0)*x4734*x4735))+(((-1.0)*x4735*x4736))+(((-12.2222222222222)*x4735))+(((-12.2222222222222)*x4733))+(((-6.66666666666667)*pz*sj3))+(((-1.0)*pz))+(((-1.0)*x4733*x4734))+(((-1.0)*x4733*x4736))+((cj3*pz)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst69;
gconst69=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4737=(py*sj0);
IkReal x4738=(cj0*px);
IkReal x4739=((0.3)*sj3);
IkReal x4740=((0.045)*cj3);
IkReal x4741=((0.3)*cj3);
IkReal x4742=((0.045)*pz);
IkReal x4743=((0.045)*sj3);
CheckValue<IkReal> x4744 = IKatan2WithCheck((gconst69*(((((-0.55)*x4737))+(((-0.55)*x4738))+((pz*x4739))+(((-1.0)*x4737*x4741))+(((-1.0)*x4737*x4743))+x4742+(((-1.0)*x4738*x4741))+(((-1.0)*x4738*x4743))+(((-1.0)*pz*x4740))))),(gconst69*(((((-0.55)*pz))+((x4737*x4740))+(((-0.045)*x4737))+(((-0.045)*x4738))+((x4738*x4740))+(((-1.0)*sj3*x4742))+(((-1.0)*x4737*x4739))+(((-1.0)*x4738*x4739))+(((-1.0)*pz*x4741))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4744.valid){
continue;
}
j1array[0]=x4744.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4745=IKsin(j1);
IkReal x4746=IKcos(j1);
IkReal x4747=((0.3)*cj3);
IkReal x4748=((0.045)*cj3);
IkReal x4749=(cj0*px);
IkReal x4750=(py*sj0);
IkReal x4751=((0.045)*sj3);
IkReal x4752=((0.3)*sj3);
IkReal x4753=((0.045)*x4745);
IkReal x4754=((1.0)*x4746);
IkReal x4755=(pz*x4745);
IkReal x4756=(pz*x4746);
IkReal x4757=((0.09)*x4746);
IkReal x4758=((1.1)*x4745);
evalcond[0]=((-0.55)+((x4745*x4750))+x4756+(((-1.0)*x4747))+(((-1.0)*x4751))+((x4745*x4749)));
evalcond[1]=((0.045)+(((-1.0)*x4749*x4754))+(((-1.0)*x4750*x4754))+x4752+x4755+(((-1.0)*x4748)));
evalcond[2]=(((x4745*x4752))+(((-1.0)*x4746*x4747))+(((-1.0)*x4746*x4751))+x4753+(((-1.0)*x4745*x4748))+pz+(((-0.55)*x4746)));
evalcond[3]=(((x4745*x4751))+(((0.55)*x4745))+(((-1.0)*x4746*x4748))+(((0.045)*x4746))+(((-1.0)*x4750))+(((-1.0)*x4749))+((x4745*x4747))+((x4746*x4752)));
evalcond[4]=((-0.2125)+((x4750*x4757))+((x4750*x4758))+(((-1.0)*pp))+(((-0.09)*x4755))+((x4749*x4757))+((x4749*x4758))+(((1.1)*x4756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4759=cj3*cj3;
IkReal x4760=sj3*sj3;
IkReal x4761=(cj3*sj3);
IkReal x4762=((1.0)*pz);
CheckValue<IkReal> x4763 = IKatan2WithCheck((gconst68*(((-0.3025)+(((-0.027)*x4761))+(((-0.0495)*sj3))+(pz*pz)+(((-0.09)*x4759))+(((-0.002025)*x4760))+(((-0.33)*cj3))))),(gconst68*(((-0.02475)+(((0.0135)*x4759))+(((0.01125)*cj3))+(((-1.0)*py*sj0*x4762))+(((-0.167025)*sj3))+(((-0.0135)*x4760))+(((-0.087975)*x4761))+(((-1.0)*cj0*px*x4762))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4763.valid){
continue;
}
j1array[0]=x4763.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4764=IKsin(j1);
IkReal x4765=IKcos(j1);
IkReal x4766=((0.3)*cj3);
IkReal x4767=((0.045)*cj3);
IkReal x4768=(cj0*px);
IkReal x4769=(py*sj0);
IkReal x4770=((0.045)*sj3);
IkReal x4771=((0.3)*sj3);
IkReal x4772=((0.045)*x4764);
IkReal x4773=((1.0)*x4765);
IkReal x4774=(pz*x4764);
IkReal x4775=(pz*x4765);
IkReal x4776=((0.09)*x4765);
IkReal x4777=((1.1)*x4764);
evalcond[0]=((-0.55)+(((-1.0)*x4766))+((x4764*x4768))+((x4764*x4769))+x4775+(((-1.0)*x4770)));
evalcond[1]=((0.045)+(((-1.0)*x4767))+(((-1.0)*x4769*x4773))+x4774+x4771+(((-1.0)*x4768*x4773)));
evalcond[2]=((((-0.55)*x4765))+(((-1.0)*x4765*x4766))+(((-1.0)*x4765*x4770))+x4772+pz+(((-1.0)*x4764*x4767))+((x4764*x4771)));
evalcond[3]=((((-1.0)*x4768))+(((-1.0)*x4769))+(((-1.0)*x4765*x4767))+(((0.55)*x4764))+((x4764*x4766))+((x4765*x4771))+(((0.045)*x4765))+((x4764*x4770)));
evalcond[4]=((-0.2125)+((x4769*x4776))+((x4769*x4777))+((x4768*x4776))+((x4768*x4777))+(((-1.0)*pp))+(((-0.09)*x4774))+(((1.1)*x4775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4778=(px*sj0);
IkReal x4779=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x4779))+x4778);
evalcond[3]=((((-1.0)*x4778))+x4779);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst71;
IkReal x4780=(cj0*px);
IkReal x4781=((0.045)*pz);
IkReal x4782=(py*sj0);
IkReal x4783=((0.3)*cj3);
IkReal x4784=((0.045)*sj3);
gconst71=IKsign((x4781+(((-1.0)*x4782*x4784))+(((-1.0)*x4782*x4783))+(((-0.55)*x4782))+(((-0.55)*x4780))+(((-1.0)*cj3*x4781))+(((0.3)*pz*sj3))+(((-1.0)*x4780*x4783))+(((-1.0)*x4780*x4784))));
IkReal x4785=(py*sj0);
IkReal x4786=((6.66666666666667)*cj3);
IkReal x4787=(cj0*px);
IkReal x4788=((1.0)*sj3);
dummyeval[0]=((((-1.0)*x4787*x4788))+(((-1.0)*cj3*pz))+(((-1.0)*x4786*x4787))+(((6.66666666666667)*pz*sj3))+pz+(((-12.2222222222222)*x4785))+(((-12.2222222222222)*x4787))+(((-1.0)*x4785*x4788))+(((-1.0)*x4785*x4786)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst70;
gconst70=IKsign(((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0))));
dummyeval[0]=((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4789=(py*sj0);
IkReal x4790=(cj0*px);
IkReal x4791=((0.3)*sj3);
IkReal x4792=((0.045)*cj3);
IkReal x4793=((0.3)*cj3);
IkReal x4794=((0.045)*pz);
IkReal x4795=((0.045)*sj3);
CheckValue<IkReal> x4796 = IKatan2WithCheck((gconst70*((((x4790*x4795))+((x4790*x4793))+(((0.55)*x4789))+(((0.55)*x4790))+((pz*x4791))+x4794+(((-1.0)*pz*x4792))+((x4789*x4793))+((x4789*x4795))))),(gconst70*((((x4790*x4792))+(((-0.045)*x4790))+(((-1.0)*x4789*x4791))+(((-1.0)*x4790*x4791))+((pz*x4793))+((sj3*x4794))+(((-0.045)*x4789))+((x4789*x4792))+(((0.55)*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4796.valid){
continue;
}
j1array[0]=x4796.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4797=IKsin(j1);
IkReal x4798=IKcos(j1);
IkReal x4799=((0.3)*cj3);
IkReal x4800=((0.045)*cj3);
IkReal x4801=(cj0*px);
IkReal x4802=(py*sj0);
IkReal x4803=((0.045)*sj3);
IkReal x4804=((0.3)*sj3);
IkReal x4805=((0.045)*x4797);
IkReal x4806=(pz*x4797);
IkReal x4807=(pz*x4798);
IkReal x4808=((0.09)*x4798);
IkReal x4809=((1.1)*x4797);
evalcond[0]=((-0.55)+((x4797*x4801))+((x4797*x4802))+(((-1.0)*x4799))+(((-1.0)*x4803))+x4807);
evalcond[1]=((0.045)+(((-1.0)*x4806))+(((-1.0)*x4800))+x4804+((x4798*x4801))+((x4798*x4802)));
evalcond[2]=((((-1.0)*x4797*x4804))+((x4797*x4800))+(((-1.0)*x4798*x4803))+pz+(((-0.55)*x4798))+(((-1.0)*x4805))+(((-1.0)*x4798*x4799)));
evalcond[3]=(((x4797*x4799))+(((-0.045)*x4798))+(((0.55)*x4797))+((x4797*x4803))+(((-1.0)*x4798*x4804))+(((-1.0)*x4802))+(((-1.0)*x4801))+((x4798*x4800)));
evalcond[4]=((-0.2125)+(((-1.0)*x4801*x4808))+((x4801*x4809))+(((-1.0)*x4802*x4808))+(((-1.0)*pp))+(((1.1)*x4807))+((x4802*x4809))+(((0.09)*x4806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4810=sj3*sj3;
IkReal x4811=cj3*cj3;
IkReal x4812=(cj3*sj3);
IkReal x4813=((1.0)*pz);
CheckValue<IkReal> x4814 = IKatan2WithCheck((gconst71*(((-0.3025)+(((-0.09)*x4811))+(((-0.002025)*x4810))+(((-0.0495)*sj3))+(pz*pz)+(((-0.027)*x4812))+(((-0.33)*cj3))))),(gconst71*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*x4810))+(((-0.0135)*x4811))+(((-1.0)*py*sj0*x4813))+(((-1.0)*cj0*px*x4813))+(((0.167025)*sj3))+(((0.087975)*x4812))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4814.valid){
continue;
}
j1array[0]=x4814.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4815=IKsin(j1);
IkReal x4816=IKcos(j1);
IkReal x4817=((0.3)*cj3);
IkReal x4818=((0.045)*cj3);
IkReal x4819=(cj0*px);
IkReal x4820=(py*sj0);
IkReal x4821=((0.045)*sj3);
IkReal x4822=((0.3)*sj3);
IkReal x4823=((0.045)*x4815);
IkReal x4824=(pz*x4815);
IkReal x4825=(pz*x4816);
IkReal x4826=((0.09)*x4816);
IkReal x4827=((1.1)*x4815);
evalcond[0]=((-0.55)+((x4815*x4819))+(((-1.0)*x4821))+(((-1.0)*x4817))+x4825+((x4815*x4820)));
evalcond[1]=((0.045)+((x4816*x4820))+((x4816*x4819))+(((-1.0)*x4818))+(((-1.0)*x4824))+x4822);
evalcond[2]=(((x4815*x4818))+(((-0.55)*x4816))+(((-1.0)*x4815*x4822))+(((-1.0)*x4823))+(((-1.0)*x4816*x4817))+(((-1.0)*x4816*x4821))+pz);
evalcond[3]=(((x4815*x4817))+((x4816*x4818))+(((0.55)*x4815))+(((-1.0)*x4819))+(((-1.0)*x4820))+(((-1.0)*x4816*x4822))+(((-0.045)*x4816))+((x4815*x4821)));
evalcond[4]=((-0.2125)+((x4820*x4827))+(((1.1)*x4825))+((x4819*x4827))+(((-1.0)*x4819*x4826))+(((-1.0)*pp))+(((0.09)*x4824))+(((-1.0)*x4820*x4826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4828=((-1.0)*cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4828;
evalcond[3]=x4828;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst72;
gconst72=IKsign(((((-1.0)*(pz*pz)))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(pz*pz)))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst73;
IkReal x4829=((0.045)*pz);
IkReal x4830=(py*sj0);
gconst73=IKsign(((((-0.3)*cj3*x4830))+(((-0.55)*x4830))+(((-1.0)*x4829))+(((-0.3)*pz*sj3))+((cj3*x4829))+(((-0.045)*sj3*x4830))));
IkReal x4831=(py*sj0);
dummyeval[0]=((((-6.66666666666667)*pz*sj3))+(((-1.0)*pz))+(((-6.66666666666667)*cj3*x4831))+(((-12.2222222222222)*x4831))+((cj3*pz))+(((-1.0)*sj3*x4831)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4832=((-1.0)*py);
CheckValue<IkReal> x4833=IKPowWithIntegerCheck(py,-2);
if(!x4833.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x4833.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x4832;
evalcond[3]=x4832;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst74;
gconst74=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4834=((1.0)*pp);
IkReal x4835=((-1.0)*py);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x4834))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x4835;
evalcond[4]=x4835;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x4834)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4837 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4837.valid){
continue;
}
IkReal x4836=x4837.value;
j1array[0]=((-1.0)*x4836);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4836)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4838=IKsin(j1);
IkReal x4839=IKcos(j1);
IkReal x4840=((0.045)*x4839);
evalcond[0]=((((0.045)*sj3*x4838))+(((0.55)*x4838))+(((0.3)*sj3*x4839))+(((0.3)*cj3*x4838))+x4840+(((-1.0)*cj3*x4840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4842=IKPowWithIntegerCheck(pz,-1);
if(!x4842.valid){
continue;
}
IkReal x4841=x4842.value;
if( IKabs((x4841*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x4841*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4841*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x4841*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x4841*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x4841*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4843=IKcos(j1);
IkReal x4844=IKsin(j1);
IkReal x4845=((0.045)*cj3);
IkReal x4846=((0.3)*cj3);
IkReal x4847=(sj3*x4844);
IkReal x4848=(cj3*x4844);
IkReal x4849=(sj3*x4843);
IkReal x4850=(pz*x4844);
IkReal x4851=(pz*x4843);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x4846))+x4851);
evalcond[1]=((0.045)+(((-1.0)*x4845))+(((0.3)*sj3))+x4850);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x4850))+(((1.1)*x4851)));
evalcond[3]=((((0.045)*x4847))+(((0.045)*x4843))+(((0.55)*x4844))+(((0.3)*x4849))+((x4844*x4846))+(((-1.0)*x4843*x4845)));
evalcond[4]=((((0.045)*x4844))+(((-0.045)*x4849))+(((-1.0)*x4844*x4845))+(((0.3)*x4847))+pz+(((-0.55)*x4843))+(((-1.0)*x4843*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4853=IKPowWithIntegerCheck(pz,-1);
if(!x4853.valid){
continue;
}
IkReal x4852=x4853.value;
if( IKabs(((0.111111111111111)*x4852*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4852*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x4852*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x4852*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x4852*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x4852*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4854=IKcos(j1);
IkReal x4855=IKsin(j1);
IkReal x4856=((0.045)*cj3);
IkReal x4857=((0.3)*cj3);
IkReal x4858=(sj3*x4855);
IkReal x4859=(cj3*x4855);
IkReal x4860=(sj3*x4854);
IkReal x4861=(pz*x4855);
IkReal x4862=(pz*x4854);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x4857))+x4862);
evalcond[1]=((0.045)+(((-1.0)*x4856))+(((0.3)*sj3))+x4861);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x4861))+(((1.1)*x4862)));
evalcond[3]=((((0.55)*x4855))+(((0.045)*x4858))+(((0.045)*x4854))+((x4855*x4857))+(((0.3)*x4860))+(((-1.0)*x4854*x4856)));
evalcond[4]=((((0.3)*x4858))+(((-0.55)*x4854))+(((0.045)*x4855))+pz+(((-0.045)*x4860))+(((-1.0)*x4855*x4856))+(((-1.0)*x4854*x4857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4863 = IKatan2WithCheck((gconst74*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst74*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4863.valid){
continue;
}
j1array[0]=x4863.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4864=IKcos(j1);
IkReal x4865=IKsin(j1);
IkReal x4866=((0.045)*cj3);
IkReal x4867=((0.3)*cj3);
IkReal x4868=(sj3*x4865);
IkReal x4869=(cj3*x4865);
IkReal x4870=(sj3*x4864);
IkReal x4871=(pz*x4865);
IkReal x4872=(pz*x4864);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x4867))+x4872);
evalcond[1]=((0.045)+(((-1.0)*x4866))+(((0.3)*sj3))+x4871);
evalcond[2]=((-0.2125)+(((-0.09)*x4871))+(((-1.0)*pp))+(((1.1)*x4872)));
evalcond[3]=((((0.3)*x4870))+(((-1.0)*x4864*x4866))+(((0.55)*x4865))+(((0.045)*x4868))+(((0.045)*x4864))+((x4865*x4867)));
evalcond[4]=((((-0.045)*x4870))+(((-0.55)*x4864))+(((-1.0)*x4864*x4867))+(((0.045)*x4865))+pz+(((0.3)*x4868))+(((-1.0)*x4865*x4866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x4873=IKPowWithIntegerCheck(py,-2);
if(!x4873.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x4873.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=py;
evalcond[3]=py;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst75;
gconst75=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4874=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x4874))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x4874)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4876 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4876.valid){
continue;
}
IkReal x4875=x4876.value;
j1array[0]=((-1.0)*x4875);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4875)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4877=IKsin(j1);
IkReal x4878=IKcos(j1);
IkReal x4879=((0.045)*x4878);
evalcond[0]=((((0.045)*sj3*x4877))+(((-1.0)*cj3*x4879))+(((0.3)*cj3*x4877))+(((0.55)*x4877))+(((0.3)*sj3*x4878))+x4879);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4881=IKPowWithIntegerCheck(pz,-1);
if(!x4881.valid){
continue;
}
IkReal x4880=x4881.value;
if( IKabs((x4880*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x4880*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4880*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x4880*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x4880*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x4880*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4882=IKcos(j1);
IkReal x4883=IKsin(j1);
IkReal x4884=((0.045)*cj3);
IkReal x4885=((0.3)*cj3);
IkReal x4886=(sj3*x4883);
IkReal x4887=(cj3*x4883);
IkReal x4888=(sj3*x4882);
IkReal x4889=(pz*x4883);
IkReal x4890=(pz*x4882);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x4885))+x4890);
evalcond[1]=((0.045)+(((-1.0)*x4884))+(((0.3)*sj3))+x4889);
evalcond[2]=((-0.2125)+(((1.1)*x4890))+(((-0.09)*x4889))+(((-1.0)*pp)));
evalcond[3]=((((0.55)*x4883))+(((-1.0)*x4882*x4884))+(((0.045)*x4882))+(((0.045)*x4886))+(((0.3)*x4888))+((x4883*x4885)));
evalcond[4]=((((-0.55)*x4882))+(((-1.0)*x4883*x4884))+(((-1.0)*x4882*x4885))+(((-0.045)*x4888))+pz+(((0.045)*x4883))+(((0.3)*x4886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4892=IKPowWithIntegerCheck(pz,-1);
if(!x4892.valid){
continue;
}
IkReal x4891=x4892.value;
if( IKabs(((0.111111111111111)*x4891*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4891*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x4891*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x4891*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x4891*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x4891*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4893=IKcos(j1);
IkReal x4894=IKsin(j1);
IkReal x4895=((0.045)*cj3);
IkReal x4896=((0.3)*cj3);
IkReal x4897=(sj3*x4894);
IkReal x4898=(cj3*x4894);
IkReal x4899=(sj3*x4893);
IkReal x4900=(pz*x4894);
IkReal x4901=(pz*x4893);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x4901+(((-1.0)*x4896)));
evalcond[1]=((0.045)+x4900+(((-1.0)*x4895))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x4901))+(((-0.09)*x4900)));
evalcond[3]=((((0.55)*x4894))+(((-1.0)*x4893*x4895))+(((0.3)*x4899))+((x4894*x4896))+(((0.045)*x4893))+(((0.045)*x4897)));
evalcond[4]=((((-0.55)*x4893))+(((-0.045)*x4899))+(((-1.0)*x4893*x4896))+(((-1.0)*x4894*x4895))+pz+(((0.3)*x4897))+(((0.045)*x4894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4902 = IKatan2WithCheck((gconst75*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst75*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4902.valid){
continue;
}
j1array[0]=x4902.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4903=IKcos(j1);
IkReal x4904=IKsin(j1);
IkReal x4905=((0.045)*cj3);
IkReal x4906=((0.3)*cj3);
IkReal x4907=(sj3*x4904);
IkReal x4908=(cj3*x4904);
IkReal x4909=(sj3*x4903);
IkReal x4910=(pz*x4904);
IkReal x4911=(pz*x4903);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x4911+(((-1.0)*x4906)));
evalcond[1]=((0.045)+x4910+(((-1.0)*x4905))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x4910))+(((1.1)*x4911)));
evalcond[3]=(((x4904*x4906))+(((0.55)*x4904))+(((-1.0)*x4903*x4905))+(((0.045)*x4903))+(((0.045)*x4907))+(((0.3)*x4909)));
evalcond[4]=((((-1.0)*x4904*x4905))+(((-1.0)*x4903*x4906))+(((0.045)*x4904))+(((-0.045)*x4909))+pz+(((-0.55)*x4903))+(((0.3)*x4907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4912=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((-1.0)*x4912))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x4912)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4914 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4914.valid){
continue;
}
IkReal x4913=x4914.value;
j1array[0]=((-1.0)*x4913);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4913)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4915=IKsin(j1);
IkReal x4916=IKcos(j1);
IkReal x4917=((0.045)*x4916);
evalcond[0]=(x4917+(((-1.0)*cj3*x4917))+(((0.3)*sj3*x4916))+(((0.55)*x4915))+(((0.045)*sj3*x4915))+(((0.3)*cj3*x4915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4918=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x4918)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4918)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4920=IKPowWithIntegerCheck(pz,-1);
if(!x4920.valid){
continue;
}
IkReal x4919=x4920.value;
if( IKabs(((0.0555555555555556)*x4919*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x4919)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x4919*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x4919))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x4919*(((144.5)+(((-200.0)*pp))))), ((0.85)*x4919));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4921=IKsin(j1);
IkReal x4922=IKcos(j1);
IkReal x4923=(pz*x4921);
IkReal x4924=(pz*x4922);
evalcond[0]=x4923;
evalcond[1]=((0.85)*x4921);
evalcond[2]=((-0.85)+x4924);
evalcond[3]=(pz+(((-0.85)*x4922)));
evalcond[4]=((-0.2125)+(((1.1)*x4924))+(((-0.09)*x4923))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4925=IKPowWithIntegerCheck(pz,-1);
if(!x4925.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x4925.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x4925.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x4925.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4926=IKsin(j1);
IkReal x4927=IKcos(j1);
IkReal x4928=(pz*x4926);
IkReal x4929=(pz*x4927);
evalcond[0]=x4928;
evalcond[1]=((0.85)*x4926);
evalcond[2]=((-0.85)+x4929);
evalcond[3]=(pz+(((-0.85)*x4927)));
evalcond[4]=((-0.2125)+(((1.1)*x4929))+(((-0.09)*x4928))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4930=((1.0)*pp);
IkReal x4931=((-1.0)*py);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x4930))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x4931;
evalcond[4]=x4931;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x4930)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4933 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4933.valid){
continue;
}
IkReal x4932=x4933.value;
j1array[0]=((-1.0)*x4932);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4932)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4934=IKsin(j1);
IkReal x4935=IKcos(j1);
IkReal x4936=((0.045)*x4935);
evalcond[0]=((((0.045)*sj3*x4934))+x4936+(((0.3)*cj3*x4934))+(((-1.0)*cj3*x4936))+(((0.3)*sj3*x4935))+(((0.55)*x4934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4937=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x4937))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x4937)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4939 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4939.valid){
continue;
}
IkReal x4938=x4939.value;
j1array[0]=((-1.0)*x4938);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4938)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4940=IKsin(j1);
IkReal x4941=IKcos(j1);
IkReal x4942=((0.045)*x4941);
evalcond[0]=(x4942+(((0.3)*sj3*x4941))+(((0.045)*sj3*x4940))+(((0.55)*x4940))+(((0.3)*cj3*x4940))+(((-1.0)*cj3*x4942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4943=((-1.0)*py);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x4943;
evalcond[3]=x4943;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4944=((1.0)*pp);
IkReal x4945=((-1.0)*py);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x4944)));
evalcond[2]=-0.85;
evalcond[3]=x4945;
evalcond[4]=x4945;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x4944)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4947=IKPowWithIntegerCheck(pz,-1);
if(!x4947.valid){
continue;
}
IkReal x4946=x4947.value;
if( IKabs(((0.0555555555555556)*x4946*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x4946)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x4946*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x4946))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x4946*(((144.5)+(((-200.0)*pp))))), ((0.85)*x4946));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4948=IKsin(j1);
IkReal x4949=IKcos(j1);
IkReal x4950=(pz*x4948);
IkReal x4951=(pz*x4949);
evalcond[0]=x4950;
evalcond[1]=((0.85)*x4948);
evalcond[2]=((-0.85)+x4951);
evalcond[3]=((((-0.85)*x4949))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x4950))+(((-1.0)*pp))+(((1.1)*x4951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4952=IKPowWithIntegerCheck(pz,-1);
if(!x4952.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x4952.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x4952.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x4952.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4953=IKsin(j1);
IkReal x4954=IKcos(j1);
IkReal x4955=(pz*x4953);
IkReal x4956=(pz*x4954);
evalcond[0]=x4955;
evalcond[1]=((0.85)*x4953);
evalcond[2]=((-0.85)+x4956);
evalcond[3]=((((-0.85)*x4954))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x4955))+(((-1.0)*pp))+(((1.1)*x4956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=py;
evalcond[3]=py;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4957=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x4957)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x4957)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4959=IKPowWithIntegerCheck(pz,-1);
if(!x4959.valid){
continue;
}
IkReal x4958=x4959.value;
if( IKabs(((0.0555555555555556)*x4958*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x4958)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x4958*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x4958))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x4958*(((144.5)+(((-200.0)*pp))))), ((0.85)*x4958));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4960=IKsin(j1);
IkReal x4961=IKcos(j1);
IkReal x4962=(pz*x4960);
IkReal x4963=(pz*x4961);
evalcond[0]=x4962;
evalcond[1]=((0.85)*x4960);
evalcond[2]=((-0.85)+x4963);
evalcond[3]=((((-0.85)*x4961))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x4962))+(((-1.0)*pp))+(((1.1)*x4963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4964=IKPowWithIntegerCheck(pz,-1);
if(!x4964.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x4964.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x4964.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x4964.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4965=IKsin(j1);
IkReal x4966=IKcos(j1);
IkReal x4967=(pz*x4965);
IkReal x4968=(pz*x4966);
evalcond[0]=x4967;
evalcond[1]=((0.85)*x4965);
evalcond[2]=((-0.85)+x4968);
evalcond[3]=((((-0.85)*x4966))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x4967))+(((-1.0)*pp))+(((1.1)*x4968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4969=((1.0)*pp);
CheckValue<IkReal> x4970=IKPowWithIntegerCheck(py,-2);
if(!x4970.valid){
continue;
}
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(pz)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x4970.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x4969))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x4969)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4972 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4972.valid){
continue;
}
IkReal x4971=x4972.value;
j1array[0]=((-1.0)*x4971);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4971)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4973=IKsin(j1);
IkReal x4974=IKcos(j1);
IkReal x4975=((0.045)*x4974);
evalcond[0]=(x4975+(((0.3)*sj3*x4974))+(((0.55)*x4973))+(((0.045)*sj3*x4973))+(((0.3)*cj3*x4973))+(((-1.0)*cj3*x4975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x4976=IKPowWithIntegerCheck(py,-2);
if(!x4976.valid){
continue;
}
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x4976.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4977=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x4977)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4977)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4979=IKPowWithIntegerCheck(pz,-1);
if(!x4979.valid){
continue;
}
IkReal x4978=x4979.value;
if( IKabs(((0.0555555555555556)*x4978*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x4978)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x4978*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x4978))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x4978*(((144.5)+(((-200.0)*pp))))), ((0.85)*x4978));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4980=IKsin(j1);
IkReal x4981=IKcos(j1);
IkReal x4982=(pz*x4980);
IkReal x4983=(pz*x4981);
evalcond[0]=x4982;
evalcond[1]=((0.85)*x4980);
evalcond[2]=((-0.85)+x4983);
evalcond[3]=((((-0.85)*x4981))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x4983))+(((-0.09)*x4982))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4984=IKPowWithIntegerCheck(pz,-1);
if(!x4984.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x4984.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x4984.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x4984.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4985=IKsin(j1);
IkReal x4986=IKcos(j1);
IkReal x4987=(pz*x4985);
IkReal x4988=(pz*x4986);
evalcond[0]=x4987;
evalcond[1]=((0.85)*x4985);
evalcond[2]=((-0.85)+x4988);
evalcond[3]=((((-0.85)*x4986))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x4988))+(((-0.09)*x4987))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4989=((1.0)*pp);
CheckValue<IkReal> x4990=IKPowWithIntegerCheck(py,-2);
if(!x4990.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x4990.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)))))+(IKabs(((IKabs(py))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x4989))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x4989)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4992 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4992.valid){
continue;
}
IkReal x4991=x4992.value;
j1array[0]=((-1.0)*x4991);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4991)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4993=IKsin(j1);
IkReal x4994=IKcos(j1);
IkReal x4995=((0.045)*x4994);
evalcond[0]=(x4995+(((0.3)*sj3*x4994))+(((0.55)*x4993))+(((0.045)*sj3*x4993))+(((0.3)*cj3*x4993))+(((-1.0)*cj3*x4995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x4996=IKPowWithIntegerCheck(py,-2);
if(!x4996.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x4996.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)))))+(IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x4997=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x4997)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x4997)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4999=IKPowWithIntegerCheck(pz,-1);
if(!x4999.valid){
continue;
}
IkReal x4998=x4999.value;
if( IKabs(((0.0555555555555556)*x4998*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x4998)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x4998*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x4998))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x4998*(((144.5)+(((-200.0)*pp))))), ((0.85)*x4998));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5000=IKsin(j1);
IkReal x5001=IKcos(j1);
IkReal x5002=(pz*x5000);
IkReal x5003=(pz*x5001);
evalcond[0]=x5002;
evalcond[1]=((0.85)*x5000);
evalcond[2]=((-0.85)+x5003);
evalcond[3]=((((-0.85)*x5001))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5003))+(((-0.09)*x5002))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5004=IKPowWithIntegerCheck(pz,-1);
if(!x5004.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5004.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5004.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5004.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5005=IKsin(j1);
IkReal x5006=IKcos(j1);
IkReal x5007=(pz*x5005);
IkReal x5008=(pz*x5006);
evalcond[0]=x5007;
evalcond[1]=((0.85)*x5005);
evalcond[2]=((-0.85)+x5008);
evalcond[3]=((((-0.85)*x5006))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5008))+(((-0.09)*x5007))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5009=cj3*cj3;
IkReal x5010=sj3*sj3;
IkReal x5011=(cj3*sj3);
CheckValue<IkReal> x5012 = IKatan2WithCheck((gconst73*(((-0.3025)+(((-0.002025)*x5010))+(((-0.0495)*sj3))+(((-0.09)*x5009))+(((-0.027)*x5011))+(pz*pz)+(((-0.33)*cj3))))),(gconst73*(((-0.02475)+(((0.01125)*cj3))+(((-0.167025)*sj3))+(((-0.0135)*x5010))+(((0.0135)*x5009))+(((-0.087975)*x5011))+(((-1.0)*py*pz*sj0))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5012.valid){
continue;
}
j1array[0]=x5012.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5013=IKsin(j1);
IkReal x5014=IKcos(j1);
IkReal x5015=((0.3)*cj3);
IkReal x5016=((0.045)*cj3);
IkReal x5017=(py*sj0);
IkReal x5018=((0.045)*sj3);
IkReal x5019=((0.3)*sj3);
IkReal x5020=((0.045)*x5013);
IkReal x5021=(pz*x5013);
IkReal x5022=(pz*x5014);
evalcond[0]=((-0.55)+x5022+((x5013*x5017))+(((-1.0)*x5018))+(((-1.0)*x5015)));
evalcond[1]=((0.045)+(((-1.0)*x5014*x5017))+x5021+x5019+(((-1.0)*x5016)));
evalcond[2]=((-0.2125)+(((1.1)*x5013*x5017))+(((1.1)*x5022))+(((0.09)*x5014*x5017))+(((-1.0)*pp))+(((-0.09)*x5021)));
evalcond[3]=((((-1.0)*x5014*x5015))+(((-1.0)*x5014*x5018))+x5020+(((-1.0)*x5013*x5016))+((x5013*x5019))+pz+(((-0.55)*x5014)));
evalcond[4]=(((x5014*x5019))+(((-1.0)*x5014*x5016))+((x5013*x5015))+((x5013*x5018))+(((0.045)*x5014))+(((-1.0)*x5017))+(((0.55)*x5013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5023=(py*sj0);
IkReal x5024=((0.3)*sj3);
IkReal x5025=((0.045)*cj3);
IkReal x5026=((0.3)*cj3);
IkReal x5027=((0.045)*pz);
CheckValue<IkReal> x5028 = IKatan2WithCheck((gconst72*((((pz*x5024))+x5027+(((-1.0)*pz*x5025))+(((-1.0)*x5023*x5026))+(((-0.55)*x5023))+(((-0.045)*sj3*x5023))))),(gconst72*(((((-0.55)*pz))+((x5023*x5025))+(((-0.045)*x5023))+(((-1.0)*sj3*x5027))+(((-1.0)*pz*x5026))+(((-1.0)*x5023*x5024))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5028.valid){
continue;
}
j1array[0]=x5028.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5029=IKsin(j1);
IkReal x5030=IKcos(j1);
IkReal x5031=((0.3)*cj3);
IkReal x5032=((0.045)*cj3);
IkReal x5033=(py*sj0);
IkReal x5034=((0.045)*sj3);
IkReal x5035=((0.3)*sj3);
IkReal x5036=((0.045)*x5029);
IkReal x5037=(pz*x5029);
IkReal x5038=(pz*x5030);
evalcond[0]=((-0.55)+x5038+(((-1.0)*x5034))+(((-1.0)*x5031))+((x5029*x5033)));
evalcond[1]=((0.045)+(((-1.0)*x5030*x5033))+x5037+x5035+(((-1.0)*x5032)));
evalcond[2]=((-0.2125)+(((0.09)*x5030*x5033))+(((-0.09)*x5037))+(((1.1)*x5038))+(((1.1)*x5029*x5033))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x5030*x5034))+(((-1.0)*x5030*x5031))+(((-1.0)*x5029*x5032))+x5036+(((-0.55)*x5030))+pz+((x5029*x5035)));
evalcond[4]=((((-1.0)*x5030*x5032))+(((-1.0)*x5033))+((x5030*x5035))+(((0.045)*x5030))+(((0.55)*x5029))+((x5029*x5031))+((x5029*x5034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5039=(cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*x5039);
evalcond[3]=x5039;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst76;
gconst76=IKsign(((((py*py)*(sj0*sj0)))+(pz*pz)));
dummyeval[0]=((((py*py)*(sj0*sj0)))+(pz*pz));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst77;
IkReal x5040=(py*sj0);
IkReal x5041=((0.045)*pz);
gconst77=IKsign(((((-0.045)*sj3*x5040))+(((-0.3)*cj3*x5040))+x5041+(((-1.0)*cj3*x5041))+(((-0.55)*x5040))+(((0.3)*pz*sj3))));
IkReal x5042=(py*sj0);
dummyeval[0]=((((-12.2222222222222)*x5042))+(((-1.0)*sj3*x5042))+(((-1.0)*cj3*pz))+(((6.66666666666667)*pz*sj3))+pz+(((-6.66666666666667)*cj3*x5042)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5043=IKPowWithIntegerCheck(py,-2);
if(!x5043.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x5043.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*py);
evalcond[3]=py;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst78;
gconst78=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5044=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((-1.0)*x5044))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5044)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5046 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5046.valid){
continue;
}
IkReal x5045=x5046.value;
j1array[0]=((-1.0)*x5045);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5045)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5047=IKsin(j1);
IkReal x5048=IKcos(j1);
IkReal x5049=((0.045)*x5048);
evalcond[0]=((((-0.3)*sj3*x5048))+(((0.045)*sj3*x5047))+(((-1.0)*x5049))+(((0.3)*cj3*x5047))+((cj3*x5049))+(((0.55)*x5047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5051=IKPowWithIntegerCheck(pz,-1);
if(!x5051.valid){
continue;
}
IkReal x5050=x5051.value;
if( IKabs((x5050*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x5050*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5050*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x5050*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x5050*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x5050*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5052=IKcos(j1);
IkReal x5053=IKsin(j1);
IkReal x5054=((0.045)*cj3);
IkReal x5055=((0.3)*cj3);
IkReal x5056=(sj3*x5053);
IkReal x5057=(cj3*x5053);
IkReal x5058=(sj3*x5052);
IkReal x5059=(pz*x5053);
IkReal x5060=(pz*x5052);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5060+(((-1.0)*x5055)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x5054))+(((-1.0)*x5059)));
evalcond[2]=((-0.2125)+(((0.09)*x5059))+(((-1.0)*pp))+(((1.1)*x5060)));
evalcond[3]=((((0.55)*x5053))+((x5052*x5054))+((x5053*x5055))+(((-0.3)*x5058))+(((0.045)*x5056))+(((-0.045)*x5052)));
evalcond[4]=((((-0.55)*x5052))+((x5053*x5054))+pz+(((-1.0)*x5052*x5055))+(((-0.3)*x5056))+(((-0.045)*x5053))+(((-0.045)*x5058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5062=IKPowWithIntegerCheck(pz,-1);
if(!x5062.valid){
continue;
}
IkReal x5061=x5062.value;
if( IKabs(((0.111111111111111)*x5061*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5061*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x5061*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x5061*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x5061*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x5061*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5063=IKcos(j1);
IkReal x5064=IKsin(j1);
IkReal x5065=((0.045)*cj3);
IkReal x5066=((0.3)*cj3);
IkReal x5067=(sj3*x5064);
IkReal x5068=(cj3*x5064);
IkReal x5069=(sj3*x5063);
IkReal x5070=(pz*x5064);
IkReal x5071=(pz*x5063);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5066))+x5071);
evalcond[1]=((0.045)+(((-1.0)*x5065))+(((-1.0)*x5070))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5071))+(((-1.0)*pp))+(((0.09)*x5070)));
evalcond[3]=(((x5063*x5065))+(((-0.045)*x5063))+(((-0.3)*x5069))+((x5064*x5066))+(((0.045)*x5067))+(((0.55)*x5064)));
evalcond[4]=((((-0.045)*x5069))+(((-0.045)*x5064))+(((-0.3)*x5067))+((x5064*x5065))+pz+(((-0.55)*x5063))+(((-1.0)*x5063*x5066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5072 = IKatan2WithCheck((gconst78*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst78*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5072.valid){
continue;
}
j1array[0]=x5072.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5073=IKcos(j1);
IkReal x5074=IKsin(j1);
IkReal x5075=((0.045)*cj3);
IkReal x5076=((0.3)*cj3);
IkReal x5077=(sj3*x5074);
IkReal x5078=(cj3*x5074);
IkReal x5079=(sj3*x5073);
IkReal x5080=(pz*x5074);
IkReal x5081=(pz*x5073);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5076))+x5081);
evalcond[1]=((0.045)+(((-1.0)*x5075))+(((-1.0)*x5080))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x5080))+(((-1.0)*pp))+(((1.1)*x5081)));
evalcond[3]=(((x5073*x5075))+(((-0.3)*x5079))+(((0.045)*x5077))+(((-0.045)*x5073))+((x5074*x5076))+(((0.55)*x5074)));
evalcond[4]=((((-0.3)*x5077))+(((-0.045)*x5074))+(((-0.045)*x5079))+((x5074*x5075))+pz+(((-1.0)*x5073*x5076))+(((-0.55)*x5073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5082=IKPowWithIntegerCheck(py,-2);
if(!x5082.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x5082.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=py;
evalcond[3]=((-1.0)*py);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst79;
gconst79=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5083=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5083))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5083)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5085 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5085.valid){
continue;
}
IkReal x5084=x5085.value;
j1array[0]=((-1.0)*x5084);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5084)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5086=IKsin(j1);
IkReal x5087=IKcos(j1);
IkReal x5088=((0.045)*x5087);
evalcond[0]=((((-0.3)*sj3*x5087))+(((0.55)*x5086))+(((0.045)*sj3*x5086))+(((-1.0)*x5088))+((cj3*x5088))+(((0.3)*cj3*x5086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5090=IKPowWithIntegerCheck(pz,-1);
if(!x5090.valid){
continue;
}
IkReal x5089=x5090.value;
if( IKabs((x5089*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x5089*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5089*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x5089*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x5089*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x5089*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5091=IKcos(j1);
IkReal x5092=IKsin(j1);
IkReal x5093=((0.045)*cj3);
IkReal x5094=((0.3)*cj3);
IkReal x5095=(sj3*x5092);
IkReal x5096=(cj3*x5092);
IkReal x5097=(sj3*x5091);
IkReal x5098=(pz*x5092);
IkReal x5099=(pz*x5091);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5099+(((-1.0)*x5094)));
evalcond[1]=((0.045)+(((-1.0)*x5098))+(((-1.0)*x5093))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x5098))+(((1.1)*x5099))+(((-1.0)*pp)));
evalcond[3]=((((-0.3)*x5097))+(((0.55)*x5092))+((x5091*x5093))+((x5092*x5094))+(((-0.045)*x5091))+(((0.045)*x5095)));
evalcond[4]=((((-0.3)*x5095))+(((-1.0)*x5091*x5094))+(((-0.55)*x5091))+pz+((x5092*x5093))+(((-0.045)*x5097))+(((-0.045)*x5092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5101=IKPowWithIntegerCheck(pz,-1);
if(!x5101.valid){
continue;
}
IkReal x5100=x5101.value;
if( IKabs(((0.111111111111111)*x5100*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5100*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x5100*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x5100*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x5100*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x5100*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5102=IKcos(j1);
IkReal x5103=IKsin(j1);
IkReal x5104=((0.045)*cj3);
IkReal x5105=((0.3)*cj3);
IkReal x5106=(sj3*x5103);
IkReal x5107=(cj3*x5103);
IkReal x5108=(sj3*x5102);
IkReal x5109=(pz*x5103);
IkReal x5110=(pz*x5102);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5105))+x5110);
evalcond[1]=((0.045)+(((-1.0)*x5104))+(((-1.0)*x5109))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5110))+(((-1.0)*pp))+(((0.09)*x5109)));
evalcond[3]=((((-0.045)*x5102))+((x5102*x5104))+(((-0.3)*x5108))+(((0.55)*x5103))+(((0.045)*x5106))+((x5103*x5105)));
evalcond[4]=((((-0.045)*x5108))+(((-0.045)*x5103))+(((-0.3)*x5106))+(((-0.55)*x5102))+(((-1.0)*x5102*x5105))+pz+((x5103*x5104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5111 = IKatan2WithCheck((gconst79*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst79*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5111.valid){
continue;
}
j1array[0]=x5111.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5112=IKcos(j1);
IkReal x5113=IKsin(j1);
IkReal x5114=((0.045)*cj3);
IkReal x5115=((0.3)*cj3);
IkReal x5116=(sj3*x5113);
IkReal x5117=(cj3*x5113);
IkReal x5118=(sj3*x5112);
IkReal x5119=(pz*x5113);
IkReal x5120=(pz*x5112);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5120+(((-1.0)*x5115)));
evalcond[1]=((0.045)+(((-1.0)*x5119))+(((0.3)*sj3))+(((-1.0)*x5114)));
evalcond[2]=((-0.2125)+(((0.09)*x5119))+(((-1.0)*pp))+(((1.1)*x5120)));
evalcond[3]=(((x5112*x5114))+((x5113*x5115))+(((-0.3)*x5118))+(((0.55)*x5113))+(((0.045)*x5116))+(((-0.045)*x5112)));
evalcond[4]=((((-1.0)*x5112*x5115))+((x5113*x5114))+(((-0.3)*x5116))+pz+(((-0.55)*x5112))+(((-0.045)*x5118))+(((-0.045)*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5121=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5121))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5121)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5123 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5123.valid){
continue;
}
IkReal x5122=x5123.value;
j1array[0]=((-1.0)*x5122);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5122)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5124=IKsin(j1);
IkReal x5125=IKcos(j1);
IkReal x5126=((0.045)*x5125);
evalcond[0]=((((0.55)*x5124))+(((-1.0)*x5126))+(((0.045)*sj3*x5124))+(((0.3)*cj3*x5124))+(((-0.3)*sj3*x5125))+((cj3*x5126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5127=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5127)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5127)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5129=IKPowWithIntegerCheck(pz,-1);
if(!x5129.valid){
continue;
}
IkReal x5128=x5129.value;
if( IKabs(((0.0555555555555556)*x5128*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5128)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5128*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5128))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5128*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5128));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5130=IKsin(j1);
IkReal x5131=IKcos(j1);
IkReal x5132=(pz*x5130);
IkReal x5133=(pz*x5131);
evalcond[0]=((0.85)*x5130);
evalcond[1]=((-1.0)*x5132);
evalcond[2]=((-0.85)+x5133);
evalcond[3]=(pz+(((-0.85)*x5131)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x5132))+(((1.1)*x5133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5134=IKPowWithIntegerCheck(pz,-1);
if(!x5134.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5134.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5134.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5134.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5135=IKsin(j1);
IkReal x5136=IKcos(j1);
IkReal x5137=(pz*x5135);
IkReal x5138=(pz*x5136);
evalcond[0]=((0.85)*x5135);
evalcond[1]=((-1.0)*x5137);
evalcond[2]=((-0.85)+x5138);
evalcond[3]=(pz+(((-0.85)*x5136)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x5137))+(((1.1)*x5138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5139=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5139))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5139)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5141 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5141.valid){
continue;
}
IkReal x5140=x5141.value;
j1array[0]=((-1.0)*x5140);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5140)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5142=IKsin(j1);
IkReal x5143=IKcos(j1);
IkReal x5144=((0.045)*x5143);
evalcond[0]=(((cj3*x5144))+(((0.55)*x5142))+(((-1.0)*x5144))+(((-0.3)*sj3*x5143))+(((0.3)*cj3*x5142))+(((0.045)*sj3*x5142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5145=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5145))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5145)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5147 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5147.valid){
continue;
}
IkReal x5146=x5147.value;
j1array[0]=((-1.0)*x5146);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5146)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5148=IKsin(j1);
IkReal x5149=IKcos(j1);
IkReal x5150=((0.045)*x5149);
evalcond[0]=((((0.55)*x5148))+(((-0.3)*sj3*x5149))+(((-1.0)*x5150))+((cj3*x5150))+(((0.3)*cj3*x5148))+(((0.045)*sj3*x5148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*py);
evalcond[3]=py;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5151=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5151)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5151)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5153=IKPowWithIntegerCheck(pz,-1);
if(!x5153.valid){
continue;
}
IkReal x5152=x5153.value;
if( IKabs(((0.0555555555555556)*x5152*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5152)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5152*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5152))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5152*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5152));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5154=IKsin(j1);
IkReal x5155=IKcos(j1);
IkReal x5156=(pz*x5154);
IkReal x5157=(pz*x5155);
evalcond[0]=((0.85)*x5154);
evalcond[1]=((-1.0)*x5156);
evalcond[2]=((-0.85)+x5157);
evalcond[3]=((((-0.85)*x5155))+pz);
evalcond[4]=((-0.2125)+(((0.09)*x5156))+(((1.1)*x5157))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5158=IKPowWithIntegerCheck(pz,-1);
if(!x5158.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5158.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5158.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5158.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5159=IKsin(j1);
IkReal x5160=IKcos(j1);
IkReal x5161=(pz*x5159);
IkReal x5162=(pz*x5160);
evalcond[0]=((0.85)*x5159);
evalcond[1]=((-1.0)*x5161);
evalcond[2]=((-0.85)+x5162);
evalcond[3]=((((-0.85)*x5160))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5162))+(((-1.0)*pp))+(((0.09)*x5161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=py;
evalcond[3]=((-1.0)*py);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5163=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5163)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5163)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5165=IKPowWithIntegerCheck(pz,-1);
if(!x5165.valid){
continue;
}
IkReal x5164=x5165.value;
if( IKabs(((0.0555555555555556)*x5164*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5164)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5164*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5164))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5164*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5164));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5166=IKsin(j1);
IkReal x5167=IKcos(j1);
IkReal x5168=(pz*x5166);
IkReal x5169=(pz*x5167);
evalcond[0]=((0.85)*x5166);
evalcond[1]=((-1.0)*x5168);
evalcond[2]=((-0.85)+x5169);
evalcond[3]=((((-0.85)*x5167))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5169))+(((-1.0)*pp))+(((0.09)*x5168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5170=IKPowWithIntegerCheck(pz,-1);
if(!x5170.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5170.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5170.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5170.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5171=IKsin(j1);
IkReal x5172=IKcos(j1);
IkReal x5173=(pz*x5171);
IkReal x5174=(pz*x5172);
evalcond[0]=((0.85)*x5171);
evalcond[1]=((-1.0)*x5173);
evalcond[2]=((-0.85)+x5174);
evalcond[3]=(pz+(((-0.85)*x5172)));
evalcond[4]=((-0.2125)+(((1.1)*x5174))+(((-1.0)*pp))+(((0.09)*x5173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5175=((1.0)*pp);
CheckValue<IkReal> x5176=IKPowWithIntegerCheck(py,-2);
if(!x5176.valid){
continue;
}
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(pz)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x5176.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5175))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5175)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5178 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5178.valid){
continue;
}
IkReal x5177=x5178.value;
j1array[0]=((-1.0)*x5177);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5177)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5179=IKsin(j1);
IkReal x5180=IKcos(j1);
IkReal x5181=((0.045)*x5180);
evalcond[0]=((((-0.3)*sj3*x5180))+(((0.55)*x5179))+((cj3*x5181))+(((-1.0)*x5181))+(((0.3)*cj3*x5179))+(((0.045)*sj3*x5179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5182=IKPowWithIntegerCheck(py,-2);
if(!x5182.valid){
continue;
}
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x5182.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(cj0)))))), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5183=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5183)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5183)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5185=IKPowWithIntegerCheck(pz,-1);
if(!x5185.valid){
continue;
}
IkReal x5184=x5185.value;
if( IKabs(((0.0555555555555556)*x5184*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5184)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5184*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5184))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5184*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5184));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5186=IKsin(j1);
IkReal x5187=IKcos(j1);
IkReal x5188=(pz*x5186);
IkReal x5189=(pz*x5187);
evalcond[0]=((0.85)*x5186);
evalcond[1]=((-1.0)*x5188);
evalcond[2]=((-0.85)+x5189);
evalcond[3]=(pz+(((-0.85)*x5187)));
evalcond[4]=((-0.2125)+(((1.1)*x5189))+(((0.09)*x5188))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5190=IKPowWithIntegerCheck(pz,-1);
if(!x5190.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5190.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5190.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5190.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5191=IKsin(j1);
IkReal x5192=IKcos(j1);
IkReal x5193=(pz*x5191);
IkReal x5194=(pz*x5192);
evalcond[0]=((0.85)*x5191);
evalcond[1]=((-1.0)*x5193);
evalcond[2]=((-0.85)+x5194);
evalcond[3]=((((-0.85)*x5192))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x5193))+(((1.1)*x5194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5195=((1.0)*pp);
CheckValue<IkReal> x5196=IKPowWithIntegerCheck(py,-2);
if(!x5196.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x5196.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)))))+(IKabs(((IKabs(py))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5195))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5195)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5198 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5198.valid){
continue;
}
IkReal x5197=x5198.value;
j1array[0]=((-1.0)*x5197);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5197)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5199=IKsin(j1);
IkReal x5200=IKcos(j1);
IkReal x5201=((0.045)*x5200);
evalcond[0]=((((-1.0)*x5201))+(((0.55)*x5199))+((cj3*x5201))+(((0.3)*cj3*x5199))+(((-0.3)*sj3*x5200))+(((0.045)*sj3*x5199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5202=IKPowWithIntegerCheck(py,-2);
if(!x5202.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(sj0))+(IKabs(((x5202.value)*(pz*pz))))+(IKabs(((1.0)+(IKsign(cj0)))))), 6.28318530717959)))))+(IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5203=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5203)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5203)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5205=IKPowWithIntegerCheck(pz,-1);
if(!x5205.valid){
continue;
}
IkReal x5204=x5205.value;
if( IKabs(((0.0555555555555556)*x5204*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5204)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5204*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5204))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5204*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5204));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5206=IKsin(j1);
IkReal x5207=IKcos(j1);
IkReal x5208=(pz*x5206);
IkReal x5209=(pz*x5207);
evalcond[0]=((0.85)*x5206);
evalcond[1]=((-1.0)*x5208);
evalcond[2]=((-0.85)+x5209);
evalcond[3]=((((-0.85)*x5207))+pz);
evalcond[4]=((-0.2125)+(((0.09)*x5208))+(((1.1)*x5209))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5210=IKPowWithIntegerCheck(pz,-1);
if(!x5210.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5210.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5210.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5210.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5211=IKsin(j1);
IkReal x5212=IKcos(j1);
IkReal x5213=(pz*x5211);
IkReal x5214=(pz*x5212);
evalcond[0]=((0.85)*x5211);
evalcond[1]=((-1.0)*x5213);
evalcond[2]=((-0.85)+x5214);
evalcond[3]=(pz+(((-0.85)*x5212)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5214))+(((0.09)*x5213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5215=sj3*sj3;
IkReal x5216=cj3*cj3;
IkReal x5217=(cj3*sj3);
CheckValue<IkReal> x5218 = IKatan2WithCheck((gconst77*(((-0.3025)+(((-0.027)*x5217))+(((-0.0495)*sj3))+(pz*pz)+(((-0.002025)*x5215))+(((-0.09)*x5216))+(((-0.33)*cj3))))),(gconst77*(((0.02475)+(((0.0135)*x5215))+(((-0.01125)*cj3))+(((0.087975)*x5217))+(((-0.0135)*x5216))+(((0.167025)*sj3))+(((-1.0)*py*pz*sj0))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5218.valid){
continue;
}
j1array[0]=x5218.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5219=IKcos(j1);
IkReal x5220=IKsin(j1);
IkReal x5221=((0.3)*cj3);
IkReal x5222=((0.045)*cj3);
IkReal x5223=(py*sj0);
IkReal x5224=((0.045)*sj3);
IkReal x5225=((0.3)*sj3);
IkReal x5226=((0.045)*x5220);
IkReal x5227=(pz*x5220);
IkReal x5228=(pz*x5219);
evalcond[0]=((-0.55)+x5228+(((-1.0)*x5224))+(((-1.0)*x5221))+((x5220*x5223)));
evalcond[1]=((0.045)+x5225+((x5219*x5223))+(((-1.0)*x5222))+(((-1.0)*x5227)));
evalcond[2]=((-0.2125)+(((1.1)*x5220*x5223))+(((-1.0)*pp))+(((0.09)*x5227))+(((1.1)*x5228))+(((-0.09)*x5219*x5223)));
evalcond[3]=((((-0.55)*x5219))+(((-1.0)*x5219*x5224))+(((-1.0)*x5219*x5221))+pz+(((-1.0)*x5226))+(((-1.0)*x5220*x5225))+((x5220*x5222)));
evalcond[4]=((((-1.0)*x5219*x5225))+((x5219*x5222))+(((-1.0)*x5223))+((x5220*x5224))+((x5220*x5221))+(((0.55)*x5220))+(((-0.045)*x5219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5229=(py*sj0);
IkReal x5230=((0.3)*sj3);
IkReal x5231=((0.045)*cj3);
IkReal x5232=((0.045)*pz);
IkReal x5233=((0.3)*cj3);
CheckValue<IkReal> x5234 = IKatan2WithCheck((gconst76*(((((-1.0)*pz*x5231))+(((0.045)*sj3*x5229))+x5232+((x5229*x5233))+((pz*x5230))+(((0.55)*x5229))))),(gconst76*((((sj3*x5232))+(((-1.0)*x5229*x5230))+((x5229*x5231))+(((-0.045)*x5229))+((pz*x5233))+(((0.55)*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5234.valid){
continue;
}
j1array[0]=x5234.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5235=IKcos(j1);
IkReal x5236=IKsin(j1);
IkReal x5237=((0.3)*cj3);
IkReal x5238=((0.045)*cj3);
IkReal x5239=(py*sj0);
IkReal x5240=((0.045)*sj3);
IkReal x5241=((0.3)*sj3);
IkReal x5242=((0.045)*x5236);
IkReal x5243=(pz*x5236);
IkReal x5244=(pz*x5235);
evalcond[0]=((-0.55)+(((-1.0)*x5237))+(((-1.0)*x5240))+((x5236*x5239))+x5244);
evalcond[1]=((0.045)+(((-1.0)*x5238))+(((-1.0)*x5243))+((x5235*x5239))+x5241);
evalcond[2]=((-0.2125)+(((1.1)*x5244))+(((0.09)*x5243))+(((1.1)*x5236*x5239))+(((-1.0)*pp))+(((-0.09)*x5235*x5239)));
evalcond[3]=((((-1.0)*x5235*x5240))+(((-1.0)*x5235*x5237))+(((-1.0)*x5236*x5241))+(((-1.0)*x5242))+((x5236*x5238))+pz+(((-0.55)*x5235)));
evalcond[4]=((((-1.0)*x5235*x5241))+((x5236*x5237))+((x5236*x5240))+((x5235*x5238))+(((-1.0)*x5239))+(((0.55)*x5236))+(((-0.045)*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5245=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x5245;
evalcond[3]=x5245;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst80;
gconst80=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst81;
IkReal x5246=((0.045)*pz);
IkReal x5247=(cj0*px);
gconst81=IKsign(((((-0.3)*cj3*x5247))+(((-1.0)*x5246))+((cj3*x5246))+(((-0.3)*pz*sj3))+(((-0.045)*sj3*x5247))+(((-0.55)*x5247))));
IkReal x5248=(cj0*px);
dummyeval[0]=((((-1.0)*sj3*x5248))+(((-6.66666666666667)*pz*sj3))+(((-1.0)*pz))+(((-12.2222222222222)*x5248))+(((-6.66666666666667)*cj3*x5248))+((cj3*pz)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5249=IKPowWithIntegerCheck(px,-2);
if(!x5249.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x5249.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=px;
evalcond[3]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst82;
gconst82=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5250=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((-1.0)*x5250))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5250)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5252 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5252.valid){
continue;
}
IkReal x5251=x5252.value;
j1array[0]=((-1.0)*x5251);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5251)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5253=IKsin(j1);
IkReal x5254=IKcos(j1);
IkReal x5255=((0.045)*x5254);
evalcond[0]=((((0.55)*x5253))+x5255+(((0.3)*sj3*x5254))+(((0.045)*sj3*x5253))+(((-1.0)*cj3*x5255))+(((0.3)*cj3*x5253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5257=IKPowWithIntegerCheck(pz,-1);
if(!x5257.valid){
continue;
}
IkReal x5256=x5257.value;
if( IKabs((x5256*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x5256*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5256*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x5256*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x5256*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x5256*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5258=IKcos(j1);
IkReal x5259=IKsin(j1);
IkReal x5260=((0.045)*cj3);
IkReal x5261=((0.3)*cj3);
IkReal x5262=(sj3*x5259);
IkReal x5263=(cj3*x5259);
IkReal x5264=(sj3*x5258);
IkReal x5265=(pz*x5259);
IkReal x5266=(pz*x5258);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5261))+x5266);
evalcond[1]=((0.045)+(((-1.0)*x5260))+x5265+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5266))+(((-1.0)*pp))+(((-0.09)*x5265)));
evalcond[3]=((((-1.0)*x5258*x5260))+(((0.3)*x5264))+(((0.55)*x5259))+(((0.045)*x5262))+(((0.045)*x5258))+((x5259*x5261)));
evalcond[4]=((((-1.0)*x5258*x5261))+(((0.3)*x5262))+(((-0.045)*x5264))+(((-1.0)*x5259*x5260))+(((-0.55)*x5258))+pz+(((0.045)*x5259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5268=IKPowWithIntegerCheck(pz,-1);
if(!x5268.valid){
continue;
}
IkReal x5267=x5268.value;
if( IKabs(((0.111111111111111)*x5267*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5267*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x5267*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x5267*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x5267*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x5267*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5269=IKcos(j1);
IkReal x5270=IKsin(j1);
IkReal x5271=((0.045)*cj3);
IkReal x5272=((0.3)*cj3);
IkReal x5273=(sj3*x5270);
IkReal x5274=(cj3*x5270);
IkReal x5275=(sj3*x5269);
IkReal x5276=(pz*x5270);
IkReal x5277=(pz*x5269);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5277+(((-1.0)*x5272)));
evalcond[1]=((0.045)+x5276+(((-1.0)*x5271))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x5276))+(((-1.0)*pp))+(((1.1)*x5277)));
evalcond[3]=((((0.3)*x5275))+(((0.045)*x5273))+(((0.045)*x5269))+((x5270*x5272))+(((0.55)*x5270))+(((-1.0)*x5269*x5271)));
evalcond[4]=((((0.3)*x5273))+(((-0.045)*x5275))+(((-0.55)*x5269))+(((-1.0)*x5270*x5271))+(((0.045)*x5270))+pz+(((-1.0)*x5269*x5272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5278 = IKatan2WithCheck((gconst82*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst82*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5278.valid){
continue;
}
j1array[0]=x5278.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5279=IKcos(j1);
IkReal x5280=IKsin(j1);
IkReal x5281=((0.045)*cj3);
IkReal x5282=((0.3)*cj3);
IkReal x5283=(sj3*x5280);
IkReal x5284=(cj3*x5280);
IkReal x5285=(sj3*x5279);
IkReal x5286=(pz*x5280);
IkReal x5287=(pz*x5279);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5287+(((-1.0)*x5282)));
evalcond[1]=((0.045)+x5286+(((-1.0)*x5281))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x5286))+(((-1.0)*pp))+(((1.1)*x5287)));
evalcond[3]=((((0.3)*x5285))+(((-1.0)*x5279*x5281))+((x5280*x5282))+(((0.045)*x5283))+(((0.045)*x5279))+(((0.55)*x5280)));
evalcond[4]=((((0.3)*x5283))+(((-1.0)*x5279*x5282))+(((-0.045)*x5285))+(((0.045)*x5280))+pz+(((-1.0)*x5280*x5281))+(((-0.55)*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5288=((-1.0)*px);
CheckValue<IkReal> x5289=IKPowWithIntegerCheck(px,-2);
if(!x5289.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x5289.value)*(pz*pz))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x5288;
evalcond[3]=x5288;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst83;
gconst83=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5290=((1.0)*pp);
IkReal x5291=((-1.0)*px);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5290))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x5291;
evalcond[4]=x5291;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5290)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5293 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5293.valid){
continue;
}
IkReal x5292=x5293.value;
j1array[0]=((-1.0)*x5292);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5292)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5294=IKsin(j1);
IkReal x5295=IKcos(j1);
IkReal x5296=((0.045)*x5295);
evalcond[0]=(x5296+(((-1.0)*cj3*x5296))+(((0.045)*sj3*x5294))+(((0.3)*sj3*x5295))+(((0.55)*x5294))+(((0.3)*cj3*x5294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5298=IKPowWithIntegerCheck(pz,-1);
if(!x5298.valid){
continue;
}
IkReal x5297=x5298.value;
if( IKabs((x5297*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x5297*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5297*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x5297*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x5297*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x5297*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5299=IKcos(j1);
IkReal x5300=IKsin(j1);
IkReal x5301=((0.045)*cj3);
IkReal x5302=((0.3)*cj3);
IkReal x5303=(sj3*x5300);
IkReal x5304=(cj3*x5300);
IkReal x5305=(sj3*x5299);
IkReal x5306=(pz*x5300);
IkReal x5307=(pz*x5299);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5302))+x5307);
evalcond[1]=((0.045)+(((-1.0)*x5301))+x5306+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5307))+(((-1.0)*pp))+(((-0.09)*x5306)));
evalcond[3]=((((0.3)*x5305))+(((0.045)*x5303))+((x5300*x5302))+(((0.55)*x5300))+(((0.045)*x5299))+(((-1.0)*x5299*x5301)));
evalcond[4]=((((0.3)*x5303))+(((0.045)*x5300))+(((-1.0)*x5300*x5301))+pz+(((-0.045)*x5305))+(((-1.0)*x5299*x5302))+(((-0.55)*x5299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5309=IKPowWithIntegerCheck(pz,-1);
if(!x5309.valid){
continue;
}
IkReal x5308=x5309.value;
if( IKabs(((0.111111111111111)*x5308*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5308*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x5308*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x5308*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x5308*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x5308*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5310=IKcos(j1);
IkReal x5311=IKsin(j1);
IkReal x5312=((0.045)*cj3);
IkReal x5313=((0.3)*cj3);
IkReal x5314=(sj3*x5311);
IkReal x5315=(cj3*x5311);
IkReal x5316=(sj3*x5310);
IkReal x5317=(pz*x5311);
IkReal x5318=(pz*x5310);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5313))+x5318);
evalcond[1]=((0.045)+(((-1.0)*x5312))+x5317+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5318))+(((-0.09)*x5317))+(((-1.0)*pp)));
evalcond[3]=((((0.3)*x5316))+(((-1.0)*x5310*x5312))+(((0.55)*x5311))+(((0.045)*x5310))+(((0.045)*x5314))+((x5311*x5313)));
evalcond[4]=((((0.3)*x5314))+(((-1.0)*x5310*x5313))+(((-0.55)*x5310))+(((0.045)*x5311))+pz+(((-0.045)*x5316))+(((-1.0)*x5311*x5312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5319 = IKatan2WithCheck((gconst83*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst83*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5319.valid){
continue;
}
j1array[0]=x5319.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5320=IKcos(j1);
IkReal x5321=IKsin(j1);
IkReal x5322=((0.045)*cj3);
IkReal x5323=((0.3)*cj3);
IkReal x5324=(sj3*x5321);
IkReal x5325=(cj3*x5321);
IkReal x5326=(sj3*x5320);
IkReal x5327=(pz*x5321);
IkReal x5328=(pz*x5320);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5328+(((-1.0)*x5323)));
evalcond[1]=((0.045)+x5327+(((-1.0)*x5322))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5328))+(((-0.09)*x5327)));
evalcond[3]=((((0.3)*x5326))+((x5321*x5323))+(((0.045)*x5324))+(((0.045)*x5320))+(((0.55)*x5321))+(((-1.0)*x5320*x5322)));
evalcond[4]=((((-1.0)*x5321*x5322))+(((-0.045)*x5326))+(((0.3)*x5324))+pz+(((-0.55)*x5320))+(((0.045)*x5321))+(((-1.0)*x5320*x5323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5329=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5329))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5329)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5331 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5331.valid){
continue;
}
IkReal x5330=x5331.value;
j1array[0]=((-1.0)*x5330);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5330)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5332=IKsin(j1);
IkReal x5333=IKcos(j1);
IkReal x5334=((0.045)*x5333);
evalcond[0]=(x5334+(((0.3)*cj3*x5332))+(((0.045)*sj3*x5332))+(((0.55)*x5332))+(((0.3)*sj3*x5333))+(((-1.0)*cj3*x5334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5335=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5335)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5335)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5337=IKPowWithIntegerCheck(pz,-1);
if(!x5337.valid){
continue;
}
IkReal x5336=x5337.value;
if( IKabs(((0.0555555555555556)*x5336*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5336)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5336*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x5336))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5336*(((144.5)+(((-200.0)*pp))))), ((0.85)*x5336));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5338=IKsin(j1);
IkReal x5339=IKcos(j1);
IkReal x5340=(pz*x5338);
IkReal x5341=(pz*x5339);
evalcond[0]=x5340;
evalcond[1]=((0.85)*x5338);
evalcond[2]=((-0.85)+x5341);
evalcond[3]=(pz+(((-0.85)*x5339)));
evalcond[4]=((-0.2125)+(((1.1)*x5341))+(((-1.0)*pp))+(((-0.09)*x5340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5342=IKPowWithIntegerCheck(pz,-1);
if(!x5342.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5342.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5342.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5342.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5343=IKsin(j1);
IkReal x5344=IKcos(j1);
IkReal x5345=(pz*x5343);
IkReal x5346=(pz*x5344);
evalcond[0]=x5345;
evalcond[1]=((0.85)*x5343);
evalcond[2]=((-0.85)+x5346);
evalcond[3]=((((-0.85)*x5344))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5346))+(((-1.0)*pp))+(((-0.09)*x5345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5347=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5347))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5347)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5349 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5349.valid){
continue;
}
IkReal x5348=x5349.value;
j1array[0]=((-1.0)*x5348);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5348)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5350=IKsin(j1);
IkReal x5351=IKcos(j1);
IkReal x5352=((0.045)*x5351);
evalcond[0]=((((-1.0)*cj3*x5352))+x5352+(((0.55)*x5350))+(((0.3)*cj3*x5350))+(((0.3)*sj3*x5351))+(((0.045)*sj3*x5350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5353=((1.0)*pp);
IkReal x5354=((-1.0)*px);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5353))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x5354;
evalcond[4]=x5354;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5353)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5356 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5356.valid){
continue;
}
IkReal x5355=x5356.value;
j1array[0]=((-1.0)*x5355);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5355)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5357=IKsin(j1);
IkReal x5358=IKcos(j1);
IkReal x5359=((0.045)*x5358);
evalcond[0]=((((-1.0)*cj3*x5359))+x5359+(((0.55)*x5357))+(((0.3)*cj3*x5357))+(((0.3)*sj3*x5358))+(((0.045)*sj3*x5357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=px;
evalcond[3]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5360=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5360)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5360)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5362=IKPowWithIntegerCheck(pz,-1);
if(!x5362.valid){
continue;
}
IkReal x5361=x5362.value;
if( IKabs(((0.0555555555555556)*x5361*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5361)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5361*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x5361))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5361*(((144.5)+(((-200.0)*pp))))), ((0.85)*x5361));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5363=IKsin(j1);
IkReal x5364=IKcos(j1);
IkReal x5365=(pz*x5363);
IkReal x5366=(pz*x5364);
evalcond[0]=x5365;
evalcond[1]=((0.85)*x5363);
evalcond[2]=((-0.85)+x5366);
evalcond[3]=((((-0.85)*x5364))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x5365))+(((1.1)*x5366))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5367=IKPowWithIntegerCheck(pz,-1);
if(!x5367.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5367.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5367.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5367.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5368=IKsin(j1);
IkReal x5369=IKcos(j1);
IkReal x5370=(pz*x5368);
IkReal x5371=(pz*x5369);
evalcond[0]=x5370;
evalcond[1]=((0.85)*x5368);
evalcond[2]=((-0.85)+x5371);
evalcond[3]=((((-0.85)*x5369))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5371))+(((-1.0)*pp))+(((-0.09)*x5370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5372=((-1.0)*px);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x5372;
evalcond[3]=x5372;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5373=((1.0)*pp);
IkReal x5374=((-1.0)*px);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5373)));
evalcond[2]=-0.85;
evalcond[3]=x5374;
evalcond[4]=x5374;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5373)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5376=IKPowWithIntegerCheck(pz,-1);
if(!x5376.valid){
continue;
}
IkReal x5375=x5376.value;
if( IKabs(((0.0555555555555556)*x5375*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5375)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5375*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x5375))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5375*(((144.5)+(((-200.0)*pp))))), ((0.85)*x5375));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5377=IKsin(j1);
IkReal x5378=IKcos(j1);
IkReal x5379=(pz*x5377);
IkReal x5380=(pz*x5378);
evalcond[0]=x5379;
evalcond[1]=((0.85)*x5377);
evalcond[2]=((-0.85)+x5380);
evalcond[3]=((((-0.85)*x5378))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5380))+(((-1.0)*pp))+(((-0.09)*x5379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5381=IKPowWithIntegerCheck(pz,-1);
if(!x5381.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5381.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5381.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5381.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5382=IKsin(j1);
IkReal x5383=IKcos(j1);
IkReal x5384=(pz*x5382);
IkReal x5385=(pz*x5383);
evalcond[0]=x5384;
evalcond[1]=((0.85)*x5382);
evalcond[2]=((-0.85)+x5385);
evalcond[3]=((((-0.85)*x5383))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5385))+(((-1.0)*pp))+(((-0.09)*x5384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5386=((1.0)*pp);
CheckValue<IkReal> x5387=IKPowWithIntegerCheck(px,-2);
if(!x5387.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x5387.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)))))+(IKabs(((IKabs(px))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5386))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5386)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5389 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5389.valid){
continue;
}
IkReal x5388=x5389.value;
j1array[0]=((-1.0)*x5388);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5388)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5390=IKsin(j1);
IkReal x5391=IKcos(j1);
IkReal x5392=((0.045)*x5391);
evalcond[0]=(x5392+(((-1.0)*cj3*x5392))+(((0.3)*sj3*x5391))+(((0.045)*sj3*x5390))+(((0.3)*cj3*x5390))+(((0.55)*x5390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5393=IKPowWithIntegerCheck(px,-2);
if(!x5393.valid){
continue;
}
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x5393.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5394=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5394)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5394)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5396=IKPowWithIntegerCheck(pz,-1);
if(!x5396.valid){
continue;
}
IkReal x5395=x5396.value;
if( IKabs(((0.0555555555555556)*x5395*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5395)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5395*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x5395))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5395*(((144.5)+(((-200.0)*pp))))), ((0.85)*x5395));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5397=IKsin(j1);
IkReal x5398=IKcos(j1);
IkReal x5399=(pz*x5397);
IkReal x5400=(pz*x5398);
evalcond[0]=x5399;
evalcond[1]=((0.85)*x5397);
evalcond[2]=((-0.85)+x5400);
evalcond[3]=((((-0.85)*x5398))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5400))+(((-0.09)*x5399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5401=IKPowWithIntegerCheck(pz,-1);
if(!x5401.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5401.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5401.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5401.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5402=IKsin(j1);
IkReal x5403=IKcos(j1);
IkReal x5404=(pz*x5402);
IkReal x5405=(pz*x5403);
evalcond[0]=x5404;
evalcond[1]=((0.85)*x5402);
evalcond[2]=((-0.85)+x5405);
evalcond[3]=((((-0.85)*x5403))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x5404))+(((-1.0)*pp))+(((1.1)*x5405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5406=((1.0)*pp);
CheckValue<IkReal> x5407=IKPowWithIntegerCheck(px,-2);
if(!x5407.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x5407.value)*(pz*pz))))), 6.28318530717959)))))+(IKabs(((IKabs(px))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5406))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5406)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5409 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5409.valid){
continue;
}
IkReal x5408=x5409.value;
j1array[0]=((-1.0)*x5408);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5408)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5410=IKsin(j1);
IkReal x5411=IKcos(j1);
IkReal x5412=((0.045)*x5411);
evalcond[0]=(x5412+(((0.045)*sj3*x5410))+(((0.3)*sj3*x5411))+(((0.3)*cj3*x5410))+(((0.55)*x5410))+(((-1.0)*cj3*x5412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5413=IKPowWithIntegerCheck(px,-2);
if(!x5413.valid){
continue;
}
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x5413.value)*(pz*pz))))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5414=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5414)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5414)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5416=IKPowWithIntegerCheck(pz,-1);
if(!x5416.valid){
continue;
}
IkReal x5415=x5416.value;
if( IKabs(((0.0555555555555556)*x5415*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5415)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5415*(((144.5)+(((-200.0)*pp))))))+IKsqr(((0.85)*x5415))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5415*(((144.5)+(((-200.0)*pp))))), ((0.85)*x5415));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5417=IKsin(j1);
IkReal x5418=IKcos(j1);
IkReal x5419=(pz*x5417);
IkReal x5420=(pz*x5418);
evalcond[0]=x5419;
evalcond[1]=((0.85)*x5417);
evalcond[2]=((-0.85)+x5420);
evalcond[3]=((((-0.85)*x5418))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5420))+(((-0.09)*x5419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5421=IKPowWithIntegerCheck(pz,-1);
if(!x5421.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5421.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5421.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5421.value)*(((-361.25)+(((2200.0)*(pz*pz)))+(((-1700.0)*pp))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5422=IKsin(j1);
IkReal x5423=IKcos(j1);
IkReal x5424=(pz*x5422);
IkReal x5425=(pz*x5423);
evalcond[0]=x5424;
evalcond[1]=((0.85)*x5422);
evalcond[2]=((-0.85)+x5425);
evalcond[3]=((((-0.85)*x5423))+pz);
evalcond[4]=((-0.2125)+(((-0.09)*x5424))+(((-1.0)*pp))+(((1.1)*x5425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5426=cj3*cj3;
IkReal x5427=sj3*sj3;
IkReal x5428=(cj3*sj3);
CheckValue<IkReal> x5429 = IKatan2WithCheck((gconst81*(((-0.3025)+(((-0.09)*x5426))+(((-0.0495)*sj3))+(pz*pz)+(((-0.027)*x5428))+(((-0.002025)*x5427))+(((-0.33)*cj3))))),(gconst81*(((-0.02475)+(((0.01125)*cj3))+(((-1.0)*cj0*px*pz))+(((-0.167025)*sj3))+(((-0.0135)*x5427))+(((-0.087975)*x5428))+(((0.0135)*x5426))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5429.valid){
continue;
}
j1array[0]=x5429.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5430=IKsin(j1);
IkReal x5431=IKcos(j1);
IkReal x5432=((0.3)*cj3);
IkReal x5433=((0.045)*cj3);
IkReal x5434=((0.045)*sj3);
IkReal x5435=(cj0*px);
IkReal x5436=((0.3)*sj3);
IkReal x5437=((0.045)*x5430);
IkReal x5438=((1.0)*x5435);
IkReal x5439=(pz*x5430);
IkReal x5440=(pz*x5431);
evalcond[0]=((-0.55)+x5440+(((-1.0)*x5434))+(((-1.0)*x5432))+((x5430*x5435)));
evalcond[1]=((0.045)+x5436+x5439+(((-1.0)*x5431*x5438))+(((-1.0)*x5433)));
evalcond[2]=((-0.2125)+(((1.1)*x5440))+(((-1.0)*pp))+(((1.1)*x5430*x5435))+(((0.09)*x5431*x5435))+(((-0.09)*x5439)));
evalcond[3]=((((-0.55)*x5431))+x5437+(((-1.0)*x5431*x5434))+(((-1.0)*x5431*x5432))+pz+(((-1.0)*x5430*x5433))+((x5430*x5436)));
evalcond[4]=((((-1.0)*x5431*x5433))+(((0.045)*x5431))+(((-1.0)*x5438))+((x5431*x5436))+((x5430*x5432))+((x5430*x5434))+(((0.55)*x5430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5441=((0.3)*sj3);
IkReal x5442=(cj0*px);
IkReal x5443=((0.045)*cj3);
IkReal x5444=((0.045)*pz);
IkReal x5445=((0.3)*cj3);
CheckValue<IkReal> x5446 = IKatan2WithCheck((gconst80*((x5444+(((-1.0)*pz*x5443))+((pz*x5441))+(((-1.0)*x5442*x5445))+(((-0.55)*x5442))+(((-0.045)*sj3*x5442))))),(gconst80*(((((-0.55)*pz))+(((-1.0)*pz*x5445))+(((-0.045)*x5442))+(((-1.0)*sj3*x5444))+(((-1.0)*x5441*x5442))+((x5442*x5443))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5446.valid){
continue;
}
j1array[0]=x5446.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5447=IKsin(j1);
IkReal x5448=IKcos(j1);
IkReal x5449=((0.3)*cj3);
IkReal x5450=((0.045)*cj3);
IkReal x5451=((0.045)*sj3);
IkReal x5452=(cj0*px);
IkReal x5453=((0.3)*sj3);
IkReal x5454=((0.045)*x5447);
IkReal x5455=((1.0)*x5452);
IkReal x5456=(pz*x5447);
IkReal x5457=(pz*x5448);
evalcond[0]=((-0.55)+x5457+(((-1.0)*x5449))+((x5447*x5452))+(((-1.0)*x5451)));
evalcond[1]=((0.045)+x5453+x5456+(((-1.0)*x5448*x5455))+(((-1.0)*x5450)));
evalcond[2]=((-0.2125)+(((-0.09)*x5456))+(((1.1)*x5447*x5452))+(((-1.0)*pp))+(((0.09)*x5448*x5452))+(((1.1)*x5457)));
evalcond[3]=(x5454+(((-1.0)*x5448*x5449))+((x5447*x5453))+pz+(((-0.55)*x5448))+(((-1.0)*x5448*x5451))+(((-1.0)*x5447*x5450)));
evalcond[4]=((((0.55)*x5447))+((x5447*x5451))+((x5448*x5453))+(((-1.0)*x5448*x5450))+(((0.045)*x5448))+(((-1.0)*x5455))+((x5447*x5449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5458=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x5458;
evalcond[3]=((-1.0)*x5458);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst84;
gconst84=IKsign(((pz*pz)+(((cj0*cj0)*(px*px)))));
dummyeval[0]=((pz*pz)+(((cj0*cj0)*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst85;
IkReal x5459=((0.045)*pz);
IkReal x5460=(cj0*px);
gconst85=IKsign((x5459+(((-0.045)*sj3*x5460))+(((-0.55)*x5460))+(((0.3)*pz*sj3))+(((-0.3)*cj3*x5460))+(((-1.0)*cj3*x5459))));
IkReal x5461=(cj0*px);
dummyeval[0]=((((-1.0)*cj3*pz))+(((-6.66666666666667)*cj3*x5461))+(((-1.0)*sj3*x5461))+(((6.66666666666667)*pz*sj3))+pz+(((-12.2222222222222)*x5461)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5462=IKPowWithIntegerCheck(px,-2);
if(!x5462.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x5462.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=px;
evalcond[3]=((-1.0)*px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst86;
gconst86=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5463=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5463))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5463)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5465 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5465.valid){
continue;
}
IkReal x5464=x5465.value;
j1array[0]=((-1.0)*x5464);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5464)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5466=IKsin(j1);
IkReal x5467=IKcos(j1);
IkReal x5468=((0.045)*x5467);
evalcond[0]=((((0.3)*cj3*x5466))+(((0.045)*sj3*x5466))+(((-1.0)*x5468))+(((-0.3)*sj3*x5467))+((cj3*x5468))+(((0.55)*x5466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5470=IKPowWithIntegerCheck(pz,-1);
if(!x5470.valid){
continue;
}
IkReal x5469=x5470.value;
if( IKabs((x5469*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x5469*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5469*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x5469*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x5469*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x5469*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5471=IKcos(j1);
IkReal x5472=IKsin(j1);
IkReal x5473=((0.045)*cj3);
IkReal x5474=((0.3)*cj3);
IkReal x5475=(sj3*x5472);
IkReal x5476=(cj3*x5472);
IkReal x5477=(sj3*x5471);
IkReal x5478=(pz*x5472);
IkReal x5479=(pz*x5471);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5479+(((-1.0)*x5474)));
evalcond[1]=((0.045)+(((-1.0)*x5478))+(((-1.0)*x5473))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x5478))+(((1.1)*x5479))+(((-1.0)*pp)));
evalcond[3]=(((x5471*x5473))+((x5472*x5474))+(((0.55)*x5472))+(((-0.3)*x5477))+(((-0.045)*x5471))+(((0.045)*x5475)));
evalcond[4]=(((x5472*x5473))+(((-0.3)*x5475))+pz+(((-0.045)*x5472))+(((-0.045)*x5477))+(((-1.0)*x5471*x5474))+(((-0.55)*x5471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5481=IKPowWithIntegerCheck(pz,-1);
if(!x5481.valid){
continue;
}
IkReal x5480=x5481.value;
if( IKabs(((0.111111111111111)*x5480*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5480*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x5480*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x5480*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x5480*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x5480*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5482=IKcos(j1);
IkReal x5483=IKsin(j1);
IkReal x5484=((0.045)*cj3);
IkReal x5485=((0.3)*cj3);
IkReal x5486=(sj3*x5483);
IkReal x5487=(cj3*x5483);
IkReal x5488=(sj3*x5482);
IkReal x5489=(pz*x5483);
IkReal x5490=(pz*x5482);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5485))+x5490);
evalcond[1]=((0.045)+(((-1.0)*x5484))+(((-1.0)*x5489))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5490))+(((-1.0)*pp))+(((0.09)*x5489)));
evalcond[3]=(((x5483*x5485))+(((0.55)*x5483))+((x5482*x5484))+(((-0.3)*x5488))+(((-0.045)*x5482))+(((0.045)*x5486)));
evalcond[4]=(((x5483*x5484))+(((-0.3)*x5486))+(((-0.55)*x5482))+(((-0.045)*x5483))+(((-0.045)*x5488))+pz+(((-1.0)*x5482*x5485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5491 = IKatan2WithCheck((gconst86*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst86*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5491.valid){
continue;
}
j1array[0]=x5491.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5492=IKcos(j1);
IkReal x5493=IKsin(j1);
IkReal x5494=((0.045)*cj3);
IkReal x5495=((0.3)*cj3);
IkReal x5496=(sj3*x5493);
IkReal x5497=(cj3*x5493);
IkReal x5498=(sj3*x5492);
IkReal x5499=(pz*x5493);
IkReal x5500=(pz*x5492);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5500+(((-1.0)*x5495)));
evalcond[1]=((0.045)+(((-1.0)*x5494))+(((-1.0)*x5499))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5500))+(((0.09)*x5499))+(((-1.0)*pp)));
evalcond[3]=((((0.55)*x5493))+((x5493*x5495))+((x5492*x5494))+(((-0.045)*x5492))+(((0.045)*x5496))+(((-0.3)*x5498)));
evalcond[4]=((((-0.55)*x5492))+((x5493*x5494))+(((-1.0)*x5492*x5495))+pz+(((-0.045)*x5498))+(((-0.045)*x5493))+(((-0.3)*x5496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5501=IKPowWithIntegerCheck(px,-2);
if(!x5501.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x5501.value)*(pz*pz))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*px);
evalcond[3]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst87;
gconst87=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5502=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5502))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5502)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5504 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5504.valid){
continue;
}
IkReal x5503=x5504.value;
j1array[0]=((-1.0)*x5503);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5503)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5505=IKsin(j1);
IkReal x5506=IKcos(j1);
IkReal x5507=((0.045)*x5506);
evalcond[0]=((((0.55)*x5505))+(((-0.3)*sj3*x5506))+((cj3*x5507))+(((0.3)*cj3*x5505))+(((0.045)*sj3*x5505))+(((-1.0)*x5507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5509=IKPowWithIntegerCheck(pz,-1);
if(!x5509.valid){
continue;
}
IkReal x5508=x5509.value;
if( IKabs((x5508*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x5508*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5508*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x5508*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x5508*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x5508*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5510=IKcos(j1);
IkReal x5511=IKsin(j1);
IkReal x5512=((0.045)*cj3);
IkReal x5513=((0.3)*cj3);
IkReal x5514=(sj3*x5511);
IkReal x5515=(cj3*x5511);
IkReal x5516=(sj3*x5510);
IkReal x5517=(pz*x5511);
IkReal x5518=(pz*x5510);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5518+(((-1.0)*x5513)));
evalcond[1]=((0.045)+(((-1.0)*x5512))+(((-1.0)*x5517))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x5518))+(((0.09)*x5517))+(((-1.0)*pp)));
evalcond[3]=((((0.55)*x5511))+((x5511*x5513))+(((-0.045)*x5510))+(((-0.3)*x5516))+((x5510*x5512))+(((0.045)*x5514)));
evalcond[4]=((((-1.0)*x5510*x5513))+((x5511*x5512))+pz+(((-0.045)*x5511))+(((-0.045)*x5516))+(((-0.55)*x5510))+(((-0.3)*x5514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5520=IKPowWithIntegerCheck(pz,-1);
if(!x5520.valid){
continue;
}
IkReal x5519=x5520.value;
if( IKabs(((0.111111111111111)*x5519*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5519*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x5519*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x5519*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x5519*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x5519*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5521=IKcos(j1);
IkReal x5522=IKsin(j1);
IkReal x5523=((0.045)*cj3);
IkReal x5524=((0.3)*cj3);
IkReal x5525=(sj3*x5522);
IkReal x5526=(cj3*x5522);
IkReal x5527=(sj3*x5521);
IkReal x5528=(pz*x5522);
IkReal x5529=(pz*x5521);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x5529+(((-1.0)*x5524)));
evalcond[1]=((0.045)+(((-1.0)*x5523))+(((0.3)*sj3))+(((-1.0)*x5528)));
evalcond[2]=((-0.2125)+(((1.1)*x5529))+(((0.09)*x5528))+(((-1.0)*pp)));
evalcond[3]=(((x5521*x5523))+((x5522*x5524))+(((0.045)*x5525))+(((-0.3)*x5527))+(((-0.045)*x5521))+(((0.55)*x5522)));
evalcond[4]=(((x5522*x5523))+(((-0.3)*x5525))+(((-0.045)*x5527))+(((-0.045)*x5522))+(((-0.55)*x5521))+pz+(((-1.0)*x5521*x5524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5530 = IKatan2WithCheck((gconst87*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst87*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5530.valid){
continue;
}
j1array[0]=x5530.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5531=IKcos(j1);
IkReal x5532=IKsin(j1);
IkReal x5533=((0.045)*cj3);
IkReal x5534=((0.3)*cj3);
IkReal x5535=(sj3*x5532);
IkReal x5536=(cj3*x5532);
IkReal x5537=(sj3*x5531);
IkReal x5538=(pz*x5532);
IkReal x5539=(pz*x5531);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x5534))+x5539);
evalcond[1]=((0.045)+(((-1.0)*x5533))+(((0.3)*sj3))+(((-1.0)*x5538)));
evalcond[2]=((-0.2125)+(((1.1)*x5539))+(((0.09)*x5538))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x5535))+(((-0.3)*x5537))+(((-0.045)*x5531))+((x5531*x5533))+((x5532*x5534))+(((0.55)*x5532)));
evalcond[4]=((((-0.3)*x5535))+(((-0.045)*x5532))+(((-0.045)*x5537))+pz+(((-0.55)*x5531))+((x5532*x5533))+(((-1.0)*x5531*x5534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5540=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(pz)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5540))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5540)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5542 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5542.valid){
continue;
}
IkReal x5541=x5542.value;
j1array[0]=((-1.0)*x5541);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5541)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5543=IKsin(j1);
IkReal x5544=IKcos(j1);
IkReal x5545=((0.045)*x5544);
evalcond[0]=((((0.045)*sj3*x5543))+((cj3*x5545))+(((0.3)*cj3*x5543))+(((0.55)*x5543))+(((-0.3)*sj3*x5544))+(((-1.0)*x5545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5546=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5546)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5546)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5548=IKPowWithIntegerCheck(pz,-1);
if(!x5548.valid){
continue;
}
IkReal x5547=x5548.value;
if( IKabs(((0.0555555555555556)*x5547*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5547)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5547*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5547))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5547*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5547));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5549=IKsin(j1);
IkReal x5550=IKcos(j1);
IkReal x5551=(pz*x5549);
IkReal x5552=(pz*x5550);
evalcond[0]=((0.85)*x5549);
evalcond[1]=((-1.0)*x5551);
evalcond[2]=((-0.85)+x5552);
evalcond[3]=(pz+(((-0.85)*x5550)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5552))+(((0.09)*x5551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5553=IKPowWithIntegerCheck(pz,-1);
if(!x5553.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5553.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5553.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5553.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5554=IKsin(j1);
IkReal x5555=IKcos(j1);
IkReal x5556=(pz*x5554);
IkReal x5557=(pz*x5555);
evalcond[0]=((0.85)*x5554);
evalcond[1]=((-1.0)*x5556);
evalcond[2]=((-0.85)+x5557);
evalcond[3]=(pz+(((-0.85)*x5555)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5557))+(((0.09)*x5556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5558=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5558))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5558)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5560 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5560.valid){
continue;
}
IkReal x5559=x5560.value;
j1array[0]=((-1.0)*x5559);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5559)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5561=IKsin(j1);
IkReal x5562=IKcos(j1);
IkReal x5563=((0.045)*x5562);
evalcond[0]=((((-0.3)*sj3*x5562))+((cj3*x5563))+(((0.55)*x5561))+(((0.045)*sj3*x5561))+(((-1.0)*x5563))+(((0.3)*cj3*x5561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5564=((1.0)*pp);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5564))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x5564)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5566 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5566.valid){
continue;
}
IkReal x5565=x5566.value;
j1array[0]=((-1.0)*x5565);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5565)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5567=IKsin(j1);
IkReal x5568=IKcos(j1);
IkReal x5569=((0.045)*x5568);
evalcond[0]=((((-0.3)*sj3*x5568))+((cj3*x5569))+(((0.55)*x5567))+(((0.045)*sj3*x5567))+(((-1.0)*x5569))+(((0.3)*cj3*x5567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=px;
evalcond[3]=((-1.0)*px);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5570=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5570)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5570)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5572=IKPowWithIntegerCheck(pz,-1);
if(!x5572.valid){
continue;
}
IkReal x5571=x5572.value;
if( IKabs(((0.0555555555555556)*x5571*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5571)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5571*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5571))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5571*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5571));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5573=IKsin(j1);
IkReal x5574=IKcos(j1);
IkReal x5575=(pz*x5573);
IkReal x5576=(pz*x5574);
evalcond[0]=((0.85)*x5573);
evalcond[1]=((-1.0)*x5575);
evalcond[2]=((-0.85)+x5576);
evalcond[3]=((((-0.85)*x5574))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5576))+(((-1.0)*pp))+(((0.09)*x5575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5577=IKPowWithIntegerCheck(pz,-1);
if(!x5577.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5577.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5577.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5577.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5578=IKsin(j1);
IkReal x5579=IKcos(j1);
IkReal x5580=(pz*x5578);
IkReal x5581=(pz*x5579);
evalcond[0]=((0.85)*x5578);
evalcond[1]=((-1.0)*x5580);
evalcond[2]=((-0.85)+x5581);
evalcond[3]=((((-0.85)*x5579))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5581))+(((0.09)*x5580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*px);
evalcond[3]=px;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5582=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5582)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5582)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5584=IKPowWithIntegerCheck(pz,-1);
if(!x5584.valid){
continue;
}
IkReal x5583=x5584.value;
if( IKabs(((0.0555555555555556)*x5583*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5583)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5583*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5583))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5583*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5583));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5585=IKsin(j1);
IkReal x5586=IKcos(j1);
IkReal x5587=(pz*x5585);
IkReal x5588=(pz*x5586);
evalcond[0]=((0.85)*x5585);
evalcond[1]=((-1.0)*x5587);
evalcond[2]=((-0.85)+x5588);
evalcond[3]=(pz+(((-0.85)*x5586)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5588))+(((0.09)*x5587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5589=IKPowWithIntegerCheck(pz,-1);
if(!x5589.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5589.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5589.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5589.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5590=IKsin(j1);
IkReal x5591=IKcos(j1);
IkReal x5592=(pz*x5590);
IkReal x5593=(pz*x5591);
evalcond[0]=((0.85)*x5590);
evalcond[1]=((-1.0)*x5592);
evalcond[2]=((-0.85)+x5593);
evalcond[3]=(pz+(((-0.85)*x5591)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5593))+(((0.09)*x5592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5594=((1.0)*pp);
CheckValue<IkReal> x5595=IKPowWithIntegerCheck(px,-2);
if(!x5595.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x5595.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)))))+(IKabs(((IKabs(px))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5594))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5594)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5597 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5597.valid){
continue;
}
IkReal x5596=x5597.value;
j1array[0]=((-1.0)*x5596);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5596)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5598=IKsin(j1);
IkReal x5599=IKcos(j1);
IkReal x5600=((0.045)*x5599);
evalcond[0]=((((-0.3)*sj3*x5599))+(((0.045)*sj3*x5598))+((cj3*x5600))+(((0.55)*x5598))+(((0.3)*cj3*x5598))+(((-1.0)*x5600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5601=IKPowWithIntegerCheck(px,-2);
if(!x5601.valid){
continue;
}
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(cj0))+(IKabs(((x5601.value)*(pz*pz))))+(IKabs(((-1.0)+(IKsign(sj0)))))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5602=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5602)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5602)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5604=IKPowWithIntegerCheck(pz,-1);
if(!x5604.valid){
continue;
}
IkReal x5603=x5604.value;
if( IKabs(((0.0555555555555556)*x5603*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5603)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5603*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5603))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5603*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5603));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5605=IKsin(j1);
IkReal x5606=IKcos(j1);
IkReal x5607=(pz*x5605);
IkReal x5608=(pz*x5606);
evalcond[0]=((0.85)*x5605);
evalcond[1]=((-1.0)*x5607);
evalcond[2]=((-0.85)+x5608);
evalcond[3]=((((-0.85)*x5606))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5608))+(((0.09)*x5607))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5609=IKPowWithIntegerCheck(pz,-1);
if(!x5609.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5609.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5609.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5609.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5610=IKsin(j1);
IkReal x5611=IKcos(j1);
IkReal x5612=(pz*x5610);
IkReal x5613=(pz*x5611);
evalcond[0]=((0.85)*x5610);
evalcond[1]=((-1.0)*x5612);
evalcond[2]=((-0.85)+x5613);
evalcond[3]=((((-0.85)*x5611))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5613))+(((0.09)*x5612))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5614=((1.0)*pp);
CheckValue<IkReal> x5615=IKPowWithIntegerCheck(px,-2);
if(!x5615.valid){
continue;
}
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x5615.value)*(pz*pz))))), 6.28318530717959)))))+(IKabs(((IKabs(px))+(IKabs(pz))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5614))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5614)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5617 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5617.valid){
continue;
}
IkReal x5616=x5617.value;
j1array[0]=((-1.0)*x5616);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5616)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5618=IKsin(j1);
IkReal x5619=IKcos(j1);
IkReal x5620=((0.045)*x5619);
evalcond[0]=((((0.045)*sj3*x5618))+(((0.3)*cj3*x5618))+(((-0.3)*sj3*x5619))+((cj3*x5620))+(((-1.0)*x5620))+(((0.55)*x5618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x5621=IKPowWithIntegerCheck(px,-2);
if(!x5621.valid){
continue;
}
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((x5621.value)*(pz*pz))))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=0;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5622=((1.0)*pp);
evalcond[0]=IKabs(pz);
evalcond[1]=((0.7225)+(((-1.0)*x5622)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5622)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5624=IKPowWithIntegerCheck(pz,-1);
if(!x5624.valid){
continue;
}
IkReal x5623=x5624.value;
if( IKabs(((0.0555555555555556)*x5623*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.85)*x5623)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0555555555555556)*x5623*(((-144.5)+(((200.0)*pp))))))+IKsqr(((0.85)*x5623))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0555555555555556)*x5623*(((-144.5)+(((200.0)*pp))))), ((0.85)*x5623));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5625=IKsin(j1);
IkReal x5626=IKcos(j1);
IkReal x5627=(pz*x5625);
IkReal x5628=(pz*x5626);
evalcond[0]=((0.85)*x5625);
evalcond[1]=((-1.0)*x5627);
evalcond[2]=((-0.85)+x5628);
evalcond[3]=((((-0.85)*x5626))+pz);
evalcond[4]=((-0.2125)+(((1.1)*x5628))+(((0.09)*x5627))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5629=IKPowWithIntegerCheck(pz,-1);
if(!x5629.valid){
continue;
}
if( IKabs(((0.0065359477124183)*(x5629.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.17647058823529)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0065359477124183)*(x5629.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))))+IKsqr(((1.17647058823529)*pz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0065359477124183)*(x5629.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(pz*pz)))))), ((1.17647058823529)*pz));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5630=IKsin(j1);
IkReal x5631=IKcos(j1);
IkReal x5632=(pz*x5630);
IkReal x5633=(pz*x5631);
evalcond[0]=((0.85)*x5630);
evalcond[1]=((-1.0)*x5632);
evalcond[2]=((-0.85)+x5633);
evalcond[3]=((((-0.85)*x5631))+pz);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x5633))+(((0.09)*x5632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5634=sj3*sj3;
IkReal x5635=cj3*cj3;
IkReal x5636=(cj3*sj3);
CheckValue<IkReal> x5637 = IKatan2WithCheck((gconst85*(((-0.3025)+(((-0.09)*x5635))+(((-0.0495)*sj3))+(((-0.002025)*x5634))+(((-0.027)*x5636))+(pz*pz)+(((-0.33)*cj3))))),(gconst85*(((0.02475)+(((-0.0135)*x5635))+(((-0.01125)*cj3))+(((-1.0)*cj0*px*pz))+(((0.0135)*x5634))+(((0.167025)*sj3))+(((0.087975)*x5636))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5637.valid){
continue;
}
j1array[0]=x5637.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5638=IKcos(j1);
IkReal x5639=IKsin(j1);
IkReal x5640=((0.3)*cj3);
IkReal x5641=((0.045)*cj3);
IkReal x5642=(cj0*px);
IkReal x5643=((0.045)*sj3);
IkReal x5644=((0.3)*sj3);
IkReal x5645=((0.045)*x5639);
IkReal x5646=(pz*x5639);
IkReal x5647=(pz*x5638);
evalcond[0]=((-0.55)+x5647+((x5639*x5642))+(((-1.0)*x5643))+(((-1.0)*x5640)));
evalcond[1]=((0.045)+x5644+(((-1.0)*x5641))+((x5638*x5642))+(((-1.0)*x5646)));
evalcond[2]=((-0.2125)+(((1.1)*x5639*x5642))+(((-1.0)*pp))+(((0.09)*x5646))+(((1.1)*x5647))+(((-0.09)*x5638*x5642)));
evalcond[3]=(((x5639*x5641))+(((-1.0)*x5638*x5643))+(((-1.0)*x5638*x5640))+(((-1.0)*x5645))+pz+(((-0.55)*x5638))+(((-1.0)*x5639*x5644)));
evalcond[4]=(((x5639*x5640))+((x5639*x5643))+(((-1.0)*x5638*x5644))+(((-0.045)*x5638))+(((0.55)*x5639))+((x5638*x5641))+(((-1.0)*x5642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5648=(pz*sj3);
IkReal x5649=(cj0*px);
IkReal x5650=((0.045)*pz);
IkReal x5651=((0.3)*cj3);
CheckValue<IkReal> x5652 = IKatan2WithCheck((gconst84*((x5650+(((0.045)*sj3*x5649))+(((0.3)*x5648))+((x5649*x5651))+(((-1.0)*cj3*x5650))+(((0.55)*x5649))))),(gconst84*((((pz*x5651))+(((-0.045)*x5649))+(((0.045)*cj3*x5649))+(((-0.3)*sj3*x5649))+(((0.045)*x5648))+(((0.55)*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
j1array[0]=x5652.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5653=IKcos(j1);
IkReal x5654=IKsin(j1);
IkReal x5655=((0.3)*cj3);
IkReal x5656=((0.045)*cj3);
IkReal x5657=(cj0*px);
IkReal x5658=((0.045)*sj3);
IkReal x5659=((0.3)*sj3);
IkReal x5660=((0.045)*x5654);
IkReal x5661=(pz*x5654);
IkReal x5662=(pz*x5653);
evalcond[0]=((-0.55)+x5662+((x5654*x5657))+(((-1.0)*x5658))+(((-1.0)*x5655)));
evalcond[1]=((0.045)+x5659+((x5653*x5657))+(((-1.0)*x5656))+(((-1.0)*x5661)));
evalcond[2]=((-0.2125)+(((-0.09)*x5653*x5657))+(((1.1)*x5654*x5657))+(((-1.0)*pp))+(((0.09)*x5661))+(((1.1)*x5662)));
evalcond[3]=((((-1.0)*x5660))+(((-0.55)*x5653))+((x5654*x5656))+(((-1.0)*x5654*x5659))+(((-1.0)*x5653*x5658))+(((-1.0)*x5653*x5655))+pz);
evalcond[4]=(((x5654*x5658))+((x5654*x5655))+(((-0.045)*x5653))+(((-1.0)*x5653*x5659))+((x5653*x5656))+(((0.55)*x5654))+(((-1.0)*x5657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5663=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x5663;
evalcond[3]=x5663;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst88;
gconst88=IKsign((((cj0*px))+((py*sj0))));
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5664=(cj0*px);
IkReal x5665=(py*sj0);
IkReal x5666=((6.66666666666667)*cj3);
IkReal x5667=((1.0)*sj3);
dummyeval[0]=(x5665+x5664);
dummyeval[1]=((((-12.2222222222222)*x5664))+(((-12.2222222222222)*x5665))+(((-1.0)*x5665*x5666))+(((-1.0)*x5665*x5667))+(((-1.0)*x5664*x5666))+(((-1.0)*x5664*x5667)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5668=(py*sj0);
IkReal x5669=(cj0*px);
IkReal x5670=((6.66666666666667)*sj3);
IkReal x5671=((1.0)*x5669);
IkReal x5672=((1.0)*x5668);
IkReal x5673=(x5671+x5672);
dummyeval[0]=(((cj3*x5669))+((cj3*x5668))+(((-1.0)*x5669*x5670))+(((-1.0)*x5668*x5670))+(((-1.0)*x5673)));
dummyeval[1]=((-1.0)*x5673);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5674=x5663;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x5674;
evalcond[3]=x5674;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5675=(cj0*px);
IkReal x5676=(py*sj0);
dummyeval[0]=(x5675+x5676);
dummyeval[1]=((x5676*x5676)+(x5675*x5675)+(((2.0)*x5675*x5676)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5677=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x5677)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5677)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5678=((1.0)*pp);
IkReal x5679=((-1.0)*py);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.7225)+(((-1.0)*x5678)));
evalcond[2]=-0.85;
evalcond[3]=x5679;
evalcond[4]=x5679;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5678)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5680=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x5680)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5680)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5681=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x5681)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5681)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5682=((1.0)*pp);
IkReal x5683=((-1.0)*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x5682)));
evalcond[2]=-0.85;
evalcond[3]=x5683;
evalcond[4]=x5683;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x5682)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5684=(cj0*px);
IkReal x5685=(py*sj0);
IkReal x5686=((20.0)*pp);
CheckValue<IkReal> x5687=IKPowWithIntegerCheck(((((20.0)*x5684))+(((20.0)*x5685))),-1);
if(!x5687.valid){
continue;
}
CheckValue<IkReal> x5688=IKPowWithIntegerCheck(((((3.6)*x5684*x5685))+(((1.8)*(x5684*x5684)))+(((1.8)*(x5685*x5685)))),-1);
if(!x5688.valid){
continue;
}
if( IKabs(((17.0)*(x5687.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5688.value)*((((x5685*x5686))+((x5684*x5686))+(((-14.45)*x5685))+(((-14.45)*x5684)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x5687.value)))+IKsqr(((x5688.value)*((((x5685*x5686))+((x5684*x5686))+(((-14.45)*x5685))+(((-14.45)*x5684))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x5687.value)), ((x5688.value)*((((x5685*x5686))+((x5684*x5686))+(((-14.45)*x5685))+(((-14.45)*x5684))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5689=IKsin(j1);
IkReal x5690=IKcos(j1);
IkReal x5691=(py*sj0);
IkReal x5692=(cj0*px);
IkReal x5693=((0.09)*x5690);
IkReal x5694=((1.0)*x5690);
IkReal x5695=((1.1)*x5689);
evalcond[0]=((-0.85)*x5690);
evalcond[1]=((-0.85)+((x5689*x5691))+((x5689*x5692)));
evalcond[2]=((((0.85)*x5689))+(((-1.0)*x5691))+(((-1.0)*x5692)));
evalcond[3]=((((-1.0)*x5691*x5694))+(((-1.0)*x5692*x5694)));
evalcond[4]=((-0.2125)+((x5692*x5693))+((x5692*x5695))+((x5691*x5693))+((x5691*x5695))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5696=(cj0*px);
IkReal x5697=(py*sj0);
CheckValue<IkReal> x5698=IKPowWithIntegerCheck(((((1.53)*x5697))+(((1.53)*x5696))),-1);
if(!x5698.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x5697))+(((1.17647058823529)*x5696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5698.value)*(((3.6125)+(((-44.0)*x5696*x5697))+(((17.0)*pp))+(((-22.0)*(x5697*x5697)))+(((-22.0)*(x5696*x5696))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x5697))+(((1.17647058823529)*x5696))))+IKsqr(((x5698.value)*(((3.6125)+(((-44.0)*x5696*x5697))+(((17.0)*pp))+(((-22.0)*(x5697*x5697)))+(((-22.0)*(x5696*x5696)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x5697))+(((1.17647058823529)*x5696))), ((x5698.value)*(((3.6125)+(((-44.0)*x5696*x5697))+(((17.0)*pp))+(((-22.0)*(x5697*x5697)))+(((-22.0)*(x5696*x5696)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5699=IKsin(j1);
IkReal x5700=IKcos(j1);
IkReal x5701=(py*sj0);
IkReal x5702=(cj0*px);
IkReal x5703=((0.09)*x5700);
IkReal x5704=((1.0)*x5700);
IkReal x5705=((1.1)*x5699);
evalcond[0]=((-0.85)*x5700);
evalcond[1]=((-0.85)+((x5699*x5701))+((x5699*x5702)));
evalcond[2]=((((-1.0)*x5701))+(((-1.0)*x5702))+(((0.85)*x5699)));
evalcond[3]=((((-1.0)*x5702*x5704))+(((-1.0)*x5701*x5704)));
evalcond[4]=((-0.2125)+((x5701*x5705))+((x5701*x5703))+(((-1.0)*pp))+((x5702*x5703))+((x5702*x5705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst89;
CheckValue<IkReal> x5706 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x5706.valid){
continue;
}
gconst89=((-1.0)*(x5706.value));
IkReal gconst90;
gconst90=IKsin(gconst89);
IkReal gconst91;
gconst91=IKcos(gconst89);
IkReal x5707=((((-1.0)*gconst91*py))+((gconst90*px)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst89))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x5707;
evalcond[3]=x5707;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst107;
gconst107=IKsign((((gconst91*px))+((gconst90*py))));
dummyeval[0]=(((gconst91*px))+((gconst90*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5708=(gconst90*py);
IkReal x5709=((6.66666666666667)*cj3);
IkReal x5710=(gconst91*px);
IkReal x5711=((1.0)*sj3);
dummyeval[0]=(x5708+x5710);
dummyeval[1]=((((-1.0)*x5708*x5711))+(((-1.0)*x5708*x5709))+(((-12.2222222222222)*x5708))+(((-1.0)*x5709*x5710))+(((-12.2222222222222)*x5710))+(((-1.0)*x5710*x5711)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5712=(gconst91*px);
IkReal x5713=(gconst90*py);
IkReal x5714=((6.66666666666667)*sj3);
IkReal x5715=((1.0)*x5712);
IkReal x5716=((1.0)*x5713);
IkReal x5717=(x5716+x5715);
dummyeval[0]=((((-1.0)*x5713*x5714))+(((-1.0)*x5712*x5714))+((cj3*x5713))+((cj3*x5712))+(((-1.0)*x5717)));
dummyeval[1]=((-1.0)*x5717);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x5718=x5707;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x5718;
evalcond[3]=x5718;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst91*px))+((gconst90*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5719=(gconst91*px);
IkReal x5720=(gconst90*py);
dummyeval[0]=(x5720+x5719);
dummyeval[1]=((x5719*x5719)+(((2.0)*x5719*x5720))+(x5720*x5720));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5721=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x5721)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5721)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5722=(gconst91*px);
IkReal x5723=(gconst90*py);
IkReal x5724=((20.0)*pp);
CheckValue<IkReal> x5725=IKPowWithIntegerCheck(((((20.0)*x5722))+(((20.0)*x5723))),-1);
if(!x5725.valid){
continue;
}
CheckValue<IkReal> x5726=IKPowWithIntegerCheck(((((3.6)*x5722*x5723))+(((1.8)*(x5722*x5722)))+(((1.8)*(x5723*x5723)))),-1);
if(!x5726.valid){
continue;
}
if( IKabs(((17.0)*(x5725.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5726.value)*((((x5723*x5724))+((x5722*x5724))+(((-14.45)*x5722))+(((-14.45)*x5723)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x5725.value)))+IKsqr(((x5726.value)*((((x5723*x5724))+((x5722*x5724))+(((-14.45)*x5722))+(((-14.45)*x5723))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x5725.value)), ((x5726.value)*((((x5723*x5724))+((x5722*x5724))+(((-14.45)*x5722))+(((-14.45)*x5723))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5727=IKsin(j1);
IkReal x5728=IKcos(j1);
IkReal x5729=(gconst90*py);
IkReal x5730=(gconst91*px);
IkReal x5731=((1.0)*x5728);
IkReal x5732=((1.1)*x5727);
IkReal x5733=((0.09)*x5728);
evalcond[0]=((-0.85)*x5728);
evalcond[1]=((-0.85)+((x5727*x5729))+((x5727*x5730)));
evalcond[2]=((((-1.0)*x5729))+(((-1.0)*x5730))+(((0.85)*x5727)));
evalcond[3]=((((-1.0)*x5729*x5731))+(((-1.0)*x5730*x5731)));
evalcond[4]=((-0.2125)+((x5730*x5733))+((x5730*x5732))+((x5729*x5732))+((x5729*x5733))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5734=(gconst90*py);
IkReal x5735=(gconst91*px);
CheckValue<IkReal> x5736=IKPowWithIntegerCheck(((((1.53)*x5735))+(((1.53)*x5734))),-1);
if(!x5736.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x5734))+(((1.17647058823529)*x5735)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5736.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x5735*x5735)))+(((-44.0)*x5734*x5735))+(((-22.0)*(x5734*x5734))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x5734))+(((1.17647058823529)*x5735))))+IKsqr(((x5736.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x5735*x5735)))+(((-44.0)*x5734*x5735))+(((-22.0)*(x5734*x5734)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x5734))+(((1.17647058823529)*x5735))), ((x5736.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x5735*x5735)))+(((-44.0)*x5734*x5735))+(((-22.0)*(x5734*x5734)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5737=IKsin(j1);
IkReal x5738=IKcos(j1);
IkReal x5739=(gconst90*py);
IkReal x5740=(gconst91*px);
IkReal x5741=((1.0)*x5738);
IkReal x5742=((1.1)*x5737);
IkReal x5743=((0.09)*x5738);
evalcond[0]=((-0.85)*x5738);
evalcond[1]=((-0.85)+((x5737*x5740))+((x5737*x5739)));
evalcond[2]=((((0.85)*x5737))+(((-1.0)*x5740))+(((-1.0)*x5739)));
evalcond[3]=((((-1.0)*x5740*x5741))+(((-1.0)*x5739*x5741)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+((x5740*x5743))+((x5740*x5742))+((x5739*x5742))+((x5739*x5743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5744=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x5744))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5744)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5746 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
IkReal x5745=x5746.value;
j1array[0]=((-1.0)*x5745);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5745)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5747=IKsin(j1);
IkReal x5748=IKcos(j1);
IkReal x5749=((0.045)*x5748);
evalcond[0]=((((0.045)*sj3*x5747))+(((0.55)*x5747))+(((0.3)*cj3*x5747))+(((0.3)*sj3*x5748))+x5749+(((-1.0)*cj3*x5749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5750=((-1.0)*gconst91*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x5750;
evalcond[3]=x5750;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst90;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst90;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5751=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x5751)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5751)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5755=IKPowWithIntegerCheck(gconst90,-1);
if(!x5755.valid){
continue;
}
IkReal x5752=x5755.value;
CheckValue<IkReal> x5756=IKPowWithIntegerCheck(py,-1);
if(!x5756.valid){
continue;
}
IkReal x5753=x5756.value;
IkReal x5754=(x5752*x5753);
if( IKabs(((0.85)*x5754)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x5754*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x5754))+IKsqr(((0.0555555555555556)*x5754*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x5754), ((0.0555555555555556)*x5754*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5757=IKcos(j1);
IkReal x5758=IKsin(j1);
IkReal x5759=(gconst90*py);
evalcond[0]=((-0.85)*x5757);
evalcond[1]=((-1.0)*x5757*x5759);
evalcond[2]=((-0.85)+((x5758*x5759)));
evalcond[3]=((((0.85)*x5758))+(((-1.0)*x5759)));
evalcond[4]=((-0.2125)+(((1.1)*x5758*x5759))+(((-1.0)*pp))+(((0.09)*x5757*x5759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5760=IKPowWithIntegerCheck(gconst90,-1);
if(!x5760.valid){
continue;
}
CheckValue<IkReal> x5761=IKPowWithIntegerCheck(py,-1);
if(!x5761.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst90*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x5760.value)*(x5761.value)*(((361.25)+(((-2200.0)*(gconst90*gconst90)*(py*py)))+(((1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst90*py))+IKsqr(((0.0065359477124183)*(x5760.value)*(x5761.value)*(((361.25)+(((-2200.0)*(gconst90*gconst90)*(py*py)))+(((1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst90*py), ((0.0065359477124183)*(x5760.value)*(x5761.value)*(((361.25)+(((-2200.0)*(gconst90*gconst90)*(py*py)))+(((1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5762=IKcos(j1);
IkReal x5763=IKsin(j1);
IkReal x5764=(gconst90*py);
evalcond[0]=((-0.85)*x5762);
evalcond[1]=((-1.0)*x5762*x5764);
evalcond[2]=((-0.85)+((x5763*x5764)));
evalcond[3]=((((0.85)*x5763))+(((-1.0)*x5764)));
evalcond[4]=((-0.2125)+(((1.1)*x5763*x5764))+(((-1.0)*pp))+(((0.09)*x5762*x5764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5765=(gconst90*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x5765;
evalcond[3]=x5765;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst91;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst91;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5766=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x5766)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5766)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5770=IKPowWithIntegerCheck(gconst91,-1);
if(!x5770.valid){
continue;
}
IkReal x5767=x5770.value;
CheckValue<IkReal> x5771=IKPowWithIntegerCheck(px,-1);
if(!x5771.valid){
continue;
}
IkReal x5768=x5771.value;
IkReal x5769=(x5767*x5768);
if( IKabs(((0.85)*x5769)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x5769*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x5769))+IKsqr(((0.0555555555555556)*x5769*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x5769), ((0.0555555555555556)*x5769*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5772=IKcos(j1);
IkReal x5773=IKsin(j1);
IkReal x5774=(gconst91*px);
evalcond[0]=((-0.85)*x5772);
evalcond[1]=((-1.0)*x5772*x5774);
evalcond[2]=((-0.85)+((x5773*x5774)));
evalcond[3]=((((0.85)*x5773))+(((-1.0)*x5774)));
evalcond[4]=((-0.2125)+(((1.1)*x5773*x5774))+(((0.09)*x5772*x5774))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5775=IKPowWithIntegerCheck(gconst91,-1);
if(!x5775.valid){
continue;
}
CheckValue<IkReal> x5776=IKPowWithIntegerCheck(px,-1);
if(!x5776.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst91*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x5775.value)*(x5776.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst91*gconst91)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst91*px))+IKsqr(((0.0065359477124183)*(x5775.value)*(x5776.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst91*gconst91)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst91*px), ((0.0065359477124183)*(x5775.value)*(x5776.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst91*gconst91)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5777=IKcos(j1);
IkReal x5778=IKsin(j1);
IkReal x5779=(gconst91*px);
evalcond[0]=((-0.85)*x5777);
evalcond[1]=((-1.0)*x5777*x5779);
evalcond[2]=((-0.85)+((x5778*x5779)));
evalcond[3]=((((0.85)*x5778))+(((-1.0)*x5779)));
evalcond[4]=((-0.2125)+(((0.09)*x5777*x5779))+(((-1.0)*pp))+(((1.1)*x5778*x5779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5780=((0.045)*cj3);
IkReal x5781=(gconst90*py);
IkReal x5782=(gconst91*px);
IkReal x5783=((0.3)*sj3);
CheckValue<IkReal> x5784=IKPowWithIntegerCheck(((((-1.0)*x5782*x5783))+(((-1.0)*x5781*x5783))+(((-0.045)*x5782))+(((-0.045)*x5781))+((x5780*x5781))+((x5780*x5782))),-1);
if(!x5784.valid){
continue;
}
CheckValue<IkReal> x5785=IKPowWithIntegerCheck(((((-1.0)*x5782))+(((-1.0)*x5781))),-1);
if(!x5785.valid){
continue;
}
if( IKabs(((x5784.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5785.value)*(((-0.045)+(((-1.0)*x5783))+x5780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5784.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x5785.value)*(((-0.045)+(((-1.0)*x5783))+x5780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5784.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x5785.value)*(((-0.045)+(((-1.0)*x5783))+x5780))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5786=IKsin(j1);
IkReal x5787=IKcos(j1);
IkReal x5788=(gconst91*px);
IkReal x5789=((0.045)*cj3);
IkReal x5790=(gconst90*py);
IkReal x5791=((0.045)*sj3);
IkReal x5792=((0.3)*cj3);
IkReal x5793=((0.3)*sj3);
IkReal x5794=(cj3*x5786);
IkReal x5795=((0.09)*x5787);
IkReal x5796=((1.0)*x5787);
IkReal x5797=((1.1)*x5786);
evalcond[0]=((-0.55)+(((-1.0)*x5791))+(((-1.0)*x5792))+((x5786*x5788))+((x5786*x5790)));
evalcond[1]=((0.045)+(((-1.0)*x5789))+(((-1.0)*x5790*x5796))+(((-1.0)*x5788*x5796))+x5793);
evalcond[2]=((-0.2125)+((x5788*x5797))+((x5788*x5795))+(((-1.0)*pp))+((x5790*x5795))+((x5790*x5797)));
evalcond[3]=((((-0.55)*x5787))+(((0.045)*x5786))+(((-1.0)*x5786*x5789))+(((-1.0)*x5787*x5792))+(((-1.0)*x5787*x5791))+((x5786*x5793)));
evalcond[4]=((((0.045)*x5787))+(((0.55)*x5786))+(((-1.0)*x5787*x5789))+(((-1.0)*x5788))+(((-1.0)*x5790))+((x5787*x5793))+((x5786*x5791))+((x5786*x5792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5798=((0.3)*cj3);
IkReal x5799=(gconst91*px);
IkReal x5800=(gconst90*py);
IkReal x5801=((0.045)*sj3);
CheckValue<IkReal> x5802=IKPowWithIntegerCheck((x5800+x5799),-1);
if(!x5802.valid){
continue;
}
CheckValue<IkReal> x5803=IKPowWithIntegerCheck(((((-0.55)*x5799))+(((-1.0)*x5800*x5801))+(((-1.0)*x5798*x5800))+(((-1.0)*x5798*x5799))+(((-1.0)*x5799*x5801))+(((-0.55)*x5800))),-1);
if(!x5803.valid){
continue;
}
if( IKabs(((x5802.value)*(((0.55)+x5801+x5798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5803.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5802.value)*(((0.55)+x5801+x5798))))+IKsqr(((x5803.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5802.value)*(((0.55)+x5801+x5798))), ((x5803.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5804=IKsin(j1);
IkReal x5805=IKcos(j1);
IkReal x5806=(gconst91*px);
IkReal x5807=((0.045)*cj3);
IkReal x5808=(gconst90*py);
IkReal x5809=((0.045)*sj3);
IkReal x5810=((0.3)*cj3);
IkReal x5811=((0.3)*sj3);
IkReal x5812=(cj3*x5804);
IkReal x5813=((0.09)*x5805);
IkReal x5814=((1.0)*x5805);
IkReal x5815=((1.1)*x5804);
evalcond[0]=((-0.55)+(((-1.0)*x5810))+(((-1.0)*x5809))+((x5804*x5806))+((x5804*x5808)));
evalcond[1]=((0.045)+(((-1.0)*x5808*x5814))+(((-1.0)*x5807))+(((-1.0)*x5806*x5814))+x5811);
evalcond[2]=((-0.2125)+((x5806*x5815))+((x5806*x5813))+((x5808*x5815))+((x5808*x5813))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x5804*x5807))+(((0.045)*x5804))+(((-1.0)*x5805*x5809))+((x5804*x5811))+(((-1.0)*x5805*x5810))+(((-0.55)*x5805)));
evalcond[4]=(((x5805*x5811))+(((0.55)*x5804))+(((0.045)*x5805))+(((-1.0)*x5805*x5807))+((x5804*x5810))+((x5804*x5809))+(((-1.0)*x5806))+(((-1.0)*x5808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5816 = IKatan2WithCheck((gconst107*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst107*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5816.valid){
continue;
}
j1array[0]=x5816.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5817=IKsin(j1);
IkReal x5818=IKcos(j1);
IkReal x5819=(gconst91*px);
IkReal x5820=((0.045)*cj3);
IkReal x5821=(gconst90*py);
IkReal x5822=((0.045)*sj3);
IkReal x5823=((0.3)*cj3);
IkReal x5824=((0.3)*sj3);
IkReal x5825=(cj3*x5817);
IkReal x5826=((0.09)*x5818);
IkReal x5827=((1.0)*x5818);
IkReal x5828=((1.1)*x5817);
evalcond[0]=((-0.55)+(((-1.0)*x5822))+(((-1.0)*x5823))+((x5817*x5821))+((x5817*x5819)));
evalcond[1]=((0.045)+(((-1.0)*x5820))+(((-1.0)*x5821*x5827))+(((-1.0)*x5819*x5827))+x5824);
evalcond[2]=((-0.2125)+((x5821*x5828))+((x5821*x5826))+(((-1.0)*pp))+((x5819*x5826))+((x5819*x5828)));
evalcond[3]=((((-0.55)*x5818))+(((-1.0)*x5818*x5823))+(((-1.0)*x5818*x5822))+(((-1.0)*x5817*x5820))+(((0.045)*x5817))+((x5817*x5824)));
evalcond[4]=((((-1.0)*x5819))+(((-1.0)*x5818*x5820))+(((0.045)*x5818))+((x5818*x5824))+((x5817*x5823))+((x5817*x5822))+(((0.55)*x5817))+(((-1.0)*x5821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst92;
CheckValue<IkReal> x5829 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x5829.valid){
continue;
}
gconst92=((3.14159265358979)+(((-1.0)*(x5829.value))));
IkReal gconst93;
gconst93=IKsin(gconst92);
IkReal gconst94;
gconst94=IKcos(gconst92);
IkReal x5830=(((gconst93*px))+(((-1.0)*gconst94*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst92))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x5830;
evalcond[3]=x5830;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst108;
gconst108=IKsign((((gconst94*px))+((gconst93*py))));
dummyeval[0]=(((gconst94*px))+((gconst93*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5831=(gconst94*px);
IkReal x5832=(gconst93*py);
IkReal x5833=((1.0)*sj3);
IkReal x5834=((6.66666666666667)*cj3);
dummyeval[0]=(x5832+x5831);
dummyeval[1]=((((-1.0)*x5832*x5834))+(((-1.0)*x5832*x5833))+(((-1.0)*x5831*x5833))+(((-1.0)*x5831*x5834))+(((-12.2222222222222)*x5831))+(((-12.2222222222222)*x5832)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5835=(gconst94*px);
IkReal x5836=((6.66666666666667)*sj3);
IkReal x5837=(gconst93*py);
IkReal x5838=((1.0)*x5837);
IkReal x5839=((1.0)*x5835);
IkReal x5840=(x5838+x5839);
dummyeval[0]=(((cj3*x5837))+((cj3*x5835))+(((-1.0)*x5840))+(((-1.0)*x5836*x5837))+(((-1.0)*x5835*x5836)));
dummyeval[1]=((-1.0)*x5840);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x5841=x5830;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x5841;
evalcond[3]=x5841;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst94*px))+((gconst93*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5842=(gconst93*py);
IkReal x5843=(gconst94*px);
dummyeval[0]=(x5843+x5842);
dummyeval[1]=((((2.0)*x5842*x5843))+(x5842*x5842)+(x5843*x5843));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5844=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x5844)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5844)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5845=(gconst94*px);
IkReal x5846=((20.0)*pp);
IkReal x5847=(gconst93*py);
CheckValue<IkReal> x5848=IKPowWithIntegerCheck(((((20.0)*x5845))+(((20.0)*x5847))),-1);
if(!x5848.valid){
continue;
}
CheckValue<IkReal> x5849=IKPowWithIntegerCheck(((((1.8)*(x5847*x5847)))+(((1.8)*(x5845*x5845)))+(((3.6)*x5845*x5847))),-1);
if(!x5849.valid){
continue;
}
if( IKabs(((17.0)*(x5848.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5849.value)*((((x5845*x5846))+((x5846*x5847))+(((-14.45)*x5847))+(((-14.45)*x5845)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x5848.value)))+IKsqr(((x5849.value)*((((x5845*x5846))+((x5846*x5847))+(((-14.45)*x5847))+(((-14.45)*x5845))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x5848.value)), ((x5849.value)*((((x5845*x5846))+((x5846*x5847))+(((-14.45)*x5847))+(((-14.45)*x5845))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5850=IKsin(j1);
IkReal x5851=IKcos(j1);
IkReal x5852=(gconst93*py);
IkReal x5853=(gconst94*px*x5850);
IkReal x5854=(gconst94*px*x5851);
IkReal x5855=(x5851*x5852);
evalcond[0]=((-0.85)*x5851);
evalcond[1]=((-0.85)+((x5850*x5852))+x5853);
evalcond[2]=((((-1.0)*x5852))+(((-1.0)*gconst94*px))+(((0.85)*x5850)));
evalcond[3]=((((-1.0)*x5854))+(((-1.0)*x5855)));
evalcond[4]=((-0.2125)+(((1.1)*x5850*x5852))+(((1.1)*x5853))+(((-1.0)*pp))+(((0.09)*x5854))+(((0.09)*x5855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5856=(gconst93*py);
IkReal x5857=(gconst94*px);
CheckValue<IkReal> x5858=IKPowWithIntegerCheck(((((1.53)*x5856))+(((1.53)*x5857))),-1);
if(!x5858.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x5857))+(((1.17647058823529)*x5856)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5858.value)*(((3.6125)+(((-22.0)*(x5857*x5857)))+(((-22.0)*(x5856*x5856)))+(((17.0)*pp))+(((-44.0)*x5856*x5857)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x5857))+(((1.17647058823529)*x5856))))+IKsqr(((x5858.value)*(((3.6125)+(((-22.0)*(x5857*x5857)))+(((-22.0)*(x5856*x5856)))+(((17.0)*pp))+(((-44.0)*x5856*x5857))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x5857))+(((1.17647058823529)*x5856))), ((x5858.value)*(((3.6125)+(((-22.0)*(x5857*x5857)))+(((-22.0)*(x5856*x5856)))+(((17.0)*pp))+(((-44.0)*x5856*x5857))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5859=IKsin(j1);
IkReal x5860=IKcos(j1);
IkReal x5861=(gconst93*py);
IkReal x5862=(gconst94*px*x5859);
IkReal x5863=(gconst94*px*x5860);
IkReal x5864=(x5860*x5861);
evalcond[0]=((-0.85)*x5860);
evalcond[1]=((-0.85)+((x5859*x5861))+x5862);
evalcond[2]=((((-1.0)*x5861))+(((-1.0)*gconst94*px))+(((0.85)*x5859)));
evalcond[3]=((((-1.0)*x5863))+(((-1.0)*x5864)));
evalcond[4]=((-0.2125)+(((1.1)*x5862))+(((-1.0)*pp))+(((1.1)*x5859*x5861))+(((0.09)*x5863))+(((0.09)*x5864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5865=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x5865))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5865)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5867 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5867.valid){
continue;
}
IkReal x5866=x5867.value;
j1array[0]=((-1.0)*x5866);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5866)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5868=IKsin(j1);
IkReal x5869=IKcos(j1);
IkReal x5870=((0.045)*x5869);
evalcond[0]=((((0.045)*sj3*x5868))+(((0.3)*sj3*x5869))+(((-1.0)*cj3*x5870))+(((0.55)*x5868))+(((0.3)*cj3*x5868))+x5870);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5871=((-1.0)*gconst94*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x5871;
evalcond[3]=x5871;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst93;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst93;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5872=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x5872)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5872)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5876=IKPowWithIntegerCheck(gconst93,-1);
if(!x5876.valid){
continue;
}
IkReal x5873=x5876.value;
CheckValue<IkReal> x5877=IKPowWithIntegerCheck(py,-1);
if(!x5877.valid){
continue;
}
IkReal x5874=x5877.value;
IkReal x5875=(x5873*x5874);
if( IKabs(((0.85)*x5875)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x5875*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x5875))+IKsqr(((0.0555555555555556)*x5875*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x5875), ((0.0555555555555556)*x5875*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5878=IKcos(j1);
IkReal x5879=IKsin(j1);
IkReal x5880=(gconst93*py);
IkReal x5881=(x5878*x5880);
evalcond[0]=((-0.85)*x5878);
evalcond[1]=((-1.0)*x5881);
evalcond[2]=((-0.85)+((x5879*x5880)));
evalcond[3]=((((0.85)*x5879))+(((-1.0)*x5880)));
evalcond[4]=((-0.2125)+(((1.1)*x5879*x5880))+(((-1.0)*pp))+(((0.09)*x5881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5882=IKPowWithIntegerCheck(gconst93,-1);
if(!x5882.valid){
continue;
}
CheckValue<IkReal> x5883=IKPowWithIntegerCheck(py,-1);
if(!x5883.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst93*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x5882.value)*(x5883.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst93*gconst93)*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst93*py))+IKsqr(((0.0065359477124183)*(x5882.value)*(x5883.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst93*gconst93)*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst93*py), ((0.0065359477124183)*(x5882.value)*(x5883.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst93*gconst93)*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5884=IKcos(j1);
IkReal x5885=IKsin(j1);
IkReal x5886=(gconst93*py);
IkReal x5887=(x5884*x5886);
evalcond[0]=((-0.85)*x5884);
evalcond[1]=((-1.0)*x5887);
evalcond[2]=((-0.85)+((x5885*x5886)));
evalcond[3]=((((-1.0)*x5886))+(((0.85)*x5885)));
evalcond[4]=((-0.2125)+(((1.1)*x5885*x5886))+(((-1.0)*pp))+(((0.09)*x5887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5888=(gconst93*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x5888;
evalcond[3]=x5888;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst94;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst94;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5889=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x5889)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5889)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5893=IKPowWithIntegerCheck(gconst94,-1);
if(!x5893.valid){
continue;
}
IkReal x5890=x5893.value;
CheckValue<IkReal> x5894=IKPowWithIntegerCheck(px,-1);
if(!x5894.valid){
continue;
}
IkReal x5891=x5894.value;
IkReal x5892=(x5890*x5891);
if( IKabs(((0.85)*x5892)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x5892*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x5892))+IKsqr(((0.0555555555555556)*x5892*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x5892), ((0.0555555555555556)*x5892*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5895=IKcos(j1);
IkReal x5896=IKsin(j1);
IkReal x5897=(gconst94*px*x5896);
IkReal x5898=(gconst94*px*x5895);
evalcond[0]=((-0.85)*x5895);
evalcond[1]=((-1.0)*x5898);
evalcond[2]=((-0.85)+x5897);
evalcond[3]=((((0.85)*x5896))+(((-1.0)*gconst94*px)));
evalcond[4]=((-0.2125)+(((0.09)*x5898))+(((-1.0)*pp))+(((1.1)*x5897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5899=IKPowWithIntegerCheck(gconst94,-1);
if(!x5899.valid){
continue;
}
CheckValue<IkReal> x5900=IKPowWithIntegerCheck(px,-1);
if(!x5900.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst94*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x5899.value)*(x5900.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst94*gconst94)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst94*px))+IKsqr(((0.0065359477124183)*(x5899.value)*(x5900.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst94*gconst94)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst94*px), ((0.0065359477124183)*(x5899.value)*(x5900.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst94*gconst94)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5901=IKcos(j1);
IkReal x5902=IKsin(j1);
IkReal x5903=(gconst94*px*x5902);
IkReal x5904=(gconst94*px*x5901);
evalcond[0]=((-0.85)*x5901);
evalcond[1]=((-1.0)*x5904);
evalcond[2]=((-0.85)+x5903);
evalcond[3]=((((0.85)*x5902))+(((-1.0)*gconst94*px)));
evalcond[4]=((-0.2125)+(((0.09)*x5904))+(((-1.0)*pp))+(((1.1)*x5903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5905=((0.3)*sj3);
IkReal x5906=(gconst94*px);
IkReal x5907=((0.045)*cj3);
IkReal x5908=(gconst93*py);
IkReal x5909=((0.045)*x5908);
CheckValue<IkReal> x5910=IKPowWithIntegerCheck(((((-1.0)*x5905*x5906))+(((-1.0)*x5905*x5908))+(((-0.045)*x5906))+((x5907*x5908))+((x5906*x5907))+(((-1.0)*x5909))),-1);
if(!x5910.valid){
continue;
}
CheckValue<IkReal> x5911=IKPowWithIntegerCheck(((((-1.0)*x5908))+(((-1.0)*x5906))),-1);
if(!x5911.valid){
continue;
}
if( IKabs(((x5910.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5911.value)*(((-0.045)+x5907+(((-1.0)*x5905)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5910.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x5911.value)*(((-0.045)+x5907+(((-1.0)*x5905))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5910.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x5911.value)*(((-0.045)+x5907+(((-1.0)*x5905))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5912=IKsin(j1);
IkReal x5913=IKcos(j1);
IkReal x5914=(gconst94*px);
IkReal x5915=((0.045)*cj3);
IkReal x5916=((0.045)*sj3);
IkReal x5917=((0.3)*cj3);
IkReal x5918=(gconst93*py);
IkReal x5919=((0.3)*sj3);
IkReal x5920=((1.0)*x5913);
IkReal x5921=(cj3*x5912);
IkReal x5922=(sj3*x5913);
IkReal x5923=((0.09)*x5913);
IkReal x5924=(x5912*x5918);
evalcond[0]=((-0.55)+((x5912*x5914))+x5924+(((-1.0)*x5916))+(((-1.0)*x5917)));
evalcond[1]=((0.045)+(((-1.0)*x5918*x5920))+(((-1.0)*x5914*x5920))+x5919+(((-1.0)*x5915)));
evalcond[2]=((-0.2125)+(((1.1)*x5912*x5914))+(((1.1)*x5924))+((x5918*x5923))+((x5914*x5923))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x5912))+(((-1.0)*x5912*x5915))+((x5912*x5919))+(((-1.0)*x5913*x5917))+(((-1.0)*x5913*x5916))+(((-0.55)*x5913)));
evalcond[4]=((((0.045)*x5913))+((x5912*x5916))+((x5912*x5917))+(((-1.0)*x5913*x5915))+(((0.55)*x5912))+((x5913*x5919))+(((-1.0)*x5914))+(((-1.0)*x5918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5925=(gconst94*px);
IkReal x5926=((0.045)*sj3);
IkReal x5927=(gconst93*py);
IkReal x5928=((0.3)*cj3);
CheckValue<IkReal> x5929=IKPowWithIntegerCheck((x5925+x5927),-1);
if(!x5929.valid){
continue;
}
CheckValue<IkReal> x5930=IKPowWithIntegerCheck(((((-0.55)*x5925))+(((-0.55)*x5927))+(((-1.0)*x5927*x5928))+(((-1.0)*x5925*x5926))+(((-1.0)*x5925*x5928))+(((-1.0)*x5926*x5927))),-1);
if(!x5930.valid){
continue;
}
if( IKabs(((x5929.value)*(((0.55)+x5926+x5928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5930.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5929.value)*(((0.55)+x5926+x5928))))+IKsqr(((x5930.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5929.value)*(((0.55)+x5926+x5928))), ((x5930.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5931=IKsin(j1);
IkReal x5932=IKcos(j1);
IkReal x5933=(gconst94*px);
IkReal x5934=((0.045)*cj3);
IkReal x5935=((0.045)*sj3);
IkReal x5936=((0.3)*cj3);
IkReal x5937=(gconst93*py);
IkReal x5938=((0.3)*sj3);
IkReal x5939=((1.0)*x5932);
IkReal x5940=(cj3*x5931);
IkReal x5941=(sj3*x5932);
IkReal x5942=((0.09)*x5932);
IkReal x5943=(x5931*x5937);
evalcond[0]=((-0.55)+(((-1.0)*x5935))+(((-1.0)*x5936))+((x5931*x5933))+x5943);
evalcond[1]=((0.045)+(((-1.0)*x5934))+(((-1.0)*x5933*x5939))+(((-1.0)*x5937*x5939))+x5938);
evalcond[2]=((-0.2125)+((x5933*x5942))+(((1.1)*x5943))+(((-1.0)*pp))+(((1.1)*x5931*x5933))+((x5937*x5942)));
evalcond[3]=((((-0.55)*x5932))+(((-1.0)*x5931*x5934))+(((-1.0)*x5932*x5935))+(((-1.0)*x5932*x5936))+((x5931*x5938))+(((0.045)*x5931)));
evalcond[4]=(((x5932*x5938))+(((-1.0)*x5933))+(((-1.0)*x5937))+(((0.55)*x5931))+(((-1.0)*x5932*x5934))+((x5931*x5935))+((x5931*x5936))+(((0.045)*x5932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5944 = IKatan2WithCheck((gconst108*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst108*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x5944.valid){
continue;
}
j1array[0]=x5944.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5945=IKsin(j1);
IkReal x5946=IKcos(j1);
IkReal x5947=(gconst94*px);
IkReal x5948=((0.045)*cj3);
IkReal x5949=((0.045)*sj3);
IkReal x5950=((0.3)*cj3);
IkReal x5951=(gconst93*py);
IkReal x5952=((0.3)*sj3);
IkReal x5953=((1.0)*x5946);
IkReal x5954=(cj3*x5945);
IkReal x5955=(sj3*x5946);
IkReal x5956=((0.09)*x5946);
IkReal x5957=(x5945*x5951);
evalcond[0]=((-0.55)+(((-1.0)*x5949))+((x5945*x5947))+(((-1.0)*x5950))+x5957);
evalcond[1]=((0.045)+(((-1.0)*x5948))+(((-1.0)*x5947*x5953))+(((-1.0)*x5951*x5953))+x5952);
evalcond[2]=((-0.2125)+((x5947*x5956))+(((1.1)*x5945*x5947))+((x5951*x5956))+(((-1.0)*pp))+(((1.1)*x5957)));
evalcond[3]=((((-1.0)*x5945*x5948))+(((-1.0)*x5946*x5950))+(((-1.0)*x5946*x5949))+((x5945*x5952))+(((0.045)*x5945))+(((-0.55)*x5946)));
evalcond[4]=(((x5946*x5952))+(((-1.0)*x5947))+((x5945*x5949))+(((-1.0)*x5951))+(((-1.0)*x5946*x5948))+((x5945*x5950))+(((0.045)*x5946))+(((0.55)*x5945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst95;
CheckValue<IkReal> x5958 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x5958.valid){
continue;
}
gconst95=((-1.0)*(x5958.value));
IkReal gconst96;
gconst96=IKsin(gconst95);
IkReal gconst97;
gconst97=IKcos(gconst95);
IkReal x5959=((((-1.0)*gconst97*py))+((gconst96*px)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst95))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x5959;
evalcond[3]=x5959;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst109;
gconst109=IKsign((((gconst97*px))+((gconst96*py))));
dummyeval[0]=(((gconst97*px))+((gconst96*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5960=((6.66666666666667)*cj3);
IkReal x5961=(gconst96*py);
IkReal x5962=(gconst97*px);
IkReal x5963=((1.0)*sj3);
dummyeval[0]=(x5961+x5962);
dummyeval[1]=((((-1.0)*x5960*x5962))+(((-1.0)*x5960*x5961))+(((-1.0)*x5961*x5963))+(((-12.2222222222222)*x5962))+(((-12.2222222222222)*x5961))+(((-1.0)*x5962*x5963)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5964=(gconst97*px);
IkReal x5965=(gconst96*py);
IkReal x5966=((6.66666666666667)*sj3);
IkReal x5967=((1.0)*x5965);
IkReal x5968=((1.0)*x5964);
IkReal x5969=(x5968+x5967);
dummyeval[0]=((((-1.0)*x5969))+(((-1.0)*x5964*x5966))+((cj3*x5964))+((cj3*x5965))+(((-1.0)*x5965*x5966)));
dummyeval[1]=((-1.0)*x5969);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x5970=x5959;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x5970;
evalcond[3]=x5970;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst97*px))+((gconst96*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x5971=(gconst96*py);
IkReal x5972=(gconst97*px);
dummyeval[0]=(x5972+x5971);
dummyeval[1]=((x5972*x5972)+(x5971*x5971)+(((2.0)*x5971*x5972)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x5973=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x5973)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x5973)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5974=(gconst96*py);
IkReal x5975=(gconst97*px);
IkReal x5976=((20.0)*x5975);
CheckValue<IkReal> x5977=IKPowWithIntegerCheck(((((20.0)*x5974))+x5976),-1);
if(!x5977.valid){
continue;
}
CheckValue<IkReal> x5978=IKPowWithIntegerCheck(((((1.8)*(x5974*x5974)))+(((3.6)*x5974*x5975))+(((1.8)*(x5975*x5975)))),-1);
if(!x5978.valid){
continue;
}
if( IKabs(((17.0)*(x5977.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5978.value)*((((pp*x5976))+(((-14.45)*x5975))+(((-14.45)*x5974))+(((20.0)*pp*x5974)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x5977.value)))+IKsqr(((x5978.value)*((((pp*x5976))+(((-14.45)*x5975))+(((-14.45)*x5974))+(((20.0)*pp*x5974))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x5977.value)), ((x5978.value)*((((pp*x5976))+(((-14.45)*x5975))+(((-14.45)*x5974))+(((20.0)*pp*x5974))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5979=IKsin(j1);
IkReal x5980=IKcos(j1);
IkReal x5981=(gconst96*py);
IkReal x5982=(gconst97*px);
IkReal x5983=((1.0)*x5980);
IkReal x5984=((0.09)*x5980);
IkReal x5985=((1.1)*x5979);
evalcond[0]=((-0.85)*x5980);
evalcond[1]=((-0.85)+((x5979*x5981))+((x5979*x5982)));
evalcond[2]=((((0.85)*x5979))+(((-1.0)*x5982))+(((-1.0)*x5981)));
evalcond[3]=((((-1.0)*x5981*x5983))+(((-1.0)*x5982*x5983)));
evalcond[4]=((-0.2125)+((x5982*x5984))+((x5982*x5985))+(((-1.0)*pp))+((x5981*x5985))+((x5981*x5984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5986=(gconst97*px);
IkReal x5987=(gconst96*py);
CheckValue<IkReal> x5988=IKPowWithIntegerCheck(((((1.53)*x5986))+(((1.53)*x5987))),-1);
if(!x5988.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x5987))+(((1.17647058823529)*x5986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5988.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x5987*x5987)))+(((-22.0)*(x5986*x5986)))+(((-44.0)*x5986*x5987)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x5987))+(((1.17647058823529)*x5986))))+IKsqr(((x5988.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x5987*x5987)))+(((-22.0)*(x5986*x5986)))+(((-44.0)*x5986*x5987))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x5987))+(((1.17647058823529)*x5986))), ((x5988.value)*(((3.6125)+(((17.0)*pp))+(((-22.0)*(x5987*x5987)))+(((-22.0)*(x5986*x5986)))+(((-44.0)*x5986*x5987))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x5989=IKsin(j1);
IkReal x5990=IKcos(j1);
IkReal x5991=(gconst96*py);
IkReal x5992=(gconst97*px);
IkReal x5993=((1.0)*x5990);
IkReal x5994=((0.09)*x5990);
IkReal x5995=((1.1)*x5989);
evalcond[0]=((-0.85)*x5990);
evalcond[1]=((-0.85)+((x5989*x5991))+((x5989*x5992)));
evalcond[2]=((((-1.0)*x5992))+(((-1.0)*x5991))+(((0.85)*x5989)));
evalcond[3]=((((-1.0)*x5992*x5993))+(((-1.0)*x5991*x5993)));
evalcond[4]=((-0.2125)+((x5992*x5994))+((x5992*x5995))+(((-1.0)*pp))+((x5991*x5995))+((x5991*x5994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5996=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((0.32595)*cj3))+(((-1.0)*x5996)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x5996)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x5998 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x5998.valid){
continue;
}
IkReal x5997=x5998.value;
j1array[0]=((-1.0)*x5997);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x5997)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x5999=IKsin(j1);
IkReal x6000=IKcos(j1);
IkReal x6001=((0.045)*x6000);
evalcond[0]=((((0.3)*sj3*x6000))+x6001+(((0.3)*cj3*x5999))+(((-1.0)*cj3*x6001))+(((0.55)*x5999))+(((0.045)*sj3*x5999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6002=((-1.0)*gconst97*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6002;
evalcond[3]=x6002;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst96;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst96;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6003=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x6003)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6003)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6007=IKPowWithIntegerCheck(gconst96,-1);
if(!x6007.valid){
continue;
}
IkReal x6004=x6007.value;
CheckValue<IkReal> x6008=IKPowWithIntegerCheck(py,-1);
if(!x6008.valid){
continue;
}
IkReal x6005=x6008.value;
IkReal x6006=(x6004*x6005);
if( IKabs(((0.85)*x6006)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6006*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6006))+IKsqr(((0.0555555555555556)*x6006*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6006), ((0.0555555555555556)*x6006*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6009=IKcos(j1);
IkReal x6010=IKsin(j1);
IkReal x6011=(gconst96*py);
evalcond[0]=((-0.85)*x6009);
evalcond[1]=((-1.0)*x6009*x6011);
evalcond[2]=((-0.85)+((x6010*x6011)));
evalcond[3]=((((-1.0)*x6011))+(((0.85)*x6010)));
evalcond[4]=((-0.2125)+(((0.09)*x6009*x6011))+(((-1.0)*pp))+(((1.1)*x6010*x6011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6012=IKPowWithIntegerCheck(gconst96,-1);
if(!x6012.valid){
continue;
}
CheckValue<IkReal> x6013=IKPowWithIntegerCheck(py,-1);
if(!x6013.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst96*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6012.value)*(x6013.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst96*gconst96)*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst96*py))+IKsqr(((0.0065359477124183)*(x6012.value)*(x6013.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst96*gconst96)*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst96*py), ((0.0065359477124183)*(x6012.value)*(x6013.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst96*gconst96)*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6014=IKcos(j1);
IkReal x6015=IKsin(j1);
IkReal x6016=(gconst96*py);
evalcond[0]=((-0.85)*x6014);
evalcond[1]=((-1.0)*x6014*x6016);
evalcond[2]=((-0.85)+((x6015*x6016)));
evalcond[3]=((((-1.0)*x6016))+(((0.85)*x6015)));
evalcond[4]=((-0.2125)+(((0.09)*x6014*x6016))+(((-1.0)*pp))+(((1.1)*x6015*x6016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6017=(gconst96*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6017;
evalcond[3]=x6017;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst97;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst97;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6018=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x6018)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6018)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6022=IKPowWithIntegerCheck(gconst97,-1);
if(!x6022.valid){
continue;
}
IkReal x6019=x6022.value;
CheckValue<IkReal> x6023=IKPowWithIntegerCheck(px,-1);
if(!x6023.valid){
continue;
}
IkReal x6020=x6023.value;
IkReal x6021=(x6019*x6020);
if( IKabs(((0.85)*x6021)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6021*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6021))+IKsqr(((0.0555555555555556)*x6021*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6021), ((0.0555555555555556)*x6021*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6024=IKcos(j1);
IkReal x6025=IKsin(j1);
IkReal x6026=(gconst97*px);
evalcond[0]=((-0.85)*x6024);
evalcond[1]=((-1.0)*x6024*x6026);
evalcond[2]=((-0.85)+((x6025*x6026)));
evalcond[3]=((((0.85)*x6025))+(((-1.0)*x6026)));
evalcond[4]=((-0.2125)+(((1.1)*x6025*x6026))+(((0.09)*x6024*x6026))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6027=IKPowWithIntegerCheck(gconst97,-1);
if(!x6027.valid){
continue;
}
CheckValue<IkReal> x6028=IKPowWithIntegerCheck(px,-1);
if(!x6028.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst97*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6027.value)*(x6028.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst97*gconst97)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst97*px))+IKsqr(((0.0065359477124183)*(x6027.value)*(x6028.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst97*gconst97)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst97*px), ((0.0065359477124183)*(x6027.value)*(x6028.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst97*gconst97)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6029=IKcos(j1);
IkReal x6030=IKsin(j1);
IkReal x6031=(gconst97*px);
evalcond[0]=((-0.85)*x6029);
evalcond[1]=((-1.0)*x6029*x6031);
evalcond[2]=((-0.85)+((x6030*x6031)));
evalcond[3]=((((0.85)*x6030))+(((-1.0)*x6031)));
evalcond[4]=((-0.2125)+(((1.1)*x6030*x6031))+(((-1.0)*pp))+(((0.09)*x6029*x6031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6032=((0.3)*sj3);
IkReal x6033=(gconst97*px);
IkReal x6034=((0.045)*cj3);
IkReal x6035=(gconst96*py);
CheckValue<IkReal> x6036=IKPowWithIntegerCheck(((((-1.0)*x6032*x6035))+(((-1.0)*x6032*x6033))+(((-0.045)*x6035))+(((-0.045)*x6033))+((x6033*x6034))+((x6034*x6035))),-1);
if(!x6036.valid){
continue;
}
CheckValue<IkReal> x6037=IKPowWithIntegerCheck(((((-1.0)*x6035))+(((-1.0)*x6033))),-1);
if(!x6037.valid){
continue;
}
if( IKabs(((x6036.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6037.value)*(((-0.045)+(((-1.0)*x6032))+x6034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6036.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x6037.value)*(((-0.045)+(((-1.0)*x6032))+x6034))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6036.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x6037.value)*(((-0.045)+(((-1.0)*x6032))+x6034))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6038=IKsin(j1);
IkReal x6039=IKcos(j1);
IkReal x6040=(gconst96*py);
IkReal x6041=((0.3)*cj3);
IkReal x6042=((0.045)*cj3);
IkReal x6043=(gconst97*px);
IkReal x6044=((0.045)*sj3);
IkReal x6045=((0.3)*sj3);
IkReal x6046=((0.045)*x6038);
IkReal x6047=((0.09)*x6039);
IkReal x6048=((1.1)*x6038);
IkReal x6049=((1.0)*x6039);
evalcond[0]=((-0.55)+(((-1.0)*x6041))+(((-1.0)*x6044))+((x6038*x6040))+((x6038*x6043)));
evalcond[1]=((0.045)+x6045+(((-1.0)*x6042))+(((-1.0)*x6043*x6049))+(((-1.0)*x6040*x6049)));
evalcond[2]=((-0.2125)+((x6040*x6047))+((x6040*x6048))+((x6043*x6048))+((x6043*x6047))+(((-1.0)*pp)));
evalcond[3]=(x6046+((x6038*x6045))+(((-0.55)*x6039))+(((-1.0)*x6039*x6044))+(((-1.0)*x6039*x6041))+(((-1.0)*x6038*x6042)));
evalcond[4]=((((0.55)*x6038))+(((-1.0)*x6040))+(((-1.0)*x6043))+((x6038*x6041))+((x6038*x6044))+(((-1.0)*x6039*x6042))+(((0.045)*x6039))+((x6039*x6045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6050=(gconst97*px);
IkReal x6051=((0.3)*cj3);
IkReal x6052=((0.045)*sj3);
IkReal x6053=(gconst96*py);
CheckValue<IkReal> x6054=IKPowWithIntegerCheck((x6050+x6053),-1);
if(!x6054.valid){
continue;
}
CheckValue<IkReal> x6055=IKPowWithIntegerCheck(((((-1.0)*x6052*x6053))+(((-1.0)*x6051*x6053))+(((-1.0)*x6050*x6052))+(((-1.0)*x6050*x6051))+(((-0.55)*x6050))+(((-0.55)*x6053))),-1);
if(!x6055.valid){
continue;
}
if( IKabs(((x6054.value)*(((0.55)+x6051+x6052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6055.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6054.value)*(((0.55)+x6051+x6052))))+IKsqr(((x6055.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6054.value)*(((0.55)+x6051+x6052))), ((x6055.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6056=IKsin(j1);
IkReal x6057=IKcos(j1);
IkReal x6058=(gconst96*py);
IkReal x6059=((0.3)*cj3);
IkReal x6060=((0.045)*cj3);
IkReal x6061=(gconst97*px);
IkReal x6062=((0.045)*sj3);
IkReal x6063=((0.3)*sj3);
IkReal x6064=((0.045)*x6056);
IkReal x6065=((0.09)*x6057);
IkReal x6066=((1.1)*x6056);
IkReal x6067=((1.0)*x6057);
evalcond[0]=((-0.55)+((x6056*x6061))+(((-1.0)*x6059))+((x6056*x6058))+(((-1.0)*x6062)));
evalcond[1]=((0.045)+x6063+(((-1.0)*x6061*x6067))+(((-1.0)*x6060))+(((-1.0)*x6058*x6067)));
evalcond[2]=((-0.2125)+((x6061*x6066))+((x6061*x6065))+(((-1.0)*pp))+((x6058*x6066))+((x6058*x6065)));
evalcond[3]=((((-1.0)*x6057*x6062))+((x6056*x6063))+x6064+(((-1.0)*x6057*x6059))+(((-0.55)*x6057))+(((-1.0)*x6056*x6060)));
evalcond[4]=((((-1.0)*x6057*x6060))+((x6056*x6062))+((x6057*x6063))+((x6056*x6059))+(((-1.0)*x6058))+(((0.55)*x6056))+(((-1.0)*x6061))+(((0.045)*x6057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6068 = IKatan2WithCheck((gconst109*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst109*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x6068.valid){
continue;
}
j1array[0]=x6068.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6069=IKsin(j1);
IkReal x6070=IKcos(j1);
IkReal x6071=(gconst96*py);
IkReal x6072=((0.3)*cj3);
IkReal x6073=((0.045)*cj3);
IkReal x6074=(gconst97*px);
IkReal x6075=((0.045)*sj3);
IkReal x6076=((0.3)*sj3);
IkReal x6077=((0.045)*x6069);
IkReal x6078=((0.09)*x6070);
IkReal x6079=((1.1)*x6069);
IkReal x6080=((1.0)*x6070);
evalcond[0]=((-0.55)+(((-1.0)*x6072))+(((-1.0)*x6075))+((x6069*x6074))+((x6069*x6071)));
evalcond[1]=((0.045)+(((-1.0)*x6071*x6080))+x6076+(((-1.0)*x6073))+(((-1.0)*x6074*x6080)));
evalcond[2]=((-0.2125)+((x6071*x6078))+((x6071*x6079))+(((-1.0)*pp))+((x6074*x6079))+((x6074*x6078)));
evalcond[3]=(x6077+(((-0.55)*x6070))+((x6069*x6076))+(((-1.0)*x6070*x6072))+(((-1.0)*x6070*x6075))+(((-1.0)*x6069*x6073)));
evalcond[4]=((((-1.0)*x6074))+(((-1.0)*x6071))+((x6070*x6076))+(((0.045)*x6070))+((x6069*x6072))+((x6069*x6075))+(((0.55)*x6069))+(((-1.0)*x6070*x6073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst98;
CheckValue<IkReal> x6081 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x6081.valid){
continue;
}
gconst98=((3.14159265358979)+(((-1.0)*(x6081.value))));
IkReal gconst99;
gconst99=IKsin(gconst98);
IkReal gconst100;
gconst100=IKcos(gconst98);
IkReal x6082=((((-1.0)*gconst100*py))+((gconst99*px)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst98))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x6082;
evalcond[3]=x6082;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst110;
gconst110=IKsign((((gconst100*px))+((gconst99*py))));
dummyeval[0]=(((gconst100*px))+((gconst99*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6083=(gconst99*py);
IkReal x6084=((6.66666666666667)*cj3);
IkReal x6085=(gconst100*px);
IkReal x6086=((1.0)*sj3);
dummyeval[0]=(x6085+x6083);
dummyeval[1]=((((-1.0)*x6085*x6086))+(((-1.0)*x6083*x6086))+(((-1.0)*x6083*x6084))+(((-12.2222222222222)*x6083))+(((-12.2222222222222)*x6085))+(((-1.0)*x6084*x6085)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6087=(gconst99*py);
IkReal x6088=((6.66666666666667)*sj3);
IkReal x6089=(gconst100*px);
IkReal x6090=((1.0)*x6087);
IkReal x6091=((1.0)*x6089);
IkReal x6092=(x6091+x6090);
dummyeval[0]=((((-1.0)*x6088*x6089))+(((-1.0)*x6092))+((cj3*x6089))+((cj3*x6087))+(((-1.0)*x6087*x6088)));
dummyeval[1]=((-1.0)*x6092);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x6093=x6082;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6093;
evalcond[3]=x6093;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst100*px))+((gconst99*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6094=(gconst99*py);
IkReal x6095=(gconst100*px);
dummyeval[0]=(x6095+x6094);
dummyeval[1]=((((2.0)*x6094*x6095))+(x6095*x6095)+(x6094*x6094));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6096=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x6096)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6096)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6097=(gconst100*px);
IkReal x6098=(gconst99*py);
IkReal x6099=((20.0)*x6097);
IkReal x6100=((20.0)*x6098);
CheckValue<IkReal> x6101=IKPowWithIntegerCheck((x6099+x6100),-1);
if(!x6101.valid){
continue;
}
CheckValue<IkReal> x6102=IKPowWithIntegerCheck(((((3.6)*x6097*x6098))+(((1.8)*(x6098*x6098)))+(((1.8)*(x6097*x6097)))),-1);
if(!x6102.valid){
continue;
}
if( IKabs(((17.0)*(x6101.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6102.value)*((((pp*x6100))+(((-14.45)*x6098))+(((-14.45)*x6097))+((pp*x6099)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x6101.value)))+IKsqr(((x6102.value)*((((pp*x6100))+(((-14.45)*x6098))+(((-14.45)*x6097))+((pp*x6099))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x6101.value)), ((x6102.value)*((((pp*x6100))+(((-14.45)*x6098))+(((-14.45)*x6097))+((pp*x6099))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6103=IKsin(j1);
IkReal x6104=IKcos(j1);
IkReal x6105=(gconst100*px);
IkReal x6106=(gconst99*py);
IkReal x6107=((1.0)*x6104);
IkReal x6108=((0.09)*x6104);
IkReal x6109=((1.1)*x6103);
evalcond[0]=((-0.85)*x6104);
evalcond[1]=((-0.85)+((x6103*x6105))+((x6103*x6106)));
evalcond[2]=((((-1.0)*x6105))+(((-1.0)*x6106))+(((0.85)*x6103)));
evalcond[3]=((((-1.0)*x6105*x6107))+(((-1.0)*x6106*x6107)));
evalcond[4]=((-0.2125)+((x6106*x6108))+((x6106*x6109))+(((-1.0)*pp))+((x6105*x6109))+((x6105*x6108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6110=(gconst100*px);
IkReal x6111=(gconst99*py);
CheckValue<IkReal> x6112=IKPowWithIntegerCheck(((((1.53)*x6111))+(((1.53)*x6110))),-1);
if(!x6112.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x6111))+(((1.17647058823529)*x6110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6112.value)*(((3.6125)+(((-22.0)*(x6110*x6110)))+(((-22.0)*(x6111*x6111)))+(((-44.0)*x6110*x6111))+(((17.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x6111))+(((1.17647058823529)*x6110))))+IKsqr(((x6112.value)*(((3.6125)+(((-22.0)*(x6110*x6110)))+(((-22.0)*(x6111*x6111)))+(((-44.0)*x6110*x6111))+(((17.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x6111))+(((1.17647058823529)*x6110))), ((x6112.value)*(((3.6125)+(((-22.0)*(x6110*x6110)))+(((-22.0)*(x6111*x6111)))+(((-44.0)*x6110*x6111))+(((17.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6113=IKsin(j1);
IkReal x6114=IKcos(j1);
IkReal x6115=(gconst100*px);
IkReal x6116=(gconst99*py);
IkReal x6117=((1.0)*x6114);
IkReal x6118=((0.09)*x6114);
IkReal x6119=((1.1)*x6113);
evalcond[0]=((-0.85)*x6114);
evalcond[1]=((-0.85)+((x6113*x6115))+((x6113*x6116)));
evalcond[2]=((((-1.0)*x6115))+(((-1.0)*x6116))+(((0.85)*x6113)));
evalcond[3]=((((-1.0)*x6115*x6117))+(((-1.0)*x6116*x6117)));
evalcond[4]=((-0.2125)+((x6115*x6119))+((x6115*x6118))+((x6116*x6119))+((x6116*x6118))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6120=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x6120))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x6120)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6122 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6122.valid){
continue;
}
IkReal x6121=x6122.value;
j1array[0]=((-1.0)*x6121);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6121)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6123=IKsin(j1);
IkReal x6124=IKcos(j1);
IkReal x6125=((0.045)*x6124);
evalcond[0]=((((-1.0)*cj3*x6125))+x6125+(((0.3)*sj3*x6124))+(((0.045)*sj3*x6123))+(((0.3)*cj3*x6123))+(((0.55)*x6123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6126=((-1.0)*gconst100*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6126;
evalcond[3]=x6126;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst99;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst99;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6127=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x6127)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6127)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6131=IKPowWithIntegerCheck(gconst99,-1);
if(!x6131.valid){
continue;
}
IkReal x6128=x6131.value;
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(py,-1);
if(!x6132.valid){
continue;
}
IkReal x6129=x6132.value;
IkReal x6130=(x6128*x6129);
if( IKabs(((0.85)*x6130)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6130*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6130))+IKsqr(((0.0555555555555556)*x6130*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6130), ((0.0555555555555556)*x6130*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6133=IKcos(j1);
IkReal x6134=IKsin(j1);
IkReal x6135=(gconst99*py);
evalcond[0]=((-0.85)*x6133);
evalcond[1]=((-1.0)*x6133*x6135);
evalcond[2]=((-0.85)+((x6134*x6135)));
evalcond[3]=((((0.85)*x6134))+(((-1.0)*x6135)));
evalcond[4]=((-0.2125)+(((1.1)*x6134*x6135))+(((-1.0)*pp))+(((0.09)*x6133*x6135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6136=IKPowWithIntegerCheck(gconst99,-1);
if(!x6136.valid){
continue;
}
CheckValue<IkReal> x6137=IKPowWithIntegerCheck(py,-1);
if(!x6137.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst99*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6136.value)*(x6137.value)*(((361.25)+(((-2200.0)*(gconst99*gconst99)*(py*py)))+(((1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst99*py))+IKsqr(((0.0065359477124183)*(x6136.value)*(x6137.value)*(((361.25)+(((-2200.0)*(gconst99*gconst99)*(py*py)))+(((1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst99*py), ((0.0065359477124183)*(x6136.value)*(x6137.value)*(((361.25)+(((-2200.0)*(gconst99*gconst99)*(py*py)))+(((1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6138=IKcos(j1);
IkReal x6139=IKsin(j1);
IkReal x6140=(gconst99*py);
evalcond[0]=((-0.85)*x6138);
evalcond[1]=((-1.0)*x6138*x6140);
evalcond[2]=((-0.85)+((x6139*x6140)));
evalcond[3]=((((0.85)*x6139))+(((-1.0)*x6140)));
evalcond[4]=((-0.2125)+(((1.1)*x6139*x6140))+(((-1.0)*pp))+(((0.09)*x6138*x6140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6141=(gconst99*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6141;
evalcond[3]=x6141;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst100;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst100;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6142=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x6142)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6142)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6146=IKPowWithIntegerCheck(gconst100,-1);
if(!x6146.valid){
continue;
}
IkReal x6143=x6146.value;
CheckValue<IkReal> x6147=IKPowWithIntegerCheck(px,-1);
if(!x6147.valid){
continue;
}
IkReal x6144=x6147.value;
IkReal x6145=(x6143*x6144);
if( IKabs(((0.85)*x6145)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6145*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6145))+IKsqr(((0.0555555555555556)*x6145*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6145), ((0.0555555555555556)*x6145*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6148=IKcos(j1);
IkReal x6149=IKsin(j1);
IkReal x6150=(gconst100*px);
evalcond[0]=((-0.85)*x6148);
evalcond[1]=((-1.0)*x6148*x6150);
evalcond[2]=((-0.85)+((x6149*x6150)));
evalcond[3]=((((0.85)*x6149))+(((-1.0)*x6150)));
evalcond[4]=((-0.2125)+(((1.1)*x6149*x6150))+(((0.09)*x6148*x6150))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6151=IKPowWithIntegerCheck(gconst100,-1);
if(!x6151.valid){
continue;
}
CheckValue<IkReal> x6152=IKPowWithIntegerCheck(px,-1);
if(!x6152.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst100*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6151.value)*(x6152.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst100*gconst100)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst100*px))+IKsqr(((0.0065359477124183)*(x6151.value)*(x6152.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst100*gconst100)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst100*px), ((0.0065359477124183)*(x6151.value)*(x6152.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst100*gconst100)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6153=IKcos(j1);
IkReal x6154=IKsin(j1);
IkReal x6155=(gconst100*px);
evalcond[0]=((-0.85)*x6153);
evalcond[1]=((-1.0)*x6153*x6155);
evalcond[2]=((-0.85)+((x6154*x6155)));
evalcond[3]=((((0.85)*x6154))+(((-1.0)*x6155)));
evalcond[4]=((-0.2125)+(((0.09)*x6153*x6155))+(((-1.0)*pp))+(((1.1)*x6154*x6155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6156=(gconst99*py);
IkReal x6157=((0.045)*cj3);
IkReal x6158=(gconst100*px);
IkReal x6159=((0.3)*sj3);
CheckValue<IkReal> x6160=IKPowWithIntegerCheck((((x6156*x6157))+((x6157*x6158))+(((-1.0)*x6158*x6159))+(((-0.045)*x6158))+(((-0.045)*x6156))+(((-1.0)*x6156*x6159))),-1);
if(!x6160.valid){
continue;
}
CheckValue<IkReal> x6161=IKPowWithIntegerCheck(((((-1.0)*x6156))+(((-1.0)*x6158))),-1);
if(!x6161.valid){
continue;
}
if( IKabs(((x6160.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6161.value)*(((-0.045)+x6157+(((-1.0)*x6159)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6160.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x6161.value)*(((-0.045)+x6157+(((-1.0)*x6159))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6160.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x6161.value)*(((-0.045)+x6157+(((-1.0)*x6159))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6162=IKsin(j1);
IkReal x6163=IKcos(j1);
IkReal x6164=(gconst100*px);
IkReal x6165=((0.3)*cj3);
IkReal x6166=(gconst99*py);
IkReal x6167=((0.045)*cj3);
IkReal x6168=((0.3)*sj3);
IkReal x6169=((1.0)*x6163);
IkReal x6170=((0.045)*x6162);
IkReal x6171=((0.09)*x6163);
IkReal x6172=((0.045)*x6163);
IkReal x6173=((1.1)*x6162);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x6165))+((x6162*x6166))+((x6162*x6164)));
evalcond[1]=((0.045)+(((-1.0)*x6166*x6169))+x6168+(((-1.0)*x6167))+(((-1.0)*x6164*x6169)));
evalcond[2]=((-0.2125)+((x6166*x6173))+((x6166*x6171))+((x6164*x6173))+((x6164*x6171))+(((-1.0)*pp)));
evalcond[3]=(x6170+((x6162*x6168))+(((-0.55)*x6163))+(((-1.0)*x6163*x6165))+(((-1.0)*x6162*x6167))+(((-1.0)*sj3*x6172)));
evalcond[4]=(((sj3*x6170))+x6172+((x6162*x6165))+(((-1.0)*x6166))+(((-1.0)*x6164))+(((0.55)*x6162))+((x6163*x6168))+(((-1.0)*x6163*x6167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6174=(gconst99*py);
IkReal x6175=((0.3)*cj3);
IkReal x6176=(gconst100*px);
IkReal x6177=((0.045)*sj3);
CheckValue<IkReal> x6178=IKPowWithIntegerCheck((x6176+x6174),-1);
if(!x6178.valid){
continue;
}
CheckValue<IkReal> x6179=IKPowWithIntegerCheck(((((-1.0)*x6176*x6177))+(((-1.0)*x6174*x6177))+(((-1.0)*x6174*x6175))+(((-1.0)*x6175*x6176))+(((-0.55)*x6176))+(((-0.55)*x6174))),-1);
if(!x6179.valid){
continue;
}
if( IKabs(((x6178.value)*(((0.55)+x6177+x6175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6179.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6178.value)*(((0.55)+x6177+x6175))))+IKsqr(((x6179.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6178.value)*(((0.55)+x6177+x6175))), ((x6179.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6180=IKsin(j1);
IkReal x6181=IKcos(j1);
IkReal x6182=(gconst100*px);
IkReal x6183=((0.3)*cj3);
IkReal x6184=(gconst99*py);
IkReal x6185=((0.045)*cj3);
IkReal x6186=((0.3)*sj3);
IkReal x6187=((1.0)*x6181);
IkReal x6188=((0.045)*x6180);
IkReal x6189=((0.09)*x6181);
IkReal x6190=((0.045)*x6181);
IkReal x6191=((1.1)*x6180);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x6180*x6184))+((x6180*x6182))+(((-1.0)*x6183)));
evalcond[1]=((0.045)+(((-1.0)*x6182*x6187))+(((-1.0)*x6184*x6187))+x6186+(((-1.0)*x6185)));
evalcond[2]=((-0.2125)+((x6184*x6189))+((x6182*x6191))+(((-1.0)*pp))+((x6184*x6191))+((x6182*x6189)));
evalcond[3]=((((-0.55)*x6181))+x6188+((x6180*x6186))+(((-1.0)*sj3*x6190))+(((-1.0)*x6181*x6183))+(((-1.0)*x6180*x6185)));
evalcond[4]=((((-1.0)*x6182))+(((-1.0)*x6184))+(((0.55)*x6180))+x6190+((sj3*x6188))+((x6180*x6183))+((x6181*x6186))+(((-1.0)*x6181*x6185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6192 = IKatan2WithCheck((gconst110*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst110*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
j1array[0]=x6192.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6193=IKsin(j1);
IkReal x6194=IKcos(j1);
IkReal x6195=(gconst100*px);
IkReal x6196=((0.3)*cj3);
IkReal x6197=(gconst99*py);
IkReal x6198=((0.045)*cj3);
IkReal x6199=((0.3)*sj3);
IkReal x6200=((1.0)*x6194);
IkReal x6201=((0.045)*x6193);
IkReal x6202=((0.09)*x6194);
IkReal x6203=((0.045)*x6194);
IkReal x6204=((1.1)*x6193);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x6196))+((x6193*x6197))+((x6193*x6195)));
evalcond[1]=((0.045)+(((-1.0)*x6197*x6200))+(((-1.0)*x6198))+x6199+(((-1.0)*x6195*x6200)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x6197*x6204))+((x6197*x6202))+((x6195*x6204))+((x6195*x6202)));
evalcond[3]=(x6201+(((-1.0)*sj3*x6203))+(((-1.0)*x6193*x6198))+(((-1.0)*x6194*x6196))+(((-0.55)*x6194))+((x6193*x6199)));
evalcond[4]=(x6203+((x6194*x6199))+((sj3*x6201))+(((-1.0)*x6194*x6198))+(((0.55)*x6193))+(((-1.0)*x6195))+(((-1.0)*x6197))+((x6193*x6196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst101;
CheckValue<IkReal> x6205 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x6205.valid){
continue;
}
gconst101=((-1.0)*(x6205.value));
IkReal gconst102;
gconst102=IKsin(gconst101);
IkReal gconst103;
gconst103=IKcos(gconst101);
IkReal x6206=(((gconst102*px))+(((-1.0)*gconst103*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst101))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x6206;
evalcond[3]=x6206;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst111;
gconst111=IKsign((((gconst102*py))+((gconst103*px))));
dummyeval[0]=(((gconst102*py))+((gconst103*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6207=(gconst102*py);
IkReal x6208=(gconst103*px);
IkReal x6209=((1.0)*sj3);
IkReal x6210=((6.66666666666667)*cj3);
dummyeval[0]=(x6207+x6208);
dummyeval[1]=((((-1.0)*x6207*x6209))+(((-1.0)*x6208*x6209))+(((-12.2222222222222)*x6208))+(((-12.2222222222222)*x6207))+(((-1.0)*x6208*x6210))+(((-1.0)*x6207*x6210)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6211=(gconst103*px);
IkReal x6212=((6.66666666666667)*sj3);
IkReal x6213=(gconst102*py);
IkReal x6214=((1.0)*x6211);
IkReal x6215=((1.0)*x6213);
IkReal x6216=(x6215+x6214);
dummyeval[0]=(((cj3*x6213))+((cj3*x6211))+(((-1.0)*x6216))+(((-1.0)*x6212*x6213))+(((-1.0)*x6211*x6212)));
dummyeval[1]=((-1.0)*x6216);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x6217=x6206;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6217;
evalcond[3]=x6217;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst102*py))+((gconst103*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6218=(gconst103*px);
IkReal x6219=(gconst102*py);
dummyeval[0]=(x6219+x6218);
dummyeval[1]=((((2.0)*x6218*x6219))+(x6218*x6218)+(x6219*x6219));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6220=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x6220)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6220)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6221=(gconst103*px);
IkReal x6222=(gconst102*py);
IkReal x6223=((20.0)*pp);
CheckValue<IkReal> x6224=IKPowWithIntegerCheck(((((20.0)*x6221))+(((20.0)*x6222))),-1);
if(!x6224.valid){
continue;
}
CheckValue<IkReal> x6225=IKPowWithIntegerCheck(((((3.6)*x6221*x6222))+(((1.8)*(x6221*x6221)))+(((1.8)*(x6222*x6222)))),-1);
if(!x6225.valid){
continue;
}
if( IKabs(((17.0)*(x6224.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6225.value)*((((x6222*x6223))+(((-14.45)*x6222))+(((-14.45)*x6221))+((x6221*x6223)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x6224.value)))+IKsqr(((x6225.value)*((((x6222*x6223))+(((-14.45)*x6222))+(((-14.45)*x6221))+((x6221*x6223))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x6224.value)), ((x6225.value)*((((x6222*x6223))+(((-14.45)*x6222))+(((-14.45)*x6221))+((x6221*x6223))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6226=IKsin(j1);
IkReal x6227=IKcos(j1);
IkReal x6228=(gconst103*px);
IkReal x6229=(gconst102*py);
IkReal x6230=((0.09)*x6227);
IkReal x6231=((1.0)*x6227);
IkReal x6232=((1.1)*x6226);
evalcond[0]=((-0.85)*x6227);
evalcond[1]=((-0.85)+((x6226*x6229))+((x6226*x6228)));
evalcond[2]=((((0.85)*x6226))+(((-1.0)*x6228))+(((-1.0)*x6229)));
evalcond[3]=((((-1.0)*x6228*x6231))+(((-1.0)*x6229*x6231)));
evalcond[4]=((-0.2125)+((x6228*x6230))+((x6228*x6232))+((x6229*x6232))+((x6229*x6230))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6233=(gconst103*px);
IkReal x6234=(gconst102*py);
CheckValue<IkReal> x6235=IKPowWithIntegerCheck(((((1.53)*x6234))+(((1.53)*x6233))),-1);
if(!x6235.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x6234))+(((1.17647058823529)*x6233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6235.value)*(((3.6125)+(((-22.0)*(x6233*x6233)))+(((-44.0)*x6233*x6234))+(((17.0)*pp))+(((-22.0)*(x6234*x6234))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x6234))+(((1.17647058823529)*x6233))))+IKsqr(((x6235.value)*(((3.6125)+(((-22.0)*(x6233*x6233)))+(((-44.0)*x6233*x6234))+(((17.0)*pp))+(((-22.0)*(x6234*x6234)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x6234))+(((1.17647058823529)*x6233))), ((x6235.value)*(((3.6125)+(((-22.0)*(x6233*x6233)))+(((-44.0)*x6233*x6234))+(((17.0)*pp))+(((-22.0)*(x6234*x6234)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6236=IKsin(j1);
IkReal x6237=IKcos(j1);
IkReal x6238=(gconst103*px);
IkReal x6239=(gconst102*py);
IkReal x6240=((0.09)*x6237);
IkReal x6241=((1.0)*x6237);
IkReal x6242=((1.1)*x6236);
evalcond[0]=((-0.85)*x6237);
evalcond[1]=((-0.85)+((x6236*x6239))+((x6236*x6238)));
evalcond[2]=((((-1.0)*x6239))+(((-1.0)*x6238))+(((0.85)*x6236)));
evalcond[3]=((((-1.0)*x6238*x6241))+(((-1.0)*x6239*x6241)));
evalcond[4]=((-0.2125)+((x6238*x6240))+((x6238*x6242))+(((-1.0)*pp))+((x6239*x6240))+((x6239*x6242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6243=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x6243))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x6243)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6245 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6245.valid){
continue;
}
IkReal x6244=x6245.value;
j1array[0]=((-1.0)*x6244);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6244)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6246=IKsin(j1);
IkReal x6247=IKcos(j1);
IkReal x6248=((0.045)*x6247);
evalcond[0]=(x6248+(((-1.0)*cj3*x6248))+(((0.3)*sj3*x6247))+(((0.55)*x6246))+(((0.3)*cj3*x6246))+(((0.045)*sj3*x6246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6249=((-1.0)*gconst103*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6249;
evalcond[3]=x6249;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst102;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst102;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6250=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x6250)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6250)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6254=IKPowWithIntegerCheck(gconst102,-1);
if(!x6254.valid){
continue;
}
IkReal x6251=x6254.value;
CheckValue<IkReal> x6255=IKPowWithIntegerCheck(py,-1);
if(!x6255.valid){
continue;
}
IkReal x6252=x6255.value;
IkReal x6253=(x6251*x6252);
if( IKabs(((0.85)*x6253)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6253*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6253))+IKsqr(((0.0555555555555556)*x6253*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6253), ((0.0555555555555556)*x6253*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6256=IKcos(j1);
IkReal x6257=IKsin(j1);
IkReal x6258=(gconst102*py);
evalcond[0]=((-0.85)*x6256);
evalcond[1]=((-1.0)*x6256*x6258);
evalcond[2]=((-0.85)+((x6257*x6258)));
evalcond[3]=((((-1.0)*x6258))+(((0.85)*x6257)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x6256*x6258))+(((1.1)*x6257*x6258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6259=IKPowWithIntegerCheck(gconst102,-1);
if(!x6259.valid){
continue;
}
CheckValue<IkReal> x6260=IKPowWithIntegerCheck(py,-1);
if(!x6260.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst102*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6259.value)*(x6260.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst102*gconst102)*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst102*py))+IKsqr(((0.0065359477124183)*(x6259.value)*(x6260.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst102*gconst102)*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst102*py), ((0.0065359477124183)*(x6259.value)*(x6260.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst102*gconst102)*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6261=IKcos(j1);
IkReal x6262=IKsin(j1);
IkReal x6263=(gconst102*py);
evalcond[0]=((-0.85)*x6261);
evalcond[1]=((-1.0)*x6261*x6263);
evalcond[2]=((-0.85)+((x6262*x6263)));
evalcond[3]=((((-1.0)*x6263))+(((0.85)*x6262)));
evalcond[4]=((-0.2125)+(((0.09)*x6261*x6263))+(((-1.0)*pp))+(((1.1)*x6262*x6263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6264=(gconst102*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6264;
evalcond[3]=x6264;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst103;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst103;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6265=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x6265)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6265)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6269=IKPowWithIntegerCheck(gconst103,-1);
if(!x6269.valid){
continue;
}
IkReal x6266=x6269.value;
CheckValue<IkReal> x6270=IKPowWithIntegerCheck(px,-1);
if(!x6270.valid){
continue;
}
IkReal x6267=x6270.value;
IkReal x6268=(x6266*x6267);
if( IKabs(((0.85)*x6268)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6268*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6268))+IKsqr(((0.0555555555555556)*x6268*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6268), ((0.0555555555555556)*x6268*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6271=IKcos(j1);
IkReal x6272=IKsin(j1);
IkReal x6273=(gconst103*px);
evalcond[0]=((-0.85)*x6271);
evalcond[1]=((-1.0)*x6271*x6273);
evalcond[2]=((-0.85)+((x6272*x6273)));
evalcond[3]=((((0.85)*x6272))+(((-1.0)*x6273)));
evalcond[4]=((-0.2125)+(((1.1)*x6272*x6273))+(((0.09)*x6271*x6273))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6274=IKPowWithIntegerCheck(gconst103,-1);
if(!x6274.valid){
continue;
}
CheckValue<IkReal> x6275=IKPowWithIntegerCheck(px,-1);
if(!x6275.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst103*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6274.value)*(x6275.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst103*gconst103)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst103*px))+IKsqr(((0.0065359477124183)*(x6274.value)*(x6275.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst103*gconst103)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst103*px), ((0.0065359477124183)*(x6274.value)*(x6275.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst103*gconst103)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6276=IKcos(j1);
IkReal x6277=IKsin(j1);
IkReal x6278=(gconst103*px);
evalcond[0]=((-0.85)*x6276);
evalcond[1]=((-1.0)*x6276*x6278);
evalcond[2]=((-0.85)+((x6277*x6278)));
evalcond[3]=((((0.85)*x6277))+(((-1.0)*x6278)));
evalcond[4]=((-0.2125)+(((1.1)*x6277*x6278))+(((-1.0)*pp))+(((0.09)*x6276*x6278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6279=(gconst103*px);
IkReal x6280=(gconst102*py);
IkReal x6281=((0.045)*cj3);
IkReal x6282=((0.3)*sj3);
CheckValue<IkReal> x6283=IKPowWithIntegerCheck(((((-1.0)*x6279*x6282))+(((-0.045)*x6279))+((x6279*x6281))+(((-0.045)*x6280))+(((-1.0)*x6280*x6282))+((x6280*x6281))),-1);
if(!x6283.valid){
continue;
}
CheckValue<IkReal> x6284=IKPowWithIntegerCheck(((((-1.0)*x6279))+(((-1.0)*x6280))),-1);
if(!x6284.valid){
continue;
}
if( IKabs(((x6283.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6284.value)*(((-0.045)+x6281+(((-1.0)*x6282)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6283.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x6284.value)*(((-0.045)+x6281+(((-1.0)*x6282))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6283.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x6284.value)*(((-0.045)+x6281+(((-1.0)*x6282))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6285=IKsin(j1);
IkReal x6286=IKcos(j1);
IkReal x6287=(gconst103*px);
IkReal x6288=((0.3)*cj3);
IkReal x6289=((0.045)*cj3);
IkReal x6290=(gconst102*py);
IkReal x6291=((0.045)*sj3);
IkReal x6292=((0.3)*sj3);
IkReal x6293=((0.045)*x6285);
IkReal x6294=((0.09)*x6286);
IkReal x6295=((1.1)*x6285);
IkReal x6296=((1.0)*x6286);
evalcond[0]=((-0.55)+((x6285*x6287))+(((-1.0)*x6291))+(((-1.0)*x6288))+((x6285*x6290)));
evalcond[1]=((0.045)+x6292+(((-1.0)*x6289))+(((-1.0)*x6290*x6296))+(((-1.0)*x6287*x6296)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x6290*x6295))+((x6290*x6294))+((x6287*x6294))+((x6287*x6295)));
evalcond[3]=(x6293+(((-1.0)*x6285*x6289))+(((-0.55)*x6286))+(((-1.0)*x6286*x6291))+(((-1.0)*x6286*x6288))+((x6285*x6292)));
evalcond[4]=(((x6285*x6288))+(((-1.0)*x6290))+(((0.55)*x6285))+(((-1.0)*x6286*x6289))+((x6286*x6292))+(((0.045)*x6286))+((x6285*x6291))+(((-1.0)*x6287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6297=(gconst103*px);
IkReal x6298=((0.045)*sj3);
IkReal x6299=((0.3)*cj3);
IkReal x6300=(gconst102*py);
CheckValue<IkReal> x6301=IKPowWithIntegerCheck((x6297+x6300),-1);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(((((-0.55)*x6300))+(((-1.0)*x6298*x6300))+(((-0.55)*x6297))+(((-1.0)*x6299*x6300))+(((-1.0)*x6297*x6299))+(((-1.0)*x6297*x6298))),-1);
if(!x6302.valid){
continue;
}
if( IKabs(((x6301.value)*(((0.55)+x6299+x6298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6302.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6301.value)*(((0.55)+x6299+x6298))))+IKsqr(((x6302.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6301.value)*(((0.55)+x6299+x6298))), ((x6302.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6303=IKsin(j1);
IkReal x6304=IKcos(j1);
IkReal x6305=(gconst103*px);
IkReal x6306=((0.3)*cj3);
IkReal x6307=((0.045)*cj3);
IkReal x6308=(gconst102*py);
IkReal x6309=((0.045)*sj3);
IkReal x6310=((0.3)*sj3);
IkReal x6311=((0.045)*x6303);
IkReal x6312=((0.09)*x6304);
IkReal x6313=((1.1)*x6303);
IkReal x6314=((1.0)*x6304);
evalcond[0]=((-0.55)+((x6303*x6308))+((x6303*x6305))+(((-1.0)*x6309))+(((-1.0)*x6306)));
evalcond[1]=((0.045)+(((-1.0)*x6305*x6314))+x6310+(((-1.0)*x6307))+(((-1.0)*x6308*x6314)));
evalcond[2]=((-0.2125)+((x6308*x6313))+((x6308*x6312))+(((-1.0)*pp))+((x6305*x6312))+((x6305*x6313)));
evalcond[3]=(x6311+((x6303*x6310))+(((-0.55)*x6304))+(((-1.0)*x6304*x6306))+(((-1.0)*x6304*x6309))+(((-1.0)*x6303*x6307)));
evalcond[4]=(((x6303*x6309))+((x6303*x6306))+(((0.55)*x6303))+(((-1.0)*x6304*x6307))+(((-1.0)*x6305))+(((-1.0)*x6308))+((x6304*x6310))+(((0.045)*x6304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6315 = IKatan2WithCheck((gconst111*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst111*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x6315.valid){
continue;
}
j1array[0]=x6315.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6316=IKsin(j1);
IkReal x6317=IKcos(j1);
IkReal x6318=(gconst103*px);
IkReal x6319=((0.3)*cj3);
IkReal x6320=((0.045)*cj3);
IkReal x6321=(gconst102*py);
IkReal x6322=((0.045)*sj3);
IkReal x6323=((0.3)*sj3);
IkReal x6324=((0.045)*x6316);
IkReal x6325=((0.09)*x6317);
IkReal x6326=((1.1)*x6316);
IkReal x6327=((1.0)*x6317);
evalcond[0]=((-0.55)+(((-1.0)*x6319))+((x6316*x6318))+(((-1.0)*x6322))+((x6316*x6321)));
evalcond[1]=((0.045)+(((-1.0)*x6318*x6327))+x6323+(((-1.0)*x6321*x6327))+(((-1.0)*x6320)));
evalcond[2]=((-0.2125)+((x6318*x6325))+((x6318*x6326))+(((-1.0)*pp))+((x6321*x6326))+((x6321*x6325)));
evalcond[3]=(x6324+(((-0.55)*x6317))+(((-1.0)*x6316*x6320))+(((-1.0)*x6317*x6322))+((x6316*x6323))+(((-1.0)*x6317*x6319)));
evalcond[4]=((((-1.0)*x6321))+(((0.55)*x6316))+((x6317*x6323))+(((-1.0)*x6318))+((x6316*x6319))+(((-1.0)*x6317*x6320))+(((0.045)*x6317))+((x6316*x6322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst104;
CheckValue<IkReal> x6328 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x6328.valid){
continue;
}
gconst104=((3.14159265358979)+(((-1.0)*(x6328.value))));
IkReal gconst105;
gconst105=IKsin(gconst104);
IkReal gconst106;
gconst106=IKcos(gconst104);
IkReal x6329=((((-1.0)*gconst106*py))+((gconst105*px)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst104))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x6329;
evalcond[3]=x6329;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst112;
gconst112=IKsign((((gconst105*py))+((gconst106*px))));
dummyeval[0]=(((gconst105*py))+((gconst106*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6330=(gconst105*py);
IkReal x6331=((1.0)*sj3);
IkReal x6332=(gconst106*px);
IkReal x6333=((6.66666666666667)*cj3);
dummyeval[0]=(x6330+x6332);
dummyeval[1]=((((-1.0)*x6330*x6331))+(((-1.0)*x6330*x6333))+(((-12.2222222222222)*x6332))+(((-12.2222222222222)*x6330))+(((-1.0)*x6331*x6332))+(((-1.0)*x6332*x6333)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6334=(gconst106*px);
IkReal x6335=(gconst105*py);
IkReal x6336=((6.66666666666667)*sj3);
IkReal x6337=((1.0)*x6334);
IkReal x6338=((1.0)*x6335);
IkReal x6339=(x6337+x6338);
dummyeval[0]=(((cj3*x6334))+((cj3*x6335))+(((-1.0)*x6335*x6336))+(((-1.0)*x6334*x6336))+(((-1.0)*x6339)));
dummyeval[1]=((-1.0)*x6339);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x6340=x6329;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6340;
evalcond[3]=x6340;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=(((gconst105*py))+((gconst106*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6341=(gconst105*py);
IkReal x6342=(gconst106*px);
dummyeval[0]=(x6341+x6342);
dummyeval[1]=((x6341*x6341)+(((2.0)*x6341*x6342))+(x6342*x6342));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6343=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x6343)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6343)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6344=(gconst106*px);
IkReal x6345=(gconst105*py);
IkReal x6346=((20.0)*pp);
CheckValue<IkReal> x6347=IKPowWithIntegerCheck(((((20.0)*x6344))+(((20.0)*x6345))),-1);
if(!x6347.valid){
continue;
}
CheckValue<IkReal> x6348=IKPowWithIntegerCheck(((((3.6)*x6344*x6345))+(((1.8)*(x6345*x6345)))+(((1.8)*(x6344*x6344)))),-1);
if(!x6348.valid){
continue;
}
if( IKabs(((17.0)*(x6347.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6348.value)*((((x6344*x6346))+((x6345*x6346))+(((-14.45)*x6345))+(((-14.45)*x6344)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x6347.value)))+IKsqr(((x6348.value)*((((x6344*x6346))+((x6345*x6346))+(((-14.45)*x6345))+(((-14.45)*x6344))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x6347.value)), ((x6348.value)*((((x6344*x6346))+((x6345*x6346))+(((-14.45)*x6345))+(((-14.45)*x6344))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6349=IKsin(j1);
IkReal x6350=IKcos(j1);
IkReal x6351=(gconst105*py);
IkReal x6352=(gconst106*px);
IkReal x6353=((1.1)*x6349);
IkReal x6354=((0.09)*x6350);
IkReal x6355=((1.0)*x6350);
evalcond[0]=((-0.85)*x6350);
evalcond[1]=((-0.85)+((x6349*x6352))+((x6349*x6351)));
evalcond[2]=((((0.85)*x6349))+(((-1.0)*x6351))+(((-1.0)*x6352)));
evalcond[3]=((((-1.0)*x6351*x6355))+(((-1.0)*x6352*x6355)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+((x6352*x6354))+((x6352*x6353))+((x6351*x6353))+((x6351*x6354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6356=(gconst106*px);
IkReal x6357=(gconst105*py);
CheckValue<IkReal> x6358=IKPowWithIntegerCheck(((((1.53)*x6357))+(((1.53)*x6356))),-1);
if(!x6358.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x6357))+(((1.17647058823529)*x6356)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6358.value)*(((3.6125)+(((-22.0)*(x6357*x6357)))+(((-22.0)*(x6356*x6356)))+(((17.0)*pp))+(((-44.0)*x6356*x6357)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x6357))+(((1.17647058823529)*x6356))))+IKsqr(((x6358.value)*(((3.6125)+(((-22.0)*(x6357*x6357)))+(((-22.0)*(x6356*x6356)))+(((17.0)*pp))+(((-44.0)*x6356*x6357))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x6357))+(((1.17647058823529)*x6356))), ((x6358.value)*(((3.6125)+(((-22.0)*(x6357*x6357)))+(((-22.0)*(x6356*x6356)))+(((17.0)*pp))+(((-44.0)*x6356*x6357))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6359=IKsin(j1);
IkReal x6360=IKcos(j1);
IkReal x6361=(gconst105*py);
IkReal x6362=(gconst106*px);
IkReal x6363=((1.1)*x6359);
IkReal x6364=((0.09)*x6360);
IkReal x6365=((1.0)*x6360);
evalcond[0]=((-0.85)*x6360);
evalcond[1]=((-0.85)+((x6359*x6361))+((x6359*x6362)));
evalcond[2]=((((-1.0)*x6362))+(((-1.0)*x6361))+(((0.85)*x6359)));
evalcond[3]=((((-1.0)*x6362*x6365))+(((-1.0)*x6361*x6365)));
evalcond[4]=((-0.2125)+((x6362*x6364))+((x6362*x6363))+((x6361*x6364))+((x6361*x6363))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6366=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x6366))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x6366)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6368 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6368.valid){
continue;
}
IkReal x6367=x6368.value;
j1array[0]=((-1.0)*x6367);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6367)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6369=IKsin(j1);
IkReal x6370=IKcos(j1);
IkReal x6371=((0.045)*x6370);
evalcond[0]=((((0.3)*cj3*x6369))+x6371+(((0.55)*x6369))+(((0.045)*sj3*x6369))+(((-1.0)*cj3*x6371))+(((0.3)*sj3*x6370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6372=((-1.0)*gconst106*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6372;
evalcond[3]=x6372;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst105;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst105;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6373=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x6373)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6373)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6377=IKPowWithIntegerCheck(gconst105,-1);
if(!x6377.valid){
continue;
}
IkReal x6374=x6377.value;
CheckValue<IkReal> x6378=IKPowWithIntegerCheck(py,-1);
if(!x6378.valid){
continue;
}
IkReal x6375=x6378.value;
IkReal x6376=(x6374*x6375);
if( IKabs(((0.85)*x6376)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6376*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6376))+IKsqr(((0.0555555555555556)*x6376*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6376), ((0.0555555555555556)*x6376*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6379=IKcos(j1);
IkReal x6380=IKsin(j1);
IkReal x6381=(gconst105*py);
evalcond[0]=((-0.85)*x6379);
evalcond[1]=((-1.0)*x6379*x6381);
evalcond[2]=((-0.85)+((x6380*x6381)));
evalcond[3]=((((-1.0)*x6381))+(((0.85)*x6380)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x6379*x6381))+(((1.1)*x6380*x6381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6382=IKPowWithIntegerCheck(gconst105,-1);
if(!x6382.valid){
continue;
}
CheckValue<IkReal> x6383=IKPowWithIntegerCheck(py,-1);
if(!x6383.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst105*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6382.value)*(x6383.value)*(((361.25)+(((-2200.0)*(gconst105*gconst105)*(py*py)))+(((1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst105*py))+IKsqr(((0.0065359477124183)*(x6382.value)*(x6383.value)*(((361.25)+(((-2200.0)*(gconst105*gconst105)*(py*py)))+(((1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst105*py), ((0.0065359477124183)*(x6382.value)*(x6383.value)*(((361.25)+(((-2200.0)*(gconst105*gconst105)*(py*py)))+(((1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6384=IKcos(j1);
IkReal x6385=IKsin(j1);
IkReal x6386=(gconst105*py);
evalcond[0]=((-0.85)*x6384);
evalcond[1]=((-1.0)*x6384*x6386);
evalcond[2]=((-0.85)+((x6385*x6386)));
evalcond[3]=((((-1.0)*x6386))+(((0.85)*x6385)));
evalcond[4]=((-0.2125)+(((0.09)*x6384*x6386))+(((-1.0)*pp))+(((1.1)*x6385*x6386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6387=(gconst105*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6387;
evalcond[3]=x6387;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst106;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst106;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6388=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x6388)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6388)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6392=IKPowWithIntegerCheck(gconst106,-1);
if(!x6392.valid){
continue;
}
IkReal x6389=x6392.value;
CheckValue<IkReal> x6393=IKPowWithIntegerCheck(px,-1);
if(!x6393.valid){
continue;
}
IkReal x6390=x6393.value;
IkReal x6391=(x6389*x6390);
if( IKabs(((0.85)*x6391)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6391*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6391))+IKsqr(((0.0555555555555556)*x6391*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6391), ((0.0555555555555556)*x6391*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6394=IKcos(j1);
IkReal x6395=IKsin(j1);
IkReal x6396=(gconst106*px);
evalcond[0]=((-0.85)*x6394);
evalcond[1]=((-1.0)*x6394*x6396);
evalcond[2]=((-0.85)+((x6395*x6396)));
evalcond[3]=((((-1.0)*x6396))+(((0.85)*x6395)));
evalcond[4]=((-0.2125)+(((1.1)*x6395*x6396))+(((0.09)*x6394*x6396))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6397=IKPowWithIntegerCheck(gconst106,-1);
if(!x6397.valid){
continue;
}
CheckValue<IkReal> x6398=IKPowWithIntegerCheck(px,-1);
if(!x6398.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst106*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6397.value)*(x6398.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst106*gconst106)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst106*px))+IKsqr(((0.0065359477124183)*(x6397.value)*(x6398.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst106*gconst106)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst106*px), ((0.0065359477124183)*(x6397.value)*(x6398.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(gconst106*gconst106)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6399=IKcos(j1);
IkReal x6400=IKsin(j1);
IkReal x6401=(gconst106*px);
evalcond[0]=((-0.85)*x6399);
evalcond[1]=((-1.0)*x6399*x6401);
evalcond[2]=((-0.85)+((x6400*x6401)));
evalcond[3]=((((0.85)*x6400))+(((-1.0)*x6401)));
evalcond[4]=((-0.2125)+(((1.1)*x6400*x6401))+(((-1.0)*pp))+(((0.09)*x6399*x6401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6402=((0.045)*cj3);
IkReal x6403=(gconst106*px);
IkReal x6404=((0.3)*sj3);
IkReal x6405=(gconst105*py);
CheckValue<IkReal> x6406=IKPowWithIntegerCheck(((((-0.045)*x6403))+(((-0.045)*x6405))+(((-1.0)*x6403*x6404))+((x6402*x6405))+((x6402*x6403))+(((-1.0)*x6404*x6405))),-1);
if(!x6406.valid){
continue;
}
CheckValue<IkReal> x6407=IKPowWithIntegerCheck(((((-1.0)*x6405))+(((-1.0)*x6403))),-1);
if(!x6407.valid){
continue;
}
if( IKabs(((x6406.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6407.value)*(((-0.045)+x6402+(((-1.0)*x6404)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6406.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x6407.value)*(((-0.045)+x6402+(((-1.0)*x6404))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6406.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x6407.value)*(((-0.045)+x6402+(((-1.0)*x6404))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6408=IKsin(j1);
IkReal x6409=IKcos(j1);
IkReal x6410=((0.3)*cj3);
IkReal x6411=((0.045)*cj3);
IkReal x6412=(gconst106*px);
IkReal x6413=(gconst105*py);
IkReal x6414=((0.045)*sj3);
IkReal x6415=((0.3)*sj3);
IkReal x6416=((0.045)*x6408);
IkReal x6417=((0.09)*x6409);
IkReal x6418=((1.1)*x6408);
IkReal x6419=((1.0)*x6409);
evalcond[0]=((-0.55)+((x6408*x6413))+((x6408*x6412))+(((-1.0)*x6410))+(((-1.0)*x6414)));
evalcond[1]=((0.045)+(((-1.0)*x6412*x6419))+x6415+(((-1.0)*x6411))+(((-1.0)*x6413*x6419)));
evalcond[2]=((-0.2125)+((x6413*x6418))+((x6413*x6417))+(((-1.0)*pp))+((x6412*x6418))+((x6412*x6417)));
evalcond[3]=(((x6408*x6415))+(((-0.55)*x6409))+x6416+(((-1.0)*x6408*x6411))+(((-1.0)*x6409*x6410))+(((-1.0)*x6409*x6414)));
evalcond[4]=(((x6408*x6414))+((x6408*x6410))+(((0.55)*x6408))+((x6409*x6415))+(((-1.0)*x6412))+(((-1.0)*x6413))+(((-1.0)*x6409*x6411))+(((0.045)*x6409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6420=(gconst106*px);
IkReal x6421=(gconst105*py);
IkReal x6422=((0.3)*cj3);
IkReal x6423=((0.045)*sj3);
CheckValue<IkReal> x6424=IKPowWithIntegerCheck((x6420+x6421),-1);
if(!x6424.valid){
continue;
}
CheckValue<IkReal> x6425=IKPowWithIntegerCheck(((((-1.0)*x6421*x6422))+(((-1.0)*x6421*x6423))+(((-0.55)*x6420))+(((-0.55)*x6421))+(((-1.0)*x6420*x6422))+(((-1.0)*x6420*x6423))),-1);
if(!x6425.valid){
continue;
}
if( IKabs(((x6424.value)*(((0.55)+x6422+x6423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6425.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6424.value)*(((0.55)+x6422+x6423))))+IKsqr(((x6425.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6424.value)*(((0.55)+x6422+x6423))), ((x6425.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6426=IKsin(j1);
IkReal x6427=IKcos(j1);
IkReal x6428=((0.3)*cj3);
IkReal x6429=((0.045)*cj3);
IkReal x6430=(gconst106*px);
IkReal x6431=(gconst105*py);
IkReal x6432=((0.045)*sj3);
IkReal x6433=((0.3)*sj3);
IkReal x6434=((0.045)*x6426);
IkReal x6435=((0.09)*x6427);
IkReal x6436=((1.1)*x6426);
IkReal x6437=((1.0)*x6427);
evalcond[0]=((-0.55)+(((-1.0)*x6432))+(((-1.0)*x6428))+((x6426*x6431))+((x6426*x6430)));
evalcond[1]=((0.045)+(((-1.0)*x6431*x6437))+(((-1.0)*x6430*x6437))+x6433+(((-1.0)*x6429)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x6431*x6436))+((x6431*x6435))+((x6430*x6435))+((x6430*x6436)));
evalcond[3]=((((-1.0)*x6427*x6432))+x6434+(((-0.55)*x6427))+(((-1.0)*x6427*x6428))+(((-1.0)*x6426*x6429))+((x6426*x6433)));
evalcond[4]=((((0.55)*x6426))+(((-1.0)*x6427*x6429))+((x6427*x6433))+(((0.045)*x6427))+((x6426*x6432))+((x6426*x6428))+(((-1.0)*x6431))+(((-1.0)*x6430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6438 = IKatan2WithCheck((gconst112*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst112*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x6438.valid){
continue;
}
j1array[0]=x6438.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6439=IKsin(j1);
IkReal x6440=IKcos(j1);
IkReal x6441=((0.3)*cj3);
IkReal x6442=((0.045)*cj3);
IkReal x6443=(gconst106*px);
IkReal x6444=(gconst105*py);
IkReal x6445=((0.045)*sj3);
IkReal x6446=((0.3)*sj3);
IkReal x6447=((0.045)*x6439);
IkReal x6448=((0.09)*x6440);
IkReal x6449=((1.1)*x6439);
IkReal x6450=((1.0)*x6440);
evalcond[0]=((-0.55)+(((-1.0)*x6441))+(((-1.0)*x6445))+((x6439*x6444))+((x6439*x6443)));
evalcond[1]=((0.045)+x6446+(((-1.0)*x6444*x6450))+(((-1.0)*x6442))+(((-1.0)*x6443*x6450)));
evalcond[2]=((-0.2125)+((x6443*x6448))+((x6443*x6449))+((x6444*x6448))+((x6444*x6449))+(((-1.0)*pp)));
evalcond[3]=((((-0.55)*x6440))+(((-1.0)*x6439*x6442))+x6447+((x6439*x6446))+(((-1.0)*x6440*x6445))+(((-1.0)*x6440*x6441)));
evalcond[4]=((((0.045)*x6440))+(((-1.0)*x6443))+(((-1.0)*x6444))+((x6440*x6446))+((x6439*x6441))+((x6439*x6445))+(((0.55)*x6439))+(((-1.0)*x6440*x6442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6451=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x6451))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x6451)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6453 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6453.valid){
continue;
}
IkReal x6452=x6453.value;
j1array[0]=((-1.0)*x6452);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6452)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6454=IKsin(j1);
IkReal x6455=IKcos(j1);
IkReal x6456=((0.045)*x6455);
evalcond[0]=((((-1.0)*cj3*x6456))+x6456+(((0.3)*cj3*x6454))+(((0.3)*sj3*x6455))+(((0.045)*sj3*x6454))+(((0.55)*x6454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6457=((-1.0)*cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6457;
evalcond[3]=x6457;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6458=((1.0)*pp);
IkReal x6459=((-1.0)*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x6458)));
evalcond[2]=-0.85;
evalcond[3]=x6459;
evalcond[4]=x6459;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x6458)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6460=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x6460)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x6460)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6461=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x6461)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6461)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6462=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)))))+(IKabs(IKabs(py))));
evalcond[1]=((0.7225)+(((-1.0)*x6462)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6462)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6463=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(py))));
evalcond[1]=((0.7225)+(((-1.0)*x6463)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6463)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6467=IKPowWithIntegerCheck(py,-1);
if(!x6467.valid){
continue;
}
IkReal x6464=x6467.value;
CheckValue<IkReal> x6468=IKPowWithIntegerCheck(sj0,-1);
if(!x6468.valid){
continue;
}
IkReal x6465=x6468.value;
IkReal x6466=(x6464*x6465);
if( IKabs(((0.85)*x6466)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6466*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6466))+IKsqr(((0.0555555555555556)*x6466*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6466), ((0.0555555555555556)*x6466*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6469=IKcos(j1);
IkReal x6470=IKsin(j1);
IkReal x6471=(py*sj0*x6470);
IkReal x6472=(py*sj0*x6469);
evalcond[0]=((-0.85)*x6469);
evalcond[1]=((-1.0)*x6472);
evalcond[2]=((-0.85)+x6471);
evalcond[3]=((((0.85)*x6470))+(((-1.0)*py*sj0)));
evalcond[4]=((-0.2125)+(((0.09)*x6472))+(((-1.0)*pp))+(((1.1)*x6471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6473=IKPowWithIntegerCheck(py,-1);
if(!x6473.valid){
continue;
}
CheckValue<IkReal> x6474=IKPowWithIntegerCheck(sj0,-1);
if(!x6474.valid){
continue;
}
if( IKabs(((1.17647058823529)*py*sj0)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6473.value)*(x6474.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(py*py)*(sj0*sj0))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*py*sj0))+IKsqr(((0.0065359477124183)*(x6473.value)*(x6474.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(py*py)*(sj0*sj0)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*py*sj0), ((0.0065359477124183)*(x6473.value)*(x6474.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(py*py)*(sj0*sj0)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6475=IKcos(j1);
IkReal x6476=IKsin(j1);
IkReal x6477=(py*sj0*x6476);
IkReal x6478=(py*sj0*x6475);
evalcond[0]=((-0.85)*x6475);
evalcond[1]=((-1.0)*x6478);
evalcond[2]=((-0.85)+x6477);
evalcond[3]=((((0.85)*x6476))+(((-1.0)*py*sj0)));
evalcond[4]=((-0.2125)+(((0.09)*x6478))+(((-1.0)*pp))+(((1.1)*x6477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6479=((1.0)*pp);
IkReal x6480=((-1.0)*py);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x6479))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x6480;
evalcond[4]=x6480;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x6479)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6482 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6482.valid){
continue;
}
IkReal x6481=x6482.value;
j1array[0]=((-1.0)*x6481);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6481)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6483=IKsin(j1);
IkReal x6484=IKcos(j1);
IkReal x6485=((0.045)*x6484);
evalcond[0]=((((0.3)*cj3*x6483))+(((0.3)*sj3*x6484))+x6485+(((-1.0)*cj3*x6485))+(((0.045)*sj3*x6483))+(((0.55)*x6483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6486=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((-1.0)*x6486))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x6486)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6488 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6488.valid){
continue;
}
IkReal x6487=x6488.value;
j1array[0]=((-1.0)*x6487);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6487)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6489=IKsin(j1);
IkReal x6490=IKcos(j1);
IkReal x6491=((0.045)*x6490);
evalcond[0]=((((0.3)*cj3*x6489))+(((0.3)*sj3*x6490))+x6491+(((-1.0)*cj3*x6491))+(((0.045)*sj3*x6489))+(((0.55)*x6489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6492=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6492;
evalcond[3]=x6492;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6493=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x6493)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x6493)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6494=((1.0)*pp);
IkReal x6495=((-1.0)*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x6494)));
evalcond[2]=-0.85;
evalcond[3]=x6495;
evalcond[4]=x6495;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x6494)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6496=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x6496)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6496)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6497=((1.0)*pp);
evalcond[0]=((IKabs(IKabs(px)))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x6497)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6497)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6498=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(px))));
evalcond[1]=((0.7225)+(((-1.0)*x6498)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6498)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6502=IKPowWithIntegerCheck(cj0,-1);
if(!x6502.valid){
continue;
}
IkReal x6499=x6502.value;
CheckValue<IkReal> x6503=IKPowWithIntegerCheck(px,-1);
if(!x6503.valid){
continue;
}
IkReal x6500=x6503.value;
IkReal x6501=(x6499*x6500);
if( IKabs(((0.85)*x6501)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6501*(((-144.5)+(((200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6501))+IKsqr(((0.0555555555555556)*x6501*(((-144.5)+(((200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6501), ((0.0555555555555556)*x6501*(((-144.5)+(((200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6504=IKcos(j1);
IkReal x6505=IKsin(j1);
IkReal x6506=(cj0*px);
IkReal x6507=(x6504*x6506);
evalcond[0]=((-0.85)*x6504);
evalcond[1]=((-1.0)*x6507);
evalcond[2]=((-0.85)+((x6505*x6506)));
evalcond[3]=((((0.85)*x6505))+(((-1.0)*x6506)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x6505*x6506))+(((0.09)*x6507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6508=IKPowWithIntegerCheck(cj0,-1);
if(!x6508.valid){
continue;
}
CheckValue<IkReal> x6509=IKPowWithIntegerCheck(px,-1);
if(!x6509.valid){
continue;
}
if( IKabs(((1.17647058823529)*cj0*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6508.value)*(x6509.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(cj0*cj0)*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*cj0*px))+IKsqr(((0.0065359477124183)*(x6508.value)*(x6509.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(cj0*cj0)*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*cj0*px), ((0.0065359477124183)*(x6508.value)*(x6509.value)*(((361.25)+(((1700.0)*pp))+(((-2200.0)*(cj0*cj0)*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6510=IKcos(j1);
IkReal x6511=IKsin(j1);
IkReal x6512=(cj0*px);
IkReal x6513=(x6510*x6512);
evalcond[0]=((-0.85)*x6510);
evalcond[1]=((-1.0)*x6513);
evalcond[2]=((-0.85)+((x6511*x6512)));
evalcond[3]=((((0.85)*x6511))+(((-1.0)*x6512)));
evalcond[4]=((-0.2125)+(((0.09)*x6513))+(((-1.0)*pp))+(((1.1)*x6511*x6512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6514=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x6514))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x6514)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6516 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6516.valid){
continue;
}
IkReal x6515=x6516.value;
j1array[0]=((-1.0)*x6515);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6515)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6517=IKsin(j1);
IkReal x6518=IKcos(j1);
IkReal x6519=((0.045)*x6518);
evalcond[0]=((((-1.0)*cj3*x6519))+(((0.55)*x6517))+(((0.3)*sj3*x6518))+(((0.3)*cj3*x6517))+x6519+(((0.045)*sj3*x6517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6520=((1.0)*pp);
IkReal x6521=((-1.0)*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x6520))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=x6521;
evalcond[4]=x6521;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x6520)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6523 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6523.valid){
continue;
}
IkReal x6522=x6523.value;
j1array[0]=((-1.0)*x6522);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6522)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6524=IKsin(j1);
IkReal x6525=IKcos(j1);
IkReal x6526=((0.045)*x6525);
evalcond[0]=((((0.045)*sj3*x6524))+(((0.3)*sj3*x6525))+(((0.3)*cj3*x6524))+(((-1.0)*cj3*x6526))+x6526+(((0.55)*x6524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6527=((0.3)*sj3);
IkReal x6528=(py*sj0);
IkReal x6529=((0.045)*cj3);
IkReal x6530=(cj0*px);
CheckValue<IkReal> x6531=IKPowWithIntegerCheck(((((-1.0)*x6527*x6528))+((x6528*x6529))+(((-0.045)*x6530))+((x6529*x6530))+(((-0.045)*x6528))+(((-1.0)*x6527*x6530))),-1);
if(!x6531.valid){
continue;
}
CheckValue<IkReal> x6532=IKPowWithIntegerCheck(((((-1.0)*x6530))+(((-1.0)*x6528))),-1);
if(!x6532.valid){
continue;
}
if( IKabs(((x6531.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6532.value)*(((-0.045)+(((-1.0)*x6527))+x6529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6531.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x6532.value)*(((-0.045)+(((-1.0)*x6527))+x6529))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6531.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x6532.value)*(((-0.045)+(((-1.0)*x6527))+x6529))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6533=IKsin(j1);
IkReal x6534=IKcos(j1);
IkReal x6535=((0.3)*cj3);
IkReal x6536=((0.045)*cj3);
IkReal x6537=(cj0*px);
IkReal x6538=(py*sj0);
IkReal x6539=((0.045)*sj3);
IkReal x6540=((0.3)*sj3);
IkReal x6541=((0.045)*x6533);
IkReal x6542=((1.0)*x6534);
IkReal x6543=((0.09)*x6534);
IkReal x6544=((1.1)*x6533);
evalcond[0]=((-0.55)+(((-1.0)*x6539))+(((-1.0)*x6535))+((x6533*x6537))+((x6533*x6538)));
evalcond[1]=((0.045)+(((-1.0)*x6536))+x6540+(((-1.0)*x6537*x6542))+(((-1.0)*x6538*x6542)));
evalcond[2]=((-0.2125)+((x6538*x6544))+((x6538*x6543))+((x6537*x6543))+((x6537*x6544))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x6534*x6535))+(((-1.0)*x6534*x6539))+x6541+((x6533*x6540))+(((-1.0)*x6533*x6536))+(((-0.55)*x6534)));
evalcond[4]=((((-1.0)*x6534*x6536))+((x6533*x6535))+((x6533*x6539))+(((-1.0)*x6537))+(((-1.0)*x6538))+((x6534*x6540))+(((0.045)*x6534))+(((0.55)*x6533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6545=(cj0*px);
IkReal x6546=((0.045)*sj3);
IkReal x6547=(py*sj0);
IkReal x6548=((0.3)*cj3);
CheckValue<IkReal> x6549=IKPowWithIntegerCheck((x6547+x6545),-1);
if(!x6549.valid){
continue;
}
CheckValue<IkReal> x6550=IKPowWithIntegerCheck(((((-1.0)*x6545*x6546))+(((-1.0)*x6545*x6548))+(((-1.0)*x6546*x6547))+(((-1.0)*x6547*x6548))+(((-0.55)*x6545))+(((-0.55)*x6547))),-1);
if(!x6550.valid){
continue;
}
if( IKabs(((x6549.value)*(((0.55)+x6546+x6548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6550.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6549.value)*(((0.55)+x6546+x6548))))+IKsqr(((x6550.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6549.value)*(((0.55)+x6546+x6548))), ((x6550.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6551=IKsin(j1);
IkReal x6552=IKcos(j1);
IkReal x6553=((0.3)*cj3);
IkReal x6554=((0.045)*cj3);
IkReal x6555=(cj0*px);
IkReal x6556=(py*sj0);
IkReal x6557=((0.045)*sj3);
IkReal x6558=((0.3)*sj3);
IkReal x6559=((0.045)*x6551);
IkReal x6560=((1.0)*x6552);
IkReal x6561=((0.09)*x6552);
IkReal x6562=((1.1)*x6551);
evalcond[0]=((-0.55)+((x6551*x6556))+((x6551*x6555))+(((-1.0)*x6553))+(((-1.0)*x6557)));
evalcond[1]=((0.045)+(((-1.0)*x6554))+(((-1.0)*x6555*x6560))+(((-1.0)*x6556*x6560))+x6558);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x6555*x6561))+((x6555*x6562))+((x6556*x6561))+((x6556*x6562)));
evalcond[3]=((((-1.0)*x6552*x6553))+(((-1.0)*x6552*x6557))+(((-1.0)*x6551*x6554))+((x6551*x6558))+x6559+(((-0.55)*x6552)));
evalcond[4]=((((0.55)*x6551))+(((-1.0)*x6552*x6554))+((x6552*x6558))+((x6551*x6557))+((x6551*x6553))+(((0.045)*x6552))+(((-1.0)*x6555))+(((-1.0)*x6556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6563 = IKatan2WithCheck((gconst88*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst88*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x6563.valid){
continue;
}
j1array[0]=x6563.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6564=IKsin(j1);
IkReal x6565=IKcos(j1);
IkReal x6566=((0.3)*cj3);
IkReal x6567=((0.045)*cj3);
IkReal x6568=(cj0*px);
IkReal x6569=(py*sj0);
IkReal x6570=((0.045)*sj3);
IkReal x6571=((0.3)*sj3);
IkReal x6572=((0.045)*x6564);
IkReal x6573=((1.0)*x6565);
IkReal x6574=((0.09)*x6565);
IkReal x6575=((1.1)*x6564);
evalcond[0]=((-0.55)+((x6564*x6568))+((x6564*x6569))+(((-1.0)*x6566))+(((-1.0)*x6570)));
evalcond[1]=((0.045)+x6571+(((-1.0)*x6569*x6573))+(((-1.0)*x6567))+(((-1.0)*x6568*x6573)));
evalcond[2]=((-0.2125)+((x6568*x6574))+((x6568*x6575))+(((-1.0)*pp))+((x6569*x6575))+((x6569*x6574)));
evalcond[3]=((((-1.0)*x6565*x6566))+(((-1.0)*x6565*x6570))+((x6564*x6571))+x6572+(((-1.0)*x6564*x6567))+(((-0.55)*x6565)));
evalcond[4]=((((-1.0)*x6565*x6567))+(((0.55)*x6564))+(((0.045)*x6565))+((x6564*x6570))+((x6564*x6566))+((x6565*x6571))+(((-1.0)*x6568))+(((-1.0)*x6569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6576=(px*sj0);
IkReal x6577=(cj0*py);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x6576+(((-1.0)*x6577)));
evalcond[3]=(x6577+(((-1.0)*x6576)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst113;
gconst113=IKsign((((cj0*px))+((py*sj0))));
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6578=(cj0*px);
IkReal x6579=(py*sj0);
IkReal x6580=((6.66666666666667)*cj3);
IkReal x6581=((1.0)*sj3);
dummyeval[0]=(x6578+x6579);
dummyeval[1]=((((-12.2222222222222)*x6579))+(((-12.2222222222222)*x6578))+(((-1.0)*x6578*x6580))+(((-1.0)*x6578*x6581))+(((-1.0)*x6579*x6580))+(((-1.0)*x6579*x6581)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6582=(cj0*px);
IkReal x6583=(py*sj0);
IkReal x6584=((6.66666666666667)*sj3);
dummyeval[0]=((((-1.0)*x6583))+(((-1.0)*x6582))+((cj3*x6582))+((cj3*x6583))+(((-1.0)*x6582*x6584))+(((-1.0)*x6583*x6584)));
dummyeval[1]=(x6583+x6582);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6585=(px*sj0);
IkReal x6586=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x6586))+x6585);
evalcond[3]=((((-1.0)*x6585))+x6586);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6587=(cj0*px);
IkReal x6588=(py*sj0);
dummyeval[0]=(x6587+x6588);
dummyeval[1]=((((-1.0)*(x6587*x6587)))+(((-2.0)*x6587*x6588))+(((-1.0)*(x6588*x6588))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6589=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x6589)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6589)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6590=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.7225)+(((-1.0)*x6590)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x6590)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6591=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x6591)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x6591)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6592=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x6592)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x6592)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6593=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x6593)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x6593)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6594=(cj0*px);
IkReal x6595=(py*sj0);
IkReal x6596=((20.0)*pp);
CheckValue<IkReal> x6597=IKPowWithIntegerCheck(((((20.0)*x6595))+(((20.0)*x6594))),-1);
if(!x6597.valid){
continue;
}
CheckValue<IkReal> x6598=IKPowWithIntegerCheck(((((-1.8)*(x6594*x6594)))+(((-3.6)*x6594*x6595))+(((-1.8)*(x6595*x6595)))),-1);
if(!x6598.valid){
continue;
}
if( IKabs(((17.0)*(x6597.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6598.value)*((((x6594*x6596))+((x6595*x6596))+(((-14.45)*x6594))+(((-14.45)*x6595)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x6597.value)))+IKsqr(((x6598.value)*((((x6594*x6596))+((x6595*x6596))+(((-14.45)*x6594))+(((-14.45)*x6595))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x6597.value)), ((x6598.value)*((((x6594*x6596))+((x6595*x6596))+(((-14.45)*x6594))+(((-14.45)*x6595))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6599=IKcos(j1);
IkReal x6600=IKsin(j1);
IkReal x6601=(py*sj0);
IkReal x6602=(cj0*px);
IkReal x6603=((0.09)*x6599);
IkReal x6604=(x6600*x6601);
evalcond[0]=((-0.85)*x6599);
evalcond[1]=(((x6599*x6602))+((x6599*x6601)));
evalcond[2]=((-0.85)+x6604+((x6600*x6602)));
evalcond[3]=((((0.85)*x6600))+(((-1.0)*x6602))+(((-1.0)*x6601)));
evalcond[4]=((-0.2125)+(((-1.0)*x6601*x6603))+(((-1.0)*pp))+(((-1.0)*x6602*x6603))+(((1.1)*x6604))+(((1.1)*x6600*x6602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6605=(cj0*px);
IkReal x6606=(py*sj0);
CheckValue<IkReal> x6607=IKPowWithIntegerCheck(((((-1.53)*x6605))+(((-1.53)*x6606))),-1);
if(!x6607.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x6606))+(((1.17647058823529)*x6605)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6607.value)*(((3.6125)+(((-44.0)*x6605*x6606))+(((17.0)*pp))+(((-22.0)*(x6605*x6605)))+(((-22.0)*(x6606*x6606))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x6606))+(((1.17647058823529)*x6605))))+IKsqr(((x6607.value)*(((3.6125)+(((-44.0)*x6605*x6606))+(((17.0)*pp))+(((-22.0)*(x6605*x6605)))+(((-22.0)*(x6606*x6606)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x6606))+(((1.17647058823529)*x6605))), ((x6607.value)*(((3.6125)+(((-44.0)*x6605*x6606))+(((17.0)*pp))+(((-22.0)*(x6605*x6605)))+(((-22.0)*(x6606*x6606)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6608=IKcos(j1);
IkReal x6609=IKsin(j1);
IkReal x6610=(py*sj0);
IkReal x6611=(cj0*px);
IkReal x6612=((0.09)*x6608);
IkReal x6613=(x6609*x6610);
evalcond[0]=((-0.85)*x6608);
evalcond[1]=(((x6608*x6610))+((x6608*x6611)));
evalcond[2]=((-0.85)+((x6609*x6611))+x6613);
evalcond[3]=((((-1.0)*x6610))+(((-1.0)*x6611))+(((0.85)*x6609)));
evalcond[4]=((-0.2125)+(((-1.0)*x6611*x6612))+(((-1.0)*x6610*x6612))+(((-1.0)*pp))+(((1.1)*x6613))+(((1.1)*x6609*x6611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst114;
CheckValue<IkReal> x6614 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x6614.valid){
continue;
}
gconst114=((-1.0)*(x6614.value));
IkReal gconst115;
gconst115=IKsin(gconst114);
IkReal gconst116;
gconst116=IKcos(gconst114);
IkReal x6615=(gconst115*px);
IkReal x6616=(gconst116*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst114))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x6616))+x6615);
evalcond[3]=((((-1.0)*x6615))+x6616);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst132;
gconst132=IKsign((((gconst116*px))+((gconst115*py))));
dummyeval[0]=(((gconst116*px))+((gconst115*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6617=(gconst115*py);
IkReal x6618=((1.0)*sj3);
IkReal x6619=(gconst116*px);
IkReal x6620=((6.66666666666667)*cj3);
dummyeval[0]=(x6617+x6619);
dummyeval[1]=((((-1.0)*x6618*x6619))+(((-1.0)*x6619*x6620))+(((-12.2222222222222)*x6619))+(((-12.2222222222222)*x6617))+(((-1.0)*x6617*x6620))+(((-1.0)*x6617*x6618)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6621=(gconst116*px);
IkReal x6622=((6.66666666666667)*sj3);
IkReal x6623=(gconst115*py);
dummyeval[0]=(((cj3*x6623))+((cj3*x6621))+(((-1.0)*x6621))+(((-1.0)*x6623))+(((-1.0)*x6621*x6622))+(((-1.0)*x6622*x6623)));
dummyeval[1]=(x6623+x6621);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x6624=(gconst116*py);
IkReal x6625=(gconst115*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x6624))+x6625);
evalcond[3]=((((-1.0)*x6625))+x6624);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst115*py))+(((-1.0)*gconst116*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6626=(gconst116*px);
IkReal x6627=(gconst115*py);
dummyeval[0]=(x6626+x6627);
dummyeval[1]=((((-1.0)*(x6627*x6627)))+(((-1.0)*(x6626*x6626)))+(((-2.0)*x6626*x6627)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6628=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x6628)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6628)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6629=(gconst116*px);
IkReal x6630=(gconst115*py);
IkReal x6631=((20.0)*pp);
CheckValue<IkReal> x6632=IKPowWithIntegerCheck(((((20.0)*x6630))+(((20.0)*x6629))),-1);
if(!x6632.valid){
continue;
}
CheckValue<IkReal> x6633=IKPowWithIntegerCheck(((((-3.6)*x6629*x6630))+(((-1.8)*(x6630*x6630)))+(((-1.8)*(x6629*x6629)))),-1);
if(!x6633.valid){
continue;
}
if( IKabs(((17.0)*(x6632.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6633.value)*((((x6630*x6631))+(((-14.45)*x6629))+(((-14.45)*x6630))+((x6629*x6631)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x6632.value)))+IKsqr(((x6633.value)*((((x6630*x6631))+(((-14.45)*x6629))+(((-14.45)*x6630))+((x6629*x6631))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x6632.value)), ((x6633.value)*((((x6630*x6631))+(((-14.45)*x6629))+(((-14.45)*x6630))+((x6629*x6631))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6634=IKcos(j1);
IkReal x6635=IKsin(j1);
IkReal x6636=(gconst116*px);
IkReal x6637=(gconst115*py);
IkReal x6638=((1.1)*x6635);
IkReal x6639=(x6634*x6637);
evalcond[0]=((-0.85)*x6634);
evalcond[1]=(x6639+((x6634*x6636)));
evalcond[2]=((-0.85)+((x6635*x6636))+((x6635*x6637)));
evalcond[3]=((((-1.0)*x6637))+(((-1.0)*x6636))+(((0.85)*x6635)));
evalcond[4]=((-0.2125)+((x6637*x6638))+((x6636*x6638))+(((-0.09)*x6639))+(((-1.0)*pp))+(((-0.09)*x6634*x6636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6640=(gconst115*py);
IkReal x6641=(gconst116*px);
CheckValue<IkReal> x6642=IKPowWithIntegerCheck(((((-1.53)*x6640))+(((-1.53)*x6641))),-1);
if(!x6642.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x6640))+(((1.17647058823529)*x6641)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6642.value)*(((3.6125)+(((-22.0)*(x6641*x6641)))+(((17.0)*pp))+(((-22.0)*(x6640*x6640)))+(((-44.0)*x6640*x6641)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x6640))+(((1.17647058823529)*x6641))))+IKsqr(((x6642.value)*(((3.6125)+(((-22.0)*(x6641*x6641)))+(((17.0)*pp))+(((-22.0)*(x6640*x6640)))+(((-44.0)*x6640*x6641))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x6640))+(((1.17647058823529)*x6641))), ((x6642.value)*(((3.6125)+(((-22.0)*(x6641*x6641)))+(((17.0)*pp))+(((-22.0)*(x6640*x6640)))+(((-44.0)*x6640*x6641))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6643=IKcos(j1);
IkReal x6644=IKsin(j1);
IkReal x6645=(gconst116*px);
IkReal x6646=(gconst115*py);
IkReal x6647=((1.1)*x6644);
IkReal x6648=(x6643*x6646);
evalcond[0]=((-0.85)*x6643);
evalcond[1]=(((x6643*x6645))+x6648);
evalcond[2]=((-0.85)+((x6644*x6646))+((x6644*x6645)));
evalcond[3]=((((-1.0)*x6646))+(((-1.0)*x6645))+(((0.85)*x6644)));
evalcond[4]=((-0.2125)+(((-0.09)*x6648))+(((-1.0)*pp))+((x6646*x6647))+((x6645*x6647))+(((-0.09)*x6643*x6645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6649=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((-1.0)*x6649))+(((0.0765)*sj3))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x6649)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6651 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6651.valid){
continue;
}
IkReal x6650=x6651.value;
j1array[0]=((-1.0)*x6650);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6650)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6652=IKsin(j1);
IkReal x6653=IKcos(j1);
IkReal x6654=((0.045)*x6653);
evalcond[0]=((((0.045)*sj3*x6652))+(((0.55)*x6652))+(((-1.0)*x6654))+(((0.3)*cj3*x6652))+((cj3*x6654))+(((-0.3)*sj3*x6653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6655=(gconst116*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x6655);
evalcond[3]=x6655;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst115;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst115;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6656=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x6656)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6656)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6660=IKPowWithIntegerCheck(gconst115,-1);
if(!x6660.valid){
continue;
}
IkReal x6657=x6660.value;
CheckValue<IkReal> x6661=IKPowWithIntegerCheck(py,-1);
if(!x6661.valid){
continue;
}
IkReal x6658=x6661.value;
IkReal x6659=(x6657*x6658);
if( IKabs(((0.85)*x6659)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6659*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6659))+IKsqr(((0.0555555555555556)*x6659*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6659), ((0.0555555555555556)*x6659*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6662=IKcos(j1);
IkReal x6663=IKsin(j1);
IkReal x6664=(gconst115*py);
evalcond[0]=((-0.85)*x6662);
evalcond[1]=(x6662*x6664);
evalcond[2]=((-0.85)+((x6663*x6664)));
evalcond[3]=((((-1.0)*x6664))+(((0.85)*x6663)));
evalcond[4]=((-0.2125)+(((-0.09)*x6662*x6664))+(((-1.0)*pp))+(((1.1)*x6663*x6664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6665=IKPowWithIntegerCheck(gconst115,-1);
if(!x6665.valid){
continue;
}
CheckValue<IkReal> x6666=IKPowWithIntegerCheck(py,-1);
if(!x6666.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst115*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6665.value)*(x6666.value)*(((-361.25)+(((2200.0)*(gconst115*gconst115)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst115*py))+IKsqr(((0.0065359477124183)*(x6665.value)*(x6666.value)*(((-361.25)+(((2200.0)*(gconst115*gconst115)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst115*py), ((0.0065359477124183)*(x6665.value)*(x6666.value)*(((-361.25)+(((2200.0)*(gconst115*gconst115)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6667=IKcos(j1);
IkReal x6668=IKsin(j1);
IkReal x6669=(gconst115*py);
evalcond[0]=((-0.85)*x6667);
evalcond[1]=(x6667*x6669);
evalcond[2]=((-0.85)+((x6668*x6669)));
evalcond[3]=((((-1.0)*x6669))+(((0.85)*x6668)));
evalcond[4]=((-0.2125)+(((-0.09)*x6667*x6669))+(((1.1)*x6668*x6669))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6670=(gconst115*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6670;
evalcond[3]=((-1.0)*x6670);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst116;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst116;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6671=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x6671)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6671)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6675=IKPowWithIntegerCheck(gconst116,-1);
if(!x6675.valid){
continue;
}
IkReal x6672=x6675.value;
CheckValue<IkReal> x6676=IKPowWithIntegerCheck(px,-1);
if(!x6676.valid){
continue;
}
IkReal x6673=x6676.value;
IkReal x6674=(x6672*x6673);
if( IKabs(((0.85)*x6674)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6674*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6674))+IKsqr(((0.0555555555555556)*x6674*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6674), ((0.0555555555555556)*x6674*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6677=IKcos(j1);
IkReal x6678=IKsin(j1);
IkReal x6679=(gconst116*px);
evalcond[0]=((-0.85)*x6677);
evalcond[1]=(x6677*x6679);
evalcond[2]=((-0.85)+((x6678*x6679)));
evalcond[3]=((((0.85)*x6678))+(((-1.0)*x6679)));
evalcond[4]=((-0.2125)+(((1.1)*x6678*x6679))+(((-1.0)*pp))+(((-0.09)*x6677*x6679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6680=IKPowWithIntegerCheck(gconst116,-1);
if(!x6680.valid){
continue;
}
CheckValue<IkReal> x6681=IKPowWithIntegerCheck(px,-1);
if(!x6681.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst116*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6680.value)*(x6681.value)*(((-361.25)+(((2200.0)*(gconst116*gconst116)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst116*px))+IKsqr(((0.0065359477124183)*(x6680.value)*(x6681.value)*(((-361.25)+(((2200.0)*(gconst116*gconst116)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst116*px), ((0.0065359477124183)*(x6680.value)*(x6681.value)*(((-361.25)+(((2200.0)*(gconst116*gconst116)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6682=IKcos(j1);
IkReal x6683=IKsin(j1);
IkReal x6684=(gconst116*px);
evalcond[0]=((-0.85)*x6682);
evalcond[1]=(x6682*x6684);
evalcond[2]=((-0.85)+((x6683*x6684)));
evalcond[3]=((((0.85)*x6683))+(((-1.0)*x6684)));
evalcond[4]=((-0.2125)+(((1.1)*x6683*x6684))+(((-1.0)*pp))+(((-0.09)*x6682*x6684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6685=(gconst116*px);
IkReal x6686=((0.045)*cj3);
IkReal x6687=((0.3)*sj3);
IkReal x6688=(gconst115*py);
CheckValue<IkReal> x6689=IKPowWithIntegerCheck(((((-0.045)*x6688))+(((-0.045)*x6685))+((x6686*x6688))+(((-1.0)*x6687*x6688))+((x6685*x6686))+(((-1.0)*x6685*x6687))),-1);
if(!x6689.valid){
continue;
}
CheckValue<IkReal> x6690=IKPowWithIntegerCheck((x6688+x6685),-1);
if(!x6690.valid){
continue;
}
if( IKabs(((x6689.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6690.value)*(((-0.045)+x6686+(((-1.0)*x6687)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6689.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x6690.value)*(((-0.045)+x6686+(((-1.0)*x6687))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6689.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x6690.value)*(((-0.045)+x6686+(((-1.0)*x6687))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6691=IKsin(j1);
IkReal x6692=IKcos(j1);
IkReal x6693=((0.3)*cj3);
IkReal x6694=(gconst115*py);
IkReal x6695=((0.045)*cj3);
IkReal x6696=(gconst116*px);
IkReal x6697=((0.045)*sj3);
IkReal x6698=((0.3)*sj3);
IkReal x6699=((0.045)*x6691);
IkReal x6700=((0.09)*x6692);
IkReal x6701=(x6691*x6696);
evalcond[0]=((-0.55)+x6701+(((-1.0)*x6693))+(((-1.0)*x6697))+((x6691*x6694)));
evalcond[1]=((0.045)+x6698+((x6692*x6694))+((x6692*x6696))+(((-1.0)*x6695)));
evalcond[2]=((-0.2125)+(((-1.0)*x6696*x6700))+(((1.1)*x6701))+(((-1.0)*x6694*x6700))+(((-1.0)*pp))+(((1.1)*x6691*x6694)));
evalcond[3]=((((-0.55)*x6692))+(((-1.0)*x6699))+((x6691*x6695))+(((-1.0)*x6692*x6697))+(((-1.0)*x6692*x6693))+(((-1.0)*x6691*x6698)));
evalcond[4]=((((-1.0)*x6696))+(((-1.0)*x6694))+((x6692*x6695))+(((-0.045)*x6692))+(((0.55)*x6691))+((x6691*x6697))+((x6691*x6693))+(((-1.0)*x6692*x6698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6702=(gconst116*px);
IkReal x6703=((0.045)*sj3);
IkReal x6704=((0.3)*cj3);
IkReal x6705=(gconst115*py);
CheckValue<IkReal> x6706=IKPowWithIntegerCheck((x6702+x6705),-1);
if(!x6706.valid){
continue;
}
CheckValue<IkReal> x6707=IKPowWithIntegerCheck(((((-1.0)*x6702*x6703))+(((-1.0)*x6702*x6704))+(((-1.0)*x6703*x6705))+(((-0.55)*x6702))+(((-0.55)*x6705))+(((-1.0)*x6704*x6705))),-1);
if(!x6707.valid){
continue;
}
if( IKabs(((x6706.value)*(((0.55)+x6703+x6704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6707.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6706.value)*(((0.55)+x6703+x6704))))+IKsqr(((x6707.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6706.value)*(((0.55)+x6703+x6704))), ((x6707.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6708=IKsin(j1);
IkReal x6709=IKcos(j1);
IkReal x6710=((0.3)*cj3);
IkReal x6711=(gconst115*py);
IkReal x6712=((0.045)*cj3);
IkReal x6713=(gconst116*px);
IkReal x6714=((0.045)*sj3);
IkReal x6715=((0.3)*sj3);
IkReal x6716=((0.045)*x6708);
IkReal x6717=((0.09)*x6709);
IkReal x6718=(x6708*x6713);
evalcond[0]=((-0.55)+(((-1.0)*x6714))+(((-1.0)*x6710))+x6718+((x6708*x6711)));
evalcond[1]=((0.045)+((x6709*x6713))+((x6709*x6711))+(((-1.0)*x6712))+x6715);
evalcond[2]=((-0.2125)+(((1.1)*x6708*x6711))+(((-1.0)*x6713*x6717))+(((1.1)*x6718))+(((-1.0)*x6711*x6717))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x6716))+(((-0.55)*x6709))+(((-1.0)*x6708*x6715))+((x6708*x6712))+(((-1.0)*x6709*x6710))+(((-1.0)*x6709*x6714)));
evalcond[4]=((((0.55)*x6708))+((x6709*x6712))+(((-1.0)*x6713))+(((-1.0)*x6711))+(((-0.045)*x6709))+((x6708*x6710))+((x6708*x6714))+(((-1.0)*x6709*x6715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6719 = IKatan2WithCheck((gconst132*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst132*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x6719.valid){
continue;
}
j1array[0]=x6719.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6720=IKsin(j1);
IkReal x6721=IKcos(j1);
IkReal x6722=((0.3)*cj3);
IkReal x6723=(gconst115*py);
IkReal x6724=((0.045)*cj3);
IkReal x6725=(gconst116*px);
IkReal x6726=((0.045)*sj3);
IkReal x6727=((0.3)*sj3);
IkReal x6728=((0.045)*x6720);
IkReal x6729=((0.09)*x6721);
IkReal x6730=(x6720*x6725);
evalcond[0]=((-0.55)+(((-1.0)*x6722))+(((-1.0)*x6726))+x6730+((x6720*x6723)));
evalcond[1]=((0.045)+(((-1.0)*x6724))+x6727+((x6721*x6725))+((x6721*x6723)));
evalcond[2]=((-0.2125)+(((-1.0)*x6723*x6729))+(((1.1)*x6730))+(((-1.0)*pp))+(((1.1)*x6720*x6723))+(((-1.0)*x6725*x6729)));
evalcond[3]=((((-1.0)*x6728))+(((-1.0)*x6721*x6726))+(((-1.0)*x6721*x6722))+((x6720*x6724))+(((-1.0)*x6720*x6727))+(((-0.55)*x6721)));
evalcond[4]=((((-1.0)*x6725))+(((-1.0)*x6723))+(((0.55)*x6720))+(((-1.0)*x6721*x6727))+((x6721*x6724))+((x6720*x6726))+((x6720*x6722))+(((-0.045)*x6721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst117;
CheckValue<IkReal> x6731 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x6731.valid){
continue;
}
gconst117=((3.14159265358979)+(((-1.0)*(x6731.value))));
IkReal gconst118;
gconst118=IKsin(gconst117);
IkReal gconst119;
gconst119=IKcos(gconst117);
IkReal x6732=(gconst118*px);
IkReal x6733=(gconst119*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst117))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x6733))+x6732);
evalcond[3]=((((-1.0)*x6732))+x6733);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst133;
gconst133=IKsign((((gconst119*px))+((gconst118*py))));
dummyeval[0]=(((gconst119*px))+((gconst118*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6734=(gconst119*px);
IkReal x6735=(gconst118*py);
IkReal x6736=((1.0)*sj3);
IkReal x6737=((6.66666666666667)*cj3);
dummyeval[0]=(x6734+x6735);
dummyeval[1]=((((-1.0)*x6735*x6736))+(((-1.0)*x6735*x6737))+(((-12.2222222222222)*x6735))+(((-12.2222222222222)*x6734))+(((-1.0)*x6734*x6737))+(((-1.0)*x6734*x6736)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6738=(gconst119*px);
IkReal x6739=(gconst118*py);
IkReal x6740=((6.66666666666667)*sj3);
dummyeval[0]=((((-1.0)*x6738))+(((-1.0)*x6739))+((cj3*x6738))+((cj3*x6739))+(((-1.0)*x6738*x6740))+(((-1.0)*x6739*x6740)));
dummyeval[1]=(x6738+x6739);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x6741=(gconst119*py);
IkReal x6742=(gconst118*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x6741))+x6742);
evalcond[3]=((((-1.0)*x6742))+x6741);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst119*px))+(((-1.0)*gconst118*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6743=(gconst119*px);
IkReal x6744=(gconst118*py);
dummyeval[0]=(x6744+x6743);
dummyeval[1]=((((-2.0)*x6743*x6744))+(((-1.0)*(x6744*x6744)))+(((-1.0)*(x6743*x6743))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6745=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x6745)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6745)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6746=(gconst119*px);
IkReal x6747=(gconst118*py);
IkReal x6748=((20.0)*pp);
CheckValue<IkReal> x6749=IKPowWithIntegerCheck(((((20.0)*x6746))+(((20.0)*x6747))),-1);
if(!x6749.valid){
continue;
}
CheckValue<IkReal> x6750=IKPowWithIntegerCheck(((((-1.8)*(x6746*x6746)))+(((-3.6)*x6746*x6747))+(((-1.8)*(x6747*x6747)))),-1);
if(!x6750.valid){
continue;
}
if( IKabs(((17.0)*(x6749.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6750.value)*((((x6746*x6748))+((x6747*x6748))+(((-14.45)*x6747))+(((-14.45)*x6746)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x6749.value)))+IKsqr(((x6750.value)*((((x6746*x6748))+((x6747*x6748))+(((-14.45)*x6747))+(((-14.45)*x6746))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x6749.value)), ((x6750.value)*((((x6746*x6748))+((x6747*x6748))+(((-14.45)*x6747))+(((-14.45)*x6746))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6751=IKcos(j1);
IkReal x6752=IKsin(j1);
IkReal x6753=(gconst119*px);
IkReal x6754=(gconst118*py);
IkReal x6755=((0.09)*x6751);
IkReal x6756=((1.1)*x6752);
evalcond[0]=((-0.85)*x6751);
evalcond[1]=(((x6751*x6753))+((x6751*x6754)));
evalcond[2]=((-0.85)+((x6752*x6753))+((x6752*x6754)));
evalcond[3]=((((0.85)*x6752))+(((-1.0)*x6753))+(((-1.0)*x6754)));
evalcond[4]=((-0.2125)+((x6754*x6756))+(((-1.0)*pp))+((x6753*x6756))+(((-1.0)*x6754*x6755))+(((-1.0)*x6753*x6755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6757=(gconst119*px);
IkReal x6758=(gconst118*py);
CheckValue<IkReal> x6759=IKPowWithIntegerCheck(((((-1.53)*x6758))+(((-1.53)*x6757))),-1);
if(!x6759.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x6757))+(((1.17647058823529)*x6758)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6759.value)*(((3.6125)+(((-22.0)*(x6758*x6758)))+(((17.0)*pp))+(((-22.0)*(x6757*x6757)))+(((-44.0)*x6757*x6758)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x6757))+(((1.17647058823529)*x6758))))+IKsqr(((x6759.value)*(((3.6125)+(((-22.0)*(x6758*x6758)))+(((17.0)*pp))+(((-22.0)*(x6757*x6757)))+(((-44.0)*x6757*x6758))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x6757))+(((1.17647058823529)*x6758))), ((x6759.value)*(((3.6125)+(((-22.0)*(x6758*x6758)))+(((17.0)*pp))+(((-22.0)*(x6757*x6757)))+(((-44.0)*x6757*x6758))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6760=IKcos(j1);
IkReal x6761=IKsin(j1);
IkReal x6762=(gconst119*px);
IkReal x6763=(gconst118*py);
IkReal x6764=((0.09)*x6760);
IkReal x6765=((1.1)*x6761);
evalcond[0]=((-0.85)*x6760);
evalcond[1]=(((x6760*x6763))+((x6760*x6762)));
evalcond[2]=((-0.85)+((x6761*x6762))+((x6761*x6763)));
evalcond[3]=((((0.85)*x6761))+(((-1.0)*x6763))+(((-1.0)*x6762)));
evalcond[4]=((-0.2125)+(((-1.0)*x6762*x6764))+(((-1.0)*pp))+((x6762*x6765))+(((-1.0)*x6763*x6764))+((x6763*x6765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6766=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x6766))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x6766)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6768 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6768.valid){
continue;
}
IkReal x6767=x6768.value;
j1array[0]=((-1.0)*x6767);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6767)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6769=IKsin(j1);
IkReal x6770=IKcos(j1);
IkReal x6771=((0.045)*x6770);
evalcond[0]=((((-1.0)*x6771))+(((0.55)*x6769))+(((-0.3)*sj3*x6770))+(((0.045)*sj3*x6769))+(((0.3)*cj3*x6769))+((cj3*x6771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6772=(gconst119*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x6772);
evalcond[3]=x6772;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst118;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst118;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6773=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x6773)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6773)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6777=IKPowWithIntegerCheck(gconst118,-1);
if(!x6777.valid){
continue;
}
IkReal x6774=x6777.value;
CheckValue<IkReal> x6778=IKPowWithIntegerCheck(py,-1);
if(!x6778.valid){
continue;
}
IkReal x6775=x6778.value;
IkReal x6776=(x6774*x6775);
if( IKabs(((0.85)*x6776)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6776*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6776))+IKsqr(((0.0555555555555556)*x6776*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6776), ((0.0555555555555556)*x6776*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6779=IKcos(j1);
IkReal x6780=IKsin(j1);
IkReal x6781=(gconst118*py);
evalcond[0]=((-0.85)*x6779);
evalcond[1]=(x6779*x6781);
evalcond[2]=((-0.85)+((x6780*x6781)));
evalcond[3]=((((-1.0)*x6781))+(((0.85)*x6780)));
evalcond[4]=((-0.2125)+(((1.1)*x6780*x6781))+(((-1.0)*pp))+(((-0.09)*x6779*x6781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6782=IKPowWithIntegerCheck(gconst118,-1);
if(!x6782.valid){
continue;
}
CheckValue<IkReal> x6783=IKPowWithIntegerCheck(py,-1);
if(!x6783.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst118*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6782.value)*(x6783.value)*(((-361.25)+(((2200.0)*(gconst118*gconst118)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst118*py))+IKsqr(((0.0065359477124183)*(x6782.value)*(x6783.value)*(((-361.25)+(((2200.0)*(gconst118*gconst118)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst118*py), ((0.0065359477124183)*(x6782.value)*(x6783.value)*(((-361.25)+(((2200.0)*(gconst118*gconst118)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6784=IKcos(j1);
IkReal x6785=IKsin(j1);
IkReal x6786=(gconst118*py);
evalcond[0]=((-0.85)*x6784);
evalcond[1]=(x6784*x6786);
evalcond[2]=((-0.85)+((x6785*x6786)));
evalcond[3]=((((-1.0)*x6786))+(((0.85)*x6785)));
evalcond[4]=((-0.2125)+(((1.1)*x6785*x6786))+(((-0.09)*x6784*x6786))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6787=(gconst118*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6787;
evalcond[3]=((-1.0)*x6787);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst119;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst119;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6788=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x6788)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6788)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6792=IKPowWithIntegerCheck(gconst119,-1);
if(!x6792.valid){
continue;
}
IkReal x6789=x6792.value;
CheckValue<IkReal> x6793=IKPowWithIntegerCheck(px,-1);
if(!x6793.valid){
continue;
}
IkReal x6790=x6793.value;
IkReal x6791=(x6789*x6790);
if( IKabs(((0.85)*x6791)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6791*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6791))+IKsqr(((0.0555555555555556)*x6791*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6791), ((0.0555555555555556)*x6791*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6794=IKcos(j1);
IkReal x6795=IKsin(j1);
IkReal x6796=(gconst119*px);
evalcond[0]=((-0.85)*x6794);
evalcond[1]=(x6794*x6796);
evalcond[2]=((-0.85)+((x6795*x6796)));
evalcond[3]=((((0.85)*x6795))+(((-1.0)*x6796)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x6794*x6796))+(((1.1)*x6795*x6796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6797=IKPowWithIntegerCheck(gconst119,-1);
if(!x6797.valid){
continue;
}
CheckValue<IkReal> x6798=IKPowWithIntegerCheck(px,-1);
if(!x6798.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst119*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6797.value)*(x6798.value)*(((-361.25)+(((2200.0)*(gconst119*gconst119)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst119*px))+IKsqr(((0.0065359477124183)*(x6797.value)*(x6798.value)*(((-361.25)+(((2200.0)*(gconst119*gconst119)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst119*px), ((0.0065359477124183)*(x6797.value)*(x6798.value)*(((-361.25)+(((2200.0)*(gconst119*gconst119)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6799=IKcos(j1);
IkReal x6800=IKsin(j1);
IkReal x6801=(gconst119*px);
evalcond[0]=((-0.85)*x6799);
evalcond[1]=(x6799*x6801);
evalcond[2]=((-0.85)+((x6800*x6801)));
evalcond[3]=((((0.85)*x6800))+(((-1.0)*x6801)));
evalcond[4]=((-0.2125)+(((1.1)*x6800*x6801))+(((-1.0)*pp))+(((-0.09)*x6799*x6801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6802=(gconst119*px);
IkReal x6803=((0.3)*sj3);
IkReal x6804=((0.045)*cj3);
IkReal x6805=(gconst118*py);
CheckValue<IkReal> x6806=IKPowWithIntegerCheck(((((-1.0)*x6803*x6805))+(((-1.0)*x6802*x6803))+((x6804*x6805))+(((-0.045)*x6805))+(((-0.045)*x6802))+((x6802*x6804))),-1);
if(!x6806.valid){
continue;
}
CheckValue<IkReal> x6807=IKPowWithIntegerCheck((x6805+x6802),-1);
if(!x6807.valid){
continue;
}
if( IKabs(((x6806.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6807.value)*(((-0.045)+x6804+(((-1.0)*x6803)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6806.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x6807.value)*(((-0.045)+x6804+(((-1.0)*x6803))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6806.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x6807.value)*(((-0.045)+x6804+(((-1.0)*x6803))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6808=IKsin(j1);
IkReal x6809=IKcos(j1);
IkReal x6810=((0.3)*cj3);
IkReal x6811=((0.045)*cj3);
IkReal x6812=(gconst119*px);
IkReal x6813=((0.045)*sj3);
IkReal x6814=(gconst118*py);
IkReal x6815=((0.3)*sj3);
IkReal x6816=((0.045)*x6808);
IkReal x6817=((0.09)*x6809);
IkReal x6818=((1.1)*x6808);
evalcond[0]=((-0.55)+(((-1.0)*x6813))+(((-1.0)*x6810))+((x6808*x6812))+((x6808*x6814)));
evalcond[1]=((0.045)+(((-1.0)*x6811))+((x6809*x6812))+((x6809*x6814))+x6815);
evalcond[2]=((-0.2125)+((x6814*x6818))+((x6812*x6818))+(((-1.0)*pp))+(((-1.0)*x6812*x6817))+(((-1.0)*x6814*x6817)));
evalcond[3]=((((-1.0)*x6808*x6815))+(((-1.0)*x6809*x6813))+(((-1.0)*x6809*x6810))+(((-1.0)*x6816))+(((-0.55)*x6809))+((x6808*x6811)));
evalcond[4]=((((-1.0)*x6812))+(((-1.0)*x6814))+(((-1.0)*x6809*x6815))+(((0.55)*x6808))+((x6809*x6811))+((x6808*x6810))+((x6808*x6813))+(((-0.045)*x6809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6819=(gconst119*px);
IkReal x6820=((0.045)*sj3);
IkReal x6821=(gconst118*py);
IkReal x6822=((0.3)*cj3);
CheckValue<IkReal> x6823=IKPowWithIntegerCheck((x6819+x6821),-1);
if(!x6823.valid){
continue;
}
CheckValue<IkReal> x6824=IKPowWithIntegerCheck(((((-0.55)*x6819))+(((-0.55)*x6821))+(((-1.0)*x6820*x6821))+(((-1.0)*x6821*x6822))+(((-1.0)*x6819*x6822))+(((-1.0)*x6819*x6820))),-1);
if(!x6824.valid){
continue;
}
if( IKabs(((x6823.value)*(((0.55)+x6820+x6822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6824.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6823.value)*(((0.55)+x6820+x6822))))+IKsqr(((x6824.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6823.value)*(((0.55)+x6820+x6822))), ((x6824.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6825=IKsin(j1);
IkReal x6826=IKcos(j1);
IkReal x6827=((0.3)*cj3);
IkReal x6828=((0.045)*cj3);
IkReal x6829=(gconst119*px);
IkReal x6830=((0.045)*sj3);
IkReal x6831=(gconst118*py);
IkReal x6832=((0.3)*sj3);
IkReal x6833=((0.045)*x6825);
IkReal x6834=((0.09)*x6826);
IkReal x6835=((1.1)*x6825);
evalcond[0]=((-0.55)+(((-1.0)*x6827))+((x6825*x6829))+((x6825*x6831))+(((-1.0)*x6830)));
evalcond[1]=((0.045)+(((-1.0)*x6828))+((x6826*x6831))+((x6826*x6829))+x6832);
evalcond[2]=((-0.2125)+((x6831*x6835))+(((-1.0)*pp))+((x6829*x6835))+(((-1.0)*x6829*x6834))+(((-1.0)*x6831*x6834)));
evalcond[3]=((((-1.0)*x6825*x6832))+(((-1.0)*x6826*x6830))+(((-0.55)*x6826))+((x6825*x6828))+(((-1.0)*x6826*x6827))+(((-1.0)*x6833)));
evalcond[4]=((((-0.045)*x6826))+(((-1.0)*x6826*x6832))+(((0.55)*x6825))+((x6825*x6827))+(((-1.0)*x6829))+((x6826*x6828))+((x6825*x6830))+(((-1.0)*x6831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6836 = IKatan2WithCheck((gconst133*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst133*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x6836.valid){
continue;
}
j1array[0]=x6836.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6837=IKsin(j1);
IkReal x6838=IKcos(j1);
IkReal x6839=((0.3)*cj3);
IkReal x6840=((0.045)*cj3);
IkReal x6841=(gconst119*px);
IkReal x6842=((0.045)*sj3);
IkReal x6843=(gconst118*py);
IkReal x6844=((0.3)*sj3);
IkReal x6845=((0.045)*x6837);
IkReal x6846=((0.09)*x6838);
IkReal x6847=((1.1)*x6837);
evalcond[0]=((-0.55)+(((-1.0)*x6842))+((x6837*x6843))+((x6837*x6841))+(((-1.0)*x6839)));
evalcond[1]=((0.045)+((x6838*x6843))+((x6838*x6841))+(((-1.0)*x6840))+x6844);
evalcond[2]=((-0.2125)+(((-1.0)*x6843*x6846))+(((-1.0)*x6841*x6846))+(((-1.0)*pp))+((x6841*x6847))+((x6843*x6847)));
evalcond[3]=((((-1.0)*x6838*x6839))+(((-1.0)*x6845))+(((-0.55)*x6838))+(((-1.0)*x6837*x6844))+((x6837*x6840))+(((-1.0)*x6838*x6842)));
evalcond[4]=(((x6838*x6840))+(((0.55)*x6837))+(((-1.0)*x6843))+(((-1.0)*x6841))+((x6837*x6839))+((x6837*x6842))+(((-0.045)*x6838))+(((-1.0)*x6838*x6844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst120;
CheckValue<IkReal> x6848 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x6848.valid){
continue;
}
gconst120=((-1.0)*(x6848.value));
IkReal gconst121;
gconst121=IKsin(gconst120);
IkReal gconst122;
gconst122=IKcos(gconst120);
IkReal x6849=(gconst122*py);
IkReal x6850=(gconst121*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst120))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x6850+(((-1.0)*x6849)));
evalcond[3]=((((-1.0)*x6850))+x6849);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst134;
gconst134=IKsign((((gconst121*py))+((gconst122*px))));
dummyeval[0]=(((gconst121*py))+((gconst122*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6851=(gconst122*px);
IkReal x6852=((6.66666666666667)*cj3);
IkReal x6853=(gconst121*py);
IkReal x6854=((1.0)*sj3);
dummyeval[0]=(x6851+x6853);
dummyeval[1]=((((-12.2222222222222)*x6853))+(((-12.2222222222222)*x6851))+(((-1.0)*x6852*x6853))+(((-1.0)*x6851*x6854))+(((-1.0)*x6851*x6852))+(((-1.0)*x6853*x6854)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6855=(gconst121*py);
IkReal x6856=(gconst122*px);
IkReal x6857=((6.66666666666667)*sj3);
dummyeval[0]=((((-1.0)*x6856*x6857))+(((-1.0)*x6855))+(((-1.0)*x6856))+(((-1.0)*x6855*x6857))+((cj3*x6855))+((cj3*x6856)));
dummyeval[1]=(x6855+x6856);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x6858=(gconst121*px);
IkReal x6859=(gconst122*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x6859))+x6858);
evalcond[3]=((((-1.0)*x6858))+x6859);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst122*px))+(((-1.0)*gconst121*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6860=(gconst122*px);
IkReal x6861=(gconst121*py);
dummyeval[0]=(x6860+x6861);
dummyeval[1]=((((-2.0)*x6860*x6861))+(((-1.0)*(x6860*x6860)))+(((-1.0)*(x6861*x6861))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6862=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x6862)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6862)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6863=(gconst121*py);
IkReal x6864=(gconst122*px);
IkReal x6865=((20.0)*pp);
CheckValue<IkReal> x6866=IKPowWithIntegerCheck(((((20.0)*x6864))+(((20.0)*x6863))),-1);
if(!x6866.valid){
continue;
}
CheckValue<IkReal> x6867=IKPowWithIntegerCheck(((((-3.6)*x6863*x6864))+(((-1.8)*(x6863*x6863)))+(((-1.8)*(x6864*x6864)))),-1);
if(!x6867.valid){
continue;
}
if( IKabs(((17.0)*(x6866.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6867.value)*(((((-14.45)*x6864))+(((-14.45)*x6863))+((x6864*x6865))+((x6863*x6865)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x6866.value)))+IKsqr(((x6867.value)*(((((-14.45)*x6864))+(((-14.45)*x6863))+((x6864*x6865))+((x6863*x6865))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x6866.value)), ((x6867.value)*(((((-14.45)*x6864))+(((-14.45)*x6863))+((x6864*x6865))+((x6863*x6865))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6868=IKcos(j1);
IkReal x6869=IKsin(j1);
IkReal x6870=(gconst121*py);
IkReal x6871=(gconst122*px);
IkReal x6872=((1.1)*x6869);
IkReal x6873=(x6868*x6871);
evalcond[0]=((-0.85)*x6868);
evalcond[1]=(x6873+((x6868*x6870)));
evalcond[2]=((-0.85)+((x6869*x6871))+((x6869*x6870)));
evalcond[3]=((((-1.0)*x6870))+(((-1.0)*x6871))+(((0.85)*x6869)));
evalcond[4]=((-0.2125)+((x6870*x6872))+(((-0.09)*x6873))+(((-1.0)*pp))+((x6871*x6872))+(((-0.09)*x6868*x6870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6874=(gconst121*py);
IkReal x6875=(gconst122*px);
CheckValue<IkReal> x6876=IKPowWithIntegerCheck(((((-1.53)*x6875))+(((-1.53)*x6874))),-1);
if(!x6876.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x6874))+(((1.17647058823529)*x6875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6876.value)*(((3.6125)+(((-22.0)*(x6875*x6875)))+(((-44.0)*x6874*x6875))+(((17.0)*pp))+(((-22.0)*(x6874*x6874))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x6874))+(((1.17647058823529)*x6875))))+IKsqr(((x6876.value)*(((3.6125)+(((-22.0)*(x6875*x6875)))+(((-44.0)*x6874*x6875))+(((17.0)*pp))+(((-22.0)*(x6874*x6874)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x6874))+(((1.17647058823529)*x6875))), ((x6876.value)*(((3.6125)+(((-22.0)*(x6875*x6875)))+(((-44.0)*x6874*x6875))+(((17.0)*pp))+(((-22.0)*(x6874*x6874)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6877=IKcos(j1);
IkReal x6878=IKsin(j1);
IkReal x6879=(gconst121*py);
IkReal x6880=(gconst122*px);
IkReal x6881=((1.1)*x6878);
IkReal x6882=(x6877*x6880);
evalcond[0]=((-0.85)*x6877);
evalcond[1]=(x6882+((x6877*x6879)));
evalcond[2]=((-0.85)+((x6878*x6879))+((x6878*x6880)));
evalcond[3]=((((-1.0)*x6879))+(((0.85)*x6878))+(((-1.0)*x6880)));
evalcond[4]=((-0.2125)+((x6880*x6881))+((x6879*x6881))+(((-0.09)*x6877*x6879))+(((-1.0)*pp))+(((-0.09)*x6882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6883=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x6883))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x6883)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x6885 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x6885.valid){
continue;
}
IkReal x6884=x6885.value;
j1array[0]=((-1.0)*x6884);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x6884)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x6886=IKsin(j1);
IkReal x6887=IKcos(j1);
IkReal x6888=((0.045)*x6887);
evalcond[0]=(((cj3*x6888))+(((0.045)*sj3*x6886))+(((-0.3)*sj3*x6887))+(((0.3)*cj3*x6886))+(((-1.0)*x6888))+(((0.55)*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6889=(gconst122*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x6889);
evalcond[3]=x6889;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst121;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst121;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6890=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x6890)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6890)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6894=IKPowWithIntegerCheck(gconst121,-1);
if(!x6894.valid){
continue;
}
IkReal x6891=x6894.value;
CheckValue<IkReal> x6895=IKPowWithIntegerCheck(py,-1);
if(!x6895.valid){
continue;
}
IkReal x6892=x6895.value;
IkReal x6893=(x6891*x6892);
if( IKabs(((0.85)*x6893)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6893*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6893))+IKsqr(((0.0555555555555556)*x6893*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6893), ((0.0555555555555556)*x6893*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6896=IKcos(j1);
IkReal x6897=IKsin(j1);
IkReal x6898=(gconst121*py);
evalcond[0]=((-0.85)*x6896);
evalcond[1]=(x6896*x6898);
evalcond[2]=((-0.85)+((x6897*x6898)));
evalcond[3]=((((-1.0)*x6898))+(((0.85)*x6897)));
evalcond[4]=((-0.2125)+(((-0.09)*x6896*x6898))+(((-1.0)*pp))+(((1.1)*x6897*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6899=IKPowWithIntegerCheck(gconst121,-1);
if(!x6899.valid){
continue;
}
CheckValue<IkReal> x6900=IKPowWithIntegerCheck(py,-1);
if(!x6900.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst121*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6899.value)*(x6900.value)*(((-361.25)+(((2200.0)*(gconst121*gconst121)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst121*py))+IKsqr(((0.0065359477124183)*(x6899.value)*(x6900.value)*(((-361.25)+(((2200.0)*(gconst121*gconst121)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst121*py), ((0.0065359477124183)*(x6899.value)*(x6900.value)*(((-361.25)+(((2200.0)*(gconst121*gconst121)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6901=IKcos(j1);
IkReal x6902=IKsin(j1);
IkReal x6903=(gconst121*py);
evalcond[0]=((-0.85)*x6901);
evalcond[1]=(x6901*x6903);
evalcond[2]=((-0.85)+((x6902*x6903)));
evalcond[3]=((((-1.0)*x6903))+(((0.85)*x6902)));
evalcond[4]=((-0.2125)+(((-0.09)*x6901*x6903))+(((1.1)*x6902*x6903))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6904=(gconst121*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x6904;
evalcond[3]=((-1.0)*x6904);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst122;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst122;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6905=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x6905)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6905)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6909=IKPowWithIntegerCheck(gconst122,-1);
if(!x6909.valid){
continue;
}
IkReal x6906=x6909.value;
CheckValue<IkReal> x6910=IKPowWithIntegerCheck(px,-1);
if(!x6910.valid){
continue;
}
IkReal x6907=x6910.value;
IkReal x6908=(x6906*x6907);
if( IKabs(((0.85)*x6908)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x6908*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x6908))+IKsqr(((0.0555555555555556)*x6908*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x6908), ((0.0555555555555556)*x6908*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6911=IKcos(j1);
IkReal x6912=IKsin(j1);
IkReal x6913=(gconst122*px);
IkReal x6914=(x6911*x6913);
evalcond[0]=((-0.85)*x6911);
evalcond[1]=x6914;
evalcond[2]=((-0.85)+((x6912*x6913)));
evalcond[3]=((((-1.0)*x6913))+(((0.85)*x6912)));
evalcond[4]=((-0.2125)+(((1.1)*x6912*x6913))+(((-0.09)*x6914))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6915=IKPowWithIntegerCheck(gconst122,-1);
if(!x6915.valid){
continue;
}
CheckValue<IkReal> x6916=IKPowWithIntegerCheck(px,-1);
if(!x6916.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst122*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x6915.value)*(x6916.value)*(((-361.25)+(((2200.0)*(gconst122*gconst122)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst122*px))+IKsqr(((0.0065359477124183)*(x6915.value)*(x6916.value)*(((-361.25)+(((2200.0)*(gconst122*gconst122)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst122*px), ((0.0065359477124183)*(x6915.value)*(x6916.value)*(((-361.25)+(((2200.0)*(gconst122*gconst122)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6917=IKcos(j1);
IkReal x6918=IKsin(j1);
IkReal x6919=(gconst122*px);
IkReal x6920=(x6917*x6919);
evalcond[0]=((-0.85)*x6917);
evalcond[1]=x6920;
evalcond[2]=((-0.85)+((x6918*x6919)));
evalcond[3]=((((-1.0)*x6919))+(((0.85)*x6918)));
evalcond[4]=((-0.2125)+(((1.1)*x6918*x6919))+(((-1.0)*pp))+(((-0.09)*x6920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6921=((0.045)*cj3);
IkReal x6922=((0.3)*sj3);
IkReal x6923=(gconst121*py);
IkReal x6924=(gconst122*px);
IkReal x6925=((0.045)*x6924);
CheckValue<IkReal> x6926=IKPowWithIntegerCheck((((x6921*x6923))+((x6921*x6924))+(((-0.045)*x6923))+(((-1.0)*x6925))+(((-1.0)*x6922*x6923))+(((-1.0)*x6922*x6924))),-1);
if(!x6926.valid){
continue;
}
CheckValue<IkReal> x6927=IKPowWithIntegerCheck((x6924+x6923),-1);
if(!x6927.valid){
continue;
}
if( IKabs(((x6926.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6927.value)*(((-0.045)+x6921+(((-1.0)*x6922)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6926.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x6927.value)*(((-0.045)+x6921+(((-1.0)*x6922))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6926.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x6927.value)*(((-0.045)+x6921+(((-1.0)*x6922))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6928=IKsin(j1);
IkReal x6929=IKcos(j1);
IkReal x6930=((0.3)*cj3);
IkReal x6931=(gconst121*py);
IkReal x6932=((0.045)*cj3);
IkReal x6933=((0.045)*sj3);
IkReal x6934=(gconst122*px);
IkReal x6935=((0.3)*sj3);
IkReal x6936=((0.045)*x6928);
IkReal x6937=((1.1)*x6928);
IkReal x6938=((0.09)*x6929);
evalcond[0]=((-0.55)+((x6928*x6934))+((x6928*x6931))+(((-1.0)*x6933))+(((-1.0)*x6930)));
evalcond[1]=((0.045)+x6935+((x6929*x6931))+((x6929*x6934))+(((-1.0)*x6932)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x6934*x6938))+(((-1.0)*x6931*x6938))+((x6931*x6937))+((x6934*x6937)));
evalcond[3]=((((-0.55)*x6929))+((x6928*x6932))+(((-1.0)*x6928*x6935))+(((-1.0)*x6936))+(((-1.0)*x6929*x6930))+(((-1.0)*x6929*x6933)));
evalcond[4]=((((-1.0)*x6934))+(((-1.0)*x6931))+(((0.55)*x6928))+(((-0.045)*x6929))+((x6928*x6933))+((x6928*x6930))+((x6929*x6932))+(((-1.0)*x6929*x6935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6939=(gconst122*px);
IkReal x6940=((0.3)*cj3);
IkReal x6941=(gconst121*py);
IkReal x6942=((0.045)*sj3);
CheckValue<IkReal> x6943=IKPowWithIntegerCheck((x6939+x6941),-1);
if(!x6943.valid){
continue;
}
CheckValue<IkReal> x6944=IKPowWithIntegerCheck(((((-0.55)*x6939))+(((-0.55)*x6941))+(((-1.0)*x6941*x6942))+(((-1.0)*x6940*x6941))+(((-1.0)*x6939*x6940))+(((-1.0)*x6939*x6942))),-1);
if(!x6944.valid){
continue;
}
if( IKabs(((x6943.value)*(((0.55)+x6942+x6940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6944.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6943.value)*(((0.55)+x6942+x6940))))+IKsqr(((x6944.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6943.value)*(((0.55)+x6942+x6940))), ((x6944.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6945=IKsin(j1);
IkReal x6946=IKcos(j1);
IkReal x6947=((0.3)*cj3);
IkReal x6948=(gconst121*py);
IkReal x6949=((0.045)*cj3);
IkReal x6950=((0.045)*sj3);
IkReal x6951=(gconst122*px);
IkReal x6952=((0.3)*sj3);
IkReal x6953=((0.045)*x6945);
IkReal x6954=((1.1)*x6945);
IkReal x6955=((0.09)*x6946);
evalcond[0]=((-0.55)+(((-1.0)*x6950))+(((-1.0)*x6947))+((x6945*x6948))+((x6945*x6951)));
evalcond[1]=((0.045)+(((-1.0)*x6949))+((x6946*x6951))+((x6946*x6948))+x6952);
evalcond[2]=((-0.2125)+(((-1.0)*x6951*x6955))+(((-1.0)*x6948*x6955))+((x6951*x6954))+(((-1.0)*pp))+((x6948*x6954)));
evalcond[3]=((((-0.55)*x6946))+(((-1.0)*x6953))+(((-1.0)*x6945*x6952))+(((-1.0)*x6946*x6950))+(((-1.0)*x6946*x6947))+((x6945*x6949)));
evalcond[4]=((((-1.0)*x6951))+(((-1.0)*x6948))+(((-0.045)*x6946))+((x6946*x6949))+(((-1.0)*x6946*x6952))+(((0.55)*x6945))+((x6945*x6947))+((x6945*x6950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6956 = IKatan2WithCheck((gconst134*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst134*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x6956.valid){
continue;
}
j1array[0]=x6956.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6957=IKsin(j1);
IkReal x6958=IKcos(j1);
IkReal x6959=((0.3)*cj3);
IkReal x6960=(gconst121*py);
IkReal x6961=((0.045)*cj3);
IkReal x6962=((0.045)*sj3);
IkReal x6963=(gconst122*px);
IkReal x6964=((0.3)*sj3);
IkReal x6965=((0.045)*x6957);
IkReal x6966=((1.1)*x6957);
IkReal x6967=((0.09)*x6958);
evalcond[0]=((-0.55)+(((-1.0)*x6959))+(((-1.0)*x6962))+((x6957*x6960))+((x6957*x6963)));
evalcond[1]=((0.045)+(((-1.0)*x6961))+((x6958*x6960))+((x6958*x6963))+x6964);
evalcond[2]=((-0.2125)+((x6963*x6966))+(((-1.0)*pp))+((x6960*x6966))+(((-1.0)*x6963*x6967))+(((-1.0)*x6960*x6967)));
evalcond[3]=((((-1.0)*x6958*x6962))+(((-0.55)*x6958))+(((-1.0)*x6965))+(((-1.0)*x6957*x6964))+(((-1.0)*x6958*x6959))+((x6957*x6961)));
evalcond[4]=((((-1.0)*x6960))+(((-1.0)*x6963))+(((-1.0)*x6958*x6964))+(((-0.045)*x6958))+((x6957*x6959))+((x6958*x6961))+(((0.55)*x6957))+((x6957*x6962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst123;
CheckValue<IkReal> x6968 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x6968.valid){
continue;
}
gconst123=((3.14159265358979)+(((-1.0)*(x6968.value))));
IkReal gconst124;
gconst124=IKsin(gconst123);
IkReal gconst125;
gconst125=IKcos(gconst123);
IkReal x6969=(gconst124*px);
IkReal x6970=(gconst125*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst123))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x6970))+x6969);
evalcond[3]=((((-1.0)*x6969))+x6970);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst135;
gconst135=IKsign((((gconst124*py))+((gconst125*px))));
dummyeval[0]=(((gconst124*py))+((gconst125*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6971=(gconst124*py);
IkReal x6972=((1.0)*sj3);
IkReal x6973=(gconst125*px);
IkReal x6974=((6.66666666666667)*cj3);
dummyeval[0]=(x6973+x6971);
dummyeval[1]=((((-12.2222222222222)*x6971))+(((-12.2222222222222)*x6973))+(((-1.0)*x6971*x6974))+(((-1.0)*x6971*x6972))+(((-1.0)*x6973*x6974))+(((-1.0)*x6972*x6973)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6975=((6.66666666666667)*sj3);
IkReal x6976=(gconst124*py);
IkReal x6977=(gconst125*px);
dummyeval[0]=((((-1.0)*x6976))+(((-1.0)*x6977))+(((-1.0)*x6975*x6976))+(((-1.0)*x6975*x6977))+((cj3*x6977))+((cj3*x6976)));
dummyeval[1]=(x6976+x6977);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x6978=(gconst124*px);
IkReal x6979=(gconst125*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x6979))+x6978);
evalcond[3]=((((-1.0)*x6978))+x6979);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst125*px))+(((-1.0)*gconst124*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x6980=(gconst124*py);
IkReal x6981=(gconst125*px);
dummyeval[0]=(x6981+x6980);
dummyeval[1]=((((-1.0)*(x6981*x6981)))+(((-2.0)*x6980*x6981))+(((-1.0)*(x6980*x6980))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x6982=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x6982)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x6982)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6983=(gconst125*px);
IkReal x6984=(gconst124*py);
IkReal x6985=((20.0)*pp);
CheckValue<IkReal> x6986=IKPowWithIntegerCheck(((((20.0)*x6983))+(((20.0)*x6984))),-1);
if(!x6986.valid){
continue;
}
CheckValue<IkReal> x6987=IKPowWithIntegerCheck(((((-1.8)*(x6983*x6983)))+(((-1.8)*(x6984*x6984)))+(((-3.6)*x6983*x6984))),-1);
if(!x6987.valid){
continue;
}
if( IKabs(((17.0)*(x6986.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6987.value)*((((x6983*x6985))+(((-14.45)*x6984))+(((-14.45)*x6983))+((x6984*x6985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x6986.value)))+IKsqr(((x6987.value)*((((x6983*x6985))+(((-14.45)*x6984))+(((-14.45)*x6983))+((x6984*x6985))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x6986.value)), ((x6987.value)*((((x6983*x6985))+(((-14.45)*x6984))+(((-14.45)*x6983))+((x6984*x6985))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6988=IKcos(j1);
IkReal x6989=IKsin(j1);
IkReal x6990=(gconst125*px);
IkReal x6991=(gconst124*py*x6989);
IkReal x6992=(gconst124*py*x6988);
evalcond[0]=((-0.85)*x6988);
evalcond[1]=(x6992+((x6988*x6990)));
evalcond[2]=((-0.85)+x6991+((x6989*x6990)));
evalcond[3]=((((-1.0)*x6990))+(((0.85)*x6989))+(((-1.0)*gconst124*py)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x6991))+(((1.1)*x6989*x6990))+(((-0.09)*x6992))+(((-0.09)*x6988*x6990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6993=(gconst125*px);
IkReal x6994=(gconst124*py);
CheckValue<IkReal> x6995=IKPowWithIntegerCheck(((((-1.53)*x6994))+(((-1.53)*x6993))),-1);
if(!x6995.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x6994))+(((1.17647058823529)*x6993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6995.value)*(((3.6125)+(((-22.0)*(x6994*x6994)))+(((17.0)*pp))+(((-22.0)*(x6993*x6993)))+(((-44.0)*x6993*x6994)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x6994))+(((1.17647058823529)*x6993))))+IKsqr(((x6995.value)*(((3.6125)+(((-22.0)*(x6994*x6994)))+(((17.0)*pp))+(((-22.0)*(x6993*x6993)))+(((-44.0)*x6993*x6994))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x6994))+(((1.17647058823529)*x6993))), ((x6995.value)*(((3.6125)+(((-22.0)*(x6994*x6994)))+(((17.0)*pp))+(((-22.0)*(x6993*x6993)))+(((-44.0)*x6993*x6994))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x6996=IKcos(j1);
IkReal x6997=IKsin(j1);
IkReal x6998=(gconst125*px);
IkReal x6999=(gconst124*py*x6997);
IkReal x7000=(gconst124*py*x6996);
evalcond[0]=((-0.85)*x6996);
evalcond[1]=(x7000+((x6996*x6998)));
evalcond[2]=((-0.85)+((x6997*x6998))+x6999);
evalcond[3]=((((-1.0)*x6998))+(((0.85)*x6997))+(((-1.0)*gconst124*py)));
evalcond[4]=((-0.2125)+(((1.1)*x6997*x6998))+(((-1.0)*pp))+(((1.1)*x6999))+(((-0.09)*x6996*x6998))+(((-0.09)*x7000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7001=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x7001))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x7001)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x7003 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x7003.valid){
continue;
}
IkReal x7002=x7003.value;
j1array[0]=((-1.0)*x7002);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x7002)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x7004=IKsin(j1);
IkReal x7005=IKcos(j1);
IkReal x7006=((0.045)*x7005);
evalcond[0]=((((0.045)*sj3*x7004))+((cj3*x7006))+(((0.55)*x7004))+(((0.3)*cj3*x7004))+(((-1.0)*x7006))+(((-0.3)*sj3*x7005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7007=(gconst125*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x7007);
evalcond[3]=x7007;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst124;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst124;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x7008=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x7008)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7008)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7012=IKPowWithIntegerCheck(gconst124,-1);
if(!x7012.valid){
continue;
}
IkReal x7009=x7012.value;
CheckValue<IkReal> x7013=IKPowWithIntegerCheck(py,-1);
if(!x7013.valid){
continue;
}
IkReal x7010=x7013.value;
IkReal x7011=(x7009*x7010);
if( IKabs(((0.85)*x7011)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x7011*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x7011))+IKsqr(((0.0555555555555556)*x7011*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x7011), ((0.0555555555555556)*x7011*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7014=IKcos(j1);
IkReal x7015=IKsin(j1);
IkReal x7016=(gconst124*py*x7015);
IkReal x7017=(gconst124*py*x7014);
evalcond[0]=((-0.85)*x7014);
evalcond[1]=x7017;
evalcond[2]=((-0.85)+x7016);
evalcond[3]=((((0.85)*x7015))+(((-1.0)*gconst124*py)));
evalcond[4]=((-0.2125)+(((-0.09)*x7017))+(((-1.0)*pp))+(((1.1)*x7016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7018=IKPowWithIntegerCheck(gconst124,-1);
if(!x7018.valid){
continue;
}
CheckValue<IkReal> x7019=IKPowWithIntegerCheck(py,-1);
if(!x7019.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst124*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x7018.value)*(x7019.value)*(((-361.25)+(((-1700.0)*pp))+(((2200.0)*(gconst124*gconst124)*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst124*py))+IKsqr(((0.0065359477124183)*(x7018.value)*(x7019.value)*(((-361.25)+(((-1700.0)*pp))+(((2200.0)*(gconst124*gconst124)*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst124*py), ((0.0065359477124183)*(x7018.value)*(x7019.value)*(((-361.25)+(((-1700.0)*pp))+(((2200.0)*(gconst124*gconst124)*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7020=IKcos(j1);
IkReal x7021=IKsin(j1);
IkReal x7022=(gconst124*py*x7021);
IkReal x7023=(gconst124*py*x7020);
evalcond[0]=((-0.85)*x7020);
evalcond[1]=x7023;
evalcond[2]=((-0.85)+x7022);
evalcond[3]=((((-1.0)*gconst124*py))+(((0.85)*x7021)));
evalcond[4]=((-0.2125)+(((1.1)*x7022))+(((-1.0)*pp))+(((-0.09)*x7023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7024=(gconst124*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x7024;
evalcond[3]=((-1.0)*x7024);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst125;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst125;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x7025=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x7025)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7025)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7029=IKPowWithIntegerCheck(gconst125,-1);
if(!x7029.valid){
continue;
}
IkReal x7026=x7029.value;
CheckValue<IkReal> x7030=IKPowWithIntegerCheck(px,-1);
if(!x7030.valid){
continue;
}
IkReal x7027=x7030.value;
IkReal x7028=(x7026*x7027);
if( IKabs(((0.85)*x7028)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x7028*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x7028))+IKsqr(((0.0555555555555556)*x7028*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x7028), ((0.0555555555555556)*x7028*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7031=IKcos(j1);
IkReal x7032=IKsin(j1);
IkReal x7033=(gconst125*px);
IkReal x7034=(x7032*x7033);
evalcond[0]=((-0.85)*x7031);
evalcond[1]=(x7031*x7033);
evalcond[2]=((-0.85)+x7034);
evalcond[3]=((((0.85)*x7032))+(((-1.0)*x7033)));
evalcond[4]=((-0.2125)+(((1.1)*x7034))+(((-1.0)*pp))+(((-0.09)*x7031*x7033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7035=IKPowWithIntegerCheck(gconst125,-1);
if(!x7035.valid){
continue;
}
CheckValue<IkReal> x7036=IKPowWithIntegerCheck(px,-1);
if(!x7036.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst125*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x7035.value)*(x7036.value)*(((-361.25)+(((2200.0)*(gconst125*gconst125)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst125*px))+IKsqr(((0.0065359477124183)*(x7035.value)*(x7036.value)*(((-361.25)+(((2200.0)*(gconst125*gconst125)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst125*px), ((0.0065359477124183)*(x7035.value)*(x7036.value)*(((-361.25)+(((2200.0)*(gconst125*gconst125)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7037=IKcos(j1);
IkReal x7038=IKsin(j1);
IkReal x7039=(gconst125*px);
IkReal x7040=(x7038*x7039);
evalcond[0]=((-0.85)*x7037);
evalcond[1]=(x7037*x7039);
evalcond[2]=((-0.85)+x7040);
evalcond[3]=((((0.85)*x7038))+(((-1.0)*x7039)));
evalcond[4]=((-0.2125)+(((1.1)*x7040))+(((-0.09)*x7037*x7039))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7041=((0.3)*sj3);
IkReal x7042=((0.045)*cj3);
IkReal x7043=(gconst124*py);
IkReal x7044=(gconst125*px);
IkReal x7045=((0.045)*x7044);
CheckValue<IkReal> x7046=IKPowWithIntegerCheck(((((-1.0)*x7045))+(((-0.045)*x7043))+(((-1.0)*x7041*x7044))+(((-1.0)*x7041*x7043))+((x7042*x7043))+((x7042*x7044))),-1);
if(!x7046.valid){
continue;
}
CheckValue<IkReal> x7047=IKPowWithIntegerCheck((x7044+x7043),-1);
if(!x7047.valid){
continue;
}
if( IKabs(((x7046.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7047.value)*(((-0.045)+(((-1.0)*x7041))+x7042)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7046.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x7047.value)*(((-0.045)+(((-1.0)*x7041))+x7042))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7046.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x7047.value)*(((-0.045)+(((-1.0)*x7041))+x7042))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7048=IKsin(j1);
IkReal x7049=IKcos(j1);
IkReal x7050=(gconst125*px);
IkReal x7051=((0.3)*sj3);
IkReal x7052=((0.045)*cj3);
IkReal x7053=(gconst124*py);
IkReal x7054=((0.045)*sj3);
IkReal x7055=((0.3)*cj3);
IkReal x7056=((1.1)*x7048);
IkReal x7057=(cj3*x7048);
IkReal x7058=((0.09)*x7049);
evalcond[0]=((-0.55)+(((-1.0)*x7055))+(((-1.0)*x7054))+((x7048*x7050))+((x7048*x7053)));
evalcond[1]=((0.045)+x7051+(((-1.0)*x7052))+((x7049*x7053))+((x7049*x7050)));
evalcond[2]=((-0.2125)+((x7050*x7056))+(((-1.0)*pp))+(((-1.0)*x7053*x7058))+((x7053*x7056))+(((-1.0)*x7050*x7058)));
evalcond[3]=((((-1.0)*x7048*x7051))+(((-1.0)*x7049*x7054))+(((-1.0)*x7049*x7055))+(((-0.045)*x7048))+((x7048*x7052))+(((-0.55)*x7049)));
evalcond[4]=((((-1.0)*x7049*x7051))+(((-1.0)*x7050))+(((-1.0)*x7053))+(((0.55)*x7048))+(((-0.045)*x7049))+((x7048*x7055))+((x7048*x7054))+((x7049*x7052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7059=(gconst125*px);
IkReal x7060=((0.3)*cj3);
IkReal x7061=((0.045)*sj3);
IkReal x7062=(gconst124*py);
CheckValue<IkReal> x7063=IKPowWithIntegerCheck((x7059+x7062),-1);
if(!x7063.valid){
continue;
}
CheckValue<IkReal> x7064=IKPowWithIntegerCheck(((((-1.0)*x7059*x7060))+(((-1.0)*x7059*x7061))+(((-0.55)*x7059))+(((-0.55)*x7062))+(((-1.0)*x7060*x7062))+(((-1.0)*x7061*x7062))),-1);
if(!x7064.valid){
continue;
}
if( IKabs(((x7063.value)*(((0.55)+x7061+x7060)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7064.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7063.value)*(((0.55)+x7061+x7060))))+IKsqr(((x7064.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7063.value)*(((0.55)+x7061+x7060))), ((x7064.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7065=IKsin(j1);
IkReal x7066=IKcos(j1);
IkReal x7067=(gconst125*px);
IkReal x7068=((0.3)*sj3);
IkReal x7069=((0.045)*cj3);
IkReal x7070=(gconst124*py);
IkReal x7071=((0.045)*sj3);
IkReal x7072=((0.3)*cj3);
IkReal x7073=((1.1)*x7065);
IkReal x7074=(cj3*x7065);
IkReal x7075=((0.09)*x7066);
evalcond[0]=((-0.55)+(((-1.0)*x7072))+(((-1.0)*x7071))+((x7065*x7070))+((x7065*x7067)));
evalcond[1]=((0.045)+x7068+(((-1.0)*x7069))+((x7066*x7070))+((x7066*x7067)));
evalcond[2]=((-0.2125)+((x7067*x7073))+((x7070*x7073))+(((-1.0)*x7067*x7075))+(((-1.0)*x7070*x7075))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x7066*x7071))+(((-1.0)*x7066*x7072))+(((-1.0)*x7065*x7068))+(((-0.55)*x7066))+(((-0.045)*x7065))+((x7065*x7069)));
evalcond[4]=((((0.55)*x7065))+(((-1.0)*x7066*x7068))+(((-1.0)*x7070))+((x7065*x7071))+((x7065*x7072))+(((-1.0)*x7067))+(((-0.045)*x7066))+((x7066*x7069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7076 = IKatan2WithCheck((gconst135*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst135*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x7076.valid){
continue;
}
j1array[0]=x7076.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7077=IKsin(j1);
IkReal x7078=IKcos(j1);
IkReal x7079=(gconst125*px);
IkReal x7080=((0.3)*sj3);
IkReal x7081=((0.045)*cj3);
IkReal x7082=(gconst124*py);
IkReal x7083=((0.045)*sj3);
IkReal x7084=((0.3)*cj3);
IkReal x7085=((1.1)*x7077);
IkReal x7086=(cj3*x7077);
IkReal x7087=((0.09)*x7078);
evalcond[0]=((-0.55)+((x7077*x7082))+((x7077*x7079))+(((-1.0)*x7084))+(((-1.0)*x7083)));
evalcond[1]=((0.045)+x7080+((x7078*x7079))+((x7078*x7082))+(((-1.0)*x7081)));
evalcond[2]=((-0.2125)+(((-1.0)*x7079*x7087))+(((-1.0)*pp))+(((-1.0)*x7082*x7087))+((x7079*x7085))+((x7082*x7085)));
evalcond[3]=(((x7077*x7081))+(((-0.55)*x7078))+(((-1.0)*x7078*x7084))+(((-1.0)*x7078*x7083))+(((-0.045)*x7077))+(((-1.0)*x7077*x7080)));
evalcond[4]=((((-1.0)*x7082))+((x7077*x7083))+((x7077*x7084))+(((-1.0)*x7079))+((x7078*x7081))+(((-1.0)*x7078*x7080))+(((-0.045)*x7078))+(((0.55)*x7077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst126;
CheckValue<IkReal> x7088 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x7088.valid){
continue;
}
gconst126=((-1.0)*(x7088.value));
IkReal gconst127;
gconst127=IKsin(gconst126);
IkReal gconst128;
gconst128=IKcos(gconst126);
IkReal x7089=(gconst127*px);
IkReal x7090=(gconst128*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst126))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x7090))+x7089);
evalcond[3]=((((-1.0)*x7089))+x7090);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst136;
gconst136=IKsign((((gconst127*py))+((gconst128*px))));
dummyeval[0]=(((gconst127*py))+((gconst128*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x7091=(gconst128*px);
IkReal x7092=((1.0)*sj3);
IkReal x7093=(gconst127*py);
IkReal x7094=((6.66666666666667)*cj3);
dummyeval[0]=(x7093+x7091);
dummyeval[1]=((((-1.0)*x7093*x7094))+(((-12.2222222222222)*x7091))+(((-12.2222222222222)*x7093))+(((-1.0)*x7092*x7093))+(((-1.0)*x7091*x7092))+(((-1.0)*x7091*x7094)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x7095=(gconst127*py);
IkReal x7096=((6.66666666666667)*sj3);
IkReal x7097=(gconst128*px);
dummyeval[0]=((((-1.0)*x7095))+(((-1.0)*x7097))+(((-1.0)*x7095*x7096))+(((-1.0)*x7096*x7097))+((cj3*x7097))+((cj3*x7095)));
dummyeval[1]=(x7097+x7095);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x7098=(gconst127*px);
IkReal x7099=(gconst128*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x7099))+x7098);
evalcond[3]=((((-1.0)*x7098))+x7099);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst127*py))+(((-1.0)*gconst128*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x7100=(gconst127*py);
IkReal x7101=(gconst128*px);
dummyeval[0]=(x7100+x7101);
dummyeval[1]=((((-1.0)*(x7101*x7101)))+(((-1.0)*(x7100*x7100)))+(((-2.0)*x7100*x7101)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x7102=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x7102)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7102)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7103=(gconst128*px);
IkReal x7104=(gconst127*py);
IkReal x7105=((20.0)*pp);
CheckValue<IkReal> x7106=IKPowWithIntegerCheck(((((20.0)*x7104))+(((20.0)*x7103))),-1);
if(!x7106.valid){
continue;
}
CheckValue<IkReal> x7107=IKPowWithIntegerCheck(((((-1.8)*(x7104*x7104)))+(((-3.6)*x7103*x7104))+(((-1.8)*(x7103*x7103)))),-1);
if(!x7107.valid){
continue;
}
if( IKabs(((17.0)*(x7106.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7107.value)*((((x7104*x7105))+((x7103*x7105))+(((-14.45)*x7103))+(((-14.45)*x7104)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x7106.value)))+IKsqr(((x7107.value)*((((x7104*x7105))+((x7103*x7105))+(((-14.45)*x7103))+(((-14.45)*x7104))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x7106.value)), ((x7107.value)*((((x7104*x7105))+((x7103*x7105))+(((-14.45)*x7103))+(((-14.45)*x7104))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7108=IKcos(j1);
IkReal x7109=IKsin(j1);
IkReal x7110=(gconst127*py);
IkReal x7111=(gconst128*px);
IkReal x7112=((1.1)*x7109);
IkReal x7113=(x7108*x7111);
evalcond[0]=((-0.85)*x7108);
evalcond[1]=(x7113+((x7108*x7110)));
evalcond[2]=((-0.85)+((x7109*x7110))+((x7109*x7111)));
evalcond[3]=((((-1.0)*x7110))+(((-1.0)*x7111))+(((0.85)*x7109)));
evalcond[4]=((-0.2125)+((x7110*x7112))+(((-0.09)*x7113))+((x7111*x7112))+(((-1.0)*pp))+(((-0.09)*x7108*x7110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7114=(gconst127*py);
IkReal x7115=(gconst128*px);
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(((((-1.53)*x7115))+(((-1.53)*x7114))),-1);
if(!x7116.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x7114))+(((1.17647058823529)*x7115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7116.value)*(((3.6125)+(((-22.0)*(x7114*x7114)))+(((17.0)*pp))+(((-44.0)*x7114*x7115))+(((-22.0)*(x7115*x7115))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x7114))+(((1.17647058823529)*x7115))))+IKsqr(((x7116.value)*(((3.6125)+(((-22.0)*(x7114*x7114)))+(((17.0)*pp))+(((-44.0)*x7114*x7115))+(((-22.0)*(x7115*x7115)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x7114))+(((1.17647058823529)*x7115))), ((x7116.value)*(((3.6125)+(((-22.0)*(x7114*x7114)))+(((17.0)*pp))+(((-44.0)*x7114*x7115))+(((-22.0)*(x7115*x7115)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7117=IKcos(j1);
IkReal x7118=IKsin(j1);
IkReal x7119=(gconst127*py);
IkReal x7120=(gconst128*px);
IkReal x7121=((1.1)*x7118);
IkReal x7122=(x7117*x7120);
evalcond[0]=((-0.85)*x7117);
evalcond[1]=(x7122+((x7117*x7119)));
evalcond[2]=((-0.85)+((x7118*x7119))+((x7118*x7120)));
evalcond[3]=((((-1.0)*x7119))+(((-1.0)*x7120))+(((0.85)*x7118)));
evalcond[4]=((-0.2125)+(((-0.09)*x7117*x7119))+((x7120*x7121))+((x7119*x7121))+(((-1.0)*pp))+(((-0.09)*x7122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7123=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x7123))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x7123)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x7125 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x7125.valid){
continue;
}
IkReal x7124=x7125.value;
j1array[0]=((-1.0)*x7124);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x7124)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x7126=IKsin(j1);
IkReal x7127=IKcos(j1);
IkReal x7128=((0.045)*x7127);
evalcond[0]=(((cj3*x7128))+(((-0.3)*sj3*x7127))+(((0.045)*sj3*x7126))+(((-1.0)*x7128))+(((0.55)*x7126))+(((0.3)*cj3*x7126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7129=(gconst128*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x7129);
evalcond[3]=x7129;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst127;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst127;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x7130=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x7130)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7130)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7134=IKPowWithIntegerCheck(gconst127,-1);
if(!x7134.valid){
continue;
}
IkReal x7131=x7134.value;
CheckValue<IkReal> x7135=IKPowWithIntegerCheck(py,-1);
if(!x7135.valid){
continue;
}
IkReal x7132=x7135.value;
IkReal x7133=(x7131*x7132);
if( IKabs(((0.85)*x7133)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x7133*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x7133))+IKsqr(((0.0555555555555556)*x7133*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x7133), ((0.0555555555555556)*x7133*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7136=IKcos(j1);
IkReal x7137=IKsin(j1);
IkReal x7138=(gconst127*py);
evalcond[0]=((-0.85)*x7136);
evalcond[1]=(x7136*x7138);
evalcond[2]=((-0.85)+((x7137*x7138)));
evalcond[3]=((((0.85)*x7137))+(((-1.0)*x7138)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x7136*x7138))+(((1.1)*x7137*x7138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7139=IKPowWithIntegerCheck(gconst127,-1);
if(!x7139.valid){
continue;
}
CheckValue<IkReal> x7140=IKPowWithIntegerCheck(py,-1);
if(!x7140.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst127*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x7139.value)*(x7140.value)*(((-361.25)+(((2200.0)*(gconst127*gconst127)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst127*py))+IKsqr(((0.0065359477124183)*(x7139.value)*(x7140.value)*(((-361.25)+(((2200.0)*(gconst127*gconst127)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst127*py), ((0.0065359477124183)*(x7139.value)*(x7140.value)*(((-361.25)+(((2200.0)*(gconst127*gconst127)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7141=IKcos(j1);
IkReal x7142=IKsin(j1);
IkReal x7143=(gconst127*py);
evalcond[0]=((-0.85)*x7141);
evalcond[1]=(x7141*x7143);
evalcond[2]=((-0.85)+((x7142*x7143)));
evalcond[3]=((((-1.0)*x7143))+(((0.85)*x7142)));
evalcond[4]=((-0.2125)+(((1.1)*x7142*x7143))+(((-1.0)*pp))+(((-0.09)*x7141*x7143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7144=(gconst127*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x7144;
evalcond[3]=((-1.0)*x7144);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst128;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst128;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x7145=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x7145)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7145)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7149=IKPowWithIntegerCheck(gconst128,-1);
if(!x7149.valid){
continue;
}
IkReal x7146=x7149.value;
CheckValue<IkReal> x7150=IKPowWithIntegerCheck(px,-1);
if(!x7150.valid){
continue;
}
IkReal x7147=x7150.value;
IkReal x7148=(x7146*x7147);
if( IKabs(((0.85)*x7148)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x7148*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x7148))+IKsqr(((0.0555555555555556)*x7148*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x7148), ((0.0555555555555556)*x7148*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7151=IKcos(j1);
IkReal x7152=IKsin(j1);
IkReal x7153=(gconst128*px);
IkReal x7154=(x7151*x7153);
evalcond[0]=((-0.85)*x7151);
evalcond[1]=x7154;
evalcond[2]=((-0.85)+((x7152*x7153)));
evalcond[3]=((((0.85)*x7152))+(((-1.0)*x7153)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x7154))+(((1.1)*x7152*x7153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7155=IKPowWithIntegerCheck(gconst128,-1);
if(!x7155.valid){
continue;
}
CheckValue<IkReal> x7156=IKPowWithIntegerCheck(px,-1);
if(!x7156.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst128*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x7155.value)*(x7156.value)*(((-361.25)+(((2200.0)*(gconst128*gconst128)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst128*px))+IKsqr(((0.0065359477124183)*(x7155.value)*(x7156.value)*(((-361.25)+(((2200.0)*(gconst128*gconst128)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst128*px), ((0.0065359477124183)*(x7155.value)*(x7156.value)*(((-361.25)+(((2200.0)*(gconst128*gconst128)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7157=IKcos(j1);
IkReal x7158=IKsin(j1);
IkReal x7159=(gconst128*px);
IkReal x7160=(x7157*x7159);
evalcond[0]=((-0.85)*x7157);
evalcond[1]=x7160;
evalcond[2]=((-0.85)+((x7158*x7159)));
evalcond[3]=((((0.85)*x7158))+(((-1.0)*x7159)));
evalcond[4]=((-0.2125)+(((1.1)*x7158*x7159))+(((-1.0)*pp))+(((-0.09)*x7160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7161=(gconst127*py);
IkReal x7162=((0.045)*cj3);
IkReal x7163=(gconst128*px);
IkReal x7164=((0.3)*sj3);
IkReal x7165=((0.045)*x7163);
CheckValue<IkReal> x7166=IKPowWithIntegerCheck((((x7162*x7163))+(((-1.0)*x7163*x7164))+(((-1.0)*x7161*x7164))+(((-1.0)*x7165))+((x7161*x7162))+(((-0.045)*x7161))),-1);
if(!x7166.valid){
continue;
}
CheckValue<IkReal> x7167=IKPowWithIntegerCheck((x7163+x7161),-1);
if(!x7167.valid){
continue;
}
if( IKabs(((x7166.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7167.value)*(((-0.045)+x7162+(((-1.0)*x7164)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7166.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x7167.value)*(((-0.045)+x7162+(((-1.0)*x7164))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7166.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x7167.value)*(((-0.045)+x7162+(((-1.0)*x7164))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7168=IKsin(j1);
IkReal x7169=IKcos(j1);
IkReal x7170=((0.3)*cj3);
IkReal x7171=((0.045)*cj3);
IkReal x7172=(gconst127*py);
IkReal x7173=(gconst128*px);
IkReal x7174=((0.045)*sj3);
IkReal x7175=((0.3)*sj3);
IkReal x7176=((0.045)*x7168);
IkReal x7177=((0.09)*x7169);
IkReal x7178=((1.1)*x7168);
evalcond[0]=((-0.55)+(((-1.0)*x7174))+(((-1.0)*x7170))+((x7168*x7173))+((x7168*x7172)));
evalcond[1]=((0.045)+x7175+(((-1.0)*x7171))+((x7169*x7172))+((x7169*x7173)));
evalcond[2]=((-0.2125)+(((-1.0)*x7173*x7177))+((x7173*x7178))+(((-1.0)*pp))+((x7172*x7178))+(((-1.0)*x7172*x7177)));
evalcond[3]=((((-1.0)*x7169*x7174))+(((-1.0)*x7169*x7170))+(((-1.0)*x7176))+(((-0.55)*x7169))+(((-1.0)*x7168*x7175))+((x7168*x7171)));
evalcond[4]=((((-1.0)*x7169*x7175))+(((-1.0)*x7173))+(((-1.0)*x7172))+((x7169*x7171))+(((0.55)*x7168))+(((-0.045)*x7169))+((x7168*x7170))+((x7168*x7174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7179=(gconst128*px);
IkReal x7180=((0.045)*sj3);
IkReal x7181=((0.3)*cj3);
IkReal x7182=(gconst127*py);
CheckValue<IkReal> x7183=IKPowWithIntegerCheck((x7182+x7179),-1);
if(!x7183.valid){
continue;
}
CheckValue<IkReal> x7184=IKPowWithIntegerCheck(((((-0.55)*x7182))+(((-1.0)*x7179*x7181))+(((-1.0)*x7179*x7180))+(((-1.0)*x7181*x7182))+(((-0.55)*x7179))+(((-1.0)*x7180*x7182))),-1);
if(!x7184.valid){
continue;
}
if( IKabs(((x7183.value)*(((0.55)+x7180+x7181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7184.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7183.value)*(((0.55)+x7180+x7181))))+IKsqr(((x7184.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7183.value)*(((0.55)+x7180+x7181))), ((x7184.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7185=IKsin(j1);
IkReal x7186=IKcos(j1);
IkReal x7187=((0.3)*cj3);
IkReal x7188=((0.045)*cj3);
IkReal x7189=(gconst127*py);
IkReal x7190=(gconst128*px);
IkReal x7191=((0.045)*sj3);
IkReal x7192=((0.3)*sj3);
IkReal x7193=((0.045)*x7185);
IkReal x7194=((0.09)*x7186);
IkReal x7195=((1.1)*x7185);
evalcond[0]=((-0.55)+((x7185*x7189))+(((-1.0)*x7191))+(((-1.0)*x7187))+((x7185*x7190)));
evalcond[1]=((0.045)+x7192+((x7186*x7189))+(((-1.0)*x7188))+((x7186*x7190)));
evalcond[2]=((-0.2125)+((x7190*x7195))+(((-1.0)*x7189*x7194))+((x7189*x7195))+(((-1.0)*pp))+(((-1.0)*x7190*x7194)));
evalcond[3]=(((x7185*x7188))+(((-0.55)*x7186))+(((-1.0)*x7186*x7187))+(((-1.0)*x7193))+(((-1.0)*x7186*x7191))+(((-1.0)*x7185*x7192)));
evalcond[4]=(((x7186*x7188))+((x7185*x7187))+(((-1.0)*x7186*x7192))+(((0.55)*x7185))+(((-0.045)*x7186))+(((-1.0)*x7189))+(((-1.0)*x7190))+((x7185*x7191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7196 = IKatan2WithCheck((gconst136*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst136*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x7196.valid){
continue;
}
j1array[0]=x7196.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7197=IKsin(j1);
IkReal x7198=IKcos(j1);
IkReal x7199=((0.3)*cj3);
IkReal x7200=((0.045)*cj3);
IkReal x7201=(gconst127*py);
IkReal x7202=(gconst128*px);
IkReal x7203=((0.045)*sj3);
IkReal x7204=((0.3)*sj3);
IkReal x7205=((0.045)*x7197);
IkReal x7206=((0.09)*x7198);
IkReal x7207=((1.1)*x7197);
evalcond[0]=((-0.55)+(((-1.0)*x7199))+((x7197*x7201))+((x7197*x7202))+(((-1.0)*x7203)));
evalcond[1]=((0.045)+((x7198*x7202))+((x7198*x7201))+x7204+(((-1.0)*x7200)));
evalcond[2]=((-0.2125)+((x7201*x7207))+((x7202*x7207))+(((-1.0)*x7202*x7206))+(((-1.0)*pp))+(((-1.0)*x7201*x7206)));
evalcond[3]=((((-0.55)*x7198))+(((-1.0)*x7198*x7199))+(((-1.0)*x7198*x7203))+(((-1.0)*x7197*x7204))+((x7197*x7200))+(((-1.0)*x7205)));
evalcond[4]=(((x7198*x7200))+(((-1.0)*x7198*x7204))+(((-0.045)*x7198))+((x7197*x7199))+((x7197*x7203))+(((-1.0)*x7201))+(((-1.0)*x7202))+(((0.55)*x7197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst129;
CheckValue<IkReal> x7208 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
gconst129=((3.14159265358979)+(((-1.0)*(x7208.value))));
IkReal gconst130;
gconst130=IKsin(gconst129);
IkReal gconst131;
gconst131=IKcos(gconst129);
IkReal x7209=(gconst131*py);
IkReal x7210=(gconst130*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst129))+j0)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x7210+(((-1.0)*x7209)));
evalcond[3]=(x7209+(((-1.0)*x7210)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst137;
gconst137=IKsign((((gconst130*py))+((gconst131*px))));
dummyeval[0]=(((gconst130*py))+((gconst131*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x7211=(gconst130*py);
IkReal x7212=((6.66666666666667)*cj3);
IkReal x7213=(gconst131*px);
IkReal x7214=((1.0)*sj3);
dummyeval[0]=(x7211+x7213);
dummyeval[1]=((((-1.0)*x7213*x7214))+(((-1.0)*x7212*x7213))+(((-12.2222222222222)*x7213))+(((-12.2222222222222)*x7211))+(((-1.0)*x7211*x7214))+(((-1.0)*x7211*x7212)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x7215=(gconst130*py);
IkReal x7216=((6.66666666666667)*sj3);
IkReal x7217=(gconst131*px);
dummyeval[0]=((((-1.0)*x7215*x7216))+((cj3*x7215))+((cj3*x7217))+(((-1.0)*x7217))+(((-1.0)*x7215))+(((-1.0)*x7216*x7217)));
dummyeval[1]=(x7215+x7217);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x7218=(gconst131*py);
IkReal x7219=(gconst130*px);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=(x7219+(((-1.0)*x7218)));
evalcond[3]=(x7218+(((-1.0)*x7219)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((((-1.0)*gconst131*px))+(((-1.0)*gconst130*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x7220=(gconst130*py);
IkReal x7221=(gconst131*px);
dummyeval[0]=(x7221+x7220);
dummyeval[1]=((((-1.0)*(x7221*x7221)))+(((-2.0)*x7220*x7221))+(((-1.0)*(x7220*x7220))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x7222=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.7225)+(((-1.0)*x7222)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7222)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7223=(gconst130*py);
IkReal x7224=(gconst131*px);
IkReal x7225=((20.0)*x7224);
CheckValue<IkReal> x7226=IKPowWithIntegerCheck((x7225+(((20.0)*x7223))),-1);
if(!x7226.valid){
continue;
}
CheckValue<IkReal> x7227=IKPowWithIntegerCheck(((((-1.8)*(x7223*x7223)))+(((-1.8)*(x7224*x7224)))+(((-3.6)*x7223*x7224))),-1);
if(!x7227.valid){
continue;
}
if( IKabs(((17.0)*(x7226.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7227.value)*(((((-14.45)*x7223))+(((-14.45)*x7224))+(((20.0)*pp*x7223))+((pp*x7225)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x7226.value)))+IKsqr(((x7227.value)*(((((-14.45)*x7223))+(((-14.45)*x7224))+(((20.0)*pp*x7223))+((pp*x7225))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((17.0)*(x7226.value)), ((x7227.value)*(((((-14.45)*x7223))+(((-14.45)*x7224))+(((20.0)*pp*x7223))+((pp*x7225))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7228=IKcos(j1);
IkReal x7229=IKsin(j1);
IkReal x7230=(gconst130*py);
IkReal x7231=(gconst131*px);
IkReal x7232=((1.1)*x7229);
IkReal x7233=(x7228*x7231);
evalcond[0]=((-0.85)*x7228);
evalcond[1]=(((x7228*x7230))+x7233);
evalcond[2]=((-0.85)+((x7229*x7231))+((x7229*x7230)));
evalcond[3]=((((0.85)*x7229))+(((-1.0)*x7231))+(((-1.0)*x7230)));
evalcond[4]=((-0.2125)+(((-0.09)*x7228*x7230))+((x7230*x7232))+((x7231*x7232))+(((-1.0)*pp))+(((-0.09)*x7233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7234=(gconst130*py);
IkReal x7235=(gconst131*px);
CheckValue<IkReal> x7236=IKPowWithIntegerCheck(((((-1.53)*x7234))+(((-1.53)*x7235))),-1);
if(!x7236.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x7235))+(((1.17647058823529)*x7234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7236.value)*(((3.6125)+(((-22.0)*(x7234*x7234)))+(((17.0)*pp))+(((-22.0)*(x7235*x7235)))+(((-44.0)*x7234*x7235)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x7235))+(((1.17647058823529)*x7234))))+IKsqr(((x7236.value)*(((3.6125)+(((-22.0)*(x7234*x7234)))+(((17.0)*pp))+(((-22.0)*(x7235*x7235)))+(((-44.0)*x7234*x7235))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x7235))+(((1.17647058823529)*x7234))), ((x7236.value)*(((3.6125)+(((-22.0)*(x7234*x7234)))+(((17.0)*pp))+(((-22.0)*(x7235*x7235)))+(((-44.0)*x7234*x7235))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7237=IKcos(j1);
IkReal x7238=IKsin(j1);
IkReal x7239=(gconst130*py);
IkReal x7240=(gconst131*px);
IkReal x7241=((1.1)*x7238);
IkReal x7242=(x7237*x7240);
evalcond[0]=((-0.85)*x7237);
evalcond[1]=(x7242+((x7237*x7239)));
evalcond[2]=((-0.85)+((x7238*x7239))+((x7238*x7240)));
evalcond[3]=((((-1.0)*x7240))+(((0.85)*x7238))+(((-1.0)*x7239)));
evalcond[4]=((-0.2125)+((x7240*x7241))+(((-0.09)*x7237*x7239))+(((-1.0)*pp))+((x7239*x7241))+(((-0.09)*x7242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7243=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x7243))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x7243)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x7245 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x7245.valid){
continue;
}
IkReal x7244=x7245.value;
j1array[0]=((-1.0)*x7244);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x7244)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x7246=IKsin(j1);
IkReal x7247=IKcos(j1);
IkReal x7248=((0.045)*x7247);
evalcond[0]=(((cj3*x7248))+(((0.3)*cj3*x7246))+(((0.045)*sj3*x7246))+(((-0.3)*sj3*x7247))+(((0.55)*x7246))+(((-1.0)*x7248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7249=(gconst131*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x7249);
evalcond[3]=x7249;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst130;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst130;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x7250=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x7250)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7250)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7254=IKPowWithIntegerCheck(gconst130,-1);
if(!x7254.valid){
continue;
}
IkReal x7251=x7254.value;
CheckValue<IkReal> x7255=IKPowWithIntegerCheck(py,-1);
if(!x7255.valid){
continue;
}
IkReal x7252=x7255.value;
IkReal x7253=(x7251*x7252);
if( IKabs(((0.85)*x7253)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x7253*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x7253))+IKsqr(((0.0555555555555556)*x7253*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x7253), ((0.0555555555555556)*x7253*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7256=IKcos(j1);
IkReal x7257=IKsin(j1);
IkReal x7258=(gconst130*py);
evalcond[0]=((-0.85)*x7256);
evalcond[1]=(x7256*x7258);
evalcond[2]=((-0.85)+((x7257*x7258)));
evalcond[3]=((((0.85)*x7257))+(((-1.0)*x7258)));
evalcond[4]=((-0.2125)+(((-0.09)*x7256*x7258))+(((1.1)*x7257*x7258))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7259=IKPowWithIntegerCheck(gconst130,-1);
if(!x7259.valid){
continue;
}
CheckValue<IkReal> x7260=IKPowWithIntegerCheck(py,-1);
if(!x7260.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst130*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x7259.value)*(x7260.value)*(((-361.25)+(((2200.0)*(gconst130*gconst130)*(py*py)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst130*py))+IKsqr(((0.0065359477124183)*(x7259.value)*(x7260.value)*(((-361.25)+(((2200.0)*(gconst130*gconst130)*(py*py)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst130*py), ((0.0065359477124183)*(x7259.value)*(x7260.value)*(((-361.25)+(((2200.0)*(gconst130*gconst130)*(py*py)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7261=IKcos(j1);
IkReal x7262=IKsin(j1);
IkReal x7263=(gconst130*py);
evalcond[0]=((-0.85)*x7261);
evalcond[1]=(x7261*x7263);
evalcond[2]=((-0.85)+((x7262*x7263)));
evalcond[3]=((((-1.0)*x7263))+(((0.85)*x7262)));
evalcond[4]=((-0.2125)+(((-0.09)*x7261*x7263))+(((-1.0)*pp))+(((1.1)*x7262*x7263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7264=(gconst130*px);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x7264;
evalcond[3]=((-1.0)*x7264);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=gconst131;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=gconst131;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x7265=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x7265)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7265)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7269=IKPowWithIntegerCheck(gconst131,-1);
if(!x7269.valid){
continue;
}
IkReal x7266=x7269.value;
CheckValue<IkReal> x7270=IKPowWithIntegerCheck(px,-1);
if(!x7270.valid){
continue;
}
IkReal x7267=x7270.value;
IkReal x7268=(x7266*x7267);
if( IKabs(((0.85)*x7268)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x7268*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x7268))+IKsqr(((0.0555555555555556)*x7268*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x7268), ((0.0555555555555556)*x7268*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7271=IKcos(j1);
IkReal x7272=IKsin(j1);
IkReal x7273=(gconst131*px);
IkReal x7274=(x7271*x7273);
evalcond[0]=((-0.85)*x7271);
evalcond[1]=x7274;
evalcond[2]=((-0.85)+((x7272*x7273)));
evalcond[3]=((((-1.0)*x7273))+(((0.85)*x7272)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x7274))+(((1.1)*x7272*x7273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7275=IKPowWithIntegerCheck(gconst131,-1);
if(!x7275.valid){
continue;
}
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(px,-1);
if(!x7276.valid){
continue;
}
if( IKabs(((1.17647058823529)*gconst131*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x7275.value)*(x7276.value)*(((-361.25)+(((2200.0)*(gconst131*gconst131)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*gconst131*px))+IKsqr(((0.0065359477124183)*(x7275.value)*(x7276.value)*(((-361.25)+(((2200.0)*(gconst131*gconst131)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*gconst131*px), ((0.0065359477124183)*(x7275.value)*(x7276.value)*(((-361.25)+(((2200.0)*(gconst131*gconst131)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7277=IKcos(j1);
IkReal x7278=IKsin(j1);
IkReal x7279=(gconst131*px);
IkReal x7280=(x7277*x7279);
evalcond[0]=((-0.85)*x7277);
evalcond[1]=x7280;
evalcond[2]=((-0.85)+((x7278*x7279)));
evalcond[3]=((((-1.0)*x7279))+(((0.85)*x7278)));
evalcond[4]=((-0.2125)+(((1.1)*x7278*x7279))+(((-0.09)*x7280))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7281=((0.3)*sj3);
IkReal x7282=(gconst130*py);
IkReal x7283=((0.045)*cj3);
IkReal x7284=(gconst131*px);
IkReal x7285=((0.045)*x7284);
CheckValue<IkReal> x7286=IKPowWithIntegerCheck((((x7282*x7283))+(((-1.0)*x7285))+(((-1.0)*x7281*x7284))+(((-1.0)*x7281*x7282))+((x7283*x7284))+(((-0.045)*x7282))),-1);
if(!x7286.valid){
continue;
}
CheckValue<IkReal> x7287=IKPowWithIntegerCheck((x7282+x7284),-1);
if(!x7287.valid){
continue;
}
if( IKabs(((x7286.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7287.value)*(((-0.045)+x7283+(((-1.0)*x7281)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7286.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x7287.value)*(((-0.045)+x7283+(((-1.0)*x7281))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7286.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x7287.value)*(((-0.045)+x7283+(((-1.0)*x7281))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7288=IKsin(j1);
IkReal x7289=IKcos(j1);
IkReal x7290=(gconst131*px);
IkReal x7291=((0.045)*cj3);
IkReal x7292=(gconst130*py);
IkReal x7293=((0.3)*cj3);
IkReal x7294=((0.045)*sj3);
IkReal x7295=((0.3)*sj3);
IkReal x7296=((0.045)*x7288);
IkReal x7297=((1.1)*x7288);
IkReal x7298=(x7289*x7290);
evalcond[0]=((-0.55)+(((-1.0)*x7293))+(((-1.0)*x7294))+((x7288*x7292))+((x7288*x7290)));
evalcond[1]=((0.045)+x7295+x7298+(((-1.0)*x7291))+((x7289*x7292)));
evalcond[2]=((-0.2125)+(((-0.09)*x7298))+(((-1.0)*pp))+((x7292*x7297))+((x7290*x7297))+(((-0.09)*x7289*x7292)));
evalcond[3]=((((-1.0)*x7296))+(((-1.0)*x7288*x7295))+(((-1.0)*x7289*x7294))+(((-1.0)*x7289*x7293))+(((-0.55)*x7289))+((x7288*x7291)));
evalcond[4]=((((-1.0)*x7290))+(((-1.0)*x7292))+(((-1.0)*x7289*x7295))+((x7288*x7293))+((x7288*x7294))+((x7289*x7291))+(((0.55)*x7288))+(((-0.045)*x7289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7299=(gconst131*px);
IkReal x7300=((0.3)*cj3);
IkReal x7301=(gconst130*py);
IkReal x7302=((0.045)*sj3);
CheckValue<IkReal> x7303=IKPowWithIntegerCheck((x7301+x7299),-1);
if(!x7303.valid){
continue;
}
CheckValue<IkReal> x7304=IKPowWithIntegerCheck(((((-1.0)*x7301*x7302))+(((-1.0)*x7300*x7301))+(((-0.55)*x7301))+(((-1.0)*x7299*x7300))+(((-1.0)*x7299*x7302))+(((-0.55)*x7299))),-1);
if(!x7304.valid){
continue;
}
if( IKabs(((x7303.value)*(((0.55)+x7302+x7300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7304.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7303.value)*(((0.55)+x7302+x7300))))+IKsqr(((x7304.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7303.value)*(((0.55)+x7302+x7300))), ((x7304.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7305=IKsin(j1);
IkReal x7306=IKcos(j1);
IkReal x7307=(gconst131*px);
IkReal x7308=((0.045)*cj3);
IkReal x7309=(gconst130*py);
IkReal x7310=((0.3)*cj3);
IkReal x7311=((0.045)*sj3);
IkReal x7312=((0.3)*sj3);
IkReal x7313=((0.045)*x7305);
IkReal x7314=((1.1)*x7305);
IkReal x7315=(x7306*x7307);
evalcond[0]=((-0.55)+((x7305*x7309))+((x7305*x7307))+(((-1.0)*x7310))+(((-1.0)*x7311)));
evalcond[1]=((0.045)+x7315+x7312+((x7306*x7309))+(((-1.0)*x7308)));
evalcond[2]=((-0.2125)+(((-0.09)*x7315))+((x7309*x7314))+((x7307*x7314))+(((-1.0)*pp))+(((-0.09)*x7306*x7309)));
evalcond[3]=(((x7305*x7308))+(((-0.55)*x7306))+(((-1.0)*x7313))+(((-1.0)*x7305*x7312))+(((-1.0)*x7306*x7311))+(((-1.0)*x7306*x7310)));
evalcond[4]=((((-1.0)*x7309))+(((-1.0)*x7307))+(((0.55)*x7305))+(((-0.045)*x7306))+((x7306*x7308))+((x7305*x7310))+((x7305*x7311))+(((-1.0)*x7306*x7312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7316 = IKatan2WithCheck((gconst137*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst137*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x7316.valid){
continue;
}
j1array[0]=x7316.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7317=IKsin(j1);
IkReal x7318=IKcos(j1);
IkReal x7319=(gconst131*px);
IkReal x7320=((0.045)*cj3);
IkReal x7321=(gconst130*py);
IkReal x7322=((0.3)*cj3);
IkReal x7323=((0.045)*sj3);
IkReal x7324=((0.3)*sj3);
IkReal x7325=((0.045)*x7317);
IkReal x7326=((1.1)*x7317);
IkReal x7327=(x7318*x7319);
evalcond[0]=((-0.55)+((x7317*x7319))+(((-1.0)*x7323))+(((-1.0)*x7322))+((x7317*x7321)));
evalcond[1]=((0.045)+x7324+x7327+(((-1.0)*x7320))+((x7318*x7321)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x7319*x7326))+(((-0.09)*x7318*x7321))+((x7321*x7326))+(((-0.09)*x7327)));
evalcond[3]=((((-1.0)*x7317*x7324))+(((-1.0)*x7318*x7323))+(((-1.0)*x7318*x7322))+(((-1.0)*x7325))+(((-0.55)*x7318))+((x7317*x7320)));
evalcond[4]=((((-1.0)*x7319))+(((-1.0)*x7321))+(((-1.0)*x7318*x7324))+(((0.55)*x7317))+(((-0.045)*x7318))+((x7317*x7322))+((x7317*x7323))+((x7318*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7328=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x7328))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=0;
evalcond[4]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[5]=((-0.2125)+(((-1.0)*x7328)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x7330 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x7330.valid){
continue;
}
IkReal x7329=x7330.value;
j1array[0]=((-1.0)*x7329);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x7329)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x7331=IKsin(j1);
IkReal x7332=IKcos(j1);
IkReal x7333=((0.045)*x7332);
evalcond[0]=((((-0.3)*sj3*x7332))+(((0.55)*x7331))+((cj3*x7333))+(((0.045)*sj3*x7331))+(((0.3)*cj3*x7331))+(((-1.0)*x7333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7334=(cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-1.0)*x7334);
evalcond[3]=x7334;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7335=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x7335)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x7335)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7336=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x7336)));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x7336)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7337=((1.0)*pp);
evalcond[0]=IKabs(py);
evalcond[1]=((0.7225)+(((-1.0)*x7337)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7337)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7338=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)))))+(IKabs(IKabs(py))));
evalcond[1]=((0.7225)+(((-1.0)*x7338)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7338)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7339=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(py))));
evalcond[1]=((0.7225)+(((-1.0)*x7339)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7339)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7343=IKPowWithIntegerCheck(py,-1);
if(!x7343.valid){
continue;
}
IkReal x7340=x7343.value;
CheckValue<IkReal> x7344=IKPowWithIntegerCheck(sj0,-1);
if(!x7344.valid){
continue;
}
IkReal x7341=x7344.value;
IkReal x7342=(x7340*x7341);
if( IKabs(((0.85)*x7342)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x7342*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x7342))+IKsqr(((0.0555555555555556)*x7342*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x7342), ((0.0555555555555556)*x7342*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7345=IKcos(j1);
IkReal x7346=IKsin(j1);
IkReal x7347=(py*sj0);
IkReal x7348=(x7346*x7347);
evalcond[0]=((-0.85)*x7345);
evalcond[1]=(x7345*x7347);
evalcond[2]=((-0.85)+x7348);
evalcond[3]=((((0.85)*x7346))+(((-1.0)*x7347)));
evalcond[4]=((-0.2125)+(((-0.09)*x7345*x7347))+(((-1.0)*pp))+(((1.1)*x7348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7349=IKPowWithIntegerCheck(py,-1);
if(!x7349.valid){
continue;
}
CheckValue<IkReal> x7350=IKPowWithIntegerCheck(sj0,-1);
if(!x7350.valid){
continue;
}
if( IKabs(((1.17647058823529)*py*sj0)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x7349.value)*(x7350.value)*(((-361.25)+(((2200.0)*(py*py)*(sj0*sj0)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*py*sj0))+IKsqr(((0.0065359477124183)*(x7349.value)*(x7350.value)*(((-361.25)+(((2200.0)*(py*py)*(sj0*sj0)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*py*sj0), ((0.0065359477124183)*(x7349.value)*(x7350.value)*(((-361.25)+(((2200.0)*(py*py)*(sj0*sj0)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7351=IKcos(j1);
IkReal x7352=IKsin(j1);
IkReal x7353=(py*sj0);
IkReal x7354=(x7352*x7353);
evalcond[0]=((-0.85)*x7351);
evalcond[1]=(x7351*x7353);
evalcond[2]=((-0.85)+x7354);
evalcond[3]=((((0.85)*x7352))+(((-1.0)*x7353)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x7351*x7353))+(((1.1)*x7354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7355=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x7355))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*py);
evalcond[4]=py;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x7355)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x7357 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x7357.valid){
continue;
}
IkReal x7356=x7357.value;
j1array[0]=((-1.0)*x7356);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x7356)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x7358=IKsin(j1);
IkReal x7359=IKcos(j1);
IkReal x7360=((0.045)*x7359);
evalcond[0]=((((0.3)*cj3*x7358))+(((0.55)*x7358))+(((-1.0)*x7360))+(((0.045)*sj3*x7358))+(((-0.3)*sj3*x7359))+((cj3*x7360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7361=((1.0)*pp);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x7361))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=py;
evalcond[4]=((-1.0)*py);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x7361)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x7363 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x7363.valid){
continue;
}
IkReal x7362=x7363.value;
j1array[0]=((-1.0)*x7362);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x7362)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x7364=IKsin(j1);
IkReal x7365=IKcos(j1);
IkReal x7366=((0.045)*x7365);
evalcond[0]=((((0.3)*cj3*x7364))+(((-1.0)*x7366))+(((0.55)*x7364))+(((-0.3)*sj3*x7365))+(((0.045)*sj3*x7364))+((cj3*x7366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7367=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x7367;
evalcond[3]=((-1.0)*x7367);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7368=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x7368)));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x7368)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7369=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*x7369)));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=0;
evalcond[6]=((-0.2125)+(((-1.0)*x7369)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7370=((1.0)*pp);
evalcond[0]=IKabs(px);
evalcond[1]=((0.7225)+(((-1.0)*x7370)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7370)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7371=((1.0)*pp);
evalcond[0]=((IKabs(IKabs(px)))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*x7371)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7371)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7372=((1.0)*pp);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)))))+(IKabs(IKabs(px))));
evalcond[1]=((0.7225)+(((-1.0)*x7372)));
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=((-0.2125)+(((-1.0)*x7372)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7376=IKPowWithIntegerCheck(cj0,-1);
if(!x7376.valid){
continue;
}
IkReal x7373=x7376.value;
CheckValue<IkReal> x7377=IKPowWithIntegerCheck(px,-1);
if(!x7377.valid){
continue;
}
IkReal x7374=x7377.value;
IkReal x7375=(x7373*x7374);
if( IKabs(((0.85)*x7375)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0555555555555556)*x7375*(((144.5)+(((-200.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.85)*x7375))+IKsqr(((0.0555555555555556)*x7375*(((144.5)+(((-200.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.85)*x7375), ((0.0555555555555556)*x7375*(((144.5)+(((-200.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7378=IKcos(j1);
IkReal x7379=IKsin(j1);
IkReal x7380=(cj0*px);
evalcond[0]=((-0.85)*x7378);
evalcond[1]=(x7378*x7380);
evalcond[2]=((-0.85)+((x7379*x7380)));
evalcond[3]=((((-1.0)*x7380))+(((0.85)*x7379)));
evalcond[4]=((-0.2125)+(((-0.09)*x7378*x7380))+(((-1.0)*pp))+(((1.1)*x7379*x7380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7381=IKPowWithIntegerCheck(cj0,-1);
if(!x7381.valid){
continue;
}
CheckValue<IkReal> x7382=IKPowWithIntegerCheck(px,-1);
if(!x7382.valid){
continue;
}
if( IKabs(((1.17647058823529)*cj0*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0065359477124183)*(x7381.value)*(x7382.value)*(((-361.25)+(((2200.0)*(cj0*cj0)*(px*px)))+(((-1700.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.17647058823529)*cj0*px))+IKsqr(((0.0065359477124183)*(x7381.value)*(x7382.value)*(((-361.25)+(((2200.0)*(cj0*cj0)*(px*px)))+(((-1700.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.17647058823529)*cj0*px), ((0.0065359477124183)*(x7381.value)*(x7382.value)*(((-361.25)+(((2200.0)*(cj0*cj0)*(px*px)))+(((-1700.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7383=IKcos(j1);
IkReal x7384=IKsin(j1);
IkReal x7385=(cj0*px);
evalcond[0]=((-0.85)*x7383);
evalcond[1]=(x7383*x7385);
evalcond[2]=((-0.85)+((x7384*x7385)));
evalcond[3]=((((0.85)*x7384))+(((-1.0)*x7385)));
evalcond[4]=((-0.2125)+(((1.1)*x7384*x7385))+(((-1.0)*pp))+(((-0.09)*x7383*x7385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7386=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x7386))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=px;
evalcond[4]=((-1.0)*px);
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x7386)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x7388 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x7388.valid){
continue;
}
IkReal x7387=x7388.value;
j1array[0]=((-1.0)*x7387);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x7387)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x7389=IKsin(j1);
IkReal x7390=IKcos(j1);
IkReal x7391=((0.045)*x7390);
evalcond[0]=((((0.3)*cj3*x7389))+((cj3*x7391))+(((0.045)*sj3*x7389))+(((-0.3)*sj3*x7390))+(((-1.0)*x7391))+(((0.55)*x7389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7392=((1.0)*pp);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x7392))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[3]=((-1.0)*px);
evalcond[4]=px;
evalcond[5]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[6]=((-0.2125)+(((-1.0)*x7392)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x7394 = IKatan2WithCheck(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))),((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x7394.valid){
continue;
}
IkReal x7393=x7394.value;
j1array[0]=((-1.0)*x7393);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x7393)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x7395=IKsin(j1);
IkReal x7396=IKcos(j1);
IkReal x7397=((0.045)*x7396);
evalcond[0]=((((0.045)*sj3*x7395))+((cj3*x7397))+(((-0.3)*sj3*x7396))+(((0.3)*cj3*x7395))+(((-1.0)*x7397))+(((0.55)*x7395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7398=(cj0*px);
IkReal x7399=((0.3)*sj3);
IkReal x7400=(py*sj0);
IkReal x7401=((0.045)*cj3);
CheckValue<IkReal> x7402=IKPowWithIntegerCheck(((((-1.0)*x7399*x7400))+(((-1.0)*x7398*x7399))+((x7400*x7401))+((x7398*x7401))+(((-0.045)*x7398))+(((-0.045)*x7400))),-1);
if(!x7402.valid){
continue;
}
CheckValue<IkReal> x7403=IKPowWithIntegerCheck((x7398+x7400),-1);
if(!x7403.valid){
continue;
}
if( IKabs(((x7402.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7403.value)*(((-0.045)+x7401+(((-1.0)*x7399)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7402.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))))+IKsqr(((x7403.value)*(((-0.045)+x7401+(((-1.0)*x7399))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7402.value)*(((-0.02475)+(((0.01125)*cj3))+(((-0.0135)*(sj3*sj3)))+(((-0.167025)*sj3))+(((0.0135)*(cj3*cj3)))+(((-0.087975)*cj3*sj3))))), ((x7403.value)*(((-0.045)+x7401+(((-1.0)*x7399))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7404=IKsin(j1);
IkReal x7405=IKcos(j1);
IkReal x7406=((0.3)*cj3);
IkReal x7407=((0.045)*cj3);
IkReal x7408=(cj0*px);
IkReal x7409=(py*sj0);
IkReal x7410=((0.045)*sj3);
IkReal x7411=((0.3)*sj3);
IkReal x7412=((0.045)*x7404);
IkReal x7413=((0.09)*x7405);
IkReal x7414=((1.1)*x7404);
evalcond[0]=((-0.55)+(((-1.0)*x7406))+(((-1.0)*x7410))+((x7404*x7408))+((x7404*x7409)));
evalcond[1]=((0.045)+(((-1.0)*x7407))+((x7405*x7408))+((x7405*x7409))+x7411);
evalcond[2]=((-0.2125)+(((-1.0)*x7409*x7413))+(((-1.0)*pp))+(((-1.0)*x7408*x7413))+((x7409*x7414))+((x7408*x7414)));
evalcond[3]=((((-1.0)*x7405*x7406))+(((-1.0)*x7412))+(((-1.0)*x7405*x7410))+((x7404*x7407))+(((-1.0)*x7404*x7411))+(((-0.55)*x7405)));
evalcond[4]=((((-1.0)*x7405*x7411))+((x7404*x7406))+((x7404*x7410))+((x7405*x7407))+(((-1.0)*x7409))+(((-1.0)*x7408))+(((-0.045)*x7405))+(((0.55)*x7404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7415=(cj0*px);
IkReal x7416=((0.045)*sj3);
IkReal x7417=(py*sj0);
IkReal x7418=((0.3)*cj3);
CheckValue<IkReal> x7419=IKPowWithIntegerCheck((x7417+x7415),-1);
if(!x7419.valid){
continue;
}
CheckValue<IkReal> x7420=IKPowWithIntegerCheck(((((-1.0)*x7415*x7416))+(((-1.0)*x7415*x7418))+(((-1.0)*x7416*x7417))+(((-1.0)*x7417*x7418))+(((-0.55)*x7415))+(((-0.55)*x7417))),-1);
if(!x7420.valid){
continue;
}
if( IKabs(((x7419.value)*(((0.55)+x7416+x7418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7420.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7419.value)*(((0.55)+x7416+x7418))))+IKsqr(((x7420.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7419.value)*(((0.55)+x7416+x7418))), ((x7420.value)*(((0.02475)+(((-0.01125)*cj3))+(((0.0135)*(sj3*sj3)))+(((0.087975)*cj3*sj3))+(((0.167025)*sj3))+(((-0.0135)*(cj3*cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7421=IKsin(j1);
IkReal x7422=IKcos(j1);
IkReal x7423=((0.3)*cj3);
IkReal x7424=((0.045)*cj3);
IkReal x7425=(cj0*px);
IkReal x7426=(py*sj0);
IkReal x7427=((0.045)*sj3);
IkReal x7428=((0.3)*sj3);
IkReal x7429=((0.045)*x7421);
IkReal x7430=((0.09)*x7422);
IkReal x7431=((1.1)*x7421);
evalcond[0]=((-0.55)+(((-1.0)*x7427))+(((-1.0)*x7423))+((x7421*x7425))+((x7421*x7426)));
evalcond[1]=((0.045)+(((-1.0)*x7424))+((x7422*x7426))+((x7422*x7425))+x7428);
evalcond[2]=((-0.2125)+((x7425*x7431))+((x7426*x7431))+(((-1.0)*pp))+(((-1.0)*x7425*x7430))+(((-1.0)*x7426*x7430)));
evalcond[3]=((((-1.0)*x7421*x7428))+(((-1.0)*x7422*x7427))+(((-1.0)*x7422*x7423))+(((-0.55)*x7422))+(((-1.0)*x7429))+((x7421*x7424)));
evalcond[4]=((((-1.0)*x7426))+(((-1.0)*x7425))+(((-1.0)*x7422*x7428))+(((-0.045)*x7422))+(((0.55)*x7421))+((x7421*x7427))+((x7421*x7423))+((x7422*x7424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7432 = IKatan2WithCheck((gconst113*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst113*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x7432.valid){
continue;
}
j1array[0]=x7432.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x7433=IKsin(j1);
IkReal x7434=IKcos(j1);
IkReal x7435=((0.3)*cj3);
IkReal x7436=((0.045)*cj3);
IkReal x7437=(cj0*px);
IkReal x7438=(py*sj0);
IkReal x7439=((0.045)*sj3);
IkReal x7440=((0.3)*sj3);
IkReal x7441=((0.045)*x7433);
IkReal x7442=((0.09)*x7434);
IkReal x7443=((1.1)*x7433);
evalcond[0]=((-0.55)+(((-1.0)*x7435))+(((-1.0)*x7439))+((x7433*x7437))+((x7433*x7438)));
evalcond[1]=((0.045)+(((-1.0)*x7436))+((x7434*x7437))+((x7434*x7438))+x7440);
evalcond[2]=((-0.2125)+(((-1.0)*x7437*x7442))+((x7438*x7443))+(((-1.0)*x7438*x7442))+(((-1.0)*pp))+((x7437*x7443)));
evalcond[3]=((((-1.0)*x7441))+(((-1.0)*x7433*x7440))+(((-0.55)*x7434))+(((-1.0)*x7434*x7435))+(((-1.0)*x7434*x7439))+((x7433*x7436)));
evalcond[4]=((((-1.0)*x7438))+(((-1.0)*x7437))+(((-0.045)*x7434))+(((0.55)*x7433))+((x7433*x7435))+((x7433*x7439))+(((-1.0)*x7434*x7440))+((x7434*x7436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7444=(cj2*pz);
IkReal x7445=((1.0)*cj0);
IkReal x7446=(cj0*px);
IkReal x7447=(py*sj0);
IkReal x7448=((0.55)*sj2);
IkReal x7449=(cj2*sj0);
IkReal x7450=((0.3)*cj3*sj2);
IkReal x7451=((0.045)*sj2*sj3);
IkReal x7452=(cj2*px*py);
CheckValue<IkReal> x7453 = IKatan2WithCheck((gconst67*(((((-1.0)*py*x7444*x7445))+((x7446*x7451))+((x7446*x7450))+((x7446*x7448))+((x7447*x7451))+((x7447*x7450))+((x7447*x7448))+((px*sj0*x7444))))),(gconst67*((((pz*x7448))+(((-1.0)*px*x7447*x7449))+((cj0*cj2*py*x7446))+((cj0*cj2*py*x7447))+(((-1.0)*x7445*x7449*(px*px)))+((pz*x7451))+((pz*x7450))))),IKFAST_ATAN2_MAGTHRESH);
if(!x7453.valid){
continue;
}
j1array[0]=x7453.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x7454=IKsin(j1);
IkReal x7455=IKcos(j1);
IkReal x7456=(px*sj2);
IkReal x7457=((0.3)*sj3);
IkReal x7458=((0.09)*sj0);
IkReal x7459=(cj2*px);
IkReal x7460=((0.045)*cj3);
IkReal x7461=((0.045)*cj2);
IkReal x7462=(py*sj0);
IkReal x7463=((0.045)*sj3);
IkReal x7464=((1.0)*cj0);
IkReal x7465=((0.3)*cj3);
IkReal x7466=(py*sj2);
IkReal x7467=(cj0*x7455);
IkReal x7468=(cj3*x7454);
IkReal x7469=(cj2*x7455);
IkReal x7470=(cj2*x7454);
IkReal x7471=(pz*x7455);
IkReal x7472=(cj0*px*x7454);
evalcond[0]=((-0.55)+((x7454*x7462))+(((-1.0)*x7465))+(((-1.0)*x7463))+x7471+x7472);
evalcond[1]=(((x7456*x7467))+((sj2*x7455*x7462))+((sj0*x7459))+(((-1.0)*pz*sj2*x7454))+(((-1.0)*cj2*py*x7464)));
evalcond[2]=((((-1.0)*x7460*x7470))+((x7457*x7470))+(((-1.0)*x7455*x7465))+(((-1.0)*x7455*x7463))+pz+((x7454*x7461))+(((-0.55)*x7455)));
evalcond[3]=((0.045)+((pz*x7470))+((sj0*x7456))+(((-1.0)*x7464*x7466))+(((-1.0)*x7455*x7459*x7464))+(((-1.0)*x7462*x7469))+(((-1.0)*x7460))+x7457);
evalcond[4]=(((x7457*x7469))+(((-1.0)*x7460*x7469))+((x7454*x7463))+((x7454*x7465))+(((-1.0)*px*x7464))+((x7455*x7461))+(((0.55)*x7454))+(((-1.0)*x7462)));
evalcond[5]=((-0.2125)+(((-1.0)*x7456*x7458))+(((1.1)*x7471))+(((1.1)*x7472))+(((0.09)*cj0*x7466))+(((0.09)*x7459*x7467))+(((-1.0)*pp))+(((-0.09)*pz*x7470))+((py*x7458*x7469))+(((1.1)*x7454*x7462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7473=cj3*cj3;
IkReal x7474=sj3*sj3;
IkReal x7475=(cj2*sj3);
IkReal x7476=((0.0135)*cj2);
IkReal x7477=((1.0)*pz);
CheckValue<IkReal> x7478 = IKatan2WithCheck((gconst66*(((-0.3025)+(((-0.0495)*sj3))+(((-0.09)*x7473))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.002025)*x7474))+(((-0.33)*cj3))))),(gconst66*(((((-0.167025)*x7475))+(((-0.02475)*cj2))+(((-1.0)*x7474*x7476))+(((-1.0)*py*sj0*x7477))+(((-1.0)*cj0*px*x7477))+((x7473*x7476))+(((0.01125)*cj2*cj3))+(((-0.087975)*cj3*x7475))))),IKFAST_ATAN2_MAGTHRESH);
if(!x7478.valid){
continue;
}
j1array[0]=x7478.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x7479=IKsin(j1);
IkReal x7480=IKcos(j1);
IkReal x7481=(px*sj2);
IkReal x7482=((0.3)*sj3);
IkReal x7483=((0.09)*sj0);
IkReal x7484=(cj2*px);
IkReal x7485=((0.045)*cj3);
IkReal x7486=((0.045)*cj2);
IkReal x7487=(py*sj0);
IkReal x7488=((0.045)*sj3);
IkReal x7489=((1.0)*cj0);
IkReal x7490=((0.3)*cj3);
IkReal x7491=(py*sj2);
IkReal x7492=(cj0*x7480);
IkReal x7493=(cj3*x7479);
IkReal x7494=(cj2*x7480);
IkReal x7495=(cj2*x7479);
IkReal x7496=(pz*x7480);
IkReal x7497=(cj0*px*x7479);
evalcond[0]=((-0.55)+(((-1.0)*x7490))+(((-1.0)*x7488))+x7496+x7497+((x7479*x7487)));
evalcond[1]=((((-1.0)*cj2*py*x7489))+((sj0*x7484))+(((-1.0)*pz*sj2*x7479))+((sj2*x7480*x7487))+((x7481*x7492)));
evalcond[2]=((((-1.0)*x7480*x7490))+(((-1.0)*x7480*x7488))+(((-0.55)*x7480))+pz+((x7482*x7495))+(((-1.0)*x7485*x7495))+((x7479*x7486)));
evalcond[3]=((0.045)+(((-1.0)*x7489*x7491))+((sj0*x7481))+(((-1.0)*x7485))+((pz*x7495))+x7482+(((-1.0)*x7480*x7484*x7489))+(((-1.0)*x7487*x7494)));
evalcond[4]=((((0.55)*x7479))+((x7480*x7486))+(((-1.0)*x7487))+((x7482*x7494))+(((-1.0)*x7485*x7494))+((x7479*x7490))+(((-1.0)*px*x7489))+((x7479*x7488)));
evalcond[5]=((-0.2125)+(((-1.0)*x7481*x7483))+((py*x7483*x7494))+(((0.09)*cj0*x7491))+(((1.1)*x7479*x7487))+(((0.09)*x7484*x7492))+(((-1.0)*pp))+(((-0.09)*pz*x7495))+(((1.1)*x7497))+(((1.1)*x7496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x95=((1.0)*cj3);
IkReal x96=(sj0*sj2);
IkReal x97=(cj2*sj1);
IkReal x98=((1.0)*sj3);
IkReal x99=(cj1*cj2);
IkReal x100=(sj1*sj2);
IkReal x101=(cj0*sj2);
IkReal x102=((1.0)*cj1);
IkReal x103=((((-1.0)*sj1*x98))+((cj3*x99)));
IkReal x104=((((-1.0)*x102*x96))+((cj0*cj2)));
IkReal x105=(((sj3*x99))+((cj3*sj1)));
IkReal x106=(((cj1*cj3))+(((-1.0)*x97*x98)));
IkReal x107=(cj0*x103);
IkReal x108=((((-1.0)*x95*x97))+(((-1.0)*cj1*x98)));
IkReal x109=((((-1.0)*x101*x102))+(((-1.0)*cj2*sj0)));
IkReal x110=(((cj3*x101))+((sj0*x103)));
IkReal x111=(((cj0*x105))+(((-1.0)*x96*x98)));
IkReal x112=(((sj3*x101))+((sj0*x105)));
IkReal x113=(x107+(((-1.0)*cj3*x96)));
new_r00=(((r10*x110))+((r00*(((((-1.0)*x95*x96))+x107))))+((r20*x108)));
new_r01=(((r21*x108))+((r11*x110))+((r01*x113)));
new_r02=(((r02*x113))+((r22*x108))+((r12*x110)));
new_r10=(((r10*x104))+((r20*x100))+((r00*x109)));
new_r11=(((r21*x100))+((r01*x109))+((r11*x104)));
new_r12=(((r02*x109))+((r22*x100))+((r12*x104)));
new_r20=(((r10*x112))+((r20*x106))+((r00*x111)));
new_r21=(((r21*x106))+((r11*x112))+((r01*x111)));
new_r22=(((r02*x111))+((r22*x106))+((r12*x112)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst138;
gconst138=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst139;
gconst139=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst140;
gconst140=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x114=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x114;
evalcond[2]=x114;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r20);
evalcond[10]=((-1.0)*new_r21);
evalcond[11]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
IkReal j4mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x115=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x115;
evalcond[2]=x115;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x115;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x117 = IKatan2WithCheck(new_r02,new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x117.valid){
continue;
}
IkReal x116=x117.value;
j4array[0]=((-1.0)*x116);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x116)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst174;
gconst174=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst175;
gconst175=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x118=((1.0)*new_r00);
CheckValue<IkReal> x119 = IKatan2WithCheck((gconst175*((((cj4*new_r10))+(((-1.0)*sj4*x118))))),(gconst175*(((((-1.0)*cj4*x118))+(((-1.0)*new_r10*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x119.valid){
continue;
}
j6array[0]=x119.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x120=IKcos(j6);
IkReal x121=IKsin(j6);
IkReal x122=((1.0)*sj4);
IkReal x123=((1.0)*x121);
IkReal x124=(sj4*x120);
IkReal x125=((1.0)*x120);
IkReal x126=(cj4*x123);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x120);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x123)));
evalcond[2]=(((sj4*x121))+new_r00+((cj4*x120)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x122))+(((-1.0)*x123)));
evalcond[4]=((((-1.0)*new_r01*x122))+((cj4*new_r11))+(((-1.0)*x125)));
evalcond[5]=((((-1.0)*x126))+x124+new_r01);
evalcond[6]=((((-1.0)*x126))+x124+new_r10);
evalcond[7]=((((-1.0)*x121*x122))+(((-1.0)*cj4*x125))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x127=((1.0)*new_r00);
CheckValue<IkReal> x128 = IKatan2WithCheck((gconst174*((((cj4*new_r01))+(((-1.0)*sj4*x127))))),(gconst174*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x127))))),IKFAST_ATAN2_MAGTHRESH);
if(!x128.valid){
continue;
}
j6array[0]=x128.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x129=IKcos(j6);
IkReal x130=IKsin(j6);
IkReal x131=((1.0)*sj4);
IkReal x132=((1.0)*x130);
IkReal x133=(sj4*x129);
IkReal x134=((1.0)*x129);
IkReal x135=(cj4*x132);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x129);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x132)));
evalcond[2]=(((sj4*x130))+new_r00+((cj4*x129)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x131))+(((-1.0)*x132)));
evalcond[4]=((((-1.0)*new_r01*x131))+((cj4*new_r11))+(((-1.0)*x134)));
evalcond[5]=(x133+(((-1.0)*x135))+new_r01);
evalcond[6]=(x133+(((-1.0)*x135))+new_r10);
evalcond[7]=(new_r11+(((-1.0)*cj4*x134))+(((-1.0)*x130*x131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x136 = IKatan2WithCheck((gconst140*new_r21),((-1.0)*gconst140*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x136.valid){
continue;
}
j6array[0]=x136.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=(new_r20+((sj5*(IKcos(j6)))));
evalcond[1]=((((-1.0)*sj5*(IKsin(j6))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst141;
gconst141=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst142;
gconst142=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x137=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x137;
evalcond[2]=x137;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r20);
evalcond[10]=((-1.0)*new_r21);
evalcond[11]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst143;
gconst143=IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11))));
dummyeval[0]=(((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst144;
gconst144=IKsign((((new_r12*sj6))+(((-1.0)*cj6*new_r02))));
dummyeval[0]=(((new_r12*sj6))+(((-1.0)*cj6*new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal gconst145;
CheckValue<IkReal> x138 = IKatan2WithCheck(((-1.0)*new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x138.valid){
continue;
}
gconst145=((-1.0)*(x138.value));
IkReal gconst146;
gconst146=IKsin(gconst145);
IkReal gconst147;
gconst147=IKcos(gconst145);
IkReal x139=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst145))+j6)))), 6.28318530717959)));
evalcond[1]=x139;
evalcond[2]=x139;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r20);
evalcond[10]=((-1.0)*new_r21);
evalcond[11]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst151;
gconst151=IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11))));
dummyeval[0]=(((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst152;
gconst152=IKsign((((gconst146*new_r12))+(((-1.0)*gconst147*new_r02))));
dummyeval[0]=(((gconst146*new_r12))+(((-1.0)*gconst147*new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x140=(gconst152*new_r01);
CheckValue<IkReal> x141 = IKatan2WithCheck((new_r02*x140),((-1.0)*new_r12*x140),IKFAST_ATAN2_MAGTHRESH);
if(!x141.valid){
continue;
}
j4array[0]=x141.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x142=IKcos(j4);
IkReal x143=IKsin(j4);
IkReal x144=((1.0)*gconst147);
IkReal x145=(gconst146*x143);
IkReal x146=(gconst146*x142);
IkReal x147=((1.0)*x143);
IkReal x148=(x142*x144);
evalcond[0]=(((new_r12*x143))+((new_r02*x142)));
evalcond[1]=(((new_r12*x142))+(((-1.0)*new_r02*x147)));
evalcond[2]=(((new_r01*x142))+((new_r11*x143))+gconst146);
evalcond[3]=(((gconst147*x143))+x146+new_r01);
evalcond[4]=((((-1.0)*x148))+x145+new_r00);
evalcond[5]=((((-1.0)*x148))+x145+new_r11);
evalcond[6]=((((-1.0)*x144))+((new_r00*x142))+((new_r10*x143)));
evalcond[7]=((((-1.0)*x143*x144))+(((-1.0)*x146))+new_r10);
evalcond[8]=(((new_r10*x142))+(((-1.0)*gconst146))+(((-1.0)*new_r00*x147)));
evalcond[9]=((((-1.0)*new_r01*x147))+(((-1.0)*x144))+((new_r11*x142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x149=(gconst146*gconst151);
CheckValue<IkReal> x150 = IKatan2WithCheck((new_r02*x149),((-1.0)*new_r12*x149),IKFAST_ATAN2_MAGTHRESH);
if(!x150.valid){
continue;
}
j4array[0]=x150.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x151=IKcos(j4);
IkReal x152=IKsin(j4);
IkReal x153=((1.0)*gconst147);
IkReal x154=(gconst146*x152);
IkReal x155=(gconst146*x151);
IkReal x156=((1.0)*x152);
IkReal x157=(x151*x153);
evalcond[0]=(((new_r12*x152))+((new_r02*x151)));
evalcond[1]=(((new_r12*x151))+(((-1.0)*new_r02*x156)));
evalcond[2]=(((new_r01*x151))+((new_r11*x152))+gconst146);
evalcond[3]=(((gconst147*x152))+x155+new_r01);
evalcond[4]=((((-1.0)*x157))+x154+new_r00);
evalcond[5]=((((-1.0)*x157))+x154+new_r11);
evalcond[6]=((((-1.0)*x153))+((new_r00*x151))+((new_r10*x152)));
evalcond[7]=((((-1.0)*x152*x153))+(((-1.0)*x155))+new_r10);
evalcond[8]=(((new_r10*x151))+(((-1.0)*gconst146))+(((-1.0)*new_r00*x156)));
evalcond[9]=((((-1.0)*x153))+((new_r11*x151))+(((-1.0)*new_r01*x156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst148;
CheckValue<IkReal> x158 = IKatan2WithCheck(((-1.0)*new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x158.valid){
continue;
}
gconst148=((3.14159265358979)+(((-1.0)*(x158.value))));
IkReal gconst149;
gconst149=IKsin(gconst148);
IkReal gconst150;
gconst150=IKcos(gconst148);
IkReal x159=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst148))+j6)))), 6.28318530717959)));
evalcond[1]=x159;
evalcond[2]=x159;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r20);
evalcond[10]=((-1.0)*new_r21);
evalcond[11]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst153;
gconst153=IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11))));
dummyeval[0]=(((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst154;
gconst154=IKsign((((gconst149*new_r12))+(((-1.0)*gconst150*new_r02))));
dummyeval[0]=(((gconst149*new_r12))+(((-1.0)*gconst150*new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x160=(gconst154*new_r01);
CheckValue<IkReal> x161 = IKatan2WithCheck((new_r02*x160),((-1.0)*new_r12*x160),IKFAST_ATAN2_MAGTHRESH);
if(!x161.valid){
continue;
}
j4array[0]=x161.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x162=IKcos(j4);
IkReal x163=IKsin(j4);
IkReal x164=((1.0)*gconst150);
IkReal x165=((1.0)*gconst149);
IkReal x166=(gconst149*x163);
IkReal x167=(gconst150*x163);
IkReal x168=((1.0)*x163);
IkReal x169=(x162*x164);
evalcond[0]=(((new_r12*x163))+((new_r02*x162)));
evalcond[1]=(((new_r12*x162))+(((-1.0)*new_r02*x168)));
evalcond[2]=(((new_r01*x162))+((new_r11*x163))+gconst149);
evalcond[3]=(((gconst149*x162))+x167+new_r01);
evalcond[4]=((((-1.0)*x169))+x166+new_r00);
evalcond[5]=((((-1.0)*x169))+x166+new_r11);
evalcond[6]=(((new_r00*x162))+(((-1.0)*x164))+((new_r10*x163)));
evalcond[7]=((((-1.0)*x163*x164))+(((-1.0)*x162*x165))+new_r10);
evalcond[8]=((((-1.0)*new_r00*x168))+(((-1.0)*x165))+((new_r10*x162)));
evalcond[9]=(((new_r11*x162))+(((-1.0)*x164))+(((-1.0)*new_r01*x168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x170=(gconst149*gconst153);
CheckValue<IkReal> x171 = IKatan2WithCheck((new_r02*x170),((-1.0)*new_r12*x170),IKFAST_ATAN2_MAGTHRESH);
if(!x171.valid){
continue;
}
j4array[0]=x171.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x172=IKcos(j4);
IkReal x173=IKsin(j4);
IkReal x174=((1.0)*gconst150);
IkReal x175=((1.0)*gconst149);
IkReal x176=(gconst149*x173);
IkReal x177=(gconst150*x173);
IkReal x178=((1.0)*x173);
IkReal x179=(x172*x174);
evalcond[0]=(((new_r02*x172))+((new_r12*x173)));
evalcond[1]=(((new_r12*x172))+(((-1.0)*new_r02*x178)));
evalcond[2]=(((new_r01*x172))+((new_r11*x173))+gconst149);
evalcond[3]=(((gconst149*x172))+x177+new_r01);
evalcond[4]=((((-1.0)*x179))+x176+new_r00);
evalcond[5]=((((-1.0)*x179))+x176+new_r11);
evalcond[6]=(((new_r00*x172))+((new_r10*x173))+(((-1.0)*x174)));
evalcond[7]=(new_r10+(((-1.0)*x172*x175))+(((-1.0)*x173*x174)));
evalcond[8]=(((new_r10*x172))+(((-1.0)*x175))+(((-1.0)*new_r00*x178)));
evalcond[9]=(((new_r11*x172))+(((-1.0)*x174))+(((-1.0)*new_r01*x178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x180=(gconst144*new_r01);
CheckValue<IkReal> x181 = IKatan2WithCheck((new_r02*x180),((-1.0)*new_r12*x180),IKFAST_ATAN2_MAGTHRESH);
if(!x181.valid){
continue;
}
j4array[0]=x181.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x182=IKcos(j4);
IkReal x183=IKsin(j4);
IkReal x184=((1.0)*cj6);
IkReal x185=(sj6*x183);
IkReal x186=((1.0)*x182);
IkReal x187=(cj6*x183);
IkReal x188=((1.0)*x183);
IkReal x189=(x182*x184);
evalcond[0]=(((new_r02*x182))+((new_r12*x183)));
evalcond[1]=(((new_r12*x182))+(((-1.0)*new_r02*x188)));
evalcond[2]=(((new_r11*x183))+sj6+((new_r01*x182)));
evalcond[3]=(x187+((sj6*x182))+new_r01);
evalcond[4]=((((-1.0)*x189))+x185+new_r00);
evalcond[5]=((((-1.0)*x189))+x185+new_r11);
evalcond[6]=(((new_r10*x183))+((new_r00*x182))+(((-1.0)*x184)));
evalcond[7]=((((-1.0)*sj6*x186))+new_r10+(((-1.0)*x183*x184)));
evalcond[8]=(((new_r10*x182))+(((-1.0)*sj6))+(((-1.0)*new_r00*x188)));
evalcond[9]=(((new_r11*x182))+(((-1.0)*x184))+(((-1.0)*new_r01*x188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x190=(gconst143*sj6);
CheckValue<IkReal> x191 = IKatan2WithCheck((new_r02*x190),((-1.0)*new_r12*x190),IKFAST_ATAN2_MAGTHRESH);
if(!x191.valid){
continue;
}
j4array[0]=x191.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x192=IKcos(j4);
IkReal x193=IKsin(j4);
IkReal x194=((1.0)*cj6);
IkReal x195=(sj6*x193);
IkReal x196=((1.0)*x192);
IkReal x197=(cj6*x193);
IkReal x198=((1.0)*x193);
IkReal x199=(x192*x194);
evalcond[0]=(((new_r02*x192))+((new_r12*x193)));
evalcond[1]=(((new_r12*x192))+(((-1.0)*new_r02*x198)));
evalcond[2]=(((new_r11*x193))+((new_r01*x192))+sj6);
evalcond[3]=(x197+((sj6*x192))+new_r01);
evalcond[4]=((((-1.0)*x199))+x195+new_r00);
evalcond[5]=((((-1.0)*x199))+x195+new_r11);
evalcond[6]=(((new_r10*x193))+((new_r00*x192))+(((-1.0)*x194)));
evalcond[7]=((((-1.0)*sj6*x196))+new_r10+(((-1.0)*x193*x194)));
evalcond[8]=(((new_r10*x192))+(((-1.0)*sj6))+(((-1.0)*new_r00*x198)));
evalcond[9]=(((new_r11*x192))+(((-1.0)*x194))+(((-1.0)*new_r01*x198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x200=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x200;
evalcond[2]=x200;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x200;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst155;
gconst155=IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10))));
dummyeval[0]=(((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst156;
gconst156=IKsign(((((-1.0)*new_r02*sj6))+((cj6*new_r12))));
dummyeval[0]=((((-1.0)*new_r02*sj6))+((cj6*new_r12)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal gconst157;
CheckValue<IkReal> x201 = IKatan2WithCheck(new_r12,((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x201.valid){
continue;
}
gconst157=((-1.0)*(x201.value));
IkReal gconst158;
gconst158=IKsin(gconst157);
IkReal gconst159;
gconst159=IKcos(gconst157);
IkReal x202=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst157))+j6)))), 6.28318530717959)));
evalcond[1]=x202;
evalcond[2]=x202;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x202;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst163;
gconst163=IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10))));
dummyeval[0]=(((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst164;
gconst164=IKsign(((((-1.0)*gconst158*new_r02))+((gconst159*new_r12))));
dummyeval[0]=((((-1.0)*gconst158*new_r02))+((gconst159*new_r12)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x203=(gconst164*new_r00);
CheckValue<IkReal> x204 = IKatan2WithCheck((new_r02*x203),((-1.0)*new_r12*x203),IKFAST_ATAN2_MAGTHRESH);
if(!x204.valid){
continue;
}
j4array[0]=x204.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x205=IKcos(j4);
IkReal x206=IKsin(j4);
IkReal x207=((1.0)*gconst158);
IkReal x208=(gconst159*x206);
IkReal x209=(gconst159*x205);
IkReal x210=((1.0)*x206);
IkReal x211=(x205*x207);
evalcond[0]=(((new_r02*x205))+((new_r12*x206)));
evalcond[1]=((((-1.0)*new_r02*x210))+((new_r12*x205)));
evalcond[2]=(((new_r10*x206))+((new_r00*x205))+gconst159);
evalcond[3]=(((gconst158*x206))+x209+new_r00);
evalcond[4]=(x208+new_r01+(((-1.0)*x211)));
evalcond[5]=(x208+new_r10+(((-1.0)*x211)));
evalcond[6]=(((new_r11*x206))+((new_r01*x205))+(((-1.0)*x207)));
evalcond[7]=((((-1.0)*x206*x207))+new_r11+(((-1.0)*x209)));
evalcond[8]=(((new_r10*x205))+(((-1.0)*x207))+(((-1.0)*new_r00*x210)));
evalcond[9]=(((new_r11*x205))+(((-1.0)*gconst159))+(((-1.0)*new_r01*x210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x212=(gconst159*gconst163);
CheckValue<IkReal> x213 = IKatan2WithCheck((new_r02*x212),((-1.0)*new_r12*x212),IKFAST_ATAN2_MAGTHRESH);
if(!x213.valid){
continue;
}
j4array[0]=x213.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x214=IKcos(j4);
IkReal x215=IKsin(j4);
IkReal x216=((1.0)*gconst158);
IkReal x217=(gconst159*x215);
IkReal x218=(gconst159*x214);
IkReal x219=((1.0)*x215);
IkReal x220=(x214*x216);
evalcond[0]=(((new_r02*x214))+((new_r12*x215)));
evalcond[1]=((((-1.0)*new_r02*x219))+((new_r12*x214)));
evalcond[2]=(((new_r00*x214))+gconst159+((new_r10*x215)));
evalcond[3]=(((gconst158*x215))+x218+new_r00);
evalcond[4]=(x217+new_r01+(((-1.0)*x220)));
evalcond[5]=(x217+new_r10+(((-1.0)*x220)));
evalcond[6]=(((new_r01*x214))+(((-1.0)*x216))+((new_r11*x215)));
evalcond[7]=((((-1.0)*x218))+new_r11+(((-1.0)*x215*x216)));
evalcond[8]=((((-1.0)*x216))+(((-1.0)*new_r00*x219))+((new_r10*x214)));
evalcond[9]=((((-1.0)*gconst159))+(((-1.0)*new_r01*x219))+((new_r11*x214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst160;
CheckValue<IkReal> x221 = IKatan2WithCheck(new_r12,((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x221.valid){
continue;
}
gconst160=((3.14159265358979)+(((-1.0)*(x221.value))));
IkReal gconst161;
gconst161=IKsin(gconst160);
IkReal gconst162;
gconst162=IKcos(gconst160);
IkReal x222=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst160))+j6)))), 6.28318530717959)));
evalcond[1]=x222;
evalcond[2]=x222;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x222;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst165;
gconst165=IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10))));
dummyeval[0]=(((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst166;
gconst166=IKsign(((((-1.0)*gconst161*new_r02))+((gconst162*new_r12))));
dummyeval[0]=((((-1.0)*gconst161*new_r02))+((gconst162*new_r12)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x223=(gconst166*new_r00);
CheckValue<IkReal> x224 = IKatan2WithCheck((new_r02*x223),((-1.0)*new_r12*x223),IKFAST_ATAN2_MAGTHRESH);
if(!x224.valid){
continue;
}
j4array[0]=x224.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x225=IKcos(j4);
IkReal x226=IKsin(j4);
IkReal x227=((1.0)*gconst161);
IkReal x228=(gconst162*x226);
IkReal x229=(gconst162*x225);
IkReal x230=(gconst161*x226);
IkReal x231=((1.0)*x226);
IkReal x232=(x225*x227);
evalcond[0]=(((new_r02*x225))+((new_r12*x226)));
evalcond[1]=((((-1.0)*new_r02*x231))+((new_r12*x225)));
evalcond[2]=(((new_r00*x225))+gconst162+((new_r10*x226)));
evalcond[3]=(x229+x230+new_r00);
evalcond[4]=((((-1.0)*x232))+x228+new_r01);
evalcond[5]=((((-1.0)*x232))+x228+new_r10);
evalcond[6]=(((new_r01*x225))+((new_r11*x226))+(((-1.0)*x227)));
evalcond[7]=(new_r11+(((-1.0)*x226*x227))+(((-1.0)*x229)));
evalcond[8]=(((new_r10*x225))+(((-1.0)*new_r00*x231))+(((-1.0)*x227)));
evalcond[9]=((((-1.0)*gconst162))+((new_r11*x225))+(((-1.0)*new_r01*x231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x233=(gconst162*gconst165);
CheckValue<IkReal> x234 = IKatan2WithCheck((new_r02*x233),((-1.0)*new_r12*x233),IKFAST_ATAN2_MAGTHRESH);
if(!x234.valid){
continue;
}
j4array[0]=x234.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x235=IKcos(j4);
IkReal x236=IKsin(j4);
IkReal x237=((1.0)*gconst161);
IkReal x238=(gconst162*x236);
IkReal x239=(gconst162*x235);
IkReal x240=(gconst161*x236);
IkReal x241=((1.0)*x236);
IkReal x242=(x235*x237);
evalcond[0]=(((new_r02*x235))+((new_r12*x236)));
evalcond[1]=(((new_r12*x235))+(((-1.0)*new_r02*x241)));
evalcond[2]=(((new_r10*x236))+((new_r00*x235))+gconst162);
evalcond[3]=(x239+x240+new_r00);
evalcond[4]=(x238+(((-1.0)*x242))+new_r01);
evalcond[5]=(x238+(((-1.0)*x242))+new_r10);
evalcond[6]=(((new_r11*x236))+((new_r01*x235))+(((-1.0)*x237)));
evalcond[7]=((((-1.0)*x236*x237))+new_r11+(((-1.0)*x239)));
evalcond[8]=(((new_r10*x235))+(((-1.0)*new_r00*x241))+(((-1.0)*x237)));
evalcond[9]=((((-1.0)*gconst162))+(((-1.0)*new_r01*x241))+((new_r11*x235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x243=(gconst156*new_r00);
CheckValue<IkReal> x244 = IKatan2WithCheck((new_r02*x243),((-1.0)*new_r12*x243),IKFAST_ATAN2_MAGTHRESH);
if(!x244.valid){
continue;
}
j4array[0]=x244.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x245=IKcos(j4);
IkReal x246=IKsin(j4);
IkReal x247=((1.0)*sj6);
IkReal x248=(cj6*x246);
IkReal x249=(cj6*x245);
IkReal x250=((1.0)*x246);
IkReal x251=(x245*x247);
evalcond[0]=(((new_r12*x246))+((new_r02*x245)));
evalcond[1]=(((new_r12*x245))+(((-1.0)*new_r02*x250)));
evalcond[2]=(cj6+((new_r00*x245))+((new_r10*x246)));
evalcond[3]=(x249+((sj6*x246))+new_r00);
evalcond[4]=(x248+new_r01+(((-1.0)*x251)));
evalcond[5]=(x248+new_r10+(((-1.0)*x251)));
evalcond[6]=(((new_r01*x245))+(((-1.0)*x247))+((new_r11*x246)));
evalcond[7]=((((-1.0)*x249))+new_r11+(((-1.0)*x246*x247)));
evalcond[8]=((((-1.0)*x247))+(((-1.0)*new_r00*x250))+((new_r10*x245)));
evalcond[9]=((((-1.0)*new_r01*x250))+((new_r11*x245))+(((-1.0)*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x252=(cj6*gconst155);
CheckValue<IkReal> x253 = IKatan2WithCheck((new_r02*x252),((-1.0)*new_r12*x252),IKFAST_ATAN2_MAGTHRESH);
if(!x253.valid){
continue;
}
j4array[0]=x253.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x254=IKcos(j4);
IkReal x255=IKsin(j4);
IkReal x256=((1.0)*sj6);
IkReal x257=(cj6*x255);
IkReal x258=(cj6*x254);
IkReal x259=((1.0)*x255);
IkReal x260=(x254*x256);
evalcond[0]=(((new_r02*x254))+((new_r12*x255)));
evalcond[1]=(((new_r12*x254))+(((-1.0)*new_r02*x259)));
evalcond[2]=(((new_r00*x254))+cj6+((new_r10*x255)));
evalcond[3]=(((sj6*x255))+x258+new_r00);
evalcond[4]=(x257+new_r01+(((-1.0)*x260)));
evalcond[5]=(x257+new_r10+(((-1.0)*x260)));
evalcond[6]=(((new_r01*x254))+((new_r11*x255))+(((-1.0)*x256)));
evalcond[7]=((((-1.0)*x255*x256))+new_r11+(((-1.0)*x258)));
evalcond[8]=(((new_r10*x254))+(((-1.0)*new_r00*x259))+(((-1.0)*x256)));
evalcond[9]=((((-1.0)*new_r01*x259))+((new_r11*x254))+(((-1.0)*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x261 = IKatan2WithCheck((gconst142*new_r12),(gconst142*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x261.valid){
continue;
}
j4array[0]=x261.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x262=IKcos(j4);
IkReal x263=IKsin(j4);
IkReal x264=((1.0)*cj6);
IkReal x265=(cj5*sj6);
IkReal x266=((1.0)*cj5);
IkReal x267=((1.0)*sj5);
IkReal x268=((1.0)*x262);
IkReal x269=(cj5*x263);
IkReal x270=(new_r11*x263);
IkReal x271=(cj5*x262);
IkReal x272=(new_r12*x263);
IkReal x273=(new_r10*x263);
IkReal x274=((1.0)*x263);
evalcond[0]=((((-1.0)*x262*x267))+new_r02);
evalcond[1]=((((-1.0)*x263*x267))+new_r12);
evalcond[2]=(((new_r12*x262))+(((-1.0)*new_r02*x274)));
evalcond[3]=(((x262*x265))+((cj6*x263))+new_r01);
evalcond[4]=(x272+(((-1.0)*x267))+((new_r02*x262)));
evalcond[5]=(x265+x270+((new_r01*x262)));
evalcond[6]=(((sj6*x263))+new_r00+(((-1.0)*x264*x271)));
evalcond[7]=((((-1.0)*x262*x264))+((x263*x265))+new_r11);
evalcond[8]=((((-1.0)*sj6))+(((-1.0)*new_r00*x274))+((new_r10*x262)));
evalcond[9]=((((-1.0)*new_r01*x274))+(((-1.0)*x264))+((new_r11*x262)));
evalcond[10]=((((-1.0)*cj5*x264))+x273+((new_r00*x262)));
evalcond[11]=((((-1.0)*sj6*x268))+new_r10+(((-1.0)*x264*x269)));
evalcond[12]=(((new_r12*x269))+(((-1.0)*new_r22*x267))+((new_r02*x271)));
evalcond[13]=(sj6+(((-1.0)*new_r21*x267))+((new_r01*x271))+((new_r11*x269)));
evalcond[14]=((((-1.0)*new_r00*x262*x267))+(((-1.0)*new_r20*x266))+(((-1.0)*x267*x273)));
evalcond[15]=((((-1.0)*new_r01*x262*x267))+(((-1.0)*new_r21*x266))+(((-1.0)*x267*x270)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x266))+(((-1.0)*new_r02*x262*x267))+(((-1.0)*x267*x272)));
evalcond[17]=((((-1.0)*new_r20*x267))+((new_r00*x271))+(((-1.0)*x264))+((new_r10*x269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x275 = IKatan2WithCheck((gconst141*new_r12),(gconst141*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x275.valid){
continue;
}
j4array[0]=x275.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x276=IKcos(j4);
IkReal x277=IKsin(j4);
IkReal x278=((1.0)*cj6);
IkReal x279=(cj5*sj6);
IkReal x280=((1.0)*cj5);
IkReal x281=((1.0)*sj5);
IkReal x282=((1.0)*x276);
IkReal x283=(cj5*x277);
IkReal x284=(new_r11*x277);
IkReal x285=(cj5*x276);
IkReal x286=(new_r12*x277);
IkReal x287=(new_r10*x277);
IkReal x288=((1.0)*x277);
evalcond[0]=((((-1.0)*x276*x281))+new_r02);
evalcond[1]=((((-1.0)*x277*x281))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x288))+((new_r12*x276)));
evalcond[3]=(new_r01+((cj6*x277))+((x276*x279)));
evalcond[4]=(x286+(((-1.0)*x281))+((new_r02*x276)));
evalcond[5]=(x279+x284+((new_r01*x276)));
evalcond[6]=(((sj6*x277))+new_r00+(((-1.0)*x278*x285)));
evalcond[7]=(((x277*x279))+new_r11+(((-1.0)*x276*x278)));
evalcond[8]=((((-1.0)*sj6))+(((-1.0)*new_r00*x288))+((new_r10*x276)));
evalcond[9]=((((-1.0)*new_r01*x288))+(((-1.0)*x278))+((new_r11*x276)));
evalcond[10]=((((-1.0)*cj5*x278))+x287+((new_r00*x276)));
evalcond[11]=((((-1.0)*sj6*x282))+new_r10+(((-1.0)*x278*x283)));
evalcond[12]=((((-1.0)*new_r22*x281))+((new_r02*x285))+((new_r12*x283)));
evalcond[13]=(sj6+(((-1.0)*new_r21*x281))+((new_r11*x283))+((new_r01*x285)));
evalcond[14]=((((-1.0)*x281*x287))+(((-1.0)*new_r00*x276*x281))+(((-1.0)*new_r20*x280)));
evalcond[15]=((((-1.0)*new_r01*x276*x281))+(((-1.0)*x281*x284))+(((-1.0)*new_r21*x280)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x280))+(((-1.0)*new_r02*x276*x281))+(((-1.0)*x281*x286)));
evalcond[17]=((((-1.0)*x278))+(((-1.0)*new_r20*x281))+((new_r00*x285))+((new_r10*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x289 = IKatan2WithCheck((gconst139*new_r12),(gconst139*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x289.valid){
continue;
}
j4array[0]=x289.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x290=IKcos(j4);
IkReal x291=IKsin(j4);
IkReal x292=((1.0)*sj5);
IkReal x293=((1.0)*cj5);
IkReal x294=(new_r12*x291);
IkReal x295=(new_r02*x290);
evalcond[0]=((((-1.0)*x290*x292))+new_r02);
evalcond[1]=((((-1.0)*x291*x292))+new_r12);
evalcond[2]=(((new_r12*x290))+(((-1.0)*new_r02*x291)));
evalcond[3]=((((-1.0)*x292))+x294+x295);
evalcond[4]=(((cj5*x294))+((cj5*x295))+(((-1.0)*new_r22*x292)));
evalcond[5]=((((-1.0)*new_r20*x293))+(((-1.0)*new_r10*x291*x292))+(((-1.0)*new_r00*x290*x292)));
evalcond[6]=((((-1.0)*new_r21*x293))+(((-1.0)*new_r01*x290*x292))+(((-1.0)*new_r11*x291*x292)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x293))+(((-1.0)*x292*x294))+(((-1.0)*x292*x295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst167;
gconst167=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj4;
dummyeval[1]=cj5;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x296=(new_r22+(((-1.0)*cj5)));
IkReal x297=((((-1.0)*sj5))+new_r12);
IkReal x298=((1.0)*cj5);
IkReal x299=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x296;
evalcond[2]=x296;
evalcond[3]=new_r02;
evalcond[4]=x297;
evalcond[5]=((-1.0)*new_r02);
evalcond[6]=x297;
evalcond[7]=(((cj5*new_r12))+(((-1.0)*new_r22*x299)));
evalcond[8]=((((-1.0)*new_r10*x299))+(((-1.0)*new_r20*x298)));
evalcond[9]=((((-1.0)*new_r11*x299))+(((-1.0)*new_r21*x298)));
evalcond[10]=((1.0)+(((-1.0)*new_r12*x299))+(((-1.0)*new_r22*x298)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst168;
gconst168=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
bool bgotonextstatement = true;
do
{
IkReal x300=((-1.0)+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x300;
evalcond[5]=((-1.0)*new_r02);
evalcond[6]=x300;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((-1.0)*new_r22);
evalcond[12]=((-1.0)*new_r10);
evalcond[13]=((-1.0)*new_r11);
evalcond[14]=((1.0)+(((-1.0)*new_r12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x301=IKcos(j6);
IkReal x302=((1.0)*(IKsin(j6)));
evalcond[0]=(x301+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x302)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x302)));
evalcond[3]=((((-1.0)*x301))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x303=((1.0)+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x303;
evalcond[5]=((-1.0)*new_r02);
evalcond[6]=x303;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x303;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x304=IKsin(j6);
IkReal x305=((1.0)*(IKcos(j6)));
evalcond[0]=(x304+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x305)));
evalcond[2]=((((-1.0)*x304))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x306=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x306;
evalcond[2]=x306;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r02);
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((-1.0)*new_r20);
evalcond[13]=((-1.0)*new_r21);
evalcond[14]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x307=IKsin(j6);
IkReal x308=((1.0)*(IKcos(j6)));
evalcond[0]=(x307+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x308)));
evalcond[2]=((((-1.0)*x307))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x309=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x309;
evalcond[2]=x309;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r02);
evalcond[10]=new_r12;
evalcond[11]=((-1.0)*new_r12);
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x309;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x310=IKcos(j6);
IkReal x311=((1.0)*(IKsin(j6)));
evalcond[0]=(x310+new_r10);
evalcond[1]=((((-1.0)*x311))+new_r11);
evalcond[2]=((((-1.0)*x311))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x310))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x312=IKPowWithIntegerCheck(cj5,-1);
if(!x312.valid){
continue;
}
CheckValue<IkReal> x313=IKPowWithIntegerCheck(sj5,-1);
if(!x313.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x312.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x313.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x312.value)))+IKsqr(((-1.0)*new_r20*(x313.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11*(x312.value)), ((-1.0)*new_r20*(x313.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x314=IKsin(j6);
IkReal x315=IKcos(j6);
IkReal x316=((1.0)*sj5);
IkReal x317=((1.0)*x315);
evalcond[0]=(((sj5*x315))+new_r20);
evalcond[1]=(((cj5*x314))+new_r11);
evalcond[2]=((((-1.0)*x314*x316))+new_r21);
evalcond[3]=((((-1.0)*cj5*x317))+new_r10);
evalcond[4]=((((-1.0)*x314))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x317))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x316))+((cj5*new_r11))+x314);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*new_r20*x316))+(((-1.0)*x317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x318 = IKatan2WithCheck((gconst168*new_r21),((-1.0)*gconst168*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x318.valid){
continue;
}
j6array[0]=x318.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x319=IKsin(j6);
IkReal x320=IKcos(j6);
IkReal x321=((1.0)*sj5);
IkReal x322=((1.0)*x320);
evalcond[0]=(((sj5*x320))+new_r20);
evalcond[1]=(((cj5*x319))+new_r11);
evalcond[2]=((((-1.0)*x319*x321))+new_r21);
evalcond[3]=((((-1.0)*cj5*x322))+new_r10);
evalcond[4]=((((-1.0)*x319))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x322))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+x319+(((-1.0)*new_r21*x321)));
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x322))+(((-1.0)*new_r20*x321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x323=(new_r22+(((-1.0)*cj5)));
IkReal x324=((1.0)*cj5);
IkReal x325=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x323;
evalcond[2]=x323;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((-1.0)*x325))+(((-1.0)*new_r12)));
evalcond[8]=((((-1.0)*new_r12*x324))+(((-1.0)*new_r22*x325)));
evalcond[9]=(((new_r10*sj5))+(((-1.0)*new_r20*x324)));
evalcond[10]=(((new_r11*sj5))+(((-1.0)*new_r21*x324)));
evalcond[11]=((1.0)+(((-1.0)*new_r22*x324))+((new_r12*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x326=IKcos(j6);
IkReal x327=IKsin(j6);
IkReal x328=((1.0)*sj5);
IkReal x329=((1.0)*new_r11);
IkReal x330=((1.0)*new_r10);
IkReal x331=((1.0)*x326);
evalcond[0]=(((sj5*x326))+new_r20);
evalcond[1]=((((-1.0)*x327))+new_r00);
evalcond[2]=((((-1.0)*x331))+new_r01);
evalcond[3]=((((-1.0)*x327*x328))+new_r21);
evalcond[4]=((((-1.0)*x329))+((cj5*x327)));
evalcond[5]=((((-1.0)*cj5*x331))+(((-1.0)*x330)));
evalcond[6]=(x327+(((-1.0)*cj5*x329))+(((-1.0)*new_r21*x328)));
evalcond[7]=((((-1.0)*cj5*x330))+(((-1.0)*x331))+(((-1.0)*new_r20*x328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x332=((1.0)*cj4);
IkReal x333=((1.0)*sj4);
IkReal x334=(((cj4*new_r12))+(((-1.0)*new_r02*x333)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((((-1.0)*x332))+new_r02);
evalcond[4]=((((-1.0)*x333))+new_r12);
evalcond[5]=x334;
evalcond[6]=x334;
evalcond[7]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[8]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[9]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[10]=((-1.0)*new_r22);
evalcond[11]=((((-1.0)*new_r10*x333))+(((-1.0)*new_r00*x332)));
evalcond[12]=((((-1.0)*new_r11*x333))+(((-1.0)*new_r01*x332)));
evalcond[13]=((1.0)+(((-1.0)*new_r12*x333))+(((-1.0)*new_r02*x332)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x335=IKcos(j6);
IkReal x336=IKsin(j6);
IkReal x337=((1.0)*sj4);
IkReal x338=((1.0)*x336);
IkReal x339=((1.0)*x335);
evalcond[0]=(x335+new_r20);
evalcond[1]=((((-1.0)*x338))+new_r21);
evalcond[2]=(((sj4*x335))+new_r01);
evalcond[3]=(((sj4*x336))+new_r00);
evalcond[4]=((((-1.0)*cj4*x339))+new_r11);
evalcond[5]=((((-1.0)*cj4*x338))+new_r10);
evalcond[6]=(((cj4*new_r10))+(((-1.0)*new_r00*x337))+(((-1.0)*x338)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x339))+(((-1.0)*new_r01*x337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x340=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x341=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x342=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x343=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=(cj4+new_r02);
evalcond[4]=(sj4+new_r12);
evalcond[5]=x340;
evalcond[6]=x340;
evalcond[7]=x343;
evalcond[8]=x342;
evalcond[9]=x341;
evalcond[10]=new_r22;
evalcond[11]=x341;
evalcond[12]=x342;
evalcond[13]=x343;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x344=IKcos(j6);
IkReal x345=IKsin(j6);
IkReal x346=((1.0)*sj4);
IkReal x347=((1.0)*x344);
IkReal x348=((1.0)*x345);
evalcond[0]=(x345+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x347)));
evalcond[2]=(((sj4*x344))+new_r01);
evalcond[3]=(((sj4*x345))+new_r00);
evalcond[4]=((((-1.0)*cj4*x347))+new_r11);
evalcond[5]=((((-1.0)*cj4*x348))+new_r10);
evalcond[6]=(((cj4*new_r10))+(((-1.0)*new_r00*x346))+(((-1.0)*x348)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*new_r01*x346))+(((-1.0)*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x349=((-1.0)+new_r22);
IkReal x350=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x351=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x349;
evalcond[2]=x349;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x350;
evalcond[10]=x350;
evalcond[11]=x351;
evalcond[12]=x351;
evalcond[13]=((-1.0)*new_r20);
evalcond[14]=((-1.0)*new_r21);
evalcond[15]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst169;
gconst169=IKsign(((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4)))));
dummyeval[0]=((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst170;
gconst170=IKsign(((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4)))));
dummyeval[0]=((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x352 = IKatan2WithCheck((gconst170*((((cj4*new_r01))+((new_r11*sj4))))),(gconst170*(((((-1.0)*cj4*new_r11))+((new_r01*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x352.valid){
continue;
}
j6array[0]=x352.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x353=IKsin(j6);
IkReal x354=IKcos(j6);
IkReal x355=((1.0)*sj4);
IkReal x356=((1.0)*x354);
IkReal x357=(sj4*x353);
IkReal x358=(sj4*x354);
IkReal x359=(cj4*x353);
IkReal x360=(cj4*x356);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x353);
evalcond[1]=(x359+x358+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x356)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x353))+(((-1.0)*new_r00*x355)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x356))+(((-1.0)*new_r01*x355)));
evalcond[5]=((((-1.0)*x360))+x357+new_r00);
evalcond[6]=((((-1.0)*x360))+x357+new_r11);
evalcond[7]=((((-1.0)*x359))+new_r10+(((-1.0)*x354*x355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x361 = IKatan2WithCheck((gconst169*((((cj4*new_r01))+((new_r00*sj4))))),(gconst169*(((((-1.0)*cj4*new_r00))+((new_r01*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x361.valid){
continue;
}
j6array[0]=x361.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x362=IKsin(j6);
IkReal x363=IKcos(j6);
IkReal x364=((1.0)*sj4);
IkReal x365=((1.0)*x363);
IkReal x366=(sj4*x362);
IkReal x367=(sj4*x363);
IkReal x368=(cj4*x362);
IkReal x369=(cj4*x365);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x362);
evalcond[1]=(x368+x367+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x365)));
evalcond[3]=((((-1.0)*new_r00*x364))+(((-1.0)*x362))+((cj4*new_r10)));
evalcond[4]=((((-1.0)*x365))+((cj4*new_r11))+(((-1.0)*new_r01*x364)));
evalcond[5]=((((-1.0)*x369))+x366+new_r00);
evalcond[6]=((((-1.0)*x369))+x366+new_r11);
evalcond[7]=((((-1.0)*x368))+(((-1.0)*x363*x364))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x370=((1.0)+new_r22);
IkReal x371=(cj4*new_r02);
IkReal x372=(new_r12*sj4);
IkReal x373=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x370;
evalcond[2]=x370;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x373;
evalcond[10]=x373;
evalcond[11]=(x372+x371);
evalcond[12]=((((-1.0)*x371))+(((-1.0)*x372)));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x370;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst171;
gconst171=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst172;
gconst172=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x374=((1.0)*new_r00);
CheckValue<IkReal> x375 = IKatan2WithCheck((gconst172*(((((-1.0)*sj4*x374))+((cj4*new_r10))))),(gconst172*(((((-1.0)*cj4*x374))+(((-1.0)*new_r10*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x375.valid){
continue;
}
j6array[0]=x375.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x376=IKcos(j6);
IkReal x377=IKsin(j6);
IkReal x378=((1.0)*sj4);
IkReal x379=((1.0)*x377);
IkReal x380=(sj4*x376);
IkReal x381=((1.0)*x376);
IkReal x382=(cj4*x379);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x376);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x379)));
evalcond[2]=(((sj4*x377))+((cj4*x376))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x378))+((cj4*new_r10))+(((-1.0)*x379)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x381))+(((-1.0)*new_r01*x378)));
evalcond[5]=(x380+(((-1.0)*x382))+new_r01);
evalcond[6]=(x380+(((-1.0)*x382))+new_r10);
evalcond[7]=((((-1.0)*x377*x378))+(((-1.0)*cj4*x381))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x383=((1.0)*new_r00);
CheckValue<IkReal> x384 = IKatan2WithCheck((gconst171*((((cj4*new_r01))+(((-1.0)*sj4*x383))))),(gconst171*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x383))))),IKFAST_ATAN2_MAGTHRESH);
if(!x384.valid){
continue;
}
j6array[0]=x384.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x385=IKcos(j6);
IkReal x386=IKsin(j6);
IkReal x387=((1.0)*sj4);
IkReal x388=((1.0)*x386);
IkReal x389=(sj4*x385);
IkReal x390=((1.0)*x385);
IkReal x391=(cj4*x388);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x385);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x388)));
evalcond[2]=(((sj4*x386))+new_r00+((cj4*x385)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x387))+(((-1.0)*x388)));
evalcond[4]=((((-1.0)*x390))+((cj4*new_r11))+(((-1.0)*new_r01*x387)));
evalcond[5]=((((-1.0)*x391))+x389+new_r01);
evalcond[6]=((((-1.0)*x391))+x389+new_r10);
evalcond[7]=((((-1.0)*cj4*x390))+(((-1.0)*x386*x387))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x392=(new_r22+(((-1.0)*cj5)));
IkReal x393=((((-1.0)*sj5))+new_r02);
IkReal x394=((1.0)*cj5);
IkReal x395=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x392;
evalcond[2]=x392;
evalcond[3]=x393;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x393;
evalcond[8]=((((-1.0)*new_r22*x395))+((cj5*new_r02)));
evalcond[9]=((((-1.0)*new_r00*x395))+(((-1.0)*new_r20*x394)));
evalcond[10]=((((-1.0)*new_r01*x395))+(((-1.0)*new_r21*x394)));
evalcond[11]=((1.0)+(((-1.0)*new_r22*x394))+(((-1.0)*new_r02*x395)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x396=IKcos(j6);
IkReal x397=IKsin(j6);
IkReal x398=((1.0)*sj5);
IkReal x399=((1.0)*x396);
evalcond[0]=(((sj5*x396))+new_r20);
evalcond[1]=((((-1.0)*x397))+new_r10);
evalcond[2]=((((-1.0)*x399))+new_r11);
evalcond[3]=(((cj5*x397))+new_r01);
evalcond[4]=((((-1.0)*x397*x398))+new_r21);
evalcond[5]=((((-1.0)*cj5*x399))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x398))+((cj5*new_r01))+x397);
evalcond[7]=((((-1.0)*x399))+((cj5*new_r00))+(((-1.0)*new_r20*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x400=(new_r22+(((-1.0)*cj5)));
IkReal x401=((1.0)*cj5);
IkReal x402=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x400;
evalcond[2]=x400;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((((-1.0)*new_r02))+(((-1.0)*x402)));
evalcond[7]=((((-1.0)*new_r02*x401))+(((-1.0)*new_r22*x402)));
evalcond[8]=(((new_r00*sj5))+(((-1.0)*new_r20*x401)));
evalcond[9]=(((new_r01*sj5))+(((-1.0)*new_r21*x401)));
evalcond[10]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x401)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst173;
gconst173=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[14];
bool bgotonextstatement = true;
do
{
IkReal x403=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x403;
evalcond[2]=x403;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r12);
evalcond[10]=((-1.0)*new_r02);
evalcond[11]=((-1.0)*new_r20);
evalcond[12]=((-1.0)*new_r21);
evalcond[13]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x404=IKsin(j6);
IkReal x405=((1.0)*(IKcos(j6)));
evalcond[0]=(x404+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*new_r10))+(((-1.0)*x404)));
evalcond[2]=((((-1.0)*new_r11))+(((-1.0)*x405)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x406=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x406;
evalcond[2]=x406;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r12);
evalcond[10]=((-1.0)*new_r02);
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x406;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x407=IKcos(j6);
IkReal x408=((1.0)*(IKsin(j6)));
evalcond[0]=(x407+(((-1.0)*new_r00)));
evalcond[1]=((((-1.0)*new_r10))+(((-1.0)*x408)));
evalcond[2]=((((-1.0)*new_r11))+(((-1.0)*x407)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x409=IKPowWithIntegerCheck(sj5,-1);
if(!x409.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x409.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r20*(x409.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r20*(x409.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x410=IKsin(j6);
IkReal x411=IKcos(j6);
IkReal x412=((1.0)*sj5);
IkReal x413=((1.0)*new_r00);
IkReal x414=((1.0)*new_r01);
IkReal x415=((1.0)*x411);
evalcond[0]=(((sj5*x411))+new_r20);
evalcond[1]=((((-1.0)*x410*x412))+new_r21);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x410)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x415)));
evalcond[4]=(((cj5*x410))+(((-1.0)*x414)));
evalcond[5]=((((-1.0)*cj5*x415))+(((-1.0)*x413)));
evalcond[6]=(x410+(((-1.0)*new_r21*x412))+(((-1.0)*cj5*x414)));
evalcond[7]=((((-1.0)*new_r20*x412))+(((-1.0)*cj5*x413))+(((-1.0)*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x416=IKPowWithIntegerCheck(sj5,-1);
if(!x416.valid){
continue;
}
if( IKabs((new_r21*(x416.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*(x416.value)))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r21*(x416.value)), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x417=IKsin(j6);
IkReal x418=IKcos(j6);
IkReal x419=((1.0)*sj5);
IkReal x420=((1.0)*new_r00);
IkReal x421=((1.0)*new_r01);
IkReal x422=((1.0)*x418);
evalcond[0]=(((sj5*x418))+new_r20);
evalcond[1]=((((-1.0)*x417*x419))+new_r21);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x417)));
evalcond[3]=((((-1.0)*x422))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x421))+((cj5*x417)));
evalcond[5]=((((-1.0)*x420))+(((-1.0)*cj5*x422)));
evalcond[6]=(x417+(((-1.0)*cj5*x421))+(((-1.0)*new_r21*x419)));
evalcond[7]=((((-1.0)*x422))+(((-1.0)*new_r20*x419))+(((-1.0)*cj5*x420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x423 = IKatan2WithCheck((gconst173*new_r21),((-1.0)*gconst173*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x423.valid){
continue;
}
j6array[0]=x423.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x424=IKsin(j6);
IkReal x425=IKcos(j6);
IkReal x426=((1.0)*sj5);
IkReal x427=((1.0)*new_r00);
IkReal x428=((1.0)*new_r01);
IkReal x429=((1.0)*x425);
evalcond[0]=(((sj5*x425))+new_r20);
evalcond[1]=((((-1.0)*x424*x426))+new_r21);
evalcond[2]=((((-1.0)*x424))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x429))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x428))+((cj5*x424)));
evalcond[5]=((((-1.0)*x427))+(((-1.0)*cj5*x429)));
evalcond[6]=(x424+(((-1.0)*cj5*x428))+(((-1.0)*new_r21*x426)));
evalcond[7]=((((-1.0)*x429))+(((-1.0)*cj5*x427))+(((-1.0)*new_r20*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x430=((-1.0)+new_r02);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x430;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x430;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((-1.0)*new_r22);
evalcond[13]=((-1.0)*new_r00);
evalcond[14]=((-1.0)*new_r01);
evalcond[15]=((1.0)+(((-1.0)*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x431=IKcos(j6);
IkReal x432=((1.0)*(IKsin(j6)));
evalcond[0]=(x431+new_r20);
evalcond[1]=((((-1.0)*x432))+new_r21);
evalcond[2]=((((-1.0)*x432))+new_r10);
evalcond[3]=((((-1.0)*x431))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((1.0)+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((-1.0)+(((-1.0)*new_r02)));
evalcond[7]=((-1.0)*new_r01);
evalcond[8]=new_r01;
evalcond[9]=((-1.0)*new_r00);
evalcond[10]=new_r00;
evalcond[11]=((-1.0)*new_r22);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x433=IKcos(j6);
IkReal x434=((1.0)*(IKsin(j6)));
evalcond[0]=(x433+new_r20);
evalcond[1]=((((-1.0)*x434))+new_r21);
evalcond[2]=((((-1.0)*x434))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x433))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x435=((1.0)+new_r02);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x435;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x435;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x435;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x436=IKsin(j6);
IkReal x437=((1.0)*(IKcos(j6)));
evalcond[0]=(x436+new_r21);
evalcond[1]=((((-1.0)*x437))+new_r20);
evalcond[2]=((((-1.0)*x436))+new_r10);
evalcond[3]=((((-1.0)*x437))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((-1.0)+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((1.0)+(((-1.0)*new_r02)));
evalcond[7]=((-1.0)*new_r01);
evalcond[8]=new_r01;
evalcond[9]=((-1.0)*new_r00);
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x438=IKsin(j6);
IkReal x439=((1.0)*(IKcos(j6)));
evalcond[0]=(x438+new_r21);
evalcond[1]=((((-1.0)*x439))+new_r20);
evalcond[2]=((((-1.0)*x438))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x439))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x440=((-1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959))))));
evalcond[1]=x440;
evalcond[2]=x440;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((-1.0)*new_r20);
evalcond[14]=((-1.0)*new_r21);
evalcond[15]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x441=IKsin(j6);
IkReal x442=((1.0)*(IKcos(j6)));
evalcond[0]=(x441+new_r01);
evalcond[1]=((((-1.0)*x441))+new_r10);
evalcond[2]=((((-1.0)*x442))+new_r11);
evalcond[3]=((((-1.0)*x442))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x443=((1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959))))));
evalcond[1]=x443;
evalcond[2]=x443;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((-1.0)*new_r02);
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x443;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, ((-1.0)*new_r00));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x444=IKcos(j6);
IkReal x445=((1.0)*(IKsin(j6)));
evalcond[0]=(x444+new_r00);
evalcond[1]=((((-1.0)*x445))+new_r10);
evalcond[2]=((((-1.0)*x444))+new_r11);
evalcond[3]=((((-1.0)*x445))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x447=IKPowWithIntegerCheck(sj5,-1);
if(!x447.valid){
continue;
}
IkReal x446=x447.value;
CheckValue<IkReal> x448=IKPowWithIntegerCheck(cj4,-1);
if(!x448.valid){
continue;
}
CheckValue<IkReal> x449=IKPowWithIntegerCheck(cj5,-1);
if(!x449.valid){
continue;
}
if( IKabs((x446*(x448.value)*(x449.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x446)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x446*(x448.value)*(x449.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x446))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x446*(x448.value)*(x449.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x446));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x450=IKsin(j6);
IkReal x451=IKcos(j6);
IkReal x452=((1.0)*sj5);
IkReal x453=((1.0)*sj4);
IkReal x454=(cj5*sj4);
IkReal x455=(cj4*new_r01);
IkReal x456=(cj4*new_r00);
IkReal x457=((1.0)*x451);
IkReal x458=(cj5*x450);
IkReal x459=((1.0)*x450);
evalcond[0]=(new_r20+((sj5*x451)));
evalcond[1]=((((-1.0)*x450*x452))+new_r21);
evalcond[2]=(((new_r11*sj4))+x458+x455);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x453))+(((-1.0)*x459)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x453))+(((-1.0)*x457)));
evalcond[5]=(((cj4*x458))+((sj4*x451))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x457))+x456);
evalcond[7]=((((-1.0)*cj4*cj5*x457))+((sj4*x450))+new_r00);
evalcond[8]=((((-1.0)*cj4*x457))+((x450*x454))+new_r11);
evalcond[9]=((((-1.0)*cj5*x451*x453))+(((-1.0)*cj4*x459))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x452))+((cj5*x455))+((new_r11*x454))+x450);
evalcond[11]=(((cj5*x456))+((new_r10*x454))+(((-1.0)*new_r20*x452))+(((-1.0)*x457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x461=IKPowWithIntegerCheck(sj5,-1);
if(!x461.valid){
continue;
}
IkReal x460=x461.value;
CheckValue<IkReal> x462=IKPowWithIntegerCheck(sj4,-1);
if(!x462.valid){
continue;
}
if( IKabs((x460*(x462.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x460)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x460*(x462.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x460))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x460*(x462.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x460));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x463=IKsin(j6);
IkReal x464=IKcos(j6);
IkReal x465=((1.0)*sj5);
IkReal x466=((1.0)*sj4);
IkReal x467=(cj5*sj4);
IkReal x468=(cj4*new_r01);
IkReal x469=(cj4*new_r00);
IkReal x470=((1.0)*x464);
IkReal x471=(cj5*x463);
IkReal x472=((1.0)*x463);
evalcond[0]=(new_r20+((sj5*x464)));
evalcond[1]=((((-1.0)*x463*x465))+new_r21);
evalcond[2]=(((new_r11*sj4))+x468+x471);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x472))+(((-1.0)*new_r00*x466)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x470))+(((-1.0)*new_r01*x466)));
evalcond[5]=(((cj4*x471))+((sj4*x464))+new_r01);
evalcond[6]=((((-1.0)*cj5*x470))+((new_r10*sj4))+x469);
evalcond[7]=((((-1.0)*cj4*cj5*x470))+((sj4*x463))+new_r00);
evalcond[8]=((((-1.0)*cj4*x470))+((x463*x467))+new_r11);
evalcond[9]=((((-1.0)*cj4*x472))+new_r10+(((-1.0)*cj5*x464*x466)));
evalcond[10]=((((-1.0)*new_r21*x465))+((new_r11*x467))+((cj5*x468))+x463);
evalcond[11]=(((cj5*x469))+((new_r10*x467))+(((-1.0)*new_r20*x465))+(((-1.0)*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x473 = IKatan2WithCheck((gconst167*new_r21),((-1.0)*gconst167*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x473.valid){
continue;
}
j6array[0]=x473.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x474=IKsin(j6);
IkReal x475=IKcos(j6);
IkReal x476=((1.0)*sj5);
IkReal x477=((1.0)*sj4);
IkReal x478=(cj5*sj4);
IkReal x479=(cj4*new_r01);
IkReal x480=(cj4*new_r00);
IkReal x481=((1.0)*x475);
IkReal x482=(cj5*x474);
IkReal x483=((1.0)*x474);
evalcond[0]=(((sj5*x475))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x474*x476)));
evalcond[2]=(((new_r11*sj4))+x482+x479);
evalcond[3]=((((-1.0)*x483))+((cj4*new_r10))+(((-1.0)*new_r00*x477)));
evalcond[4]=((((-1.0)*x481))+((cj4*new_r11))+(((-1.0)*new_r01*x477)));
evalcond[5]=(((sj4*x475))+((cj4*x482))+new_r01);
evalcond[6]=(((new_r10*sj4))+x480+(((-1.0)*cj5*x481)));
evalcond[7]=(((sj4*x474))+(((-1.0)*cj4*cj5*x481))+new_r00);
evalcond[8]=(((x474*x478))+new_r11+(((-1.0)*cj4*x481)));
evalcond[9]=((((-1.0)*cj5*x475*x477))+new_r10+(((-1.0)*cj4*x483)));
evalcond[10]=(((cj5*x479))+(((-1.0)*new_r21*x476))+((new_r11*x478))+x474);
evalcond[11]=((((-1.0)*x481))+((new_r10*x478))+((cj5*x480))+(((-1.0)*new_r20*x476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x484 = IKatan2WithCheck((gconst138*new_r12),(gconst138*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x484.valid){
continue;
}
j4array[0]=x484.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x485=IKcos(j4);
IkReal x486=IKsin(j4);
IkReal x487=((1.0)*sj5);
IkReal x488=((1.0)*cj5);
IkReal x489=(new_r12*x486);
IkReal x490=(new_r02*x485);
evalcond[0]=(new_r02+(((-1.0)*x485*x487)));
evalcond[1]=((((-1.0)*x486*x487))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x486))+((new_r12*x485)));
evalcond[3]=((((-1.0)*x487))+x489+x490);
evalcond[4]=(((cj5*x490))+((cj5*x489))+(((-1.0)*new_r22*x487)));
evalcond[5]=((((-1.0)*new_r20*x488))+(((-1.0)*new_r10*x486*x487))+(((-1.0)*new_r00*x485*x487)));
evalcond[6]=((((-1.0)*new_r21*x488))+(((-1.0)*new_r11*x486*x487))+(((-1.0)*new_r01*x485*x487)));
evalcond[7]=((1.0)+(((-1.0)*x487*x489))+(((-1.0)*x487*x490))+(((-1.0)*new_r22*x488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst167;
gconst167=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj4;
dummyeval[1]=cj5;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x491=(new_r22+(((-1.0)*cj5)));
IkReal x492=((((-1.0)*sj5))+new_r12);
IkReal x493=((1.0)*cj5);
IkReal x494=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x491;
evalcond[2]=x491;
evalcond[3]=new_r02;
evalcond[4]=x492;
evalcond[5]=((-1.0)*new_r02);
evalcond[6]=x492;
evalcond[7]=(((cj5*new_r12))+(((-1.0)*new_r22*x494)));
evalcond[8]=((((-1.0)*new_r20*x493))+(((-1.0)*new_r10*x494)));
evalcond[9]=((((-1.0)*new_r21*x493))+(((-1.0)*new_r11*x494)));
evalcond[10]=((1.0)+(((-1.0)*new_r22*x493))+(((-1.0)*new_r12*x494)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst168;
gconst168=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
bool bgotonextstatement = true;
do
{
IkReal x495=((-1.0)+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x495;
evalcond[5]=((-1.0)*new_r02);
evalcond[6]=x495;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((-1.0)*new_r22);
evalcond[12]=((-1.0)*new_r10);
evalcond[13]=((-1.0)*new_r11);
evalcond[14]=((1.0)+(((-1.0)*new_r12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x496=IKcos(j6);
IkReal x497=((1.0)*(IKsin(j6)));
evalcond[0]=(x496+new_r20);
evalcond[1]=((((-1.0)*x497))+new_r21);
evalcond[2]=((((-1.0)*x497))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x496))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x498=((1.0)+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x498;
evalcond[5]=((-1.0)*new_r02);
evalcond[6]=x498;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x498;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x499=IKsin(j6);
IkReal x500=((1.0)*(IKcos(j6)));
evalcond[0]=(x499+new_r21);
evalcond[1]=((((-1.0)*x500))+new_r20);
evalcond[2]=((((-1.0)*x499))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x500))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x501=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x501;
evalcond[2]=x501;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r02);
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((-1.0)*new_r20);
evalcond[13]=((-1.0)*new_r21);
evalcond[14]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x502=IKsin(j6);
IkReal x503=((1.0)*(IKcos(j6)));
evalcond[0]=(x502+new_r11);
evalcond[1]=((((-1.0)*x503))+new_r10);
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x502)));
evalcond[3]=((((-1.0)*x503))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x504=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x504;
evalcond[2]=x504;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r02);
evalcond[10]=new_r12;
evalcond[11]=((-1.0)*new_r12);
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x504;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x505=IKcos(j6);
IkReal x506=((1.0)*(IKsin(j6)));
evalcond[0]=(x505+new_r10);
evalcond[1]=((((-1.0)*x506))+new_r11);
evalcond[2]=((((-1.0)*x506))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x507=IKPowWithIntegerCheck(cj5,-1);
if(!x507.valid){
continue;
}
CheckValue<IkReal> x508=IKPowWithIntegerCheck(sj5,-1);
if(!x508.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x507.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x508.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x507.value)))+IKsqr(((-1.0)*new_r20*(x508.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11*(x507.value)), ((-1.0)*new_r20*(x508.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x509=IKsin(j6);
IkReal x510=IKcos(j6);
IkReal x511=((1.0)*sj5);
IkReal x512=((1.0)*x510);
evalcond[0]=(((sj5*x510))+new_r20);
evalcond[1]=(((cj5*x509))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x509*x511)));
evalcond[3]=((((-1.0)*cj5*x512))+new_r10);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x509)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x512)));
evalcond[6]=(((cj5*new_r11))+x509+(((-1.0)*new_r21*x511)));
evalcond[7]=(((cj5*new_r10))+(((-1.0)*new_r20*x511))+(((-1.0)*x512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x513 = IKatan2WithCheck((gconst168*new_r21),((-1.0)*gconst168*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
j6array[0]=x513.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x514=IKsin(j6);
IkReal x515=IKcos(j6);
IkReal x516=((1.0)*sj5);
IkReal x517=((1.0)*x515);
evalcond[0]=(((sj5*x515))+new_r20);
evalcond[1]=(((cj5*x514))+new_r11);
evalcond[2]=((((-1.0)*x514*x516))+new_r21);
evalcond[3]=((((-1.0)*cj5*x517))+new_r10);
evalcond[4]=((((-1.0)*x514))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x517)));
evalcond[6]=(((cj5*new_r11))+x514+(((-1.0)*new_r21*x516)));
evalcond[7]=(((cj5*new_r10))+(((-1.0)*new_r20*x516))+(((-1.0)*x517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x518=(new_r22+(((-1.0)*cj5)));
IkReal x519=((1.0)*cj5);
IkReal x520=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x518;
evalcond[2]=x518;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((-1.0)*x520))+(((-1.0)*new_r12)));
evalcond[8]=((((-1.0)*new_r22*x520))+(((-1.0)*new_r12*x519)));
evalcond[9]=(((new_r10*sj5))+(((-1.0)*new_r20*x519)));
evalcond[10]=(((new_r11*sj5))+(((-1.0)*new_r21*x519)));
evalcond[11]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x519)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x521=IKcos(j6);
IkReal x522=IKsin(j6);
IkReal x523=((1.0)*sj5);
IkReal x524=((1.0)*new_r11);
IkReal x525=((1.0)*new_r10);
IkReal x526=((1.0)*x521);
evalcond[0]=(((sj5*x521))+new_r20);
evalcond[1]=((((-1.0)*x522))+new_r00);
evalcond[2]=((((-1.0)*x526))+new_r01);
evalcond[3]=((((-1.0)*x522*x523))+new_r21);
evalcond[4]=(((cj5*x522))+(((-1.0)*x524)));
evalcond[5]=((((-1.0)*x525))+(((-1.0)*cj5*x526)));
evalcond[6]=((((-1.0)*new_r21*x523))+x522+(((-1.0)*cj5*x524)));
evalcond[7]=((((-1.0)*new_r20*x523))+(((-1.0)*x526))+(((-1.0)*cj5*x525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x527=((1.0)*cj4);
IkReal x528=((1.0)*sj4);
IkReal x529=(((cj4*new_r12))+(((-1.0)*new_r02*x528)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((((-1.0)*x527))+new_r02);
evalcond[4]=((((-1.0)*x528))+new_r12);
evalcond[5]=x529;
evalcond[6]=x529;
evalcond[7]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[8]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[9]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[10]=((-1.0)*new_r22);
evalcond[11]=((((-1.0)*new_r00*x527))+(((-1.0)*new_r10*x528)));
evalcond[12]=((((-1.0)*new_r11*x528))+(((-1.0)*new_r01*x527)));
evalcond[13]=((1.0)+(((-1.0)*new_r12*x528))+(((-1.0)*new_r02*x527)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x530=IKcos(j6);
IkReal x531=IKsin(j6);
IkReal x532=((1.0)*sj4);
IkReal x533=((1.0)*x531);
IkReal x534=((1.0)*x530);
evalcond[0]=(x530+new_r20);
evalcond[1]=((((-1.0)*x533))+new_r21);
evalcond[2]=(new_r01+((sj4*x530)));
evalcond[3]=(new_r00+((sj4*x531)));
evalcond[4]=(new_r11+(((-1.0)*cj4*x534)));
evalcond[5]=(new_r10+(((-1.0)*cj4*x533)));
evalcond[6]=(((cj4*new_r10))+(((-1.0)*new_r00*x532))+(((-1.0)*x533)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x534))+(((-1.0)*new_r01*x532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x535=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x536=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x537=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x538=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=(cj4+new_r02);
evalcond[4]=(sj4+new_r12);
evalcond[5]=x535;
evalcond[6]=x535;
evalcond[7]=x538;
evalcond[8]=x537;
evalcond[9]=x536;
evalcond[10]=new_r22;
evalcond[11]=x536;
evalcond[12]=x537;
evalcond[13]=x538;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x539=IKcos(j6);
IkReal x540=IKsin(j6);
IkReal x541=((1.0)*sj4);
IkReal x542=((1.0)*x539);
IkReal x543=((1.0)*x540);
evalcond[0]=(x540+new_r21);
evalcond[1]=((((-1.0)*x542))+new_r20);
evalcond[2]=(new_r01+((sj4*x539)));
evalcond[3]=(new_r00+((sj4*x540)));
evalcond[4]=(new_r11+(((-1.0)*cj4*x542)));
evalcond[5]=(new_r10+(((-1.0)*cj4*x543)));
evalcond[6]=(((cj4*new_r10))+(((-1.0)*new_r00*x541))+(((-1.0)*x543)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*new_r01*x541))+(((-1.0)*x542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x544=((-1.0)+new_r22);
IkReal x545=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x546=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x544;
evalcond[2]=x544;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x545;
evalcond[10]=x545;
evalcond[11]=x546;
evalcond[12]=x546;
evalcond[13]=((-1.0)*new_r20);
evalcond[14]=((-1.0)*new_r21);
evalcond[15]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst169;
gconst169=IKsign(((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4)))));
dummyeval[0]=((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst170;
gconst170=IKsign(((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4)))));
dummyeval[0]=((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x547 = IKatan2WithCheck((gconst170*((((cj4*new_r01))+((new_r11*sj4))))),(gconst170*(((((-1.0)*cj4*new_r11))+((new_r01*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
j6array[0]=x547.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x548=IKsin(j6);
IkReal x549=IKcos(j6);
IkReal x550=((1.0)*sj4);
IkReal x551=((1.0)*x549);
IkReal x552=(sj4*x548);
IkReal x553=(sj4*x549);
IkReal x554=(cj4*x548);
IkReal x555=(cj4*x551);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x548);
evalcond[1]=(x553+x554+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x551)));
evalcond[3]=((((-1.0)*x548))+((cj4*new_r10))+(((-1.0)*new_r00*x550)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x550))+(((-1.0)*x551)));
evalcond[5]=((((-1.0)*x555))+x552+new_r00);
evalcond[6]=((((-1.0)*x555))+x552+new_r11);
evalcond[7]=((((-1.0)*x554))+(((-1.0)*x549*x550))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x556 = IKatan2WithCheck((gconst169*((((cj4*new_r01))+((new_r00*sj4))))),(gconst169*(((((-1.0)*cj4*new_r00))+((new_r01*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x556.valid){
continue;
}
j6array[0]=x556.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x557=IKsin(j6);
IkReal x558=IKcos(j6);
IkReal x559=((1.0)*sj4);
IkReal x560=((1.0)*x558);
IkReal x561=(sj4*x557);
IkReal x562=(sj4*x558);
IkReal x563=(cj4*x557);
IkReal x564=(cj4*x560);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x557);
evalcond[1]=(x562+x563+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x560)));
evalcond[3]=((((-1.0)*x557))+((cj4*new_r10))+(((-1.0)*new_r00*x559)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x559))+(((-1.0)*x560)));
evalcond[5]=(x561+new_r00+(((-1.0)*x564)));
evalcond[6]=(x561+new_r11+(((-1.0)*x564)));
evalcond[7]=((((-1.0)*x563))+(((-1.0)*x558*x559))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x565=((1.0)+new_r22);
IkReal x566=(cj4*new_r02);
IkReal x567=(new_r12*sj4);
IkReal x568=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x565;
evalcond[2]=x565;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x568;
evalcond[10]=x568;
evalcond[11]=(x566+x567);
evalcond[12]=((((-1.0)*x567))+(((-1.0)*x566)));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x565;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst171;
gconst171=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst172;
gconst172=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x569=((1.0)*new_r00);
CheckValue<IkReal> x570 = IKatan2WithCheck((gconst172*(((((-1.0)*sj4*x569))+((cj4*new_r10))))),(gconst172*(((((-1.0)*cj4*x569))+(((-1.0)*new_r10*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x570.valid){
continue;
}
j6array[0]=x570.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x571=IKcos(j6);
IkReal x572=IKsin(j6);
IkReal x573=((1.0)*sj4);
IkReal x574=((1.0)*x572);
IkReal x575=(sj4*x571);
IkReal x576=((1.0)*x571);
IkReal x577=(cj4*x574);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x571);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x574)));
evalcond[2]=(((sj4*x572))+new_r00+((cj4*x571)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x574))+(((-1.0)*new_r00*x573)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x576))+(((-1.0)*new_r01*x573)));
evalcond[5]=((((-1.0)*x577))+x575+new_r01);
evalcond[6]=((((-1.0)*x577))+x575+new_r10);
evalcond[7]=((((-1.0)*cj4*x576))+new_r11+(((-1.0)*x572*x573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x578=((1.0)*new_r00);
CheckValue<IkReal> x579 = IKatan2WithCheck((gconst171*((((cj4*new_r01))+(((-1.0)*sj4*x578))))),(gconst171*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x578))))),IKFAST_ATAN2_MAGTHRESH);
if(!x579.valid){
continue;
}
j6array[0]=x579.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x580=IKcos(j6);
IkReal x581=IKsin(j6);
IkReal x582=((1.0)*sj4);
IkReal x583=((1.0)*x581);
IkReal x584=(sj4*x580);
IkReal x585=((1.0)*x580);
IkReal x586=(cj4*x583);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x580);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x583)));
evalcond[2]=(((cj4*x580))+((sj4*x581))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x583))+(((-1.0)*new_r00*x582)));
evalcond[4]=((((-1.0)*new_r01*x582))+((cj4*new_r11))+(((-1.0)*x585)));
evalcond[5]=(x584+new_r01+(((-1.0)*x586)));
evalcond[6]=(x584+new_r10+(((-1.0)*x586)));
evalcond[7]=((((-1.0)*cj4*x585))+new_r11+(((-1.0)*x581*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x587=(new_r22+(((-1.0)*cj5)));
IkReal x588=((((-1.0)*sj5))+new_r02);
IkReal x589=((1.0)*cj5);
IkReal x590=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x587;
evalcond[2]=x587;
evalcond[3]=x588;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x588;
evalcond[8]=(((cj5*new_r02))+(((-1.0)*new_r22*x590)));
evalcond[9]=((((-1.0)*new_r00*x590))+(((-1.0)*new_r20*x589)));
evalcond[10]=((((-1.0)*new_r01*x590))+(((-1.0)*new_r21*x589)));
evalcond[11]=((1.0)+(((-1.0)*new_r22*x589))+(((-1.0)*new_r02*x590)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x591=IKcos(j6);
IkReal x592=IKsin(j6);
IkReal x593=((1.0)*sj5);
IkReal x594=((1.0)*x591);
evalcond[0]=(new_r20+((sj5*x591)));
evalcond[1]=((((-1.0)*x592))+new_r10);
evalcond[2]=((((-1.0)*x594))+new_r11);
evalcond[3]=(new_r01+((cj5*x592)));
evalcond[4]=((((-1.0)*x592*x593))+new_r21);
evalcond[5]=((((-1.0)*cj5*x594))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x593))+((cj5*new_r01))+x592);
evalcond[7]=((((-1.0)*new_r20*x593))+((cj5*new_r00))+(((-1.0)*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x595=(new_r22+(((-1.0)*cj5)));
IkReal x596=((1.0)*cj5);
IkReal x597=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x595;
evalcond[2]=x595;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((((-1.0)*x597))+(((-1.0)*new_r02)));
evalcond[7]=((((-1.0)*new_r02*x596))+(((-1.0)*new_r22*x597)));
evalcond[8]=((((-1.0)*new_r20*x596))+((new_r00*sj5)));
evalcond[9]=((((-1.0)*new_r21*x596))+((new_r01*sj5)));
evalcond[10]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x596)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst173;
gconst173=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[14];
bool bgotonextstatement = true;
do
{
IkReal x598=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x598;
evalcond[2]=x598;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r12);
evalcond[10]=((-1.0)*new_r02);
evalcond[11]=((-1.0)*new_r20);
evalcond[12]=((-1.0)*new_r21);
evalcond[13]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x599=IKsin(j6);
IkReal x600=((1.0)*(IKcos(j6)));
evalcond[0]=(x599+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*x599))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*new_r11))+(((-1.0)*x600)));
evalcond[3]=((((-1.0)*x600))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x601=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x601;
evalcond[2]=x601;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r12);
evalcond[10]=((-1.0)*new_r02);
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x601;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x602=IKcos(j6);
IkReal x603=((1.0)*(IKsin(j6)));
evalcond[0]=(x602+(((-1.0)*new_r00)));
evalcond[1]=((((-1.0)*new_r10))+(((-1.0)*x603)));
evalcond[2]=((((-1.0)*x602))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x603))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x604=IKPowWithIntegerCheck(sj5,-1);
if(!x604.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x604.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r20*(x604.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r20*(x604.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x605=IKsin(j6);
IkReal x606=IKcos(j6);
IkReal x607=((1.0)*sj5);
IkReal x608=((1.0)*new_r00);
IkReal x609=((1.0)*new_r01);
IkReal x610=((1.0)*x606);
evalcond[0]=(((sj5*x606))+new_r20);
evalcond[1]=((((-1.0)*x605*x607))+new_r21);
evalcond[2]=((((-1.0)*x605))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x610))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x605))+(((-1.0)*x609)));
evalcond[5]=((((-1.0)*cj5*x610))+(((-1.0)*x608)));
evalcond[6]=(x605+(((-1.0)*cj5*x609))+(((-1.0)*new_r21*x607)));
evalcond[7]=((((-1.0)*new_r20*x607))+(((-1.0)*x610))+(((-1.0)*cj5*x608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x611=IKPowWithIntegerCheck(sj5,-1);
if(!x611.valid){
continue;
}
if( IKabs((new_r21*(x611.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*(x611.value)))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((new_r21*(x611.value)), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x612=IKsin(j6);
IkReal x613=IKcos(j6);
IkReal x614=((1.0)*sj5);
IkReal x615=((1.0)*new_r00);
IkReal x616=((1.0)*new_r01);
IkReal x617=((1.0)*x613);
evalcond[0]=(new_r20+((sj5*x613)));
evalcond[1]=((((-1.0)*x612*x614))+new_r21);
evalcond[2]=((((-1.0)*x612))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x617))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x616))+((cj5*x612)));
evalcond[5]=((((-1.0)*cj5*x617))+(((-1.0)*x615)));
evalcond[6]=((((-1.0)*new_r21*x614))+(((-1.0)*cj5*x616))+x612);
evalcond[7]=((((-1.0)*cj5*x615))+(((-1.0)*x617))+(((-1.0)*new_r20*x614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x618 = IKatan2WithCheck((gconst173*new_r21),((-1.0)*gconst173*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x618.valid){
continue;
}
j6array[0]=x618.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x619=IKsin(j6);
IkReal x620=IKcos(j6);
IkReal x621=((1.0)*sj5);
IkReal x622=((1.0)*new_r00);
IkReal x623=((1.0)*new_r01);
IkReal x624=((1.0)*x620);
evalcond[0]=(((sj5*x620))+new_r20);
evalcond[1]=((((-1.0)*x619*x621))+new_r21);
evalcond[2]=((((-1.0)*x619))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x624))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x623))+((cj5*x619)));
evalcond[5]=((((-1.0)*x622))+(((-1.0)*cj5*x624)));
evalcond[6]=((((-1.0)*new_r21*x621))+(((-1.0)*cj5*x623))+x619);
evalcond[7]=((((-1.0)*x624))+(((-1.0)*cj5*x622))+(((-1.0)*new_r20*x621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x625=((-1.0)+new_r02);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x625;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x625;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((-1.0)*new_r22);
evalcond[13]=((-1.0)*new_r00);
evalcond[14]=((-1.0)*new_r01);
evalcond[15]=((1.0)+(((-1.0)*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x626=IKcos(j6);
IkReal x627=((1.0)*(IKsin(j6)));
evalcond[0]=(x626+new_r20);
evalcond[1]=((((-1.0)*x627))+new_r21);
evalcond[2]=((((-1.0)*x627))+new_r10);
evalcond[3]=((((-1.0)*x626))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((1.0)+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((-1.0)+(((-1.0)*new_r02)));
evalcond[7]=((-1.0)*new_r01);
evalcond[8]=new_r01;
evalcond[9]=((-1.0)*new_r00);
evalcond[10]=new_r00;
evalcond[11]=((-1.0)*new_r22);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x628=IKcos(j6);
IkReal x629=((1.0)*(IKsin(j6)));
evalcond[0]=(x628+new_r20);
evalcond[1]=((((-1.0)*x629))+new_r21);
evalcond[2]=((((-1.0)*x629))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x630=((1.0)+new_r02);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x630;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x630;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x630;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x631=IKsin(j6);
IkReal x632=((1.0)*(IKcos(j6)));
evalcond[0]=(x631+new_r21);
evalcond[1]=((((-1.0)*x632))+new_r20);
evalcond[2]=((((-1.0)*x631))+new_r10);
evalcond[3]=((((-1.0)*x632))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((-1.0)+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((1.0)+(((-1.0)*new_r02)));
evalcond[7]=((-1.0)*new_r01);
evalcond[8]=new_r01;
evalcond[9]=((-1.0)*new_r00);
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x633=IKsin(j6);
IkReal x634=((1.0)*(IKcos(j6)));
evalcond[0]=(x633+new_r21);
evalcond[1]=((((-1.0)*x634))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x633)));
evalcond[3]=((((-1.0)*x634))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x635=((-1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959))))));
evalcond[1]=x635;
evalcond[2]=x635;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((-1.0)*new_r20);
evalcond[14]=((-1.0)*new_r21);
evalcond[15]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x636=IKsin(j6);
IkReal x637=((1.0)*(IKcos(j6)));
evalcond[0]=(x636+new_r01);
evalcond[1]=((((-1.0)*x636))+new_r10);
evalcond[2]=((((-1.0)*x637))+new_r11);
evalcond[3]=((((-1.0)*x637))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x638=((1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959))))));
evalcond[1]=x638;
evalcond[2]=x638;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((-1.0)*new_r02);
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x638;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, ((-1.0)*new_r00));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x639=IKcos(j6);
IkReal x640=((1.0)*(IKsin(j6)));
evalcond[0]=(x639+new_r00);
evalcond[1]=((((-1.0)*x640))+new_r10);
evalcond[2]=((((-1.0)*x639))+new_r11);
evalcond[3]=((((-1.0)*x640))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x642=IKPowWithIntegerCheck(sj5,-1);
if(!x642.valid){
continue;
}
IkReal x641=x642.value;
CheckValue<IkReal> x643=IKPowWithIntegerCheck(cj4,-1);
if(!x643.valid){
continue;
}
CheckValue<IkReal> x644=IKPowWithIntegerCheck(cj5,-1);
if(!x644.valid){
continue;
}
if( IKabs((x641*(x643.value)*(x644.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x641)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x641*(x643.value)*(x644.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x641))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x641*(x643.value)*(x644.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x641));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x645=IKsin(j6);
IkReal x646=IKcos(j6);
IkReal x647=((1.0)*sj5);
IkReal x648=((1.0)*sj4);
IkReal x649=(cj5*sj4);
IkReal x650=(cj4*new_r01);
IkReal x651=(cj4*new_r00);
IkReal x652=((1.0)*x646);
IkReal x653=(cj5*x645);
IkReal x654=((1.0)*x645);
evalcond[0]=(((sj5*x646))+new_r20);
evalcond[1]=((((-1.0)*x645*x647))+new_r21);
evalcond[2]=(((new_r11*sj4))+x650+x653);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x654))+(((-1.0)*new_r00*x648)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x652))+(((-1.0)*new_r01*x648)));
evalcond[5]=(((cj4*x653))+((sj4*x646))+new_r01);
evalcond[6]=(((new_r10*sj4))+x651+(((-1.0)*cj5*x652)));
evalcond[7]=(((sj4*x645))+(((-1.0)*cj4*cj5*x652))+new_r00);
evalcond[8]=(((x645*x649))+new_r11+(((-1.0)*cj4*x652)));
evalcond[9]=(new_r10+(((-1.0)*cj5*x646*x648))+(((-1.0)*cj4*x654)));
evalcond[10]=(((cj5*x650))+((new_r11*x649))+(((-1.0)*new_r21*x647))+x645);
evalcond[11]=(((cj5*x651))+(((-1.0)*x652))+((new_r10*x649))+(((-1.0)*new_r20*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x656=IKPowWithIntegerCheck(sj5,-1);
if(!x656.valid){
continue;
}
IkReal x655=x656.value;
CheckValue<IkReal> x657=IKPowWithIntegerCheck(sj4,-1);
if(!x657.valid){
continue;
}
if( IKabs((x655*(x657.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x655)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x655*(x657.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x655))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x655*(x657.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x655));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x658=IKsin(j6);
IkReal x659=IKcos(j6);
IkReal x660=((1.0)*sj5);
IkReal x661=((1.0)*sj4);
IkReal x662=(cj5*sj4);
IkReal x663=(cj4*new_r01);
IkReal x664=(cj4*new_r00);
IkReal x665=((1.0)*x659);
IkReal x666=(cj5*x658);
IkReal x667=((1.0)*x658);
evalcond[0]=(((sj5*x659))+new_r20);
evalcond[1]=((((-1.0)*x658*x660))+new_r21);
evalcond[2]=(((new_r11*sj4))+x663+x666);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x667))+(((-1.0)*new_r00*x661)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x665))+(((-1.0)*new_r01*x661)));
evalcond[5]=(((sj4*x659))+new_r01+((cj4*x666)));
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x665))+x664);
evalcond[7]=(((sj4*x658))+(((-1.0)*cj4*cj5*x665))+new_r00);
evalcond[8]=((((-1.0)*cj4*x665))+new_r11+((x658*x662)));
evalcond[9]=((((-1.0)*cj5*x659*x661))+(((-1.0)*cj4*x667))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x660))+((new_r11*x662))+x658+((cj5*x663)));
evalcond[11]=(((new_r10*x662))+(((-1.0)*x665))+((cj5*x664))+(((-1.0)*new_r20*x660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x668 = IKatan2WithCheck((gconst167*new_r21),((-1.0)*gconst167*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x668.valid){
continue;
}
j6array[0]=x668.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x669=IKsin(j6);
IkReal x670=IKcos(j6);
IkReal x671=((1.0)*sj5);
IkReal x672=((1.0)*sj4);
IkReal x673=(cj5*sj4);
IkReal x674=(cj4*new_r01);
IkReal x675=(cj4*new_r00);
IkReal x676=((1.0)*x670);
IkReal x677=(cj5*x669);
IkReal x678=((1.0)*x669);
evalcond[0]=(((sj5*x670))+new_r20);
evalcond[1]=((((-1.0)*x669*x671))+new_r21);
evalcond[2]=(((new_r11*sj4))+x677+x674);
evalcond[3]=((((-1.0)*new_r00*x672))+((cj4*new_r10))+(((-1.0)*x678)));
evalcond[4]=((((-1.0)*new_r01*x672))+((cj4*new_r11))+(((-1.0)*x676)));
evalcond[5]=(((cj4*x677))+((sj4*x670))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x676))+x675);
evalcond[7]=((((-1.0)*cj4*cj5*x676))+((sj4*x669))+new_r00);
evalcond[8]=((((-1.0)*cj4*x676))+((x669*x673))+new_r11);
evalcond[9]=((((-1.0)*cj4*x678))+(((-1.0)*cj5*x670*x672))+new_r10);
evalcond[10]=(((new_r11*x673))+(((-1.0)*new_r21*x671))+x669+((cj5*x674)));
evalcond[11]=(((new_r10*x673))+(((-1.0)*new_r20*x671))+((cj5*x675))+(((-1.0)*x676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "2ac375a0aaf420715f482953e36187a5"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
