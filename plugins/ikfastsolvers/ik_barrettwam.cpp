#define IKFAST_NAMESPACE ik_barrettwam
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 67 generated on 2013-07-25 16:35:19.557810
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==67);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.045)*x1);
x15=((1.0)*x5);
x16=((0.3)*x1);
x17=((1.0)*x11);
x18=((0.045)*x5);
x19=((1.0)*x1);
x20=((0.22)*x8);
x21=((1.0)*x12);
x22=((0.22)*x5);
x23=((1.0)*x6);
x24=((0.22)*x9);
x25=((0.22)*x6);
x26=(x0*x4);
x27=(x0*x2);
x28=(x2*x7);
x29=(x3*x4);
x30=(x0*x7);
x31=(x2*x3);
x32=(x3*x7);
x33=((1.0)*x29);
x34=((0.045)*x29);
x35=((0.045)*x26);
x36=(x19*x6);
x37=(x32*x6);
x38=(x4*x7*x9);
x39=(x15*x30);
x40=(x23*x30);
x41=(x14*x27);
x42=(x15*x32);
x43=(x23*x32);
x44=(x14*x31);
x45=((((-1.0)*x33))+((x1*x27)));
x46=(x26+((x1*x31)));
x47=((((-1.0)*x19*x29))+x27);
x48=((((-1.0)*x36))+((x28*x5)));
x49=((((-1.0)*x19*x27))+x33);
x50=((((-1.0)*x31))+(((-1.0)*x19*x26)));
x51=((((-1.0)*x26))+(((-1.0)*x19*x31)));
x52=(((x1*x15))+((x23*x28)));
x53=((-1.0)*x52);
x54=(x35+x44);
x55=(x46*x6);
x56=(x11*x48);
x57=(x45*x6);
x58=(x5*x51);
x59=(x50*x9);
x60=((((-1.0)*x39))+x57);
x61=((((-1.0)*x42))+x55);
x62=((((-1.0)*x40))+((x49*x5)));
x63=((((-1.0)*x43))+x58);
x64=(((x4*x7*x8))+((x52*x9)));
x65=(((x53*x8))+x38);
x66=(x11*x63);
x67=(((x47*x9))+((x61*x8)));
x68=(((x9*((x42+(((-1.0)*x23*x46))))))+((x47*x8)));
x69=(((x60*x8))+x59);
x70=(x12*x67);
x71=(((x50*x8))+((x9*((x39+(((-1.0)*x57)))))));
eerot[0]=(((x10*x71))+((x13*((((x12*x69))+((x11*x62)))))));
eerot[1]=(((x13*x71))+((x10*(((((-1.0)*x21*x69))+(((-1.0)*x17*x62)))))));
eerot[2]=(((x11*x69))+((x12*(((((-1.0)*x15*x49))+x40)))));
eetrans[0]=((0.22)+(((-1.0)*x34))+((x11*((((x20*x60))+((x24*x50))))))+((x5*(((((-0.3)*x29))+((x16*x27))))))+((x18*x30))+((x12*(((((-1.0)*x22*x49))+((x25*x30))))))+(((0.3)*x30*x6))+(((0.55)*x30))+x41+((x6*(((((-1.0)*x41))+x34)))));
eerot[3]=(((x13*((x70+x66))))+((x10*x68)));
eerot[4]=(((x10*(((((-1.0)*x21*x67))+(((-1.0)*x17*x63))))))+((x13*x68)));
eerot[5]=(((x12*((x43+(((-1.0)*x15*x51))))))+((x11*x67)));
eetrans[1]=((0.14)+((x18*x32))+(((-1.0)*x54*x6))+((x11*((((x20*x61))+((x24*x47))))))+((x12*((((x25*x32))+(((-1.0)*x22*x51))))))+(((0.55)*x32))+x54+((x5*((((x16*x31))+(((0.3)*x26))))))+(((0.3)*x37)));
eerot[6]=(((x10*x64))+((x13*((((x12*x65))+x56)))));
eerot[7]=(((x13*x64))+((x10*(((((-1.0)*x17*x48))+(((-1.0)*x21*x65)))))));
eerot[8]=(((x11*x65))+((x12*(((((-1.0)*x15*x28))+x36)))));
IkReal x72=((0.045)*x28);
eetrans[2]=((0.346)+(((-0.3)*x28*x5))+(((-1.0)*x72))+((x14*x5))+((x12*((((x1*x25))+(((-1.0)*x22*x28))))))+((x16*x6))+((x6*x72))+(((0.55)*x1))+((x11*((((x20*x53))+((x24*x4*x7)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.22)+(((-0.22)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.14)+(((-0.22)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346)+(((-0.22)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*py*r20))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*pz*r00)));
rxp0_2=((((-1.0)*px*r10))+((py*r00)));
rxp1_0=((((-1.0)*py*r21))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*pz*r01)));
rxp1_2=((((-1.0)*px*r11))+((py*r01)));
rxp2_0=((((-1.0)*py*r22))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*pz*r02)));
rxp2_2=((((-1.0)*px*r12))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x73=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));
j3array[0]=((-1.34027003705633)+(((-1.0)*x73)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+x73);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x74=cj2*cj2;
IkReal x75=sj3*sj3;
IkReal x76=cj3*cj3;
IkReal x77=((13.3333333333333)*cj3*sj3);
dummyeval[0]=((149.382716049383)+(((44.4444444444444)*x76))+(((24.4444444444444)*sj3))+(((13.3333333333333)*sj3*x74))+(((-2.0)*cj3*x74))+(((44.4444444444444)*x74*x75))+(((-1.0)*x74*x77))+x77+x75+x74+((x74*x76))+(((162.962962962963)*cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x78=((0.045)*cj2);
IkReal x79=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
IkReal x80=((((-1.0)*cj3*x78))+(((0.3)*cj2*sj3))+x78);
CheckValue<IkReal> x83 = IKatan2WithCheck(x79,x80,IKFAST_ATAN2_MAGTHRESH);
if(!x83.valid){
continue;
}
IkReal x81=((1.0)*(x83.value));
if((((x79*x79)+(x80*x80))) < -0.00001)
continue;
CheckValue<IkReal> x84=IKPowWithIntegerCheck(IKabs(IKsqrt(((x79*x79)+(x80*x80)))),-1);
if(!x84.valid){
continue;
}
if( ((pz*(x84.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x84.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x82=IKasin((pz*(x84.value)));
j1array[0]=((((-1.0)*x82))+(((-1.0)*x81)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x82+(((-1.0)*x81)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign((((sj1*(py*py)))+((sj1*(px*px)))));
dummyeval[0]=(((sj1*(py*py)))+((sj1*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x85=((1.0)*cj2*sj1);
gconst1=IKsign(((((-1.0)*x85*(py*py)))+(((-1.0)*x85*(px*px)))));
IkReal x86=((1.0)*cj2*sj1);
dummyeval[0]=((((-1.0)*x86*(px*px)))+(((-1.0)*x86*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((cj1*(px*px)))+((cj1*(py*py)))));
dummyeval[0]=(((cj1*(px*px)))+((cj1*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((sj1*(py*py)))+((sj1*(px*px)))));
dummyeval[0]=(((sj1*(py*py)))+((sj1*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x87=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=x87;
evalcond[2]=0;
evalcond[3]=x87;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x634=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x634;
evalcond[2]=0;
evalcond[3]=x634;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x635=((110.0)*pz);
IkReal x636=((100.0)*pp);
CheckValue<IkReal> x637 = IKatan2WithCheck((gconst5*(((((-21.25)*px))+(((-1.0)*px*x636))+((px*x635))))),(gconst5*((((py*x636))+(((21.25)*py))+(((-1.0)*py*x635))))),IKFAST_ATAN2_MAGTHRESH);
if(!x637.valid){
continue;
}
j0array[0]=x637.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x638=IKsin(j0);
IkReal x639=IKcos(j0);
IkReal x640=(px*x638);
IkReal x641=(py*x639);
evalcond[0]=(((py*x638))+((px*x639)));
evalcond[1]=((0.1275)+(((-1.0)*x641))+(((-0.15)*pz))+(((0.30675)*sj3))+x640);
evalcond[2]=((-0.2125)+(((-0.09)*x640))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x642=((0.30675)*sj3);
IkReal x643=((0.15)*pz);
CheckValue<IkReal> x644 = IKatan2WithCheck((gconst4*(((((0.1275)*px))+(((-1.0)*px*x643))+((px*x642))))),(gconst4*((((py*x643))+(((-0.1275)*py))+(((-1.0)*py*x642))))),IKFAST_ATAN2_MAGTHRESH);
if(!x644.valid){
continue;
}
j0array[0]=x644.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x645=IKsin(j0);
IkReal x646=IKcos(j0);
IkReal x647=(px*x645);
IkReal x648=(py*x646);
evalcond[0]=(((py*x645))+((px*x646)));
evalcond[1]=((0.1275)+(((-1.0)*x648))+(((-0.15)*pz))+(((0.30675)*sj3))+x647);
evalcond[2]=((-0.2125)+(((-0.09)*x647))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x649=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=x649;
evalcond[2]=0;
evalcond[3]=x649;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x650=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x650;
evalcond[2]=0;
evalcond[3]=x650;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x651=((110.0)*pz);
IkReal x652=((100.0)*pp);
CheckValue<IkReal> x653 = IKatan2WithCheck((gconst7*(((((-1.0)*px*x652))+(((-1.0)*px*x651))+(((-21.25)*px))))),(gconst7*(((((21.25)*py))+((py*x652))+((py*x651))))),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
j0array[0]=x653.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x654=IKsin(j0);
IkReal x655=IKcos(j0);
IkReal x656=(px*x654);
IkReal x657=((1.0)*x655);
evalcond[0]=((((-1.0)*px*x657))+(((-1.0)*py*x654)));
evalcond[1]=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3))+x656+(((-1.0)*py*x657)));
evalcond[2]=((-0.2125)+(((0.09)*py*x655))+(((-0.09)*x656))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x658=((0.15)*pz);
IkReal x659=((0.30675)*sj3);
CheckValue<IkReal> x660 = IKatan2WithCheck((gconst6*(((((0.1275)*px))+((px*x659))+((px*x658))))),(gconst6*(((((-0.1275)*py))+(((-1.0)*py*x658))+(((-1.0)*py*x659))))),IKFAST_ATAN2_MAGTHRESH);
if(!x660.valid){
continue;
}
j0array[0]=x660.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x661=IKsin(j0);
IkReal x662=IKcos(j0);
IkReal x663=(px*x661);
IkReal x664=((1.0)*x662);
evalcond[0]=((((-1.0)*py*x661))+(((-1.0)*px*x664)));
evalcond[1]=((0.1275)+(((0.15)*pz))+(((-1.0)*py*x664))+(((0.30675)*sj3))+x663);
evalcond[2]=((-0.2125)+(((-0.09)*x663))+(((0.09)*py*x662))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((0.09)*(py*py)))+(((0.09)*(px*px)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x665=((0.045)*sj3);
IkReal x666=((0.3)*cj3);
IkReal x667=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x668=(x665+x666);
evalcond[0]=((px*px)+(py*py));
evalcond[1]=((-0.55)+(((-1.0)*x668)));
evalcond[2]=x667;
evalcond[3]=x667;
evalcond[4]=((0.55)+x668);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x669=((0.045)*sj3);
IkReal x670=((0.3)*cj3);
IkReal x671=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x672=(x669+x670);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x672)));
evalcond[2]=x671;
evalcond[3]=x671;
evalcond[4]=((0.55)+x672);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x673=((0.33)*cj3);
IkReal x674=((0.027)*cj3);
IkReal x675=((0.00405)*sj3);
IkReal x676=((0.0495)*sj3);
CheckValue<IkReal> x677 = IKatan2WithCheck((gconst9*((((py*x674))+((py*x675))+(((-1.0)*pp*px))+(((0.0495)*py))+(((0.3925)*px))+((px*x673))+((px*x676))))),(gconst9*(((((0.0495)*px))+(((-1.0)*py*x673))+(((-1.0)*py*x676))+(((-0.3925)*py))+((pp*py))+((px*x675))+((px*x674))))),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
j0array[0]=x677.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x678=IKsin(j0);
IkReal x679=IKcos(j0);
IkReal x680=(px*x678);
IkReal x681=(py*x679);
IkReal x682=(px*x679);
IkReal x683=(py*x678);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x683+x682);
evalcond[1]=((0.045)+(((-0.045)*cj3))+x680+(((0.3)*sj3))+(((-1.0)*x681)));
evalcond[2]=((-0.2125)+(((1.1)*x683))+(((1.1)*x682))+(((-0.09)*x680))+(((-1.0)*pp))+(((0.09)*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x684=((0.3)*py);
IkReal x685=((0.045)*px);
IkReal x686=((0.045)*py);
IkReal x687=((0.3)*px);
CheckValue<IkReal> x688 = IKatan2WithCheck((gconst8*(((((-0.55)*py))+((sj3*x687))+x685+(((-1.0)*sj3*x686))+(((-1.0)*cj3*x685))+(((-1.0)*cj3*x684))))),(gconst8*(((((-0.55)*px))+(((-1.0)*x686))+(((-1.0)*sj3*x684))+(((-1.0)*sj3*x685))+(((-1.0)*cj3*x687))+((cj3*x686))))),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
j0array[0]=x688.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x689=IKsin(j0);
IkReal x690=IKcos(j0);
IkReal x691=(px*x689);
IkReal x692=(py*x690);
IkReal x693=(px*x690);
IkReal x694=(py*x689);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x694+x693);
evalcond[1]=((0.045)+(((-0.045)*cj3))+x691+(((0.3)*sj3))+(((-1.0)*x692)));
evalcond[2]=((-0.2125)+(((-0.09)*x691))+(((-1.0)*pp))+(((0.09)*x692))+(((1.1)*x693))+(((1.1)*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((1.1)*(py*py)))+(((1.1)*(px*px)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x695=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x696=x79;
evalcond[0]=((px*px)+(py*py));
evalcond[1]=x696;
evalcond[2]=x695;
evalcond[3]=x695;
evalcond[4]=x696;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x697=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x698=x79;
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x698;
evalcond[2]=x697;
evalcond[3]=x697;
evalcond[4]=x698;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x699=(cj3*py);
IkReal x700=(py*sj3);
IkReal x701=((1.0)*pp);
IkReal x702=(cj3*px);
IkReal x703=(px*sj3);
CheckValue<IkReal> x704 = IKatan2WithCheck((gconst11*(((((-1.0)*py*x701))+(((-0.00405)*x699))+(((-0.0495)*px))+(((0.0495)*x702))+(((-0.33)*x703))+(((0.027)*x700))+(((-0.20845)*py))))),(gconst11*(((((0.0495)*py))+(((-0.0495)*x699))+(((0.33)*x700))+(((-1.0)*px*x701))+(((-0.00405)*x702))+(((0.027)*x703))+(((-0.20845)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
j0array[0]=x704.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x705=IKcos(j0);
IkReal x706=IKsin(j0);
IkReal x707=(px*x706);
IkReal x708=((1.0)*x705);
IkReal x709=(py*x706);
evalcond[0]=((0.045)+(((-1.0)*py*x708))+(((-0.045)*cj3))+(((0.3)*sj3))+x707);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x709))+(((-1.0)*px*x708)));
evalcond[2]=((-0.2125)+(((0.09)*py*x705))+(((-1.0)*pp))+(((-0.09)*x707))+(((-1.1)*x709))+(((-1.1)*px*x705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x710=((0.3)*py);
IkReal x711=((0.045)*px);
IkReal x712=((0.045)*py);
IkReal x713=((0.3)*px);
CheckValue<IkReal> x714 = IKatan2WithCheck((gconst10*(((((-0.55)*py))+(((-1.0)*cj3*x710))+(((-1.0)*x711))+((cj3*x711))+(((-1.0)*sj3*x712))+(((-1.0)*sj3*x713))))),(gconst10*(((((-0.55)*px))+(((-1.0)*cj3*x713))+(((-1.0)*cj3*x712))+((sj3*x710))+x712+(((-1.0)*sj3*x711))))),IKFAST_ATAN2_MAGTHRESH);
if(!x714.valid){
continue;
}
j0array[0]=x714.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x715=IKcos(j0);
IkReal x716=IKsin(j0);
IkReal x717=(px*x716);
IkReal x718=((1.0)*x715);
IkReal x719=(py*x716);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x717+(((-1.0)*py*x718)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x719))+(((-1.0)*px*x718)));
evalcond[2]=((-0.2125)+(((0.09)*py*x715))+(((-1.0)*pp))+(((-0.09)*x717))+(((-1.1)*px*x715))+(((-1.1)*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x720=(cj1*pz);
IkReal x721=((0.3)*cj3);
IkReal x722=((0.045)*sj3);
IkReal x723=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x721))+(((-1.0)*x722))+x720);
evalcond[2]=x723;
evalcond[3]=((-1.0)*pz*sj1);
evalcond[4]=x723;
evalcond[5]=((((0.55)*sj1))+((sj1*x722))+((sj1*x721)));
evalcond[6]=((-0.2125)+(((1.1)*x720))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x724=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=x724;
evalcond[2]=0;
evalcond[3]=x724;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x726=IKPowWithIntegerCheck(py,-1);
if(!x726.valid){
continue;
}
IkReal x725=x726.value;
cj0array[0]=((((2.36111111111111)*x725))+(((-12.2222222222222)*pz*x725))+(((11.1111111111111)*pp*x725)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x728=IKPowWithIntegerCheck(py,-1);
if(!x728.valid){
continue;
}
IkReal x727=x728.value;
cj0array[0]=((((0.1275)*x727))+(((-0.15)*pz*x727))+(((0.30675)*sj3*x727)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x729=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=x729;
evalcond[2]=0;
evalcond[3]=x729;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x731=IKPowWithIntegerCheck(py,-1);
if(!x731.valid){
continue;
}
IkReal x730=x731.value;
cj0array[0]=((((2.36111111111111)*x730))+(((12.2222222222222)*pz*x730))+(((11.1111111111111)*pp*x730)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x733=IKPowWithIntegerCheck(py,-1);
if(!x733.valid){
continue;
}
IkReal x732=x733.value;
cj0array[0]=((((0.1275)*x732))+(((0.15)*pz*x732))+(((0.30675)*sj3*x732)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x734=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x734;
evalcond[2]=0;
evalcond[3]=x734;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x736=IKPowWithIntegerCheck(px,-1);
if(!x736.valid){
continue;
}
IkReal x735=x736.value;
sj0array[0]=((((12.2222222222222)*pz*x735))+(((-2.36111111111111)*x735))+(((-11.1111111111111)*pp*x735)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((0.1275)+((px*(IKsin(j0))))+(((-0.15)*pz))+(((0.30675)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x738=IKPowWithIntegerCheck(px,-1);
if(!x738.valid){
continue;
}
IkReal x737=x738.value;
sj0array[0]=((((-0.1275)*x737))+(((-0.30675)*sj3*x737))+(((0.15)*pz*x737)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x739=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x739;
evalcond[2]=0;
evalcond[3]=x739;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x741=IKPowWithIntegerCheck(px,-1);
if(!x741.valid){
continue;
}
IkReal x740=x741.value;
sj0array[0]=((((-12.2222222222222)*pz*x740))+(((-11.1111111111111)*pp*x740))+(((-2.36111111111111)*x740)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((0.1275)+(((0.15)*pz))+((px*(IKsin(j0))))+(((0.30675)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x743=IKPowWithIntegerCheck(px,-1);
if(!x743.valid){
continue;
}
IkReal x742=x743.value;
sj0array[0]=((((-0.15)*pz*x742))+(((-0.1275)*x742))+(((-0.30675)*sj3*x742)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x744=((0.045)*sj3);
IkReal x745=((0.3)*cj3);
IkReal x746=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x747=(x744+x745);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+(((-1.0)*x747)));
evalcond[2]=x746;
evalcond[3]=x746;
evalcond[4]=((0.55)+x747);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x749=IKPowWithIntegerCheck(py,-1);
if(!x749.valid){
continue;
}
IkReal x748=x749.value;
if( IKabs(((0.00909090909090909)*x748*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x748*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x748*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))+IKsqr((x748*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x748*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))), (x748*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x750=IKsin(j0);
IkReal x751=IKcos(j0);
IkReal x752=(py*x751);
IkReal x753=(py*x750);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x753);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x752))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x752))+(((-1.0)*pp))+(((1.1)*x753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x755=IKPowWithIntegerCheck(py,-1);
if(!x755.valid){
continue;
}
IkReal x754=x755.value;
if( IKabs((x754*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x754*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x754*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x754*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x754*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x754*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x756=IKsin(j0);
IkReal x757=IKcos(j0);
IkReal x758=(py*x757);
IkReal x759=(py*x756);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x759);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x758))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x758))+(((-1.0)*pp))+(((1.1)*x759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x760 = IKatan2WithCheck((gconst12*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst12*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x760.valid){
continue;
}
j0array[0]=x760.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x761=IKsin(j0);
IkReal x762=IKcos(j0);
IkReal x763=(py*x762);
IkReal x764=(py*x761);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x764);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x763))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x763))+(((1.1)*x764))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x765=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x766=x79;
evalcond[0]=IKabs(py);
evalcond[1]=x766;
evalcond[2]=x765;
evalcond[3]=x765;
evalcond[4]=x766;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x768=IKPowWithIntegerCheck(py,-1);
if(!x768.valid){
continue;
}
IkReal x767=x768.value;
if( IKabs(((0.00909090909090909)*x767*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x767*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x767*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))+IKsqr((x767*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x767*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))), (x767*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x769=IKcos(j0);
IkReal x770=IKsin(j0);
IkReal x771=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x770*x771)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x769*x771))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x770))+(((-1.0)*pp))+(((0.09)*py*x769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x773=IKPowWithIntegerCheck(py,-1);
if(!x773.valid){
continue;
}
IkReal x772=x773.value;
if( IKabs((x772*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x772*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x772*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x772*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x772*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x772*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x774=IKcos(j0);
IkReal x775=IKsin(j0);
IkReal x776=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x775*x776)));
evalcond[1]=((0.045)+(((-1.0)*x774*x776))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x775))+(((0.09)*py*x774))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x777 = IKatan2WithCheck((gconst13*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst13*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
j0array[0]=x777.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x778=IKcos(j0);
IkReal x779=IKsin(j0);
IkReal x780=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x779*x780)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x778*x780)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x779))+(((0.09)*py*x778))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x781=((0.045)*sj3);
IkReal x782=((0.3)*cj3);
IkReal x783=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x784=(x782+x781);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x784)));
evalcond[2]=x783;
evalcond[3]=x783;
evalcond[4]=((0.55)+x784);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x786=IKPowWithIntegerCheck(px,-1);
if(!x786.valid){
continue;
}
IkReal x785=x786.value;
if( IKabs((x785*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x785*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x785*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x785*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x785*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x785*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x787=IKcos(j0);
IkReal x788=IKsin(j0);
IkReal x789=(px*x788);
IkReal x790=(px*x787);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x790);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x789);
evalcond[2]=((-0.2125)+(((1.1)*x790))+(((-1.0)*pp))+(((-0.09)*x789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x792=IKPowWithIntegerCheck(px,-1);
if(!x792.valid){
continue;
}
IkReal x791=x792.value;
if( IKabs(((0.111111111111111)*x791*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x791*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x791*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x791*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x791*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x791*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x793=IKcos(j0);
IkReal x794=IKsin(j0);
IkReal x795=(px*x794);
IkReal x796=(px*x793);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x796);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x795);
evalcond[2]=((-0.2125)+(((1.1)*x796))+(((-1.0)*pp))+(((-0.09)*x795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x797 = IKatan2WithCheck((gconst14*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst14*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x797.valid){
continue;
}
j0array[0]=x797.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x798=IKcos(j0);
IkReal x799=IKsin(j0);
IkReal x800=(px*x799);
IkReal x801=(px*x798);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x801);
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x800);
evalcond[2]=((-0.2125)+(((-0.09)*x800))+(((-1.0)*pp))+(((1.1)*x801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x802=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x803=x79;
evalcond[0]=IKabs(px);
evalcond[1]=x803;
evalcond[2]=x802;
evalcond[3]=x802;
evalcond[4]=x803;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x805=IKPowWithIntegerCheck(px,-1);
if(!x805.valid){
continue;
}
IkReal x804=x805.value;
if( IKabs(((0.111111111111111)*x804*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x804*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x804*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x804*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x804*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x804*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x806=IKsin(j0);
IkReal x807=IKcos(j0);
IkReal x808=(px*x806);
IkReal x809=(px*x807);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x808);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x809))+(((-0.3)*cj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x808))+(((-1.1)*x809))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x811=IKPowWithIntegerCheck(px,-1);
if(!x811.valid){
continue;
}
IkReal x810=x811.value;
if( IKabs((x810*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x810*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x810*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x810*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x810*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x810*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x812=IKsin(j0);
IkReal x813=IKcos(j0);
IkReal x814=(px*x812);
IkReal x815=(px*x813);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x814);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x815)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x814))+(((-1.1)*x815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x816 = IKatan2WithCheck((gconst15*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst15*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x816.valid){
continue;
}
j0array[0]=x816.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x817=IKsin(j0);
IkReal x818=IKcos(j0);
IkReal x819=(px*x817);
IkReal x820=(px*x818);
evalcond[0]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+x819);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x820)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*x820))+(((-0.09)*x819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x821=(px*sj3);
IkReal x822=(py*sj1);
IkReal x823=((0.3)*cj3);
IkReal x824=((0.045)*cj3);
IkReal x825=(px*sj1);
IkReal x826=((1.0)*cj1*pz);
CheckValue<IkReal> x827 = IKatan2WithCheck((gconst3*((((py*x823))+(((-0.3)*sj1*x821))+((x824*x825))+(((-0.045)*x825))+(((-1.0)*py*x826))+(((0.045)*py*sj3))+(((0.55)*py))))),(gconst3*(((((0.3)*sj3*x822))+(((-1.0)*x822*x824))+((px*x823))+(((-1.0)*px*x826))+(((0.55)*px))+(((0.045)*x822))+(((0.045)*x821))))),IKFAST_ATAN2_MAGTHRESH);
if(!x827.valid){
continue;
}
j0array[0]=x827.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x828=IKsin(j0);
IkReal x829=IKcos(j0);
IkReal x830=((0.3)*cj3);
IkReal x831=((0.045)*sj3);
IkReal x832=(cj1*pz);
IkReal x833=(px*x828);
IkReal x834=(px*x829);
IkReal x835=(py*x828);
IkReal x836=(py*x829);
IkReal x837=(sj1*x835);
evalcond[0]=((((-1.0)*pz*sj1))+((cj1*x835))+((cj1*x834)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x836))+(((0.3)*sj3))+x833);
evalcond[2]=((-0.55)+(((-1.0)*x830))+(((-1.0)*x831))+x837+x832+((sj1*x834)));
evalcond[3]=((((-1.0)*x835))+(((-1.0)*x834))+(((0.55)*sj1))+((sj1*x831))+((sj1*x830)));
evalcond[4]=((-0.2125)+(((0.09)*x836))+(((1.1)*sj1*x834))+(((-1.0)*pp))+(((-0.09)*x833))+(((1.1)*x832))+(((1.1)*x837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x838=((0.045)*cj1);
IkReal x839=(pz*sj1);
IkReal x840=((0.3)*cj1*sj3);
CheckValue<IkReal> x841 = IKatan2WithCheck((gconst2*(((((-1.0)*px*x840))+(((-1.0)*px*x838))+((py*x839))+((cj3*px*x838))))),(gconst2*(((((-1.0)*cj3*py*x838))+((py*x840))+((py*x838))+((px*x839))))),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
j0array[0]=x841.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x842=IKsin(j0);
IkReal x843=IKcos(j0);
IkReal x844=((0.3)*cj3);
IkReal x845=((0.045)*sj3);
IkReal x846=(cj1*pz);
IkReal x847=(px*x842);
IkReal x848=(px*x843);
IkReal x849=(py*x842);
IkReal x850=(py*x843);
IkReal x851=(sj1*x849);
evalcond[0]=(((cj1*x849))+((cj1*x848))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-1.0)*x850))+(((-0.045)*cj3))+(((0.3)*sj3))+x847);
evalcond[2]=((-0.55)+(((-1.0)*x844))+(((-1.0)*x845))+x851+x846+((sj1*x848)));
evalcond[3]=((((-1.0)*x849))+(((-1.0)*x848))+(((0.55)*sj1))+((sj1*x844))+((sj1*x845)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x848))+(((1.1)*x851))+(((-1.0)*pp))+(((-0.09)*x847))+(((0.09)*x850))+(((1.1)*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign((((cj1*(px*px)))+((cj1*(py*py)))));
dummyeval[0]=(((cj1*(px*px)))+((cj1*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign((((sj1*(py*py)))+((sj1*(px*px)))));
dummyeval[0]=(((sj1*(py*py)))+((sj1*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x852=((0.30675)*sj3);
IkReal x853=((0.15)*pz);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.1275)+(((-1.0)*x852))+x853);
evalcond[2]=0;
evalcond[3]=((0.1275)+(((-1.0)*x853))+x852);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x854=((110.0)*pz);
IkReal x855=((100.0)*pp);
CheckValue<IkReal> x856 = IKatan2WithCheck((gconst19*((((px*x854))+(((-21.25)*px))+(((-1.0)*px*x855))))),(gconst19*(((((21.25)*py))+(((-1.0)*py*x854))+((py*x855))))),IKFAST_ATAN2_MAGTHRESH);
if(!x856.valid){
continue;
}
j0array[0]=x856.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x857=IKsin(j0);
IkReal x858=IKcos(j0);
IkReal x859=(px*x857);
IkReal x860=((1.0)*x858);
evalcond[0]=((((-1.0)*py*x857))+(((-1.0)*px*x860)));
evalcond[1]=((-0.1275)+(((0.15)*pz))+(((-0.30675)*sj3))+(((-1.0)*py*x860))+x859);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*x859))+(((1.1)*pz))+(((-0.09)*py*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x861=((0.15)*pz);
IkReal x862=((0.30675)*sj3);
CheckValue<IkReal> x863 = IKatan2WithCheck((gconst18*(((((-0.1275)*px))+((px*x861))+(((-1.0)*px*x862))))),(gconst18*(((((0.1275)*py))+(((-1.0)*py*x861))+((py*x862))))),IKFAST_ATAN2_MAGTHRESH);
if(!x863.valid){
continue;
}
j0array[0]=x863.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x864=IKsin(j0);
IkReal x865=IKcos(j0);
IkReal x866=(px*x864);
IkReal x867=((1.0)*x865);
evalcond[0]=((((-1.0)*py*x864))+(((-1.0)*px*x867)));
evalcond[1]=((-0.1275)+(((0.15)*pz))+(((-0.30675)*sj3))+(((-1.0)*py*x867))+x866);
evalcond[2]=((-0.2125)+(((-0.09)*py*x865))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x868=((0.15)*pz);
IkReal x869=((0.30675)*sj3);
IkReal x870=(x869+x868);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.1275)+(((-1.0)*x870)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x870);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x871=((110.0)*pz);
IkReal x872=((100.0)*pp);
CheckValue<IkReal> x873 = IKatan2WithCheck((gconst21*(((((-21.25)*px))+(((-1.0)*px*x872))+(((-1.0)*px*x871))))),(gconst21*(((((21.25)*py))+((py*x872))+((py*x871))))),IKFAST_ATAN2_MAGTHRESH);
if(!x873.valid){
continue;
}
j0array[0]=x873.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x874=IKsin(j0);
IkReal x875=IKcos(j0);
IkReal x876=(px*x874);
IkReal x877=(py*x875);
evalcond[0]=(((px*x875))+((py*x874)));
evalcond[1]=((-0.1275)+(((-1.0)*x877))+(((-0.15)*pz))+(((-0.30675)*sj3))+x876);
evalcond[2]=((-0.2125)+(((-0.09)*x877))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x878=((0.15)*pz);
IkReal x879=((0.30675)*sj3);
CheckValue<IkReal> x880 = IKatan2WithCheck((gconst20*(((((-0.1275)*px))+(((-1.0)*px*x879))+(((-1.0)*px*x878))))),(gconst20*(((((0.1275)*py))+((py*x879))+((py*x878))))),IKFAST_ATAN2_MAGTHRESH);
if(!x880.valid){
continue;
}
j0array[0]=x880.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x881=IKsin(j0);
IkReal x882=IKcos(j0);
IkReal x883=(px*x881);
IkReal x884=(py*x882);
evalcond[0]=(((px*x882))+((py*x881)));
evalcond[1]=((-0.1275)+(((-0.15)*pz))+(((-1.0)*x884))+(((-0.30675)*sj3))+x883);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x883))+(((-0.09)*x884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(((((-0.09)*(px*px)))+(((-0.09)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x885=((0.3)*sj3);
IkReal x886=((0.045)*cj3);
IkReal x887=((0.045)*sj3);
IkReal x888=((0.3)*cj3);
IkReal x889=(x887+x888);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x889)));
evalcond[2]=((-0.045)+(((-1.0)*x885))+x886);
evalcond[3]=((0.045)+(((-1.0)*x886))+x885);
evalcond[4]=((0.55)+x889);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x890=(py*sj3);
IkReal x891=((0.33)*cj3);
IkReal x892=((0.027)*cj3);
IkReal x893=(px*sj3);
CheckValue<IkReal> x894 = IKatan2WithCheck((gconst23*(((((-1.0)*pp*px))+((px*x891))+(((-1.0)*py*x892))+(((-0.0495)*py))+(((0.0495)*x893))+(((0.3925)*px))+(((-0.00405)*x890))))),(gconst23*(((((-0.0495)*x890))+(((-1.0)*py*x891))+(((-0.0495)*px))+(((-1.0)*px*x892))+(((-0.00405)*x893))+(((-0.3925)*py))+((pp*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
j0array[0]=x894.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x895=IKsin(j0);
IkReal x896=IKcos(j0);
IkReal x897=(px*x895);
IkReal x898=(py*x896);
IkReal x899=(px*x896);
IkReal x900=(py*x895);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x899+x900);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x898))+x897+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x899))+(((-1.0)*pp))+(((0.09)*x897))+(((-0.09)*x898))+(((1.1)*x900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x901=((0.3)*py);
IkReal x902=((0.045)*px);
IkReal x903=((0.045)*py);
IkReal x904=((0.3)*px);
CheckValue<IkReal> x905 = IKatan2WithCheck((gconst22*(((((-0.55)*py))+((cj3*x902))+(((-1.0)*x902))+(((-1.0)*sj3*x903))+(((-1.0)*sj3*x904))+(((-1.0)*cj3*x901))))),(gconst22*(((((-0.55)*px))+((sj3*x901))+(((-1.0)*sj3*x902))+(((-1.0)*cj3*x903))+(((-1.0)*cj3*x904))+x903))),IKFAST_ATAN2_MAGTHRESH);
if(!x905.valid){
continue;
}
j0array[0]=x905.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x906=IKsin(j0);
IkReal x907=IKcos(j0);
IkReal x908=(px*x906);
IkReal x909=(py*x907);
IkReal x910=(px*x907);
IkReal x911=(py*x906);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x911+x910);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x909))+x908+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x908))+(((1.1)*x911))+(((1.1)*x910))+(((-1.0)*pp))+(((-0.09)*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((1.1)*(py*py)))+(((1.1)*(px*px)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x912=((0.3)*sj3);
IkReal x913=((0.045)*cj3);
IkReal x914=x79;
evalcond[0]=((px*px)+(py*py));
evalcond[1]=x914;
evalcond[2]=((-0.045)+(((-1.0)*x912))+x913);
evalcond[3]=((0.045)+(((-1.0)*x913))+x912);
evalcond[4]=x914;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x915=((0.3)*sj3);
IkReal x916=((0.045)*cj3);
IkReal x917=x79;
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=x917;
evalcond[2]=((-0.045)+(((-1.0)*x915))+x916);
evalcond[3]=((0.045)+(((-1.0)*x916))+x915);
evalcond[4]=x917;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x918=(cj3*py);
IkReal x919=(py*sj3);
IkReal x920=((1.0)*pp);
IkReal x921=(cj3*px);
IkReal x922=(px*sj3);
CheckValue<IkReal> x923 = IKatan2WithCheck((gconst25*(((((0.027)*x919))+(((-0.00405)*x918))+(((0.33)*x922))+(((0.0495)*px))+(((-0.0495)*x921))+(((-1.0)*py*x920))+(((-0.20845)*py))))),(gconst25*(((((0.0495)*x918))+(((-1.0)*px*x920))+(((-0.33)*x919))+(((-0.0495)*py))+(((0.027)*x922))+(((-0.00405)*x921))+(((-0.20845)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x923.valid){
continue;
}
j0array[0]=x923.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x924=IKcos(j0);
IkReal x925=IKsin(j0);
IkReal x926=(px*x925);
IkReal x927=((1.0)*x924);
IkReal x928=(py*x925);
evalcond[0]=((-0.045)+(((0.045)*cj3))+(((-1.0)*py*x927))+x926+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*px*x927))+(((-1.0)*x928)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x924))+(((-1.1)*x928))+(((-1.1)*px*x924))+(((-1.0)*pp))+(((0.09)*x926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x929=((0.3)*py);
IkReal x930=((0.045)*px);
IkReal x931=((0.045)*py);
IkReal x932=((0.3)*px);
CheckValue<IkReal> x933 = IKatan2WithCheck((gconst24*(((((-0.55)*py))+(((-1.0)*sj3*x931))+(((-1.0)*cj3*x929))+(((-1.0)*cj3*x930))+x930+((sj3*x932))))),(gconst24*(((((-0.55)*px))+(((-1.0)*sj3*x930))+(((-1.0)*sj3*x929))+(((-1.0)*cj3*x932))+((cj3*x931))+(((-1.0)*x931))))),IKFAST_ATAN2_MAGTHRESH);
if(!x933.valid){
continue;
}
j0array[0]=x933.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x934=IKcos(j0);
IkReal x935=IKsin(j0);
IkReal x936=(px*x935);
IkReal x937=((1.0)*x934);
IkReal x938=(py*x935);
evalcond[0]=((-0.045)+(((0.045)*cj3))+(((-1.0)*py*x937))+x936+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*px*x937))+(((-1.0)*x938)));
evalcond[2]=((-0.2125)+(((-1.1)*x938))+(((-0.09)*py*x934))+(((-1.1)*px*x934))+(((-1.0)*pp))+(((0.09)*x936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x939=((0.3)*sj3);
IkReal x940=((0.045)*cj3);
IkReal x941=(cj1*pz);
IkReal x942=((0.3)*cj3);
IkReal x943=((0.045)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-1.0)*x943))+(((-1.0)*x942))+x941);
evalcond[2]=((-0.045)+x940+(((-1.0)*x939)));
evalcond[3]=(pz*sj1);
evalcond[4]=((0.045)+(((-1.0)*x940))+x939);
evalcond[5]=(((sj1*x943))+((sj1*x942))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x941)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x944=((0.30675)*sj3);
IkReal x945=((0.15)*pz);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.1275)+(((-1.0)*x944))+x945);
evalcond[2]=0;
evalcond[3]=((0.1275)+(((-1.0)*x945))+x944);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x947=IKPowWithIntegerCheck(py,-1);
if(!x947.valid){
continue;
}
IkReal x946=x947.value;
cj0array[0]=((((-2.36111111111111)*x946))+(((-11.1111111111111)*pp*x946))+(((12.2222222222222)*pz*x946)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.1275)+(((0.15)*pz))+(((-0.30675)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x949=IKPowWithIntegerCheck(py,-1);
if(!x949.valid){
continue;
}
IkReal x948=x949.value;
cj0array[0]=((((0.15)*pz*x948))+(((-0.1275)*x948))+(((-0.30675)*sj3*x948)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x950=((0.15)*pz);
IkReal x951=((0.30675)*sj3);
IkReal x952=(x951+x950);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.1275)+(((-1.0)*x952)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x952);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x954=IKPowWithIntegerCheck(py,-1);
if(!x954.valid){
continue;
}
IkReal x953=x954.value;
cj0array[0]=((((-11.1111111111111)*pp*x953))+(((-12.2222222222222)*pz*x953))+(((-2.36111111111111)*x953)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.1275)+(((-0.15)*pz))+(((-0.30675)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x956=IKPowWithIntegerCheck(py,-1);
if(!x956.valid){
continue;
}
IkReal x955=x956.value;
cj0array[0]=((((-0.30675)*sj3*x955))+(((-0.1275)*x955))+(((-0.15)*pz*x955)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x957=((0.30675)*sj3);
IkReal x958=((0.15)*pz);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+(((-1.0)*x957))+x958);
evalcond[2]=0;
evalcond[3]=((0.1275)+(((-1.0)*x958))+x957);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x960=IKPowWithIntegerCheck(px,-1);
if(!x960.valid){
continue;
}
IkReal x959=x960.value;
sj0array[0]=((((11.1111111111111)*pp*x959))+(((-12.2222222222222)*pz*x959))+(((2.36111111111111)*x959)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.1275)+(((0.15)*pz))+((px*(IKsin(j0))))+(((-0.30675)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x962=IKPowWithIntegerCheck(px,-1);
if(!x962.valid){
continue;
}
IkReal x961=x962.value;
sj0array[0]=((((0.30675)*sj3*x961))+(((-0.15)*pz*x961))+(((0.1275)*x961)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x963=((0.15)*pz);
IkReal x964=((0.30675)*sj3);
IkReal x965=(x963+x964);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+(((-1.0)*x965)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x965);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x967=IKPowWithIntegerCheck(px,-1);
if(!x967.valid){
continue;
}
IkReal x966=x967.value;
sj0array[0]=((((11.1111111111111)*pp*x966))+(((12.2222222222222)*pz*x966))+(((2.36111111111111)*x966)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.1275)+((px*(IKsin(j0))))+(((-0.15)*pz))+(((-0.30675)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x969=IKPowWithIntegerCheck(px,-1);
if(!x969.valid){
continue;
}
IkReal x968=x969.value;
sj0array[0]=((((0.15)*pz*x968))+(((0.30675)*sj3*x968))+(((0.1275)*x968)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x970=((0.3)*sj3);
IkReal x971=((0.045)*cj3);
IkReal x972=((0.045)*sj3);
IkReal x973=((0.3)*cj3);
IkReal x974=(x973+x972);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+(((-1.0)*x974)));
evalcond[2]=((-0.045)+x971+(((-1.0)*x970)));
evalcond[3]=((0.045)+x970+(((-1.0)*x971)));
evalcond[4]=((0.55)+x974);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x976=IKPowWithIntegerCheck(py,-1);
if(!x976.valid){
continue;
}
IkReal x975=x976.value;
if( IKabs(((0.00909090909090909)*x975*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x975*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x975*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))+IKsqr((x975*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x975*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))), (x975*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x977=IKsin(j0);
IkReal x978=IKcos(j0);
IkReal x979=(py*x978);
IkReal x980=(py*x977);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x980);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x979))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x979))+(((-1.0)*pp))+(((1.1)*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x982=IKPowWithIntegerCheck(py,-1);
if(!x982.valid){
continue;
}
IkReal x981=x982.value;
if( IKabs((x981*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x981*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x981*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x981*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x981*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x981*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x983=IKsin(j0);
IkReal x984=IKcos(j0);
IkReal x985=(py*x984);
IkReal x986=(py*x983);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x986);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x985))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x985))+(((-1.0)*pp))+(((1.1)*x986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x987 = IKatan2WithCheck((gconst26*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst26*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x987.valid){
continue;
}
j0array[0]=x987.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x988=IKsin(j0);
IkReal x989=IKcos(j0);
IkReal x990=(py*x989);
IkReal x991=(py*x988);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x991);
evalcond[1]=((-0.045)+(((-1.0)*x990))+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x991))+(((-1.0)*pp))+(((-0.09)*x990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x992=((0.3)*sj3);
IkReal x993=((0.045)*cj3);
IkReal x994=x79;
evalcond[0]=IKabs(py);
evalcond[1]=x994;
evalcond[2]=((-0.045)+(((-1.0)*x992))+x993);
evalcond[3]=((0.045)+(((-1.0)*x993))+x992);
evalcond[4]=x994;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x996=IKPowWithIntegerCheck(py,-1);
if(!x996.valid){
continue;
}
IkReal x995=x996.value;
if( IKabs(((0.00909090909090909)*x995*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x995*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x995*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))+IKsqr((x995*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x995*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))), (x995*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x997=IKsin(j0);
IkReal x998=IKcos(j0);
IkReal x999=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x997*x999)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x998*x999))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x997))+(((-1.0)*pp))+(((-0.09)*py*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(py,-1);
if(!x1001.valid){
continue;
}
IkReal x1000=x1001.value;
if( IKabs((x1000*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x1000*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1000*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x1000*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1000*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x1000*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1002=IKsin(j0);
IkReal x1003=IKcos(j0);
IkReal x1004=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1002*x1004)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1003*x1004))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x1002))+(((-0.09)*py*x1003))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1005 = IKatan2WithCheck((gconst27*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst27*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1005.valid){
continue;
}
j0array[0]=x1005.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1006=IKsin(j0);
IkReal x1007=IKcos(j0);
IkReal x1008=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1006*x1008)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1007*x1008))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x1006))+(((-0.09)*py*x1007))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1009=((0.3)*sj3);
IkReal x1010=((0.045)*cj3);
IkReal x1011=((0.045)*sj3);
IkReal x1012=((0.3)*cj3);
IkReal x1013=(x1011+x1012);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x1013)));
evalcond[2]=((-0.045)+x1010+(((-1.0)*x1009)));
evalcond[3]=((0.045)+x1009+(((-1.0)*x1010)));
evalcond[4]=((0.55)+x1013);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1015=IKPowWithIntegerCheck(px,-1);
if(!x1015.valid){
continue;
}
IkReal x1014=x1015.value;
if( IKabs((x1014*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1014*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1014*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1014*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1014*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x1014*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1016=IKsin(j0);
IkReal x1017=IKcos(j0);
IkReal x1018=(px*x1016);
IkReal x1019=(px*x1017);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1019+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1018+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1018))+(((1.1)*x1019))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1021=IKPowWithIntegerCheck(px,-1);
if(!x1021.valid){
continue;
}
IkReal x1020=x1021.value;
if( IKabs(((0.111111111111111)*x1020*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1020*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1020*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1020*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1020*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1020*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1022=IKsin(j0);
IkReal x1023=IKcos(j0);
IkReal x1024=(px*x1022);
IkReal x1025=(px*x1023);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1025+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1024+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1024))+(((-1.0)*pp))+(((1.1)*x1025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1026 = IKatan2WithCheck((gconst28*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst28*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1026.valid){
continue;
}
j0array[0]=x1026.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1027=IKsin(j0);
IkReal x1028=IKcos(j0);
IkReal x1029=(px*x1027);
IkReal x1030=(px*x1028);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1030+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1029+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1030))+(((0.09)*x1029))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1031=((0.3)*sj3);
IkReal x1032=((0.045)*cj3);
IkReal x1033=x79;
evalcond[0]=IKabs(px);
evalcond[1]=x1033;
evalcond[2]=((-0.045)+(((-1.0)*x1031))+x1032);
evalcond[3]=((0.045)+(((-1.0)*x1032))+x1031);
evalcond[4]=x1033;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1035=IKPowWithIntegerCheck(px,-1);
if(!x1035.valid){
continue;
}
IkReal x1034=x1035.value;
if( IKabs(((0.111111111111111)*x1034*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1034*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1034*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1034*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1034*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1034*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1036=IKsin(j0);
IkReal x1037=IKcos(j0);
IkReal x1038=(px*x1036);
IkReal x1039=(px*x1037);
evalcond[0]=((-0.045)+x1038+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1039))+(((-0.3)*cj3)));
evalcond[2]=((-0.2125)+(((-1.1)*x1039))+(((0.09)*x1038))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1041=IKPowWithIntegerCheck(px,-1);
if(!x1041.valid){
continue;
}
IkReal x1040=x1041.value;
if( IKabs((x1040*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1040*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1040*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1040*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1040*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x1040*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1042=IKsin(j0);
IkReal x1043=IKcos(j0);
IkReal x1044=(px*x1042);
IkReal x1045=(px*x1043);
evalcond[0]=((-0.045)+x1044+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1045)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*x1045))+(((0.09)*x1044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1046 = IKatan2WithCheck((gconst29*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst29*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1046.valid){
continue;
}
j0array[0]=x1046.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1047=IKsin(j0);
IkReal x1048=IKcos(j0);
IkReal x1049=(px*x1047);
IkReal x1050=(px*x1048);
evalcond[0]=((-0.045)+x1049+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1050)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*x1050))+(((0.09)*x1049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1051=(px*sj3);
IkReal x1052=((0.3)*cj3);
IkReal x1053=((0.3)*sj1);
IkReal x1054=(py*sj3);
IkReal x1055=((1.0)*cj1*pz);
IkReal x1056=((0.045)*py*sj1);
IkReal x1057=((0.045)*px*sj1);
CheckValue<IkReal> x1058 = IKatan2WithCheck((gconst17*((x1057+((py*x1052))+((x1051*x1053))+(((-1.0)*py*x1055))+(((0.045)*x1054))+(((0.55)*py))+(((-1.0)*cj3*x1057))))),(gconst17*(((((-1.0)*x1056))+((px*x1052))+((cj3*x1056))+(((-1.0)*px*x1055))+(((-1.0)*x1053*x1054))+(((0.045)*x1051))+(((0.55)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1058.valid){
continue;
}
j0array[0]=x1058.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1059=IKsin(j0);
IkReal x1060=IKcos(j0);
IkReal x1061=((1.1)*sj1);
IkReal x1062=((0.3)*cj3);
IkReal x1063=((0.045)*sj3);
IkReal x1064=((1.0)*cj1);
IkReal x1065=(cj1*pz);
IkReal x1066=(px*x1059);
IkReal x1067=(px*x1060);
IkReal x1068=(py*x1059);
IkReal x1069=(py*x1060);
evalcond[0]=(((pz*sj1))+(((-1.0)*x1064*x1068))+(((-1.0)*x1064*x1067)));
evalcond[1]=((-0.045)+x1066+(((0.045)*cj3))+(((-1.0)*x1069))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x1065+((sj1*x1067))+((sj1*x1068))+(((-1.0)*x1062))+(((-1.0)*x1063)));
evalcond[3]=(((sj1*x1062))+((sj1*x1063))+(((0.55)*sj1))+(((-1.0)*x1067))+(((-1.0)*x1068)));
evalcond[4]=((-0.2125)+(((0.09)*x1066))+((x1061*x1067))+((x1061*x1068))+(((1.1)*x1065))+(((-1.0)*pp))+(((-0.09)*x1069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1070=((0.045)*cj1);
IkReal x1071=(pz*sj1);
IkReal x1072=((0.3)*cj1*sj3);
CheckValue<IkReal> x1073 = IKatan2WithCheck((gconst16*(((((-1.0)*cj3*px*x1070))+((px*x1072))+((px*x1070))+((py*x1071))))),(gconst16*((((px*x1071))+(((-1.0)*py*x1070))+(((-1.0)*py*x1072))+((cj3*py*x1070))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1073.valid){
continue;
}
j0array[0]=x1073.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1074=IKsin(j0);
IkReal x1075=IKcos(j0);
IkReal x1076=((1.1)*sj1);
IkReal x1077=((0.3)*cj3);
IkReal x1078=((0.045)*sj3);
IkReal x1079=((1.0)*cj1);
IkReal x1080=(cj1*pz);
IkReal x1081=(px*x1074);
IkReal x1082=(px*x1075);
IkReal x1083=(py*x1074);
IkReal x1084=(py*x1075);
evalcond[0]=((((-1.0)*x1079*x1082))+(((-1.0)*x1079*x1083))+((pz*sj1)));
evalcond[1]=((-0.045)+x1081+(((0.045)*cj3))+(((-1.0)*x1084))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x1080+((sj1*x1082))+((sj1*x1083))+(((-1.0)*x1077))+(((-1.0)*x1078)));
evalcond[3]=((((-1.0)*x1082))+(((-1.0)*x1083))+((sj1*x1077))+((sj1*x1078))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-0.09)*x1084))+((x1076*x1082))+((x1076*x1083))+(((-1.0)*pp))+(((1.1)*x1080))+(((0.09)*x1081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1085=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1085;
evalcond[3]=x1085;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
IkReal x1086=((1.0)*sj2);
gconst31=IKsign(((((-1.0)*x1086*(py*py)))+(((-1.0)*x1086*(px*px)))));
IkReal x1087=((1.0)*sj2);
dummyeval[0]=((((-1.0)*x1087*(py*py)))+(((-1.0)*x1087*(px*px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1088=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=x1088;
evalcond[3]=x1088;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1089=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=x1089;
evalcond[3]=x1089;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1090=((110.0)*pz);
IkReal x1091=((100.0)*pp);
CheckValue<IkReal> x1092 = IKatan2WithCheck((gconst33*(((((-1.0)*py*x1091))+(((-21.25)*py))+((py*x1090))))),(gconst33*(((((-21.25)*px))+((px*x1090))+(((-1.0)*px*x1091))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1092.valid){
continue;
}
j0array[0]=x1092.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1093=IKcos(j0);
IkReal x1094=IKsin(j0);
IkReal x1095=((1.0)*py);
IkReal x1096=(px*x1093);
evalcond[0]=((((-1.0)*x1093*x1095))+((px*x1094)));
evalcond[1]=((0.045)+(((-1.0)*x1096))+(((-0.045)*cj3))+(((-1.0)*x1094*x1095))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1094))+(((-1.0)*pp))+(((0.09)*x1096))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1097=((0.3)*sj3);
IkReal x1098=((0.045)*px);
IkReal x1099=((0.045)*py);
CheckValue<IkReal> x1100 = IKatan2WithCheck((gconst32*((x1099+(((-1.0)*cj3*x1099))+((py*x1097))))),(gconst32*((x1098+(((-1.0)*cj3*x1098))+((px*x1097))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1100.valid){
continue;
}
j0array[0]=x1100.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1101=IKcos(j0);
IkReal x1102=IKsin(j0);
IkReal x1103=((1.0)*py);
IkReal x1104=(px*x1101);
evalcond[0]=(((px*x1102))+(((-1.0)*x1101*x1103)));
evalcond[1]=((0.045)+(((-1.0)*x1104))+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1102*x1103)));
evalcond[2]=((-0.2125)+(((0.09)*x1104))+(((0.09)*py*x1102))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1105=((0.045)*cj3);
IkReal x1106=((0.3)*sj3);
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=((0.045)+x1106+(((-1.0)*x1105)));
evalcond[3]=((-0.045)+x1105+(((-1.0)*x1106)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1107=((0.045)*cj3);
IkReal x1108=((0.3)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.045)+x1108+(((-1.0)*x1107)));
evalcond[3]=((-0.045)+x1107+(((-1.0)*x1108)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1109=((110.0)*pz);
IkReal x1110=((100.0)*pp);
CheckValue<IkReal> x1111 = IKatan2WithCheck((gconst35*(((((-1.0)*py*x1110))+((py*x1109))+(((-21.25)*py))))),(gconst35*(((((-1.0)*px*x1110))+(((-21.25)*px))+((px*x1109))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1111.valid){
continue;
}
j0array[0]=x1111.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1112=IKsin(j0);
IkReal x1113=IKcos(j0);
IkReal x1114=(px*x1113);
IkReal x1115=(py*x1112);
evalcond[0]=(((px*x1112))+(((-1.0)*py*x1113)));
evalcond[1]=((0.045)+x1115+x1114+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*x1114))+(((-0.09)*x1115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1116=((0.3)*sj3);
IkReal x1117=((0.045)*px);
IkReal x1118=((0.045)*py);
CheckValue<IkReal> x1119 = IKatan2WithCheck((gconst34*((x1118+((py*x1116))+(((-1.0)*cj3*x1118))))),(gconst34*((x1117+((px*x1116))+(((-1.0)*cj3*x1117))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1119.valid){
continue;
}
j0array[0]=x1119.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1120=IKsin(j0);
IkReal x1121=IKcos(j0);
IkReal x1122=(px*x1121);
IkReal x1123=(py*x1120);
evalcond[0]=(((px*x1120))+(((-1.0)*py*x1121)));
evalcond[1]=((0.045)+x1122+x1123+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*x1123))+(((-0.09)*x1122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1124=((0.045)*cj2);
IkReal x1125=((0.3)*sj3);
IkReal x1126=((0.045)*cj3);
evalcond[0]=((px*px)+(py*py));
evalcond[1]=((((-1.0)*sj2*x1126))+(((0.045)*sj2))+((sj2*x1125)));
evalcond[2]=0;
evalcond[3]=((0.045)+x1125+(((-1.0)*x1126)));
evalcond[4]=(x1124+((cj2*x1125))+(((-1.0)*cj3*x1124)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1127=((0.045)*cj2);
IkReal x1128=((0.3)*sj3);
IkReal x1129=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((((-1.0)*sj2*x1129))+(((0.045)*sj2))+((sj2*x1128)));
evalcond[2]=0;
evalcond[3]=((0.045)+x1128+(((-1.0)*x1129)));
evalcond[4]=(x1127+((cj2*x1128))+(((-1.0)*cj3*x1127)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1130=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=x1130;
evalcond[3]=x1130;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1132=IKPowWithIntegerCheck(py,-1);
if(!x1132.valid){
continue;
}
IkReal x1131=x1132.value;
sj0array[0]=((((2.36111111111111)*x1131))+(((11.1111111111111)*pp*x1131))+(((-12.2222222222222)*pz*x1131)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1135=IKPowWithIntegerCheck(py,-1);
if(!x1135.valid){
continue;
}
IkReal x1133=x1135.value;
IkReal x1134=((0.045)*x1133);
sj0array[0]=(x1134+(((0.3)*sj3*x1133))+(((-1.0)*cj3*x1134)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1136=((0.045)*cj3);
IkReal x1137=((0.3)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.045)+x1137+(((-1.0)*x1136)));
evalcond[3]=((-0.045)+x1136+(((-1.0)*x1137)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1139=IKPowWithIntegerCheck(py,-1);
if(!x1139.valid){
continue;
}
IkReal x1138=x1139.value;
sj0array[0]=((((-11.1111111111111)*pp*x1138))+(((12.2222222222222)*pz*x1138))+(((-2.36111111111111)*x1138)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+((py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1142=IKPowWithIntegerCheck(py,-1);
if(!x1142.valid){
continue;
}
IkReal x1140=x1142.value;
IkReal x1141=((0.045)*x1140);
sj0array[0]=(((cj3*x1141))+(((-1.0)*x1141))+(((-0.3)*sj3*x1140)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1143=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x1143;
evalcond[3]=x1143;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(px,-1);
if(!x1145.valid){
continue;
}
IkReal x1144=x1145.value;
cj0array[0]=((((-12.2222222222222)*pz*x1144))+(((2.36111111111111)*x1144))+(((11.1111111111111)*pp*x1144)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1148=IKPowWithIntegerCheck(px,-1);
if(!x1148.valid){
continue;
}
IkReal x1146=x1148.value;
IkReal x1147=((0.045)*x1146);
cj0array[0]=((((-1.0)*cj3*x1147))+x1147+(((0.3)*sj3*x1146)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1149=((0.045)*cj3);
IkReal x1150=((0.3)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.045)+x1150+(((-1.0)*x1149)));
evalcond[3]=((-0.045)+x1149+(((-1.0)*x1150)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1152=IKPowWithIntegerCheck(px,-1);
if(!x1152.valid){
continue;
}
IkReal x1151=x1152.value;
cj0array[0]=((((-2.36111111111111)*x1151))+(((-11.1111111111111)*pp*x1151))+(((12.2222222222222)*pz*x1151)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(px,-1);
if(!x1155.valid){
continue;
}
IkReal x1153=x1155.value;
IkReal x1154=((0.045)*x1153);
cj0array[0]=((((-1.0)*x1154))+((cj3*x1154))+(((-0.3)*sj3*x1153)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1156=sj2*sj2;
IkReal x1157=(cj2*sj2);
IkReal x1158=((0.3)*sj3);
IkReal x1159=((0.045)*py);
IkReal x1160=((0.045)*cj3*px);
IkReal x1161=(px*x1156);
IkReal x1162=(x1156*x1159);
CheckValue<IkReal> x1163 = IKatan2WithCheck((gconst31*(((((-1.0)*x1156*x1160))+(((-1.0)*x1157*x1159))+(((0.045)*x1161))+((cj3*x1157*x1159))+((x1158*x1161))+(((-1.0)*py*x1157*x1158))))),(gconst31*(((((-1.0)*py*x1156*x1158))+((x1157*x1160))+((cj3*x1162))+(((-1.0)*x1162))+(((-0.045)*px*x1157))+(((-1.0)*px*x1157*x1158))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1163.valid){
continue;
}
j0array[0]=x1163.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1164=IKcos(j0);
IkReal x1165=IKsin(j0);
IkReal x1166=((0.045)*cj2);
IkReal x1167=((0.09)*sj2);
IkReal x1168=((0.3)*sj3);
IkReal x1169=((0.045)*cj3);
IkReal x1170=((0.09)*cj2);
IkReal x1171=((1.0)*cj2);
IkReal x1172=(px*x1165);
IkReal x1173=(px*x1164);
IkReal x1174=(py*x1164);
IkReal x1175=(py*x1165);
evalcond[0]=(((sj2*x1168))+x1172+(((-1.0)*sj2*x1169))+(((0.045)*sj2))+(((-1.0)*x1174)));
evalcond[1]=(x1166+(((-1.0)*cj3*x1166))+((cj2*x1168))+(((-1.0)*x1175))+(((-1.0)*x1173)));
evalcond[2]=((((-1.0)*x1171*x1174))+((cj2*x1172))+((sj2*x1173))+((sj2*x1175)));
evalcond[3]=((0.045)+x1168+(((-1.0)*x1171*x1173))+(((-1.0)*x1171*x1175))+(((-1.0)*sj2*x1174))+(((-1.0)*x1169))+((sj2*x1172)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x1167*x1172))+(((1.1)*pz))+((x1167*x1174))+((x1170*x1173))+((x1170*x1175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1176=(px*sj2);
IkReal x1177=((0.3)*sj3);
IkReal x1178=(cj2*py);
IkReal x1179=(py*sj2);
IkReal x1180=((0.045)*cj3*py);
IkReal x1181=((0.045)*cj2*px);
CheckValue<IkReal> x1182 = IKatan2WithCheck((gconst30*(((((0.045)*x1178))+(((0.045)*cj3*x1176))+(((-0.045)*cj3*x1178))+((x1177*x1178))+(((-1.0)*x1176*x1177))+(((-0.045)*x1176))))),(gconst30*((x1181+(((0.045)*x1179))+(((-0.045)*cj3*x1179))+((x1177*x1179))+(((-1.0)*cj3*x1181))+((cj2*px*x1177))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
j0array[0]=x1182.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1183=IKcos(j0);
IkReal x1184=IKsin(j0);
IkReal x1185=((0.045)*cj2);
IkReal x1186=((0.09)*sj2);
IkReal x1187=((0.3)*sj3);
IkReal x1188=((0.045)*cj3);
IkReal x1189=((0.09)*cj2);
IkReal x1190=((1.0)*cj2);
IkReal x1191=(px*x1184);
IkReal x1192=(px*x1183);
IkReal x1193=(py*x1183);
IkReal x1194=(py*x1184);
evalcond[0]=(x1191+(((0.045)*sj2))+((sj2*x1187))+(((-1.0)*x1193))+(((-1.0)*sj2*x1188)));
evalcond[1]=(x1185+(((-1.0)*cj3*x1185))+(((-1.0)*x1192))+(((-1.0)*x1194))+((cj2*x1187)));
evalcond[2]=((((-1.0)*x1190*x1193))+((sj2*x1192))+((sj2*x1194))+((cj2*x1191)));
evalcond[3]=((0.045)+x1187+(((-1.0)*x1190*x1194))+(((-1.0)*x1190*x1192))+(((-1.0)*x1188))+((sj2*x1191))+(((-1.0)*sj2*x1193)));
evalcond[4]=((-0.2125)+((x1186*x1193))+((x1189*x1194))+((x1189*x1192))+(((-1.0)*x1186*x1191))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1195=((0.045)*sj3);
IkReal x1196=((0.3)*cj3);
IkReal x1197=(x1195+x1196);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1197))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1197+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign((((sj2*(px*px)))+((sj2*(py*py)))));
dummyeval[0]=(((sj2*(px*px)))+((sj2*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1198=((0.045)*cj3);
IkReal x1199=((0.3)*sj3);
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=((0.045)+x1199+(((-1.0)*x1198)));
evalcond[3]=((-0.045)+x1198+(((-1.0)*x1199)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1200=((0.045)*cj3);
IkReal x1201=((0.3)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.045)+x1201+(((-1.0)*x1200)));
evalcond[3]=((-0.045)+x1200+(((-1.0)*x1201)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1202=((110.0)*pz);
IkReal x1203=((100.0)*pp);
CheckValue<IkReal> x1204 = IKatan2WithCheck((gconst39*(((((-21.25)*py))+(((-1.0)*py*x1202))+(((-1.0)*py*x1203))))),(gconst39*(((((-21.25)*px))+(((-1.0)*px*x1203))+(((-1.0)*px*x1202))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
j0array[0]=x1204.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1205=IKsin(j0);
IkReal x1206=IKcos(j0);
IkReal x1207=(px*x1206);
IkReal x1208=(py*x1205);
evalcond[0]=((((-1.0)*py*x1206))+((px*x1205)));
evalcond[1]=((0.045)+x1208+x1207+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1208))+(((-0.09)*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1209=((0.3)*sj3);
IkReal x1210=((0.045)*px);
IkReal x1211=((0.045)*py);
CheckValue<IkReal> x1212 = IKatan2WithCheck((gconst38*((x1211+(((-1.0)*cj3*x1211))+((py*x1209))))),(gconst38*((x1210+(((-1.0)*cj3*x1210))+((px*x1209))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1212.valid){
continue;
}
j0array[0]=x1212.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1213=IKsin(j0);
IkReal x1214=IKcos(j0);
IkReal x1215=(px*x1214);
IkReal x1216=(py*x1213);
evalcond[0]=((((-1.0)*py*x1214))+((px*x1213)));
evalcond[1]=((0.045)+x1216+x1215+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1216))+(((-0.09)*x1215))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1217=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=x1217;
evalcond[3]=x1217;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1218=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=x1218;
evalcond[3]=x1218;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1219=((110.0)*pz);
IkReal x1220=((100.0)*pp);
CheckValue<IkReal> x1221 = IKatan2WithCheck((gconst41*(((((-1.0)*py*x1220))+(((-21.25)*py))+(((-1.0)*py*x1219))))),(gconst41*(((((-1.0)*px*x1220))+(((-1.0)*px*x1219))+(((-21.25)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1221.valid){
continue;
}
j0array[0]=x1221.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1222=IKcos(j0);
IkReal x1223=IKsin(j0);
IkReal x1224=((1.0)*py);
IkReal x1225=(px*x1222);
evalcond[0]=((((-1.0)*x1222*x1224))+((px*x1223)));
evalcond[1]=((0.045)+(((-1.0)*x1225))+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1223*x1224)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1223))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1226=((0.3)*sj3);
IkReal x1227=((0.045)*px);
IkReal x1228=((0.045)*py);
CheckValue<IkReal> x1229 = IKatan2WithCheck((gconst40*((x1228+((py*x1226))+(((-1.0)*cj3*x1228))))),(gconst40*((x1227+((px*x1226))+(((-1.0)*cj3*x1227))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1229.valid){
continue;
}
j0array[0]=x1229.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1230=IKcos(j0);
IkReal x1231=IKsin(j0);
IkReal x1232=((1.0)*py);
IkReal x1233=(px*x1230);
evalcond[0]=((((-1.0)*x1230*x1232))+((px*x1231)));
evalcond[1]=((0.045)+(((-1.0)*x1233))+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1231*x1232)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1231))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1234=((0.045)*cj2);
IkReal x1235=((0.3)*sj3);
IkReal x1236=((0.045)*cj3);
evalcond[0]=((px*px)+(py*py));
evalcond[1]=(((sj2*x1235))+(((0.045)*sj2))+(((-1.0)*sj2*x1236)));
evalcond[2]=0;
evalcond[3]=((0.045)+x1235+(((-1.0)*x1236)));
evalcond[4]=(((cj3*x1234))+(((-1.0)*x1234))+(((-1.0)*cj2*x1235)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1237=((0.045)*cj2);
IkReal x1238=((0.3)*sj3);
IkReal x1239=((0.045)*cj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=(((sj2*x1238))+(((0.045)*sj2))+(((-1.0)*sj2*x1239)));
evalcond[2]=0;
evalcond[3]=((0.045)+x1238+(((-1.0)*x1239)));
evalcond[4]=(((cj3*x1237))+(((-1.0)*x1237))+(((-1.0)*cj2*x1238)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1240=((0.045)*cj3);
IkReal x1241=((0.3)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.045)+x1241+(((-1.0)*x1240)));
evalcond[3]=((-0.045)+x1240+(((-1.0)*x1241)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1243=IKPowWithIntegerCheck(py,-1);
if(!x1243.valid){
continue;
}
IkReal x1242=x1243.value;
sj0array[0]=((((-12.2222222222222)*pz*x1242))+(((-11.1111111111111)*pp*x1242))+(((-2.36111111111111)*x1242)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+((py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1246=IKPowWithIntegerCheck(py,-1);
if(!x1246.valid){
continue;
}
IkReal x1244=x1246.value;
IkReal x1245=((0.045)*x1244);
sj0array[0]=((((-0.3)*sj3*x1244))+(((-1.0)*x1245))+((cj3*x1245)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1247=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=x1247;
evalcond[3]=x1247;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1249=IKPowWithIntegerCheck(py,-1);
if(!x1249.valid){
continue;
}
IkReal x1248=x1249.value;
sj0array[0]=((((2.36111111111111)*x1248))+(((11.1111111111111)*pp*x1248))+(((12.2222222222222)*pz*x1248)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(py,-1);
if(!x1252.valid){
continue;
}
IkReal x1250=x1252.value;
IkReal x1251=((0.045)*x1250);
sj0array[0]=(x1251+(((0.3)*sj3*x1250))+(((-1.0)*cj3*x1251)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1253=((0.045)*cj3);
IkReal x1254=((0.3)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x1253))+x1254);
evalcond[3]=((-0.045)+(((-1.0)*x1254))+x1253);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1256=IKPowWithIntegerCheck(px,-1);
if(!x1256.valid){
continue;
}
IkReal x1255=x1256.value;
cj0array[0]=((((-12.2222222222222)*pz*x1255))+(((-11.1111111111111)*pp*x1255))+(((-2.36111111111111)*x1255)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1259=IKPowWithIntegerCheck(px,-1);
if(!x1259.valid){
continue;
}
IkReal x1257=x1259.value;
IkReal x1258=((0.045)*x1257);
cj0array[0]=((((-1.0)*x1258))+((cj3*x1258))+(((-0.3)*sj3*x1257)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1260=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x1260;
evalcond[3]=x1260;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1262=IKPowWithIntegerCheck(px,-1);
if(!x1262.valid){
continue;
}
IkReal x1261=x1262.value;
cj0array[0]=((((2.36111111111111)*x1261))+(((11.1111111111111)*pp*x1261))+(((12.2222222222222)*pz*x1261)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1265=IKPowWithIntegerCheck(px,-1);
if(!x1265.valid){
continue;
}
IkReal x1263=x1265.value;
IkReal x1264=((0.045)*x1263);
cj0array[0]=(x1264+(((0.3)*sj3*x1263))+(((-1.0)*cj3*x1264)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1266=sj2*sj2;
IkReal x1267=(cj2*sj2);
IkReal x1268=((0.3)*sj3);
IkReal x1269=((0.045)*py);
IkReal x1270=((0.045)*cj3*px);
IkReal x1271=(px*x1266);
IkReal x1272=(x1266*x1269);
CheckValue<IkReal> x1273 = IKatan2WithCheck((gconst37*(((((-1.0)*x1268*x1271))+((cj3*x1267*x1269))+(((-1.0)*x1267*x1269))+(((-0.045)*x1271))+((x1266*x1270))+(((-1.0)*py*x1267*x1268))))),(gconst37*((x1272+((py*x1266*x1268))+(((-1.0)*cj3*x1272))+((x1267*x1270))+(((-1.0)*px*x1267*x1268))+(((-0.045)*px*x1267))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1273.valid){
continue;
}
j0array[0]=x1273.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1274=IKcos(j0);
IkReal x1275=IKsin(j0);
IkReal x1276=((0.045)*cj2);
IkReal x1277=((0.09)*sj2);
IkReal x1278=((0.3)*sj3);
IkReal x1279=((0.045)*cj3);
IkReal x1280=((1.0)*sj2);
IkReal x1281=((0.09)*cj2);
IkReal x1282=(px*x1275);
IkReal x1283=(px*x1274);
IkReal x1284=(py*x1274);
IkReal x1285=(py*x1275);
evalcond[0]=((((-1.0)*x1284))+x1282+((sj2*x1278))+(((0.045)*sj2))+(((-1.0)*sj2*x1279)));
evalcond[1]=((((-1.0)*x1283))+(((-1.0)*x1285))+(((-1.0)*x1276))+(((-1.0)*cj2*x1278))+((cj3*x1276)));
evalcond[2]=((((-1.0)*cj2*x1284))+((cj2*x1282))+(((-1.0)*x1280*x1285))+(((-1.0)*x1280*x1283)));
evalcond[3]=((0.045)+x1278+(((-1.0)*x1279))+((sj2*x1282))+((cj2*x1285))+((cj2*x1283))+(((-1.0)*x1280*x1284)));
evalcond[4]=((-0.2125)+(((-1.0)*x1277*x1282))+(((-1.0)*pp))+(((-1.1)*pz))+((x1277*x1284))+(((-1.0)*x1281*x1283))+(((-1.0)*x1281*x1285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1286=(px*sj2);
IkReal x1287=((0.3)*sj3);
IkReal x1288=((0.045)*cj2);
IkReal x1289=(py*sj2);
IkReal x1290=((0.045)*cj3*py);
CheckValue<IkReal> x1291 = IKatan2WithCheck((gconst36*(((((0.045)*cj3*x1286))+(((-0.045)*x1286))+(((-1.0)*cj2*py*x1287))+(((-1.0)*x1286*x1287))+((cj3*py*x1288))+(((-1.0)*py*x1288))))),(gconst36*(((((-1.0)*px*x1288))+((cj3*px*x1288))+(((0.045)*x1289))+((x1287*x1289))+(((-0.045)*cj3*x1289))+(((-1.0)*cj2*px*x1287))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
j0array[0]=x1291.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1292=IKcos(j0);
IkReal x1293=IKsin(j0);
IkReal x1294=((0.045)*cj2);
IkReal x1295=((0.09)*sj2);
IkReal x1296=((0.3)*sj3);
IkReal x1297=((0.045)*cj3);
IkReal x1298=((1.0)*sj2);
IkReal x1299=((0.09)*cj2);
IkReal x1300=(px*x1293);
IkReal x1301=(px*x1292);
IkReal x1302=(py*x1292);
IkReal x1303=(py*x1293);
evalcond[0]=(x1300+((sj2*x1296))+(((-1.0)*sj2*x1297))+(((-1.0)*x1302))+(((0.045)*sj2)));
evalcond[1]=((((-1.0)*x1294))+((cj3*x1294))+(((-1.0)*x1301))+(((-1.0)*x1303))+(((-1.0)*cj2*x1296)));
evalcond[2]=((((-1.0)*cj2*x1302))+((cj2*x1300))+(((-1.0)*x1298*x1301))+(((-1.0)*x1298*x1303)));
evalcond[3]=((0.045)+x1296+(((-1.0)*x1297))+((sj2*x1300))+((cj2*x1301))+((cj2*x1303))+(((-1.0)*x1298*x1302)));
evalcond[4]=((-0.2125)+(((-1.0)*x1299*x1303))+(((-1.0)*x1299*x1301))+((x1295*x1302))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x1295*x1300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1304=((1.0)*pp);
IkReal x1305=((0.3)*sj3);
IkReal x1306=((0.045)*cj3);
IkReal x1307=((0.045)*cj2);
IkReal x1308=((0.3)*cj3);
IkReal x1309=((0.045)*sj3);
IkReal x1310=(pz*sj1);
IkReal x1311=(cj2*sj1);
IkReal x1312=(cj1*cj2);
IkReal x1313=(cj1*pz);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*x1304))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+x1313+(((-1.0)*x1309))+(((-1.0)*x1308)));
evalcond[3]=(((sj2*x1305))+(((0.045)*sj2))+(((-1.0)*sj2*x1306)));
evalcond[4]=((-1.0)*sj2*x1310);
evalcond[5]=((((-0.55)*cj1))+(((-1.0)*x1306*x1311))+((x1305*x1311))+pz+(((-1.0)*cj1*x1309))+(((-1.0)*cj1*x1308))+((sj1*x1307)));
evalcond[6]=((0.045)+x1305+(((-1.0)*x1306))+((cj2*x1310)));
evalcond[7]=((((-1.0)*x1306*x1312))+((x1305*x1312))+((cj1*x1307))+(((0.55)*sj1))+((sj1*x1309))+((sj1*x1308)));
evalcond[8]=((-0.2125)+(((-0.09)*cj2*x1310))+(((-1.0)*x1304))+(((1.1)*x1313)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1314=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=x1314;
evalcond[2]=0;
evalcond[3]=x1314;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1316=IKPowWithIntegerCheck(py,-1);
if(!x1316.valid){
continue;
}
IkReal x1315=x1316.value;
cj0array[0]=((((2.36111111111111)*x1315))+(((11.1111111111111)*pp*x1315))+(((-12.2222222222222)*pz*x1315)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1318=IKPowWithIntegerCheck(py,-1);
if(!x1318.valid){
continue;
}
IkReal x1317=x1318.value;
cj0array[0]=((((0.1275)*x1317))+(((-0.15)*pz*x1317))+(((0.30675)*sj3*x1317)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1319=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=x1319;
evalcond[2]=0;
evalcond[3]=x1319;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1321=IKPowWithIntegerCheck(py,-1);
if(!x1321.valid){
continue;
}
IkReal x1320=x1321.value;
cj0array[0]=((((2.36111111111111)*x1320))+(((12.2222222222222)*pz*x1320))+(((11.1111111111111)*pp*x1320)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1323=IKPowWithIntegerCheck(py,-1);
if(!x1323.valid){
continue;
}
IkReal x1322=x1323.value;
cj0array[0]=((((0.15)*pz*x1322))+(((0.1275)*x1322))+(((0.30675)*sj3*x1322)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1324=((0.045)*sj3);
IkReal x1325=((0.3)*cj3);
IkReal x1326=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1327=(x1324+x1325);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+(((-1.0)*x1327)));
evalcond[2]=x1326;
evalcond[3]=x1326;
evalcond[4]=((0.55)+x1327);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1329=IKPowWithIntegerCheck(py,-1);
if(!x1329.valid){
continue;
}
IkReal x1328=x1329.value;
if( IKabs(((0.00909090909090909)*x1328*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1328*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x1328*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))+IKsqr((x1328*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x1328*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))), (x1328*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1330=IKsin(j0);
IkReal x1331=IKcos(j0);
IkReal x1332=(py*x1331);
IkReal x1333=(py*x1330);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1333+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-1.0)*x1332))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1332))+(((-1.0)*pp))+(((1.1)*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1335=IKPowWithIntegerCheck(py,-1);
if(!x1335.valid){
continue;
}
IkReal x1334=x1335.value;
if( IKabs((x1334*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x1334*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1334*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x1334*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1334*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x1334*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1336=IKsin(j0);
IkReal x1337=IKcos(j0);
IkReal x1338=(py*x1337);
IkReal x1339=(py*x1336);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1339+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-1.0)*x1338))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1338))+(((-1.0)*pp))+(((1.1)*x1339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1340 = IKatan2WithCheck((gconst43*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst43*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1340.valid){
continue;
}
j0array[0]=x1340.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1341=IKsin(j0);
IkReal x1342=IKcos(j0);
IkReal x1343=(py*x1342);
IkReal x1344=(py*x1341);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1344+(((-0.3)*cj3)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1343)));
evalcond[2]=((-0.2125)+(((0.09)*x1343))+(((1.1)*x1344))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1345=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1346=x79;
evalcond[0]=IKabs(py);
evalcond[1]=x1346;
evalcond[2]=x1345;
evalcond[3]=x1345;
evalcond[4]=x1346;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1348=IKPowWithIntegerCheck(py,-1);
if(!x1348.valid){
continue;
}
IkReal x1347=x1348.value;
if( IKabs(((0.00909090909090909)*x1347*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1347*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x1347*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))+IKsqr((x1347*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x1347*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))), (x1347*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1349=IKcos(j0);
IkReal x1350=IKsin(j0);
IkReal x1351=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1350*x1351)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1349*x1351)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1349))+(((-1.1)*py*x1350))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1353=IKPowWithIntegerCheck(py,-1);
if(!x1353.valid){
continue;
}
IkReal x1352=x1353.value;
if( IKabs((x1352*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x1352*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1352*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x1352*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1352*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x1352*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1354=IKcos(j0);
IkReal x1355=IKsin(j0);
IkReal x1356=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1355*x1356)));
evalcond[1]=((0.045)+(((-1.0)*x1354*x1356))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1354))+(((-1.1)*py*x1355))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1357 = IKatan2WithCheck((gconst44*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst44*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
j0array[0]=x1357.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1358=IKcos(j0);
IkReal x1359=IKsin(j0);
IkReal x1360=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1359*x1360)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1358*x1360)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1358))+(((-1.1)*py*x1359))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1361=(cj1*pz);
IkReal x1362=((0.3)*cj3);
IkReal x1363=((0.045)*sj3);
IkReal x1364=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+x1361+(((-1.0)*x1363))+(((-1.0)*x1362)));
evalcond[2]=x1364;
evalcond[3]=((-1.0)*pz*sj1);
evalcond[4]=x1364;
evalcond[5]=(((sj1*x1363))+((sj1*x1362))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((1.1)*x1361))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(py,-1);
if(!x1366.valid){
continue;
}
IkReal x1365=x1366.value;
CheckValue<IkReal> x1367=IKPowWithIntegerCheck(sj1,-1);
if(!x1367.valid){
continue;
}
if( IKabs((x1365*(x1367.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1365*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1365*(x1367.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))+IKsqr((x1365*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1365*(x1367.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))), (x1365*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1368=IKsin(j0);
IkReal x1369=IKcos(j0);
IkReal x1370=(cj1*pz);
IkReal x1371=((0.3)*cj3);
IkReal x1372=((0.045)*sj3);
IkReal x1373=(py*x1368);
IkReal x1374=(py*x1369);
evalcond[0]=(((cj1*x1373))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+(((-1.0)*x1374))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x1370+(((-1.0)*x1372))+(((-1.0)*x1371))+((sj1*x1373)));
evalcond[3]=((((-1.0)*x1373))+(((0.55)*sj1))+((sj1*x1372))+((sj1*x1371)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x1373))+(((0.09)*x1374))+(((-1.0)*pp))+(((1.1)*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(py,-1);
if(!x1376.valid){
continue;
}
IkReal x1375=x1376.value;
CheckValue<IkReal> x1377=IKPowWithIntegerCheck(cj1,-1);
if(!x1377.valid){
continue;
}
if( IKabs((pz*sj1*x1375*(x1377.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1375*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((pz*sj1*x1375*(x1377.value)))+IKsqr((x1375*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((pz*sj1*x1375*(x1377.value)), (x1375*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1378=IKsin(j0);
IkReal x1379=IKcos(j0);
IkReal x1380=(cj1*pz);
IkReal x1381=((0.3)*cj3);
IkReal x1382=((0.045)*sj3);
IkReal x1383=(py*x1378);
IkReal x1384=(py*x1379);
evalcond[0]=((((-1.0)*pz*sj1))+((cj1*x1383)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x1384))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1382))+(((-1.0)*x1381))+x1380+((sj1*x1383)));
evalcond[3]=(((sj1*x1382))+((sj1*x1381))+(((-1.0)*x1383))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*x1380))+(((-1.0)*pp))+(((0.09)*x1384))+(((1.1)*sj1*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1385 = IKatan2WithCheck((gconst42*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),(gconst42*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1385.valid){
continue;
}
j0array[0]=x1385.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1386=IKsin(j0);
IkReal x1387=IKcos(j0);
IkReal x1388=(cj1*pz);
IkReal x1389=((0.3)*cj3);
IkReal x1390=((0.045)*sj3);
IkReal x1391=(py*x1386);
IkReal x1392=(py*x1387);
evalcond[0]=((((-1.0)*pz*sj1))+((cj1*x1391)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1392)));
evalcond[2]=((-0.55)+(((-1.0)*x1389))+x1388+((sj1*x1391))+(((-1.0)*x1390)));
evalcond[3]=(((sj1*x1389))+((sj1*x1390))+(((-1.0)*x1391))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*x1388))+(((-1.0)*pp))+(((0.09)*x1392))+(((1.1)*sj1*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1393=((0.30675)*sj3);
IkReal x1394=((0.15)*pz);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.1275)+x1394+(((-1.0)*x1393)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x1393+(((-1.0)*x1394)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1396=IKPowWithIntegerCheck(py,-1);
if(!x1396.valid){
continue;
}
IkReal x1395=x1396.value;
cj0array[0]=((((-11.1111111111111)*pp*x1395))+(((12.2222222222222)*pz*x1395))+(((-2.36111111111111)*x1395)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.1275)+(((0.15)*pz))+(((-0.30675)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(py,-1);
if(!x1398.valid){
continue;
}
IkReal x1397=x1398.value;
cj0array[0]=((((-0.1275)*x1397))+(((-0.30675)*sj3*x1397))+(((0.15)*pz*x1397)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1399=((0.15)*pz);
IkReal x1400=((0.30675)*sj3);
IkReal x1401=(x1399+x1400);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.1275)+(((-1.0)*x1401)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x1401);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1403=IKPowWithIntegerCheck(py,-1);
if(!x1403.valid){
continue;
}
IkReal x1402=x1403.value;
cj0array[0]=((((-2.36111111111111)*x1402))+(((-12.2222222222222)*pz*x1402))+(((-11.1111111111111)*pp*x1402)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.1275)+(((-0.15)*pz))+(((-0.30675)*sj3))+(((-1.0)*py*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(py,-1);
if(!x1405.valid){
continue;
}
IkReal x1404=x1405.value;
cj0array[0]=((((-0.15)*pz*x1404))+(((-0.30675)*sj3*x1404))+(((-0.1275)*x1404)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(py*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1406=((0.3)*sj3);
IkReal x1407=((0.045)*cj3);
IkReal x1408=((0.045)*sj3);
IkReal x1409=((0.3)*cj3);
IkReal x1410=(x1409+x1408);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+(((-1.0)*x1410)));
evalcond[2]=((-0.045)+(((-1.0)*x1406))+x1407);
evalcond[3]=((0.045)+(((-1.0)*x1407))+x1406);
evalcond[4]=((0.55)+x1410);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1412=IKPowWithIntegerCheck(py,-1);
if(!x1412.valid){
continue;
}
IkReal x1411=x1412.value;
if( IKabs(((0.00909090909090909)*x1411*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1411*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x1411*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))+IKsqr((x1411*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x1411*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))), (x1411*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1413=IKsin(j0);
IkReal x1414=IKcos(j0);
IkReal x1415=(py*x1414);
IkReal x1416=(py*x1413);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1416);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))+(((-1.0)*x1415)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1416))+(((-0.09)*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(py,-1);
if(!x1418.valid){
continue;
}
IkReal x1417=x1418.value;
if( IKabs((x1417*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x1417*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1417*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((0.111111111111111)*x1417*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1417*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((0.111111111111111)*x1417*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1419=IKsin(j0);
IkReal x1420=IKcos(j0);
IkReal x1421=(py*x1420);
IkReal x1422=(py*x1419);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1422);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1421))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1422))+(((-1.0)*pp))+(((-0.09)*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1423 = IKatan2WithCheck((gconst46*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst46*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1423.valid){
continue;
}
j0array[0]=x1423.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1424=IKsin(j0);
IkReal x1425=IKcos(j0);
IkReal x1426=(py*x1425);
IkReal x1427=(py*x1424);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1427);
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1426))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1427))+(((-1.0)*pp))+(((-0.09)*x1426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1428=((0.3)*sj3);
IkReal x1429=((0.045)*cj3);
IkReal x1430=x79;
evalcond[0]=IKabs(py);
evalcond[1]=x1430;
evalcond[2]=((-0.045)+x1429+(((-1.0)*x1428)));
evalcond[3]=((0.045)+x1428+(((-1.0)*x1429)));
evalcond[4]=x1430;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(py,-1);
if(!x1432.valid){
continue;
}
IkReal x1431=x1432.value;
if( IKabs(((0.00909090909090909)*x1431*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1431*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00909090909090909)*x1431*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))+IKsqr((x1431*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.00909090909090909)*x1431*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))), (x1431*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1433=IKsin(j0);
IkReal x1434=IKcos(j0);
IkReal x1435=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1433*x1435)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1434*x1435))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x1434))+(((-1.0)*pp))+(((-1.1)*py*x1433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(py,-1);
if(!x1437.valid){
continue;
}
IkReal x1436=x1437.value;
if( IKabs((x1436*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.111111111111111)*x1436*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1436*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))+IKsqr(((0.111111111111111)*x1436*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1436*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))), ((0.111111111111111)*x1436*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1438=IKsin(j0);
IkReal x1439=IKcos(j0);
IkReal x1440=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1438*x1440)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1439*x1440))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*py*x1439))+(((-1.0)*pp))+(((-1.1)*py*x1438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1441 = IKatan2WithCheck((gconst47*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),(gconst47*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1441.valid){
continue;
}
j0array[0]=x1441.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1442=IKsin(j0);
IkReal x1443=IKcos(j0);
IkReal x1444=((1.0)*py);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1442*x1444)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1443*x1444))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.1)*py*x1442))+(((-1.0)*pp))+(((-0.09)*py*x1443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1445=((0.3)*sj3);
IkReal x1446=((0.045)*cj3);
IkReal x1447=(cj1*pz);
IkReal x1448=((0.3)*cj3);
IkReal x1449=((0.045)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=((-0.55)+x1447+(((-1.0)*x1448))+(((-1.0)*x1449)));
evalcond[2]=((-0.045)+x1446+(((-1.0)*x1445)));
evalcond[3]=(pz*sj1);
evalcond[4]=((0.045)+x1445+(((-1.0)*x1446)));
evalcond[5]=(((sj1*x1448))+((sj1*x1449))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((1.1)*x1447))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1451=IKPowWithIntegerCheck(py,-1);
if(!x1451.valid){
continue;
}
IkReal x1450=x1451.value;
CheckValue<IkReal> x1452=IKPowWithIntegerCheck(sj1,-1);
if(!x1452.valid){
continue;
}
if( IKabs((x1450*(x1452.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1450*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1450*(x1452.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))+IKsqr((x1450*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1450*(x1452.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))), (x1450*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1453=IKsin(j0);
IkReal x1454=IKcos(j0);
IkReal x1455=(cj1*pz);
IkReal x1456=((0.045)*sj3);
IkReal x1457=((0.3)*cj3);
IkReal x1458=(py*x1453);
IkReal x1459=(py*x1454);
evalcond[0]=((((-1.0)*cj1*x1458))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1459))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1457))+(((-1.0)*x1456))+x1455+((sj1*x1458)));
evalcond[3]=((((-1.0)*x1458))+((sj1*x1457))+((sj1*x1456))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1459))+(((1.1)*x1455))+(((1.1)*sj1*x1458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1461=IKPowWithIntegerCheck(py,-1);
if(!x1461.valid){
continue;
}
IkReal x1460=x1461.value;
CheckValue<IkReal> x1462=IKPowWithIntegerCheck(cj1,-1);
if(!x1462.valid){
continue;
}
if( IKabs((pz*sj1*x1460*(x1462.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1460*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((pz*sj1*x1460*(x1462.value)))+IKsqr((x1460*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((pz*sj1*x1460*(x1462.value)), (x1460*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1463=IKsin(j0);
IkReal x1464=IKcos(j0);
IkReal x1465=(cj1*pz);
IkReal x1466=((0.045)*sj3);
IkReal x1467=((0.3)*cj3);
IkReal x1468=(py*x1463);
IkReal x1469=(py*x1464);
evalcond[0]=(((pz*sj1))+(((-1.0)*cj1*x1468)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1469))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1466))+(((-1.0)*x1467))+x1465+((sj1*x1468)));
evalcond[3]=(((sj1*x1466))+((sj1*x1467))+(((0.55)*sj1))+(((-1.0)*x1468)));
evalcond[4]=((-0.2125)+(((1.1)*x1465))+(((-1.0)*pp))+(((-0.09)*x1469))+(((1.1)*sj1*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1470 = IKatan2WithCheck((gconst45*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),(gconst45*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1470.valid){
continue;
}
j0array[0]=x1470.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1471=IKsin(j0);
IkReal x1472=IKcos(j0);
IkReal x1473=(cj1*pz);
IkReal x1474=((0.045)*sj3);
IkReal x1475=((0.3)*cj3);
IkReal x1476=(py*x1471);
IkReal x1477=(py*x1472);
evalcond[0]=((((-1.0)*cj1*x1476))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1477))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+((sj1*x1476))+x1473+(((-1.0)*x1475))+(((-1.0)*x1474)));
evalcond[3]=(((sj1*x1475))+((sj1*x1474))+(((-1.0)*x1476))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-0.09)*x1477))+(((1.1)*sj1*x1476))+(((-1.0)*pp))+(((1.1)*x1473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1478=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1478;
evalcond[3]=x1478;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((py*(cj2*cj2)))+((py*(sj2*sj2)))));
dummyeval[0]=(((py*(cj2*cj2)))+((py*(sj2*sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1479=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=x1479;
evalcond[3]=x1479;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(py,-1);
if(!x1481.valid){
continue;
}
IkReal x1480=x1481.value;
sj0array[0]=((((2.36111111111111)*x1480))+(((-12.2222222222222)*pz*x1480))+(((11.1111111111111)*pp*x1480)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1484=IKPowWithIntegerCheck(py,-1);
if(!x1484.valid){
continue;
}
IkReal x1482=x1484.value;
IkReal x1483=((0.045)*x1482);
sj0array[0]=((((-1.0)*cj3*x1483))+(((0.3)*sj3*x1482))+x1483);
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1485=((0.045)*cj3);
IkReal x1486=((0.3)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x1485))+x1486);
evalcond[3]=((-0.045)+(((-1.0)*x1486))+x1485);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1488=IKPowWithIntegerCheck(py,-1);
if(!x1488.valid){
continue;
}
IkReal x1487=x1488.value;
sj0array[0]=((((12.2222222222222)*pz*x1487))+(((-11.1111111111111)*pp*x1487))+(((-2.36111111111111)*x1487)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+((py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(py,-1);
if(!x1491.valid){
continue;
}
IkReal x1489=x1491.value;
IkReal x1490=((0.045)*x1489);
sj0array[0]=(((cj3*x1490))+(((-1.0)*x1490))+(((-0.3)*sj3*x1489)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1492=((0.045)*cj2);
IkReal x1493=((0.3)*sj3);
IkReal x1494=((0.045)*cj3);
evalcond[0]=IKabs(py);
evalcond[1]=(((sj2*x1493))+(((0.045)*sj2))+(((-1.0)*sj2*x1494)));
evalcond[2]=0;
evalcond[3]=((0.045)+(((-1.0)*x1494))+x1493);
evalcond[4]=((((-1.0)*cj3*x1492))+((cj2*x1493))+x1492);
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1498=IKPowWithIntegerCheck(py,-1);
if(!x1498.valid){
continue;
}
IkReal x1495=x1498.value;
IkReal x1496=((0.045)*cj2);
IkReal x1497=((0.3)*cj2*sj3);
CheckValue<IkReal> x1499=IKPowWithIntegerCheck(cj2,-1);
if(!x1499.valid){
continue;
}
if( IKabs((x1495*(((((-1.0)*cj3*x1496))+x1496+x1497)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1495*(x1499.value)*((((sj2*x1497))+((sj2*x1496))+(((-1.0)*cj3*sj2*x1496)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1495*(((((-1.0)*cj3*x1496))+x1496+x1497))))+IKsqr((x1495*(x1499.value)*((((sj2*x1497))+((sj2*x1496))+(((-1.0)*cj3*sj2*x1496))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1495*(((((-1.0)*cj3*x1496))+x1496+x1497))), (x1495*(x1499.value)*((((sj2*x1497))+((sj2*x1496))+(((-1.0)*cj3*sj2*x1496))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1500=IKcos(j0);
IkReal x1501=IKsin(j0);
IkReal x1502=((0.045)*cj2);
IkReal x1503=((0.3)*sj3);
IkReal x1504=((1.0)*py);
IkReal x1505=((0.045)*cj3);
IkReal x1506=(py*x1501);
IkReal x1507=(py*sj2*x1500);
evalcond[0]=((((-1.0)*cj2*x1500*x1504))+((sj2*x1506)));
evalcond[1]=((((-1.0)*sj2*x1505))+(((0.045)*sj2))+(((-1.0)*x1500*x1504))+((sj2*x1503)));
evalcond[2]=(((cj2*x1503))+(((-1.0)*x1501*x1504))+x1502+(((-1.0)*cj3*x1502)));
evalcond[3]=((0.045)+(((-1.0)*x1505))+(((-1.0)*sj2*x1500*x1504))+x1503+(((-1.0)*cj2*x1501*x1504)));
evalcond[4]=((-0.2125)+(((0.09)*x1507))+(((-1.0)*pp))+(((0.09)*cj2*x1506))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(py,-1);
if(!x1512.valid){
continue;
}
IkReal x1508=x1512.value;
IkReal x1509=((0.045)*sj2);
IkReal x1510=((0.3)*sj2*sj3);
IkReal x1511=(cj3*x1509);
CheckValue<IkReal> x1513=IKPowWithIntegerCheck(sj2,-1);
if(!x1513.valid){
continue;
}
if( IKabs((x1508*(x1513.value)*((((cj2*x1510))+((cj2*x1509))+(((-1.0)*cj2*x1511)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1508*(((((-1.0)*x1511))+x1509+x1510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1508*(x1513.value)*((((cj2*x1510))+((cj2*x1509))+(((-1.0)*cj2*x1511))))))+IKsqr((x1508*(((((-1.0)*x1511))+x1509+x1510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1508*(x1513.value)*((((cj2*x1510))+((cj2*x1509))+(((-1.0)*cj2*x1511))))), (x1508*(((((-1.0)*x1511))+x1509+x1510))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1514=IKcos(j0);
IkReal x1515=IKsin(j0);
IkReal x1516=((0.045)*cj2);
IkReal x1517=((0.3)*sj3);
IkReal x1518=((1.0)*py);
IkReal x1519=((0.045)*cj3);
IkReal x1520=(py*x1515);
IkReal x1521=(py*sj2*x1514);
evalcond[0]=((((-1.0)*cj2*x1514*x1518))+((sj2*x1520)));
evalcond[1]=(((sj2*x1517))+(((0.045)*sj2))+(((-1.0)*x1514*x1518))+(((-1.0)*sj2*x1519)));
evalcond[2]=((((-1.0)*x1515*x1518))+((cj2*x1517))+x1516+(((-1.0)*cj3*x1516)));
evalcond[3]=((0.045)+(((-1.0)*x1519))+x1517+(((-1.0)*cj2*x1515*x1518))+(((-1.0)*sj2*x1514*x1518)));
evalcond[4]=((-0.2125)+(((0.09)*x1521))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*cj2*x1520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1522=((0.045)*cj2);
IkReal x1523=((0.3)*sj3);
IkReal x1524=((0.045)*sj2);
CheckValue<IkReal> x1525 = IKatan2WithCheck((gconst48*((((cj2*x1523))+x1522+(((-1.0)*cj3*x1522))))),(gconst48*((((sj2*x1523))+x1524+(((-1.0)*cj3*x1524))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
j0array[0]=x1525.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1526=IKcos(j0);
IkReal x1527=IKsin(j0);
IkReal x1528=((0.045)*cj2);
IkReal x1529=((0.3)*sj3);
IkReal x1530=((1.0)*py);
IkReal x1531=((0.045)*cj3);
IkReal x1532=(py*x1527);
IkReal x1533=(py*sj2*x1526);
evalcond[0]=((((-1.0)*cj2*x1526*x1530))+((sj2*x1532)));
evalcond[1]=((((-1.0)*sj2*x1531))+((sj2*x1529))+(((0.045)*sj2))+(((-1.0)*x1526*x1530)));
evalcond[2]=(((cj2*x1529))+x1528+(((-1.0)*x1527*x1530))+(((-1.0)*cj3*x1528)));
evalcond[3]=((0.045)+(((-1.0)*sj2*x1526*x1530))+(((-1.0)*x1531))+(((-1.0)*cj2*x1527*x1530))+x1529);
evalcond[4]=((-0.2125)+(((0.09)*x1533))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*cj2*x1532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1534=((0.045)*sj3);
IkReal x1535=((0.3)*cj3);
IkReal x1536=(x1535+x1534);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1536))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1536+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign((((py*(cj2*cj2)))+((py*(sj2*sj2)))));
dummyeval[0]=(((py*(cj2*cj2)))+((py*(sj2*sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1537=((0.045)*cj3);
IkReal x1538=((0.3)*sj3);
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x1537))+x1538);
evalcond[3]=((-0.045)+(((-1.0)*x1538))+x1537);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1540=IKPowWithIntegerCheck(py,-1);
if(!x1540.valid){
continue;
}
IkReal x1539=x1540.value;
sj0array[0]=((((-11.1111111111111)*pp*x1539))+(((-2.36111111111111)*x1539))+(((-12.2222222222222)*pz*x1539)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+((py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1543=IKPowWithIntegerCheck(py,-1);
if(!x1543.valid){
continue;
}
IkReal x1541=x1543.value;
IkReal x1542=((0.045)*x1541);
sj0array[0]=(((cj3*x1542))+(((-1.0)*x1542))+(((-0.3)*sj3*x1541)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1544=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(py);
evalcond[1]=0;
evalcond[2]=x1544;
evalcond[3]=x1544;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(py,-1);
if(!x1546.valid){
continue;
}
IkReal x1545=x1546.value;
sj0array[0]=((((2.36111111111111)*x1545))+(((11.1111111111111)*pp*x1545))+(((12.2222222222222)*pz*x1545)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*py*(IKsin(j0))))+(((0.3)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(py,-1);
if(!x1549.valid){
continue;
}
IkReal x1547=x1549.value;
IkReal x1548=((0.045)*x1547);
sj0array[0]=((((0.3)*sj3*x1547))+x1548+(((-1.0)*cj3*x1548)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*py*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*py*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1550=((0.045)*cj2);
IkReal x1551=((0.3)*sj3);
IkReal x1552=((0.045)*cj3);
evalcond[0]=IKabs(py);
evalcond[1]=((((0.045)*sj2))+(((-1.0)*sj2*x1552))+((sj2*x1551)));
evalcond[2]=0;
evalcond[3]=((0.045)+x1551+(((-1.0)*x1552)));
evalcond[4]=(((cj3*x1550))+(((-1.0)*x1550))+(((-1.0)*cj2*x1551)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(py,-1);
if(!x1556.valid){
continue;
}
IkReal x1553=x1556.value;
IkReal x1554=((0.045)*cj2);
IkReal x1555=((0.3)*cj2*sj3);
CheckValue<IkReal> x1557=IKPowWithIntegerCheck(cj2,-1);
if(!x1557.valid){
continue;
}
if( IKabs((x1553*((((cj3*x1554))+(((-1.0)*x1554))+(((-1.0)*x1555)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1553*(x1557.value)*(((((-1.0)*cj3*sj2*x1554))+((sj2*x1554))+((sj2*x1555)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1553*((((cj3*x1554))+(((-1.0)*x1554))+(((-1.0)*x1555))))))+IKsqr((x1553*(x1557.value)*(((((-1.0)*cj3*sj2*x1554))+((sj2*x1554))+((sj2*x1555))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1553*((((cj3*x1554))+(((-1.0)*x1554))+(((-1.0)*x1555))))), (x1553*(x1557.value)*(((((-1.0)*cj3*sj2*x1554))+((sj2*x1554))+((sj2*x1555))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1558=IKcos(j0);
IkReal x1559=IKsin(j0);
IkReal x1560=((0.045)*cj2);
IkReal x1561=((0.3)*sj3);
IkReal x1562=((1.0)*py);
IkReal x1563=((0.045)*cj3);
IkReal x1564=(py*sj2*x1558);
IkReal x1565=(cj2*py*x1559);
evalcond[0]=((((-1.0)*cj2*x1558*x1562))+(((-1.0)*sj2*x1559*x1562)));
evalcond[1]=((((-1.0)*sj2*x1563))+(((0.045)*sj2))+((sj2*x1561))+(((-1.0)*x1558*x1562)));
evalcond[2]=((((-1.0)*x1559*x1562))+((cj3*x1560))+(((-1.0)*x1560))+(((-1.0)*cj2*x1561)));
evalcond[3]=((0.045)+x1561+x1565+(((-1.0)*sj2*x1558*x1562))+(((-1.0)*x1563)));
evalcond[4]=((-0.2125)+(((0.09)*x1564))+(((-0.09)*x1565))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1569=IKPowWithIntegerCheck(py,-1);
if(!x1569.valid){
continue;
}
IkReal x1566=x1569.value;
IkReal x1567=((0.045)*sj2);
IkReal x1568=((0.3)*sj2*sj3);
CheckValue<IkReal> x1570=IKPowWithIntegerCheck(sj2,-1);
if(!x1570.valid){
continue;
}
if( IKabs((x1566*(x1570.value)*((((cj2*cj3*x1567))+(((-1.0)*cj2*x1568))+(((-1.0)*cj2*x1567)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1566*((x1568+x1567+(((-1.0)*cj3*x1567)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1566*(x1570.value)*((((cj2*cj3*x1567))+(((-1.0)*cj2*x1568))+(((-1.0)*cj2*x1567))))))+IKsqr((x1566*((x1568+x1567+(((-1.0)*cj3*x1567))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1566*(x1570.value)*((((cj2*cj3*x1567))+(((-1.0)*cj2*x1568))+(((-1.0)*cj2*x1567))))), (x1566*((x1568+x1567+(((-1.0)*cj3*x1567))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1571=IKcos(j0);
IkReal x1572=IKsin(j0);
IkReal x1573=((0.045)*cj2);
IkReal x1574=((0.3)*sj3);
IkReal x1575=((1.0)*py);
IkReal x1576=((0.045)*cj3);
IkReal x1577=(py*sj2*x1571);
IkReal x1578=(cj2*py*x1572);
evalcond[0]=((((-1.0)*cj2*x1571*x1575))+(((-1.0)*sj2*x1572*x1575)));
evalcond[1]=((((-1.0)*sj2*x1576))+(((-1.0)*x1571*x1575))+(((0.045)*sj2))+((sj2*x1574)));
evalcond[2]=((((-1.0)*x1572*x1575))+((cj3*x1573))+(((-1.0)*cj2*x1574))+(((-1.0)*x1573)));
evalcond[3]=((0.045)+(((-1.0)*sj2*x1571*x1575))+x1578+x1574+(((-1.0)*x1576)));
evalcond[4]=((-0.2125)+(((0.09)*x1577))+(((-0.09)*x1578))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1579=((0.045)*cj2);
IkReal x1580=((0.3)*sj3);
IkReal x1581=((0.045)*sj2);
CheckValue<IkReal> x1582 = IKatan2WithCheck((gconst49*(((((-1.0)*cj2*x1580))+((cj3*x1579))+(((-1.0)*x1579))))),(gconst49*((((sj2*x1580))+x1581+(((-1.0)*cj3*x1581))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1582.valid){
continue;
}
j0array[0]=x1582.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1583=IKcos(j0);
IkReal x1584=IKsin(j0);
IkReal x1585=((0.045)*cj2);
IkReal x1586=((0.3)*sj3);
IkReal x1587=((1.0)*py);
IkReal x1588=((0.045)*cj3);
IkReal x1589=(py*sj2*x1583);
IkReal x1590=(cj2*py*x1584);
evalcond[0]=((((-1.0)*sj2*x1584*x1587))+(((-1.0)*cj2*x1583*x1587)));
evalcond[1]=(((sj2*x1586))+(((0.045)*sj2))+(((-1.0)*sj2*x1588))+(((-1.0)*x1583*x1587)));
evalcond[2]=((((-1.0)*x1585))+(((-1.0)*cj2*x1586))+(((-1.0)*x1584*x1587))+((cj3*x1585)));
evalcond[3]=((0.045)+(((-1.0)*x1588))+x1586+x1590+(((-1.0)*sj2*x1583*x1587)));
evalcond[4]=((-0.2125)+(((0.09)*x1589))+(((-0.09)*x1590))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1591=((0.1275)+(((-0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x1591;
evalcond[2]=0;
evalcond[3]=x1591;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(px,-1);
if(!x1593.valid){
continue;
}
IkReal x1592=x1593.value;
sj0array[0]=((((12.2222222222222)*pz*x1592))+(((-11.1111111111111)*pp*x1592))+(((-2.36111111111111)*x1592)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((0.1275)+((px*(IKsin(j0))))+(((-0.15)*pz))+(((0.30675)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1595=IKPowWithIntegerCheck(px,-1);
if(!x1595.valid){
continue;
}
IkReal x1594=x1595.value;
sj0array[0]=((((-0.1275)*x1594))+(((0.15)*pz*x1594))+(((-0.30675)*sj3*x1594)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1596=((0.1275)+(((0.15)*pz))+(((0.30675)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=x1596;
evalcond[2]=0;
evalcond[3]=x1596;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(px,-1);
if(!x1598.valid){
continue;
}
IkReal x1597=x1598.value;
sj0array[0]=((((-11.1111111111111)*pp*x1597))+(((-12.2222222222222)*pz*x1597))+(((-2.36111111111111)*x1597)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((0.1275)+(((0.15)*pz))+((px*(IKsin(j0))))+(((0.30675)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1600=IKPowWithIntegerCheck(px,-1);
if(!x1600.valid){
continue;
}
IkReal x1599=x1600.value;
sj0array[0]=((((-0.1275)*x1599))+(((-0.30675)*sj3*x1599))+(((-0.15)*pz*x1599)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*px*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1601=((0.045)*sj3);
IkReal x1602=((0.3)*cj3);
IkReal x1603=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1604=(x1601+x1602);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x1604)));
evalcond[2]=x1603;
evalcond[3]=x1603;
evalcond[4]=((0.55)+x1604);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(px,-1);
if(!x1606.valid){
continue;
}
IkReal x1605=x1606.value;
if( IKabs((x1605*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1605*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1605*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1605*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1605*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x1605*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1607=IKcos(j0);
IkReal x1608=IKsin(j0);
IkReal x1609=(px*x1608);
IkReal x1610=(px*x1607);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1610);
evalcond[1]=((0.045)+x1609+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1610))+(((-1.0)*pp))+(((-0.09)*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1612=IKPowWithIntegerCheck(px,-1);
if(!x1612.valid){
continue;
}
IkReal x1611=x1612.value;
if( IKabs(((0.111111111111111)*x1611*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1611*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1611*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1611*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1611*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1611*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1613=IKcos(j0);
IkReal x1614=IKsin(j0);
IkReal x1615=(px*x1614);
IkReal x1616=(px*x1613);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1616);
evalcond[1]=((0.045)+x1615+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1616))+(((-1.0)*pp))+(((-0.09)*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1617 = IKatan2WithCheck((gconst51*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst51*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1617.valid){
continue;
}
j0array[0]=x1617.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1618=IKcos(j0);
IkReal x1619=IKsin(j0);
IkReal x1620=(px*x1619);
IkReal x1621=(px*x1618);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1621);
evalcond[1]=((0.045)+x1620+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1621))+(((-1.0)*pp))+(((-0.09)*x1620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1622=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
IkReal x1623=x79;
evalcond[0]=IKabs(px);
evalcond[1]=x1623;
evalcond[2]=x1622;
evalcond[3]=x1622;
evalcond[4]=x1623;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(px,-1);
if(!x1625.valid){
continue;
}
IkReal x1624=x1625.value;
if( IKabs(((0.111111111111111)*x1624*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1624*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1624*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x1624*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1624*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x1624*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1626=IKsin(j0);
IkReal x1627=IKcos(j0);
IkReal x1628=(px*x1626);
IkReal x1629=(px*x1627);
evalcond[0]=((0.045)+x1628+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1629))+(((-0.3)*cj3)));
evalcond[2]=((-0.2125)+(((-1.1)*x1629))+(((-1.0)*pp))+(((-0.09)*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(px,-1);
if(!x1631.valid){
continue;
}
IkReal x1630=x1631.value;
if( IKabs((x1630*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1630*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1630*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1630*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1630*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x1630*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1632=IKsin(j0);
IkReal x1633=IKcos(j0);
IkReal x1634=(px*x1632);
IkReal x1635=(px*x1633);
evalcond[0]=((0.045)+x1634+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1635)));
evalcond[2]=((-0.2125)+(((-0.09)*x1634))+(((-1.0)*pp))+(((-1.1)*x1635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1636 = IKatan2WithCheck((gconst52*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst52*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1636.valid){
continue;
}
j0array[0]=x1636.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1637=IKsin(j0);
IkReal x1638=IKcos(j0);
IkReal x1639=(px*x1637);
IkReal x1640=(px*x1638);
evalcond[0]=((0.045)+x1639+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1640)));
evalcond[2]=((-0.2125)+(((-0.09)*x1639))+(((-1.0)*pp))+(((-1.1)*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1641=(cj1*pz);
IkReal x1642=((0.3)*cj3);
IkReal x1643=((0.045)*sj3);
IkReal x1644=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+x1641+(((-1.0)*x1642))+(((-1.0)*x1643)));
evalcond[2]=x1644;
evalcond[3]=((-1.0)*pz*sj1);
evalcond[4]=x1644;
evalcond[5]=(((sj1*x1642))+((sj1*x1643))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1641)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1646=IKPowWithIntegerCheck(px,-1);
if(!x1646.valid){
continue;
}
IkReal x1645=x1646.value;
CheckValue<IkReal> x1647=IKPowWithIntegerCheck(sj1,-1);
if(!x1647.valid){
continue;
}
if( IKabs((x1645*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1645*(x1647.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1645*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr((x1645*(x1647.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1645*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), (x1645*(x1647.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1648=IKcos(j0);
IkReal x1649=IKsin(j0);
IkReal x1650=(cj1*pz);
IkReal x1651=((0.3)*cj3);
IkReal x1652=((0.045)*sj3);
IkReal x1653=(px*x1649);
IkReal x1654=(px*x1648);
evalcond[0]=(((cj1*x1654))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x1653+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+((sj1*x1654))+x1650+(((-1.0)*x1651))+(((-1.0)*x1652)));
evalcond[3]=(((sj1*x1651))+((sj1*x1652))+(((-1.0)*x1654))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x1654))+(((-0.09)*x1653))+(((-1.0)*pp))+(((1.1)*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1656=IKPowWithIntegerCheck(px,-1);
if(!x1656.valid){
continue;
}
IkReal x1655=x1656.value;
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(cj1,-1);
if(!x1657.valid){
continue;
}
if( IKabs((x1655*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((pz*sj1*x1655*(x1657.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1655*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr((pz*sj1*x1655*(x1657.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1655*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), (pz*sj1*x1655*(x1657.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1658=IKcos(j0);
IkReal x1659=IKsin(j0);
IkReal x1660=(cj1*pz);
IkReal x1661=((0.3)*cj3);
IkReal x1662=((0.045)*sj3);
IkReal x1663=(px*x1659);
IkReal x1664=(px*x1658);
evalcond[0]=(((cj1*x1664))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x1663+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+((sj1*x1664))+x1660+(((-1.0)*x1661))+(((-1.0)*x1662)));
evalcond[3]=(((sj1*x1661))+((sj1*x1662))+(((-1.0)*x1664))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x1664))+(((-0.09)*x1663))+(((-1.0)*pp))+(((1.1)*x1660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1665 = IKatan2WithCheck((gconst50*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst50*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1665.valid){
continue;
}
j0array[0]=x1665.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1666=IKcos(j0);
IkReal x1667=IKsin(j0);
IkReal x1668=(cj1*pz);
IkReal x1669=((0.3)*cj3);
IkReal x1670=((0.045)*sj3);
IkReal x1671=(px*x1667);
IkReal x1672=(px*x1666);
evalcond[0]=(((cj1*x1672))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x1671+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+((sj1*x1672))+x1668+(((-1.0)*x1669))+(((-1.0)*x1670)));
evalcond[3]=(((sj1*x1669))+((sj1*x1670))+(((-1.0)*x1672))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-0.09)*x1671))+(((1.1)*sj1*x1672))+(((-1.0)*pp))+(((1.1)*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1673=((0.30675)*sj3);
IkReal x1674=((0.15)*pz);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+x1674+(((-1.0)*x1673)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x1673+(((-1.0)*x1674)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(px,-1);
if(!x1676.valid){
continue;
}
IkReal x1675=x1676.value;
sj0array[0]=((((2.36111111111111)*x1675))+(((-12.2222222222222)*pz*x1675))+(((11.1111111111111)*pp*x1675)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.1275)+(((0.15)*pz))+((px*(IKsin(j0))))+(((-0.30675)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1678=IKPowWithIntegerCheck(px,-1);
if(!x1678.valid){
continue;
}
IkReal x1677=x1678.value;
sj0array[0]=((((0.30675)*sj3*x1677))+(((0.1275)*x1677))+(((-0.15)*pz*x1677)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1679=((0.15)*pz);
IkReal x1680=((0.30675)*sj3);
IkReal x1681=(x1679+x1680);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.1275)+(((-1.0)*x1681)));
evalcond[2]=0;
evalcond[3]=((0.1275)+x1681);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1683=IKPowWithIntegerCheck(px,-1);
if(!x1683.valid){
continue;
}
IkReal x1682=x1683.value;
sj0array[0]=((((12.2222222222222)*pz*x1682))+(((11.1111111111111)*pp*x1682))+(((2.36111111111111)*x1682)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.1275)+((px*(IKsin(j0))))+(((-0.15)*pz))+(((-0.30675)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1685=IKPowWithIntegerCheck(px,-1);
if(!x1685.valid){
continue;
}
IkReal x1684=x1685.value;
sj0array[0]=((((0.1275)*x1684))+(((0.15)*pz*x1684))+(((0.30675)*sj3*x1684)));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKcos(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKsin(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1686=((0.3)*sj3);
IkReal x1687=((0.045)*cj3);
IkReal x1688=((0.045)*sj3);
IkReal x1689=((0.3)*cj3);
IkReal x1690=(x1689+x1688);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+(((-1.0)*x1690)));
evalcond[2]=((-0.045)+(((-1.0)*x1686))+x1687);
evalcond[3]=((0.045)+(((-1.0)*x1687))+x1686);
evalcond[4]=((0.55)+x1690);
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1692=IKPowWithIntegerCheck(px,-1);
if(!x1692.valid){
continue;
}
IkReal x1691=x1692.value;
if( IKabs((x1691*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1691*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1691*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1691*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1691*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x1691*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1693=IKsin(j0);
IkReal x1694=IKcos(j0);
IkReal x1695=(px*x1693);
IkReal x1696=(px*x1694);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x1696);
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1695+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1695))+(((1.1)*x1696))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(px,-1);
if(!x1698.valid){
continue;
}
IkReal x1697=x1698.value;
if( IKabs(((0.111111111111111)*x1697*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1697*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1697*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1697*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1697*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1697*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1699=IKsin(j0);
IkReal x1700=IKcos(j0);
IkReal x1701=(px*x1699);
IkReal x1702=(px*x1700);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1702+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1701+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1702))+(((-1.0)*pp))+(((0.09)*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1703 = IKatan2WithCheck((gconst54*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst54*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1703.valid){
continue;
}
j0array[0]=x1703.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1704=IKsin(j0);
IkReal x1705=IKcos(j0);
IkReal x1706=(px*x1704);
IkReal x1707=(px*x1705);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1707+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1706+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1707))+(((-1.0)*pp))+(((0.09)*x1706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x1708=((0.3)*sj3);
IkReal x1709=((0.045)*cj3);
IkReal x1710=x79;
evalcond[0]=IKabs(px);
evalcond[1]=x1710;
evalcond[2]=((-0.045)+x1709+(((-1.0)*x1708)));
evalcond[3]=((0.045)+x1708+(((-1.0)*x1709)));
evalcond[4]=x1710;
evalcond[5]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1712=IKPowWithIntegerCheck(px,-1);
if(!x1712.valid){
continue;
}
IkReal x1711=x1712.value;
if( IKabs(((0.111111111111111)*x1711*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1711*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x1711*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x1711*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.111111111111111)*x1711*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x1711*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1713=IKsin(j0);
IkReal x1714=IKcos(j0);
IkReal x1715=(px*x1713);
IkReal x1716=(px*x1714);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1715+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1716)));
evalcond[2]=((-0.2125)+(((-1.1)*x1716))+(((-1.0)*pp))+(((0.09)*x1715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1718=IKPowWithIntegerCheck(px,-1);
if(!x1718.valid){
continue;
}
IkReal x1717=x1718.value;
if( IKabs((x1717*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x1717*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1717*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x1717*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1717*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x1717*(((-20.845)+(((-100.0)*pp))+(((-0.405)*cj3))+(((2.7)*sj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1719=IKsin(j0);
IkReal x1720=IKcos(j0);
IkReal x1721=(px*x1719);
IkReal x1722=(px*x1720);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1721+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1722)));
evalcond[2]=((-0.2125)+(((0.09)*x1721))+(((-1.0)*pp))+(((-1.1)*x1722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1723 = IKatan2WithCheck((gconst55*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst55*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1723.valid){
continue;
}
j0array[0]=x1723.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1724=IKsin(j0);
IkReal x1725=IKcos(j0);
IkReal x1726=(px*x1724);
IkReal x1727=(px*x1725);
evalcond[0]=((-0.045)+(((0.045)*cj3))+x1726+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1727)));
evalcond[2]=((-0.2125)+(((0.09)*x1726))+(((-1.0)*pp))+(((-1.1)*x1727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1728=((0.3)*sj3);
IkReal x1729=((0.045)*cj3);
IkReal x1730=(cj1*pz);
IkReal x1731=((0.3)*cj3);
IkReal x1732=((0.045)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=((-0.55)+x1730+(((-1.0)*x1731))+(((-1.0)*x1732)));
evalcond[2]=((-0.045)+x1729+(((-1.0)*x1728)));
evalcond[3]=(pz*sj1);
evalcond[4]=((0.045)+x1728+(((-1.0)*x1729)));
evalcond[5]=(((sj1*x1732))+((sj1*x1731))+(((0.55)*sj1)));
evalcond[6]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1730)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1734=IKPowWithIntegerCheck(px,-1);
if(!x1734.valid){
continue;
}
IkReal x1733=x1734.value;
CheckValue<IkReal> x1735=IKPowWithIntegerCheck(sj1,-1);
if(!x1735.valid){
continue;
}
if( IKabs((x1733*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1733*(x1735.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1733*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr((x1733*(x1735.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1733*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), (x1733*(x1735.value)*(((0.55)+(((0.045)*sj3))+(((-1.0)*cj1*pz))+(((0.3)*cj3))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1736=IKcos(j0);
IkReal x1737=IKsin(j0);
IkReal x1738=(cj1*pz);
IkReal x1739=((0.045)*sj3);
IkReal x1740=((0.3)*cj3);
IkReal x1741=(px*x1737);
IkReal x1742=(px*x1736);
evalcond[0]=((((-1.0)*cj1*x1742))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1741+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x1738+((sj1*x1742))+(((-1.0)*x1740))+(((-1.0)*x1739)));
evalcond[3]=(((sj1*x1739))+(((-1.0)*x1742))+((sj1*x1740))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((0.09)*x1741))+(((-1.0)*pp))+(((1.1)*x1738))+(((1.1)*sj1*x1742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1744=IKPowWithIntegerCheck(px,-1);
if(!x1744.valid){
continue;
}
IkReal x1743=x1744.value;
CheckValue<IkReal> x1745=IKPowWithIntegerCheck(cj1,-1);
if(!x1745.valid){
continue;
}
if( IKabs((x1743*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((pz*sj1*x1743*(x1745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1743*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr((pz*sj1*x1743*(x1745.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1743*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), (pz*sj1*x1743*(x1745.value)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1746=IKcos(j0);
IkReal x1747=IKsin(j0);
IkReal x1748=(cj1*pz);
IkReal x1749=((0.045)*sj3);
IkReal x1750=((0.3)*cj3);
IkReal x1751=(px*x1747);
IkReal x1752=(px*x1746);
evalcond[0]=((((-1.0)*cj1*x1752))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1751+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x1748+(((-1.0)*x1750))+(((-1.0)*x1749))+((sj1*x1752)));
evalcond[3]=(((sj1*x1749))+(((-1.0)*x1752))+((sj1*x1750))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*sj1*x1752))+(((1.1)*x1748))+(((0.09)*x1751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1753 = IKatan2WithCheck((gconst53*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst53*(((((0.045)*sj1*sj3))+(((0.3)*cj3*sj1))+(((0.55)*sj1))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1753.valid){
continue;
}
j0array[0]=x1753.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1754=IKcos(j0);
IkReal x1755=IKsin(j0);
IkReal x1756=(cj1*pz);
IkReal x1757=((0.045)*sj3);
IkReal x1758=((0.3)*cj3);
IkReal x1759=(px*x1755);
IkReal x1760=(px*x1754);
evalcond[0]=((((-1.0)*cj1*x1760))+((pz*sj1)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1759+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+((sj1*x1760))+x1756+(((-1.0)*x1757))+(((-1.0)*x1758)));
evalcond[3]=((((-1.0)*x1760))+((sj1*x1757))+((sj1*x1758))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x1760))+(((-1.0)*pp))+(((1.1)*x1756))+(((0.09)*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1761=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1761;
evalcond[3]=x1761;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign((((px*(sj2*sj2)))+((px*(cj2*cj2)))));
dummyeval[0]=(((px*(sj2*sj2)))+((px*(cj2*cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1762=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x1762;
evalcond[3]=x1762;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(px,-1);
if(!x1764.valid){
continue;
}
IkReal x1763=x1764.value;
cj0array[0]=((((-12.2222222222222)*pz*x1763))+(((11.1111111111111)*pp*x1763))+(((2.36111111111111)*x1763)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1767=IKPowWithIntegerCheck(px,-1);
if(!x1767.valid){
continue;
}
IkReal x1765=x1767.value;
IkReal x1766=((0.045)*x1765);
cj0array[0]=((((-1.0)*cj3*x1766))+x1766+(((0.3)*sj3*x1765)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1768=((0.045)*cj3);
IkReal x1769=((0.3)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x1768))+x1769);
evalcond[3]=((-0.045)+(((-1.0)*x1769))+x1768);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1771=IKPowWithIntegerCheck(px,-1);
if(!x1771.valid){
continue;
}
IkReal x1770=x1771.value;
cj0array[0]=((((-2.36111111111111)*x1770))+(((-11.1111111111111)*pp*x1770))+(((12.2222222222222)*pz*x1770)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1774=IKPowWithIntegerCheck(px,-1);
if(!x1774.valid){
continue;
}
IkReal x1772=x1774.value;
IkReal x1773=((0.045)*x1772);
cj0array[0]=((((-0.3)*sj3*x1772))+(((-1.0)*x1773))+((cj3*x1773)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1775=((0.045)*cj2);
IkReal x1776=((0.3)*sj3);
IkReal x1777=((0.045)*cj3);
evalcond[0]=IKabs(px);
evalcond[1]=((((-1.0)*sj2*x1777))+(((0.045)*sj2))+((sj2*x1776)));
evalcond[2]=0;
evalcond[3]=((0.045)+x1776+(((-1.0)*x1777)));
evalcond[4]=((((-1.0)*cj3*x1775))+x1775+((cj2*x1776)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1781=IKPowWithIntegerCheck(px,-1);
if(!x1781.valid){
continue;
}
IkReal x1778=x1781.value;
IkReal x1779=((0.045)*cj2);
IkReal x1780=((0.3)*cj2*sj3);
CheckValue<IkReal> x1782=IKPowWithIntegerCheck(cj2,-1);
if(!x1782.valid){
continue;
}
if( IKabs((x1778*(x1782.value)*(((((-1.0)*sj2*x1779))+((cj3*sj2*x1779))+(((-1.0)*sj2*x1780)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1778*(((((-1.0)*cj3*x1779))+x1780+x1779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1778*(x1782.value)*(((((-1.0)*sj2*x1779))+((cj3*sj2*x1779))+(((-1.0)*sj2*x1780))))))+IKsqr((x1778*(((((-1.0)*cj3*x1779))+x1780+x1779))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1778*(x1782.value)*(((((-1.0)*sj2*x1779))+((cj3*sj2*x1779))+(((-1.0)*sj2*x1780))))), (x1778*(((((-1.0)*cj3*x1779))+x1780+x1779))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1783=IKsin(j0);
IkReal x1784=IKcos(j0);
IkReal x1785=((0.045)*cj2);
IkReal x1786=((0.3)*sj3);
IkReal x1787=((0.045)*cj3);
IkReal x1788=(px*x1783);
IkReal x1789=(px*x1784);
evalcond[0]=(((sj2*x1789))+((cj2*x1788)));
evalcond[1]=(((sj2*x1786))+x1788+(((0.045)*sj2))+(((-1.0)*sj2*x1787)));
evalcond[2]=(x1785+((cj2*x1786))+(((-1.0)*cj3*x1785))+(((-1.0)*x1789)));
evalcond[3]=((0.045)+(((-1.0)*x1787))+((sj2*x1788))+x1786+(((-1.0)*cj2*x1789)));
evalcond[4]=((-0.2125)+(((0.09)*cj2*x1789))+(((-0.09)*sj2*x1788))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1794=IKPowWithIntegerCheck(px,-1);
if(!x1794.valid){
continue;
}
IkReal x1790=x1794.value;
IkReal x1791=((0.045)*sj2);
IkReal x1792=((0.3)*sj2*sj3);
IkReal x1793=(cj3*x1791);
CheckValue<IkReal> x1795=IKPowWithIntegerCheck(sj2,-1);
if(!x1795.valid){
continue;
}
if( IKabs((x1790*(((((-1.0)*x1791))+(((-1.0)*x1792))+x1793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1790*(x1795.value)*((((cj2*x1792))+((cj2*x1791))+(((-1.0)*cj2*x1793)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1790*(((((-1.0)*x1791))+(((-1.0)*x1792))+x1793))))+IKsqr((x1790*(x1795.value)*((((cj2*x1792))+((cj2*x1791))+(((-1.0)*cj2*x1793))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1790*(((((-1.0)*x1791))+(((-1.0)*x1792))+x1793))), (x1790*(x1795.value)*((((cj2*x1792))+((cj2*x1791))+(((-1.0)*cj2*x1793))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1796=IKsin(j0);
IkReal x1797=IKcos(j0);
IkReal x1798=((0.045)*cj2);
IkReal x1799=((0.3)*sj3);
IkReal x1800=((0.045)*cj3);
IkReal x1801=(px*x1796);
IkReal x1802=(px*x1797);
evalcond[0]=(((cj2*x1801))+((sj2*x1802)));
evalcond[1]=(((sj2*x1799))+(((0.045)*sj2))+(((-1.0)*sj2*x1800))+x1801);
evalcond[2]=(x1798+((cj2*x1799))+(((-1.0)*cj3*x1798))+(((-1.0)*x1802)));
evalcond[3]=((0.045)+(((-1.0)*cj2*x1802))+x1799+(((-1.0)*x1800))+((sj2*x1801)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1801))+(((-1.0)*pp))+(((0.09)*cj2*x1802))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1803=((0.045)*cj2);
IkReal x1804=((0.3)*sj3);
IkReal x1805=((0.045)*sj2);
CheckValue<IkReal> x1806 = IKatan2WithCheck((gconst56*((((cj3*x1805))+(((-1.0)*x1805))+(((-1.0)*sj2*x1804))))),(gconst56*(((((-1.0)*cj3*x1803))+((cj2*x1804))+x1803))),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
j0array[0]=x1806.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1807=IKsin(j0);
IkReal x1808=IKcos(j0);
IkReal x1809=((0.045)*cj2);
IkReal x1810=((0.3)*sj3);
IkReal x1811=((0.045)*cj3);
IkReal x1812=(px*x1807);
IkReal x1813=(px*x1808);
evalcond[0]=(((sj2*x1813))+((cj2*x1812)));
evalcond[1]=(((sj2*x1810))+(((-1.0)*sj2*x1811))+(((0.045)*sj2))+x1812);
evalcond[2]=((((-1.0)*cj3*x1809))+((cj2*x1810))+x1809+(((-1.0)*x1813)));
evalcond[3]=((0.045)+(((-1.0)*x1811))+((sj2*x1812))+x1810+(((-1.0)*cj2*x1813)));
evalcond[4]=((-0.2125)+(((0.09)*cj2*x1813))+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*sj2*x1812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1814=((0.045)*sj3);
IkReal x1815=((0.3)*cj3);
IkReal x1816=(x1814+x1815);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1816))+(((-1.0)*pz)));
evalcond[3]=((0.55)+pz+x1816);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign((((px*(sj2*sj2)))+((px*(cj2*cj2)))));
dummyeval[0]=(((px*(sj2*sj2)))+((px*(cj2*cj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1817=((0.045)*cj3);
IkReal x1818=((0.3)*sj3);
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=((0.045)+(((-1.0)*x1817))+x1818);
evalcond[3]=((-0.045)+(((-1.0)*x1818))+x1817);
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1820=IKPowWithIntegerCheck(px,-1);
if(!x1820.valid){
continue;
}
IkReal x1819=x1820.value;
cj0array[0]=((((-2.36111111111111)*x1819))+(((-12.2222222222222)*pz*x1819))+(((-11.1111111111111)*pp*x1819)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+((px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1823=IKPowWithIntegerCheck(px,-1);
if(!x1823.valid){
continue;
}
IkReal x1821=x1823.value;
IkReal x1822=((0.045)*x1821);
cj0array[0]=((((-1.0)*x1822))+((cj3*x1822))+(((-0.3)*sj3*x1821)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((-0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1824=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=IKabs(px);
evalcond[1]=0;
evalcond[2]=x1824;
evalcond[3]=x1824;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1826=IKPowWithIntegerCheck(px,-1);
if(!x1826.valid){
continue;
}
IkReal x1825=x1826.value;
cj0array[0]=((((11.1111111111111)*pp*x1825))+(((12.2222222222222)*pz*x1825))+(((2.36111111111111)*x1825)));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1829=IKPowWithIntegerCheck(px,-1);
if(!x1829.valid){
continue;
}
IkReal x1827=x1829.value;
IkReal x1828=((0.045)*x1827);
cj0array[0]=((((-1.0)*cj3*x1828))+(((0.3)*sj3*x1827))+x1828);
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=(px*(IKsin(j0)));
evalcond[1]=((-0.2125)+(((0.09)*px*(IKcos(j0))))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1830=((0.045)*cj2);
IkReal x1831=((0.3)*sj3);
IkReal x1832=((0.045)*cj3);
evalcond[0]=IKabs(px);
evalcond[1]=((((0.045)*sj2))+((sj2*x1831))+(((-1.0)*sj2*x1832)));
evalcond[2]=0;
evalcond[3]=((0.045)+(((-1.0)*x1832))+x1831);
evalcond[4]=((((-1.0)*x1830))+(((-1.0)*cj2*x1831))+((cj3*x1830)));
evalcond[5]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(px,-1);
if(!x1836.valid){
continue;
}
IkReal x1833=x1836.value;
IkReal x1834=((0.045)*cj2);
IkReal x1835=((0.3)*cj2*sj3);
CheckValue<IkReal> x1837=IKPowWithIntegerCheck(cj2,-1);
if(!x1837.valid){
continue;
}
if( IKabs((x1833*(x1837.value)*(((((-1.0)*sj2*x1835))+(((-1.0)*sj2*x1834))+((cj3*sj2*x1834)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1833*(((((-1.0)*x1834))+(((-1.0)*x1835))+((cj3*x1834)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1833*(x1837.value)*(((((-1.0)*sj2*x1835))+(((-1.0)*sj2*x1834))+((cj3*sj2*x1834))))))+IKsqr((x1833*(((((-1.0)*x1834))+(((-1.0)*x1835))+((cj3*x1834))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1833*(x1837.value)*(((((-1.0)*sj2*x1835))+(((-1.0)*sj2*x1834))+((cj3*sj2*x1834))))), (x1833*(((((-1.0)*x1834))+(((-1.0)*x1835))+((cj3*x1834))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1838=IKsin(j0);
IkReal x1839=IKcos(j0);
IkReal x1840=((0.045)*cj2);
IkReal x1841=((0.3)*sj3);
IkReal x1842=((0.045)*cj3);
IkReal x1843=(px*x1838);
IkReal x1844=(px*x1839);
evalcond[0]=(((cj2*x1843))+(((-1.0)*sj2*x1844)));
evalcond[1]=((((-1.0)*sj2*x1842))+((sj2*x1841))+(((0.045)*sj2))+x1843);
evalcond[2]=((((-1.0)*x1840))+((cj3*x1840))+(((-1.0)*cj2*x1841))+(((-1.0)*x1844)));
evalcond[3]=((0.045)+(((-1.0)*x1842))+((sj2*x1843))+((cj2*x1844))+x1841);
evalcond[4]=((-0.2125)+(((-0.09)*cj2*x1844))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*sj2*x1843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1849=IKPowWithIntegerCheck(px,-1);
if(!x1849.valid){
continue;
}
IkReal x1845=x1849.value;
IkReal x1846=((0.045)*sj2);
IkReal x1847=((0.3)*sj2*sj3);
IkReal x1848=(cj3*x1846);
CheckValue<IkReal> x1850=IKPowWithIntegerCheck(sj2,-1);
if(!x1850.valid){
continue;
}
if( IKabs((x1845*(((((-1.0)*x1846))+(((-1.0)*x1847))+x1848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1845*(x1850.value)*((((cj2*x1848))+(((-1.0)*cj2*x1846))+(((-1.0)*cj2*x1847)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1845*(((((-1.0)*x1846))+(((-1.0)*x1847))+x1848))))+IKsqr((x1845*(x1850.value)*((((cj2*x1848))+(((-1.0)*cj2*x1846))+(((-1.0)*cj2*x1847))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1845*(((((-1.0)*x1846))+(((-1.0)*x1847))+x1848))), (x1845*(x1850.value)*((((cj2*x1848))+(((-1.0)*cj2*x1846))+(((-1.0)*cj2*x1847))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1851=IKsin(j0);
IkReal x1852=IKcos(j0);
IkReal x1853=((0.045)*cj2);
IkReal x1854=((0.3)*sj3);
IkReal x1855=((0.045)*cj3);
IkReal x1856=(px*x1851);
IkReal x1857=(px*x1852);
evalcond[0]=((((-1.0)*sj2*x1857))+((cj2*x1856)));
evalcond[1]=((((0.045)*sj2))+x1856+((sj2*x1854))+(((-1.0)*sj2*x1855)));
evalcond[2]=((((-1.0)*cj2*x1854))+(((-1.0)*x1857))+((cj3*x1853))+(((-1.0)*x1853)));
evalcond[3]=((0.045)+((cj2*x1857))+x1854+((sj2*x1856))+(((-1.0)*x1855)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1856))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*cj2*x1857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1858=((0.045)*cj2);
IkReal x1859=((0.045)*sj2);
IkReal x1860=((0.3)*sj3);
CheckValue<IkReal> x1861 = IKatan2WithCheck((gconst57*((((cj3*x1859))+(((-1.0)*sj2*x1860))+(((-1.0)*x1859))))),(gconst57*(((((-1.0)*cj2*x1860))+((cj3*x1858))+(((-1.0)*x1858))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1861.valid){
continue;
}
j0array[0]=x1861.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1862=IKsin(j0);
IkReal x1863=IKcos(j0);
IkReal x1864=((0.045)*cj2);
IkReal x1865=((0.3)*sj3);
IkReal x1866=((0.045)*cj3);
IkReal x1867=(px*x1862);
IkReal x1868=(px*x1863);
evalcond[0]=((((-1.0)*sj2*x1868))+((cj2*x1867)));
evalcond[1]=((((0.045)*sj2))+x1867+((sj2*x1865))+(((-1.0)*sj2*x1866)));
evalcond[2]=(((cj3*x1864))+(((-1.0)*cj2*x1865))+(((-1.0)*x1864))+(((-1.0)*x1868)));
evalcond[3]=((0.045)+x1865+((sj2*x1867))+(((-1.0)*x1866))+((cj2*x1868)));
evalcond[4]=((-0.2125)+(((-0.09)*sj2*x1867))+(((-0.09)*cj2*x1868))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1869=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1869;
evalcond[3]=x1869;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1870=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=x1870;
evalcond[3]=x1870;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1871=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=x1871;
evalcond[3]=x1871;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1872=((110.0)*pz);
IkReal x1873=((100.0)*pp);
CheckValue<IkReal> x1874 = IKatan2WithCheck((gconst59*((((py*x1872))+(((-21.25)*py))+(((-1.0)*py*x1873))))),(gconst59*(((((-1.0)*px*x1873))+((px*x1872))+(((-21.25)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
j0array[0]=x1874.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1875=IKcos(j0);
IkReal x1876=IKsin(j0);
IkReal x1877=((1.0)*py);
IkReal x1878=(px*x1875);
evalcond[0]=(((px*x1876))+(((-1.0)*x1875*x1877)));
evalcond[1]=((0.045)+(((-1.0)*x1876*x1877))+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1878)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*py*x1876))+(((1.1)*pz))+(((0.09)*x1878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1879=((0.3)*sj3);
IkReal x1880=((0.045)*px);
IkReal x1881=((0.045)*py);
CheckValue<IkReal> x1882 = IKatan2WithCheck((gconst58*(((((-1.0)*cj3*x1881))+((py*x1879))+x1881))),(gconst58*((((px*x1879))+(((-1.0)*cj3*x1880))+x1880))),IKFAST_ATAN2_MAGTHRESH);
if(!x1882.valid){
continue;
}
j0array[0]=x1882.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1883=IKcos(j0);
IkReal x1884=IKsin(j0);
IkReal x1885=((1.0)*py);
IkReal x1886=(px*x1883);
evalcond[0]=((((-1.0)*x1883*x1885))+((px*x1884)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x1884*x1885))+(((-1.0)*x1886))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1884))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1887=((0.045)*sj3);
IkReal x1888=((0.3)*cj3);
IkReal x1889=(x1888+x1887);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1889)));
evalcond[3]=((0.55)+pz+x1889);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1890=((0.045)*cj3);
IkReal x1891=((0.3)*sj3);
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=((0.045)+x1891+(((-1.0)*x1890)));
evalcond[3]=((-0.045)+x1890+(((-1.0)*x1891)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1892=((0.045)*cj3);
IkReal x1893=((0.3)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.045)+x1893+(((-1.0)*x1892)));
evalcond[3]=((-0.045)+x1892+(((-1.0)*x1893)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1894=((110.0)*pz);
IkReal x1895=((100.0)*pp);
CheckValue<IkReal> x1896 = IKatan2WithCheck((gconst61*(((((-21.25)*py))+(((-1.0)*py*x1894))+(((-1.0)*py*x1895))))),(gconst61*(((((-1.0)*px*x1895))+(((-1.0)*px*x1894))+(((-21.25)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1896.valid){
continue;
}
j0array[0]=x1896.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1897=IKsin(j0);
IkReal x1898=IKcos(j0);
IkReal x1899=(px*x1898);
IkReal x1900=(py*x1897);
evalcond[0]=(((px*x1897))+(((-1.0)*py*x1898)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1900+x1899+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1899))+(((-0.09)*x1900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1901=((0.3)*sj3);
IkReal x1902=((0.045)*px);
IkReal x1903=((0.045)*py);
CheckValue<IkReal> x1904 = IKatan2WithCheck((gconst60*((((py*x1901))+x1903+(((-1.0)*cj3*x1903))))),(gconst60*((((px*x1901))+x1902+(((-1.0)*cj3*x1902))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1904.valid){
continue;
}
j0array[0]=x1904.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1905=IKsin(j0);
IkReal x1906=IKcos(j0);
IkReal x1907=(px*x1906);
IkReal x1908=(py*x1905);
evalcond[0]=((((-1.0)*py*x1906))+((px*x1905)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1908+x1907+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1908))+(((-0.09)*x1907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1909=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1909;
evalcond[3]=x1909;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst62;
gconst62=IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign(((((9.0)*(px*px)))+(((9.0)*(py*py)))));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1910=((0.045)*cj3);
IkReal x1911=((0.3)*sj3);
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=((0.045)+x1911+(((-1.0)*x1910)));
evalcond[3]=((-0.045)+x1910+(((-1.0)*x1911)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1912=((0.045)*cj3);
IkReal x1913=((0.3)*sj3);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=((0.045)+x1913+(((-1.0)*x1912)));
evalcond[3]=((-0.045)+x1912+(((-1.0)*x1913)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1914=((110.0)*pz);
IkReal x1915=((100.0)*pp);
CheckValue<IkReal> x1916 = IKatan2WithCheck((gconst63*(((((-1.0)*py*x1915))+((py*x1914))+(((-21.25)*py))))),(gconst63*(((((-1.0)*px*x1915))+((px*x1914))+(((-21.25)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1916.valid){
continue;
}
j0array[0]=x1916.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1917=IKsin(j0);
IkReal x1918=IKcos(j0);
IkReal x1919=(px*x1918);
IkReal x1920=(py*x1917);
evalcond[0]=(((px*x1917))+(((-1.0)*py*x1918)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1920+x1919+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1919))+(((-0.09)*x1920))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1921=((0.3)*sj3);
IkReal x1922=((0.045)*px);
IkReal x1923=((0.045)*py);
CheckValue<IkReal> x1924 = IKatan2WithCheck((gconst62*((x1923+(((-1.0)*cj3*x1923))+((py*x1921))))),(gconst62*((x1922+((px*x1921))+(((-1.0)*cj3*x1922))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1924.valid){
continue;
}
j0array[0]=x1924.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1925=IKsin(j0);
IkReal x1926=IKcos(j0);
IkReal x1927=(px*x1926);
IkReal x1928=(py*x1925);
evalcond[0]=((((-1.0)*py*x1926))+((px*x1925)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1927+x1928+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1928))+(((-0.09)*x1927))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1929=((0.045)*sj3);
IkReal x1930=((0.3)*cj3);
IkReal x1931=(x1929+x1930);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1931)));
evalcond[3]=((0.55)+x1931+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(((px*px)+(py*py)));
dummyeval[0]=((px*px)+(py*py));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((-9.0)*(py*py)))+(((-9.0)*(px*px)))));
dummyeval[0]=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1932=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((px*px)+(py*py));
evalcond[1]=0;
evalcond[2]=x1932;
evalcond[3]=x1932;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1933=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0;
evalcond[2]=x1933;
evalcond[3]=x1933;
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1934=((110.0)*pz);
IkReal x1935=((100.0)*pp);
CheckValue<IkReal> x1936 = IKatan2WithCheck((gconst65*(((((-1.0)*py*x1934))+(((-1.0)*py*x1935))+(((-21.25)*py))))),(gconst65*(((((-1.0)*px*x1935))+(((-1.0)*px*x1934))+(((-21.25)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1936.valid){
continue;
}
j0array[0]=x1936.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1937=IKcos(j0);
IkReal x1938=IKsin(j0);
IkReal x1939=((1.0)*py);
IkReal x1940=(px*x1937);
evalcond[0]=((((-1.0)*x1937*x1939))+((px*x1938)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x1940))+(((-1.0)*x1938*x1939))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1940))+(((0.09)*py*x1938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1941=((0.3)*sj3);
IkReal x1942=((0.045)*px);
IkReal x1943=((0.045)*py);
CheckValue<IkReal> x1944 = IKatan2WithCheck((gconst64*((((py*x1941))+(((-1.0)*cj3*x1943))+x1943))),(gconst64*((((px*x1941))+(((-1.0)*cj3*x1942))+x1942))),IKFAST_ATAN2_MAGTHRESH);
if(!x1944.valid){
continue;
}
j0array[0]=x1944.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1945=IKcos(j0);
IkReal x1946=IKsin(j0);
IkReal x1947=((1.0)*py);
IkReal x1948=(px*x1945);
evalcond[0]=((((-1.0)*x1945*x1947))+((px*x1946)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x1946*x1947))+(((-1.0)*x1948))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1948))+(((0.09)*py*x1946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1949=sj1*sj1;
IkReal x1950=cj1*cj1;
IkReal x1951=(px*sj2);
IkReal x1952=((0.55)*cj1);
IkReal x1953=((1.0)*pz);
IkReal x1954=(cj2*py);
IkReal x1955=((0.3)*cj3);
IkReal x1956=(py*sj2);
IkReal x1957=(cj2*px);
IkReal x1958=((0.045)*sj3);
IkReal x1959=(cj1*pz);
CheckValue<IkReal> x1960 = IKatan2WithCheck((gconst1*(((((-1.0)*x1949*x1951*x1953))+(((-1.0)*x1954*x1958))+(((-1.0)*x1954*x1955))+((cj1*x1951*x1958))+((cj1*x1951*x1955))+((x1951*x1952))+((x1954*x1959))+(((-1.0)*x1950*x1951*x1953))+(((-0.55)*x1954))))),(gconst1*(((((-1.0)*cj1*x1956*x1958))+(((-1.0)*x1957*x1958))+(((-1.0)*x1952*x1956))+((pz*x1950*x1956))+((pz*x1949*x1956))+((x1957*x1959))+(((-1.0)*x1955*x1957))+(((-1.0)*cj1*x1955*x1956))+(((-0.55)*x1957))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1960.valid){
continue;
}
j0array[0]=x1960.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1961=IKsin(j0);
IkReal x1962=IKcos(j0);
IkReal x1963=(cj1*sj2);
IkReal x1964=((0.09)*sj2);
IkReal x1965=((0.3)*sj3);
IkReal x1966=((0.045)*cj3);
IkReal x1967=((1.1)*sj1);
IkReal x1968=((0.3)*cj3);
IkReal x1969=(cj1*cj2);
IkReal x1970=((0.045)*sj3);
IkReal x1971=((1.0)*sj2);
IkReal x1972=(cj1*pz);
IkReal x1973=(px*x1961);
IkReal x1974=(px*x1962);
IkReal x1975=(py*x1962);
IkReal x1976=(py*x1961);
IkReal x1977=(cj2*pz*sj1);
evalcond[0]=((-0.55)+((sj1*x1974))+((sj1*x1976))+(((-1.0)*x1968))+(((-1.0)*x1970))+x1972);
evalcond[1]=((((-1.0)*sj2*x1966))+((sj2*x1965))+(((0.045)*sj2))+(((-1.0)*x1975))+x1973);
evalcond[2]=(((cj2*x1973))+(((-1.0)*cj2*x1975))+(((-1.0)*pz*sj1*x1971))+((x1963*x1976))+((x1963*x1974)));
evalcond[3]=(((sj1*x1968))+(((-1.0)*x1966*x1969))+((sj1*x1970))+(((-1.0)*x1976))+(((-1.0)*x1974))+((x1965*x1969))+(((0.55)*sj1))+(((0.045)*x1969)));
evalcond[4]=((0.045)+((sj2*x1973))+(((-1.0)*x1966))+(((-1.0)*x1971*x1975))+(((-1.0)*x1969*x1974))+(((-1.0)*x1969*x1976))+x1965+x1977);
evalcond[5]=((-0.2125)+((x1967*x1976))+((x1967*x1974))+(((-1.0)*x1964*x1973))+(((1.1)*x1972))+((x1964*x1975))+(((-1.0)*pp))+(((-0.09)*x1977))+(((0.09)*x1969*x1974))+(((0.09)*x1969*x1976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1978=((0.045)*px);
IkReal x1979=(sj1*sj2);
IkReal x1980=((0.3)*cj3);
IkReal x1981=((0.3)*sj3);
IkReal x1982=((1.0)*cj1*pz);
IkReal x1983=((0.045)*py*x1979);
CheckValue<IkReal> x1984 = IKatan2WithCheck((gconst0*(((((-1.0)*px*x1979*x1981))+(((0.045)*py*sj3))+(((-1.0)*x1978*x1979))+((py*x1980))+((cj3*x1978*x1979))+(((-1.0)*py*x1982))+(((0.55)*py))))),(gconst0*(((((-1.0)*px*x1982))+((sj3*x1978))+((px*x1980))+(((-1.0)*cj3*x1983))+((py*x1979*x1981))+x1983+(((0.55)*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1984.valid){
continue;
}
j0array[0]=x1984.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1985=IKsin(j0);
IkReal x1986=IKcos(j0);
IkReal x1987=(cj1*sj2);
IkReal x1988=((0.09)*sj2);
IkReal x1989=((0.3)*sj3);
IkReal x1990=((0.045)*cj3);
IkReal x1991=((1.1)*sj1);
IkReal x1992=((0.3)*cj3);
IkReal x1993=(cj1*cj2);
IkReal x1994=((0.045)*sj3);
IkReal x1995=((1.0)*sj2);
IkReal x1996=(cj1*pz);
IkReal x1997=(px*x1985);
IkReal x1998=(px*x1986);
IkReal x1999=(py*x1986);
IkReal x2000=(py*x1985);
IkReal x2001=(cj2*pz*sj1);
evalcond[0]=((-0.55)+((sj1*x1998))+x1996+(((-1.0)*x1994))+(((-1.0)*x1992))+((sj1*x2000)));
evalcond[1]=(((sj2*x1989))+(((0.045)*sj2))+x1997+(((-1.0)*sj2*x1990))+(((-1.0)*x1999)));
evalcond[2]=(((cj2*x1997))+((x1987*x2000))+(((-1.0)*cj2*x1999))+(((-1.0)*pz*sj1*x1995))+((x1987*x1998)));
evalcond[3]=(((sj1*x1994))+((sj1*x1992))+(((0.045)*x1993))+((x1989*x1993))+(((-1.0)*x2000))+(((-1.0)*x1990*x1993))+(((0.55)*sj1))+(((-1.0)*x1998)));
evalcond[4]=((0.045)+x2001+((sj2*x1997))+x1989+(((-1.0)*x1990))+(((-1.0)*x1995*x1999))+(((-1.0)*x1993*x1998))+(((-1.0)*x1993*x2000)));
evalcond[5]=((-0.2125)+((x1988*x1999))+((x1991*x1998))+(((-1.0)*pp))+(((-0.09)*x2001))+(((0.09)*x1993*x2000))+(((0.09)*x1993*x1998))+((x1991*x2000))+(((1.1)*x1996))+(((-1.0)*x1988*x1997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2002=((0.045)*sj2);
CheckValue<IkReal> x2005 = IKatan2WithCheck(((-1.0)*py),px,IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
IkReal x2003=((1.0)*(x2005.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x2006=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x2006.valid){
continue;
}
if( (((x2006.value)*(((((0.3)*sj2*sj3))+x2002+(((-1.0)*cj3*x2002)))))) < -1-IKFAST_SINCOS_THRESH || (((x2006.value)*(((((0.3)*sj2*sj3))+x2002+(((-1.0)*cj3*x2002)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2004=IKasin(((x2006.value)*(((((0.3)*sj2*sj3))+x2002+(((-1.0)*cj3*x2002))))));
j0array[0]=((((-1.0)*x2003))+(((-1.0)*x2004)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x2004+(((-1.0)*x2003)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2007=py*py;
IkReal x2008=cj2*cj2;
IkReal x2009=sj2*sj2;
IkReal x2010=IKcos(j0);
IkReal x2011=IKsin(j0);
IkReal x2012=px*px;
IkReal x2013=((0.045)*sj2);
IkReal x2014=((1.0)*x2012);
IkReal x2015=((0.3)*sj2*sj3);
IkReal x2016=(px*py*x2009);
IkReal x2017=(px*py*x2008);
evalcond[0]=((((-1.0)*py*x2013))+(((-1.0)*py*x2015))+((x2011*(((((-1.0)*x2016))+(((-1.0)*x2017))))))+((x2010*((((x2007*x2009))+((x2007*x2008))))))+((cj3*py*x2013)));
evalcond[1]=(((x2011*(((((-1.0)*x2008*x2014))+(((-1.0)*x2009*x2014))))))+((x2010*((x2017+x2016))))+((cj3*px*x2013))+(((-1.0)*px*x2013))+(((-1.0)*px*x2015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst66;
IkReal x2018=(py*sj0);
IkReal x2019=((0.3)*cj3);
IkReal x2020=(cj0*px);
IkReal x2021=(cj2*pz);
IkReal x2022=((0.045)*sj3);
gconst66=IKsign(((((-0.045)*x2021))+(((-0.3)*sj3*x2021))+(((-1.0)*x2019*x2020))+(((-0.55)*x2020))+(((-1.0)*x2018*x2022))+(((-0.55)*x2018))+(((0.045)*cj3*x2021))+(((-1.0)*x2020*x2022))+(((-1.0)*x2018*x2019))));
IkReal x2023=(py*sj0);
IkReal x2024=(cj2*pz);
IkReal x2025=((6.66666666666667)*cj3);
IkReal x2026=(cj0*px);
IkReal x2027=((1.0)*sj3);
dummyeval[0]=((((-1.0)*x2023*x2025))+(((-1.0)*x2023*x2027))+(((-1.0)*x2025*x2026))+(((-1.0)*x2024))+(((-1.0)*x2026*x2027))+(((-6.66666666666667)*sj3*x2024))+((cj3*x2024))+(((-12.2222222222222)*x2023))+(((-12.2222222222222)*x2026)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign((((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0)))));
dummyeval[0]=(((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x2028=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2028;
evalcond[3]=x2028;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst69;
gconst69=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst68;
IkReal x2029=(cj0*px);
IkReal x2030=(py*sj0);
IkReal x2031=((0.0254095720202485)*sj3);
IkReal x2032=((0.92038656235619)*pp);
gconst68=IKsign(((((-0.099746893695352)*pz))+((x2030*x2031))+(((-0.185020708697653)*x2030))+(((-0.310561435803037)*pz*sj3))+(((-0.185020708697653)*x2029))+(((-1.0)*x2029*x2032))+(((-1.0)*x2030*x2032))+(((0.138057984353428)*pp*pz))+((x2029*x2031))));
IkReal x2033=(py*sj0);
IkReal x2034=(cj0*px);
IkReal x2035=((36.2220411120167)*pp);
dummyeval[0]=(((sj3*x2034))+((sj3*x2033))+(((5.4333061668025)*pp*pz))+(((-3.92556370551481)*pz))+(((-12.2222222222222)*pz*sj3))+(((-7.28153581454315)*x2034))+(((-7.28153581454315)*x2033))+(((-1.0)*x2034*x2035))+(((-1.0)*x2033*x2035)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2036=sj3*sj3;
IkReal x2037=(pp*sj3);
IkReal x2038=(cj3*sj3);
IkReal x2039=(cj3*pp);
IkReal x2040=((1.0)*pz);
CheckValue<IkReal> x2041 = IKatan2WithCheck((gconst68*(((-0.101761389783709)+(((-0.0414173953060285)*x2037))+(((-0.276115968706857)*x2039))+(((0.00114343074091118)*x2036))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))+(((0.00762287160607455)*x2038))))),(gconst68*(((-0.0548607915324436)+(((0.0414173953060285)*x2039))+(((-0.0139752646111367)*x2036))+(((-0.0299240681086056)*cj3))+(((-1.0)*cj0*px*x2040))+(((-1.0)*py*sj0*x2040))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((0.00621260929590428)*x2037))+(((-0.0931684307409112)*x2038))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
j1array[0]=x2041.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2042=IKsin(j1);
IkReal x2043=IKcos(j1);
IkReal x2044=((0.045)*sj3);
IkReal x2045=((0.3)*cj3);
IkReal x2046=((0.045)*cj3);
IkReal x2047=(cj0*px);
IkReal x2048=(py*sj0);
IkReal x2049=((1.0)*x2043);
IkReal x2050=(sj3*x2043);
IkReal x2051=(pz*x2042);
IkReal x2052=(pz*x2043);
IkReal x2053=((0.09)*x2043);
IkReal x2054=((1.1)*x2042);
evalcond[0]=((-0.55)+((x2042*x2048))+((x2042*x2047))+(((-1.0)*x2045))+(((-1.0)*x2044))+x2052);
evalcond[1]=((0.045)+(((-1.0)*x2046))+x2051+(((-1.0)*x2047*x2049))+(((0.3)*sj3))+(((-1.0)*x2048*x2049)));
evalcond[2]=((((0.310561435803037)*sj3*x2042))+(((-0.92038656235619)*pp*x2043))+(((0.0254095720202485)*x2050))+(((-0.138057984353428)*pp*x2042))+(((0.099746893695352)*x2042))+pz+(((-0.185020708697653)*x2043)));
evalcond[3]=((((0.045)*x2043))+((x2042*x2045))+((x2042*x2044))+(((-1.0)*x2047))+(((-1.0)*x2048))+(((-1.0)*x2043*x2046))+(((0.3)*x2050))+(((0.55)*x2042)));
evalcond[4]=((-0.2125)+(((1.1)*x2052))+((x2047*x2053))+((x2047*x2054))+(((-0.09)*x2051))+(((-1.0)*pp))+((x2048*x2053))+((x2048*x2054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2055=(py*sj0);
IkReal x2056=(cj0*px);
IkReal x2057=((0.3)*sj3);
IkReal x2058=((0.045)*cj3);
IkReal x2059=((0.3)*cj3);
IkReal x2060=((0.045)*pz);
IkReal x2061=((0.045)*sj3);
CheckValue<IkReal> x2062 = IKatan2WithCheck((gconst69*((x2060+(((-1.0)*pz*x2058))+(((-1.0)*x2055*x2061))+(((-0.55)*x2055))+(((-0.55)*x2056))+(((-1.0)*x2056*x2059))+(((-1.0)*x2056*x2061))+((pz*x2057))+(((-1.0)*x2055*x2059))))),(gconst69*(((((-0.55)*pz))+(((-0.045)*x2056))+(((-0.045)*x2055))+((x2055*x2058))+(((-1.0)*pz*x2059))+(((-1.0)*sj3*x2060))+(((-1.0)*x2056*x2057))+((x2056*x2058))+(((-1.0)*x2055*x2057))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2062.valid){
continue;
}
j1array[0]=x2062.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2063=IKsin(j1);
IkReal x2064=IKcos(j1);
IkReal x2065=((0.045)*sj3);
IkReal x2066=((0.3)*cj3);
IkReal x2067=((0.045)*cj3);
IkReal x2068=(cj0*px);
IkReal x2069=(py*sj0);
IkReal x2070=((1.0)*x2064);
IkReal x2071=(sj3*x2064);
IkReal x2072=(pz*x2063);
IkReal x2073=(pz*x2064);
IkReal x2074=((0.09)*x2064);
IkReal x2075=((1.1)*x2063);
evalcond[0]=((-0.55)+x2073+(((-1.0)*x2066))+(((-1.0)*x2065))+((x2063*x2069))+((x2063*x2068)));
evalcond[1]=((0.045)+x2072+(((-1.0)*x2067))+(((-1.0)*x2069*x2070))+(((0.3)*sj3))+(((-1.0)*x2068*x2070)));
evalcond[2]=((((0.099746893695352)*x2063))+(((-0.138057984353428)*pp*x2063))+(((-0.92038656235619)*pp*x2064))+pz+(((0.0254095720202485)*x2071))+(((0.310561435803037)*sj3*x2063))+(((-0.185020708697653)*x2064)));
evalcond[3]=((((-1.0)*x2064*x2067))+(((0.3)*x2071))+(((-1.0)*x2068))+(((-1.0)*x2069))+(((0.55)*x2063))+((x2063*x2065))+((x2063*x2066))+(((0.045)*x2064)));
evalcond[4]=((-0.2125)+((x2069*x2074))+((x2069*x2075))+((x2068*x2075))+((x2068*x2074))+(((1.1)*x2073))+(((-1.0)*pp))+(((-0.09)*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2076=(px*sj0);
IkReal x2077=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x2076+(((-1.0)*x2077)));
evalcond[3]=(x2077+(((-1.0)*x2076)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst70;
gconst70=IKsign(((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0))));
dummyeval[0]=((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst71;
IkReal x2078=(cj0*px);
IkReal x2079=(py*sj0);
IkReal x2080=((0.0254095720202485)*sj3);
IkReal x2081=((0.92038656235619)*pp);
gconst71=IKsign(((((-1.0)*x2078*x2081))+(((-0.138057984353428)*pp*pz))+((x2078*x2080))+(((0.310561435803037)*pz*sj3))+(((0.099746893695352)*pz))+(((-1.0)*x2079*x2081))+(((-0.185020708697653)*x2078))+(((-0.185020708697653)*x2079))+((x2079*x2080))));
IkReal x2082=(py*sj0);
IkReal x2083=(cj0*px);
IkReal x2084=((36.2220411120167)*pp);
dummyeval[0]=((((-7.28153581454315)*x2083))+(((-7.28153581454315)*x2082))+(((12.2222222222222)*pz*sj3))+(((-5.4333061668025)*pp*pz))+(((3.92556370551481)*pz))+(((-1.0)*x2083*x2084))+(((-1.0)*x2082*x2084))+((sj3*x2083))+((sj3*x2082)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2085=sj3*sj3;
IkReal x2086=(cj3*pp);
IkReal x2087=(cj3*sj3);
IkReal x2088=(pp*sj3);
IkReal x2089=((1.0)*pz);
CheckValue<IkReal> x2090 = IKatan2WithCheck((gconst71*(((-0.101761389783709)+(((-0.0414173953060285)*x2088))+(pz*pz)+(((0.00762287160607455)*x2087))+(((0.00114343074091118)*x2085))+(((-0.506212609295904)*pp))+(((-0.276115968706857)*x2086))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))))),(gconst71*(((0.0548607915324436)+(((0.0139752646111367)*x2085))+(((0.0931684307409112)*x2087))+(((0.175297399907961)*sj3))+(((-1.0)*cj0*px*x2089))+(((-0.0414173953060285)*x2086))+(((-1.0)*py*sj0*x2089))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))+(((-0.00621260929590428)*x2088))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
j1array[0]=x2090.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2091=IKsin(j1);
IkReal x2092=IKcos(j1);
IkReal x2093=((0.045)*sj3);
IkReal x2094=((0.3)*cj3);
IkReal x2095=((0.045)*cj3);
IkReal x2096=(cj0*px);
IkReal x2097=(py*sj0);
IkReal x2098=(sj3*x2092);
IkReal x2099=(pz*x2091);
IkReal x2100=(pz*x2092);
IkReal x2101=((0.09)*x2092);
IkReal x2102=((1.1)*x2091);
evalcond[0]=((-0.55)+(((-1.0)*x2094))+(((-1.0)*x2093))+((x2091*x2097))+((x2091*x2096))+x2100);
evalcond[1]=((0.045)+(((-1.0)*x2095))+((x2092*x2096))+((x2092*x2097))+(((0.3)*sj3))+(((-1.0)*x2099)));
evalcond[2]=((((-0.92038656235619)*pp*x2092))+(((-0.185020708697653)*x2092))+(((0.138057984353428)*pp*x2091))+(((-0.310561435803037)*sj3*x2091))+pz+(((-0.099746893695352)*x2091))+(((0.0254095720202485)*x2098)));
evalcond[3]=(((x2091*x2094))+((x2091*x2093))+(((-0.045)*x2092))+(((-0.3)*x2098))+(((0.55)*x2091))+((x2092*x2095))+(((-1.0)*x2097))+(((-1.0)*x2096)));
evalcond[4]=((-0.2125)+(((1.1)*x2100))+(((-1.0)*x2097*x2101))+(((-1.0)*x2096*x2101))+(((-1.0)*pp))+((x2097*x2102))+(((0.09)*x2099))+((x2096*x2102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2103=(py*sj0);
IkReal x2104=(cj0*px);
IkReal x2105=((0.3)*sj3);
IkReal x2106=((0.045)*cj3);
IkReal x2107=((0.3)*cj3);
IkReal x2108=((0.045)*pz);
IkReal x2109=((0.045)*sj3);
CheckValue<IkReal> x2110 = IKatan2WithCheck((gconst70*((((x2104*x2107))+((x2104*x2109))+((x2103*x2109))+((x2103*x2107))+x2108+(((0.55)*x2103))+(((0.55)*x2104))+((pz*x2105))+(((-1.0)*pz*x2106))))),(gconst70*(((((-1.0)*x2103*x2105))+((x2104*x2106))+(((-0.045)*x2104))+(((-0.045)*x2103))+((x2103*x2106))+((pz*x2107))+((sj3*x2108))+(((-1.0)*x2104*x2105))+(((0.55)*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2110.valid){
continue;
}
j1array[0]=x2110.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2111=IKsin(j1);
IkReal x2112=IKcos(j1);
IkReal x2113=((0.045)*sj3);
IkReal x2114=((0.3)*cj3);
IkReal x2115=((0.045)*cj3);
IkReal x2116=(cj0*px);
IkReal x2117=(py*sj0);
IkReal x2118=(sj3*x2112);
IkReal x2119=(pz*x2111);
IkReal x2120=(pz*x2112);
IkReal x2121=((0.09)*x2112);
IkReal x2122=((1.1)*x2111);
evalcond[0]=((-0.55)+x2120+((x2111*x2117))+((x2111*x2116))+(((-1.0)*x2114))+(((-1.0)*x2113)));
evalcond[1]=((0.045)+(((-1.0)*x2115))+(((0.3)*sj3))+(((-1.0)*x2119))+((x2112*x2116))+((x2112*x2117)));
evalcond[2]=((((0.138057984353428)*pp*x2111))+pz+(((-0.099746893695352)*x2111))+(((-0.310561435803037)*sj3*x2111))+(((-0.92038656235619)*pp*x2112))+(((-0.185020708697653)*x2112))+(((0.0254095720202485)*x2118)));
evalcond[3]=((((0.55)*x2111))+(((-0.3)*x2118))+((x2111*x2114))+((x2111*x2113))+(((-0.045)*x2112))+(((-1.0)*x2116))+(((-1.0)*x2117))+((x2112*x2115)));
evalcond[4]=((-0.2125)+(((-1.0)*x2117*x2121))+(((-1.0)*x2116*x2121))+(((-1.0)*pp))+((x2117*x2122))+(((1.1)*x2120))+((x2116*x2122))+(((0.09)*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2123=((-1.0)*cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2123;
evalcond[3]=x2123;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst72;
gconst72=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2124=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x2124)));
op[1]=0;
op[2]=((1.0)+x2124);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2126=IKPowWithIntegerCheck(pz,-1);
if(!x2126.valid){
continue;
}
IkReal x2125=x2126.value;
if( IKabs((x2125*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2125*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2125*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2125*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2125*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x2125*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2127=IKcos(j1);
IkReal x2128=IKsin(j1);
IkReal x2129=((0.045)*cj3);
IkReal x2130=((0.3)*cj3);
IkReal x2131=(sj3*x2128);
IkReal x2132=(cj3*x2128);
IkReal x2133=(sj3*x2127);
IkReal x2134=(pz*x2128);
IkReal x2135=(pz*x2127);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2130))+x2135);
evalcond[1]=((0.045)+x2134+(((-1.0)*x2129))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2135))+(((-0.09)*x2134))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x2127))+(((0.045)*x2131))+(((0.3)*x2133))+((x2128*x2130))+(((-1.0)*x2127*x2129))+(((0.55)*x2128)));
evalcond[4]=((((0.045)*x2128))+(((-0.045)*x2133))+(((-0.55)*x2127))+(((0.3)*x2131))+(((-1.0)*x2127*x2130))+(((-1.0)*x2128*x2129))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2137=IKPowWithIntegerCheck(pz,-1);
if(!x2137.valid){
continue;
}
IkReal x2136=x2137.value;
if( IKabs(((0.111111111111111)*x2136*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2136*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2136*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x2136*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2136*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x2136*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2138=IKcos(j1);
IkReal x2139=IKsin(j1);
IkReal x2140=((0.045)*cj3);
IkReal x2141=((0.3)*cj3);
IkReal x2142=(sj3*x2139);
IkReal x2143=(cj3*x2139);
IkReal x2144=(sj3*x2138);
IkReal x2145=(pz*x2139);
IkReal x2146=(pz*x2138);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2146+(((-1.0)*x2141)));
evalcond[1]=((0.045)+x2145+(((-1.0)*x2140))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x2145))+(((-1.0)*pp))+(((1.1)*x2146)));
evalcond[3]=((((-1.0)*x2138*x2140))+(((0.045)*x2138))+(((0.55)*x2139))+(((0.3)*x2144))+(((0.045)*x2142))+((x2139*x2141)));
evalcond[4]=((((-1.0)*x2138*x2141))+(((0.045)*x2139))+(((-0.045)*x2144))+pz+(((0.3)*x2142))+(((-0.55)*x2138))+(((-1.0)*x2139*x2140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2147 = IKatan2WithCheck((gconst72*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst72*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
j1array[0]=x2147.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2148=IKcos(j1);
IkReal x2149=IKsin(j1);
IkReal x2150=((0.045)*cj3);
IkReal x2151=((0.3)*cj3);
IkReal x2152=(sj3*x2149);
IkReal x2153=(cj3*x2149);
IkReal x2154=(sj3*x2148);
IkReal x2155=(pz*x2149);
IkReal x2156=(pz*x2148);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2156+(((-1.0)*x2151)));
evalcond[1]=((0.045)+x2155+(((-1.0)*x2150))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x2155))+(((-1.0)*pp))+(((1.1)*x2156)));
evalcond[3]=(((x2149*x2151))+(((-1.0)*x2148*x2150))+(((0.55)*x2149))+(((0.3)*x2154))+(((0.045)*x2152))+(((0.045)*x2148)));
evalcond[4]=((((-1.0)*x2149*x2150))+(((-0.55)*x2148))+(((-1.0)*x2148*x2151))+(((-0.045)*x2154))+pz+(((0.3)*x2152))+(((0.045)*x2149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2157=(cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*x2157);
evalcond[3]=x2157;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst73;
gconst73=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2158=((2.40588235294118)*sj3);
op[0]=((1.0)+x2158);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x2158)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2160=IKPowWithIntegerCheck(pz,-1);
if(!x2160.valid){
continue;
}
IkReal x2159=x2160.value;
if( IKabs((x2159*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2159*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2159*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2159*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2159*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x2159*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2161=IKcos(j1);
IkReal x2162=IKsin(j1);
IkReal x2163=((0.045)*cj3);
IkReal x2164=((0.3)*cj3);
IkReal x2165=(sj3*x2162);
IkReal x2166=(cj3*x2162);
IkReal x2167=(sj3*x2161);
IkReal x2168=(pz*x2162);
IkReal x2169=(pz*x2161);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2169+(((-1.0)*x2164)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x2163))+(((-1.0)*x2168)));
evalcond[2]=((-0.2125)+(((0.09)*x2168))+(((1.1)*x2169))+(((-1.0)*pp)));
evalcond[3]=((((0.55)*x2162))+(((-0.3)*x2167))+((x2161*x2163))+(((-0.045)*x2161))+((x2162*x2164))+(((0.045)*x2165)));
evalcond[4]=((((-0.3)*x2165))+(((-1.0)*x2161*x2164))+(((-0.045)*x2162))+(((-0.045)*x2167))+pz+(((-0.55)*x2161))+((x2162*x2163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2171=IKPowWithIntegerCheck(pz,-1);
if(!x2171.valid){
continue;
}
IkReal x2170=x2171.value;
if( IKabs(((0.111111111111111)*x2170*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2170*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2170*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x2170*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2170*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x2170*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2172=IKcos(j1);
IkReal x2173=IKsin(j1);
IkReal x2174=((0.045)*cj3);
IkReal x2175=((0.3)*cj3);
IkReal x2176=(sj3*x2173);
IkReal x2177=(cj3*x2173);
IkReal x2178=(sj3*x2172);
IkReal x2179=(pz*x2173);
IkReal x2180=(pz*x2172);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2180+(((-1.0)*x2175)));
evalcond[1]=((0.045)+(((-1.0)*x2179))+(((0.3)*sj3))+(((-1.0)*x2174)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2180))+(((0.09)*x2179)));
evalcond[3]=((((0.55)*x2173))+((x2172*x2174))+(((-0.3)*x2178))+((x2173*x2175))+(((-0.045)*x2172))+(((0.045)*x2176)));
evalcond[4]=((((-0.3)*x2176))+((x2173*x2174))+(((-0.045)*x2173))+(((-0.045)*x2178))+pz+(((-0.55)*x2172))+(((-1.0)*x2172*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2181 = IKatan2WithCheck((gconst73*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst73*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2181.valid){
continue;
}
j1array[0]=x2181.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2182=IKcos(j1);
IkReal x2183=IKsin(j1);
IkReal x2184=((0.045)*cj3);
IkReal x2185=((0.3)*cj3);
IkReal x2186=(sj3*x2183);
IkReal x2187=(cj3*x2183);
IkReal x2188=(sj3*x2182);
IkReal x2189=(pz*x2183);
IkReal x2190=(pz*x2182);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2190+(((-1.0)*x2185)));
evalcond[1]=((0.045)+(((-1.0)*x2189))+(((-1.0)*x2184))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2190))+(((0.09)*x2189)));
evalcond[3]=(((x2183*x2185))+((x2182*x2184))+(((-0.045)*x2182))+(((-0.3)*x2188))+(((0.045)*x2186))+(((0.55)*x2183)));
evalcond[4]=((((-0.55)*x2182))+((x2183*x2184))+pz+(((-0.045)*x2183))+(((-0.045)*x2188))+(((-1.0)*x2182*x2185))+(((-0.3)*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2191=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2191;
evalcond[3]=x2191;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst74;
gconst74=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2192=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x2192)));
op[1]=0;
op[2]=((1.0)+x2192);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2194=IKPowWithIntegerCheck(pz,-1);
if(!x2194.valid){
continue;
}
IkReal x2193=x2194.value;
if( IKabs((x2193*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2193*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2193*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2193*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2193*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x2193*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2195=IKcos(j1);
IkReal x2196=IKsin(j1);
IkReal x2197=((0.045)*cj3);
IkReal x2198=((0.3)*cj3);
IkReal x2199=(sj3*x2196);
IkReal x2200=(cj3*x2196);
IkReal x2201=(sj3*x2195);
IkReal x2202=(pz*x2196);
IkReal x2203=(pz*x2195);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2203+(((-1.0)*x2198)));
evalcond[1]=((0.045)+x2202+(((-1.0)*x2197))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x2202))+(((-1.0)*pp))+(((1.1)*x2203)));
evalcond[3]=(((x2196*x2198))+(((-1.0)*x2195*x2197))+(((0.045)*x2195))+(((0.045)*x2199))+(((0.3)*x2201))+(((0.55)*x2196)));
evalcond[4]=((((0.3)*x2199))+(((-1.0)*x2195*x2198))+(((-1.0)*x2196*x2197))+(((-0.045)*x2201))+(((-0.55)*x2195))+pz+(((0.045)*x2196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2205=IKPowWithIntegerCheck(pz,-1);
if(!x2205.valid){
continue;
}
IkReal x2204=x2205.value;
if( IKabs(((0.111111111111111)*x2204*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2204*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2204*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x2204*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2204*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x2204*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2206=IKcos(j1);
IkReal x2207=IKsin(j1);
IkReal x2208=((0.045)*cj3);
IkReal x2209=((0.3)*cj3);
IkReal x2210=(sj3*x2207);
IkReal x2211=(cj3*x2207);
IkReal x2212=(sj3*x2206);
IkReal x2213=(pz*x2207);
IkReal x2214=(pz*x2206);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2214+(((-1.0)*x2209)));
evalcond[1]=((0.045)+x2213+(((-1.0)*x2208))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x2213))+(((-1.0)*pp))+(((1.1)*x2214)));
evalcond[3]=((((0.55)*x2207))+(((0.045)*x2206))+(((0.045)*x2210))+(((0.3)*x2212))+(((-1.0)*x2206*x2208))+((x2207*x2209)));
evalcond[4]=((((-1.0)*x2207*x2208))+(((-0.045)*x2212))+(((0.045)*x2207))+(((-0.55)*x2206))+pz+(((0.3)*x2210))+(((-1.0)*x2206*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2215 = IKatan2WithCheck((gconst74*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst74*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
j1array[0]=x2215.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2216=IKcos(j1);
IkReal x2217=IKsin(j1);
IkReal x2218=((0.045)*cj3);
IkReal x2219=((0.3)*cj3);
IkReal x2220=(sj3*x2217);
IkReal x2221=(cj3*x2217);
IkReal x2222=(sj3*x2216);
IkReal x2223=(pz*x2217);
IkReal x2224=(pz*x2216);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2224+(((-1.0)*x2219)));
evalcond[1]=((0.045)+x2223+(((-1.0)*x2218))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x2223))+(((1.1)*x2224))+(((-1.0)*pp)));
evalcond[3]=((((0.3)*x2222))+(((0.55)*x2217))+(((0.045)*x2216))+((x2217*x2219))+(((-1.0)*x2216*x2218))+(((0.045)*x2220)));
evalcond[4]=((((0.3)*x2220))+(((0.045)*x2217))+(((-0.55)*x2216))+(((-0.045)*x2222))+(((-1.0)*x2216*x2219))+(((-1.0)*x2217*x2218))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2225=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2225;
evalcond[3]=((-1.0)*x2225);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst75;
gconst75=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2226=((2.40588235294118)*sj3);
op[0]=((1.0)+x2226);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x2226)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2228=IKPowWithIntegerCheck(pz,-1);
if(!x2228.valid){
continue;
}
IkReal x2227=x2228.value;
if( IKabs((x2227*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x2227*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2227*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x2227*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2227*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x2227*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2229=IKcos(j1);
IkReal x2230=IKsin(j1);
IkReal x2231=((0.045)*cj3);
IkReal x2232=((0.3)*cj3);
IkReal x2233=(sj3*x2230);
IkReal x2234=(cj3*x2230);
IkReal x2235=(sj3*x2229);
IkReal x2236=(pz*x2230);
IkReal x2237=(pz*x2229);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2237+(((-1.0)*x2232)));
evalcond[1]=((0.045)+(((-1.0)*x2231))+(((-1.0)*x2236))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2237))+(((-1.0)*pp))+(((0.09)*x2236)));
evalcond[3]=(((x2229*x2231))+(((-0.045)*x2229))+((x2230*x2232))+(((-0.3)*x2235))+(((0.045)*x2233))+(((0.55)*x2230)));
evalcond[4]=((((-0.55)*x2229))+(((-1.0)*x2229*x2232))+(((-0.045)*x2235))+(((-0.045)*x2230))+((x2230*x2231))+pz+(((-0.3)*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2239=IKPowWithIntegerCheck(pz,-1);
if(!x2239.valid){
continue;
}
IkReal x2238=x2239.value;
if( IKabs(((0.111111111111111)*x2238*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2238*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x2238*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x2238*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x2238*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x2238*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2240=IKcos(j1);
IkReal x2241=IKsin(j1);
IkReal x2242=((0.045)*cj3);
IkReal x2243=((0.3)*cj3);
IkReal x2244=(sj3*x2241);
IkReal x2245=(cj3*x2241);
IkReal x2246=(sj3*x2240);
IkReal x2247=(pz*x2241);
IkReal x2248=(pz*x2240);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2248+(((-1.0)*x2243)));
evalcond[1]=((0.045)+(((-1.0)*x2247))+(((-1.0)*x2242))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x2247))+(((-1.0)*pp))+(((1.1)*x2248)));
evalcond[3]=(((x2241*x2243))+(((0.045)*x2244))+(((-0.045)*x2240))+(((0.55)*x2241))+(((-0.3)*x2246))+((x2240*x2242)));
evalcond[4]=(((x2241*x2242))+(((-0.045)*x2241))+(((-0.045)*x2246))+(((-1.0)*x2240*x2243))+pz+(((-0.55)*x2240))+(((-0.3)*x2244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2249 = IKatan2WithCheck((gconst75*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst75*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
j1array[0]=x2249.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2250=IKcos(j1);
IkReal x2251=IKsin(j1);
IkReal x2252=((0.045)*cj3);
IkReal x2253=((0.3)*cj3);
IkReal x2254=(sj3*x2251);
IkReal x2255=(cj3*x2251);
IkReal x2256=(sj3*x2250);
IkReal x2257=(pz*x2251);
IkReal x2258=(pz*x2250);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2258+(((-1.0)*x2253)));
evalcond[1]=((0.045)+(((-1.0)*x2257))+(((-1.0)*x2252))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x2258))+(((0.09)*x2257)));
evalcond[3]=((((0.045)*x2254))+(((-0.045)*x2250))+(((0.55)*x2251))+((x2251*x2253))+((x2250*x2252))+(((-0.3)*x2256)));
evalcond[4]=((((-0.045)*x2251))+(((-0.045)*x2256))+pz+(((-0.55)*x2250))+((x2251*x2252))+(((-1.0)*x2250*x2253))+(((-0.3)*x2254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2259=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x2259;
evalcond[3]=x2259;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst76;
gconst76=IKsign((((cj0*px))+((py*sj0))));
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2260=(cj0*px);
IkReal x2261=(py*sj0);
IkReal x2262=((36.2220411120167)*pp);
dummyeval[0]=(x2260+x2261);
dummyeval[1]=((((-7.28153581454315)*x2260))+(((-7.28153581454315)*x2261))+(((-1.0)*x2260*x2262))+(((-1.0)*x2261*x2262))+((sj3*x2260))+((sj3*x2261)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2263=(cj0*px);
IkReal x2264=((1.3840830449827)*pp);
IkReal x2265=((3.11349480968858)*sj3);
IkReal x2266=(py*sj0);
IkReal x2267=((1.0)*x2263);
IkReal x2268=((1.0)*x2266);
IkReal x2269=(x2268+x2267);
dummyeval[0]=(((x2263*x2264))+(((-1.0)*x2263*x2265))+((x2264*x2266))+(((-1.0)*x2269))+(((-1.0)*x2265*x2266)));
dummyeval[1]=((-1.0)*x2269);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst77;
CheckValue<IkReal> x2270 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
gconst77=((-1.0)*(x2270.value));
IkReal gconst78;
gconst78=IKsin(gconst77);
IkReal gconst79;
gconst79=IKcos(gconst77);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst77))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst95;
gconst95=IKsign((((gconst78*py))+((gconst79*px))));
dummyeval[0]=(((gconst78*py))+((gconst79*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2271=(gconst78*py);
IkReal x2272=((36.2220411120167)*pp);
IkReal x2273=(gconst79*px);
dummyeval[0]=(x2271+x2273);
dummyeval[1]=((((-7.28153581454315)*x2273))+(((-7.28153581454315)*x2271))+((sj3*x2273))+((sj3*x2271))+(((-1.0)*x2272*x2273))+(((-1.0)*x2271*x2272)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2274=(gconst79*px);
IkReal x2275=((3.11349480968858)*sj3);
IkReal x2276=(gconst78*py);
IkReal x2277=((1.3840830449827)*pp);
IkReal x2278=((1.0)*x2276);
IkReal x2279=((1.0)*x2274);
IkReal x2280=(x2279+x2278);
dummyeval[0]=((((-1.0)*x2274*x2275))+(((-1.0)*x2275*x2276))+(((-1.0)*x2280))+((x2276*x2277))+((x2274*x2277)));
dummyeval[1]=((-1.0)*x2280);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2282 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2282.valid){
continue;
}
IkReal x2281=x2282.value;
j1array[0]=((-1.0)*x2281);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2281)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2283=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2283))+(((0.1275)*x2283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2284=(gconst78*py);
IkReal x2285=(gconst79*px);
IkReal x2286=((0.138057984353428)*pp);
IkReal x2287=((0.310561435803037)*sj3);
IkReal x2288=((0.0414173953060285)*pp);
CheckValue<IkReal> x2289=IKPowWithIntegerCheck(((((-0.099746893695352)*x2285))+(((-0.099746893695352)*x2284))+(((-1.0)*x2284*x2287))+(((-1.0)*x2285*x2287))+((x2285*x2286))+((x2284*x2286))),-1);
if(!x2289.valid){
continue;
}
CheckValue<IkReal> x2290=IKPowWithIntegerCheck(((((-1.0)*x2284))+(((-1.0)*x2285))),-1);
if(!x2290.valid){
continue;
}
if( IKabs(((x2289.value)*(((-0.00832593189139439)+((cj3*x2288))+(((-1.0)*x2288))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2290.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2289.value)*(((-0.00832593189139439)+((cj3*x2288))+(((-1.0)*x2288))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2290.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2289.value)*(((-0.00832593189139439)+((cj3*x2288))+(((-1.0)*x2288))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2290.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2291=IKsin(j1);
IkReal x2292=IKcos(j1);
IkReal x2293=(gconst78*py);
IkReal x2294=(gconst79*px);
IkReal x2295=((0.045)*cj3);
IkReal x2296=((0.3)*cj3);
IkReal x2297=((1.0)*x2292);
IkReal x2298=(sj3*x2291);
IkReal x2299=(sj3*x2292);
IkReal x2300=((0.09)*x2292);
IkReal x2301=((1.1)*x2291);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2291*x2294))+((x2291*x2293))+(((-1.0)*x2296)));
evalcond[1]=((0.045)+(((-1.0)*x2293*x2297))+(((0.3)*sj3))+(((-1.0)*x2295))+(((-1.0)*x2294*x2297)));
evalcond[2]=((-0.2125)+((x2293*x2301))+((x2293*x2300))+(((-1.0)*pp))+((x2294*x2301))+((x2294*x2300)));
evalcond[3]=((((0.099746893695352)*x2291))+(((-0.92038656235619)*pp*x2292))+(((-0.138057984353428)*pp*x2291))+(((0.310561435803037)*x2298))+(((0.0254095720202485)*x2299))+(((-0.185020708697653)*x2292)));
evalcond[4]=((((0.3)*x2299))+(((-1.0)*x2292*x2295))+((x2291*x2296))+(((-1.0)*x2294))+(((-1.0)*x2293))+(((0.045)*x2298))+(((0.045)*x2292))+(((0.55)*x2291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2302=(gconst79*px);
IkReal x2303=((0.0254095720202485)*sj3);
IkReal x2304=(gconst78*py);
IkReal x2305=((0.92038656235619)*pp);
CheckValue<IkReal> x2306=IKPowWithIntegerCheck((x2302+x2304),-1);
if(!x2306.valid){
continue;
}
CheckValue<IkReal> x2307=IKPowWithIntegerCheck((((x2303*x2304))+(((-1.0)*x2304*x2305))+(((-1.0)*x2302*x2305))+((x2302*x2303))+(((-0.185020708697653)*x2302))+(((-0.185020708697653)*x2304))),-1);
if(!x2307.valid){
continue;
}
if( IKabs(((x2306.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2307.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2306.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2307.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2306.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2307.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2308=IKsin(j1);
IkReal x2309=IKcos(j1);
IkReal x2310=(gconst78*py);
IkReal x2311=(gconst79*px);
IkReal x2312=((0.045)*cj3);
IkReal x2313=((0.3)*cj3);
IkReal x2314=((1.0)*x2309);
IkReal x2315=(sj3*x2308);
IkReal x2316=(sj3*x2309);
IkReal x2317=((0.09)*x2309);
IkReal x2318=((1.1)*x2308);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2308*x2311))+((x2308*x2310))+(((-1.0)*x2313)));
evalcond[1]=((0.045)+(((-1.0)*x2311*x2314))+(((-1.0)*x2310*x2314))+(((0.3)*sj3))+(((-1.0)*x2312)));
evalcond[2]=((-0.2125)+((x2311*x2318))+((x2311*x2317))+(((-1.0)*pp))+((x2310*x2318))+((x2310*x2317)));
evalcond[3]=((((0.099746893695352)*x2308))+(((-0.92038656235619)*pp*x2309))+(((-0.138057984353428)*pp*x2308))+(((0.310561435803037)*x2315))+(((0.0254095720202485)*x2316))+(((-0.185020708697653)*x2309)));
evalcond[4]=((((-1.0)*x2311))+(((-1.0)*x2310))+(((-1.0)*x2309*x2312))+(((0.3)*x2316))+((x2308*x2313))+(((0.045)*x2315))+(((0.55)*x2308))+(((0.045)*x2309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2319 = IKatan2WithCheck((gconst95*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst95*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
j1array[0]=x2319.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2320=IKsin(j1);
IkReal x2321=IKcos(j1);
IkReal x2322=(gconst78*py);
IkReal x2323=(gconst79*px);
IkReal x2324=((0.045)*cj3);
IkReal x2325=((0.3)*cj3);
IkReal x2326=((1.0)*x2321);
IkReal x2327=(sj3*x2320);
IkReal x2328=(sj3*x2321);
IkReal x2329=((0.09)*x2321);
IkReal x2330=((1.1)*x2320);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2320*x2322))+((x2320*x2323))+(((-1.0)*x2325)));
evalcond[1]=((0.045)+(((-1.0)*x2322*x2326))+(((-1.0)*x2323*x2326))+(((0.3)*sj3))+(((-1.0)*x2324)));
evalcond[2]=((-0.2125)+((x2322*x2329))+((x2322*x2330))+(((-1.0)*pp))+((x2323*x2330))+((x2323*x2329)));
evalcond[3]=((((0.099746893695352)*x2320))+(((-0.185020708697653)*x2321))+(((0.310561435803037)*x2327))+(((-0.138057984353428)*pp*x2320))+(((-0.92038656235619)*pp*x2321))+(((0.0254095720202485)*x2328)));
evalcond[4]=((((-1.0)*x2321*x2324))+(((0.3)*x2328))+(((0.045)*x2321))+(((0.045)*x2327))+((x2320*x2325))+(((0.55)*x2320))+(((-1.0)*x2322))+(((-1.0)*x2323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst80;
CheckValue<IkReal> x2331 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x2331.valid){
continue;
}
gconst80=((3.14159265358979)+(((-1.0)*(x2331.value))));
IkReal gconst81;
gconst81=IKsin(gconst80);
IkReal gconst82;
gconst82=IKcos(gconst80);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst80))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst96;
gconst96=IKsign((((gconst82*px))+((gconst81*py))));
dummyeval[0]=(((gconst82*px))+((gconst81*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2332=(gconst82*px);
IkReal x2333=((36.2220411120167)*pp);
IkReal x2334=(gconst81*py);
dummyeval[0]=(x2332+x2334);
dummyeval[1]=((((-1.0)*x2332*x2333))+((sj3*x2332))+((sj3*x2334))+(((-1.0)*x2333*x2334))+(((-7.28153581454315)*x2332))+(((-7.28153581454315)*x2334)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2335=(gconst82*px);
IkReal x2336=(gconst81*py);
IkReal x2337=((1.3840830449827)*pp);
IkReal x2338=((3.11349480968858)*sj3);
IkReal x2339=((1.0)*x2335);
IkReal x2340=((1.0)*x2336);
IkReal x2341=(x2339+x2340);
dummyeval[0]=(((x2336*x2337))+((x2335*x2337))+(((-1.0)*x2335*x2338))+(((-1.0)*x2341))+(((-1.0)*x2336*x2338)));
dummyeval[1]=((-1.0)*x2341);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2343 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2343.valid){
continue;
}
IkReal x2342=x2343.value;
j1array[0]=((-1.0)*x2342);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2342)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2344=IKcos(j1);
evalcond[0]=((((0.1275)*x2344))+(((0.30675)*sj3*x2344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2345=(gconst82*px);
IkReal x2346=(gconst81*py);
IkReal x2347=((0.138057984353428)*pp);
IkReal x2348=((0.310561435803037)*sj3);
IkReal x2349=((0.0414173953060285)*pp);
CheckValue<IkReal> x2350=IKPowWithIntegerCheck(((((-1.0)*x2345*x2348))+((x2346*x2347))+(((-1.0)*x2346*x2348))+((x2345*x2347))+(((-0.099746893695352)*x2346))+(((-0.099746893695352)*x2345))),-1);
if(!x2350.valid){
continue;
}
CheckValue<IkReal> x2351=IKPowWithIntegerCheck(((((-1.0)*x2346))+(((-1.0)*x2345))),-1);
if(!x2351.valid){
continue;
}
if( IKabs(((x2350.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+((cj3*x2349))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x2349)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2351.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2350.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+((cj3*x2349))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x2349))))))+IKsqr(((x2351.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2350.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+((cj3*x2349))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x2349))))), ((x2351.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2352=IKsin(j1);
IkReal x2353=IKcos(j1);
IkReal x2354=((0.3)*cj3);
IkReal x2355=((0.045)*cj3);
IkReal x2356=(gconst82*px);
IkReal x2357=(gconst81*py);
IkReal x2358=(sj3*x2352);
IkReal x2359=(sj3*x2353);
IkReal x2360=((1.0)*x2353);
IkReal x2361=((1.1)*x2352);
IkReal x2362=((0.09)*x2353);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2352*x2357))+((x2352*x2356))+(((-1.0)*x2354)));
evalcond[1]=((0.045)+(((-1.0)*x2357*x2360))+(((-1.0)*x2356*x2360))+(((0.3)*sj3))+(((-1.0)*x2355)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x2357*x2362))+((x2357*x2361))+((x2356*x2362))+((x2356*x2361)));
evalcond[3]=((((-0.185020708697653)*x2353))+(((0.099746893695352)*x2352))+(((0.0254095720202485)*x2359))+(((-0.92038656235619)*pp*x2353))+(((0.310561435803037)*x2358))+(((-0.138057984353428)*pp*x2352)));
evalcond[4]=((((0.3)*x2359))+(((-1.0)*x2356))+(((-1.0)*x2357))+(((0.045)*x2358))+(((0.045)*x2353))+((x2352*x2354))+(((0.55)*x2352))+(((-1.0)*x2353*x2355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2363=(gconst82*px);
IkReal x2364=((0.0254095720202485)*sj3);
IkReal x2365=(gconst81*py);
IkReal x2366=((0.92038656235619)*pp);
CheckValue<IkReal> x2367=IKPowWithIntegerCheck((x2365+x2363),-1);
if(!x2367.valid){
continue;
}
CheckValue<IkReal> x2368=IKPowWithIntegerCheck((((x2364*x2365))+(((-1.0)*x2365*x2366))+((x2363*x2364))+(((-0.185020708697653)*x2365))+(((-0.185020708697653)*x2363))+(((-1.0)*x2363*x2366))),-1);
if(!x2368.valid){
continue;
}
if( IKabs(((x2367.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2368.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2367.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2368.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2367.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2368.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2369=IKsin(j1);
IkReal x2370=IKcos(j1);
IkReal x2371=((0.3)*cj3);
IkReal x2372=((0.045)*cj3);
IkReal x2373=(gconst82*px);
IkReal x2374=(gconst81*py);
IkReal x2375=(sj3*x2369);
IkReal x2376=(sj3*x2370);
IkReal x2377=((1.0)*x2370);
IkReal x2378=((1.1)*x2369);
IkReal x2379=((0.09)*x2370);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2371))+((x2369*x2374))+((x2369*x2373)));
evalcond[1]=((0.045)+(((-1.0)*x2372))+(((-1.0)*x2374*x2377))+(((-1.0)*x2373*x2377))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x2373*x2378))+((x2373*x2379))+(((-1.0)*pp))+((x2374*x2378))+((x2374*x2379)));
evalcond[3]=((((-0.92038656235619)*pp*x2370))+(((0.099746893695352)*x2369))+(((-0.138057984353428)*pp*x2369))+(((0.0254095720202485)*x2376))+(((-0.185020708697653)*x2370))+(((0.310561435803037)*x2375)));
evalcond[4]=((((0.55)*x2369))+(((0.045)*x2375))+(((0.045)*x2370))+(((-1.0)*x2374))+(((-1.0)*x2373))+(((0.3)*x2376))+(((-1.0)*x2370*x2372))+((x2369*x2371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2380 = IKatan2WithCheck((gconst96*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst96*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2380.valid){
continue;
}
j1array[0]=x2380.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2381=IKsin(j1);
IkReal x2382=IKcos(j1);
IkReal x2383=((0.3)*cj3);
IkReal x2384=((0.045)*cj3);
IkReal x2385=(gconst82*px);
IkReal x2386=(gconst81*py);
IkReal x2387=(sj3*x2381);
IkReal x2388=(sj3*x2382);
IkReal x2389=((1.0)*x2382);
IkReal x2390=((1.1)*x2381);
IkReal x2391=((0.09)*x2382);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2381*x2386))+((x2381*x2385))+(((-1.0)*x2383)));
evalcond[1]=((0.045)+(((-1.0)*x2386*x2389))+(((-1.0)*x2384))+(((0.3)*sj3))+(((-1.0)*x2385*x2389)));
evalcond[2]=((-0.2125)+((x2385*x2390))+((x2385*x2391))+(((-1.0)*pp))+((x2386*x2390))+((x2386*x2391)));
evalcond[3]=((((0.310561435803037)*x2387))+(((-0.138057984353428)*pp*x2381))+(((0.0254095720202485)*x2388))+(((-0.92038656235619)*pp*x2382))+(((-0.185020708697653)*x2382))+(((0.099746893695352)*x2381)));
evalcond[4]=(((x2381*x2383))+(((0.55)*x2381))+(((-1.0)*x2382*x2384))+(((-1.0)*x2386))+(((-1.0)*x2385))+(((0.3)*x2388))+(((0.045)*x2382))+(((0.045)*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst83;
CheckValue<IkReal> x2392 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2392.valid){
continue;
}
gconst83=((-1.0)*(x2392.value));
IkReal gconst84;
gconst84=IKsin(gconst83);
IkReal gconst85;
gconst85=IKcos(gconst83);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst83))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst97;
gconst97=IKsign((((gconst85*px))+((gconst84*py))));
dummyeval[0]=(((gconst85*px))+((gconst84*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2393=(gconst85*px);
IkReal x2394=(gconst84*py);
IkReal x2395=((36.2220411120167)*pp);
dummyeval[0]=(x2394+x2393);
dummyeval[1]=((((-7.28153581454315)*x2394))+(((-7.28153581454315)*x2393))+((sj3*x2394))+((sj3*x2393))+(((-1.0)*x2394*x2395))+(((-1.0)*x2393*x2395)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2396=(gconst84*py);
IkReal x2397=((1.3840830449827)*pp);
IkReal x2398=((3.11349480968858)*sj3);
IkReal x2399=(gconst85*px);
IkReal x2400=((1.0)*x2396);
IkReal x2401=((1.0)*x2399);
IkReal x2402=(x2400+x2401);
dummyeval[0]=((((-1.0)*x2396*x2398))+(((-1.0)*x2402))+(((-1.0)*x2398*x2399))+((x2396*x2397))+((x2397*x2399)));
dummyeval[1]=((-1.0)*x2402);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2404 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2404.valid){
continue;
}
IkReal x2403=x2404.value;
j1array[0]=((-1.0)*x2403);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2403)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2405=IKcos(j1);
evalcond[0]=((((0.1275)*x2405))+(((0.30675)*sj3*x2405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2406=(gconst85*px);
IkReal x2407=((0.138057984353428)*pp);
IkReal x2408=((0.310561435803037)*sj3);
IkReal x2409=((0.0414173953060285)*pp);
IkReal x2410=(gconst84*py);
CheckValue<IkReal> x2411=IKPowWithIntegerCheck(((((-0.099746893695352)*x2406))+(((-1.0)*x2408*x2410))+((x2407*x2410))+(((-1.0)*x2406*x2408))+(((-0.099746893695352)*x2410))+((x2406*x2407))),-1);
if(!x2411.valid){
continue;
}
CheckValue<IkReal> x2412=IKPowWithIntegerCheck(((((-1.0)*x2406))+(((-1.0)*x2410))),-1);
if(!x2412.valid){
continue;
}
if( IKabs(((x2411.value)*(((-0.00832593189139439)+(((-1.0)*x2409))+((cj3*x2409))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2412.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2411.value)*(((-0.00832593189139439)+(((-1.0)*x2409))+((cj3*x2409))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2412.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2411.value)*(((-0.00832593189139439)+(((-1.0)*x2409))+((cj3*x2409))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2412.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2413=IKsin(j1);
IkReal x2414=IKcos(j1);
IkReal x2415=((0.3)*cj3);
IkReal x2416=((0.045)*cj3);
IkReal x2417=(sj3*x2413);
IkReal x2418=(sj3*x2414);
IkReal x2419=((1.0)*gconst84*py);
IkReal x2420=(gconst85*px*x2414);
IkReal x2421=(gconst85*px*x2413);
IkReal x2422=(gconst84*py*x2413);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2421+x2422+(((-1.0)*x2415)));
evalcond[1]=((0.045)+(((-1.0)*x2414*x2419))+(((-1.0)*x2416))+(((-1.0)*x2420))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2422))+(((1.1)*x2421))+(((0.09)*x2420))+(((-1.0)*pp))+(((0.09)*gconst84*py*x2414)));
evalcond[3]=((((0.0254095720202485)*x2418))+(((0.310561435803037)*x2417))+(((-0.92038656235619)*pp*x2414))+(((0.099746893695352)*x2413))+(((-0.185020708697653)*x2414))+(((-0.138057984353428)*pp*x2413)));
evalcond[4]=((((-1.0)*gconst85*px))+((x2413*x2415))+(((-1.0)*x2414*x2416))+(((0.55)*x2413))+(((0.045)*x2417))+(((0.045)*x2414))+(((0.3)*x2418))+(((-1.0)*x2419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2423=(gconst84*py);
IkReal x2424=(gconst85*px);
IkReal x2425=((0.92038656235619)*pp);
IkReal x2426=((0.0254095720202485)*sj3);
CheckValue<IkReal> x2427=IKPowWithIntegerCheck((x2423+x2424),-1);
if(!x2427.valid){
continue;
}
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(((((-1.0)*x2423*x2425))+((x2423*x2426))+(((-1.0)*x2424*x2425))+(((-0.185020708697653)*x2423))+(((-0.185020708697653)*x2424))+((x2424*x2426))),-1);
if(!x2428.valid){
continue;
}
if( IKabs(((x2427.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2428.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2427.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2428.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2427.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2428.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2429=IKsin(j1);
IkReal x2430=IKcos(j1);
IkReal x2431=((0.3)*cj3);
IkReal x2432=((0.045)*cj3);
IkReal x2433=(sj3*x2429);
IkReal x2434=(sj3*x2430);
IkReal x2435=((1.0)*gconst84*py);
IkReal x2436=(gconst85*px*x2430);
IkReal x2437=(gconst85*px*x2429);
IkReal x2438=(gconst84*py*x2429);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2438+x2437+(((-1.0)*x2431)));
evalcond[1]=((0.045)+(((-1.0)*x2436))+(((-1.0)*x2432))+(((-1.0)*x2430*x2435))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*gconst84*py*x2430))+(((-1.0)*pp))+(((1.1)*x2438))+(((1.1)*x2437))+(((0.09)*x2436)));
evalcond[3]=((((0.0254095720202485)*x2434))+(((-0.92038656235619)*pp*x2430))+(((0.310561435803037)*x2433))+(((-0.138057984353428)*pp*x2429))+(((-0.185020708697653)*x2430))+(((0.099746893695352)*x2429)));
evalcond[4]=(((x2429*x2431))+(((-1.0)*gconst85*px))+(((0.3)*x2434))+(((-1.0)*x2435))+(((-1.0)*x2430*x2432))+(((0.55)*x2429))+(((0.045)*x2430))+(((0.045)*x2433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2439 = IKatan2WithCheck((gconst97*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst97*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
j1array[0]=x2439.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2440=IKsin(j1);
IkReal x2441=IKcos(j1);
IkReal x2442=((0.3)*cj3);
IkReal x2443=((0.045)*cj3);
IkReal x2444=(sj3*x2440);
IkReal x2445=(sj3*x2441);
IkReal x2446=((1.0)*gconst84*py);
IkReal x2447=(gconst85*px*x2441);
IkReal x2448=(gconst85*px*x2440);
IkReal x2449=(gconst84*py*x2440);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2448+x2449+(((-1.0)*x2442)));
evalcond[1]=((0.045)+(((-1.0)*x2447))+(((-1.0)*x2441*x2446))+(((0.3)*sj3))+(((-1.0)*x2443)));
evalcond[2]=((-0.2125)+(((0.09)*x2447))+(((1.1)*x2448))+(((1.1)*x2449))+(((0.09)*gconst84*py*x2441))+(((-1.0)*pp)));
evalcond[3]=((((0.0254095720202485)*x2445))+(((-0.185020708697653)*x2441))+(((-0.138057984353428)*pp*x2440))+(((0.310561435803037)*x2444))+(((0.099746893695352)*x2440))+(((-0.92038656235619)*pp*x2441)));
evalcond[4]=((((-1.0)*gconst85*px))+(((0.045)*x2441))+(((0.045)*x2444))+((x2440*x2442))+(((0.55)*x2440))+(((-1.0)*x2441*x2443))+(((-1.0)*x2446))+(((0.3)*x2445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst86;
CheckValue<IkReal> x2450 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2450.valid){
continue;
}
gconst86=((3.14159265358979)+(((-1.0)*(x2450.value))));
IkReal gconst87;
gconst87=IKsin(gconst86);
IkReal gconst88;
gconst88=IKcos(gconst86);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst86))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst98;
gconst98=IKsign((((gconst87*py))+((gconst88*px))));
dummyeval[0]=(((gconst87*py))+((gconst88*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2451=(gconst88*px);
IkReal x2452=(gconst87*py);
IkReal x2453=((36.2220411120167)*pp);
dummyeval[0]=(x2451+x2452);
dummyeval[1]=(((sj3*x2452))+((sj3*x2451))+(((-1.0)*x2452*x2453))+(((-7.28153581454315)*x2451))+(((-7.28153581454315)*x2452))+(((-1.0)*x2451*x2453)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2454=(gconst88*px);
IkReal x2455=((3.11349480968858)*sj3);
IkReal x2456=((1.3840830449827)*pp);
IkReal x2457=(gconst87*py);
IkReal x2458=((1.0)*x2457);
IkReal x2459=((1.0)*x2454);
IkReal x2460=(x2459+x2458);
dummyeval[0]=((((-1.0)*x2454*x2455))+((x2454*x2456))+((x2456*x2457))+(((-1.0)*x2460))+(((-1.0)*x2455*x2457)));
dummyeval[1]=((-1.0)*x2460);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2462 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2462.valid){
continue;
}
IkReal x2461=x2462.value;
j1array[0]=((-1.0)*x2461);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2461)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2463=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2463))+(((0.1275)*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2464=(gconst88*px);
IkReal x2465=((0.0414173953060285)*pp);
IkReal x2466=(gconst87*py);
IkReal x2467=((0.138057984353428)*pp);
IkReal x2468=((0.310561435803037)*sj3);
CheckValue<IkReal> x2469=IKPowWithIntegerCheck(((((-1.0)*x2464*x2468))+(((-1.0)*x2466*x2468))+((x2464*x2467))+((x2466*x2467))+(((-0.099746893695352)*x2466))+(((-0.099746893695352)*x2464))),-1);
if(!x2469.valid){
continue;
}
CheckValue<IkReal> x2470=IKPowWithIntegerCheck(((((-1.0)*x2464))+(((-1.0)*x2466))),-1);
if(!x2470.valid){
continue;
}
if( IKabs(((x2469.value)*(((-0.00832593189139439)+((cj3*x2465))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2465))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2470.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2469.value)*(((-0.00832593189139439)+((cj3*x2465))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2465))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2470.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2469.value)*(((-0.00832593189139439)+((cj3*x2465))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2465))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2470.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2471=IKsin(j1);
IkReal x2472=IKcos(j1);
IkReal x2473=(gconst87*py);
IkReal x2474=(gconst88*px);
IkReal x2475=((0.045)*sj3);
IkReal x2476=((0.3)*cj3);
IkReal x2477=((0.045)*cj3);
IkReal x2478=((0.09)*x2472);
IkReal x2479=(sj3*x2472);
IkReal x2480=((1.0)*x2472);
IkReal x2481=((1.1)*x2471);
evalcond[0]=((-0.55)+((x2471*x2474))+((x2471*x2473))+(((-1.0)*x2475))+(((-1.0)*x2476)));
evalcond[1]=((0.045)+(((-1.0)*x2477))+(((-1.0)*x2473*x2480))+(((-1.0)*x2474*x2480))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x2474*x2481))+((x2473*x2481))+(((-1.0)*pp))+((x2473*x2478))+((x2474*x2478)));
evalcond[3]=((((0.310561435803037)*sj3*x2471))+(((-0.92038656235619)*pp*x2472))+(((-0.185020708697653)*x2472))+(((0.0254095720202485)*x2479))+(((-0.138057984353428)*pp*x2471))+(((0.099746893695352)*x2471)));
evalcond[4]=(((x2471*x2475))+((x2471*x2476))+(((-1.0)*x2474))+(((-1.0)*x2473))+(((-1.0)*x2472*x2477))+(((0.3)*x2479))+(((0.55)*x2471))+(((0.045)*x2472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2482=(gconst87*py);
IkReal x2483=((0.0254095720202485)*sj3);
IkReal x2484=((0.92038656235619)*pp);
IkReal x2485=(gconst88*px);
CheckValue<IkReal> x2486=IKPowWithIntegerCheck((x2485+x2482),-1);
if(!x2486.valid){
continue;
}
CheckValue<IkReal> x2487=IKPowWithIntegerCheck((((x2482*x2483))+((x2483*x2485))+(((-1.0)*x2482*x2484))+(((-0.185020708697653)*x2485))+(((-0.185020708697653)*x2482))+(((-1.0)*x2484*x2485))),-1);
if(!x2487.valid){
continue;
}
if( IKabs(((x2486.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2487.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2486.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2487.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2486.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2487.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2488=IKsin(j1);
IkReal x2489=IKcos(j1);
IkReal x2490=(gconst87*py);
IkReal x2491=(gconst88*px);
IkReal x2492=((0.045)*sj3);
IkReal x2493=((0.3)*cj3);
IkReal x2494=((0.045)*cj3);
IkReal x2495=((0.09)*x2489);
IkReal x2496=(sj3*x2489);
IkReal x2497=((1.0)*x2489);
IkReal x2498=((1.1)*x2488);
evalcond[0]=((-0.55)+((x2488*x2491))+((x2488*x2490))+(((-1.0)*x2492))+(((-1.0)*x2493)));
evalcond[1]=((0.045)+(((-1.0)*x2490*x2497))+(((-1.0)*x2494))+(((-1.0)*x2491*x2497))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x2490*x2498))+((x2490*x2495))+(((-1.0)*pp))+((x2491*x2498))+((x2491*x2495)));
evalcond[3]=((((0.0254095720202485)*x2496))+(((-0.185020708697653)*x2489))+(((0.310561435803037)*sj3*x2488))+(((0.099746893695352)*x2488))+(((-0.92038656235619)*pp*x2489))+(((-0.138057984353428)*pp*x2488)));
evalcond[4]=((((0.55)*x2488))+((x2488*x2492))+((x2488*x2493))+(((0.045)*x2489))+(((-1.0)*x2490))+(((-1.0)*x2491))+(((0.3)*x2496))+(((-1.0)*x2489*x2494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2499 = IKatan2WithCheck((gconst98*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst98*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2499.valid){
continue;
}
j1array[0]=x2499.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2500=IKsin(j1);
IkReal x2501=IKcos(j1);
IkReal x2502=(gconst87*py);
IkReal x2503=(gconst88*px);
IkReal x2504=((0.045)*sj3);
IkReal x2505=((0.3)*cj3);
IkReal x2506=((0.045)*cj3);
IkReal x2507=((0.09)*x2501);
IkReal x2508=(sj3*x2501);
IkReal x2509=((1.0)*x2501);
IkReal x2510=((1.1)*x2500);
evalcond[0]=((-0.55)+(((-1.0)*x2505))+(((-1.0)*x2504))+((x2500*x2503))+((x2500*x2502)));
evalcond[1]=((0.045)+(((-1.0)*x2506))+(((-1.0)*x2503*x2509))+(((-1.0)*x2502*x2509))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x2502*x2510))+((x2503*x2510))+((x2503*x2507))+((x2502*x2507)));
evalcond[3]=((((0.099746893695352)*x2500))+(((-0.92038656235619)*pp*x2501))+(((0.0254095720202485)*x2508))+(((0.310561435803037)*sj3*x2500))+(((-0.185020708697653)*x2501))+(((-0.138057984353428)*pp*x2500)));
evalcond[4]=(((x2500*x2505))+((x2500*x2504))+(((0.045)*x2501))+(((-1.0)*x2501*x2506))+(((-1.0)*x2503))+(((-1.0)*x2502))+(((0.55)*x2500))+(((0.3)*x2508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst89;
CheckValue<IkReal> x2511 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
gconst89=((-1.0)*(x2511.value));
IkReal gconst90;
gconst90=IKsin(gconst89);
IkReal gconst91;
gconst91=IKcos(gconst89);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst89))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst99;
gconst99=IKsign((((gconst91*px))+((gconst90*py))));
dummyeval[0]=(((gconst91*px))+((gconst90*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2512=(gconst90*py);
IkReal x2513=(gconst91*px);
IkReal x2514=((36.2220411120167)*pp);
dummyeval[0]=(x2512+x2513);
dummyeval[1]=((((-1.0)*x2513*x2514))+(((-7.28153581454315)*x2513))+(((-7.28153581454315)*x2512))+(((-1.0)*x2512*x2514))+((sj3*x2513))+((sj3*x2512)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2515=(gconst91*px);
IkReal x2516=((1.3840830449827)*pp);
IkReal x2517=(gconst90*py);
IkReal x2518=((3.11349480968858)*sj3);
IkReal x2519=((1.0)*x2515);
IkReal x2520=((1.0)*x2517);
IkReal x2521=(x2520+x2519);
dummyeval[0]=((((-1.0)*x2517*x2518))+(((-1.0)*x2515*x2518))+((x2515*x2516))+(((-1.0)*x2521))+((x2516*x2517)));
dummyeval[1]=((-1.0)*x2521);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2523 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
IkReal x2522=x2523.value;
j1array[0]=((-1.0)*x2522);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2522)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2524=IKcos(j1);
evalcond[0]=((((0.1275)*x2524))+(((0.30675)*sj3*x2524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2525=(gconst91*px);
IkReal x2526=((0.138057984353428)*pp);
IkReal x2527=(gconst90*py);
IkReal x2528=((0.310561435803037)*sj3);
IkReal x2529=((0.0414173953060285)*pp);
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(((((-1.0)*x2527*x2528))+(((-0.099746893695352)*x2527))+(((-0.099746893695352)*x2525))+((x2526*x2527))+(((-1.0)*x2525*x2528))+((x2525*x2526))),-1);
if(!x2530.valid){
continue;
}
CheckValue<IkReal> x2531=IKPowWithIntegerCheck(((((-1.0)*x2525))+(((-1.0)*x2527))),-1);
if(!x2531.valid){
continue;
}
if( IKabs(((x2530.value)*(((-0.00832593189139439)+((cj3*x2529))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x2529)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2531.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2530.value)*(((-0.00832593189139439)+((cj3*x2529))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x2529))))))+IKsqr(((x2531.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2530.value)*(((-0.00832593189139439)+((cj3*x2529))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x2529))))), ((x2531.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2532=IKsin(j1);
IkReal x2533=IKcos(j1);
IkReal x2534=(gconst91*px);
IkReal x2535=((0.3)*cj3);
IkReal x2536=((0.045)*cj3);
IkReal x2537=(gconst90*py);
IkReal x2538=((0.045)*sj3);
IkReal x2539=((0.09)*x2533);
IkReal x2540=(sj3*x2533);
IkReal x2541=((1.1)*x2532);
IkReal x2542=((1.0)*x2533);
evalcond[0]=((-0.55)+(((-1.0)*x2535))+(((-1.0)*x2538))+((x2532*x2537))+((x2532*x2534)));
evalcond[1]=((0.045)+(((-1.0)*x2536))+(((0.3)*sj3))+(((-1.0)*x2537*x2542))+(((-1.0)*x2534*x2542)));
evalcond[2]=((-0.2125)+((x2537*x2541))+((x2534*x2541))+(((-1.0)*pp))+((x2534*x2539))+((x2537*x2539)));
evalcond[3]=((((0.099746893695352)*x2532))+(((-0.185020708697653)*x2533))+(((-0.92038656235619)*pp*x2533))+(((0.0254095720202485)*x2540))+(((-0.138057984353428)*pp*x2532))+(((0.310561435803037)*sj3*x2532)));
evalcond[4]=((((0.55)*x2532))+(((-1.0)*x2533*x2536))+(((0.045)*x2533))+(((0.3)*x2540))+((x2532*x2535))+((x2532*x2538))+(((-1.0)*x2537))+(((-1.0)*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2543=(gconst91*px);
IkReal x2544=(gconst90*py);
IkReal x2545=((0.0254095720202485)*sj3);
IkReal x2546=((0.92038656235619)*pp);
CheckValue<IkReal> x2547=IKPowWithIntegerCheck((x2543+x2544),-1);
if(!x2547.valid){
continue;
}
CheckValue<IkReal> x2548=IKPowWithIntegerCheck(((((-1.0)*x2543*x2546))+((x2543*x2545))+(((-1.0)*x2544*x2546))+(((-0.185020708697653)*x2544))+(((-0.185020708697653)*x2543))+((x2544*x2545))),-1);
if(!x2548.valid){
continue;
}
if( IKabs(((x2547.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2548.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2547.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2548.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2547.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2548.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2549=IKsin(j1);
IkReal x2550=IKcos(j1);
IkReal x2551=(gconst91*px);
IkReal x2552=((0.3)*cj3);
IkReal x2553=((0.045)*cj3);
IkReal x2554=(gconst90*py);
IkReal x2555=((0.045)*sj3);
IkReal x2556=((0.09)*x2550);
IkReal x2557=(sj3*x2550);
IkReal x2558=((1.1)*x2549);
IkReal x2559=((1.0)*x2550);
evalcond[0]=((-0.55)+((x2549*x2551))+((x2549*x2554))+(((-1.0)*x2555))+(((-1.0)*x2552)));
evalcond[1]=((0.045)+(((-1.0)*x2554*x2559))+(((0.3)*sj3))+(((-1.0)*x2551*x2559))+(((-1.0)*x2553)));
evalcond[2]=((-0.2125)+((x2551*x2558))+((x2551*x2556))+(((-1.0)*pp))+((x2554*x2558))+((x2554*x2556)));
evalcond[3]=((((-0.92038656235619)*pp*x2550))+(((0.0254095720202485)*x2557))+(((0.310561435803037)*sj3*x2549))+(((-0.138057984353428)*pp*x2549))+(((0.099746893695352)*x2549))+(((-0.185020708697653)*x2550)));
evalcond[4]=((((-1.0)*x2551))+(((-1.0)*x2554))+((x2549*x2555))+((x2549*x2552))+(((-1.0)*x2550*x2553))+(((0.55)*x2549))+(((0.3)*x2557))+(((0.045)*x2550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2560 = IKatan2WithCheck((gconst99*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst99*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2560.valid){
continue;
}
j1array[0]=x2560.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2561=IKsin(j1);
IkReal x2562=IKcos(j1);
IkReal x2563=(gconst91*px);
IkReal x2564=((0.3)*cj3);
IkReal x2565=((0.045)*cj3);
IkReal x2566=(gconst90*py);
IkReal x2567=((0.045)*sj3);
IkReal x2568=((0.09)*x2562);
IkReal x2569=(sj3*x2562);
IkReal x2570=((1.1)*x2561);
IkReal x2571=((1.0)*x2562);
evalcond[0]=((-0.55)+(((-1.0)*x2567))+(((-1.0)*x2564))+((x2561*x2563))+((x2561*x2566)));
evalcond[1]=((0.045)+(((-1.0)*x2566*x2571))+(((-1.0)*x2563*x2571))+(((-1.0)*x2565))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x2563*x2568))+((x2566*x2568))+((x2566*x2570))+((x2563*x2570)));
evalcond[3]=((((-0.185020708697653)*x2562))+(((0.099746893695352)*x2561))+(((-0.138057984353428)*pp*x2561))+(((-0.92038656235619)*pp*x2562))+(((0.310561435803037)*sj3*x2561))+(((0.0254095720202485)*x2569)));
evalcond[4]=((((-1.0)*x2562*x2565))+(((0.55)*x2561))+(((-1.0)*x2566))+(((-1.0)*x2563))+(((0.3)*x2569))+(((0.045)*x2562))+((x2561*x2564))+((x2561*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst92;
CheckValue<IkReal> x2572 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2572.valid){
continue;
}
gconst92=((3.14159265358979)+(((-1.0)*(x2572.value))));
IkReal gconst93;
gconst93=IKsin(gconst92);
IkReal gconst94;
gconst94=IKcos(gconst92);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst92))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst100;
gconst100=IKsign((((gconst94*px))+((gconst93*py))));
dummyeval[0]=(((gconst94*px))+((gconst93*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2573=(gconst93*py);
IkReal x2574=((36.2220411120167)*pp);
IkReal x2575=(gconst94*px);
dummyeval[0]=(x2575+x2573);
dummyeval[1]=(((sj3*x2575))+((sj3*x2573))+(((-1.0)*x2573*x2574))+(((-7.28153581454315)*x2575))+(((-7.28153581454315)*x2573))+(((-1.0)*x2574*x2575)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2576=(gconst93*py);
IkReal x2577=((3.11349480968858)*sj3);
IkReal x2578=((1.3840830449827)*pp);
IkReal x2579=(gconst94*px);
IkReal x2580=((1.0)*x2576);
IkReal x2581=((1.0)*x2579);
IkReal x2582=(x2581+x2580);
dummyeval[0]=((((-1.0)*x2582))+((x2578*x2579))+((x2576*x2578))+(((-1.0)*x2577*x2579))+(((-1.0)*x2576*x2577)));
dummyeval[1]=((-1.0)*x2582);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2584 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2584.valid){
continue;
}
IkReal x2583=x2584.value;
j1array[0]=((-1.0)*x2583);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2583)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2585=IKcos(j1);
evalcond[0]=((((0.1275)*x2585))+(((0.30675)*sj3*x2585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2586=((0.0414173953060285)*pp);
IkReal x2587=(gconst94*px);
IkReal x2588=((0.310561435803037)*sj3);
IkReal x2589=(gconst93*py);
IkReal x2590=((0.138057984353428)*pp);
CheckValue<IkReal> x2591=IKPowWithIntegerCheck(((((-0.099746893695352)*x2589))+(((-0.099746893695352)*x2587))+(((-1.0)*x2588*x2589))+(((-1.0)*x2587*x2588))+((x2589*x2590))+((x2587*x2590))),-1);
if(!x2591.valid){
continue;
}
CheckValue<IkReal> x2592=IKPowWithIntegerCheck(((((-1.0)*x2589))+(((-1.0)*x2587))),-1);
if(!x2592.valid){
continue;
}
if( IKabs(((x2591.value)*(((-0.00832593189139439)+((cj3*x2586))+(((-1.0)*x2586))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2592.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2591.value)*(((-0.00832593189139439)+((cj3*x2586))+(((-1.0)*x2586))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2592.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2591.value)*(((-0.00832593189139439)+((cj3*x2586))+(((-1.0)*x2586))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2592.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2593=IKsin(j1);
IkReal x2594=IKcos(j1);
IkReal x2595=(gconst94*px);
IkReal x2596=((0.3)*cj3);
IkReal x2597=((0.045)*cj3);
IkReal x2598=((0.045)*sj3);
IkReal x2599=(gconst93*py);
IkReal x2600=((1.0)*x2594);
IkReal x2601=((0.09)*x2594);
IkReal x2602=(sj3*x2594);
IkReal x2603=(x2593*x2599);
evalcond[0]=((-0.55)+(((-1.0)*x2598))+(((-1.0)*x2596))+((x2593*x2595))+x2603);
evalcond[1]=((0.045)+(((-1.0)*x2595*x2600))+(((-1.0)*x2597))+(((0.3)*sj3))+(((-1.0)*x2599*x2600)));
evalcond[2]=((-0.2125)+(((1.1)*x2603))+((x2595*x2601))+(((1.1)*x2593*x2595))+(((-1.0)*pp))+((x2599*x2601)));
evalcond[3]=((((0.0254095720202485)*x2602))+(((-0.185020708697653)*x2594))+(((0.099746893695352)*x2593))+(((-0.138057984353428)*pp*x2593))+(((-0.92038656235619)*pp*x2594))+(((0.310561435803037)*sj3*x2593)));
evalcond[4]=((((-1.0)*x2594*x2597))+(((0.55)*x2593))+(((-1.0)*x2595))+(((-1.0)*x2599))+(((0.3)*x2602))+((x2593*x2598))+((x2593*x2596))+(((0.045)*x2594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2604=(gconst93*py);
IkReal x2605=((0.0254095720202485)*sj3);
IkReal x2606=(gconst94*px);
IkReal x2607=((0.92038656235619)*pp);
CheckValue<IkReal> x2608=IKPowWithIntegerCheck((x2604+x2606),-1);
if(!x2608.valid){
continue;
}
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(((((-0.185020708697653)*x2604))+(((-0.185020708697653)*x2606))+((x2605*x2606))+((x2604*x2605))+(((-1.0)*x2606*x2607))+(((-1.0)*x2604*x2607))),-1);
if(!x2609.valid){
continue;
}
if( IKabs(((x2608.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2609.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2608.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2609.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2608.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2609.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2610=IKsin(j1);
IkReal x2611=IKcos(j1);
IkReal x2612=(gconst94*px);
IkReal x2613=((0.3)*cj3);
IkReal x2614=((0.045)*cj3);
IkReal x2615=((0.045)*sj3);
IkReal x2616=(gconst93*py);
IkReal x2617=((1.0)*x2611);
IkReal x2618=((0.09)*x2611);
IkReal x2619=(sj3*x2611);
IkReal x2620=(x2610*x2616);
evalcond[0]=((-0.55)+((x2610*x2612))+(((-1.0)*x2613))+(((-1.0)*x2615))+x2620);
evalcond[1]=((0.045)+(((-1.0)*x2612*x2617))+(((0.3)*sj3))+(((-1.0)*x2616*x2617))+(((-1.0)*x2614)));
evalcond[2]=((-0.2125)+(((1.1)*x2620))+(((1.1)*x2610*x2612))+(((-1.0)*pp))+((x2616*x2618))+((x2612*x2618)));
evalcond[3]=((((-0.138057984353428)*pp*x2610))+(((0.310561435803037)*sj3*x2610))+(((-0.185020708697653)*x2611))+(((0.0254095720202485)*x2619))+(((-0.92038656235619)*pp*x2611))+(((0.099746893695352)*x2610)));
evalcond[4]=((((0.3)*x2619))+(((-1.0)*x2611*x2614))+((x2610*x2615))+((x2610*x2613))+(((-1.0)*x2612))+(((-1.0)*x2616))+(((0.55)*x2610))+(((0.045)*x2611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2621 = IKatan2WithCheck((gconst100*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst100*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2621.valid){
continue;
}
j1array[0]=x2621.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2622=IKsin(j1);
IkReal x2623=IKcos(j1);
IkReal x2624=(gconst94*px);
IkReal x2625=((0.3)*cj3);
IkReal x2626=((0.045)*cj3);
IkReal x2627=((0.045)*sj3);
IkReal x2628=(gconst93*py);
IkReal x2629=((1.0)*x2623);
IkReal x2630=((0.09)*x2623);
IkReal x2631=(sj3*x2623);
IkReal x2632=(x2622*x2628);
evalcond[0]=((-0.55)+((x2622*x2624))+(((-1.0)*x2625))+(((-1.0)*x2627))+x2632);
evalcond[1]=((0.045)+(((-1.0)*x2624*x2629))+(((-1.0)*x2628*x2629))+(((0.3)*sj3))+(((-1.0)*x2626)));
evalcond[2]=((-0.2125)+((x2624*x2630))+(((-1.0)*pp))+((x2628*x2630))+(((1.1)*x2622*x2624))+(((1.1)*x2632)));
evalcond[3]=((((-0.138057984353428)*pp*x2622))+(((0.310561435803037)*sj3*x2622))+(((-0.185020708697653)*x2623))+(((-0.92038656235619)*pp*x2623))+(((0.099746893695352)*x2622))+(((0.0254095720202485)*x2631)));
evalcond[4]=((((-1.0)*x2623*x2626))+(((-1.0)*x2628))+(((-1.0)*x2624))+(((0.3)*x2631))+(((0.55)*x2622))+((x2622*x2625))+((x2622*x2627))+(((0.045)*x2623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2634 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
IkReal x2633=x2634.value;
j1array[0]=((-1.0)*x2633);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2633)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2635=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2635))+(((0.1275)*x2635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2637 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2637.valid){
continue;
}
IkReal x2636=x2637.value;
j1array[0]=((-1.0)*x2636);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2636)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2638=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x2638))+(((0.1275)*x2638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2640 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2640.valid){
continue;
}
IkReal x2639=x2640.value;
j1array[0]=((-1.0)*x2639);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2639)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2641=IKcos(j1);
evalcond[0]=((((0.1275)*x2641))+(((0.30675)*sj3*x2641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2643 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2643.valid){
continue;
}
IkReal x2642=x2643.value;
j1array[0]=((-1.0)*x2642);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2642)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2644=IKcos(j1);
evalcond[0]=((((0.1275)*x2644))+(((0.30675)*sj3*x2644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2646 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
IkReal x2645=x2646.value;
j1array[0]=((-1.0)*x2645);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2645)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2647=IKcos(j1);
evalcond[0]=((((0.1275)*x2647))+(((0.30675)*sj3*x2647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2648=(py*sj0);
IkReal x2649=((0.310561435803037)*sj3);
IkReal x2650=((0.0414173953060285)*pp);
IkReal x2651=(cj0*px);
IkReal x2652=((0.138057984353428)*pp);
CheckValue<IkReal> x2653=IKPowWithIntegerCheck((((x2648*x2652))+(((-1.0)*x2648*x2649))+(((-1.0)*x2649*x2651))+((x2651*x2652))+(((-0.099746893695352)*x2648))+(((-0.099746893695352)*x2651))),-1);
if(!x2653.valid){
continue;
}
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(((((-1.0)*x2648))+(((-1.0)*x2651))),-1);
if(!x2654.valid){
continue;
}
if( IKabs(((x2653.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2650))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2650)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2654.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2653.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2650))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2650))))))+IKsqr(((x2654.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2653.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2650))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2650))))), ((x2654.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2655=IKsin(j1);
IkReal x2656=IKcos(j1);
IkReal x2657=((0.045)*sj3);
IkReal x2658=((0.3)*cj3);
IkReal x2659=((0.045)*cj3);
IkReal x2660=(cj0*px);
IkReal x2661=(py*sj0);
IkReal x2662=((1.0)*x2656);
IkReal x2663=(sj3*x2656);
IkReal x2664=((0.09)*x2656);
IkReal x2665=((1.1)*x2655);
evalcond[0]=((-0.55)+((x2655*x2660))+((x2655*x2661))+(((-1.0)*x2658))+(((-1.0)*x2657)));
evalcond[1]=((0.045)+(((-1.0)*x2660*x2662))+(((0.3)*sj3))+(((-1.0)*x2659))+(((-1.0)*x2661*x2662)));
evalcond[2]=((-0.2125)+((x2661*x2665))+((x2661*x2664))+(((-1.0)*pp))+((x2660*x2665))+((x2660*x2664)));
evalcond[3]=((((0.099746893695352)*x2655))+(((0.310561435803037)*sj3*x2655))+(((-0.92038656235619)*pp*x2656))+(((-0.138057984353428)*pp*x2655))+(((0.0254095720202485)*x2663))+(((-0.185020708697653)*x2656)));
evalcond[4]=((((-1.0)*x2660))+(((-1.0)*x2661))+(((0.55)*x2655))+((x2655*x2658))+((x2655*x2657))+(((-1.0)*x2656*x2659))+(((0.045)*x2656))+(((0.3)*x2663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2666=(cj0*px);
IkReal x2667=(py*sj0);
IkReal x2668=((0.0254095720202485)*sj3);
IkReal x2669=((0.92038656235619)*pp);
CheckValue<IkReal> x2670=IKPowWithIntegerCheck((x2666+x2667),-1);
if(!x2670.valid){
continue;
}
CheckValue<IkReal> x2671=IKPowWithIntegerCheck((((x2666*x2668))+((x2667*x2668))+(((-0.185020708697653)*x2666))+(((-0.185020708697653)*x2667))+(((-1.0)*x2666*x2669))+(((-1.0)*x2667*x2669))),-1);
if(!x2671.valid){
continue;
}
if( IKabs(((x2670.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2671.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2670.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2671.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2670.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2671.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2672=IKsin(j1);
IkReal x2673=IKcos(j1);
IkReal x2674=((0.045)*sj3);
IkReal x2675=((0.3)*cj3);
IkReal x2676=((0.045)*cj3);
IkReal x2677=(cj0*px);
IkReal x2678=(py*sj0);
IkReal x2679=((1.0)*x2673);
IkReal x2680=(sj3*x2673);
IkReal x2681=((0.09)*x2673);
IkReal x2682=((1.1)*x2672);
evalcond[0]=((-0.55)+((x2672*x2677))+((x2672*x2678))+(((-1.0)*x2675))+(((-1.0)*x2674)));
evalcond[1]=((0.045)+(((-1.0)*x2678*x2679))+(((-1.0)*x2677*x2679))+(((-1.0)*x2676))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x2678*x2682))+((x2678*x2681))+((x2677*x2682))+((x2677*x2681)));
evalcond[3]=((((-0.92038656235619)*pp*x2673))+(((0.099746893695352)*x2672))+(((-0.138057984353428)*pp*x2672))+(((0.0254095720202485)*x2680))+(((0.310561435803037)*sj3*x2672))+(((-0.185020708697653)*x2673)));
evalcond[4]=((((-1.0)*x2678))+(((-1.0)*x2677))+((x2672*x2674))+((x2672*x2675))+(((0.55)*x2672))+(((-1.0)*x2673*x2676))+(((0.3)*x2680))+(((0.045)*x2673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2683 = IKatan2WithCheck((gconst76*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst76*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2683.valid){
continue;
}
j1array[0]=x2683.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2684=IKsin(j1);
IkReal x2685=IKcos(j1);
IkReal x2686=((0.045)*sj3);
IkReal x2687=((0.3)*cj3);
IkReal x2688=((0.045)*cj3);
IkReal x2689=(cj0*px);
IkReal x2690=(py*sj0);
IkReal x2691=((1.0)*x2685);
IkReal x2692=(sj3*x2685);
IkReal x2693=((0.09)*x2685);
IkReal x2694=((1.1)*x2684);
evalcond[0]=((-0.55)+((x2684*x2690))+((x2684*x2689))+(((-1.0)*x2687))+(((-1.0)*x2686)));
evalcond[1]=((0.045)+(((-1.0)*x2689*x2691))+(((-1.0)*x2688))+(((0.3)*sj3))+(((-1.0)*x2690*x2691)));
evalcond[2]=((-0.2125)+((x2689*x2693))+((x2689*x2694))+(((-1.0)*pp))+((x2690*x2693))+((x2690*x2694)));
evalcond[3]=((((0.099746893695352)*x2684))+(((0.310561435803037)*sj3*x2684))+(((-0.92038656235619)*pp*x2685))+(((-0.185020708697653)*x2685))+(((0.0254095720202485)*x2692))+(((-0.138057984353428)*pp*x2684)));
evalcond[4]=((((-1.0)*x2685*x2688))+((x2684*x2686))+((x2684*x2687))+(((0.045)*x2685))+(((-1.0)*x2689))+(((0.3)*x2692))+(((-1.0)*x2690))+(((0.55)*x2684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2695=(px*sj0);
IkReal x2696=(cj0*py);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x2696))+x2695);
evalcond[3]=((((-1.0)*x2695))+x2696);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst101;
gconst101=IKsign((((cj0*px))+((py*sj0))));
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2697=(cj0*px);
IkReal x2698=(py*sj0);
IkReal x2699=((36.2220411120167)*pp);
dummyeval[0]=(x2698+x2697);
dummyeval[1]=((((-7.28153581454315)*x2697))+(((-7.28153581454315)*x2698))+(((-1.0)*x2697*x2699))+(((-1.0)*x2698*x2699))+((sj3*x2697))+((sj3*x2698)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2700=(cj0*px);
IkReal x2701=((1.3840830449827)*pp);
IkReal x2702=((3.11349480968858)*sj3);
IkReal x2703=(py*sj0);
dummyeval[0]=((((-1.0)*x2702*x2703))+((x2700*x2701))+((x2701*x2703))+(((-1.0)*x2700*x2702))+(((-1.0)*x2700))+(((-1.0)*x2703)));
dummyeval[1]=(x2700+x2703);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst102;
CheckValue<IkReal> x2704 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
gconst102=((-1.0)*(x2704.value));
IkReal gconst103;
gconst103=IKsin(gconst102);
IkReal gconst104;
gconst104=IKcos(gconst102);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst102))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst120;
gconst120=IKsign((((gconst104*px))+((gconst103*py))));
dummyeval[0]=(((gconst104*px))+((gconst103*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2705=((36.2220411120167)*pp);
IkReal x2706=(gconst103*py);
IkReal x2707=(gconst104*px);
dummyeval[0]=(x2707+x2706);
dummyeval[1]=((((-1.0)*x2705*x2707))+(((-1.0)*x2705*x2706))+(((-7.28153581454315)*x2706))+(((-7.28153581454315)*x2707))+((sj3*x2706))+((sj3*x2707)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2708=(gconst103*py);
IkReal x2709=((3.11349480968858)*sj3);
IkReal x2710=(gconst104*px);
IkReal x2711=((1.3840830449827)*pp);
dummyeval[0]=((((-1.0)*x2710))+(((-1.0)*x2708*x2709))+((x2708*x2711))+((x2710*x2711))+(((-1.0)*x2709*x2710))+(((-1.0)*x2708)));
dummyeval[1]=(x2710+x2708);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2713 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2713.valid){
continue;
}
IkReal x2712=x2713.value;
j1array[0]=((-1.0)*x2712);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2712)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2714=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x2714))+(((-0.1275)*x2714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2715=(gconst104*px);
IkReal x2716=((0.310561435803037)*sj3);
IkReal x2717=(gconst103*py);
IkReal x2718=((0.138057984353428)*pp);
IkReal x2719=((0.0414173953060285)*pp);
CheckValue<IkReal> x2720=IKPowWithIntegerCheck(((((-1.0)*x2715*x2716))+((x2715*x2718))+(((-1.0)*x2716*x2717))+(((-0.099746893695352)*x2715))+(((-0.099746893695352)*x2717))+((x2717*x2718))),-1);
if(!x2720.valid){
continue;
}
CheckValue<IkReal> x2721=IKPowWithIntegerCheck((x2717+x2715),-1);
if(!x2721.valid){
continue;
}
if( IKabs(((x2720.value)*(((-0.00832593189139439)+(((-1.0)*x2719))+((cj3*x2719))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2721.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2720.value)*(((-0.00832593189139439)+(((-1.0)*x2719))+((cj3*x2719))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2721.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2720.value)*(((-0.00832593189139439)+(((-1.0)*x2719))+((cj3*x2719))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2721.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2722=IKsin(j1);
IkReal x2723=IKcos(j1);
IkReal x2724=((0.3)*cj3);
IkReal x2725=((0.045)*cj3);
IkReal x2726=(gconst104*px);
IkReal x2727=(sj3*x2722);
IkReal x2728=(sj3*x2723);
IkReal x2729=(gconst103*py*x2723);
IkReal x2730=(x2722*x2726);
IkReal x2731=(gconst103*py*x2722);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2730+x2731+(((-1.0)*x2724)));
evalcond[1]=((0.045)+x2729+(((0.3)*sj3))+(((-1.0)*x2725))+((x2723*x2726)));
evalcond[2]=((-0.2125)+(((1.1)*x2730))+(((1.1)*x2731))+(((-1.0)*pp))+(((-0.09)*x2723*x2726))+(((-0.09)*x2729)));
evalcond[3]=((((-0.310561435803037)*x2727))+(((0.138057984353428)*pp*x2722))+(((-0.185020708697653)*x2723))+(((-0.099746893695352)*x2722))+(((0.0254095720202485)*x2728))+(((-0.92038656235619)*pp*x2723)));
evalcond[4]=((((0.045)*x2727))+(((0.55)*x2722))+(((-0.3)*x2728))+(((-1.0)*x2726))+(((-0.045)*x2723))+((x2722*x2724))+((x2723*x2725))+(((-1.0)*gconst103*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2732=((0.92038656235619)*pp);
IkReal x2733=(gconst104*px);
IkReal x2734=(gconst103*py);
IkReal x2735=((0.0254095720202485)*sj3);
CheckValue<IkReal> x2736=IKPowWithIntegerCheck((x2734+x2733),-1);
if(!x2736.valid){
continue;
}
CheckValue<IkReal> x2737=IKPowWithIntegerCheck((((x2734*x2735))+(((-0.185020708697653)*x2733))+(((-0.185020708697653)*x2734))+(((-1.0)*x2732*x2734))+(((-1.0)*x2732*x2733))+((x2733*x2735))),-1);
if(!x2737.valid){
continue;
}
if( IKabs(((x2736.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2737.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2736.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2737.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2736.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2737.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2738=IKsin(j1);
IkReal x2739=IKcos(j1);
IkReal x2740=((0.3)*cj3);
IkReal x2741=((0.045)*cj3);
IkReal x2742=(gconst104*px);
IkReal x2743=(sj3*x2738);
IkReal x2744=(sj3*x2739);
IkReal x2745=(gconst103*py*x2739);
IkReal x2746=(x2738*x2742);
IkReal x2747=(gconst103*py*x2738);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2747+x2746+(((-1.0)*x2740)));
evalcond[1]=((0.045)+x2745+((x2739*x2742))+(((0.3)*sj3))+(((-1.0)*x2741)));
evalcond[2]=((-0.2125)+(((-0.09)*x2745))+(((1.1)*x2747))+(((1.1)*x2746))+(((-1.0)*pp))+(((-0.09)*x2739*x2742)));
evalcond[3]=((((-0.92038656235619)*pp*x2739))+(((0.0254095720202485)*x2744))+(((0.138057984353428)*pp*x2738))+(((-0.310561435803037)*x2743))+(((-0.185020708697653)*x2739))+(((-0.099746893695352)*x2738)));
evalcond[4]=((((0.55)*x2738))+(((0.045)*x2743))+((x2738*x2740))+((x2739*x2741))+(((-0.045)*x2739))+(((-0.3)*x2744))+(((-1.0)*x2742))+(((-1.0)*gconst103*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2748 = IKatan2WithCheck((gconst120*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst120*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2748.valid){
continue;
}
j1array[0]=x2748.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2749=IKsin(j1);
IkReal x2750=IKcos(j1);
IkReal x2751=((0.3)*cj3);
IkReal x2752=((0.045)*cj3);
IkReal x2753=(gconst104*px);
IkReal x2754=(sj3*x2749);
IkReal x2755=(sj3*x2750);
IkReal x2756=(gconst103*py*x2750);
IkReal x2757=(x2749*x2753);
IkReal x2758=(gconst103*py*x2749);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x2757+x2758+(((-1.0)*x2751)));
evalcond[1]=((0.045)+x2756+((x2750*x2753))+(((0.3)*sj3))+(((-1.0)*x2752)));
evalcond[2]=((-0.2125)+(((-0.09)*x2750*x2753))+(((1.1)*x2758))+(((1.1)*x2757))+(((-0.09)*x2756))+(((-1.0)*pp)));
evalcond[3]=((((0.0254095720202485)*x2755))+(((0.138057984353428)*pp*x2749))+(((-0.099746893695352)*x2749))+(((-0.92038656235619)*pp*x2750))+(((-0.310561435803037)*x2754))+(((-0.185020708697653)*x2750)));
evalcond[4]=(((x2749*x2751))+(((0.045)*x2754))+(((-0.045)*x2750))+(((0.55)*x2749))+((x2750*x2752))+(((-0.3)*x2755))+(((-1.0)*x2753))+(((-1.0)*gconst103*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst105;
CheckValue<IkReal> x2759 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2759.valid){
continue;
}
gconst105=((3.14159265358979)+(((-1.0)*(x2759.value))));
IkReal gconst106;
gconst106=IKsin(gconst105);
IkReal gconst107;
gconst107=IKcos(gconst105);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst105))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst121;
gconst121=IKsign((((gconst107*px))+((gconst106*py))));
dummyeval[0]=(((gconst107*px))+((gconst106*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2760=(gconst107*px);
IkReal x2761=((36.2220411120167)*pp);
IkReal x2762=(gconst106*py);
dummyeval[0]=(x2762+x2760);
dummyeval[1]=((((-1.0)*x2761*x2762))+(((-1.0)*x2760*x2761))+(((-7.28153581454315)*x2762))+(((-7.28153581454315)*x2760))+((sj3*x2762))+((sj3*x2760)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2763=((1.3840830449827)*pp);
IkReal x2764=(gconst107*px);
IkReal x2765=(gconst106*py);
IkReal x2766=((3.11349480968858)*sj3);
dummyeval[0]=((((-1.0)*x2764*x2766))+(((-1.0)*x2765))+(((-1.0)*x2764))+((x2763*x2764))+((x2763*x2765))+(((-1.0)*x2765*x2766)));
dummyeval[1]=(x2765+x2764);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2768 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2768.valid){
continue;
}
IkReal x2767=x2768.value;
j1array[0]=((-1.0)*x2767);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2767)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2769=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x2769))+(((-0.1275)*x2769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2770=((0.138057984353428)*pp);
IkReal x2771=(gconst106*py);
IkReal x2772=(gconst107*px);
IkReal x2773=((0.0414173953060285)*pp);
IkReal x2774=((0.310561435803037)*sj3);
CheckValue<IkReal> x2775=IKPowWithIntegerCheck((((x2770*x2771))+((x2770*x2772))+(((-0.099746893695352)*x2772))+(((-0.099746893695352)*x2771))+(((-1.0)*x2772*x2774))+(((-1.0)*x2771*x2774))),-1);
if(!x2775.valid){
continue;
}
CheckValue<IkReal> x2776=IKPowWithIntegerCheck((x2771+x2772),-1);
if(!x2776.valid){
continue;
}
if( IKabs(((x2775.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2773))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2773)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2776.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2775.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2773))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2773))))))+IKsqr(((x2776.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2775.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2773))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2773))))), ((x2776.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2777=IKsin(j1);
IkReal x2778=IKcos(j1);
IkReal x2779=((0.045)*sj3);
IkReal x2780=((0.3)*cj3);
IkReal x2781=(gconst106*py);
IkReal x2782=((0.045)*cj3);
IkReal x2783=(gconst107*px);
IkReal x2784=(sj3*x2778);
IkReal x2785=((0.09)*x2778);
IkReal x2786=(x2777*x2783);
evalcond[0]=((-0.55)+(((-1.0)*x2780))+x2786+((x2777*x2781))+(((-1.0)*x2779)));
evalcond[1]=((0.045)+(((-1.0)*x2782))+((x2778*x2781))+((x2778*x2783))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2786))+(((1.1)*x2777*x2781))+(((-1.0)*x2781*x2785))+(((-1.0)*x2783*x2785))+(((-1.0)*pp)));
evalcond[3]=((((-0.099746893695352)*x2777))+(((0.0254095720202485)*x2784))+(((-0.92038656235619)*pp*x2778))+(((-0.310561435803037)*sj3*x2777))+(((0.138057984353428)*pp*x2777))+(((-0.185020708697653)*x2778)));
evalcond[4]=(((x2778*x2782))+((x2777*x2780))+(((-0.045)*x2778))+(((-1.0)*x2783))+(((-1.0)*x2781))+((x2777*x2779))+(((-0.3)*x2784))+(((0.55)*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2787=(gconst106*py);
IkReal x2788=((0.92038656235619)*pp);
IkReal x2789=((0.0254095720202485)*sj3);
IkReal x2790=(gconst107*px);
CheckValue<IkReal> x2791=IKPowWithIntegerCheck((x2790+x2787),-1);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(((((-1.0)*x2787*x2788))+((x2787*x2789))+(((-0.185020708697653)*x2790))+(((-0.185020708697653)*x2787))+((x2789*x2790))+(((-1.0)*x2788*x2790))),-1);
if(!x2792.valid){
continue;
}
if( IKabs(((x2791.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2792.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2791.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2792.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2791.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2792.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2793=IKsin(j1);
IkReal x2794=IKcos(j1);
IkReal x2795=((0.045)*sj3);
IkReal x2796=((0.3)*cj3);
IkReal x2797=(gconst106*py);
IkReal x2798=((0.045)*cj3);
IkReal x2799=(gconst107*px);
IkReal x2800=(sj3*x2794);
IkReal x2801=((0.09)*x2794);
IkReal x2802=(x2793*x2799);
evalcond[0]=((-0.55)+(((-1.0)*x2795))+(((-1.0)*x2796))+((x2793*x2797))+x2802);
evalcond[1]=((0.045)+(((-1.0)*x2798))+((x2794*x2797))+((x2794*x2799))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2802))+(((1.1)*x2793*x2797))+(((-1.0)*pp))+(((-1.0)*x2799*x2801))+(((-1.0)*x2797*x2801)));
evalcond[3]=((((-0.099746893695352)*x2793))+(((-0.92038656235619)*pp*x2794))+(((-0.310561435803037)*sj3*x2793))+(((0.138057984353428)*pp*x2793))+(((0.0254095720202485)*x2800))+(((-0.185020708697653)*x2794)));
evalcond[4]=((((-0.3)*x2800))+(((0.55)*x2793))+((x2794*x2798))+(((-1.0)*x2799))+(((-1.0)*x2797))+((x2793*x2796))+((x2793*x2795))+(((-0.045)*x2794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2803 = IKatan2WithCheck((gconst121*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst121*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2803.valid){
continue;
}
j1array[0]=x2803.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2804=IKsin(j1);
IkReal x2805=IKcos(j1);
IkReal x2806=((0.045)*sj3);
IkReal x2807=((0.3)*cj3);
IkReal x2808=(gconst106*py);
IkReal x2809=((0.045)*cj3);
IkReal x2810=(gconst107*px);
IkReal x2811=(sj3*x2805);
IkReal x2812=((0.09)*x2805);
IkReal x2813=(x2804*x2810);
evalcond[0]=((-0.55)+(((-1.0)*x2807))+(((-1.0)*x2806))+((x2804*x2808))+x2813);
evalcond[1]=((0.045)+(((-1.0)*x2809))+((x2805*x2808))+((x2805*x2810))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x2810*x2812))+(((1.1)*x2804*x2808))+(((-1.0)*pp))+(((-1.0)*x2808*x2812))+(((1.1)*x2813)));
evalcond[3]=((((-0.185020708697653)*x2805))+(((-0.099746893695352)*x2804))+(((-0.310561435803037)*sj3*x2804))+(((-0.92038656235619)*pp*x2805))+(((0.138057984353428)*pp*x2804))+(((0.0254095720202485)*x2811)));
evalcond[4]=((((-1.0)*x2808))+((x2805*x2809))+(((-1.0)*x2810))+((x2804*x2807))+((x2804*x2806))+(((-0.045)*x2805))+(((-0.3)*x2811))+(((0.55)*x2804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst108;
CheckValue<IkReal> x2814 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2814.valid){
continue;
}
gconst108=((-1.0)*(x2814.value));
IkReal gconst109;
gconst109=IKsin(gconst108);
IkReal gconst110;
gconst110=IKcos(gconst108);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst108))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst122;
gconst122=IKsign((((gconst110*px))+((gconst109*py))));
dummyeval[0]=(((gconst110*px))+((gconst109*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2815=(gconst109*py);
IkReal x2816=(gconst110*px);
IkReal x2817=((36.2220411120167)*pp);
dummyeval[0]=(x2815+x2816);
dummyeval[1]=((((-1.0)*x2815*x2817))+(((-7.28153581454315)*x2815))+(((-7.28153581454315)*x2816))+(((-1.0)*x2816*x2817))+((sj3*x2815))+((sj3*x2816)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2818=(gconst109*py);
IkReal x2819=((3.11349480968858)*sj3);
IkReal x2820=(gconst110*px);
IkReal x2821=((1.3840830449827)*pp);
dummyeval[0]=((((-1.0)*x2818))+((x2818*x2821))+(((-1.0)*x2820))+(((-1.0)*x2818*x2819))+(((-1.0)*x2819*x2820))+((x2820*x2821)));
dummyeval[1]=(x2818+x2820);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2823 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2823.valid){
continue;
}
IkReal x2822=x2823.value;
j1array[0]=((-1.0)*x2822);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2822)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2824=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x2824))+(((-0.1275)*x2824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2825=(gconst110*px);
IkReal x2826=((0.138057984353428)*pp);
IkReal x2827=(gconst109*py);
IkReal x2828=((0.0414173953060285)*pp);
IkReal x2829=((0.310561435803037)*sj3);
CheckValue<IkReal> x2830=IKPowWithIntegerCheck((((x2825*x2826))+(((-1.0)*x2825*x2829))+(((-1.0)*x2827*x2829))+(((-0.099746893695352)*x2827))+(((-0.099746893695352)*x2825))+((x2826*x2827))),-1);
if(!x2830.valid){
continue;
}
CheckValue<IkReal> x2831=IKPowWithIntegerCheck((x2825+x2827),-1);
if(!x2831.valid){
continue;
}
if( IKabs(((x2830.value)*(((-0.00832593189139439)+((cj3*x2828))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2828))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2831.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2830.value)*(((-0.00832593189139439)+((cj3*x2828))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2828))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2831.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2830.value)*(((-0.00832593189139439)+((cj3*x2828))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2828))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2831.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2832=IKsin(j1);
IkReal x2833=IKcos(j1);
IkReal x2834=((0.3)*cj3);
IkReal x2835=((0.045)*cj3);
IkReal x2836=(gconst110*px);
IkReal x2837=(gconst109*py);
IkReal x2838=(sj3*x2832);
IkReal x2839=(sj3*x2833);
IkReal x2840=((1.1)*x2832);
IkReal x2841=((0.09)*x2833);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2834))+((x2832*x2836))+((x2832*x2837)));
evalcond[1]=((0.045)+(((-1.0)*x2835))+(((0.3)*sj3))+((x2833*x2836))+((x2833*x2837)));
evalcond[2]=((-0.2125)+((x2837*x2840))+((x2836*x2840))+(((-1.0)*pp))+(((-1.0)*x2836*x2841))+(((-1.0)*x2837*x2841)));
evalcond[3]=((((-0.099746893695352)*x2832))+(((0.0254095720202485)*x2839))+(((-0.310561435803037)*x2838))+(((0.138057984353428)*pp*x2832))+(((-0.92038656235619)*pp*x2833))+(((-0.185020708697653)*x2833)));
evalcond[4]=((((-1.0)*x2837))+(((-1.0)*x2836))+(((-0.3)*x2839))+(((0.045)*x2838))+(((0.55)*x2832))+(((-0.045)*x2833))+((x2833*x2835))+((x2832*x2834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2842=(gconst109*py);
IkReal x2843=((0.0254095720202485)*sj3);
IkReal x2844=(gconst110*px);
IkReal x2845=((0.92038656235619)*pp);
CheckValue<IkReal> x2846=IKPowWithIntegerCheck((x2844+x2842),-1);
if(!x2846.valid){
continue;
}
CheckValue<IkReal> x2847=IKPowWithIntegerCheck(((((-1.0)*x2842*x2845))+(((-0.185020708697653)*x2844))+(((-0.185020708697653)*x2842))+((x2843*x2844))+((x2842*x2843))+(((-1.0)*x2844*x2845))),-1);
if(!x2847.valid){
continue;
}
if( IKabs(((x2846.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2847.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2846.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2847.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2846.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2847.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2848=IKsin(j1);
IkReal x2849=IKcos(j1);
IkReal x2850=((0.3)*cj3);
IkReal x2851=((0.045)*cj3);
IkReal x2852=(gconst110*px);
IkReal x2853=(gconst109*py);
IkReal x2854=(sj3*x2848);
IkReal x2855=(sj3*x2849);
IkReal x2856=((1.1)*x2848);
IkReal x2857=((0.09)*x2849);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2848*x2852))+((x2848*x2853))+(((-1.0)*x2850)));
evalcond[1]=((0.045)+((x2849*x2852))+((x2849*x2853))+(((0.3)*sj3))+(((-1.0)*x2851)));
evalcond[2]=((-0.2125)+((x2852*x2856))+((x2853*x2856))+(((-1.0)*pp))+(((-1.0)*x2852*x2857))+(((-1.0)*x2853*x2857)));
evalcond[3]=((((-0.185020708697653)*x2849))+(((0.0254095720202485)*x2855))+(((-0.92038656235619)*pp*x2849))+(((-0.310561435803037)*x2854))+(((0.138057984353428)*pp*x2848))+(((-0.099746893695352)*x2848)));
evalcond[4]=(((x2849*x2851))+((x2848*x2850))+(((-0.3)*x2855))+(((0.045)*x2854))+(((-0.045)*x2849))+(((0.55)*x2848))+(((-1.0)*x2853))+(((-1.0)*x2852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2858 = IKatan2WithCheck((gconst122*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst122*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2858.valid){
continue;
}
j1array[0]=x2858.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2859=IKsin(j1);
IkReal x2860=IKcos(j1);
IkReal x2861=((0.3)*cj3);
IkReal x2862=((0.045)*cj3);
IkReal x2863=(gconst110*px);
IkReal x2864=(gconst109*py);
IkReal x2865=(sj3*x2859);
IkReal x2866=(sj3*x2860);
IkReal x2867=((1.1)*x2859);
IkReal x2868=((0.09)*x2860);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2861))+((x2859*x2864))+((x2859*x2863)));
evalcond[1]=((0.045)+(((-1.0)*x2862))+(((0.3)*sj3))+((x2860*x2863))+((x2860*x2864)));
evalcond[2]=((-0.2125)+(((-1.0)*x2864*x2868))+((x2863*x2867))+(((-1.0)*pp))+(((-1.0)*x2863*x2868))+((x2864*x2867)));
evalcond[3]=((((-0.310561435803037)*x2865))+(((-0.92038656235619)*pp*x2860))+(((-0.099746893695352)*x2859))+(((-0.185020708697653)*x2860))+(((0.138057984353428)*pp*x2859))+(((0.0254095720202485)*x2866)));
evalcond[4]=((((-0.045)*x2860))+(((-1.0)*x2863))+(((-1.0)*x2864))+(((0.55)*x2859))+(((-0.3)*x2866))+((x2859*x2861))+((x2860*x2862))+(((0.045)*x2865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst111;
CheckValue<IkReal> x2869 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2869.valid){
continue;
}
gconst111=((3.14159265358979)+(((-1.0)*(x2869.value))));
IkReal gconst112;
gconst112=IKsin(gconst111);
IkReal gconst113;
gconst113=IKcos(gconst111);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst111))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst123;
gconst123=IKsign((((gconst113*px))+((gconst112*py))));
dummyeval[0]=(((gconst113*px))+((gconst112*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2870=(gconst113*px);
IkReal x2871=((36.2220411120167)*pp);
IkReal x2872=(gconst112*py);
dummyeval[0]=(x2872+x2870);
dummyeval[1]=((((-1.0)*x2871*x2872))+(((-1.0)*x2870*x2871))+(((-7.28153581454315)*x2872))+(((-7.28153581454315)*x2870))+((sj3*x2872))+((sj3*x2870)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2873=(gconst112*py);
IkReal x2874=((1.3840830449827)*pp);
IkReal x2875=((3.11349480968858)*sj3);
IkReal x2876=(gconst113*px);
dummyeval[0]=((((-1.0)*x2873))+(((-1.0)*x2876))+((x2873*x2874))+((x2874*x2876))+(((-1.0)*x2873*x2875))+(((-1.0)*x2875*x2876)));
dummyeval[1]=(x2873+x2876);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2878 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2878.valid){
continue;
}
IkReal x2877=x2878.value;
j1array[0]=((-1.0)*x2877);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2877)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2879=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x2879))+(((-0.1275)*x2879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2880=(gconst113*px);
IkReal x2881=((0.310561435803037)*sj3);
IkReal x2882=(gconst112*py);
IkReal x2883=((0.138057984353428)*pp);
IkReal x2884=((0.0414173953060285)*pp);
CheckValue<IkReal> x2885=IKPowWithIntegerCheck((((x2880*x2883))+(((-0.099746893695352)*x2882))+(((-0.099746893695352)*x2880))+(((-1.0)*x2880*x2881))+((x2882*x2883))+(((-1.0)*x2881*x2882))),-1);
if(!x2885.valid){
continue;
}
CheckValue<IkReal> x2886=IKPowWithIntegerCheck((x2882+x2880),-1);
if(!x2886.valid){
continue;
}
if( IKabs(((x2885.value)*(((-0.00832593189139439)+((cj3*x2884))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2884))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2886.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2885.value)*(((-0.00832593189139439)+((cj3*x2884))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2884))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2886.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2885.value)*(((-0.00832593189139439)+((cj3*x2884))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x2884))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2886.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2887=IKsin(j1);
IkReal x2888=IKcos(j1);
IkReal x2889=(gconst112*py);
IkReal x2890=((0.3)*cj3);
IkReal x2891=((0.045)*cj3);
IkReal x2892=(gconst113*px);
IkReal x2893=(sj3*x2887);
IkReal x2894=(sj3*x2888);
IkReal x2895=((0.09)*x2888);
IkReal x2896=((1.1)*x2887);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2887*x2889))+((x2887*x2892))+(((-1.0)*x2890)));
evalcond[1]=((0.045)+((x2888*x2889))+((x2888*x2892))+(((-1.0)*x2891))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x2889*x2895))+(((-1.0)*x2892*x2895))+((x2892*x2896))+((x2889*x2896))+(((-1.0)*pp)));
evalcond[3]=((((-0.310561435803037)*x2893))+(((0.138057984353428)*pp*x2887))+(((-0.92038656235619)*pp*x2888))+(((-0.185020708697653)*x2888))+(((-0.099746893695352)*x2887))+(((0.0254095720202485)*x2894)));
evalcond[4]=((((-0.045)*x2888))+(((0.55)*x2887))+(((-1.0)*x2889))+((x2888*x2891))+(((-1.0)*x2892))+((x2887*x2890))+(((-0.3)*x2894))+(((0.045)*x2893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2897=(gconst113*px);
IkReal x2898=((0.92038656235619)*pp);
IkReal x2899=(gconst112*py);
IkReal x2900=((0.0254095720202485)*sj3);
CheckValue<IkReal> x2901=IKPowWithIntegerCheck((x2899+x2897),-1);
if(!x2901.valid){
continue;
}
CheckValue<IkReal> x2902=IKPowWithIntegerCheck((((x2899*x2900))+(((-0.185020708697653)*x2897))+(((-0.185020708697653)*x2899))+((x2897*x2900))+(((-1.0)*x2898*x2899))+(((-1.0)*x2897*x2898))),-1);
if(!x2902.valid){
continue;
}
if( IKabs(((x2901.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2902.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2901.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2902.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2901.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2902.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2903=IKsin(j1);
IkReal x2904=IKcos(j1);
IkReal x2905=(gconst112*py);
IkReal x2906=((0.3)*cj3);
IkReal x2907=((0.045)*cj3);
IkReal x2908=(gconst113*px);
IkReal x2909=(sj3*x2903);
IkReal x2910=(sj3*x2904);
IkReal x2911=((0.09)*x2904);
IkReal x2912=((1.1)*x2903);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x2906))+((x2903*x2905))+((x2903*x2908)));
evalcond[1]=((0.045)+((x2904*x2905))+((x2904*x2908))+(((-1.0)*x2907))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x2905*x2911))+((x2905*x2912))+(((-1.0)*x2908*x2911))+((x2908*x2912)));
evalcond[3]=((((-0.310561435803037)*x2909))+(((-0.92038656235619)*pp*x2904))+(((0.138057984353428)*pp*x2903))+(((-0.099746893695352)*x2903))+(((-0.185020708697653)*x2904))+(((0.0254095720202485)*x2910)));
evalcond[4]=(((x2904*x2907))+(((0.55)*x2903))+(((0.045)*x2909))+((x2903*x2906))+(((-1.0)*x2908))+(((-1.0)*x2905))+(((-0.045)*x2904))+(((-0.3)*x2910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2913 = IKatan2WithCheck((gconst123*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst123*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2913.valid){
continue;
}
j1array[0]=x2913.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2914=IKsin(j1);
IkReal x2915=IKcos(j1);
IkReal x2916=(gconst112*py);
IkReal x2917=((0.3)*cj3);
IkReal x2918=((0.045)*cj3);
IkReal x2919=(gconst113*px);
IkReal x2920=(sj3*x2914);
IkReal x2921=(sj3*x2915);
IkReal x2922=((0.09)*x2915);
IkReal x2923=((1.1)*x2914);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x2914*x2919))+((x2914*x2916))+(((-1.0)*x2917)));
evalcond[1]=((0.045)+((x2915*x2916))+((x2915*x2919))+(((0.3)*sj3))+(((-1.0)*x2918)));
evalcond[2]=((-0.2125)+((x2916*x2923))+((x2919*x2923))+(((-1.0)*x2916*x2922))+(((-1.0)*x2919*x2922))+(((-1.0)*pp)));
evalcond[3]=((((-0.310561435803037)*x2920))+(((-0.099746893695352)*x2914))+(((0.0254095720202485)*x2921))+(((0.138057984353428)*pp*x2914))+(((-0.92038656235619)*pp*x2915))+(((-0.185020708697653)*x2915)));
evalcond[4]=(((x2914*x2917))+(((0.55)*x2914))+(((-0.045)*x2915))+((x2915*x2918))+(((0.045)*x2920))+(((-0.3)*x2921))+(((-1.0)*x2919))+(((-1.0)*x2916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst114;
CheckValue<IkReal> x2924 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2924.valid){
continue;
}
gconst114=((-1.0)*(x2924.value));
IkReal gconst115;
gconst115=IKsin(gconst114);
IkReal gconst116;
gconst116=IKcos(gconst114);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst114))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst124;
gconst124=IKsign((((gconst116*px))+((gconst115*py))));
dummyeval[0]=(((gconst116*px))+((gconst115*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2925=(gconst116*px);
IkReal x2926=(gconst115*py);
IkReal x2927=((36.2220411120167)*pp);
dummyeval[0]=(x2925+x2926);
dummyeval[1]=(((sj3*x2926))+((sj3*x2925))+(((-1.0)*x2925*x2927))+(((-1.0)*x2926*x2927))+(((-7.28153581454315)*x2925))+(((-7.28153581454315)*x2926)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2928=((3.11349480968858)*sj3);
IkReal x2929=(gconst115*py);
IkReal x2930=(gconst116*px);
IkReal x2931=((1.3840830449827)*pp);
dummyeval[0]=(((x2929*x2931))+((x2930*x2931))+(((-1.0)*x2930))+(((-1.0)*x2928*x2930))+(((-1.0)*x2929))+(((-1.0)*x2928*x2929)));
dummyeval[1]=(x2930+x2929);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2933 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2933.valid){
continue;
}
IkReal x2932=x2933.value;
j1array[0]=((-1.0)*x2932);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2932)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2934=IKcos(j1);
evalcond[0]=((((-0.1275)*x2934))+(((-0.30675)*sj3*x2934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2935=(gconst115*py);
IkReal x2936=((0.138057984353428)*pp);
IkReal x2937=((0.310561435803037)*sj3);
IkReal x2938=(gconst116*px);
IkReal x2939=((0.0414173953060285)*pp);
CheckValue<IkReal> x2940=IKPowWithIntegerCheck((((x2936*x2938))+(((-1.0)*x2935*x2937))+(((-0.099746893695352)*x2938))+(((-0.099746893695352)*x2935))+((x2935*x2936))+(((-1.0)*x2937*x2938))),-1);
if(!x2940.valid){
continue;
}
CheckValue<IkReal> x2941=IKPowWithIntegerCheck((x2938+x2935),-1);
if(!x2941.valid){
continue;
}
if( IKabs(((x2940.value)*(((-0.00832593189139439)+((cj3*x2939))+(((-1.0)*x2939))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2941.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2940.value)*(((-0.00832593189139439)+((cj3*x2939))+(((-1.0)*x2939))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2941.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2940.value)*(((-0.00832593189139439)+((cj3*x2939))+(((-1.0)*x2939))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2941.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2942=IKsin(j1);
IkReal x2943=IKcos(j1);
IkReal x2944=((0.045)*sj3);
IkReal x2945=((0.3)*cj3);
IkReal x2946=(gconst115*py);
IkReal x2947=((0.045)*cj3);
IkReal x2948=(gconst116*px);
IkReal x2949=(sj3*x2943);
IkReal x2950=((0.09)*x2943);
IkReal x2951=(x2942*x2948);
evalcond[0]=((-0.55)+(((-1.0)*x2944))+(((-1.0)*x2945))+((x2942*x2946))+x2951);
evalcond[1]=((0.045)+(((-1.0)*x2947))+(((0.3)*sj3))+((x2943*x2946))+((x2943*x2948)));
evalcond[2]=((-0.2125)+(((1.1)*x2951))+(((-1.0)*x2948*x2950))+(((-1.0)*pp))+(((1.1)*x2942*x2946))+(((-1.0)*x2946*x2950)));
evalcond[3]=((((0.0254095720202485)*x2949))+(((-0.310561435803037)*sj3*x2942))+(((0.138057984353428)*pp*x2942))+(((-0.92038656235619)*pp*x2943))+(((-0.185020708697653)*x2943))+(((-0.099746893695352)*x2942)));
evalcond[4]=((((-0.045)*x2943))+(((-1.0)*x2948))+(((-1.0)*x2946))+(((-0.3)*x2949))+(((0.55)*x2942))+((x2943*x2947))+((x2942*x2944))+((x2942*x2945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2952=(gconst115*py);
IkReal x2953=((0.0254095720202485)*sj3);
IkReal x2954=(gconst116*px);
IkReal x2955=((0.92038656235619)*pp);
CheckValue<IkReal> x2956=IKPowWithIntegerCheck((x2954+x2952),-1);
if(!x2956.valid){
continue;
}
CheckValue<IkReal> x2957=IKPowWithIntegerCheck(((((-1.0)*x2952*x2955))+(((-1.0)*x2954*x2955))+((x2953*x2954))+((x2952*x2953))+(((-0.185020708697653)*x2952))+(((-0.185020708697653)*x2954))),-1);
if(!x2957.valid){
continue;
}
if( IKabs(((x2956.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2957.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2956.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x2957.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2956.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x2957.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2958=IKsin(j1);
IkReal x2959=IKcos(j1);
IkReal x2960=((0.045)*sj3);
IkReal x2961=((0.3)*cj3);
IkReal x2962=(gconst115*py);
IkReal x2963=((0.045)*cj3);
IkReal x2964=(gconst116*px);
IkReal x2965=(sj3*x2959);
IkReal x2966=((0.09)*x2959);
IkReal x2967=(x2958*x2964);
evalcond[0]=((-0.55)+(((-1.0)*x2960))+(((-1.0)*x2961))+((x2958*x2962))+x2967);
evalcond[1]=((0.045)+(((-1.0)*x2963))+((x2959*x2964))+((x2959*x2962))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x2958*x2962))+(((-1.0)*pp))+(((-1.0)*x2962*x2966))+(((1.1)*x2967))+(((-1.0)*x2964*x2966)));
evalcond[3]=((((-0.92038656235619)*pp*x2959))+(((-0.310561435803037)*sj3*x2958))+(((0.0254095720202485)*x2965))+(((0.138057984353428)*pp*x2958))+(((-0.099746893695352)*x2958))+(((-0.185020708697653)*x2959)));
evalcond[4]=((((-1.0)*x2964))+(((-1.0)*x2962))+(((-0.3)*x2965))+((x2959*x2963))+(((0.55)*x2958))+(((-0.045)*x2959))+((x2958*x2961))+((x2958*x2960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2968 = IKatan2WithCheck((gconst124*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst124*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2968.valid){
continue;
}
j1array[0]=x2968.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2969=IKsin(j1);
IkReal x2970=IKcos(j1);
IkReal x2971=((0.045)*sj3);
IkReal x2972=((0.3)*cj3);
IkReal x2973=(gconst115*py);
IkReal x2974=((0.045)*cj3);
IkReal x2975=(gconst116*px);
IkReal x2976=(sj3*x2970);
IkReal x2977=((0.09)*x2970);
IkReal x2978=(x2969*x2975);
evalcond[0]=((-0.55)+((x2969*x2973))+(((-1.0)*x2971))+(((-1.0)*x2972))+x2978);
evalcond[1]=((0.045)+((x2970*x2973))+((x2970*x2975))+(((-1.0)*x2974))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x2975*x2977))+(((-1.0)*pp))+(((1.1)*x2978))+(((-1.0)*x2973*x2977))+(((1.1)*x2969*x2973)));
evalcond[3]=((((0.0254095720202485)*x2976))+(((0.138057984353428)*pp*x2969))+(((-0.92038656235619)*pp*x2970))+(((-0.310561435803037)*sj3*x2969))+(((-0.185020708697653)*x2970))+(((-0.099746893695352)*x2969)));
evalcond[4]=((((-0.045)*x2970))+((x2970*x2974))+(((-0.3)*x2976))+(((-1.0)*x2973))+(((-1.0)*x2975))+((x2969*x2971))+((x2969*x2972))+(((0.55)*x2969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst117;
CheckValue<IkReal> x2979 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x2979.valid){
continue;
}
gconst117=((3.14159265358979)+(((-1.0)*(x2979.value))));
IkReal gconst118;
gconst118=IKsin(gconst117);
IkReal gconst119;
gconst119=IKcos(gconst117);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst117))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst125;
gconst125=IKsign((((gconst119*px))+((gconst118*py))));
dummyeval[0]=(((gconst119*px))+((gconst118*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2980=(gconst119*px);
IkReal x2981=(gconst118*py);
IkReal x2982=((36.2220411120167)*pp);
dummyeval[0]=(x2981+x2980);
dummyeval[1]=((((-1.0)*x2981*x2982))+((sj3*x2980))+((sj3*x2981))+(((-7.28153581454315)*x2980))+(((-7.28153581454315)*x2981))+(((-1.0)*x2980*x2982)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2983=(gconst119*px);
IkReal x2984=((1.3840830449827)*pp);
IkReal x2985=(gconst118*py);
IkReal x2986=((3.11349480968858)*sj3);
dummyeval[0]=(((x2983*x2984))+((x2984*x2985))+(((-1.0)*x2985*x2986))+(((-1.0)*x2983))+(((-1.0)*x2985))+(((-1.0)*x2983*x2986)));
dummyeval[1]=(x2983+x2985);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2988 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2988.valid){
continue;
}
IkReal x2987=x2988.value;
j1array[0]=((-1.0)*x2987);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2987)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2989=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x2989))+(((-0.1275)*x2989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2990=(gconst119*px);
IkReal x2991=((0.310561435803037)*sj3);
IkReal x2992=(gconst118*py);
IkReal x2993=((0.138057984353428)*pp);
IkReal x2994=((0.0414173953060285)*pp);
CheckValue<IkReal> x2995=IKPowWithIntegerCheck((((x2990*x2993))+(((-0.099746893695352)*x2992))+(((-0.099746893695352)*x2990))+((x2992*x2993))+(((-1.0)*x2991*x2992))+(((-1.0)*x2990*x2991))),-1);
if(!x2995.valid){
continue;
}
CheckValue<IkReal> x2996=IKPowWithIntegerCheck((x2990+x2992),-1);
if(!x2996.valid){
continue;
}
if( IKabs(((x2995.value)*(((-0.00832593189139439)+(((-1.0)*x2994))+((cj3*x2994))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2996.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2995.value)*(((-0.00832593189139439)+(((-1.0)*x2994))+((cj3*x2994))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x2996.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2995.value)*(((-0.00832593189139439)+(((-1.0)*x2994))+((cj3*x2994))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x2996.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2997=IKsin(j1);
IkReal x2998=IKcos(j1);
IkReal x2999=((0.045)*sj3);
IkReal x3000=((0.3)*cj3);
IkReal x3001=((0.045)*cj3);
IkReal x3002=(gconst119*px);
IkReal x3003=(gconst118*py);
IkReal x3004=(sj3*x2998);
IkReal x3005=((0.09)*x2998);
IkReal x3006=((1.1)*x2997);
evalcond[0]=((-0.55)+(((-1.0)*x2999))+(((-1.0)*x3000))+((x2997*x3003))+((x2997*x3002)));
evalcond[1]=((0.045)+((x2998*x3003))+((x2998*x3002))+(((-1.0)*x3001))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x3002*x3005))+(((-1.0)*x3003*x3005))+((x3003*x3006))+(((-1.0)*pp))+((x3002*x3006)));
evalcond[3]=((((-0.310561435803037)*sj3*x2997))+(((-0.099746893695352)*x2997))+(((0.0254095720202485)*x3004))+(((0.138057984353428)*pp*x2997))+(((-0.185020708697653)*x2998))+(((-0.92038656235619)*pp*x2998)));
evalcond[4]=((((-1.0)*x3003))+(((-1.0)*x3002))+((x2998*x3001))+(((0.55)*x2997))+(((-0.3)*x3004))+(((-0.045)*x2998))+((x2997*x2999))+((x2997*x3000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3007=(gconst119*px);
IkReal x3008=((0.92038656235619)*pp);
IkReal x3009=((0.0254095720202485)*sj3);
IkReal x3010=(gconst118*py);
CheckValue<IkReal> x3011=IKPowWithIntegerCheck((x3010+x3007),-1);
if(!x3011.valid){
continue;
}
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(((((-0.185020708697653)*x3010))+((x3009*x3010))+(((-0.185020708697653)*x3007))+(((-1.0)*x3007*x3008))+((x3007*x3009))+(((-1.0)*x3008*x3010))),-1);
if(!x3012.valid){
continue;
}
if( IKabs(((x3011.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3012.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3011.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3012.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3011.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3012.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3013=IKsin(j1);
IkReal x3014=IKcos(j1);
IkReal x3015=((0.045)*sj3);
IkReal x3016=((0.3)*cj3);
IkReal x3017=((0.045)*cj3);
IkReal x3018=(gconst119*px);
IkReal x3019=(gconst118*py);
IkReal x3020=(sj3*x3014);
IkReal x3021=((0.09)*x3014);
IkReal x3022=((1.1)*x3013);
evalcond[0]=((-0.55)+((x3013*x3019))+((x3013*x3018))+(((-1.0)*x3016))+(((-1.0)*x3015)));
evalcond[1]=((0.045)+(((-1.0)*x3017))+(((0.3)*sj3))+((x3014*x3018))+((x3014*x3019)));
evalcond[2]=((-0.2125)+(((-1.0)*x3018*x3021))+((x3019*x3022))+(((-1.0)*x3019*x3021))+(((-1.0)*pp))+((x3018*x3022)));
evalcond[3]=((((-0.185020708697653)*x3014))+(((-0.92038656235619)*pp*x3014))+(((0.138057984353428)*pp*x3013))+(((-0.099746893695352)*x3013))+(((-0.310561435803037)*sj3*x3013))+(((0.0254095720202485)*x3020)));
evalcond[4]=(((x3013*x3016))+((x3013*x3015))+(((0.55)*x3013))+(((-0.3)*x3020))+(((-1.0)*x3019))+(((-1.0)*x3018))+(((-0.045)*x3014))+((x3014*x3017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3023 = IKatan2WithCheck((gconst125*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst125*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3023.valid){
continue;
}
j1array[0]=x3023.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3024=IKsin(j1);
IkReal x3025=IKcos(j1);
IkReal x3026=((0.045)*sj3);
IkReal x3027=((0.3)*cj3);
IkReal x3028=((0.045)*cj3);
IkReal x3029=(gconst119*px);
IkReal x3030=(gconst118*py);
IkReal x3031=(sj3*x3025);
IkReal x3032=((0.09)*x3025);
IkReal x3033=((1.1)*x3024);
evalcond[0]=((-0.55)+(((-1.0)*x3026))+(((-1.0)*x3027))+((x3024*x3030))+((x3024*x3029)));
evalcond[1]=((0.045)+(((-1.0)*x3028))+((x3025*x3030))+((x3025*x3029))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x3029*x3032))+((x3030*x3033))+(((-1.0)*x3030*x3032))+(((-1.0)*pp))+((x3029*x3033)));
evalcond[3]=((((-0.92038656235619)*pp*x3025))+(((0.0254095720202485)*x3031))+(((-0.185020708697653)*x3025))+(((-0.310561435803037)*sj3*x3024))+(((0.138057984353428)*pp*x3024))+(((-0.099746893695352)*x3024)));
evalcond[4]=((((-0.3)*x3031))+(((-1.0)*x3029))+(((-0.045)*x3025))+(((-1.0)*x3030))+(((0.55)*x3024))+((x3025*x3028))+((x3024*x3027))+((x3024*x3026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3035 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3035.valid){
continue;
}
IkReal x3034=x3035.value;
j1array[0]=((-1.0)*x3034);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3034)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3036=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x3036))+(((-0.1275)*x3036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3038 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3038.valid){
continue;
}
IkReal x3037=x3038.value;
j1array[0]=((-1.0)*x3037);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3037)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3039=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x3039))+(((-0.1275)*x3039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3041 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3041.valid){
continue;
}
IkReal x3040=x3041.value;
j1array[0]=((-1.0)*x3040);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3040)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3042=IKcos(j1);
evalcond[0]=((((-0.1275)*x3042))+(((-0.30675)*sj3*x3042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3044 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3044.valid){
continue;
}
IkReal x3043=x3044.value;
j1array[0]=((-1.0)*x3043);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3043)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3045=IKcos(j1);
evalcond[0]=((((-0.1275)*x3045))+(((-0.30675)*sj3*x3045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3047 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3047.valid){
continue;
}
IkReal x3046=x3047.value;
j1array[0]=((-1.0)*x3046);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3046)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3048=IKcos(j1);
evalcond[0]=((((-0.1275)*x3048))+(((-0.30675)*sj3*x3048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3049=(py*sj0);
IkReal x3050=((0.310561435803037)*sj3);
IkReal x3051=((0.0414173953060285)*pp);
IkReal x3052=(cj0*px);
IkReal x3053=((0.138057984353428)*pp);
CheckValue<IkReal> x3054=IKPowWithIntegerCheck(((((-0.099746893695352)*x3049))+((x3052*x3053))+(((-1.0)*x3050*x3052))+(((-0.099746893695352)*x3052))+((x3049*x3053))+(((-1.0)*x3049*x3050))),-1);
if(!x3054.valid){
continue;
}
CheckValue<IkReal> x3055=IKPowWithIntegerCheck((x3049+x3052),-1);
if(!x3055.valid){
continue;
}
if( IKabs(((x3054.value)*(((-0.00832593189139439)+((cj3*x3051))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3051))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3055.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3054.value)*(((-0.00832593189139439)+((cj3*x3051))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3051))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3055.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3054.value)*(((-0.00832593189139439)+((cj3*x3051))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3051))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3055.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3056=IKsin(j1);
IkReal x3057=IKcos(j1);
IkReal x3058=((0.045)*sj3);
IkReal x3059=((0.3)*cj3);
IkReal x3060=((0.045)*cj3);
IkReal x3061=(cj0*px);
IkReal x3062=(py*sj0);
IkReal x3063=(sj3*x3057);
IkReal x3064=((0.09)*x3057);
IkReal x3065=((1.1)*x3056);
evalcond[0]=((-0.55)+((x3056*x3062))+((x3056*x3061))+(((-1.0)*x3059))+(((-1.0)*x3058)));
evalcond[1]=((0.045)+(((-1.0)*x3060))+((x3057*x3062))+((x3057*x3061))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x3062*x3064))+(((-1.0)*x3061*x3064))+(((-1.0)*pp))+((x3061*x3065))+((x3062*x3065)));
evalcond[3]=((((-0.310561435803037)*sj3*x3056))+(((0.138057984353428)*pp*x3056))+(((-0.92038656235619)*pp*x3057))+(((0.0254095720202485)*x3063))+(((-0.099746893695352)*x3056))+(((-0.185020708697653)*x3057)));
evalcond[4]=((((0.55)*x3056))+(((-1.0)*x3061))+(((-1.0)*x3062))+(((-0.045)*x3057))+((x3056*x3058))+((x3056*x3059))+(((-0.3)*x3063))+((x3057*x3060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3066=(cj0*px);
IkReal x3067=(py*sj0);
IkReal x3068=((0.92038656235619)*pp);
IkReal x3069=((0.0254095720202485)*sj3);
CheckValue<IkReal> x3070=IKPowWithIntegerCheck((x3067+x3066),-1);
if(!x3070.valid){
continue;
}
CheckValue<IkReal> x3071=IKPowWithIntegerCheck(((((-1.0)*x3066*x3068))+(((-1.0)*x3067*x3068))+((x3066*x3069))+((x3067*x3069))+(((-0.185020708697653)*x3067))+(((-0.185020708697653)*x3066))),-1);
if(!x3071.valid){
continue;
}
if( IKabs(((x3070.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3071.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3070.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3071.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3070.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3071.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3072=IKsin(j1);
IkReal x3073=IKcos(j1);
IkReal x3074=((0.045)*sj3);
IkReal x3075=((0.3)*cj3);
IkReal x3076=((0.045)*cj3);
IkReal x3077=(cj0*px);
IkReal x3078=(py*sj0);
IkReal x3079=(sj3*x3073);
IkReal x3080=((0.09)*x3073);
IkReal x3081=((1.1)*x3072);
evalcond[0]=((-0.55)+(((-1.0)*x3075))+(((-1.0)*x3074))+((x3072*x3077))+((x3072*x3078)));
evalcond[1]=((0.045)+(((-1.0)*x3076))+(((0.3)*sj3))+((x3073*x3078))+((x3073*x3077)));
evalcond[2]=((-0.2125)+(((-1.0)*x3077*x3080))+(((-1.0)*x3078*x3080))+(((-1.0)*pp))+((x3077*x3081))+((x3078*x3081)));
evalcond[3]=((((-0.185020708697653)*x3073))+(((-0.92038656235619)*pp*x3073))+(((-0.099746893695352)*x3072))+(((0.0254095720202485)*x3079))+(((0.138057984353428)*pp*x3072))+(((-0.310561435803037)*sj3*x3072)));
evalcond[4]=((((-1.0)*x3077))+(((-1.0)*x3078))+(((-0.3)*x3079))+((x3072*x3075))+((x3072*x3074))+((x3073*x3076))+(((0.55)*x3072))+(((-0.045)*x3073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3082 = IKatan2WithCheck((gconst101*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst101*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3082.valid){
continue;
}
j1array[0]=x3082.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3083=IKsin(j1);
IkReal x3084=IKcos(j1);
IkReal x3085=((0.045)*sj3);
IkReal x3086=((0.3)*cj3);
IkReal x3087=((0.045)*cj3);
IkReal x3088=(cj0*px);
IkReal x3089=(py*sj0);
IkReal x3090=(sj3*x3084);
IkReal x3091=((0.09)*x3084);
IkReal x3092=((1.1)*x3083);
evalcond[0]=((-0.55)+(((-1.0)*x3086))+(((-1.0)*x3085))+((x3083*x3089))+((x3083*x3088)));
evalcond[1]=((0.045)+(((-1.0)*x3087))+((x3084*x3089))+((x3084*x3088))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3088*x3092))+(((-1.0)*x3089*x3091))+(((-1.0)*pp))+((x3089*x3092))+(((-1.0)*x3088*x3091)));
evalcond[3]=((((-0.310561435803037)*sj3*x3083))+(((-0.185020708697653)*x3084))+(((0.0254095720202485)*x3090))+(((0.138057984353428)*pp*x3083))+(((-0.099746893695352)*x3083))+(((-0.92038656235619)*pp*x3084)));
evalcond[4]=(((x3083*x3086))+((x3083*x3085))+(((0.55)*x3083))+(((-1.0)*x3088))+(((-1.0)*x3089))+(((-0.045)*x3084))+((x3084*x3087))+(((-0.3)*x3090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3093=(cj2*pz);
IkReal x3094=((1.0)*cj0);
IkReal x3095=(cj0*px);
IkReal x3096=(py*sj0);
IkReal x3097=((0.55)*sj2);
IkReal x3098=(cj2*sj0);
IkReal x3099=((0.3)*cj3*sj2);
IkReal x3100=((0.045)*sj2*sj3);
IkReal x3101=(cj2*px*py);
CheckValue<IkReal> x3102 = IKatan2WithCheck((gconst67*((((px*sj0*x3093))+(((-1.0)*py*x3093*x3094))+((x3096*x3100))+((x3096*x3097))+((x3096*x3099))+((x3095*x3100))+((x3095*x3097))+((x3095*x3099))))),(gconst67*((((pz*x3100))+(((-1.0)*px*x3096*x3098))+((cj0*cj2*py*x3096))+((cj0*cj2*py*x3095))+(((-1.0)*x3094*x3098*(px*px)))+((pz*x3099))+((pz*x3097))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3102.valid){
continue;
}
j1array[0]=x3102.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3103=IKsin(j1);
IkReal x3104=IKcos(j1);
IkReal x3105=(px*sj2);
IkReal x3106=((0.3)*sj3);
IkReal x3107=((0.09)*sj0);
IkReal x3108=(cj2*px);
IkReal x3109=((0.045)*cj3);
IkReal x3110=((0.045)*cj2);
IkReal x3111=(py*sj0);
IkReal x3112=((0.045)*sj3);
IkReal x3113=((1.0)*cj0);
IkReal x3114=((0.3)*cj3);
IkReal x3115=(py*sj2);
IkReal x3116=(cj0*x3104);
IkReal x3117=(cj3*x3103);
IkReal x3118=(cj2*x3104);
IkReal x3119=(cj2*x3103);
IkReal x3120=(pz*x3104);
IkReal x3121=(cj0*px*x3103);
evalcond[0]=((-0.55)+x3120+x3121+(((-1.0)*x3112))+(((-1.0)*x3114))+((x3103*x3111)));
evalcond[1]=(((sj0*x3108))+((sj2*x3104*x3111))+(((-1.0)*cj2*py*x3113))+(((-1.0)*pz*sj2*x3103))+((x3105*x3116)));
evalcond[2]=((((-1.0)*x3109*x3119))+((x3103*x3110))+(((-1.0)*x3104*x3112))+(((-1.0)*x3104*x3114))+(((-0.55)*x3104))+pz+((x3106*x3119)));
evalcond[3]=((0.045)+((sj0*x3105))+(((-1.0)*x3113*x3115))+x3106+(((-1.0)*x3109))+(((-1.0)*x3104*x3108*x3113))+((pz*x3119))+(((-1.0)*x3111*x3118)));
evalcond[4]=((((0.55)*x3103))+(((-1.0)*x3109*x3118))+(((-1.0)*x3111))+((x3103*x3112))+((x3103*x3114))+(((-1.0)*px*x3113))+((x3104*x3110))+((x3106*x3118)));
evalcond[5]=((-0.2125)+(((0.09)*cj0*x3115))+(((-1.0)*pp))+(((-1.0)*x3105*x3107))+(((1.1)*x3103*x3111))+(((1.1)*x3120))+(((1.1)*x3121))+((py*x3107*x3118))+(((0.09)*x3108*x3116))+(((-0.09)*pz*x3119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3122=cj3*cj3;
IkReal x3123=sj3*sj3;
IkReal x3124=(cj2*sj3);
IkReal x3125=((0.0135)*cj2);
IkReal x3126=((1.0)*pz);
CheckValue<IkReal> x3127 = IKatan2WithCheck((gconst66*(((-0.3025)+(((-0.09)*x3122))+(((-0.0495)*sj3))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.002025)*x3123))+(((-0.33)*cj3))))),(gconst66*(((((-0.167025)*x3124))+(((-0.087975)*cj3*x3124))+(((-0.02475)*cj2))+(((-1.0)*cj0*px*x3126))+(((-1.0)*x3123*x3125))+(((-1.0)*py*sj0*x3126))+((x3122*x3125))+(((0.01125)*cj2*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3127.valid){
continue;
}
j1array[0]=x3127.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3128=IKsin(j1);
IkReal x3129=IKcos(j1);
IkReal x3130=(px*sj2);
IkReal x3131=((0.3)*sj3);
IkReal x3132=((0.09)*sj0);
IkReal x3133=(cj2*px);
IkReal x3134=((0.045)*cj3);
IkReal x3135=((0.045)*cj2);
IkReal x3136=(py*sj0);
IkReal x3137=((0.045)*sj3);
IkReal x3138=((1.0)*cj0);
IkReal x3139=((0.3)*cj3);
IkReal x3140=(py*sj2);
IkReal x3141=(cj0*x3129);
IkReal x3142=(cj3*x3128);
IkReal x3143=(cj2*x3129);
IkReal x3144=(cj2*x3128);
IkReal x3145=(pz*x3129);
IkReal x3146=(cj0*px*x3128);
evalcond[0]=((-0.55)+x3145+x3146+(((-1.0)*x3139))+(((-1.0)*x3137))+((x3128*x3136)));
evalcond[1]=((((-1.0)*cj2*py*x3138))+(((-1.0)*pz*sj2*x3128))+((x3130*x3141))+((sj2*x3129*x3136))+((sj0*x3133)));
evalcond[2]=(pz+(((-1.0)*x3134*x3144))+(((-0.55)*x3129))+((x3131*x3144))+(((-1.0)*x3129*x3139))+(((-1.0)*x3129*x3137))+((x3128*x3135)));
evalcond[3]=((0.045)+x3131+(((-1.0)*x3138*x3140))+((pz*x3144))+(((-1.0)*x3129*x3133*x3138))+(((-1.0)*x3136*x3143))+(((-1.0)*x3134))+((sj0*x3130)));
evalcond[4]=((((-1.0)*x3136))+(((-1.0)*x3134*x3143))+((x3131*x3143))+(((0.55)*x3128))+((x3129*x3135))+(((-1.0)*px*x3138))+((x3128*x3139))+((x3128*x3137)));
evalcond[5]=((-0.2125)+(((1.1)*x3128*x3136))+(((-1.0)*x3130*x3132))+(((1.1)*x3146))+(((1.1)*x3145))+(((-0.09)*pz*x3144))+(((0.09)*cj0*x3140))+(((-1.0)*pp))+((py*x3132*x3143))+(((0.09)*x3133*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x3147=((0.045)*sj2);
CheckValue<IkReal> x3150 = IKatan2WithCheck(((-1.0)*py),px,IKFAST_ATAN2_MAGTHRESH);
if(!x3150.valid){
continue;
}
IkReal x3148=((1.0)*(x3150.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x3151=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x3151.valid){
continue;
}
if( (((x3151.value)*(((((-1.0)*cj3*x3147))+(((0.3)*sj2*sj3))+x3147)))) < -1-IKFAST_SINCOS_THRESH || (((x3151.value)*(((((-1.0)*cj3*x3147))+(((0.3)*sj2*sj3))+x3147)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x3149=IKasin(((x3151.value)*(((((-1.0)*cj3*x3147))+(((0.3)*sj2*sj3))+x3147))));
j0array[0]=((((-1.0)*x3149))+(((-1.0)*x3148)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x3149+(((-1.0)*x3148)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst66;
IkReal x3152=(py*sj0);
IkReal x3153=((0.3)*cj3);
IkReal x3154=(cj0*px);
IkReal x3155=(cj2*pz);
IkReal x3156=((0.045)*sj3);
gconst66=IKsign(((((-1.0)*x3153*x3154))+(((-0.55)*x3152))+(((-0.55)*x3154))+(((0.045)*cj3*x3155))+(((-0.045)*x3155))+(((-0.3)*sj3*x3155))+(((-1.0)*x3154*x3156))+(((-1.0)*x3152*x3156))+(((-1.0)*x3152*x3153))));
IkReal x3157=(py*sj0);
IkReal x3158=(cj2*pz);
IkReal x3159=((6.66666666666667)*cj3);
IkReal x3160=(cj0*px);
IkReal x3161=((1.0)*sj3);
dummyeval[0]=((((-1.0)*x3157*x3159))+(((-1.0)*x3157*x3161))+(((-1.0)*x3158))+(((-1.0)*x3160*x3161))+(((-6.66666666666667)*sj3*x3158))+((cj3*x3158))+(((-1.0)*x3159*x3160))+(((-12.2222222222222)*x3160))+(((-12.2222222222222)*x3157)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign((((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0)))));
dummyeval[0]=(((sj2*(pz*pz)))+((sj2*(cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x3162=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3162;
evalcond[3]=x3162;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst69;
gconst69=IKsign(((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0)))));
dummyeval[0]=((((-1.0)*(cj0*cj0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-2.0)*cj0*px*py*sj0))+(((-1.0)*(py*py)*(sj0*sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst68;
IkReal x3163=(cj0*px);
IkReal x3164=(py*sj0);
IkReal x3165=((0.0254095720202485)*sj3);
IkReal x3166=((0.92038656235619)*pp);
gconst68=IKsign(((((-1.0)*x3163*x3166))+(((-0.185020708697653)*x3164))+(((-0.185020708697653)*x3163))+(((-0.099746893695352)*pz))+(((-0.310561435803037)*pz*sj3))+(((-1.0)*x3164*x3166))+((x3163*x3165))+(((0.138057984353428)*pp*pz))+((x3164*x3165))));
IkReal x3167=(py*sj0);
IkReal x3168=(cj0*px);
IkReal x3169=((36.2220411120167)*pp);
dummyeval[0]=(((sj3*x3167))+((sj3*x3168))+(((-1.0)*x3167*x3169))+(((5.4333061668025)*pp*pz))+(((-3.92556370551481)*pz))+(((-12.2222222222222)*pz*sj3))+(((-7.28153581454315)*x3168))+(((-7.28153581454315)*x3167))+(((-1.0)*x3168*x3169)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3170=sj3*sj3;
IkReal x3171=(pp*sj3);
IkReal x3172=(cj3*sj3);
IkReal x3173=(cj3*pp);
IkReal x3174=((1.0)*pz);
CheckValue<IkReal> x3175 = IKatan2WithCheck((gconst68*(((-0.101761389783709)+(((0.00114343074091118)*x3170))+(((-0.276115968706857)*x3173))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.0414173953060285)*x3171))+(((0.00762287160607455)*x3172))+(((-0.0555062126092959)*cj3))))),(gconst68*(((-0.0548607915324436)+(((-0.0931684307409112)*x3172))+(((0.0414173953060285)*x3173))+(((-0.0299240681086056)*cj3))+(((-1.0)*cj0*px*x3174))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((0.00621260929590428)*x3171))+(((-0.0139752646111367)*x3170))+(((-1.0)*py*sj0*x3174))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3175.valid){
continue;
}
j1array[0]=x3175.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3176=IKsin(j1);
IkReal x3177=IKcos(j1);
IkReal x3178=((0.045)*sj3);
IkReal x3179=((0.3)*cj3);
IkReal x3180=((0.045)*cj3);
IkReal x3181=(cj0*px);
IkReal x3182=(py*sj0);
IkReal x3183=((1.0)*x3177);
IkReal x3184=(sj3*x3177);
IkReal x3185=(pz*x3176);
IkReal x3186=(pz*x3177);
IkReal x3187=((0.09)*x3177);
IkReal x3188=((1.1)*x3176);
evalcond[0]=((-0.55)+x3186+((x3176*x3182))+((x3176*x3181))+(((-1.0)*x3178))+(((-1.0)*x3179)));
evalcond[1]=((0.045)+x3185+(((-1.0)*x3181*x3183))+(((-1.0)*x3182*x3183))+(((0.3)*sj3))+(((-1.0)*x3180)));
evalcond[2]=((((0.099746893695352)*x3176))+(((0.0254095720202485)*x3184))+(((0.310561435803037)*sj3*x3176))+(((-0.138057984353428)*pp*x3176))+pz+(((-0.92038656235619)*pp*x3177))+(((-0.185020708697653)*x3177)));
evalcond[3]=((((-1.0)*x3177*x3180))+(((0.55)*x3176))+(((0.045)*x3177))+((x3176*x3179))+((x3176*x3178))+(((0.3)*x3184))+(((-1.0)*x3181))+(((-1.0)*x3182)));
evalcond[4]=((-0.2125)+((x3182*x3187))+((x3182*x3188))+(((1.1)*x3186))+(((-1.0)*pp))+((x3181*x3187))+((x3181*x3188))+(((-0.09)*x3185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3189=(py*sj0);
IkReal x3190=(cj0*px);
IkReal x3191=((0.3)*sj3);
IkReal x3192=((0.045)*cj3);
IkReal x3193=((0.3)*cj3);
IkReal x3194=((0.045)*pz);
IkReal x3195=((0.045)*sj3);
CheckValue<IkReal> x3196 = IKatan2WithCheck((gconst69*(((((-1.0)*x3190*x3193))+(((-1.0)*x3190*x3195))+x3194+(((-0.55)*x3189))+(((-0.55)*x3190))+((pz*x3191))+(((-1.0)*pz*x3192))+(((-1.0)*x3189*x3195))+(((-1.0)*x3189*x3193))))),(gconst69*(((((-1.0)*x3190*x3191))+(((-0.55)*pz))+(((-0.045)*x3190))+(((-0.045)*x3189))+(((-1.0)*sj3*x3194))+(((-1.0)*pz*x3193))+((x3190*x3192))+(((-1.0)*x3189*x3191))+((x3189*x3192))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3196.valid){
continue;
}
j1array[0]=x3196.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3197=IKsin(j1);
IkReal x3198=IKcos(j1);
IkReal x3199=((0.045)*sj3);
IkReal x3200=((0.3)*cj3);
IkReal x3201=((0.045)*cj3);
IkReal x3202=(cj0*px);
IkReal x3203=(py*sj0);
IkReal x3204=((1.0)*x3198);
IkReal x3205=(sj3*x3198);
IkReal x3206=(pz*x3197);
IkReal x3207=(pz*x3198);
IkReal x3208=((0.09)*x3198);
IkReal x3209=((1.1)*x3197);
evalcond[0]=((-0.55)+((x3197*x3203))+((x3197*x3202))+x3207+(((-1.0)*x3200))+(((-1.0)*x3199)));
evalcond[1]=((0.045)+x3206+(((-1.0)*x3202*x3204))+(((-1.0)*x3203*x3204))+(((-1.0)*x3201))+(((0.3)*sj3)));
evalcond[2]=((((-0.92038656235619)*pp*x3198))+(((0.310561435803037)*sj3*x3197))+(((-0.185020708697653)*x3198))+(((0.0254095720202485)*x3205))+pz+(((-0.138057984353428)*pp*x3197))+(((0.099746893695352)*x3197)));
evalcond[3]=((((0.55)*x3197))+((x3197*x3200))+(((0.045)*x3198))+(((0.3)*x3205))+(((-1.0)*x3203))+(((-1.0)*x3202))+((x3197*x3199))+(((-1.0)*x3198*x3201)));
evalcond[4]=((-0.2125)+(((-0.09)*x3206))+((x3202*x3209))+((x3202*x3208))+(((-1.0)*pp))+(((1.1)*x3207))+((x3203*x3208))+((x3203*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3210=(px*sj0);
IkReal x3211=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x3210+(((-1.0)*x3211)));
evalcond[3]=(x3211+(((-1.0)*x3210)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst70;
gconst70=IKsign(((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0))));
dummyeval[0]=((((py*py)*(sj0*sj0)))+(pz*pz)+(((cj0*cj0)*(px*px)))+(((2.0)*cj0*px*py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst71;
IkReal x3212=(cj0*px);
IkReal x3213=(py*sj0);
IkReal x3214=((0.0254095720202485)*sj3);
IkReal x3215=((0.92038656235619)*pp);
gconst71=IKsign(((((-0.185020708697653)*x3212))+(((-0.185020708697653)*x3213))+((x3212*x3214))+(((-0.138057984353428)*pp*pz))+((x3213*x3214))+(((0.310561435803037)*pz*sj3))+(((0.099746893695352)*pz))+(((-1.0)*x3212*x3215))+(((-1.0)*x3213*x3215))));
IkReal x3216=(py*sj0);
IkReal x3217=(cj0*px);
IkReal x3218=((36.2220411120167)*pp);
dummyeval[0]=((((12.2222222222222)*pz*sj3))+(((-5.4333061668025)*pp*pz))+(((-1.0)*x3217*x3218))+(((-1.0)*x3216*x3218))+(((-7.28153581454315)*x3216))+(((-7.28153581454315)*x3217))+(((3.92556370551481)*pz))+((sj3*x3216))+((sj3*x3217)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3219=sj3*sj3;
IkReal x3220=(cj3*pp);
IkReal x3221=(cj3*sj3);
IkReal x3222=(pp*sj3);
IkReal x3223=((1.0)*pz);
CheckValue<IkReal> x3224 = IKatan2WithCheck((gconst71*(((-0.101761389783709)+(((-0.0414173953060285)*x3222))+(((0.00114343074091118)*x3219))+(((0.00762287160607455)*x3221))+(((-0.276115968706857)*x3220))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))))),(gconst71*(((0.0548607915324436)+(((-0.0414173953060285)*x3220))+(((0.175297399907961)*sj3))+(((-1.0)*cj0*px*x3223))+(((0.0139752646111367)*x3219))+(((0.0931684307409112)*x3221))+(((-1.0)*py*sj0*x3223))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))+(((-0.00621260929590428)*x3222))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3224.valid){
continue;
}
j1array[0]=x3224.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3225=IKsin(j1);
IkReal x3226=IKcos(j1);
IkReal x3227=((0.045)*sj3);
IkReal x3228=((0.3)*cj3);
IkReal x3229=((0.045)*cj3);
IkReal x3230=(cj0*px);
IkReal x3231=(py*sj0);
IkReal x3232=(sj3*x3226);
IkReal x3233=(pz*x3225);
IkReal x3234=(pz*x3226);
IkReal x3235=((0.09)*x3226);
IkReal x3236=((1.1)*x3225);
evalcond[0]=((-0.55)+((x3225*x3231))+((x3225*x3230))+x3234+(((-1.0)*x3228))+(((-1.0)*x3227)));
evalcond[1]=((0.045)+(((-1.0)*x3233))+((x3226*x3231))+((x3226*x3230))+(((0.3)*sj3))+(((-1.0)*x3229)));
evalcond[2]=((((0.138057984353428)*pp*x3225))+(((-0.099746893695352)*x3225))+(((-0.310561435803037)*sj3*x3225))+(((0.0254095720202485)*x3232))+pz+(((-0.185020708697653)*x3226))+(((-0.92038656235619)*pp*x3226)));
evalcond[3]=((((-0.3)*x3232))+(((-1.0)*x3231))+(((-1.0)*x3230))+((x3226*x3229))+((x3225*x3228))+((x3225*x3227))+(((0.55)*x3225))+(((-0.045)*x3226)));
evalcond[4]=((-0.2125)+(((-1.0)*x3230*x3235))+(((-1.0)*x3231*x3235))+((x3231*x3236))+(((-1.0)*pp))+(((0.09)*x3233))+((x3230*x3236))+(((1.1)*x3234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3237=(py*sj0);
IkReal x3238=(cj0*px);
IkReal x3239=((0.3)*sj3);
IkReal x3240=((0.045)*cj3);
IkReal x3241=((0.3)*cj3);
IkReal x3242=((0.045)*pz);
IkReal x3243=((0.045)*sj3);
CheckValue<IkReal> x3244 = IKatan2WithCheck((gconst70*(((((-1.0)*pz*x3240))+((pz*x3239))+x3242+((x3237*x3243))+((x3237*x3241))+(((0.55)*x3237))+(((0.55)*x3238))+((x3238*x3243))+((x3238*x3241))))),(gconst70*((((pz*x3241))+(((-1.0)*x3237*x3239))+((x3237*x3240))+(((-1.0)*x3238*x3239))+((sj3*x3242))+(((-0.045)*x3238))+(((-0.045)*x3237))+((x3238*x3240))+(((0.55)*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3244.valid){
continue;
}
j1array[0]=x3244.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3245=IKsin(j1);
IkReal x3246=IKcos(j1);
IkReal x3247=((0.045)*sj3);
IkReal x3248=((0.3)*cj3);
IkReal x3249=((0.045)*cj3);
IkReal x3250=(cj0*px);
IkReal x3251=(py*sj0);
IkReal x3252=(sj3*x3246);
IkReal x3253=(pz*x3245);
IkReal x3254=(pz*x3246);
IkReal x3255=((0.09)*x3246);
IkReal x3256=((1.1)*x3245);
evalcond[0]=((-0.55)+x3254+((x3245*x3251))+((x3245*x3250))+(((-1.0)*x3248))+(((-1.0)*x3247)));
evalcond[1]=((0.045)+((x3246*x3251))+((x3246*x3250))+(((-1.0)*x3249))+(((-1.0)*x3253))+(((0.3)*sj3)));
evalcond[2]=((((-0.185020708697653)*x3246))+(((0.138057984353428)*pp*x3245))+(((-0.099746893695352)*x3245))+(((-0.92038656235619)*pp*x3246))+pz+(((-0.310561435803037)*sj3*x3245))+(((0.0254095720202485)*x3252)));
evalcond[3]=((((0.55)*x3245))+(((-0.045)*x3246))+(((-1.0)*x3250))+(((-1.0)*x3251))+((x3246*x3249))+(((-0.3)*x3252))+((x3245*x3247))+((x3245*x3248)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+((x3251*x3256))+((x3250*x3256))+(((-1.0)*x3251*x3255))+(((-1.0)*x3250*x3255))+(((0.09)*x3253))+(((1.1)*x3254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3257=((-1.0)*cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3257;
evalcond[3]=x3257;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst72;
gconst72=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3258=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x3258)));
op[1]=0;
op[2]=((1.0)+x3258);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3260=IKPowWithIntegerCheck(pz,-1);
if(!x3260.valid){
continue;
}
IkReal x3259=x3260.value;
if( IKabs((x3259*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x3259*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3259*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x3259*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3259*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x3259*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3261=IKcos(j1);
IkReal x3262=IKsin(j1);
IkReal x3263=((0.045)*cj3);
IkReal x3264=((0.3)*cj3);
IkReal x3265=(sj3*x3262);
IkReal x3266=(cj3*x3262);
IkReal x3267=(sj3*x3261);
IkReal x3268=(pz*x3262);
IkReal x3269=(pz*x3261);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3269+(((-1.0)*x3264)));
evalcond[1]=((0.045)+x3268+(((-1.0)*x3263))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3269))+(((-0.09)*x3268))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x3261*x3263))+((x3262*x3264))+(((0.55)*x3262))+(((0.045)*x3261))+(((0.045)*x3265))+(((0.3)*x3267)));
evalcond[4]=((((-1.0)*x3261*x3264))+(((-0.55)*x3261))+(((-0.045)*x3267))+pz+(((-1.0)*x3262*x3263))+(((0.045)*x3262))+(((0.3)*x3265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3271=IKPowWithIntegerCheck(pz,-1);
if(!x3271.valid){
continue;
}
IkReal x3270=x3271.value;
if( IKabs(((0.111111111111111)*x3270*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3270*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x3270*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x3270*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x3270*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x3270*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3272=IKcos(j1);
IkReal x3273=IKsin(j1);
IkReal x3274=((0.045)*cj3);
IkReal x3275=((0.3)*cj3);
IkReal x3276=(sj3*x3273);
IkReal x3277=(cj3*x3273);
IkReal x3278=(sj3*x3272);
IkReal x3279=(pz*x3273);
IkReal x3280=(pz*x3272);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3280+(((-1.0)*x3275)));
evalcond[1]=((0.045)+x3279+(((-1.0)*x3274))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x3279))+(((1.1)*x3280)));
evalcond[3]=((((-1.0)*x3272*x3274))+((x3273*x3275))+(((0.55)*x3273))+(((0.045)*x3276))+(((0.045)*x3272))+(((0.3)*x3278)));
evalcond[4]=((((-1.0)*x3272*x3275))+(((-0.55)*x3272))+(((-1.0)*x3273*x3274))+(((-0.045)*x3278))+pz+(((0.045)*x3273))+(((0.3)*x3276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3281 = IKatan2WithCheck((gconst72*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst72*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3281.valid){
continue;
}
j1array[0]=x3281.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3282=IKcos(j1);
IkReal x3283=IKsin(j1);
IkReal x3284=((0.045)*cj3);
IkReal x3285=((0.3)*cj3);
IkReal x3286=(sj3*x3283);
IkReal x3287=(cj3*x3283);
IkReal x3288=(sj3*x3282);
IkReal x3289=(pz*x3283);
IkReal x3290=(pz*x3282);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3285))+x3290);
evalcond[1]=((0.045)+(((-1.0)*x3284))+x3289+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x3289))+(((1.1)*x3290)));
evalcond[3]=((((0.045)*x3286))+(((0.045)*x3282))+(((0.55)*x3283))+(((-1.0)*x3282*x3284))+((x3283*x3285))+(((0.3)*x3288)));
evalcond[4]=((((0.045)*x3283))+(((-1.0)*x3282*x3285))+(((-1.0)*x3283*x3284))+pz+(((0.3)*x3286))+(((-0.55)*x3282))+(((-0.045)*x3288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3291=(cj0*py);
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*x3291);
evalcond[3]=x3291;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst73;
gconst73=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3292=((2.40588235294118)*sj3);
op[0]=((1.0)+x3292);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x3292)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3294=IKPowWithIntegerCheck(pz,-1);
if(!x3294.valid){
continue;
}
IkReal x3293=x3294.value;
if( IKabs((x3293*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x3293*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3293*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x3293*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3293*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x3293*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3295=IKcos(j1);
IkReal x3296=IKsin(j1);
IkReal x3297=((0.045)*cj3);
IkReal x3298=((0.3)*cj3);
IkReal x3299=(sj3*x3296);
IkReal x3300=(cj3*x3296);
IkReal x3301=(sj3*x3295);
IkReal x3302=(pz*x3296);
IkReal x3303=(pz*x3295);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3298))+x3303);
evalcond[1]=((0.045)+(((-1.0)*x3297))+(((-1.0)*x3302))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x3302))+(((-1.0)*pp))+(((1.1)*x3303)));
evalcond[3]=((((0.045)*x3299))+(((0.55)*x3296))+((x3296*x3298))+((x3295*x3297))+(((-0.3)*x3301))+(((-0.045)*x3295)));
evalcond[4]=(((x3296*x3297))+(((-0.045)*x3301))+(((-0.3)*x3299))+(((-1.0)*x3295*x3298))+pz+(((-0.55)*x3295))+(((-0.045)*x3296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3305=IKPowWithIntegerCheck(pz,-1);
if(!x3305.valid){
continue;
}
IkReal x3304=x3305.value;
if( IKabs(((0.111111111111111)*x3304*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3304*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x3304*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x3304*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x3304*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x3304*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3306=IKcos(j1);
IkReal x3307=IKsin(j1);
IkReal x3308=((0.045)*cj3);
IkReal x3309=((0.3)*cj3);
IkReal x3310=(sj3*x3307);
IkReal x3311=(cj3*x3307);
IkReal x3312=(sj3*x3306);
IkReal x3313=(pz*x3307);
IkReal x3314=(pz*x3306);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3314+(((-1.0)*x3309)));
evalcond[1]=((0.045)+(((-1.0)*x3308))+(((-1.0)*x3313))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3314))+(((0.09)*x3313))+(((-1.0)*pp)));
evalcond[3]=((((0.55)*x3307))+(((-0.045)*x3306))+((x3307*x3309))+(((-0.3)*x3312))+(((0.045)*x3310))+((x3306*x3308)));
evalcond[4]=((((-0.55)*x3306))+(((-0.045)*x3312))+(((-0.045)*x3307))+(((-1.0)*x3306*x3309))+pz+((x3307*x3308))+(((-0.3)*x3310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3315 = IKatan2WithCheck((gconst73*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst73*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3315.valid){
continue;
}
j1array[0]=x3315.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3316=IKcos(j1);
IkReal x3317=IKsin(j1);
IkReal x3318=((0.045)*cj3);
IkReal x3319=((0.3)*cj3);
IkReal x3320=(sj3*x3317);
IkReal x3321=(cj3*x3317);
IkReal x3322=(sj3*x3316);
IkReal x3323=(pz*x3317);
IkReal x3324=(pz*x3316);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3324+(((-1.0)*x3319)));
evalcond[1]=((0.045)+(((-1.0)*x3323))+(((-1.0)*x3318))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3324))+(((-1.0)*pp))+(((0.09)*x3323)));
evalcond[3]=(((x3316*x3318))+(((0.045)*x3320))+((x3317*x3319))+(((0.55)*x3317))+(((-0.3)*x3322))+(((-0.045)*x3316)));
evalcond[4]=((((-0.045)*x3322))+((x3317*x3318))+(((-0.3)*x3320))+(((-1.0)*x3316*x3319))+(((-0.045)*x3317))+(((-0.55)*x3316))+pz);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3325=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3325;
evalcond[3]=x3325;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst74;
gconst74=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((-1.0)+(((-2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=-1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3326=((2.40588235294118)*sj3);
op[0]=((-1.0)+(((-1.0)*x3326)));
op[1]=0;
op[2]=((1.0)+x3326);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3328=IKPowWithIntegerCheck(pz,-1);
if(!x3328.valid){
continue;
}
IkReal x3327=x3328.value;
if( IKabs((x3327*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x3327*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3327*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x3327*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3327*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))), ((0.00909090909090909)*x3327*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3329=IKcos(j1);
IkReal x3330=IKsin(j1);
IkReal x3331=((0.045)*cj3);
IkReal x3332=((0.3)*cj3);
IkReal x3333=(sj3*x3330);
IkReal x3334=(cj3*x3330);
IkReal x3335=(sj3*x3329);
IkReal x3336=(pz*x3330);
IkReal x3337=(pz*x3329);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3337+(((-1.0)*x3332)));
evalcond[1]=((0.045)+x3336+(((-1.0)*x3331))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3337))+(((-1.0)*pp))+(((-0.09)*x3336)));
evalcond[3]=((((0.55)*x3330))+(((0.045)*x3329))+((x3330*x3332))+(((0.045)*x3333))+(((0.3)*x3335))+(((-1.0)*x3329*x3331)));
evalcond[4]=((((-1.0)*x3330*x3331))+pz+(((-0.045)*x3335))+(((0.045)*x3330))+(((-0.55)*x3329))+(((0.3)*x3333))+(((-1.0)*x3329*x3332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3339=IKPowWithIntegerCheck(pz,-1);
if(!x3339.valid){
continue;
}
IkReal x3338=x3339.value;
if( IKabs(((0.111111111111111)*x3338*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3338*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x3338*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))))+IKsqr((x3338*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x3338*(((39.25)+(((-100.0)*pp))+(((4.95)*sj3))+(((33.0)*cj3))))), (x3338*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3340=IKcos(j1);
IkReal x3341=IKsin(j1);
IkReal x3342=((0.045)*cj3);
IkReal x3343=((0.3)*cj3);
IkReal x3344=(sj3*x3341);
IkReal x3345=(cj3*x3341);
IkReal x3346=(sj3*x3340);
IkReal x3347=(pz*x3341);
IkReal x3348=(pz*x3340);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3348+(((-1.0)*x3343)));
evalcond[1]=((0.045)+x3347+(((-1.0)*x3342))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x3347))+(((1.1)*x3348)));
evalcond[3]=((((0.3)*x3346))+(((-1.0)*x3340*x3342))+(((0.55)*x3341))+((x3341*x3343))+(((0.045)*x3340))+(((0.045)*x3344)));
evalcond[4]=((((0.3)*x3344))+(((-1.0)*x3340*x3343))+(((-0.045)*x3346))+(((-1.0)*x3341*x3342))+pz+(((-0.55)*x3340))+(((0.045)*x3341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3349 = IKatan2WithCheck((gconst74*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),(gconst74*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3349.valid){
continue;
}
j1array[0]=x3349.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3350=IKcos(j1);
IkReal x3351=IKsin(j1);
IkReal x3352=((0.045)*cj3);
IkReal x3353=((0.3)*cj3);
IkReal x3354=(sj3*x3351);
IkReal x3355=(cj3*x3351);
IkReal x3356=(sj3*x3350);
IkReal x3357=(pz*x3351);
IkReal x3358=(pz*x3350);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3353))+x3358);
evalcond[1]=((0.045)+(((-1.0)*x3352))+x3357+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x3357))+(((1.1)*x3358))+(((-1.0)*pp)));
evalcond[3]=((((0.045)*x3354))+(((0.045)*x3350))+(((0.3)*x3356))+(((-1.0)*x3350*x3352))+(((0.55)*x3351))+((x3351*x3353)));
evalcond[4]=((((0.045)*x3351))+(((-0.045)*x3356))+(((0.3)*x3354))+(((-1.0)*x3351*x3352))+(((-1.0)*x3350*x3353))+pz+(((-0.55)*x3350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3359=(px*sj0);
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3359;
evalcond[3]=((-1.0)*x3359);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst75;
gconst75=IKsign(pz);
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=((1.0)+(((2.40588235294118)*sj3)));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.415647921760391)+sj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=1.0;
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3360=((2.40588235294118)*sj3);
op[0]=((1.0)+x3360);
op[1]=0;
op[2]=((-1.0)+(((-1.0)*x3360)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3362=IKPowWithIntegerCheck(pz,-1);
if(!x3362.valid){
continue;
}
IkReal x3361=x3362.value;
if( IKabs((x3361*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00909090909090909)*x3361*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3361*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))))+IKsqr(((0.00909090909090909)*x3361*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3361*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))), ((0.00909090909090909)*x3361*(((20.845)+(((100.0)*pp))+(((0.405)*cj3))+(((-2.7)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3363=IKcos(j1);
IkReal x3364=IKsin(j1);
IkReal x3365=((0.045)*cj3);
IkReal x3366=((0.3)*cj3);
IkReal x3367=(sj3*x3364);
IkReal x3368=(cj3*x3364);
IkReal x3369=(sj3*x3363);
IkReal x3370=(pz*x3364);
IkReal x3371=(pz*x3363);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3371+(((-1.0)*x3366)));
evalcond[1]=((0.045)+(((-1.0)*x3370))+(((-1.0)*x3365))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x3370))+(((-1.0)*pp))+(((1.1)*x3371)));
evalcond[3]=(((x3363*x3365))+(((-0.045)*x3363))+(((0.045)*x3367))+((x3364*x3366))+(((-0.3)*x3369))+(((0.55)*x3364)));
evalcond[4]=((((-0.55)*x3363))+(((-0.045)*x3364))+(((-0.045)*x3369))+pz+(((-1.0)*x3363*x3366))+((x3364*x3365))+(((-0.3)*x3367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3373=IKPowWithIntegerCheck(pz,-1);
if(!x3373.valid){
continue;
}
IkReal x3372=x3373.value;
if( IKabs(((0.111111111111111)*x3372*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3372*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.111111111111111)*x3372*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))))+IKsqr((x3372*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.111111111111111)*x3372*(((-39.25)+(((100.0)*pp))+(((-33.0)*cj3))+(((-4.95)*sj3))))), (x3372*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3374=IKcos(j1);
IkReal x3375=IKsin(j1);
IkReal x3376=((0.045)*cj3);
IkReal x3377=((0.3)*cj3);
IkReal x3378=(sj3*x3375);
IkReal x3379=(cj3*x3375);
IkReal x3380=(sj3*x3374);
IkReal x3381=(pz*x3375);
IkReal x3382=(pz*x3374);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3382+(((-1.0)*x3377)));
evalcond[1]=((0.045)+(((-1.0)*x3381))+(((-1.0)*x3376))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x3381))+(((-1.0)*pp))+(((1.1)*x3382)));
evalcond[3]=(((x3375*x3377))+(((0.55)*x3375))+(((-0.045)*x3374))+((x3374*x3376))+(((0.045)*x3378))+(((-0.3)*x3380)));
evalcond[4]=((((-1.0)*x3374*x3377))+((x3375*x3376))+(((-0.3)*x3378))+(((-0.045)*x3375))+pz+(((-0.045)*x3380))+(((-0.55)*x3374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3383 = IKatan2WithCheck((gconst75*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),(gconst75*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3383.valid){
continue;
}
j1array[0]=x3383.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3384=IKcos(j1);
IkReal x3385=IKsin(j1);
IkReal x3386=((0.045)*cj3);
IkReal x3387=((0.3)*cj3);
IkReal x3388=(sj3*x3385);
IkReal x3389=(cj3*x3385);
IkReal x3390=(sj3*x3384);
IkReal x3391=(pz*x3385);
IkReal x3392=(pz*x3384);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3392+(((-1.0)*x3387)));
evalcond[1]=((0.045)+(((-1.0)*x3391))+(((0.3)*sj3))+(((-1.0)*x3386)));
evalcond[2]=((-0.2125)+(((0.09)*x3391))+(((-1.0)*pp))+(((1.1)*x3392)));
evalcond[3]=((((0.55)*x3385))+(((0.045)*x3388))+((x3384*x3386))+((x3385*x3387))+(((-0.045)*x3384))+(((-0.3)*x3390)));
evalcond[4]=((((-1.0)*x3384*x3387))+(((-0.045)*x3390))+pz+((x3385*x3386))+(((-0.045)*x3385))+(((-0.3)*x3388))+(((-0.55)*x3384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3393=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x3393;
evalcond[3]=x3393;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst76;
gconst76=IKsign((((cj0*px))+((py*sj0))));
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3394=(cj0*px);
IkReal x3395=(py*sj0);
IkReal x3396=((36.2220411120167)*pp);
dummyeval[0]=(x3395+x3394);
dummyeval[1]=((((-1.0)*x3394*x3396))+(((-7.28153581454315)*x3394))+(((-7.28153581454315)*x3395))+(((-1.0)*x3395*x3396))+((sj3*x3394))+((sj3*x3395)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3397=(cj0*px);
IkReal x3398=((1.3840830449827)*pp);
IkReal x3399=((3.11349480968858)*sj3);
IkReal x3400=(py*sj0);
IkReal x3401=((1.0)*x3397);
IkReal x3402=((1.0)*x3400);
IkReal x3403=(x3401+x3402);
dummyeval[0]=((((-1.0)*x3399*x3400))+((x3398*x3400))+((x3397*x3398))+(((-1.0)*x3397*x3399))+(((-1.0)*x3403)));
dummyeval[1]=((-1.0)*x3403);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst77;
CheckValue<IkReal> x3404 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
gconst77=((-1.0)*(x3404.value));
IkReal gconst78;
gconst78=IKsin(gconst77);
IkReal gconst79;
gconst79=IKcos(gconst77);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst77))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst95;
gconst95=IKsign((((gconst78*py))+((gconst79*px))));
dummyeval[0]=(((gconst78*py))+((gconst79*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3405=(gconst78*py);
IkReal x3406=((36.2220411120167)*pp);
IkReal x3407=(gconst79*px);
dummyeval[0]=(x3405+x3407);
dummyeval[1]=((((-1.0)*x3405*x3406))+(((-7.28153581454315)*x3407))+(((-7.28153581454315)*x3405))+((sj3*x3407))+((sj3*x3405))+(((-1.0)*x3406*x3407)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3408=(gconst79*px);
IkReal x3409=((3.11349480968858)*sj3);
IkReal x3410=(gconst78*py);
IkReal x3411=((1.3840830449827)*pp);
IkReal x3412=((1.0)*x3410);
IkReal x3413=((1.0)*x3408);
IkReal x3414=(x3412+x3413);
dummyeval[0]=(((x3408*x3411))+(((-1.0)*x3408*x3409))+(((-1.0)*x3409*x3410))+((x3410*x3411))+(((-1.0)*x3414)));
dummyeval[1]=((-1.0)*x3414);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3416 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3416.valid){
continue;
}
IkReal x3415=x3416.value;
j1array[0]=((-1.0)*x3415);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3415)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3417=IKcos(j1);
evalcond[0]=((((0.1275)*x3417))+(((0.30675)*sj3*x3417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3418=(gconst78*py);
IkReal x3419=(gconst79*px);
IkReal x3420=((0.138057984353428)*pp);
IkReal x3421=((0.310561435803037)*sj3);
IkReal x3422=((0.0414173953060285)*pp);
CheckValue<IkReal> x3423=IKPowWithIntegerCheck((((x3418*x3420))+(((-0.099746893695352)*x3419))+(((-0.099746893695352)*x3418))+(((-1.0)*x3419*x3421))+(((-1.0)*x3418*x3421))+((x3419*x3420))),-1);
if(!x3423.valid){
continue;
}
CheckValue<IkReal> x3424=IKPowWithIntegerCheck(((((-1.0)*x3418))+(((-1.0)*x3419))),-1);
if(!x3424.valid){
continue;
}
if( IKabs(((x3423.value)*(((-0.00832593189139439)+(((-1.0)*x3422))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x3422)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3424.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3423.value)*(((-0.00832593189139439)+(((-1.0)*x3422))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x3422))))))+IKsqr(((x3424.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3423.value)*(((-0.00832593189139439)+(((-1.0)*x3422))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x3422))))), ((x3424.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3425=IKsin(j1);
IkReal x3426=IKcos(j1);
IkReal x3427=(gconst78*py);
IkReal x3428=(gconst79*px);
IkReal x3429=((0.045)*cj3);
IkReal x3430=((0.3)*cj3);
IkReal x3431=((1.0)*x3426);
IkReal x3432=(sj3*x3425);
IkReal x3433=(sj3*x3426);
IkReal x3434=((0.09)*x3426);
IkReal x3435=((1.1)*x3425);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3425*x3427))+((x3425*x3428))+(((-1.0)*x3430)));
evalcond[1]=((0.045)+(((-1.0)*x3427*x3431))+(((-1.0)*x3428*x3431))+(((-1.0)*x3429))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3428*x3434))+((x3428*x3435))+((x3427*x3435))+((x3427*x3434))+(((-1.0)*pp)));
evalcond[3]=((((-0.138057984353428)*pp*x3425))+(((-0.185020708697653)*x3426))+(((-0.92038656235619)*pp*x3426))+(((0.310561435803037)*x3432))+(((0.0254095720202485)*x3433))+(((0.099746893695352)*x3425)));
evalcond[4]=(((x3425*x3430))+(((0.55)*x3425))+(((-1.0)*x3426*x3429))+(((0.045)*x3432))+(((0.045)*x3426))+(((0.3)*x3433))+(((-1.0)*x3427))+(((-1.0)*x3428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3436=(gconst79*px);
IkReal x3437=((0.0254095720202485)*sj3);
IkReal x3438=(gconst78*py);
IkReal x3439=((0.92038656235619)*pp);
CheckValue<IkReal> x3440=IKPowWithIntegerCheck((x3438+x3436),-1);
if(!x3440.valid){
continue;
}
CheckValue<IkReal> x3441=IKPowWithIntegerCheck(((((-0.185020708697653)*x3436))+(((-0.185020708697653)*x3438))+(((-1.0)*x3436*x3439))+(((-1.0)*x3438*x3439))+((x3436*x3437))+((x3437*x3438))),-1);
if(!x3441.valid){
continue;
}
if( IKabs(((x3440.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3441.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3440.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3441.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3440.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3441.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3442=IKsin(j1);
IkReal x3443=IKcos(j1);
IkReal x3444=(gconst78*py);
IkReal x3445=(gconst79*px);
IkReal x3446=((0.045)*cj3);
IkReal x3447=((0.3)*cj3);
IkReal x3448=((1.0)*x3443);
IkReal x3449=(sj3*x3442);
IkReal x3450=(sj3*x3443);
IkReal x3451=((0.09)*x3443);
IkReal x3452=((1.1)*x3442);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3442*x3444))+((x3442*x3445))+(((-1.0)*x3447)));
evalcond[1]=((0.045)+(((0.3)*sj3))+(((-1.0)*x3444*x3448))+(((-1.0)*x3445*x3448))+(((-1.0)*x3446)));
evalcond[2]=((-0.2125)+((x3444*x3451))+((x3444*x3452))+(((-1.0)*pp))+((x3445*x3452))+((x3445*x3451)));
evalcond[3]=((((0.0254095720202485)*x3450))+(((-0.138057984353428)*pp*x3442))+(((-0.185020708697653)*x3443))+(((0.310561435803037)*x3449))+(((0.099746893695352)*x3442))+(((-0.92038656235619)*pp*x3443)));
evalcond[4]=((((0.55)*x3442))+((x3442*x3447))+(((0.3)*x3450))+(((-1.0)*x3445))+(((-1.0)*x3444))+(((-1.0)*x3443*x3446))+(((0.045)*x3449))+(((0.045)*x3443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3453 = IKatan2WithCheck((gconst95*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst95*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
j1array[0]=x3453.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3454=IKsin(j1);
IkReal x3455=IKcos(j1);
IkReal x3456=(gconst78*py);
IkReal x3457=(gconst79*px);
IkReal x3458=((0.045)*cj3);
IkReal x3459=((0.3)*cj3);
IkReal x3460=((1.0)*x3455);
IkReal x3461=(sj3*x3454);
IkReal x3462=(sj3*x3455);
IkReal x3463=((0.09)*x3455);
IkReal x3464=((1.1)*x3454);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3459))+((x3454*x3457))+((x3454*x3456)));
evalcond[1]=((0.045)+(((-1.0)*x3458))+(((0.3)*sj3))+(((-1.0)*x3456*x3460))+(((-1.0)*x3457*x3460)));
evalcond[2]=((-0.2125)+((x3457*x3463))+((x3457*x3464))+(((-1.0)*pp))+((x3456*x3463))+((x3456*x3464)));
evalcond[3]=((((-0.138057984353428)*pp*x3454))+(((-0.185020708697653)*x3455))+(((0.0254095720202485)*x3462))+(((0.099746893695352)*x3454))+(((0.310561435803037)*x3461))+(((-0.92038656235619)*pp*x3455)));
evalcond[4]=((((0.045)*x3461))+(((-1.0)*x3456))+(((-1.0)*x3457))+(((-1.0)*x3455*x3458))+(((0.045)*x3455))+((x3454*x3459))+(((0.3)*x3462))+(((0.55)*x3454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst80;
CheckValue<IkReal> x3465 = IKatan2WithCheck(((-1.0)*px),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x3465.valid){
continue;
}
gconst80=((3.14159265358979)+(((-1.0)*(x3465.value))));
IkReal gconst81;
gconst81=IKsin(gconst80);
IkReal gconst82;
gconst82=IKcos(gconst80);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst80))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst96;
gconst96=IKsign((((gconst82*px))+((gconst81*py))));
dummyeval[0]=(((gconst82*px))+((gconst81*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3466=(gconst82*px);
IkReal x3467=((36.2220411120167)*pp);
IkReal x3468=(gconst81*py);
dummyeval[0]=(x3466+x3468);
dummyeval[1]=((((-1.0)*x3467*x3468))+((sj3*x3466))+((sj3*x3468))+(((-7.28153581454315)*x3466))+(((-7.28153581454315)*x3468))+(((-1.0)*x3466*x3467)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3469=(gconst82*px);
IkReal x3470=(gconst81*py);
IkReal x3471=((1.3840830449827)*pp);
IkReal x3472=((3.11349480968858)*sj3);
IkReal x3473=((1.0)*x3469);
IkReal x3474=((1.0)*x3470);
IkReal x3475=(x3474+x3473);
dummyeval[0]=(((x3470*x3471))+((x3469*x3471))+(((-1.0)*x3469*x3472))+(((-1.0)*x3470*x3472))+(((-1.0)*x3475)));
dummyeval[1]=((-1.0)*x3475);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3477 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
IkReal x3476=x3477.value;
j1array[0]=((-1.0)*x3476);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3476)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3478=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x3478))+(((0.1275)*x3478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3479=(gconst82*px);
IkReal x3480=(gconst81*py);
IkReal x3481=((0.138057984353428)*pp);
IkReal x3482=((0.310561435803037)*sj3);
IkReal x3483=((0.0414173953060285)*pp);
CheckValue<IkReal> x3484=IKPowWithIntegerCheck(((((-0.099746893695352)*x3479))+(((-0.099746893695352)*x3480))+((x3479*x3481))+(((-1.0)*x3479*x3482))+((x3480*x3481))+(((-1.0)*x3480*x3482))),-1);
if(!x3484.valid){
continue;
}
CheckValue<IkReal> x3485=IKPowWithIntegerCheck(((((-1.0)*x3480))+(((-1.0)*x3479))),-1);
if(!x3485.valid){
continue;
}
if( IKabs(((x3484.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3483))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x3483)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3485.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3484.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3483))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x3483))))))+IKsqr(((x3485.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3484.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3483))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-1.0)*x3483))))), ((x3485.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3486=IKsin(j1);
IkReal x3487=IKcos(j1);
IkReal x3488=((0.3)*cj3);
IkReal x3489=((0.045)*cj3);
IkReal x3490=(gconst82*px);
IkReal x3491=(gconst81*py);
IkReal x3492=(sj3*x3486);
IkReal x3493=(sj3*x3487);
IkReal x3494=((1.0)*x3487);
IkReal x3495=((1.1)*x3486);
IkReal x3496=((0.09)*x3487);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3486*x3491))+((x3486*x3490))+(((-1.0)*x3488)));
evalcond[1]=((0.045)+(((-1.0)*x3490*x3494))+(((0.3)*sj3))+(((-1.0)*x3489))+(((-1.0)*x3491*x3494)));
evalcond[2]=((-0.2125)+((x3491*x3495))+((x3491*x3496))+(((-1.0)*pp))+((x3490*x3496))+((x3490*x3495)));
evalcond[3]=((((0.099746893695352)*x3486))+(((-0.138057984353428)*pp*x3486))+(((0.310561435803037)*x3492))+(((-0.185020708697653)*x3487))+(((0.0254095720202485)*x3493))+(((-0.92038656235619)*pp*x3487)));
evalcond[4]=((((0.045)*x3487))+((x3486*x3488))+(((0.3)*x3493))+(((0.55)*x3486))+(((0.045)*x3492))+(((-1.0)*x3487*x3489))+(((-1.0)*x3491))+(((-1.0)*x3490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3497=(gconst82*px);
IkReal x3498=((0.0254095720202485)*sj3);
IkReal x3499=(gconst81*py);
IkReal x3500=((0.92038656235619)*pp);
CheckValue<IkReal> x3501=IKPowWithIntegerCheck((x3499+x3497),-1);
if(!x3501.valid){
continue;
}
CheckValue<IkReal> x3502=IKPowWithIntegerCheck((((x3498*x3499))+((x3497*x3498))+(((-1.0)*x3499*x3500))+(((-1.0)*x3497*x3500))+(((-0.185020708697653)*x3499))+(((-0.185020708697653)*x3497))),-1);
if(!x3502.valid){
continue;
}
if( IKabs(((x3501.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3502.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3501.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3502.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3501.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3502.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3503=IKsin(j1);
IkReal x3504=IKcos(j1);
IkReal x3505=((0.3)*cj3);
IkReal x3506=((0.045)*cj3);
IkReal x3507=(gconst82*px);
IkReal x3508=(gconst81*py);
IkReal x3509=(sj3*x3503);
IkReal x3510=(sj3*x3504);
IkReal x3511=((1.0)*x3504);
IkReal x3512=((1.1)*x3503);
IkReal x3513=((0.09)*x3504);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3505))+((x3503*x3508))+((x3503*x3507)));
evalcond[1]=((0.045)+(((-1.0)*x3506))+(((-1.0)*x3508*x3511))+(((0.3)*sj3))+(((-1.0)*x3507*x3511)));
evalcond[2]=((-0.2125)+((x3507*x3512))+((x3507*x3513))+(((-1.0)*pp))+((x3508*x3513))+((x3508*x3512)));
evalcond[3]=((((0.310561435803037)*x3509))+(((0.0254095720202485)*x3510))+(((-0.92038656235619)*pp*x3504))+(((-0.138057984353428)*pp*x3503))+(((-0.185020708697653)*x3504))+(((0.099746893695352)*x3503)));
evalcond[4]=((((0.55)*x3503))+(((0.045)*x3509))+(((0.045)*x3504))+((x3503*x3505))+(((-1.0)*x3504*x3506))+(((-1.0)*x3507))+(((-1.0)*x3508))+(((0.3)*x3510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3514 = IKatan2WithCheck((gconst96*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst96*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3514.valid){
continue;
}
j1array[0]=x3514.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3515=IKsin(j1);
IkReal x3516=IKcos(j1);
IkReal x3517=((0.3)*cj3);
IkReal x3518=((0.045)*cj3);
IkReal x3519=(gconst82*px);
IkReal x3520=(gconst81*py);
IkReal x3521=(sj3*x3515);
IkReal x3522=(sj3*x3516);
IkReal x3523=((1.0)*x3516);
IkReal x3524=((1.1)*x3515);
IkReal x3525=((0.09)*x3516);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3517))+((x3515*x3519))+((x3515*x3520)));
evalcond[1]=((0.045)+(((-1.0)*x3519*x3523))+(((-1.0)*x3518))+(((0.3)*sj3))+(((-1.0)*x3520*x3523)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x3520*x3524))+((x3520*x3525))+((x3519*x3525))+((x3519*x3524)));
evalcond[3]=((((0.0254095720202485)*x3522))+(((-0.138057984353428)*pp*x3515))+(((-0.92038656235619)*pp*x3516))+(((0.310561435803037)*x3521))+(((-0.185020708697653)*x3516))+(((0.099746893695352)*x3515)));
evalcond[4]=((((-1.0)*x3520))+(((0.55)*x3515))+((x3515*x3517))+(((0.045)*x3516))+(((-1.0)*x3519))+(((0.045)*x3521))+(((0.3)*x3522))+(((-1.0)*x3516*x3518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst83;
CheckValue<IkReal> x3526 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3526.valid){
continue;
}
gconst83=((-1.0)*(x3526.value));
IkReal gconst84;
gconst84=IKsin(gconst83);
IkReal gconst85;
gconst85=IKcos(gconst83);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst83))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst97;
gconst97=IKsign((((gconst85*px))+((gconst84*py))));
dummyeval[0]=(((gconst85*px))+((gconst84*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3527=(gconst85*px);
IkReal x3528=(gconst84*py);
IkReal x3529=((36.2220411120167)*pp);
dummyeval[0]=(x3527+x3528);
dummyeval[1]=((((-1.0)*x3527*x3529))+(((-7.28153581454315)*x3527))+(((-7.28153581454315)*x3528))+((sj3*x3527))+((sj3*x3528))+(((-1.0)*x3528*x3529)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3530=(gconst84*py);
IkReal x3531=((1.3840830449827)*pp);
IkReal x3532=((3.11349480968858)*sj3);
IkReal x3533=(gconst85*px);
IkReal x3534=((1.0)*x3530);
IkReal x3535=((1.0)*x3533);
IkReal x3536=(x3535+x3534);
dummyeval[0]=(((x3531*x3533))+(((-1.0)*x3536))+(((-1.0)*x3530*x3532))+((x3530*x3531))+(((-1.0)*x3532*x3533)));
dummyeval[1]=((-1.0)*x3536);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3538 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3538.valid){
continue;
}
IkReal x3537=x3538.value;
j1array[0]=((-1.0)*x3537);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3537)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3539=IKcos(j1);
evalcond[0]=((((0.1275)*x3539))+(((0.30675)*sj3*x3539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3540=(gconst85*px);
IkReal x3541=((0.138057984353428)*pp);
IkReal x3542=((0.310561435803037)*sj3);
IkReal x3543=((0.0414173953060285)*pp);
IkReal x3544=(gconst84*py);
CheckValue<IkReal> x3545=IKPowWithIntegerCheck(((((-0.099746893695352)*x3544))+(((-0.099746893695352)*x3540))+((x3541*x3544))+(((-1.0)*x3542*x3544))+((x3540*x3541))+(((-1.0)*x3540*x3542))),-1);
if(!x3545.valid){
continue;
}
CheckValue<IkReal> x3546=IKPowWithIntegerCheck(((((-1.0)*x3540))+(((-1.0)*x3544))),-1);
if(!x3546.valid){
continue;
}
if( IKabs(((x3545.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3543))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x3543)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3546.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3545.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3543))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x3543))))))+IKsqr(((x3546.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3545.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3543))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x3543))))), ((x3546.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3547=IKsin(j1);
IkReal x3548=IKcos(j1);
IkReal x3549=((0.3)*cj3);
IkReal x3550=((0.045)*cj3);
IkReal x3551=(sj3*x3547);
IkReal x3552=(sj3*x3548);
IkReal x3553=((1.0)*gconst84*py);
IkReal x3554=(gconst85*px*x3548);
IkReal x3555=(gconst85*px*x3547);
IkReal x3556=(gconst84*py*x3547);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3556+x3555+(((-1.0)*x3549)));
evalcond[1]=((0.045)+(((-1.0)*x3548*x3553))+(((-1.0)*x3554))+(((-1.0)*x3550))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3556))+(((1.1)*x3555))+(((0.09)*gconst84*py*x3548))+(((-1.0)*pp))+(((0.09)*x3554)));
evalcond[3]=((((0.0254095720202485)*x3552))+(((0.310561435803037)*x3551))+(((0.099746893695352)*x3547))+(((-0.92038656235619)*pp*x3548))+(((-0.138057984353428)*pp*x3547))+(((-0.185020708697653)*x3548)));
evalcond[4]=((((-1.0)*gconst85*px))+(((0.55)*x3547))+(((0.045)*x3548))+(((0.045)*x3551))+((x3547*x3549))+(((-1.0)*x3548*x3550))+(((0.3)*x3552))+(((-1.0)*x3553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3557=(gconst84*py);
IkReal x3558=(gconst85*px);
IkReal x3559=((0.92038656235619)*pp);
IkReal x3560=((0.0254095720202485)*sj3);
CheckValue<IkReal> x3561=IKPowWithIntegerCheck((x3557+x3558),-1);
if(!x3561.valid){
continue;
}
CheckValue<IkReal> x3562=IKPowWithIntegerCheck(((((-1.0)*x3557*x3559))+(((-0.185020708697653)*x3557))+(((-0.185020708697653)*x3558))+(((-1.0)*x3558*x3559))+((x3557*x3560))+((x3558*x3560))),-1);
if(!x3562.valid){
continue;
}
if( IKabs(((x3561.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3562.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3561.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3562.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3561.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3562.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3563=IKsin(j1);
IkReal x3564=IKcos(j1);
IkReal x3565=((0.3)*cj3);
IkReal x3566=((0.045)*cj3);
IkReal x3567=(sj3*x3563);
IkReal x3568=(sj3*x3564);
IkReal x3569=((1.0)*gconst84*py);
IkReal x3570=(gconst85*px*x3564);
IkReal x3571=(gconst85*px*x3563);
IkReal x3572=(gconst84*py*x3563);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3571+x3572+(((-1.0)*x3565)));
evalcond[1]=((0.045)+(((-1.0)*x3566))+(((-1.0)*x3564*x3569))+(((0.3)*sj3))+(((-1.0)*x3570)));
evalcond[2]=((-0.2125)+(((0.09)*gconst84*py*x3564))+(((-1.0)*pp))+(((1.1)*x3571))+(((1.1)*x3572))+(((0.09)*x3570)));
evalcond[3]=((((-0.92038656235619)*pp*x3564))+(((-0.138057984353428)*pp*x3563))+(((0.0254095720202485)*x3568))+(((0.310561435803037)*x3567))+(((0.099746893695352)*x3563))+(((-0.185020708697653)*x3564)));
evalcond[4]=(((x3563*x3565))+(((-1.0)*gconst85*px))+(((0.045)*x3564))+(((0.045)*x3567))+(((0.3)*x3568))+(((0.55)*x3563))+(((-1.0)*x3569))+(((-1.0)*x3564*x3566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3573 = IKatan2WithCheck((gconst97*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst97*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
j1array[0]=x3573.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3574=IKsin(j1);
IkReal x3575=IKcos(j1);
IkReal x3576=((0.3)*cj3);
IkReal x3577=((0.045)*cj3);
IkReal x3578=(sj3*x3574);
IkReal x3579=(sj3*x3575);
IkReal x3580=((1.0)*gconst84*py);
IkReal x3581=(gconst85*px*x3575);
IkReal x3582=(gconst85*px*x3574);
IkReal x3583=(gconst84*py*x3574);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3582+x3583+(((-1.0)*x3576)));
evalcond[1]=((0.045)+(((-1.0)*x3577))+(((-1.0)*x3575*x3580))+(((0.3)*sj3))+(((-1.0)*x3581)));
evalcond[2]=((-0.2125)+(((0.09)*x3581))+(((-1.0)*pp))+(((0.09)*gconst84*py*x3575))+(((1.1)*x3583))+(((1.1)*x3582)));
evalcond[3]=((((0.310561435803037)*x3578))+(((-0.138057984353428)*pp*x3574))+(((-0.92038656235619)*pp*x3575))+(((-0.185020708697653)*x3575))+(((0.099746893695352)*x3574))+(((0.0254095720202485)*x3579)));
evalcond[4]=((((-1.0)*gconst85*px))+(((0.3)*x3579))+(((-1.0)*x3575*x3577))+(((0.55)*x3574))+(((0.045)*x3575))+(((0.045)*x3578))+((x3574*x3576))+(((-1.0)*x3580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst86;
CheckValue<IkReal> x3584 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3584.valid){
continue;
}
gconst86=((3.14159265358979)+(((-1.0)*(x3584.value))));
IkReal gconst87;
gconst87=IKsin(gconst86);
IkReal gconst88;
gconst88=IKcos(gconst86);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst86))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst98;
gconst98=IKsign((((gconst87*py))+((gconst88*px))));
dummyeval[0]=(((gconst87*py))+((gconst88*px)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3585=(gconst88*px);
IkReal x3586=(gconst87*py);
IkReal x3587=((36.2220411120167)*pp);
dummyeval[0]=(x3585+x3586);
dummyeval[1]=(((sj3*x3586))+((sj3*x3585))+(((-7.28153581454315)*x3586))+(((-7.28153581454315)*x3585))+(((-1.0)*x3586*x3587))+(((-1.0)*x3585*x3587)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3588=(gconst88*px);
IkReal x3589=((3.11349480968858)*sj3);
IkReal x3590=((1.3840830449827)*pp);
IkReal x3591=(gconst87*py);
IkReal x3592=((1.0)*x3591);
IkReal x3593=((1.0)*x3588);
IkReal x3594=(x3593+x3592);
dummyeval[0]=((((-1.0)*x3589*x3591))+((x3590*x3591))+((x3588*x3590))+(((-1.0)*x3594))+(((-1.0)*x3588*x3589)));
dummyeval[1]=((-1.0)*x3594);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3596 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3596.valid){
continue;
}
IkReal x3595=x3596.value;
j1array[0]=((-1.0)*x3595);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3595)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3597=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x3597))+(((0.1275)*x3597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3598=(gconst88*px);
IkReal x3599=((0.0414173953060285)*pp);
IkReal x3600=(gconst87*py);
IkReal x3601=((0.138057984353428)*pp);
IkReal x3602=((0.310561435803037)*sj3);
CheckValue<IkReal> x3603=IKPowWithIntegerCheck(((((-0.099746893695352)*x3600))+((x3598*x3601))+(((-0.099746893695352)*x3598))+(((-1.0)*x3598*x3602))+((x3600*x3601))+(((-1.0)*x3600*x3602))),-1);
if(!x3603.valid){
continue;
}
CheckValue<IkReal> x3604=IKPowWithIntegerCheck(((((-1.0)*x3600))+(((-1.0)*x3598))),-1);
if(!x3604.valid){
continue;
}
if( IKabs(((x3603.value)*(((-0.00832593189139439)+((cj3*x3599))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3599))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3604.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3603.value)*(((-0.00832593189139439)+((cj3*x3599))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3599))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3604.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3603.value)*(((-0.00832593189139439)+((cj3*x3599))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x3599))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3604.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3605=IKsin(j1);
IkReal x3606=IKcos(j1);
IkReal x3607=(gconst87*py);
IkReal x3608=(gconst88*px);
IkReal x3609=((0.045)*sj3);
IkReal x3610=((0.3)*cj3);
IkReal x3611=((0.045)*cj3);
IkReal x3612=((0.09)*x3606);
IkReal x3613=(sj3*x3606);
IkReal x3614=((1.0)*x3606);
IkReal x3615=((1.1)*x3605);
evalcond[0]=((-0.55)+(((-1.0)*x3609))+(((-1.0)*x3610))+((x3605*x3608))+((x3605*x3607)));
evalcond[1]=((0.045)+(((-1.0)*x3607*x3614))+(((-1.0)*x3608*x3614))+(((-1.0)*x3611))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3608*x3612))+((x3608*x3615))+((x3607*x3615))+((x3607*x3612))+(((-1.0)*pp)));
evalcond[3]=((((-0.138057984353428)*pp*x3605))+(((0.099746893695352)*x3605))+(((0.310561435803037)*sj3*x3605))+(((0.0254095720202485)*x3613))+(((-0.92038656235619)*pp*x3606))+(((-0.185020708697653)*x3606)));
evalcond[4]=(((x3605*x3610))+(((0.3)*x3613))+(((-1.0)*x3607))+(((-1.0)*x3608))+(((0.55)*x3605))+(((0.045)*x3606))+((x3605*x3609))+(((-1.0)*x3606*x3611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3616=(gconst87*py);
IkReal x3617=((0.0254095720202485)*sj3);
IkReal x3618=((0.92038656235619)*pp);
IkReal x3619=(gconst88*px);
CheckValue<IkReal> x3620=IKPowWithIntegerCheck((x3616+x3619),-1);
if(!x3620.valid){
continue;
}
CheckValue<IkReal> x3621=IKPowWithIntegerCheck(((((-1.0)*x3616*x3618))+(((-1.0)*x3618*x3619))+((x3616*x3617))+((x3617*x3619))+(((-0.185020708697653)*x3619))+(((-0.185020708697653)*x3616))),-1);
if(!x3621.valid){
continue;
}
if( IKabs(((x3620.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3621.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3620.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3621.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3620.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3621.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3622=IKsin(j1);
IkReal x3623=IKcos(j1);
IkReal x3624=(gconst87*py);
IkReal x3625=(gconst88*px);
IkReal x3626=((0.045)*sj3);
IkReal x3627=((0.3)*cj3);
IkReal x3628=((0.045)*cj3);
IkReal x3629=((0.09)*x3623);
IkReal x3630=(sj3*x3623);
IkReal x3631=((1.0)*x3623);
IkReal x3632=((1.1)*x3622);
evalcond[0]=((-0.55)+(((-1.0)*x3626))+(((-1.0)*x3627))+((x3622*x3625))+((x3622*x3624)));
evalcond[1]=((0.045)+(((-1.0)*x3628))+(((0.3)*sj3))+(((-1.0)*x3624*x3631))+(((-1.0)*x3625*x3631)));
evalcond[2]=((-0.2125)+((x3625*x3632))+(((-1.0)*pp))+((x3624*x3629))+((x3625*x3629))+((x3624*x3632)));
evalcond[3]=((((-0.92038656235619)*pp*x3623))+(((-0.185020708697653)*x3623))+(((-0.138057984353428)*pp*x3622))+(((0.310561435803037)*sj3*x3622))+(((0.0254095720202485)*x3630))+(((0.099746893695352)*x3622)));
evalcond[4]=((((0.3)*x3630))+(((0.55)*x3622))+(((0.045)*x3623))+(((-1.0)*x3623*x3628))+((x3622*x3626))+((x3622*x3627))+(((-1.0)*x3625))+(((-1.0)*x3624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3633 = IKatan2WithCheck((gconst98*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst98*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
j1array[0]=x3633.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3634=IKsin(j1);
IkReal x3635=IKcos(j1);
IkReal x3636=(gconst87*py);
IkReal x3637=(gconst88*px);
IkReal x3638=((0.045)*sj3);
IkReal x3639=((0.3)*cj3);
IkReal x3640=((0.045)*cj3);
IkReal x3641=((0.09)*x3635);
IkReal x3642=(sj3*x3635);
IkReal x3643=((1.0)*x3635);
IkReal x3644=((1.1)*x3634);
evalcond[0]=((-0.55)+(((-1.0)*x3639))+(((-1.0)*x3638))+((x3634*x3637))+((x3634*x3636)));
evalcond[1]=((0.045)+(((-1.0)*x3636*x3643))+(((-1.0)*x3637*x3643))+(((0.3)*sj3))+(((-1.0)*x3640)));
evalcond[2]=((-0.2125)+((x3637*x3644))+((x3637*x3641))+(((-1.0)*pp))+((x3636*x3644))+((x3636*x3641)));
evalcond[3]=((((-0.138057984353428)*pp*x3634))+(((0.0254095720202485)*x3642))+(((0.099746893695352)*x3634))+(((-0.92038656235619)*pp*x3635))+(((-0.185020708697653)*x3635))+(((0.310561435803037)*sj3*x3634)));
evalcond[4]=((((-1.0)*x3635*x3640))+(((0.3)*x3642))+((x3634*x3638))+((x3634*x3639))+(((-1.0)*x3637))+(((-1.0)*x3636))+(((0.55)*x3634))+(((0.045)*x3635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst89;
CheckValue<IkReal> x3645 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3645.valid){
continue;
}
gconst89=((-1.0)*(x3645.value));
IkReal gconst90;
gconst90=IKsin(gconst89);
IkReal gconst91;
gconst91=IKcos(gconst89);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst89))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst99;
gconst99=IKsign((((gconst91*px))+((gconst90*py))));
dummyeval[0]=(((gconst91*px))+((gconst90*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3646=(gconst90*py);
IkReal x3647=(gconst91*px);
IkReal x3648=((36.2220411120167)*pp);
dummyeval[0]=(x3647+x3646);
dummyeval[1]=((((-1.0)*x3646*x3648))+((sj3*x3647))+((sj3*x3646))+(((-7.28153581454315)*x3647))+(((-7.28153581454315)*x3646))+(((-1.0)*x3647*x3648)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3649=(gconst91*px);
IkReal x3650=((1.3840830449827)*pp);
IkReal x3651=(gconst90*py);
IkReal x3652=((3.11349480968858)*sj3);
IkReal x3653=((1.0)*x3649);
IkReal x3654=((1.0)*x3651);
IkReal x3655=(x3654+x3653);
dummyeval[0]=(((x3649*x3650))+((x3650*x3651))+(((-1.0)*x3651*x3652))+(((-1.0)*x3649*x3652))+(((-1.0)*x3655)));
dummyeval[1]=((-1.0)*x3655);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3657 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3657.valid){
continue;
}
IkReal x3656=x3657.value;
j1array[0]=((-1.0)*x3656);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3656)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3658=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x3658))+(((0.1275)*x3658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3659=(gconst91*px);
IkReal x3660=((0.138057984353428)*pp);
IkReal x3661=(gconst90*py);
IkReal x3662=((0.310561435803037)*sj3);
IkReal x3663=((0.0414173953060285)*pp);
CheckValue<IkReal> x3664=IKPowWithIntegerCheck((((x3659*x3660))+(((-1.0)*x3661*x3662))+(((-1.0)*x3659*x3662))+(((-0.099746893695352)*x3659))+(((-0.099746893695352)*x3661))+((x3660*x3661))),-1);
if(!x3664.valid){
continue;
}
CheckValue<IkReal> x3665=IKPowWithIntegerCheck(((((-1.0)*x3661))+(((-1.0)*x3659))),-1);
if(!x3665.valid){
continue;
}
if( IKabs(((x3664.value)*(((-0.00832593189139439)+(((-1.0)*x3663))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3663))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3665.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3664.value)*(((-0.00832593189139439)+(((-1.0)*x3663))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3663))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3665.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3664.value)*(((-0.00832593189139439)+(((-1.0)*x3663))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3663))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3665.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3666=IKsin(j1);
IkReal x3667=IKcos(j1);
IkReal x3668=(gconst91*px);
IkReal x3669=((0.3)*cj3);
IkReal x3670=((0.045)*cj3);
IkReal x3671=(gconst90*py);
IkReal x3672=((0.045)*sj3);
IkReal x3673=((0.09)*x3667);
IkReal x3674=(sj3*x3667);
IkReal x3675=((1.1)*x3666);
IkReal x3676=((1.0)*x3667);
evalcond[0]=((-0.55)+(((-1.0)*x3669))+((x3666*x3671))+(((-1.0)*x3672))+((x3666*x3668)));
evalcond[1]=((0.045)+(((-1.0)*x3671*x3676))+(((0.3)*sj3))+(((-1.0)*x3668*x3676))+(((-1.0)*x3670)));
evalcond[2]=((-0.2125)+((x3668*x3675))+((x3668*x3673))+(((-1.0)*pp))+((x3671*x3673))+((x3671*x3675)));
evalcond[3]=((((0.099746893695352)*x3666))+(((-0.185020708697653)*x3667))+(((0.310561435803037)*sj3*x3666))+(((-0.138057984353428)*pp*x3666))+(((-0.92038656235619)*pp*x3667))+(((0.0254095720202485)*x3674)));
evalcond[4]=((((0.045)*x3667))+(((-1.0)*x3668))+(((0.3)*x3674))+(((0.55)*x3666))+((x3666*x3672))+(((-1.0)*x3667*x3670))+(((-1.0)*x3671))+((x3666*x3669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3677=(gconst91*px);
IkReal x3678=(gconst90*py);
IkReal x3679=((0.0254095720202485)*sj3);
IkReal x3680=((0.92038656235619)*pp);
CheckValue<IkReal> x3681=IKPowWithIntegerCheck((x3678+x3677),-1);
if(!x3681.valid){
continue;
}
CheckValue<IkReal> x3682=IKPowWithIntegerCheck((((x3678*x3679))+(((-1.0)*x3677*x3680))+(((-1.0)*x3678*x3680))+(((-0.185020708697653)*x3678))+(((-0.185020708697653)*x3677))+((x3677*x3679))),-1);
if(!x3682.valid){
continue;
}
if( IKabs(((x3681.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3682.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3681.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3682.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3681.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3682.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3683=IKsin(j1);
IkReal x3684=IKcos(j1);
IkReal x3685=(gconst91*px);
IkReal x3686=((0.3)*cj3);
IkReal x3687=((0.045)*cj3);
IkReal x3688=(gconst90*py);
IkReal x3689=((0.045)*sj3);
IkReal x3690=((0.09)*x3684);
IkReal x3691=(sj3*x3684);
IkReal x3692=((1.1)*x3683);
IkReal x3693=((1.0)*x3684);
evalcond[0]=((-0.55)+(((-1.0)*x3686))+(((-1.0)*x3689))+((x3683*x3688))+((x3683*x3685)));
evalcond[1]=((0.045)+(((-1.0)*x3688*x3693))+(((-1.0)*x3685*x3693))+(((-1.0)*x3687))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3688*x3690))+((x3688*x3692))+(((-1.0)*pp))+((x3685*x3692))+((x3685*x3690)));
evalcond[3]=((((0.310561435803037)*sj3*x3683))+(((-0.185020708697653)*x3684))+(((-0.138057984353428)*pp*x3683))+(((-0.92038656235619)*pp*x3684))+(((0.0254095720202485)*x3691))+(((0.099746893695352)*x3683)));
evalcond[4]=((((0.55)*x3683))+(((0.045)*x3684))+(((0.3)*x3691))+(((-1.0)*x3684*x3687))+(((-1.0)*x3688))+(((-1.0)*x3685))+((x3683*x3689))+((x3683*x3686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3694 = IKatan2WithCheck((gconst99*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst99*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3694.valid){
continue;
}
j1array[0]=x3694.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3695=IKsin(j1);
IkReal x3696=IKcos(j1);
IkReal x3697=(gconst91*px);
IkReal x3698=((0.3)*cj3);
IkReal x3699=((0.045)*cj3);
IkReal x3700=(gconst90*py);
IkReal x3701=((0.045)*sj3);
IkReal x3702=((0.09)*x3696);
IkReal x3703=(sj3*x3696);
IkReal x3704=((1.1)*x3695);
IkReal x3705=((1.0)*x3696);
evalcond[0]=((-0.55)+((x3695*x3700))+((x3695*x3697))+(((-1.0)*x3701))+(((-1.0)*x3698)));
evalcond[1]=((0.045)+(((-1.0)*x3697*x3705))+(((-1.0)*x3700*x3705))+(((0.3)*sj3))+(((-1.0)*x3699)));
evalcond[2]=((-0.2125)+((x3697*x3702))+((x3697*x3704))+(((-1.0)*pp))+((x3700*x3704))+((x3700*x3702)));
evalcond[3]=((((-0.185020708697653)*x3696))+(((0.099746893695352)*x3695))+(((-0.138057984353428)*pp*x3695))+(((0.310561435803037)*sj3*x3695))+(((0.0254095720202485)*x3703))+(((-0.92038656235619)*pp*x3696)));
evalcond[4]=((((0.55)*x3695))+(((0.3)*x3703))+((x3695*x3701))+((x3695*x3698))+(((-1.0)*x3696*x3699))+(((0.045)*x3696))+(((-1.0)*x3697))+(((-1.0)*x3700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst92;
CheckValue<IkReal> x3706 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
gconst92=((3.14159265358979)+(((-1.0)*(x3706.value))));
IkReal gconst93;
gconst93=IKsin(gconst92);
IkReal gconst94;
gconst94=IKcos(gconst92);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst92))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst100;
gconst100=IKsign((((gconst94*px))+((gconst93*py))));
dummyeval[0]=(((gconst94*px))+((gconst93*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3707=(gconst93*py);
IkReal x3708=((36.2220411120167)*pp);
IkReal x3709=(gconst94*px);
dummyeval[0]=(x3709+x3707);
dummyeval[1]=((((-7.28153581454315)*x3709))+(((-7.28153581454315)*x3707))+(((-1.0)*x3707*x3708))+(((-1.0)*x3708*x3709))+((sj3*x3707))+((sj3*x3709)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3710=(gconst93*py);
IkReal x3711=((3.11349480968858)*sj3);
IkReal x3712=((1.3840830449827)*pp);
IkReal x3713=(gconst94*px);
IkReal x3714=((1.0)*x3710);
IkReal x3715=((1.0)*x3713);
IkReal x3716=(x3715+x3714);
dummyeval[0]=(((x3710*x3712))+(((-1.0)*x3711*x3713))+(((-1.0)*x3710*x3711))+(((-1.0)*x3716))+((x3712*x3713)));
dummyeval[1]=((-1.0)*x3716);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3718 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3718.valid){
continue;
}
IkReal x3717=x3718.value;
j1array[0]=((-1.0)*x3717);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3717)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3719=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x3719))+(((0.1275)*x3719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3720=((0.0414173953060285)*pp);
IkReal x3721=(gconst94*px);
IkReal x3722=((0.310561435803037)*sj3);
IkReal x3723=(gconst93*py);
IkReal x3724=((0.138057984353428)*pp);
CheckValue<IkReal> x3725=IKPowWithIntegerCheck(((((-0.099746893695352)*x3723))+(((-0.099746893695352)*x3721))+(((-1.0)*x3721*x3722))+((x3723*x3724))+(((-1.0)*x3722*x3723))+((x3721*x3724))),-1);
if(!x3725.valid){
continue;
}
CheckValue<IkReal> x3726=IKPowWithIntegerCheck(((((-1.0)*x3721))+(((-1.0)*x3723))),-1);
if(!x3726.valid){
continue;
}
if( IKabs(((x3725.value)*(((-0.00832593189139439)+(((-1.0)*x3720))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x3720)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3726.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3725.value)*(((-0.00832593189139439)+(((-1.0)*x3720))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x3720))))))+IKsqr(((x3726.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3725.value)*(((-0.00832593189139439)+(((-1.0)*x3720))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x3720))))), ((x3726.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3727=IKsin(j1);
IkReal x3728=IKcos(j1);
IkReal x3729=(gconst94*px);
IkReal x3730=((0.3)*cj3);
IkReal x3731=((0.045)*cj3);
IkReal x3732=((0.045)*sj3);
IkReal x3733=(gconst93*py);
IkReal x3734=((1.0)*x3728);
IkReal x3735=((0.09)*x3728);
IkReal x3736=(sj3*x3728);
IkReal x3737=(x3727*x3733);
evalcond[0]=((-0.55)+((x3727*x3729))+(((-1.0)*x3730))+(((-1.0)*x3732))+x3737);
evalcond[1]=((0.045)+(((-1.0)*x3731))+(((-1.0)*x3729*x3734))+(((0.3)*sj3))+(((-1.0)*x3733*x3734)));
evalcond[2]=((-0.2125)+((x3733*x3735))+((x3729*x3735))+(((1.1)*x3727*x3729))+(((-1.0)*pp))+(((1.1)*x3737)));
evalcond[3]=((((-0.138057984353428)*pp*x3727))+(((0.310561435803037)*sj3*x3727))+(((0.0254095720202485)*x3736))+(((-0.92038656235619)*pp*x3728))+(((0.099746893695352)*x3727))+(((-0.185020708697653)*x3728)));
evalcond[4]=(((x3727*x3730))+((x3727*x3732))+(((-1.0)*x3729))+(((0.045)*x3728))+(((0.55)*x3727))+(((-1.0)*x3733))+(((0.3)*x3736))+(((-1.0)*x3728*x3731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3738=(gconst93*py);
IkReal x3739=((0.0254095720202485)*sj3);
IkReal x3740=(gconst94*px);
IkReal x3741=((0.92038656235619)*pp);
CheckValue<IkReal> x3742=IKPowWithIntegerCheck((x3740+x3738),-1);
if(!x3742.valid){
continue;
}
CheckValue<IkReal> x3743=IKPowWithIntegerCheck((((x3738*x3739))+(((-1.0)*x3740*x3741))+(((-0.185020708697653)*x3738))+(((-0.185020708697653)*x3740))+(((-1.0)*x3738*x3741))+((x3739*x3740))),-1);
if(!x3743.valid){
continue;
}
if( IKabs(((x3742.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3743.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3742.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3743.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3742.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3743.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3744=IKsin(j1);
IkReal x3745=IKcos(j1);
IkReal x3746=(gconst94*px);
IkReal x3747=((0.3)*cj3);
IkReal x3748=((0.045)*cj3);
IkReal x3749=((0.045)*sj3);
IkReal x3750=(gconst93*py);
IkReal x3751=((1.0)*x3745);
IkReal x3752=((0.09)*x3745);
IkReal x3753=(sj3*x3745);
IkReal x3754=(x3744*x3750);
evalcond[0]=((-0.55)+((x3744*x3746))+(((-1.0)*x3749))+(((-1.0)*x3747))+x3754);
evalcond[1]=((0.045)+(((-1.0)*x3750*x3751))+(((-1.0)*x3748))+(((-1.0)*x3746*x3751))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3754))+(((-1.0)*pp))+(((1.1)*x3744*x3746))+((x3750*x3752))+((x3746*x3752)));
evalcond[3]=((((0.099746893695352)*x3744))+(((0.0254095720202485)*x3753))+(((-0.138057984353428)*pp*x3744))+(((-0.92038656235619)*pp*x3745))+(((-0.185020708697653)*x3745))+(((0.310561435803037)*sj3*x3744)));
evalcond[4]=(((x3744*x3747))+((x3744*x3749))+(((-1.0)*x3750))+(((-1.0)*x3746))+(((0.55)*x3744))+(((0.045)*x3745))+(((-1.0)*x3745*x3748))+(((0.3)*x3753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3755 = IKatan2WithCheck((gconst100*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst100*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3755.valid){
continue;
}
j1array[0]=x3755.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3756=IKsin(j1);
IkReal x3757=IKcos(j1);
IkReal x3758=(gconst94*px);
IkReal x3759=((0.3)*cj3);
IkReal x3760=((0.045)*cj3);
IkReal x3761=((0.045)*sj3);
IkReal x3762=(gconst93*py);
IkReal x3763=((1.0)*x3757);
IkReal x3764=((0.09)*x3757);
IkReal x3765=(sj3*x3757);
IkReal x3766=(x3756*x3762);
evalcond[0]=((-0.55)+(((-1.0)*x3759))+x3766+((x3756*x3758))+(((-1.0)*x3761)));
evalcond[1]=((0.045)+(((-1.0)*x3762*x3763))+(((0.3)*sj3))+(((-1.0)*x3760))+(((-1.0)*x3758*x3763)));
evalcond[2]=((-0.2125)+(((1.1)*x3766))+((x3758*x3764))+(((-1.0)*pp))+((x3762*x3764))+(((1.1)*x3756*x3758)));
evalcond[3]=((((0.099746893695352)*x3756))+(((-0.138057984353428)*pp*x3756))+(((-0.92038656235619)*pp*x3757))+(((0.0254095720202485)*x3765))+(((-0.185020708697653)*x3757))+(((0.310561435803037)*sj3*x3756)));
evalcond[4]=((((-1.0)*x3757*x3760))+((x3756*x3761))+(((-1.0)*x3762))+(((0.3)*x3765))+(((-1.0)*x3758))+(((0.55)*x3756))+(((0.045)*x3757))+((x3756*x3759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3768 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3768.valid){
continue;
}
IkReal x3767=x3768.value;
j1array[0]=((-1.0)*x3767);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3767)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3769=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x3769))+(((0.1275)*x3769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3771 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3771.valid){
continue;
}
IkReal x3770=x3771.value;
j1array[0]=((-1.0)*x3770);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3770)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3772=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x3772))+(((0.1275)*x3772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3774 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3774.valid){
continue;
}
IkReal x3773=x3774.value;
j1array[0]=((-1.0)*x3773);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3773)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3775=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x3775))+(((0.1275)*x3775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3777 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3777.valid){
continue;
}
IkReal x3776=x3777.value;
j1array[0]=((-1.0)*x3776);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3776)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3778=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x3778))+(((0.1275)*x3778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3780 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((0.129084215370456)+(((0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3780.valid){
continue;
}
IkReal x3779=x3780.value;
j1array[0]=((-1.0)*x3779);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3779)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3781=IKcos(j1);
evalcond[0]=((((0.30675)*sj3*x3781))+(((0.1275)*x3781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3782=(py*sj0);
IkReal x3783=((0.310561435803037)*sj3);
IkReal x3784=((0.0414173953060285)*pp);
IkReal x3785=(cj0*px);
IkReal x3786=((0.138057984353428)*pp);
CheckValue<IkReal> x3787=IKPowWithIntegerCheck((((x3785*x3786))+(((-1.0)*x3782*x3783))+((x3782*x3786))+(((-1.0)*x3783*x3785))+(((-0.099746893695352)*x3782))+(((-0.099746893695352)*x3785))),-1);
if(!x3787.valid){
continue;
}
CheckValue<IkReal> x3788=IKPowWithIntegerCheck(((((-1.0)*x3785))+(((-1.0)*x3782))),-1);
if(!x3788.valid){
continue;
}
if( IKabs(((x3787.value)*(((-0.00832593189139439)+((cj3*x3784))+(((-1.0)*x3784))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3788.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3787.value)*(((-0.00832593189139439)+((cj3*x3784))+(((-1.0)*x3784))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3788.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3787.value)*(((-0.00832593189139439)+((cj3*x3784))+(((-1.0)*x3784))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3788.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3789=IKsin(j1);
IkReal x3790=IKcos(j1);
IkReal x3791=((0.045)*sj3);
IkReal x3792=((0.3)*cj3);
IkReal x3793=((0.045)*cj3);
IkReal x3794=(cj0*px);
IkReal x3795=(py*sj0);
IkReal x3796=((1.0)*x3790);
IkReal x3797=(sj3*x3790);
IkReal x3798=((0.09)*x3790);
IkReal x3799=((1.1)*x3789);
evalcond[0]=((-0.55)+(((-1.0)*x3791))+(((-1.0)*x3792))+((x3789*x3794))+((x3789*x3795)));
evalcond[1]=((0.045)+(((-1.0)*x3793))+(((-1.0)*x3795*x3796))+(((0.3)*sj3))+(((-1.0)*x3794*x3796)));
evalcond[2]=((-0.2125)+((x3795*x3798))+((x3795*x3799))+(((-1.0)*pp))+((x3794*x3799))+((x3794*x3798)));
evalcond[3]=((((-0.92038656235619)*pp*x3790))+(((-0.185020708697653)*x3790))+(((0.0254095720202485)*x3797))+(((0.099746893695352)*x3789))+(((0.310561435803037)*sj3*x3789))+(((-0.138057984353428)*pp*x3789)));
evalcond[4]=((((0.55)*x3789))+(((-1.0)*x3794))+(((-1.0)*x3795))+((x3789*x3791))+((x3789*x3792))+(((-1.0)*x3790*x3793))+(((0.3)*x3797))+(((0.045)*x3790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3800=(cj0*px);
IkReal x3801=(py*sj0);
IkReal x3802=((0.0254095720202485)*sj3);
IkReal x3803=((0.92038656235619)*pp);
CheckValue<IkReal> x3804=IKPowWithIntegerCheck((x3801+x3800),-1);
if(!x3804.valid){
continue;
}
CheckValue<IkReal> x3805=IKPowWithIntegerCheck(((((-1.0)*x3801*x3803))+(((-1.0)*x3800*x3803))+((x3800*x3802))+((x3801*x3802))+(((-0.185020708697653)*x3801))+(((-0.185020708697653)*x3800))),-1);
if(!x3805.valid){
continue;
}
if( IKabs(((x3804.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3805.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3804.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3805.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3804.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3805.value)*(((-0.0548607915324436)+(((0.00621260929590428)*pp*sj3))+(((-0.0299240681086056)*cj3))+(((0.0414173953060285)*cj3*pp))+(((-0.0139752646111367)*(sj3*sj3)))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*cj3*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3806=IKsin(j1);
IkReal x3807=IKcos(j1);
IkReal x3808=((0.045)*sj3);
IkReal x3809=((0.3)*cj3);
IkReal x3810=((0.045)*cj3);
IkReal x3811=(cj0*px);
IkReal x3812=(py*sj0);
IkReal x3813=((1.0)*x3807);
IkReal x3814=(sj3*x3807);
IkReal x3815=((0.09)*x3807);
IkReal x3816=((1.1)*x3806);
evalcond[0]=((-0.55)+((x3806*x3811))+((x3806*x3812))+(((-1.0)*x3808))+(((-1.0)*x3809)));
evalcond[1]=((0.045)+(((-1.0)*x3810))+(((-1.0)*x3812*x3813))+(((-1.0)*x3811*x3813))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x3811*x3816))+((x3811*x3815))+(((-1.0)*pp))+((x3812*x3816))+((x3812*x3815)));
evalcond[3]=((((0.310561435803037)*sj3*x3806))+(((0.099746893695352)*x3806))+(((-0.185020708697653)*x3807))+(((-0.138057984353428)*pp*x3806))+(((-0.92038656235619)*pp*x3807))+(((0.0254095720202485)*x3814)));
evalcond[4]=((((-1.0)*x3807*x3810))+(((0.3)*x3814))+((x3806*x3808))+((x3806*x3809))+(((-1.0)*x3812))+(((-1.0)*x3811))+(((0.045)*x3807))+(((0.55)*x3806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3817 = IKatan2WithCheck((gconst76*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst76*(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3817.valid){
continue;
}
j1array[0]=x3817.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3818=IKsin(j1);
IkReal x3819=IKcos(j1);
IkReal x3820=((0.045)*sj3);
IkReal x3821=((0.3)*cj3);
IkReal x3822=((0.045)*cj3);
IkReal x3823=(cj0*px);
IkReal x3824=(py*sj0);
IkReal x3825=((1.0)*x3819);
IkReal x3826=(sj3*x3819);
IkReal x3827=((0.09)*x3819);
IkReal x3828=((1.1)*x3818);
evalcond[0]=((-0.55)+(((-1.0)*x3820))+(((-1.0)*x3821))+((x3818*x3824))+((x3818*x3823)));
evalcond[1]=((0.045)+(((-1.0)*x3824*x3825))+(((-1.0)*x3822))+(((-1.0)*x3823*x3825))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+((x3824*x3828))+((x3824*x3827))+((x3823*x3827))+((x3823*x3828)));
evalcond[3]=((((0.310561435803037)*sj3*x3818))+(((0.099746893695352)*x3818))+(((-0.92038656235619)*pp*x3819))+(((-0.185020708697653)*x3819))+(((-0.138057984353428)*pp*x3818))+(((0.0254095720202485)*x3826)));
evalcond[4]=((((0.3)*x3826))+(((-1.0)*x3824))+(((-1.0)*x3823))+((x3818*x3821))+((x3818*x3820))+(((0.045)*x3819))+(((0.55)*x3818))+(((-1.0)*x3819*x3822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3829=(px*sj0);
IkReal x3830=(cj0*py);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-1.0)*x3830))+x3829);
evalcond[3]=((((-1.0)*x3829))+x3830);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst101;
gconst101=IKsign((((cj0*px))+((py*sj0))));
dummyeval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3831=(cj0*px);
IkReal x3832=(py*sj0);
IkReal x3833=((36.2220411120167)*pp);
dummyeval[0]=(x3831+x3832);
dummyeval[1]=(((sj3*x3832))+((sj3*x3831))+(((-1.0)*x3831*x3833))+(((-1.0)*x3832*x3833))+(((-7.28153581454315)*x3832))+(((-7.28153581454315)*x3831)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3834=(cj0*px);
IkReal x3835=((1.3840830449827)*pp);
IkReal x3836=((3.11349480968858)*sj3);
IkReal x3837=(py*sj0);
dummyeval[0]=((((-1.0)*x3837))+(((-1.0)*x3834))+((x3834*x3835))+((x3835*x3837))+(((-1.0)*x3834*x3836))+(((-1.0)*x3836*x3837)));
dummyeval[1]=(x3834+x3837);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal gconst102;
CheckValue<IkReal> x3838 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3838.valid){
continue;
}
gconst102=((-1.0)*(x3838.value));
IkReal gconst103;
gconst103=IKsin(gconst102);
IkReal gconst104;
gconst104=IKcos(gconst102);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst102))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst120;
gconst120=IKsign((((gconst104*px))+((gconst103*py))));
dummyeval[0]=(((gconst104*px))+((gconst103*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3839=((36.2220411120167)*pp);
IkReal x3840=(gconst103*py);
IkReal x3841=(gconst104*px);
dummyeval[0]=(x3841+x3840);
dummyeval[1]=(((sj3*x3841))+((sj3*x3840))+(((-1.0)*x3839*x3841))+(((-1.0)*x3839*x3840))+(((-7.28153581454315)*x3841))+(((-7.28153581454315)*x3840)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3842=(gconst103*py);
IkReal x3843=((3.11349480968858)*sj3);
IkReal x3844=(gconst104*px);
IkReal x3845=((1.3840830449827)*pp);
dummyeval[0]=((((-1.0)*x3842*x3843))+(((-1.0)*x3843*x3844))+((x3844*x3845))+((x3842*x3845))+(((-1.0)*x3844))+(((-1.0)*x3842)));
dummyeval[1]=(x3842+x3844);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3847 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3847.valid){
continue;
}
IkReal x3846=x3847.value;
j1array[0]=((-1.0)*x3846);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3846)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3848=IKcos(j1);
evalcond[0]=((((-0.1275)*x3848))+(((-0.30675)*sj3*x3848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3849=(gconst104*px);
IkReal x3850=((0.310561435803037)*sj3);
IkReal x3851=(gconst103*py);
IkReal x3852=((0.138057984353428)*pp);
IkReal x3853=((0.0414173953060285)*pp);
CheckValue<IkReal> x3854=IKPowWithIntegerCheck(((((-0.099746893695352)*x3849))+(((-1.0)*x3850*x3851))+((x3849*x3852))+(((-0.099746893695352)*x3851))+((x3851*x3852))+(((-1.0)*x3849*x3850))),-1);
if(!x3854.valid){
continue;
}
CheckValue<IkReal> x3855=IKPowWithIntegerCheck((x3851+x3849),-1);
if(!x3855.valid){
continue;
}
if( IKabs(((x3854.value)*(((-0.00832593189139439)+(((-1.0)*x3853))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3853))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3855.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3854.value)*(((-0.00832593189139439)+(((-1.0)*x3853))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3853))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3855.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3854.value)*(((-0.00832593189139439)+(((-1.0)*x3853))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x3853))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3855.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3856=IKsin(j1);
IkReal x3857=IKcos(j1);
IkReal x3858=((0.3)*cj3);
IkReal x3859=((0.045)*cj3);
IkReal x3860=(gconst104*px);
IkReal x3861=(sj3*x3856);
IkReal x3862=(sj3*x3857);
IkReal x3863=(gconst103*py*x3857);
IkReal x3864=(x3856*x3860);
IkReal x3865=(gconst103*py*x3856);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3858))+x3865+x3864);
evalcond[1]=((0.045)+(((-1.0)*x3859))+((x3857*x3860))+x3863+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x3863))+(((1.1)*x3865))+(((1.1)*x3864))+(((-1.0)*pp))+(((-0.09)*x3857*x3860)));
evalcond[3]=((((-0.099746893695352)*x3856))+(((0.138057984353428)*pp*x3856))+(((-0.310561435803037)*x3861))+(((-0.185020708697653)*x3857))+(((0.0254095720202485)*x3862))+(((-0.92038656235619)*pp*x3857)));
evalcond[4]=((((0.045)*x3861))+(((0.55)*x3856))+(((-0.3)*x3862))+((x3857*x3859))+(((-1.0)*x3860))+((x3856*x3858))+(((-0.045)*x3857))+(((-1.0)*gconst103*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3866=((0.92038656235619)*pp);
IkReal x3867=(gconst104*px);
IkReal x3868=(gconst103*py);
IkReal x3869=((0.0254095720202485)*sj3);
CheckValue<IkReal> x3870=IKPowWithIntegerCheck((x3868+x3867),-1);
if(!x3870.valid){
continue;
}
CheckValue<IkReal> x3871=IKPowWithIntegerCheck((((x3867*x3869))+(((-1.0)*x3866*x3868))+(((-1.0)*x3866*x3867))+((x3868*x3869))+(((-0.185020708697653)*x3868))+(((-0.185020708697653)*x3867))),-1);
if(!x3871.valid){
continue;
}
if( IKabs(((x3870.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3871.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3870.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3871.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3870.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3871.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3872=IKsin(j1);
IkReal x3873=IKcos(j1);
IkReal x3874=((0.3)*cj3);
IkReal x3875=((0.045)*cj3);
IkReal x3876=(gconst104*px);
IkReal x3877=(sj3*x3872);
IkReal x3878=(sj3*x3873);
IkReal x3879=(gconst103*py*x3873);
IkReal x3880=(x3872*x3876);
IkReal x3881=(gconst103*py*x3872);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x3881+x3880+(((-1.0)*x3874)));
evalcond[1]=((0.045)+((x3873*x3876))+x3879+(((0.3)*sj3))+(((-1.0)*x3875)));
evalcond[2]=((-0.2125)+(((-0.09)*x3873*x3876))+(((-1.0)*pp))+(((1.1)*x3880))+(((1.1)*x3881))+(((-0.09)*x3879)));
evalcond[3]=((((-0.92038656235619)*pp*x3873))+(((-0.099746893695352)*x3872))+(((-0.185020708697653)*x3873))+(((-0.310561435803037)*x3877))+(((0.138057984353428)*pp*x3872))+(((0.0254095720202485)*x3878)));
evalcond[4]=((((0.045)*x3877))+(((-0.3)*x3878))+((x3872*x3874))+((x3873*x3875))+(((-0.045)*x3873))+(((-1.0)*x3876))+(((0.55)*x3872))+(((-1.0)*gconst103*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3882 = IKatan2WithCheck((gconst120*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst120*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3882.valid){
continue;
}
j1array[0]=x3882.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3883=IKsin(j1);
IkReal x3884=IKcos(j1);
IkReal x3885=((0.3)*cj3);
IkReal x3886=((0.045)*cj3);
IkReal x3887=(gconst104*px);
IkReal x3888=(sj3*x3883);
IkReal x3889=(sj3*x3884);
IkReal x3890=(gconst103*py*x3884);
IkReal x3891=(x3883*x3887);
IkReal x3892=(gconst103*py*x3883);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3885))+x3892+x3891);
evalcond[1]=((0.045)+(((-1.0)*x3886))+x3890+(((0.3)*sj3))+((x3884*x3887)));
evalcond[2]=((-0.2125)+(((1.1)*x3892))+(((1.1)*x3891))+(((-1.0)*pp))+(((-0.09)*x3890))+(((-0.09)*x3884*x3887)));
evalcond[3]=((((0.138057984353428)*pp*x3883))+(((0.0254095720202485)*x3889))+(((-0.92038656235619)*pp*x3884))+(((-0.099746893695352)*x3883))+(((-0.310561435803037)*x3888))+(((-0.185020708697653)*x3884)));
evalcond[4]=((((-0.045)*x3884))+(((0.55)*x3883))+((x3883*x3885))+(((-1.0)*x3887))+(((-0.3)*x3889))+(((0.045)*x3888))+(((-1.0)*gconst103*py))+((x3884*x3886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst105;
CheckValue<IkReal> x3893 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3893.valid){
continue;
}
gconst105=((3.14159265358979)+(((-1.0)*(x3893.value))));
IkReal gconst106;
gconst106=IKsin(gconst105);
IkReal gconst107;
gconst107=IKcos(gconst105);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst105))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst121;
gconst121=IKsign((((gconst107*px))+((gconst106*py))));
dummyeval[0]=(((gconst107*px))+((gconst106*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3894=(gconst107*px);
IkReal x3895=((36.2220411120167)*pp);
IkReal x3896=(gconst106*py);
dummyeval[0]=(x3896+x3894);
dummyeval[1]=(((sj3*x3894))+((sj3*x3896))+(((-1.0)*x3895*x3896))+(((-7.28153581454315)*x3896))+(((-7.28153581454315)*x3894))+(((-1.0)*x3894*x3895)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3897=((1.3840830449827)*pp);
IkReal x3898=(gconst107*px);
IkReal x3899=(gconst106*py);
IkReal x3900=((3.11349480968858)*sj3);
dummyeval[0]=((((-1.0)*x3899))+(((-1.0)*x3898))+(((-1.0)*x3899*x3900))+(((-1.0)*x3898*x3900))+((x3897*x3898))+((x3897*x3899)));
dummyeval[1]=(x3898+x3899);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3902 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
IkReal x3901=x3902.value;
j1array[0]=((-1.0)*x3901);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3901)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3903=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x3903))+(((-0.1275)*x3903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3904=((0.138057984353428)*pp);
IkReal x3905=(gconst106*py);
IkReal x3906=(gconst107*px);
IkReal x3907=((0.0414173953060285)*pp);
IkReal x3908=((0.310561435803037)*sj3);
CheckValue<IkReal> x3909=IKPowWithIntegerCheck(((((-1.0)*x3906*x3908))+(((-1.0)*x3905*x3908))+((x3904*x3905))+((x3904*x3906))+(((-0.099746893695352)*x3906))+(((-0.099746893695352)*x3905))),-1);
if(!x3909.valid){
continue;
}
CheckValue<IkReal> x3910=IKPowWithIntegerCheck((x3905+x3906),-1);
if(!x3910.valid){
continue;
}
if( IKabs(((x3909.value)*(((-0.00832593189139439)+(((-1.0)*x3907))+((cj3*x3907))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3910.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3909.value)*(((-0.00832593189139439)+(((-1.0)*x3907))+((cj3*x3907))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3910.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3909.value)*(((-0.00832593189139439)+(((-1.0)*x3907))+((cj3*x3907))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3910.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3911=IKsin(j1);
IkReal x3912=IKcos(j1);
IkReal x3913=((0.045)*sj3);
IkReal x3914=((0.3)*cj3);
IkReal x3915=(gconst106*py);
IkReal x3916=((0.045)*cj3);
IkReal x3917=(gconst107*px);
IkReal x3918=(sj3*x3912);
IkReal x3919=((0.09)*x3912);
IkReal x3920=(x3911*x3917);
evalcond[0]=((-0.55)+(((-1.0)*x3914))+(((-1.0)*x3913))+x3920+((x3911*x3915)));
evalcond[1]=((0.045)+(((-1.0)*x3916))+(((0.3)*sj3))+((x3912*x3917))+((x3912*x3915)));
evalcond[2]=((-0.2125)+(((-1.0)*x3915*x3919))+(((-1.0)*x3917*x3919))+(((1.1)*x3911*x3915))+(((-1.0)*pp))+(((1.1)*x3920)));
evalcond[3]=((((-0.92038656235619)*pp*x3912))+(((-0.310561435803037)*sj3*x3911))+(((0.138057984353428)*pp*x3911))+(((-0.185020708697653)*x3912))+(((-0.099746893695352)*x3911))+(((0.0254095720202485)*x3918)));
evalcond[4]=((((0.55)*x3911))+(((-1.0)*x3917))+(((-1.0)*x3915))+(((-0.045)*x3912))+((x3911*x3913))+((x3911*x3914))+(((-0.3)*x3918))+((x3912*x3916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3921=(gconst106*py);
IkReal x3922=((0.92038656235619)*pp);
IkReal x3923=((0.0254095720202485)*sj3);
IkReal x3924=(gconst107*px);
CheckValue<IkReal> x3925=IKPowWithIntegerCheck((x3921+x3924),-1);
if(!x3925.valid){
continue;
}
CheckValue<IkReal> x3926=IKPowWithIntegerCheck((((x3921*x3923))+(((-1.0)*x3922*x3924))+(((-0.185020708697653)*x3921))+(((-0.185020708697653)*x3924))+(((-1.0)*x3921*x3922))+((x3923*x3924))),-1);
if(!x3926.valid){
continue;
}
if( IKabs(((x3925.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3926.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3925.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3926.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3925.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3926.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3927=IKsin(j1);
IkReal x3928=IKcos(j1);
IkReal x3929=((0.045)*sj3);
IkReal x3930=((0.3)*cj3);
IkReal x3931=(gconst106*py);
IkReal x3932=((0.045)*cj3);
IkReal x3933=(gconst107*px);
IkReal x3934=(sj3*x3928);
IkReal x3935=((0.09)*x3928);
IkReal x3936=(x3927*x3933);
evalcond[0]=((-0.55)+(((-1.0)*x3929))+x3936+(((-1.0)*x3930))+((x3927*x3931)));
evalcond[1]=((0.045)+((x3928*x3931))+((x3928*x3933))+(((0.3)*sj3))+(((-1.0)*x3932)));
evalcond[2]=((-0.2125)+(((1.1)*x3927*x3931))+(((-1.0)*x3933*x3935))+(((-1.0)*x3931*x3935))+(((-1.0)*pp))+(((1.1)*x3936)));
evalcond[3]=((((-0.92038656235619)*pp*x3928))+(((0.0254095720202485)*x3934))+(((0.138057984353428)*pp*x3927))+(((-0.185020708697653)*x3928))+(((-0.310561435803037)*sj3*x3927))+(((-0.099746893695352)*x3927)));
evalcond[4]=((((-1.0)*x3933))+(((-1.0)*x3931))+(((0.55)*x3927))+((x3928*x3932))+((x3927*x3930))+((x3927*x3929))+(((-0.045)*x3928))+(((-0.3)*x3934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3937 = IKatan2WithCheck((gconst121*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst121*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3937.valid){
continue;
}
j1array[0]=x3937.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3938=IKsin(j1);
IkReal x3939=IKcos(j1);
IkReal x3940=((0.045)*sj3);
IkReal x3941=((0.3)*cj3);
IkReal x3942=(gconst106*py);
IkReal x3943=((0.045)*cj3);
IkReal x3944=(gconst107*px);
IkReal x3945=(sj3*x3939);
IkReal x3946=((0.09)*x3939);
IkReal x3947=(x3938*x3944);
evalcond[0]=((-0.55)+((x3938*x3942))+x3947+(((-1.0)*x3941))+(((-1.0)*x3940)));
evalcond[1]=((0.045)+((x3939*x3944))+((x3939*x3942))+(((-1.0)*x3943))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x3938*x3942))+(((-1.0)*x3942*x3946))+(((-1.0)*pp))+(((1.1)*x3947))+(((-1.0)*x3944*x3946)));
evalcond[3]=((((0.138057984353428)*pp*x3938))+(((0.0254095720202485)*x3945))+(((-0.185020708697653)*x3939))+(((-0.310561435803037)*sj3*x3938))+(((-0.92038656235619)*pp*x3939))+(((-0.099746893695352)*x3938)));
evalcond[4]=((((-1.0)*x3944))+(((-1.0)*x3942))+(((-0.045)*x3939))+((x3939*x3943))+(((0.55)*x3938))+((x3938*x3940))+((x3938*x3941))+(((-0.3)*x3945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst108;
CheckValue<IkReal> x3948 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x3948.valid){
continue;
}
gconst108=((-1.0)*(x3948.value));
IkReal gconst109;
gconst109=IKsin(gconst108);
IkReal gconst110;
gconst110=IKcos(gconst108);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst108))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst122;
gconst122=IKsign((((gconst110*px))+((gconst109*py))));
dummyeval[0]=(((gconst110*px))+((gconst109*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3949=(gconst109*py);
IkReal x3950=(gconst110*px);
IkReal x3951=((36.2220411120167)*pp);
dummyeval[0]=(x3949+x3950);
dummyeval[1]=((((-1.0)*x3949*x3951))+(((-1.0)*x3950*x3951))+((sj3*x3950))+((sj3*x3949))+(((-7.28153581454315)*x3950))+(((-7.28153581454315)*x3949)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3952=(gconst109*py);
IkReal x3953=((3.11349480968858)*sj3);
IkReal x3954=(gconst110*px);
IkReal x3955=((1.3840830449827)*pp);
dummyeval[0]=((((-1.0)*x3953*x3954))+(((-1.0)*x3952))+(((-1.0)*x3954))+(((-1.0)*x3952*x3953))+((x3952*x3955))+((x3954*x3955)));
dummyeval[1]=(x3952+x3954);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x3957 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
IkReal x3956=x3957.value;
j1array[0]=((-1.0)*x3956);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x3956)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3958=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x3958))+(((-0.1275)*x3958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3959=(gconst110*px);
IkReal x3960=((0.138057984353428)*pp);
IkReal x3961=(gconst109*py);
IkReal x3962=((0.0414173953060285)*pp);
IkReal x3963=((0.310561435803037)*sj3);
CheckValue<IkReal> x3964=IKPowWithIntegerCheck(((((-0.099746893695352)*x3961))+((x3960*x3961))+(((-1.0)*x3959*x3963))+(((-1.0)*x3961*x3963))+(((-0.099746893695352)*x3959))+((x3959*x3960))),-1);
if(!x3964.valid){
continue;
}
CheckValue<IkReal> x3965=IKPowWithIntegerCheck((x3961+x3959),-1);
if(!x3965.valid){
continue;
}
if( IKabs(((x3964.value)*(((-0.00832593189139439)+(((-1.0)*x3962))+((cj3*x3962))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3965.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3964.value)*(((-0.00832593189139439)+(((-1.0)*x3962))+((cj3*x3962))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x3965.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3964.value)*(((-0.00832593189139439)+(((-1.0)*x3962))+((cj3*x3962))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x3965.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3966=IKsin(j1);
IkReal x3967=IKcos(j1);
IkReal x3968=((0.3)*cj3);
IkReal x3969=((0.045)*cj3);
IkReal x3970=(gconst110*px);
IkReal x3971=(gconst109*py);
IkReal x3972=(sj3*x3966);
IkReal x3973=(sj3*x3967);
IkReal x3974=((1.1)*x3966);
IkReal x3975=((0.09)*x3967);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3968))+((x3966*x3971))+((x3966*x3970)));
evalcond[1]=((0.045)+(((-1.0)*x3969))+(((0.3)*sj3))+((x3967*x3970))+((x3967*x3971)));
evalcond[2]=((-0.2125)+((x3970*x3974))+((x3971*x3974))+(((-1.0)*pp))+(((-1.0)*x3970*x3975))+(((-1.0)*x3971*x3975)));
evalcond[3]=((((-0.92038656235619)*pp*x3967))+(((-0.310561435803037)*x3972))+(((-0.099746893695352)*x3966))+(((0.138057984353428)*pp*x3966))+(((-0.185020708697653)*x3967))+(((0.0254095720202485)*x3973)));
evalcond[4]=((((0.045)*x3972))+(((0.55)*x3966))+(((-0.3)*x3973))+((x3966*x3968))+(((-0.045)*x3967))+(((-1.0)*x3971))+(((-1.0)*x3970))+((x3967*x3969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3976=(gconst109*py);
IkReal x3977=((0.0254095720202485)*sj3);
IkReal x3978=(gconst110*px);
IkReal x3979=((0.92038656235619)*pp);
CheckValue<IkReal> x3980=IKPowWithIntegerCheck((x3976+x3978),-1);
if(!x3980.valid){
continue;
}
CheckValue<IkReal> x3981=IKPowWithIntegerCheck(((((-1.0)*x3976*x3979))+(((-1.0)*x3978*x3979))+((x3977*x3978))+((x3976*x3977))+(((-0.185020708697653)*x3976))+(((-0.185020708697653)*x3978))),-1);
if(!x3981.valid){
continue;
}
if( IKabs(((x3980.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3981.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3980.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x3981.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3980.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x3981.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3982=IKsin(j1);
IkReal x3983=IKcos(j1);
IkReal x3984=((0.3)*cj3);
IkReal x3985=((0.045)*cj3);
IkReal x3986=(gconst110*px);
IkReal x3987=(gconst109*py);
IkReal x3988=(sj3*x3982);
IkReal x3989=(sj3*x3983);
IkReal x3990=((1.1)*x3982);
IkReal x3991=((0.09)*x3983);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x3982*x3987))+((x3982*x3986))+(((-1.0)*x3984)));
evalcond[1]=((0.045)+((x3983*x3986))+((x3983*x3987))+(((0.3)*sj3))+(((-1.0)*x3985)));
evalcond[2]=((-0.2125)+((x3986*x3990))+((x3987*x3990))+(((-1.0)*pp))+(((-1.0)*x3986*x3991))+(((-1.0)*x3987*x3991)));
evalcond[3]=((((0.0254095720202485)*x3989))+(((-0.185020708697653)*x3983))+(((0.138057984353428)*pp*x3982))+(((-0.099746893695352)*x3982))+(((-0.310561435803037)*x3988))+(((-0.92038656235619)*pp*x3983)));
evalcond[4]=((((-0.3)*x3989))+((x3983*x3985))+(((-0.045)*x3983))+(((0.045)*x3988))+((x3982*x3984))+(((0.55)*x3982))+(((-1.0)*x3986))+(((-1.0)*x3987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3992 = IKatan2WithCheck((gconst122*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst122*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3992.valid){
continue;
}
j1array[0]=x3992.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3993=IKsin(j1);
IkReal x3994=IKcos(j1);
IkReal x3995=((0.3)*cj3);
IkReal x3996=((0.045)*cj3);
IkReal x3997=(gconst110*px);
IkReal x3998=(gconst109*py);
IkReal x3999=(sj3*x3993);
IkReal x4000=(sj3*x3994);
IkReal x4001=((1.1)*x3993);
IkReal x4002=((0.09)*x3994);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x3995))+((x3993*x3998))+((x3993*x3997)));
evalcond[1]=((0.045)+((x3994*x3998))+((x3994*x3997))+(((-1.0)*x3996))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x3998*x4002))+((x3997*x4001))+(((-1.0)*pp))+(((-1.0)*x3997*x4002))+((x3998*x4001)));
evalcond[3]=((((-0.310561435803037)*x3999))+(((-0.099746893695352)*x3993))+(((0.138057984353428)*pp*x3993))+(((0.0254095720202485)*x4000))+(((-0.185020708697653)*x3994))+(((-0.92038656235619)*pp*x3994)));
evalcond[4]=(((x3994*x3996))+(((0.55)*x3993))+(((-1.0)*x3997))+(((-1.0)*x3998))+(((0.045)*x3999))+((x3993*x3995))+(((-0.045)*x3994))+(((-0.3)*x4000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst111;
CheckValue<IkReal> x4003 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x4003.valid){
continue;
}
gconst111=((3.14159265358979)+(((-1.0)*(x4003.value))));
IkReal gconst112;
gconst112=IKsin(gconst111);
IkReal gconst113;
gconst113=IKcos(gconst111);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst111))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst123;
gconst123=IKsign((((gconst113*px))+((gconst112*py))));
dummyeval[0]=(((gconst113*px))+((gconst112*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4004=(gconst113*px);
IkReal x4005=((36.2220411120167)*pp);
IkReal x4006=(gconst112*py);
dummyeval[0]=(x4004+x4006);
dummyeval[1]=(((sj3*x4004))+((sj3*x4006))+(((-7.28153581454315)*x4004))+(((-7.28153581454315)*x4006))+(((-1.0)*x4005*x4006))+(((-1.0)*x4004*x4005)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4007=(gconst112*py);
IkReal x4008=((1.3840830449827)*pp);
IkReal x4009=((3.11349480968858)*sj3);
IkReal x4010=(gconst113*px);
dummyeval[0]=((((-1.0)*x4007))+(((-1.0)*x4010))+(((-1.0)*x4007*x4009))+(((-1.0)*x4009*x4010))+((x4008*x4010))+((x4007*x4008)));
dummyeval[1]=(x4007+x4010);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4012 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4012.valid){
continue;
}
IkReal x4011=x4012.value;
j1array[0]=((-1.0)*x4011);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4011)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4013=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x4013))+(((-0.1275)*x4013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4014=(gconst113*px);
IkReal x4015=((0.310561435803037)*sj3);
IkReal x4016=(gconst112*py);
IkReal x4017=((0.138057984353428)*pp);
IkReal x4018=((0.0414173953060285)*pp);
CheckValue<IkReal> x4019=IKPowWithIntegerCheck((((x4016*x4017))+(((-1.0)*x4014*x4015))+(((-1.0)*x4015*x4016))+(((-0.099746893695352)*x4016))+(((-0.099746893695352)*x4014))+((x4014*x4017))),-1);
if(!x4019.valid){
continue;
}
CheckValue<IkReal> x4020=IKPowWithIntegerCheck((x4016+x4014),-1);
if(!x4020.valid){
continue;
}
if( IKabs(((x4019.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x4018))+(((-1.0)*x4018))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4020.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4019.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x4018))+(((-1.0)*x4018))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x4020.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4019.value)*(((-0.00832593189139439)+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x4018))+(((-1.0)*x4018))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x4020.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4021=IKsin(j1);
IkReal x4022=IKcos(j1);
IkReal x4023=(gconst112*py);
IkReal x4024=((0.3)*cj3);
IkReal x4025=((0.045)*cj3);
IkReal x4026=(gconst113*px);
IkReal x4027=(sj3*x4021);
IkReal x4028=(sj3*x4022);
IkReal x4029=((0.09)*x4022);
IkReal x4030=((1.1)*x4021);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x4021*x4023))+((x4021*x4026))+(((-1.0)*x4024)));
evalcond[1]=((0.045)+(((-1.0)*x4025))+((x4022*x4023))+((x4022*x4026))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x4023*x4029))+((x4026*x4030))+(((-1.0)*x4026*x4029))+(((-1.0)*pp))+((x4023*x4030)));
evalcond[3]=((((0.0254095720202485)*x4028))+(((0.138057984353428)*pp*x4021))+(((-0.310561435803037)*x4027))+(((-0.185020708697653)*x4022))+(((-0.92038656235619)*pp*x4022))+(((-0.099746893695352)*x4021)));
evalcond[4]=(((x4021*x4024))+(((0.045)*x4027))+(((-1.0)*x4023))+(((-1.0)*x4026))+(((0.55)*x4021))+(((-0.3)*x4028))+((x4022*x4025))+(((-0.045)*x4022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4031=(gconst113*px);
IkReal x4032=((0.92038656235619)*pp);
IkReal x4033=(gconst112*py);
IkReal x4034=((0.0254095720202485)*sj3);
CheckValue<IkReal> x4035=IKPowWithIntegerCheck((x4031+x4033),-1);
if(!x4035.valid){
continue;
}
CheckValue<IkReal> x4036=IKPowWithIntegerCheck(((((-0.185020708697653)*x4033))+(((-0.185020708697653)*x4031))+(((-1.0)*x4031*x4032))+((x4033*x4034))+(((-1.0)*x4032*x4033))+((x4031*x4034))),-1);
if(!x4036.valid){
continue;
}
if( IKabs(((x4035.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4036.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4035.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x4036.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4035.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x4036.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4037=IKsin(j1);
IkReal x4038=IKcos(j1);
IkReal x4039=(gconst112*py);
IkReal x4040=((0.3)*cj3);
IkReal x4041=((0.045)*cj3);
IkReal x4042=(gconst113*px);
IkReal x4043=(sj3*x4037);
IkReal x4044=(sj3*x4038);
IkReal x4045=((0.09)*x4038);
IkReal x4046=((1.1)*x4037);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x4037*x4042))+((x4037*x4039))+(((-1.0)*x4040)));
evalcond[1]=((0.045)+(((0.3)*sj3))+((x4038*x4042))+(((-1.0)*x4041))+((x4038*x4039)));
evalcond[2]=((-0.2125)+(((-1.0)*x4039*x4045))+((x4039*x4046))+(((-1.0)*pp))+((x4042*x4046))+(((-1.0)*x4042*x4045)));
evalcond[3]=((((-0.185020708697653)*x4038))+(((-0.099746893695352)*x4037))+(((-0.310561435803037)*x4043))+(((0.138057984353428)*pp*x4037))+(((-0.92038656235619)*pp*x4038))+(((0.0254095720202485)*x4044)));
evalcond[4]=(((x4037*x4040))+(((-0.3)*x4044))+(((-1.0)*x4042))+(((-0.045)*x4038))+(((-1.0)*x4039))+(((0.55)*x4037))+((x4038*x4041))+(((0.045)*x4043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4047 = IKatan2WithCheck((gconst123*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst123*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4047.valid){
continue;
}
j1array[0]=x4047.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4048=IKsin(j1);
IkReal x4049=IKcos(j1);
IkReal x4050=(gconst112*py);
IkReal x4051=((0.3)*cj3);
IkReal x4052=((0.045)*cj3);
IkReal x4053=(gconst113*px);
IkReal x4054=(sj3*x4048);
IkReal x4055=(sj3*x4049);
IkReal x4056=((0.09)*x4049);
IkReal x4057=((1.1)*x4048);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+((x4048*x4053))+((x4048*x4050))+(((-1.0)*x4051)));
evalcond[1]=((0.045)+((x4049*x4050))+((x4049*x4053))+(((-1.0)*x4052))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x4050*x4056))+(((-1.0)*x4053*x4056))+(((-1.0)*pp))+((x4050*x4057))+((x4053*x4057)));
evalcond[3]=((((-0.185020708697653)*x4049))+(((-0.92038656235619)*pp*x4049))+(((0.0254095720202485)*x4055))+(((-0.099746893695352)*x4048))+(((-0.310561435803037)*x4054))+(((0.138057984353428)*pp*x4048)));
evalcond[4]=(((x4048*x4051))+((x4049*x4052))+(((-0.045)*x4049))+(((-0.3)*x4055))+(((0.55)*x4048))+(((-1.0)*x4053))+(((-1.0)*x4050))+(((0.045)*x4054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst114;
CheckValue<IkReal> x4058 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x4058.valid){
continue;
}
gconst114=((-1.0)*(x4058.value));
IkReal gconst115;
gconst115=IKsin(gconst114);
IkReal gconst116;
gconst116=IKcos(gconst114);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst114))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst124;
gconst124=IKsign((((gconst116*px))+((gconst115*py))));
dummyeval[0]=(((gconst116*px))+((gconst115*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4059=(gconst116*px);
IkReal x4060=(gconst115*py);
IkReal x4061=((36.2220411120167)*pp);
dummyeval[0]=(x4059+x4060);
dummyeval[1]=(((sj3*x4060))+(((-1.0)*x4060*x4061))+((sj3*x4059))+(((-7.28153581454315)*x4060))+(((-7.28153581454315)*x4059))+(((-1.0)*x4059*x4061)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4062=((3.11349480968858)*sj3);
IkReal x4063=(gconst115*py);
IkReal x4064=(gconst116*px);
IkReal x4065=((1.3840830449827)*pp);
dummyeval[0]=(((x4064*x4065))+((x4063*x4065))+(((-1.0)*x4063))+(((-1.0)*x4064))+(((-1.0)*x4062*x4063))+(((-1.0)*x4062*x4064)));
dummyeval[1]=(x4063+x4064);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4067 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4067.valid){
continue;
}
IkReal x4066=x4067.value;
j1array[0]=((-1.0)*x4066);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4066)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4068=IKcos(j1);
evalcond[0]=((((-0.1275)*x4068))+(((-0.30675)*sj3*x4068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4069=(gconst115*py);
IkReal x4070=((0.138057984353428)*pp);
IkReal x4071=((0.310561435803037)*sj3);
IkReal x4072=(gconst116*px);
IkReal x4073=((0.0414173953060285)*pp);
CheckValue<IkReal> x4074=IKPowWithIntegerCheck(((((-1.0)*x4071*x4072))+(((-1.0)*x4069*x4071))+(((-0.099746893695352)*x4072))+((x4070*x4072))+((x4069*x4070))+(((-0.099746893695352)*x4069))),-1);
if(!x4074.valid){
continue;
}
CheckValue<IkReal> x4075=IKPowWithIntegerCheck((x4072+x4069),-1);
if(!x4075.valid){
continue;
}
if( IKabs(((x4074.value)*(((-0.00832593189139439)+(((-1.0)*x4073))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x4073))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4075.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4074.value)*(((-0.00832593189139439)+(((-1.0)*x4073))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x4073))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x4075.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4074.value)*(((-0.00832593189139439)+(((-1.0)*x4073))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+((cj3*x4073))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x4075.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4076=IKsin(j1);
IkReal x4077=IKcos(j1);
IkReal x4078=((0.045)*sj3);
IkReal x4079=((0.3)*cj3);
IkReal x4080=(gconst115*py);
IkReal x4081=((0.045)*cj3);
IkReal x4082=(gconst116*px);
IkReal x4083=(sj3*x4077);
IkReal x4084=((0.09)*x4077);
IkReal x4085=(x4076*x4082);
evalcond[0]=((-0.55)+((x4076*x4080))+(((-1.0)*x4078))+(((-1.0)*x4079))+x4085);
evalcond[1]=((0.045)+(((-1.0)*x4081))+(((0.3)*sj3))+((x4077*x4080))+((x4077*x4082)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x4082*x4084))+(((1.1)*x4076*x4080))+(((-1.0)*x4080*x4084))+(((1.1)*x4085)));
evalcond[3]=((((0.138057984353428)*pp*x4076))+(((-0.185020708697653)*x4077))+(((-0.099746893695352)*x4076))+(((-0.92038656235619)*pp*x4077))+(((0.0254095720202485)*x4083))+(((-0.310561435803037)*sj3*x4076)));
evalcond[4]=((((-0.3)*x4083))+(((0.55)*x4076))+(((-1.0)*x4082))+(((-1.0)*x4080))+(((-0.045)*x4077))+((x4077*x4081))+((x4076*x4078))+((x4076*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4086=(gconst115*py);
IkReal x4087=((0.0254095720202485)*sj3);
IkReal x4088=(gconst116*px);
IkReal x4089=((0.92038656235619)*pp);
CheckValue<IkReal> x4090=IKPowWithIntegerCheck((x4086+x4088),-1);
if(!x4090.valid){
continue;
}
CheckValue<IkReal> x4091=IKPowWithIntegerCheck((((x4087*x4088))+(((-0.185020708697653)*x4086))+(((-0.185020708697653)*x4088))+((x4086*x4087))+(((-1.0)*x4086*x4089))+(((-1.0)*x4088*x4089))),-1);
if(!x4091.valid){
continue;
}
if( IKabs(((x4090.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4091.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4090.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x4091.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4090.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x4091.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4092=IKsin(j1);
IkReal x4093=IKcos(j1);
IkReal x4094=((0.045)*sj3);
IkReal x4095=((0.3)*cj3);
IkReal x4096=(gconst115*py);
IkReal x4097=((0.045)*cj3);
IkReal x4098=(gconst116*px);
IkReal x4099=(sj3*x4093);
IkReal x4100=((0.09)*x4093);
IkReal x4101=(x4092*x4098);
evalcond[0]=((-0.55)+(((-1.0)*x4094))+(((-1.0)*x4095))+x4101+((x4092*x4096)));
evalcond[1]=((0.045)+(((-1.0)*x4097))+(((0.3)*sj3))+((x4093*x4098))+((x4093*x4096)));
evalcond[2]=((-0.2125)+(((-1.0)*x4096*x4100))+(((-1.0)*x4098*x4100))+(((1.1)*x4101))+(((1.1)*x4092*x4096))+(((-1.0)*pp)));
evalcond[3]=((((-0.92038656235619)*pp*x4093))+(((0.0254095720202485)*x4099))+(((-0.099746893695352)*x4092))+(((0.138057984353428)*pp*x4092))+(((-0.185020708697653)*x4093))+(((-0.310561435803037)*sj3*x4092)));
evalcond[4]=((((0.55)*x4092))+(((-0.3)*x4099))+(((-1.0)*x4098))+(((-1.0)*x4096))+(((-0.045)*x4093))+((x4093*x4097))+((x4092*x4094))+((x4092*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4102 = IKatan2WithCheck((gconst124*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst124*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4102.valid){
continue;
}
j1array[0]=x4102.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4103=IKsin(j1);
IkReal x4104=IKcos(j1);
IkReal x4105=((0.045)*sj3);
IkReal x4106=((0.3)*cj3);
IkReal x4107=(gconst115*py);
IkReal x4108=((0.045)*cj3);
IkReal x4109=(gconst116*px);
IkReal x4110=(sj3*x4104);
IkReal x4111=((0.09)*x4104);
IkReal x4112=(x4103*x4109);
evalcond[0]=((-0.55)+((x4103*x4107))+(((-1.0)*x4106))+(((-1.0)*x4105))+x4112);
evalcond[1]=((0.045)+(((-1.0)*x4108))+(((0.3)*sj3))+((x4104*x4109))+((x4104*x4107)));
evalcond[2]=((-0.2125)+(((-1.0)*x4109*x4111))+(((1.1)*x4103*x4107))+(((1.1)*x4112))+(((-1.0)*pp))+(((-1.0)*x4107*x4111)));
evalcond[3]=((((-0.099746893695352)*x4103))+(((0.0254095720202485)*x4110))+(((-0.185020708697653)*x4104))+(((-0.310561435803037)*sj3*x4103))+(((0.138057984353428)*pp*x4103))+(((-0.92038656235619)*pp*x4104)));
evalcond[4]=((((-1.0)*x4109))+(((-1.0)*x4107))+((x4103*x4106))+((x4103*x4105))+(((-0.3)*x4110))+(((-0.045)*x4104))+(((0.55)*x4103))+((x4104*x4108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst117;
CheckValue<IkReal> x4113 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
gconst117=((3.14159265358979)+(((-1.0)*(x4113.value))));
IkReal gconst118;
gconst118=IKsin(gconst117);
IkReal gconst119;
gconst119=IKcos(gconst117);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst117))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst125;
gconst125=IKsign((((gconst119*px))+((gconst118*py))));
dummyeval[0]=(((gconst119*px))+((gconst118*py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4114=(gconst119*px);
IkReal x4115=(gconst118*py);
IkReal x4116=((36.2220411120167)*pp);
dummyeval[0]=(x4114+x4115);
dummyeval[1]=(((sj3*x4115))+((sj3*x4114))+(((-7.28153581454315)*x4115))+(((-7.28153581454315)*x4114))+(((-1.0)*x4114*x4116))+(((-1.0)*x4115*x4116)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4117=(gconst119*px);
IkReal x4118=((1.3840830449827)*pp);
IkReal x4119=(gconst118*py);
IkReal x4120=((3.11349480968858)*sj3);
dummyeval[0]=((((-1.0)*x4119*x4120))+((x4117*x4118))+((x4118*x4119))+(((-1.0)*x4119))+(((-1.0)*x4117))+(((-1.0)*x4117*x4120)));
dummyeval[1]=(x4117+x4119);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4122 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4122.valid){
continue;
}
IkReal x4121=x4122.value;
j1array[0]=((-1.0)*x4121);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4121)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4123=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x4123))+(((-0.1275)*x4123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4124=(gconst119*px);
IkReal x4125=((0.310561435803037)*sj3);
IkReal x4126=(gconst118*py);
IkReal x4127=((0.138057984353428)*pp);
IkReal x4128=((0.0414173953060285)*pp);
CheckValue<IkReal> x4129=IKPowWithIntegerCheck(((((-1.0)*x4124*x4125))+((x4124*x4127))+(((-1.0)*x4125*x4126))+(((-0.099746893695352)*x4126))+(((-0.099746893695352)*x4124))+((x4126*x4127))),-1);
if(!x4129.valid){
continue;
}
CheckValue<IkReal> x4130=IKPowWithIntegerCheck((x4126+x4124),-1);
if(!x4130.valid){
continue;
}
if( IKabs(((x4129.value)*(((-0.00832593189139439)+(((-1.0)*x4128))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x4128)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4130.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4129.value)*(((-0.00832593189139439)+(((-1.0)*x4128))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x4128))))))+IKsqr(((x4130.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4129.value)*(((-0.00832593189139439)+(((-1.0)*x4128))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x4128))))), ((x4130.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4131=IKsin(j1);
IkReal x4132=IKcos(j1);
IkReal x4133=((0.045)*sj3);
IkReal x4134=((0.3)*cj3);
IkReal x4135=((0.045)*cj3);
IkReal x4136=(gconst119*px);
IkReal x4137=(gconst118*py);
IkReal x4138=(sj3*x4132);
IkReal x4139=((0.09)*x4132);
IkReal x4140=((1.1)*x4131);
evalcond[0]=((-0.55)+((x4131*x4137))+((x4131*x4136))+(((-1.0)*x4134))+(((-1.0)*x4133)));
evalcond[1]=((0.045)+((x4132*x4137))+((x4132*x4136))+(((-1.0)*x4135))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x4137*x4140))+(((-1.0)*pp))+(((-1.0)*x4137*x4139))+(((-1.0)*x4136*x4139))+((x4136*x4140)));
evalcond[3]=((((0.138057984353428)*pp*x4131))+(((-0.099746893695352)*x4131))+(((-0.92038656235619)*pp*x4132))+(((-0.310561435803037)*sj3*x4131))+(((0.0254095720202485)*x4138))+(((-0.185020708697653)*x4132)));
evalcond[4]=((((0.55)*x4131))+((x4131*x4134))+((x4131*x4133))+(((-1.0)*x4136))+(((-1.0)*x4137))+((x4132*x4135))+(((-0.045)*x4132))+(((-0.3)*x4138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4141=(gconst119*px);
IkReal x4142=((0.92038656235619)*pp);
IkReal x4143=((0.0254095720202485)*sj3);
IkReal x4144=(gconst118*py);
CheckValue<IkReal> x4145=IKPowWithIntegerCheck((x4144+x4141),-1);
if(!x4145.valid){
continue;
}
CheckValue<IkReal> x4146=IKPowWithIntegerCheck(((((-0.185020708697653)*x4144))+(((-0.185020708697653)*x4141))+((x4143*x4144))+(((-1.0)*x4141*x4142))+((x4141*x4143))+(((-1.0)*x4142*x4144))),-1);
if(!x4146.valid){
continue;
}
if( IKabs(((x4145.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4146.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4145.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x4146.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4145.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x4146.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4147=IKsin(j1);
IkReal x4148=IKcos(j1);
IkReal x4149=((0.045)*sj3);
IkReal x4150=((0.3)*cj3);
IkReal x4151=((0.045)*cj3);
IkReal x4152=(gconst119*px);
IkReal x4153=(gconst118*py);
IkReal x4154=(sj3*x4148);
IkReal x4155=((0.09)*x4148);
IkReal x4156=((1.1)*x4147);
evalcond[0]=((-0.55)+(((-1.0)*x4149))+(((-1.0)*x4150))+((x4147*x4152))+((x4147*x4153)));
evalcond[1]=((0.045)+(((0.3)*sj3))+((x4148*x4153))+((x4148*x4152))+(((-1.0)*x4151)));
evalcond[2]=((-0.2125)+((x4152*x4156))+((x4153*x4156))+(((-1.0)*x4153*x4155))+(((-1.0)*x4152*x4155))+(((-1.0)*pp)));
evalcond[3]=((((-0.185020708697653)*x4148))+(((0.138057984353428)*pp*x4147))+(((-0.099746893695352)*x4147))+(((-0.310561435803037)*sj3*x4147))+(((0.0254095720202485)*x4154))+(((-0.92038656235619)*pp*x4148)));
evalcond[4]=((((0.55)*x4147))+(((-1.0)*x4152))+(((-1.0)*x4153))+(((-0.3)*x4154))+((x4147*x4149))+((x4148*x4151))+(((-0.045)*x4148))+((x4147*x4150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4157 = IKatan2WithCheck((gconst125*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst125*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4157.valid){
continue;
}
j1array[0]=x4157.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4158=IKsin(j1);
IkReal x4159=IKcos(j1);
IkReal x4160=((0.045)*sj3);
IkReal x4161=((0.3)*cj3);
IkReal x4162=((0.045)*cj3);
IkReal x4163=(gconst119*px);
IkReal x4164=(gconst118*py);
IkReal x4165=(sj3*x4159);
IkReal x4166=((0.09)*x4159);
IkReal x4167=((1.1)*x4158);
evalcond[0]=((-0.55)+((x4158*x4163))+((x4158*x4164))+(((-1.0)*x4160))+(((-1.0)*x4161)));
evalcond[1]=((0.045)+(((-1.0)*x4162))+((x4159*x4164))+((x4159*x4163))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x4163*x4166))+(((-1.0)*x4164*x4166))+((x4163*x4167))+((x4164*x4167)));
evalcond[3]=((((0.0254095720202485)*x4165))+(((-0.185020708697653)*x4159))+(((0.138057984353428)*pp*x4158))+(((-0.099746893695352)*x4158))+(((-0.310561435803037)*sj3*x4158))+(((-0.92038656235619)*pp*x4159)));
evalcond[4]=((((-0.3)*x4165))+((x4158*x4160))+((x4158*x4161))+(((-1.0)*x4164))+(((-1.0)*x4163))+((x4159*x4162))+(((-0.045)*x4159))+(((0.55)*x4158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4169 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4169.valid){
continue;
}
IkReal x4168=x4169.value;
j1array[0]=((-1.0)*x4168);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4168)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4170=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x4170))+(((-0.1275)*x4170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4172 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4172.valid){
continue;
}
IkReal x4171=x4172.value;
j1array[0]=((-1.0)*x4171);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4171)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4173=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x4173))+(((-0.1275)*x4173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4175 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4175.valid){
continue;
}
IkReal x4174=x4175.value;
j1array[0]=((-1.0)*x4174);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4174)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4176=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x4176))+(((-0.1275)*x4176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4178 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4178.valid){
continue;
}
IkReal x4177=x4178.value;
j1array[0]=((-1.0)*x4177);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4177)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4179=IKcos(j1);
evalcond[0]=((((-0.30675)*sj3*x4179))+(((-0.1275)*x4179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
evalcond[2]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[3]=((-0.2125)+(((-1.0)*pp)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x4181 = IKatan2WithCheck(((0.0105614358030373)+(((0.0254095720202485)*sj3))),((-0.129084215370456)+(((-0.310561435803037)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x4181.valid){
continue;
}
IkReal x4180=x4181.value;
j1array[0]=((-1.0)*x4180);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x4180)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4182=IKcos(j1);
evalcond[0]=((((-0.1275)*x4182))+(((-0.30675)*sj3*x4182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4183=(py*sj0);
IkReal x4184=((0.310561435803037)*sj3);
IkReal x4185=((0.0414173953060285)*pp);
IkReal x4186=(cj0*px);
IkReal x4187=((0.138057984353428)*pp);
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(((((-1.0)*x4183*x4184))+((x4186*x4187))+(((-0.099746893695352)*x4183))+(((-0.099746893695352)*x4186))+((x4183*x4187))+(((-1.0)*x4184*x4186))),-1);
if(!x4188.valid){
continue;
}
CheckValue<IkReal> x4189=IKPowWithIntegerCheck((x4183+x4186),-1);
if(!x4189.valid){
continue;
}
if( IKabs(((x4188.value)*(((-0.00832593189139439)+(((-1.0)*x4185))+((cj3*x4185))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4189.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4188.value)*(((-0.00832593189139439)+(((-1.0)*x4185))+((cj3*x4185))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))))+IKsqr(((x4189.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4188.value)*(((-0.00832593189139439)+(((-1.0)*x4185))+((cj3*x4185))+(((0.00762287160607455)*(sj3*sj3)))+(((-0.00114343074091118)*cj3*sj3))+(((-0.276115968706857)*pp*sj3))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))))), ((x4189.value)*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4190=IKsin(j1);
IkReal x4191=IKcos(j1);
IkReal x4192=((0.045)*sj3);
IkReal x4193=((0.3)*cj3);
IkReal x4194=((0.045)*cj3);
IkReal x4195=(cj0*px);
IkReal x4196=(py*sj0);
IkReal x4197=(sj3*x4191);
IkReal x4198=((0.09)*x4191);
IkReal x4199=((1.1)*x4190);
evalcond[0]=((-0.55)+(((-1.0)*x4193))+(((-1.0)*x4192))+((x4190*x4195))+((x4190*x4196)));
evalcond[1]=((0.045)+(((-1.0)*x4194))+((x4191*x4195))+((x4191*x4196))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+((x4196*x4199))+(((-1.0)*x4195*x4198))+(((-1.0)*x4196*x4198))+(((-1.0)*pp))+((x4195*x4199)));
evalcond[3]=((((-0.310561435803037)*sj3*x4190))+(((0.0254095720202485)*x4197))+(((-0.92038656235619)*pp*x4191))+(((-0.099746893695352)*x4190))+(((-0.185020708697653)*x4191))+(((0.138057984353428)*pp*x4190)));
evalcond[4]=((((-0.045)*x4191))+(((-1.0)*x4195))+(((-1.0)*x4196))+((x4191*x4194))+((x4190*x4192))+((x4190*x4193))+(((0.55)*x4190))+(((-0.3)*x4197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4200=(cj0*px);
IkReal x4201=(py*sj0);
IkReal x4202=((0.92038656235619)*pp);
IkReal x4203=((0.0254095720202485)*sj3);
CheckValue<IkReal> x4204=IKPowWithIntegerCheck((x4200+x4201),-1);
if(!x4204.valid){
continue;
}
CheckValue<IkReal> x4205=IKPowWithIntegerCheck(((((-1.0)*x4201*x4202))+((x4201*x4203))+((x4200*x4203))+(((-0.185020708697653)*x4201))+(((-0.185020708697653)*x4200))+(((-1.0)*x4200*x4202))),-1);
if(!x4205.valid){
continue;
}
if( IKabs(((x4204.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4205.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4204.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))))+IKsqr(((x4205.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x4204.value)*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))), ((x4205.value)*(((0.0548607915324436)+(((0.175297399907961)*sj3))+(((0.0931684307409112)*cj3*sj3))+(((-0.0414173953060285)*cj3*pp))+(((-0.00621260929590428)*pp*sj3))+(((0.0139752646111367)*(sj3*sj3)))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4206=IKsin(j1);
IkReal x4207=IKcos(j1);
IkReal x4208=((0.045)*sj3);
IkReal x4209=((0.3)*cj3);
IkReal x4210=((0.045)*cj3);
IkReal x4211=(cj0*px);
IkReal x4212=(py*sj0);
IkReal x4213=(sj3*x4207);
IkReal x4214=((0.09)*x4207);
IkReal x4215=((1.1)*x4206);
evalcond[0]=((-0.55)+(((-1.0)*x4208))+(((-1.0)*x4209))+((x4206*x4211))+((x4206*x4212)));
evalcond[1]=((0.045)+((x4207*x4212))+((x4207*x4211))+(((0.3)*sj3))+(((-1.0)*x4210)));
evalcond[2]=((-0.2125)+(((-1.0)*x4212*x4214))+(((-1.0)*pp))+((x4212*x4215))+(((-1.0)*x4211*x4214))+((x4211*x4215)));
evalcond[3]=((((0.0254095720202485)*x4213))+(((-0.92038656235619)*pp*x4207))+(((0.138057984353428)*pp*x4206))+(((-0.099746893695352)*x4206))+(((-0.185020708697653)*x4207))+(((-0.310561435803037)*sj3*x4206)));
evalcond[4]=((((0.55)*x4206))+((x4207*x4210))+((x4206*x4208))+((x4206*x4209))+(((-1.0)*x4212))+(((-1.0)*x4211))+(((-0.3)*x4213))+(((-0.045)*x4207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x4216 = IKatan2WithCheck((gconst101*(((0.55)+(((0.045)*sj3))+(((0.3)*cj3))))),(gconst101*(((-0.045)+(((0.045)*cj3))+(((-0.3)*sj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4216.valid){
continue;
}
j1array[0]=x4216.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4217=IKsin(j1);
IkReal x4218=IKcos(j1);
IkReal x4219=((0.045)*sj3);
IkReal x4220=((0.3)*cj3);
IkReal x4221=((0.045)*cj3);
IkReal x4222=(cj0*px);
IkReal x4223=(py*sj0);
IkReal x4224=(sj3*x4218);
IkReal x4225=((0.09)*x4218);
IkReal x4226=((1.1)*x4217);
evalcond[0]=((-0.55)+(((-1.0)*x4220))+((x4217*x4223))+((x4217*x4222))+(((-1.0)*x4219)));
evalcond[1]=((0.045)+(((-1.0)*x4221))+((x4218*x4223))+((x4218*x4222))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*x4223*x4225))+(((-1.0)*x4222*x4225))+(((-1.0)*pp))+((x4223*x4226))+((x4222*x4226)));
evalcond[3]=((((0.0254095720202485)*x4224))+(((-0.099746893695352)*x4217))+(((-0.185020708697653)*x4218))+(((0.138057984353428)*pp*x4217))+(((-0.92038656235619)*pp*x4218))+(((-0.310561435803037)*sj3*x4217)));
evalcond[4]=(((x4218*x4221))+((x4217*x4220))+(((-1.0)*x4222))+(((-1.0)*x4223))+(((-0.045)*x4218))+((x4217*x4219))+(((0.55)*x4217))+(((-0.3)*x4224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4227=(cj2*pz);
IkReal x4228=((1.0)*cj0);
IkReal x4229=(cj0*px);
IkReal x4230=(py*sj0);
IkReal x4231=((0.55)*sj2);
IkReal x4232=(cj2*sj0);
IkReal x4233=((0.3)*cj3*sj2);
IkReal x4234=((0.045)*sj2*sj3);
IkReal x4235=(cj2*px*py);
CheckValue<IkReal> x4236 = IKatan2WithCheck((gconst67*((((x4230*x4234))+((x4230*x4233))+((x4230*x4231))+(((-1.0)*py*x4227*x4228))+((px*sj0*x4227))+((x4229*x4231))+((x4229*x4234))+((x4229*x4233))))),(gconst67*((((pz*x4231))+((pz*x4233))+((pz*x4234))+((cj0*cj2*py*x4230))+((cj0*cj2*py*x4229))+(((-1.0)*px*x4230*x4232))+(((-1.0)*x4228*x4232*(px*px)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4236.valid){
continue;
}
j1array[0]=x4236.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4237=IKsin(j1);
IkReal x4238=IKcos(j1);
IkReal x4239=(px*sj2);
IkReal x4240=((0.3)*sj3);
IkReal x4241=((0.09)*sj0);
IkReal x4242=(cj2*px);
IkReal x4243=((0.045)*cj3);
IkReal x4244=((0.045)*cj2);
IkReal x4245=(py*sj0);
IkReal x4246=((0.045)*sj3);
IkReal x4247=((1.0)*cj0);
IkReal x4248=((0.3)*cj3);
IkReal x4249=(py*sj2);
IkReal x4250=(cj0*x4238);
IkReal x4251=(cj3*x4237);
IkReal x4252=(cj2*x4238);
IkReal x4253=(cj2*x4237);
IkReal x4254=(pz*x4238);
IkReal x4255=(cj0*px*x4237);
evalcond[0]=((-0.55)+((x4237*x4245))+(((-1.0)*x4246))+(((-1.0)*x4248))+x4255+x4254);
evalcond[1]=((((-1.0)*cj2*py*x4247))+((sj0*x4242))+((x4239*x4250))+(((-1.0)*pz*sj2*x4237))+((sj2*x4238*x4245)));
evalcond[2]=(((x4237*x4244))+((x4240*x4253))+pz+(((-1.0)*x4238*x4248))+(((-1.0)*x4238*x4246))+(((-0.55)*x4238))+(((-1.0)*x4243*x4253)));
evalcond[3]=((0.045)+(((-1.0)*x4247*x4249))+((pz*x4253))+(((-1.0)*x4243))+(((-1.0)*x4245*x4252))+((sj0*x4239))+(((-1.0)*x4238*x4242*x4247))+x4240);
evalcond[4]=((((0.55)*x4237))+(((-1.0)*px*x4247))+((x4237*x4246))+((x4237*x4248))+((x4238*x4244))+((x4240*x4252))+(((-1.0)*x4243*x4252))+(((-1.0)*x4245)));
evalcond[5]=((-0.2125)+(((-0.09)*pz*x4253))+(((1.1)*x4237*x4245))+(((1.1)*x4255))+(((1.1)*x4254))+(((-1.0)*pp))+(((0.09)*cj0*x4249))+(((-1.0)*x4239*x4241))+((py*x4241*x4252))+(((0.09)*x4242*x4250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4256=cj3*cj3;
IkReal x4257=sj3*sj3;
IkReal x4258=(cj2*sj3);
IkReal x4259=((0.0135)*cj2);
IkReal x4260=((1.0)*pz);
CheckValue<IkReal> x4261 = IKatan2WithCheck((gconst66*(((-0.3025)+(((-0.0495)*sj3))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.09)*x4256))+(((-0.002025)*x4257))+(((-0.33)*cj3))))),(gconst66*(((((-0.087975)*cj3*x4258))+(((-1.0)*x4257*x4259))+(((-1.0)*cj0*px*x4260))+(((-1.0)*py*sj0*x4260))+(((-0.02475)*cj2))+((x4256*x4259))+(((-0.167025)*x4258))+(((0.01125)*cj2*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4261.valid){
continue;
}
j1array[0]=x4261.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4262=IKsin(j1);
IkReal x4263=IKcos(j1);
IkReal x4264=(px*sj2);
IkReal x4265=((0.3)*sj3);
IkReal x4266=((0.09)*sj0);
IkReal x4267=(cj2*px);
IkReal x4268=((0.045)*cj3);
IkReal x4269=((0.045)*cj2);
IkReal x4270=(py*sj0);
IkReal x4271=((0.045)*sj3);
IkReal x4272=((1.0)*cj0);
IkReal x4273=((0.3)*cj3);
IkReal x4274=(py*sj2);
IkReal x4275=(cj0*x4263);
IkReal x4276=(cj3*x4262);
IkReal x4277=(cj2*x4263);
IkReal x4278=(cj2*x4262);
IkReal x4279=(pz*x4263);
IkReal x4280=(cj0*px*x4262);
evalcond[0]=((-0.55)+((x4262*x4270))+x4280+x4279+(((-1.0)*x4271))+(((-1.0)*x4273)));
evalcond[1]=(((x4264*x4275))+(((-1.0)*pz*sj2*x4262))+((sj0*x4267))+(((-1.0)*cj2*py*x4272))+((sj2*x4263*x4270)));
evalcond[2]=((((-0.55)*x4263))+(((-1.0)*x4263*x4271))+(((-1.0)*x4263*x4273))+((x4265*x4278))+pz+((x4262*x4269))+(((-1.0)*x4268*x4278)));
evalcond[3]=((0.045)+((pz*x4278))+(((-1.0)*x4263*x4267*x4272))+(((-1.0)*x4270*x4277))+(((-1.0)*x4272*x4274))+x4265+((sj0*x4264))+(((-1.0)*x4268)));
evalcond[4]=((((-1.0)*px*x4272))+((x4265*x4277))+((x4263*x4269))+((x4262*x4273))+((x4262*x4271))+(((-1.0)*x4268*x4277))+(((0.55)*x4262))+(((-1.0)*x4270)));
evalcond[5]=((-0.2125)+(((1.1)*x4279))+(((1.1)*x4262*x4270))+(((-1.0)*x4264*x4266))+(((0.09)*x4267*x4275))+(((1.1)*x4280))+(((0.09)*cj0*x4274))+(((-1.0)*pp))+(((-0.09)*pz*x4278))+((py*x4266*x4277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x88=((1.0)*cj3);
IkReal x89=(sj0*sj2);
IkReal x90=(cj2*sj1);
IkReal x91=((1.0)*sj3);
IkReal x92=(cj1*cj2);
IkReal x93=(sj1*sj2);
IkReal x94=(cj0*sj2);
IkReal x95=((1.0)*cj1);
IkReal x96=((((-1.0)*sj1*x91))+((cj3*x92)));
IkReal x97=(((cj0*cj2))+(((-1.0)*x89*x95)));
IkReal x98=(((sj3*x92))+((cj3*sj1)));
IkReal x99=((((-1.0)*x90*x91))+((cj1*cj3)));
IkReal x100=(cj0*x96);
IkReal x101=((((-1.0)*cj1*x91))+(((-1.0)*x88*x90)));
IkReal x102=((((-1.0)*x94*x95))+(((-1.0)*cj2*sj0)));
IkReal x103=(((cj3*x94))+((sj0*x96)));
IkReal x104=(((cj0*x98))+(((-1.0)*x89*x91)));
IkReal x105=(((sj3*x94))+((sj0*x98)));
IkReal x106=(x100+(((-1.0)*cj3*x89)));
new_r00=(((r10*x103))+((r20*x101))+((r00*((x100+(((-1.0)*x88*x89)))))));
new_r01=(((r21*x101))+((r01*x106))+((r11*x103)));
new_r02=(((r02*x106))+((r22*x101))+((r12*x103)));
new_r10=(((r10*x97))+((r20*x93))+((r00*x102)));
new_r11=(((r21*x93))+((r11*x97))+((r01*x102)));
new_r12=(((r02*x102))+((r12*x97))+((r22*x93)));
new_r20=(((r10*x105))+((r20*x99))+((r00*x104)));
new_r21=(((r21*x99))+((r01*x104))+((r11*x105)));
new_r22=(((r02*x104))+((r12*x105))+((r22*x99)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst126;
gconst126=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst127;
gconst127=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst128;
gconst128=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x107=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x107;
evalcond[2]=x107;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r20);
evalcond[10]=((-1.0)*new_r21);
evalcond[11]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x108=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x108;
evalcond[2]=x108;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x108;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x110 = IKatan2WithCheck(new_r02,new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x110.valid){
continue;
}
IkReal x109=x110.value;
j4array[0]=((-1.0)*x109);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x109)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst162;
gconst162=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst163;
gconst163=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x111=((1.0)*new_r00);
CheckValue<IkReal> x112 = IKatan2WithCheck((gconst163*((((cj4*new_r10))+(((-1.0)*sj4*x111))))),(gconst163*(((((-1.0)*cj4*x111))+(((-1.0)*new_r10*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x112.valid){
continue;
}
j6array[0]=x112.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x113=IKcos(j6);
IkReal x114=IKsin(j6);
IkReal x115=((1.0)*sj4);
IkReal x116=((1.0)*x114);
IkReal x117=(sj4*x113);
IkReal x118=((1.0)*x113);
IkReal x119=(cj4*x116);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x113);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x116)));
evalcond[2]=(((sj4*x114))+((cj4*x113))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x115))+((cj4*new_r10))+(((-1.0)*x116)));
evalcond[4]=((((-1.0)*new_r01*x115))+((cj4*new_r11))+(((-1.0)*x118)));
evalcond[5]=((((-1.0)*x119))+x117+new_r01);
evalcond[6]=((((-1.0)*x119))+x117+new_r10);
evalcond[7]=((((-1.0)*x114*x115))+(((-1.0)*cj4*x118))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x120=((1.0)*new_r00);
CheckValue<IkReal> x121 = IKatan2WithCheck((gconst162*((((cj4*new_r01))+(((-1.0)*sj4*x120))))),(gconst162*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x120))))),IKFAST_ATAN2_MAGTHRESH);
if(!x121.valid){
continue;
}
j6array[0]=x121.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x122=IKcos(j6);
IkReal x123=IKsin(j6);
IkReal x124=((1.0)*sj4);
IkReal x125=((1.0)*x123);
IkReal x126=(sj4*x122);
IkReal x127=((1.0)*x122);
IkReal x128=(cj4*x125);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x122);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x125)));
evalcond[2]=(((sj4*x123))+new_r00+((cj4*x122)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x124))+(((-1.0)*x125)));
evalcond[4]=((((-1.0)*new_r01*x124))+((cj4*new_r11))+(((-1.0)*x127)));
evalcond[5]=((((-1.0)*x128))+x126+new_r01);
evalcond[6]=((((-1.0)*x128))+x126+new_r10);
evalcond[7]=((((-1.0)*x123*x124))+(((-1.0)*cj4*x127))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x129 = IKatan2WithCheck((gconst128*new_r21),((-1.0)*gconst128*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x129.valid){
continue;
}
j6array[0]=x129.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=(new_r20+((sj5*(IKcos(j6)))));
evalcond[1]=((((-1.0)*sj5*(IKsin(j6))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst129;
gconst129=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst130;
gconst130=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x130=((-1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x130;
evalcond[2]=x130;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r20);
evalcond[10]=((-1.0)*new_r21);
evalcond[11]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst131;
gconst131=IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11))));
dummyeval[0]=(((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst132;
gconst132=IKsign((((new_r12*sj6))+(((-1.0)*cj6*new_r02))));
dummyeval[0]=(((new_r12*sj6))+(((-1.0)*cj6*new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst133;
CheckValue<IkReal> x131 = IKatan2WithCheck(((-1.0)*new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x131.valid){
continue;
}
gconst133=((-1.0)*(x131.value));
IkReal gconst134;
gconst134=IKsin(gconst133);
IkReal gconst135;
gconst135=IKcos(gconst133);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst133))+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst139;
gconst139=IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11))));
dummyeval[0]=(((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst140;
gconst140=IKsign(((((-1.0)*gconst135*new_r02))+((gconst134*new_r12))));
dummyeval[0]=((((-1.0)*gconst135*new_r02))+((gconst134*new_r12)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x132=(gconst140*new_r01);
CheckValue<IkReal> x133 = IKatan2WithCheck((new_r02*x132),((-1.0)*new_r12*x132),IKFAST_ATAN2_MAGTHRESH);
if(!x133.valid){
continue;
}
j4array[0]=x133.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x134=IKcos(j4);
IkReal x135=IKsin(j4);
IkReal x136=((1.0)*gconst135);
IkReal x137=(gconst134*x135);
IkReal x138=((1.0)*x134);
IkReal x139=(gconst135*x135);
IkReal x140=((1.0)*x135);
IkReal x141=(x134*x136);
evalcond[0]=(((new_r12*x135))+((new_r02*x134)));
evalcond[1]=(((new_r12*x134))+(((-1.0)*new_r02*x140)));
evalcond[2]=(((new_r01*x134))+gconst134+((new_r11*x135)));
evalcond[3]=(x139+((gconst134*x134))+new_r01);
evalcond[4]=((((-1.0)*x141))+x137+new_r00);
evalcond[5]=((((-1.0)*x141))+x137+new_r11);
evalcond[6]=(((new_r00*x134))+(((-1.0)*x136))+((new_r10*x135)));
evalcond[7]=((((-1.0)*x135*x136))+(((-1.0)*gconst134*x138))+new_r10);
evalcond[8]=((((-1.0)*gconst134))+((new_r10*x134))+(((-1.0)*new_r00*x140)));
evalcond[9]=((((-1.0)*new_r01*x140))+(((-1.0)*x136))+((new_r11*x134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x142=(gconst134*gconst139);
CheckValue<IkReal> x143 = IKatan2WithCheck((new_r02*x142),((-1.0)*new_r12*x142),IKFAST_ATAN2_MAGTHRESH);
if(!x143.valid){
continue;
}
j4array[0]=x143.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x144=IKcos(j4);
IkReal x145=IKsin(j4);
IkReal x146=((1.0)*gconst135);
IkReal x147=(gconst134*x145);
IkReal x148=((1.0)*x144);
IkReal x149=(gconst135*x145);
IkReal x150=((1.0)*x145);
IkReal x151=(x144*x146);
evalcond[0]=(((new_r12*x145))+((new_r02*x144)));
evalcond[1]=(((new_r12*x144))+(((-1.0)*new_r02*x150)));
evalcond[2]=(((new_r01*x144))+((new_r11*x145))+gconst134);
evalcond[3]=(x149+((gconst134*x144))+new_r01);
evalcond[4]=((((-1.0)*x151))+x147+new_r00);
evalcond[5]=((((-1.0)*x151))+x147+new_r11);
evalcond[6]=((((-1.0)*x146))+((new_r00*x144))+((new_r10*x145)));
evalcond[7]=((((-1.0)*x145*x146))+new_r10+(((-1.0)*gconst134*x148)));
evalcond[8]=(((new_r10*x144))+(((-1.0)*gconst134))+(((-1.0)*new_r00*x150)));
evalcond[9]=((((-1.0)*x146))+((new_r11*x144))+(((-1.0)*new_r01*x150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst136;
CheckValue<IkReal> x152 = IKatan2WithCheck(((-1.0)*new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x152.valid){
continue;
}
gconst136=((3.14159265358979)+(((-1.0)*(x152.value))));
IkReal gconst137;
gconst137=IKsin(gconst136);
IkReal gconst138;
gconst138=IKcos(gconst136);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst136))+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst141;
gconst141=IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11))));
dummyeval[0]=(((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst142;
gconst142=IKsign((((gconst137*new_r12))+(((-1.0)*gconst138*new_r02))));
dummyeval[0]=(((gconst137*new_r12))+(((-1.0)*gconst138*new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x153=(gconst142*new_r01);
CheckValue<IkReal> x154 = IKatan2WithCheck((new_r02*x153),((-1.0)*new_r12*x153),IKFAST_ATAN2_MAGTHRESH);
if(!x154.valid){
continue;
}
j4array[0]=x154.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x155=IKcos(j4);
IkReal x156=IKsin(j4);
IkReal x157=((1.0)*gconst138);
IkReal x158=(gconst137*x156);
IkReal x159=((1.0)*x156);
IkReal x160=(gconst137*x155);
IkReal x161=(x155*x157);
evalcond[0]=(((new_r12*x156))+((new_r02*x155)));
evalcond[1]=(((new_r12*x155))+(((-1.0)*new_r02*x159)));
evalcond[2]=(((new_r01*x155))+((new_r11*x156))+gconst137);
evalcond[3]=(((gconst138*x156))+x160+new_r01);
evalcond[4]=((((-1.0)*x161))+x158+new_r00);
evalcond[5]=((((-1.0)*x161))+x158+new_r11);
evalcond[6]=((((-1.0)*x157))+((new_r00*x155))+((new_r10*x156)));
evalcond[7]=((((-1.0)*x160))+(((-1.0)*x156*x157))+new_r10);
evalcond[8]=(((new_r10*x155))+(((-1.0)*gconst137))+(((-1.0)*new_r00*x159)));
evalcond[9]=((((-1.0)*x157))+((new_r11*x155))+(((-1.0)*new_r01*x159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x162=(gconst137*gconst141);
CheckValue<IkReal> x163 = IKatan2WithCheck((new_r02*x162),((-1.0)*new_r12*x162),IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
j4array[0]=x163.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x164=IKcos(j4);
IkReal x165=IKsin(j4);
IkReal x166=((1.0)*gconst138);
IkReal x167=(gconst137*x165);
IkReal x168=((1.0)*x165);
IkReal x169=(gconst137*x164);
IkReal x170=(x164*x166);
evalcond[0]=(((new_r12*x165))+((new_r02*x164)));
evalcond[1]=(((new_r12*x164))+(((-1.0)*new_r02*x168)));
evalcond[2]=(((new_r01*x164))+((new_r11*x165))+gconst137);
evalcond[3]=(x169+new_r01+((gconst138*x165)));
evalcond[4]=((((-1.0)*x170))+x167+new_r00);
evalcond[5]=((((-1.0)*x170))+x167+new_r11);
evalcond[6]=(((new_r00*x164))+(((-1.0)*x166))+((new_r10*x165)));
evalcond[7]=((((-1.0)*x169))+new_r10+(((-1.0)*x165*x166)));
evalcond[8]=((((-1.0)*new_r00*x168))+((new_r10*x164))+(((-1.0)*gconst137)));
evalcond[9]=(((new_r11*x164))+(((-1.0)*x166))+(((-1.0)*new_r01*x168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x171=(gconst132*new_r01);
CheckValue<IkReal> x172 = IKatan2WithCheck((new_r02*x171),((-1.0)*new_r12*x171),IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
j4array[0]=x172.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x173=IKcos(j4);
IkReal x174=IKsin(j4);
IkReal x175=((1.0)*cj6);
IkReal x176=(sj6*x174);
IkReal x177=((1.0)*x173);
IkReal x178=(cj6*x174);
IkReal x179=((1.0)*x174);
IkReal x180=(x173*x175);
evalcond[0]=(((new_r02*x173))+((new_r12*x174)));
evalcond[1]=(((new_r12*x173))+(((-1.0)*new_r02*x179)));
evalcond[2]=(((new_r01*x173))+sj6+((new_r11*x174)));
evalcond[3]=(x178+((sj6*x173))+new_r01);
evalcond[4]=((((-1.0)*x180))+x176+new_r00);
evalcond[5]=((((-1.0)*x180))+x176+new_r11);
evalcond[6]=(((new_r00*x173))+((new_r10*x174))+(((-1.0)*x175)));
evalcond[7]=((((-1.0)*x174*x175))+(((-1.0)*sj6*x177))+new_r10);
evalcond[8]=((((-1.0)*sj6))+((new_r10*x173))+(((-1.0)*new_r00*x179)));
evalcond[9]=(((new_r11*x173))+(((-1.0)*x175))+(((-1.0)*new_r01*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x181=(gconst131*sj6);
CheckValue<IkReal> x182 = IKatan2WithCheck((new_r02*x181),((-1.0)*new_r12*x181),IKFAST_ATAN2_MAGTHRESH);
if(!x182.valid){
continue;
}
j4array[0]=x182.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x183=IKcos(j4);
IkReal x184=IKsin(j4);
IkReal x185=((1.0)*cj6);
IkReal x186=(sj6*x184);
IkReal x187=((1.0)*x183);
IkReal x188=(cj6*x184);
IkReal x189=((1.0)*x184);
IkReal x190=(x183*x185);
evalcond[0]=(((new_r02*x183))+((new_r12*x184)));
evalcond[1]=(((new_r12*x183))+(((-1.0)*new_r02*x189)));
evalcond[2]=(((new_r11*x184))+sj6+((new_r01*x183)));
evalcond[3]=(x188+((sj6*x183))+new_r01);
evalcond[4]=((((-1.0)*x190))+x186+new_r00);
evalcond[5]=((((-1.0)*x190))+x186+new_r11);
evalcond[6]=(((new_r10*x184))+((new_r00*x183))+(((-1.0)*x185)));
evalcond[7]=((((-1.0)*x184*x185))+(((-1.0)*sj6*x187))+new_r10);
evalcond[8]=(((new_r10*x183))+(((-1.0)*sj6))+(((-1.0)*new_r00*x189)));
evalcond[9]=(((new_r11*x183))+(((-1.0)*x185))+(((-1.0)*new_r01*x189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x191=((1.0)+new_r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x191;
evalcond[2]=x191;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x191;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst143;
gconst143=IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10))));
dummyeval[0]=(((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst144;
gconst144=IKsign(((((-1.0)*new_r02*sj6))+((cj6*new_r12))));
dummyeval[0]=((((-1.0)*new_r02*sj6))+((cj6*new_r12)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst145;
CheckValue<IkReal> x192 = IKatan2WithCheck(new_r12,((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x192.valid){
continue;
}
gconst145=((-1.0)*(x192.value));
IkReal gconst146;
gconst146=IKsin(gconst145);
IkReal gconst147;
gconst147=IKcos(gconst145);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst145))+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst151;
gconst151=IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10))));
dummyeval[0]=(((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst152;
gconst152=IKsign((((gconst147*new_r12))+(((-1.0)*gconst146*new_r02))));
dummyeval[0]=(((gconst147*new_r12))+(((-1.0)*gconst146*new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x193=(gconst152*new_r00);
CheckValue<IkReal> x194 = IKatan2WithCheck((new_r02*x193),((-1.0)*new_r12*x193),IKFAST_ATAN2_MAGTHRESH);
if(!x194.valid){
continue;
}
j4array[0]=x194.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x195=IKcos(j4);
IkReal x196=IKsin(j4);
IkReal x197=((1.0)*gconst146);
IkReal x198=((1.0)*gconst147);
IkReal x199=(gconst147*x196);
IkReal x200=(gconst146*x196);
IkReal x201=((1.0)*x196);
IkReal x202=(x195*x197);
evalcond[0]=(((new_r02*x195))+((new_r12*x196)));
evalcond[1]=((((-1.0)*new_r02*x201))+((new_r12*x195)));
evalcond[2]=(((new_r10*x196))+((new_r00*x195))+gconst147);
evalcond[3]=(((gconst147*x195))+x200+new_r00);
evalcond[4]=(x199+(((-1.0)*x202))+new_r01);
evalcond[5]=(x199+(((-1.0)*x202))+new_r10);
evalcond[6]=(((new_r11*x196))+((new_r01*x195))+(((-1.0)*x197)));
evalcond[7]=((((-1.0)*x196*x197))+(((-1.0)*x195*x198))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x201))+((new_r10*x195))+(((-1.0)*x197)));
evalcond[9]=(((new_r11*x195))+(((-1.0)*x198))+(((-1.0)*new_r01*x201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x203=(gconst147*gconst151);
CheckValue<IkReal> x204 = IKatan2WithCheck((new_r02*x203),((-1.0)*new_r12*x203),IKFAST_ATAN2_MAGTHRESH);
if(!x204.valid){
continue;
}
j4array[0]=x204.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x205=IKcos(j4);
IkReal x206=IKsin(j4);
IkReal x207=((1.0)*gconst146);
IkReal x208=((1.0)*gconst147);
IkReal x209=(gconst147*x206);
IkReal x210=(gconst146*x206);
IkReal x211=((1.0)*x206);
IkReal x212=(x205*x207);
evalcond[0]=(((new_r02*x205))+((new_r12*x206)));
evalcond[1]=((((-1.0)*new_r02*x211))+((new_r12*x205)));
evalcond[2]=(((new_r10*x206))+((new_r00*x205))+gconst147);
evalcond[3]=(x210+new_r00+((gconst147*x205)));
evalcond[4]=(x209+new_r01+(((-1.0)*x212)));
evalcond[5]=(x209+new_r10+(((-1.0)*x212)));
evalcond[6]=(((new_r11*x206))+((new_r01*x205))+(((-1.0)*x207)));
evalcond[7]=((((-1.0)*x206*x207))+(((-1.0)*x205*x208))+new_r11);
evalcond[8]=(((new_r10*x205))+(((-1.0)*x207))+(((-1.0)*new_r00*x211)));
evalcond[9]=(((new_r11*x205))+(((-1.0)*x208))+(((-1.0)*new_r01*x211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst148;
CheckValue<IkReal> x213 = IKatan2WithCheck(new_r12,((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x213.valid){
continue;
}
gconst148=((3.14159265358979)+(((-1.0)*(x213.value))));
IkReal gconst149;
gconst149=IKsin(gconst148);
IkReal gconst150;
gconst150=IKcos(gconst148);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst148))+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst153;
gconst153=IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10))));
dummyeval[0]=(((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst154;
gconst154=IKsign(((((-1.0)*gconst149*new_r02))+((gconst150*new_r12))));
dummyeval[0]=((((-1.0)*gconst149*new_r02))+((gconst150*new_r12)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x214=(gconst154*new_r00);
CheckValue<IkReal> x215 = IKatan2WithCheck((new_r02*x214),((-1.0)*new_r12*x214),IKFAST_ATAN2_MAGTHRESH);
if(!x215.valid){
continue;
}
j4array[0]=x215.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x216=IKcos(j4);
IkReal x217=IKsin(j4);
IkReal x218=((1.0)*gconst149);
IkReal x219=(gconst150*x217);
IkReal x220=(gconst150*x216);
IkReal x221=((1.0)*x217);
IkReal x222=(x216*x218);
evalcond[0]=(((new_r02*x216))+((new_r12*x217)));
evalcond[1]=((((-1.0)*new_r02*x221))+((new_r12*x216)));
evalcond[2]=(((new_r00*x216))+gconst150+((new_r10*x217)));
evalcond[3]=(((gconst149*x217))+x220+new_r00);
evalcond[4]=(x219+new_r01+(((-1.0)*x222)));
evalcond[5]=(x219+new_r10+(((-1.0)*x222)));
evalcond[6]=(((new_r01*x216))+(((-1.0)*x218))+((new_r11*x217)));
evalcond[7]=((((-1.0)*x217*x218))+new_r11+(((-1.0)*x220)));
evalcond[8]=((((-1.0)*x218))+((new_r10*x216))+(((-1.0)*new_r00*x221)));
evalcond[9]=((((-1.0)*new_r01*x221))+(((-1.0)*gconst150))+((new_r11*x216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x223=(gconst150*gconst153);
CheckValue<IkReal> x224 = IKatan2WithCheck((new_r02*x223),((-1.0)*new_r12*x223),IKFAST_ATAN2_MAGTHRESH);
if(!x224.valid){
continue;
}
j4array[0]=x224.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x225=IKcos(j4);
IkReal x226=IKsin(j4);
IkReal x227=((1.0)*gconst149);
IkReal x228=(gconst150*x226);
IkReal x229=(gconst150*x225);
IkReal x230=((1.0)*x226);
IkReal x231=(x225*x227);
evalcond[0]=(((new_r02*x225))+((new_r12*x226)));
evalcond[1]=((((-1.0)*new_r02*x230))+((new_r12*x225)));
evalcond[2]=(((new_r00*x225))+gconst150+((new_r10*x226)));
evalcond[3]=(x229+new_r00+((gconst149*x226)));
evalcond[4]=((((-1.0)*x231))+x228+new_r01);
evalcond[5]=((((-1.0)*x231))+x228+new_r10);
evalcond[6]=(((new_r01*x225))+((new_r11*x226))+(((-1.0)*x227)));
evalcond[7]=(new_r11+(((-1.0)*x226*x227))+(((-1.0)*x229)));
evalcond[8]=(((new_r10*x225))+(((-1.0)*new_r00*x230))+(((-1.0)*x227)));
evalcond[9]=((((-1.0)*gconst150))+((new_r11*x225))+(((-1.0)*new_r01*x230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x232=(gconst144*new_r00);
CheckValue<IkReal> x233 = IKatan2WithCheck((new_r02*x232),((-1.0)*new_r12*x232),IKFAST_ATAN2_MAGTHRESH);
if(!x233.valid){
continue;
}
j4array[0]=x233.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x234=IKcos(j4);
IkReal x235=IKsin(j4);
IkReal x236=((1.0)*sj6);
IkReal x237=(cj6*x235);
IkReal x238=(cj6*x234);
IkReal x239=((1.0)*x235);
IkReal x240=(x234*x236);
evalcond[0]=(((new_r02*x234))+((new_r12*x235)));
evalcond[1]=((((-1.0)*new_r02*x239))+((new_r12*x234)));
evalcond[2]=(((new_r10*x235))+cj6+((new_r00*x234)));
evalcond[3]=(x238+new_r00+((sj6*x235)));
evalcond[4]=(x237+(((-1.0)*x240))+new_r01);
evalcond[5]=(x237+(((-1.0)*x240))+new_r10);
evalcond[6]=(((new_r11*x235))+((new_r01*x234))+(((-1.0)*x236)));
evalcond[7]=((((-1.0)*x235*x236))+new_r11+(((-1.0)*x238)));
evalcond[8]=(((new_r10*x234))+(((-1.0)*x236))+(((-1.0)*new_r00*x239)));
evalcond[9]=(((new_r11*x234))+(((-1.0)*new_r01*x239))+(((-1.0)*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x241=(cj6*gconst143);
CheckValue<IkReal> x242 = IKatan2WithCheck((new_r02*x241),((-1.0)*new_r12*x241),IKFAST_ATAN2_MAGTHRESH);
if(!x242.valid){
continue;
}
j4array[0]=x242.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x243=IKcos(j4);
IkReal x244=IKsin(j4);
IkReal x245=((1.0)*sj6);
IkReal x246=(cj6*x244);
IkReal x247=(cj6*x243);
IkReal x248=((1.0)*x244);
IkReal x249=(x243*x245);
evalcond[0]=(((new_r12*x244))+((new_r02*x243)));
evalcond[1]=(((new_r12*x243))+(((-1.0)*new_r02*x248)));
evalcond[2]=(cj6+((new_r00*x243))+((new_r10*x244)));
evalcond[3]=(x247+((sj6*x244))+new_r00);
evalcond[4]=(x246+(((-1.0)*x249))+new_r01);
evalcond[5]=(x246+(((-1.0)*x249))+new_r10);
evalcond[6]=(((new_r01*x243))+(((-1.0)*x245))+((new_r11*x244)));
evalcond[7]=((((-1.0)*x247))+new_r11+(((-1.0)*x244*x245)));
evalcond[8]=((((-1.0)*new_r00*x248))+(((-1.0)*x245))+((new_r10*x243)));
evalcond[9]=((((-1.0)*new_r01*x248))+((new_r11*x243))+(((-1.0)*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x250 = IKatan2WithCheck((gconst130*new_r12),(gconst130*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x250.valid){
continue;
}
j4array[0]=x250.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x251=IKcos(j4);
IkReal x252=IKsin(j4);
IkReal x253=((1.0)*cj6);
IkReal x254=(cj5*sj6);
IkReal x255=((1.0)*cj5);
IkReal x256=((1.0)*sj5);
IkReal x257=((1.0)*x251);
IkReal x258=(cj5*x252);
IkReal x259=(new_r11*x252);
IkReal x260=(cj5*x251);
IkReal x261=(new_r12*x252);
IkReal x262=(new_r10*x252);
IkReal x263=((1.0)*x252);
evalcond[0]=((((-1.0)*x251*x256))+new_r02);
evalcond[1]=((((-1.0)*x252*x256))+new_r12);
evalcond[2]=(((new_r12*x251))+(((-1.0)*new_r02*x263)));
evalcond[3]=(((cj6*x252))+((x251*x254))+new_r01);
evalcond[4]=(((new_r02*x251))+x261+(((-1.0)*x256)));
evalcond[5]=(((new_r01*x251))+x259+x254);
evalcond[6]=(((sj6*x252))+(((-1.0)*x253*x260))+new_r00);
evalcond[7]=((((-1.0)*x251*x253))+((x252*x254))+new_r11);
evalcond[8]=((((-1.0)*sj6))+(((-1.0)*new_r00*x263))+((new_r10*x251)));
evalcond[9]=((((-1.0)*new_r01*x263))+((new_r11*x251))+(((-1.0)*x253)));
evalcond[10]=((((-1.0)*cj5*x253))+((new_r00*x251))+x262);
evalcond[11]=(new_r10+(((-1.0)*x253*x258))+(((-1.0)*sj6*x257)));
evalcond[12]=(((new_r12*x258))+(((-1.0)*new_r22*x256))+((new_r02*x260)));
evalcond[13]=((((-1.0)*new_r21*x256))+sj6+((new_r01*x260))+((new_r11*x258)));
evalcond[14]=((((-1.0)*new_r20*x255))+(((-1.0)*x256*x262))+(((-1.0)*new_r00*x251*x256)));
evalcond[15]=((((-1.0)*new_r21*x255))+(((-1.0)*x256*x259))+(((-1.0)*new_r01*x251*x256)));
evalcond[16]=((1.0)+(((-1.0)*new_r02*x251*x256))+(((-1.0)*new_r22*x255))+(((-1.0)*x256*x261)));
evalcond[17]=(((new_r00*x260))+((new_r10*x258))+(((-1.0)*new_r20*x256))+(((-1.0)*x253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x264 = IKatan2WithCheck((gconst129*new_r12),(gconst129*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x264.valid){
continue;
}
j4array[0]=x264.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x265=IKcos(j4);
IkReal x266=IKsin(j4);
IkReal x267=((1.0)*cj6);
IkReal x268=(cj5*sj6);
IkReal x269=((1.0)*cj5);
IkReal x270=((1.0)*sj5);
IkReal x271=((1.0)*x265);
IkReal x272=(cj5*x266);
IkReal x273=(new_r11*x266);
IkReal x274=(cj5*x265);
IkReal x275=(new_r12*x266);
IkReal x276=(new_r10*x266);
IkReal x277=((1.0)*x266);
evalcond[0]=((((-1.0)*x265*x270))+new_r02);
evalcond[1]=((((-1.0)*x266*x270))+new_r12);
evalcond[2]=(((new_r12*x265))+(((-1.0)*new_r02*x277)));
evalcond[3]=(((cj6*x266))+new_r01+((x265*x268)));
evalcond[4]=(x275+(((-1.0)*x270))+((new_r02*x265)));
evalcond[5]=(x268+x273+((new_r01*x265)));
evalcond[6]=(((sj6*x266))+new_r00+(((-1.0)*x267*x274)));
evalcond[7]=(((x266*x268))+(((-1.0)*x265*x267))+new_r11);
evalcond[8]=((((-1.0)*sj6))+(((-1.0)*new_r00*x277))+((new_r10*x265)));
evalcond[9]=((((-1.0)*new_r01*x277))+(((-1.0)*x267))+((new_r11*x265)));
evalcond[10]=((((-1.0)*cj5*x267))+x276+((new_r00*x265)));
evalcond[11]=((((-1.0)*sj6*x271))+new_r10+(((-1.0)*x267*x272)));
evalcond[12]=((((-1.0)*new_r22*x270))+((new_r02*x274))+((new_r12*x272)));
evalcond[13]=(sj6+(((-1.0)*new_r21*x270))+((new_r01*x274))+((new_r11*x272)));
evalcond[14]=((((-1.0)*new_r00*x265*x270))+(((-1.0)*new_r20*x269))+(((-1.0)*x270*x276)));
evalcond[15]=((((-1.0)*new_r01*x265*x270))+(((-1.0)*new_r21*x269))+(((-1.0)*x270*x273)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x269))+(((-1.0)*new_r02*x265*x270))+(((-1.0)*x270*x275)));
evalcond[17]=(((new_r00*x274))+(((-1.0)*new_r20*x270))+(((-1.0)*x267))+((new_r10*x272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x278 = IKatan2WithCheck((gconst127*new_r12),(gconst127*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x278.valid){
continue;
}
j4array[0]=x278.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x279=IKcos(j4);
IkReal x280=IKsin(j4);
IkReal x281=((1.0)*sj5);
IkReal x282=((1.0)*cj5);
IkReal x283=(new_r12*x280);
IkReal x284=(new_r02*x279);
evalcond[0]=(new_r02+(((-1.0)*x279*x281)));
evalcond[1]=((((-1.0)*x280*x281))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x280))+((new_r12*x279)));
evalcond[3]=(x284+x283+(((-1.0)*x281)));
evalcond[4]=((((-1.0)*new_r22*x281))+((cj5*x283))+((cj5*x284)));
evalcond[5]=((((-1.0)*new_r00*x279*x281))+(((-1.0)*new_r10*x280*x281))+(((-1.0)*new_r20*x282)));
evalcond[6]=((((-1.0)*new_r01*x279*x281))+(((-1.0)*new_r11*x280*x281))+(((-1.0)*new_r21*x282)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x282))+(((-1.0)*x281*x283))+(((-1.0)*x281*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst155;
gconst155=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj4;
dummyeval[1]=cj5;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x285=(new_r22+(((-1.0)*cj5)));
IkReal x286=((((-1.0)*sj5))+new_r12);
IkReal x287=((1.0)*cj5);
IkReal x288=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x285;
evalcond[2]=x285;
evalcond[3]=new_r02;
evalcond[4]=x286;
evalcond[5]=((-1.0)*new_r02);
evalcond[6]=x286;
evalcond[7]=(((cj5*new_r12))+(((-1.0)*new_r22*x288)));
evalcond[8]=((((-1.0)*new_r10*x288))+(((-1.0)*new_r20*x287)));
evalcond[9]=((((-1.0)*new_r11*x288))+(((-1.0)*new_r21*x287)));
evalcond[10]=((1.0)+(((-1.0)*new_r22*x287))+(((-1.0)*new_r12*x288)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst156;
gconst156=IKsign(new_r12);
dummyeval[0]=new_r12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=new_r22;
dummyeval[1]=new_r12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x289=IKPowWithIntegerCheck(new_r22,-1);
if(!x289.valid){
continue;
}
CheckValue<IkReal> x290=IKPowWithIntegerCheck(new_r12,-1);
if(!x290.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x289.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x290.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x289.value)))+IKsqr(((-1.0)*new_r20*(x290.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11*(x289.value)), ((-1.0)*new_r20*(x290.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x291=IKsin(j6);
IkReal x292=IKcos(j6);
IkReal x293=((1.0)*new_r12);
IkReal x294=((1.0)*x292);
evalcond[0]=(((new_r12*x292))+new_r20);
evalcond[1]=(((new_r22*x291))+new_r11);
evalcond[2]=((((-1.0)*x291*x293))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*new_r22*x294)));
evalcond[4]=((((-1.0)*x291))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x294))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x293))+x291+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x293))+(((-1.0)*x294))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x295 = IKatan2WithCheck((gconst156*new_r21),((-1.0)*gconst156*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x295.valid){
continue;
}
j6array[0]=x295.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x296=IKsin(j6);
IkReal x297=IKcos(j6);
IkReal x298=((1.0)*new_r12);
IkReal x299=((1.0)*x297);
evalcond[0]=(((new_r12*x297))+new_r20);
evalcond[1]=(((new_r22*x296))+new_r11);
evalcond[2]=((((-1.0)*x296*x298))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*new_r22*x299)));
evalcond[4]=((((-1.0)*x296))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x299))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x298))+x296+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x298))+(((-1.0)*x299))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x300=(new_r22+(((-1.0)*cj5)));
IkReal x301=((1.0)*cj5);
IkReal x302=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x300;
evalcond[2]=x300;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((-1.0)*new_r12))+(((-1.0)*x302)));
evalcond[8]=((((-1.0)*new_r22*x302))+(((-1.0)*new_r12*x301)));
evalcond[9]=(((new_r10*sj5))+(((-1.0)*new_r20*x301)));
evalcond[10]=((((-1.0)*new_r21*x301))+((new_r11*sj5)));
evalcond[11]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x301)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x303=IKsin(j6);
IkReal x304=IKcos(j6);
IkReal x305=((1.0)*new_r22);
IkReal x306=((1.0)*x304);
evalcond[0]=(((new_r12*x303))+new_r21);
evalcond[1]=((((-1.0)*x303))+new_r00);
evalcond[2]=(new_r01+(((-1.0)*x306)));
evalcond[3]=((((-1.0)*new_r12*x306))+new_r20);
evalcond[4]=(((new_r22*x303))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x304*x305)));
evalcond[6]=(x303+((new_r12*new_r21))+(((-1.0)*new_r11*x305)));
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*x306))+(((-1.0)*new_r10*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x307=((1.0)*cj4);
IkReal x308=((1.0)*sj4);
IkReal x309=((((-1.0)*new_r02*x308))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=(new_r02+(((-1.0)*x307)));
evalcond[4]=(new_r12+(((-1.0)*x308)));
evalcond[5]=x309;
evalcond[6]=x309;
evalcond[7]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[8]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[9]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[10]=((-1.0)*new_r22);
evalcond[11]=((((-1.0)*new_r00*x307))+(((-1.0)*new_r10*x308)));
evalcond[12]=((((-1.0)*new_r01*x307))+(((-1.0)*new_r11*x308)));
evalcond[13]=((1.0)+(((-1.0)*new_r02*x307))+(((-1.0)*new_r12*x308)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x310=IKcos(j6);
IkReal x311=IKsin(j6);
IkReal x312=((1.0)*new_r12);
IkReal x313=((1.0)*x311);
IkReal x314=((1.0)*x310);
evalcond[0]=(x310+new_r20);
evalcond[1]=((((-1.0)*x313))+new_r21);
evalcond[2]=(((new_r12*x310))+new_r01);
evalcond[3]=(((new_r12*x311))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x314))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x313))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x312))+(((-1.0)*x313))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x314))+((new_r02*new_r11))+(((-1.0)*new_r01*x312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x315=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x316=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x317=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x318=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=(cj4+new_r02);
evalcond[4]=(sj4+new_r12);
evalcond[5]=x315;
evalcond[6]=x315;
evalcond[7]=x318;
evalcond[8]=x317;
evalcond[9]=x316;
evalcond[10]=new_r22;
evalcond[11]=x316;
evalcond[12]=x317;
evalcond[13]=x318;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x319=IKcos(j6);
IkReal x320=IKsin(j6);
IkReal x321=((1.0)*new_r02);
IkReal x322=((1.0)*new_r12);
IkReal x323=((1.0)*x319);
evalcond[0]=(x320+new_r21);
evalcond[1]=((((-1.0)*x323))+new_r20);
evalcond[2]=(((new_r02*x319))+new_r11);
evalcond[3]=(new_r10+((new_r02*x320)));
evalcond[4]=((((-1.0)*x319*x322))+new_r01);
evalcond[5]=((((-1.0)*x320*x322))+new_r00);
evalcond[6]=((((-1.0)*x320))+((new_r00*new_r12))+(((-1.0)*new_r10*x321)));
evalcond[7]=((((-1.0)*x323))+((new_r01*new_r12))+(((-1.0)*new_r11*x321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x324=((-1.0)+new_r22);
IkReal x325=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x326=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x324;
evalcond[2]=x324;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x325;
evalcond[10]=x325;
evalcond[11]=x326;
evalcond[12]=x326;
evalcond[13]=((-1.0)*new_r20);
evalcond[14]=((-1.0)*new_r21);
evalcond[15]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst157;
gconst157=IKsign(((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4)))));
dummyeval[0]=((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst158;
gconst158=IKsign(((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4)))));
dummyeval[0]=((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x327 = IKatan2WithCheck((gconst158*((((cj4*new_r01))+((new_r11*sj4))))),(gconst158*(((((-1.0)*cj4*new_r11))+((new_r01*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x327.valid){
continue;
}
j6array[0]=x327.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x328=IKsin(j6);
IkReal x329=IKcos(j6);
IkReal x330=((1.0)*sj4);
IkReal x331=((1.0)*x329);
IkReal x332=(sj4*x328);
IkReal x333=(sj4*x329);
IkReal x334=(cj4*x328);
IkReal x335=(cj4*x331);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x328);
evalcond[1]=(x333+x334+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x331)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x328))+(((-1.0)*new_r00*x330)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x331))+(((-1.0)*new_r01*x330)));
evalcond[5]=(x332+(((-1.0)*x335))+new_r00);
evalcond[6]=(x332+(((-1.0)*x335))+new_r11);
evalcond[7]=((((-1.0)*x329*x330))+(((-1.0)*x334))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x336 = IKatan2WithCheck((gconst157*((((cj4*new_r01))+((new_r00*sj4))))),(gconst157*(((((-1.0)*cj4*new_r00))+((new_r01*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x336.valid){
continue;
}
j6array[0]=x336.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x337=IKsin(j6);
IkReal x338=IKcos(j6);
IkReal x339=((1.0)*sj4);
IkReal x340=((1.0)*x338);
IkReal x341=(sj4*x337);
IkReal x342=(sj4*x338);
IkReal x343=(cj4*x337);
IkReal x344=(cj4*x340);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x337);
evalcond[1]=(x342+x343+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x340)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x337))+(((-1.0)*new_r00*x339)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x340))+(((-1.0)*new_r01*x339)));
evalcond[5]=(x341+new_r00+(((-1.0)*x344)));
evalcond[6]=(x341+new_r11+(((-1.0)*x344)));
evalcond[7]=((((-1.0)*x338*x339))+new_r10+(((-1.0)*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x345=((1.0)+new_r22);
IkReal x346=(cj4*new_r02);
IkReal x347=(new_r12*sj4);
IkReal x348=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x345;
evalcond[2]=x345;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x348;
evalcond[10]=x348;
evalcond[11]=(x346+x347);
evalcond[12]=((((-1.0)*x346))+(((-1.0)*x347)));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x345;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst159;
gconst159=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst160;
gconst160=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x349=((1.0)*new_r00);
CheckValue<IkReal> x350 = IKatan2WithCheck((gconst160*((((cj4*new_r10))+(((-1.0)*sj4*x349))))),(gconst160*(((((-1.0)*cj4*x349))+(((-1.0)*new_r10*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x350.valid){
continue;
}
j6array[0]=x350.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x351=IKcos(j6);
IkReal x352=IKsin(j6);
IkReal x353=((1.0)*sj4);
IkReal x354=((1.0)*x352);
IkReal x355=(sj4*x351);
IkReal x356=((1.0)*x351);
IkReal x357=(cj4*x354);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x351);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x354)));
evalcond[2]=(((sj4*x352))+((cj4*x351))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x354))+(((-1.0)*new_r00*x353)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x356))+(((-1.0)*new_r01*x353)));
evalcond[5]=((((-1.0)*x357))+x355+new_r01);
evalcond[6]=((((-1.0)*x357))+x355+new_r10);
evalcond[7]=((((-1.0)*cj4*x356))+new_r11+(((-1.0)*x352*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x358=((1.0)*new_r00);
CheckValue<IkReal> x359 = IKatan2WithCheck((gconst159*((((cj4*new_r01))+(((-1.0)*sj4*x358))))),(gconst159*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x358))))),IKFAST_ATAN2_MAGTHRESH);
if(!x359.valid){
continue;
}
j6array[0]=x359.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x360=IKcos(j6);
IkReal x361=IKsin(j6);
IkReal x362=((1.0)*sj4);
IkReal x363=((1.0)*x361);
IkReal x364=(sj4*x360);
IkReal x365=((1.0)*x360);
IkReal x366=(cj4*x363);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x360);
evalcond[1]=(((cj4*new_r01))+(((-1.0)*x363))+((new_r11*sj4)));
evalcond[2]=(((sj4*x361))+((cj4*x360))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x362))+(((-1.0)*x363))+((cj4*new_r10)));
evalcond[4]=((((-1.0)*x365))+((cj4*new_r11))+(((-1.0)*new_r01*x362)));
evalcond[5]=((((-1.0)*x366))+x364+new_r01);
evalcond[6]=((((-1.0)*x366))+x364+new_r10);
evalcond[7]=((((-1.0)*cj4*x365))+(((-1.0)*x361*x362))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x367=(new_r22+(((-1.0)*cj5)));
IkReal x368=((((-1.0)*sj5))+new_r02);
IkReal x369=((1.0)*cj5);
IkReal x370=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x367;
evalcond[2]=x367;
evalcond[3]=x368;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x368;
evalcond[8]=(((cj5*new_r02))+(((-1.0)*new_r22*x370)));
evalcond[9]=((((-1.0)*new_r00*x370))+(((-1.0)*new_r20*x369)));
evalcond[10]=((((-1.0)*new_r01*x370))+(((-1.0)*new_r21*x369)));
evalcond[11]=((1.0)+(((-1.0)*new_r22*x369))+(((-1.0)*new_r02*x370)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x371=IKcos(j6);
IkReal x372=IKsin(j6);
IkReal x373=((1.0)*new_r02);
IkReal x374=((1.0)*x371);
evalcond[0]=(new_r20+((new_r02*x371)));
evalcond[1]=((((-1.0)*x372))+new_r10);
evalcond[2]=((((-1.0)*x374))+new_r11);
evalcond[3]=(new_r01+((new_r22*x372)));
evalcond[4]=((((-1.0)*x372*x373))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x374))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x373))+((new_r01*new_r22))+x372);
evalcond[7]=((((-1.0)*new_r20*x373))+((new_r00*new_r22))+(((-1.0)*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x375=(new_r22+(((-1.0)*cj5)));
IkReal x376=((1.0)*cj5);
IkReal x377=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x375;
evalcond[2]=x375;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((((-1.0)*x377))+(((-1.0)*new_r02)));
evalcond[7]=((((-1.0)*new_r22*x377))+(((-1.0)*new_r02*x376)));
evalcond[8]=((((-1.0)*new_r20*x376))+((new_r00*sj5)));
evalcond[9]=((((-1.0)*new_r21*x376))+((new_r01*sj5)));
evalcond[10]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x376)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst161;
gconst161=IKsign(new_r02);
dummyeval[0]=new_r02;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=new_r02;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=new_r02;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x378=IKPowWithIntegerCheck(new_r02,-1);
if(!x378.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x378.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x378.value)))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*(x378.value)), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x379=IKsin(j6);
IkReal x380=IKcos(j6);
IkReal x381=((1.0)*new_r01);
IkReal x382=((1.0)*new_r00);
IkReal x383=((1.0)*x380);
evalcond[0]=(new_r21+((new_r02*x379)));
evalcond[1]=((((-1.0)*new_r02*x383))+new_r20);
evalcond[2]=((((-1.0)*x379))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x383))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x381))+((new_r22*x379)));
evalcond[5]=((((-1.0)*x382))+(((-1.0)*new_r22*x383)));
evalcond[6]=(x379+((new_r02*new_r21))+(((-1.0)*new_r22*x381)));
evalcond[7]=((((-1.0)*x383))+((new_r02*new_r20))+(((-1.0)*new_r22*x382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x384=IKPowWithIntegerCheck(new_r02,-1);
if(!x384.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x384.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x384.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x384.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x385=IKsin(j6);
IkReal x386=IKcos(j6);
IkReal x387=((1.0)*new_r01);
IkReal x388=((1.0)*new_r00);
IkReal x389=((1.0)*x386);
evalcond[0]=(((new_r02*x385))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x389))+new_r20);
evalcond[2]=((((-1.0)*x385))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x389))+(((-1.0)*new_r11)));
evalcond[4]=(((new_r22*x385))+(((-1.0)*x387)));
evalcond[5]=((((-1.0)*x388))+(((-1.0)*new_r22*x389)));
evalcond[6]=(x385+((new_r02*new_r21))+(((-1.0)*new_r22*x387)));
evalcond[7]=((((-1.0)*x389))+((new_r02*new_r20))+(((-1.0)*new_r22*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x390 = IKatan2WithCheck(((-1.0)*gconst161*new_r21),(gconst161*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x390.valid){
continue;
}
j6array[0]=x390.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x391=IKsin(j6);
IkReal x392=IKcos(j6);
IkReal x393=((1.0)*new_r01);
IkReal x394=((1.0)*new_r00);
IkReal x395=((1.0)*x392);
evalcond[0]=(new_r21+((new_r02*x391)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x395)));
evalcond[2]=((((-1.0)*x391))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x395))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x393))+((new_r22*x391)));
evalcond[5]=((((-1.0)*x394))+(((-1.0)*new_r22*x395)));
evalcond[6]=((((-1.0)*new_r22*x393))+x391+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x395))+(((-1.0)*new_r22*x394))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x396=((-1.0)+new_r02);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x396;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x396;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((-1.0)*new_r22);
evalcond[13]=((-1.0)*new_r00);
evalcond[14]=((-1.0)*new_r01);
evalcond[15]=((1.0)+(((-1.0)*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x397=IKcos(j6);
IkReal x398=((1.0)*(IKsin(j6)));
evalcond[0]=(x397+new_r20);
evalcond[1]=((((-1.0)*x398))+new_r21);
evalcond[2]=((((-1.0)*x398))+new_r10);
evalcond[3]=((((-1.0)*x397))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((1.0)+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((-1.0)+(((-1.0)*new_r02)));
evalcond[7]=((-1.0)*new_r01);
evalcond[8]=new_r01;
evalcond[9]=((-1.0)*new_r00);
evalcond[10]=new_r00;
evalcond[11]=((-1.0)*new_r22);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x399=IKcos(j6);
IkReal x400=((1.0)*(IKsin(j6)));
evalcond[0]=(x399+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x400)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x400)));
evalcond[3]=((((-1.0)*x399))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x401=((1.0)+new_r02);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x401;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x401;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x401;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x402=IKsin(j6);
IkReal x403=((1.0)*(IKcos(j6)));
evalcond[0]=(x402+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x403)));
evalcond[2]=(new_r10+(((-1.0)*x402)));
evalcond[3]=(new_r11+(((-1.0)*x403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((-1.0)+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((1.0)+(((-1.0)*new_r02)));
evalcond[7]=((-1.0)*new_r01);
evalcond[8]=new_r01;
evalcond[9]=((-1.0)*new_r00);
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x404=IKsin(j6);
IkReal x405=((1.0)*(IKcos(j6)));
evalcond[0]=(x404+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x405)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x404)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x406=((-1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959))))));
evalcond[1]=x406;
evalcond[2]=x406;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((-1.0)*new_r20);
evalcond[14]=((-1.0)*new_r21);
evalcond[15]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x407=IKsin(j6);
IkReal x408=((1.0)*(IKcos(j6)));
evalcond[0]=(x407+new_r01);
evalcond[1]=(new_r10+(((-1.0)*x407)));
evalcond[2]=(new_r11+(((-1.0)*x408)));
evalcond[3]=(new_r00+(((-1.0)*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x409=((-1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959))))));
evalcond[1]=x409;
evalcond[2]=x409;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r12);
evalcond[10]=((-1.0)*new_r02);
evalcond[11]=((-1.0)*new_r20);
evalcond[12]=((-1.0)*new_r21);
evalcond[13]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x410=IKsin(j6);
IkReal x411=((1.0)*(IKcos(j6)));
evalcond[0]=(x410+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*new_r10))+(((-1.0)*x410)));
evalcond[2]=((((-1.0)*new_r11))+(((-1.0)*x411)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x412=((1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959))))));
evalcond[1]=x412;
evalcond[2]=x412;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((-1.0)*new_r02);
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x412;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, ((-1.0)*new_r00));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x413=IKcos(j6);
IkReal x414=((1.0)*(IKsin(j6)));
evalcond[0]=(x413+new_r00);
evalcond[1]=(new_r10+(((-1.0)*x414)));
evalcond[2]=(new_r11+(((-1.0)*x413)));
evalcond[3]=(new_r01+(((-1.0)*x414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x415=((1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959))))));
evalcond[1]=x415;
evalcond[2]=x415;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r12);
evalcond[10]=((-1.0)*new_r02);
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x415;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x416=IKcos(j6);
IkReal x417=((1.0)*(IKsin(j6)));
evalcond[0]=(x416+(((-1.0)*new_r00)));
evalcond[1]=((((-1.0)*new_r10))+(((-1.0)*x417)));
evalcond[2]=((((-1.0)*new_r11))+(((-1.0)*x416)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x419=IKPowWithIntegerCheck(sj5,-1);
if(!x419.valid){
continue;
}
IkReal x418=x419.value;
CheckValue<IkReal> x420=IKPowWithIntegerCheck(cj4,-1);
if(!x420.valid){
continue;
}
CheckValue<IkReal> x421=IKPowWithIntegerCheck(cj5,-1);
if(!x421.valid){
continue;
}
if( IKabs((x418*(x420.value)*(x421.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x418)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x418*(x420.value)*(x421.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x418))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x418*(x420.value)*(x421.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x418));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x422=IKsin(j6);
IkReal x423=IKcos(j6);
IkReal x424=((1.0)*sj5);
IkReal x425=((1.0)*sj4);
IkReal x426=(cj5*sj4);
IkReal x427=(cj4*new_r01);
IkReal x428=(cj4*new_r00);
IkReal x429=((1.0)*x423);
IkReal x430=(cj5*x422);
IkReal x431=((1.0)*x422);
evalcond[0]=(((sj5*x423))+new_r20);
evalcond[1]=((((-1.0)*x422*x424))+new_r21);
evalcond[2]=(((new_r11*sj4))+x427+x430);
evalcond[3]=((((-1.0)*x431))+(((-1.0)*new_r00*x425))+((cj4*new_r10)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x429))+(((-1.0)*new_r01*x425)));
evalcond[5]=(((sj4*x423))+((cj4*x430))+new_r01);
evalcond[6]=(((new_r10*sj4))+x428+(((-1.0)*cj5*x429)));
evalcond[7]=((((-1.0)*cj4*cj5*x429))+((sj4*x422))+new_r00);
evalcond[8]=((((-1.0)*cj4*x429))+new_r11+((x422*x426)));
evalcond[9]=((((-1.0)*cj4*x431))+new_r10+(((-1.0)*cj5*x423*x425)));
evalcond[10]=(((cj5*x427))+((new_r11*x426))+x422+(((-1.0)*new_r21*x424)));
evalcond[11]=((((-1.0)*x429))+((cj5*x428))+((new_r10*x426))+(((-1.0)*new_r20*x424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x433=IKPowWithIntegerCheck(sj5,-1);
if(!x433.valid){
continue;
}
IkReal x432=x433.value;
CheckValue<IkReal> x434=IKPowWithIntegerCheck(sj4,-1);
if(!x434.valid){
continue;
}
if( IKabs((x432*(x434.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x432)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x432*(x434.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x432))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x432*(x434.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x432));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x435=IKsin(j6);
IkReal x436=IKcos(j6);
IkReal x437=((1.0)*sj5);
IkReal x438=((1.0)*sj4);
IkReal x439=(cj5*sj4);
IkReal x440=(cj4*new_r01);
IkReal x441=(cj4*new_r00);
IkReal x442=((1.0)*x436);
IkReal x443=(cj5*x435);
IkReal x444=((1.0)*x435);
evalcond[0]=(new_r20+((sj5*x436)));
evalcond[1]=((((-1.0)*x435*x437))+new_r21);
evalcond[2]=(((new_r11*sj4))+x440+x443);
evalcond[3]=((((-1.0)*new_r00*x438))+(((-1.0)*x444))+((cj4*new_r10)));
evalcond[4]=((((-1.0)*x442))+(((-1.0)*new_r01*x438))+((cj4*new_r11)));
evalcond[5]=(((sj4*x436))+((cj4*x443))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x442))+x441);
evalcond[7]=(((sj4*x435))+(((-1.0)*cj4*cj5*x442))+new_r00);
evalcond[8]=((((-1.0)*cj4*x442))+new_r11+((x435*x439)));
evalcond[9]=((((-1.0)*cj4*x444))+new_r10+(((-1.0)*cj5*x436*x438)));
evalcond[10]=(((cj5*x440))+((new_r11*x439))+x435+(((-1.0)*new_r21*x437)));
evalcond[11]=((((-1.0)*x442))+((cj5*x441))+((new_r10*x439))+(((-1.0)*new_r20*x437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x445 = IKatan2WithCheck((gconst155*new_r21),((-1.0)*gconst155*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x445.valid){
continue;
}
j6array[0]=x445.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x446=IKsin(j6);
IkReal x447=IKcos(j6);
IkReal x448=((1.0)*sj5);
IkReal x449=((1.0)*sj4);
IkReal x450=(cj5*sj4);
IkReal x451=(cj4*new_r01);
IkReal x452=(cj4*new_r00);
IkReal x453=((1.0)*x447);
IkReal x454=(cj5*x446);
IkReal x455=((1.0)*x446);
evalcond[0]=(((sj5*x447))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x446*x448)));
evalcond[2]=(((new_r11*sj4))+x454+x451);
evalcond[3]=((((-1.0)*new_r00*x449))+((cj4*new_r10))+(((-1.0)*x455)));
evalcond[4]=((((-1.0)*new_r01*x449))+((cj4*new_r11))+(((-1.0)*x453)));
evalcond[5]=(((sj4*x447))+((cj4*x454))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x453))+x452);
evalcond[7]=(((sj4*x446))+(((-1.0)*cj4*cj5*x453))+new_r00);
evalcond[8]=((((-1.0)*cj4*x453))+((x446*x450))+new_r11);
evalcond[9]=((((-1.0)*cj5*x447*x449))+(((-1.0)*cj4*x455))+new_r10);
evalcond[10]=(((cj5*x451))+((new_r11*x450))+x446+(((-1.0)*new_r21*x448)));
evalcond[11]=(((cj5*x452))+((new_r10*x450))+(((-1.0)*x453))+(((-1.0)*new_r20*x448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x456 = IKatan2WithCheck((gconst126*new_r12),(gconst126*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x456.valid){
continue;
}
j4array[0]=x456.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x457=IKcos(j4);
IkReal x458=IKsin(j4);
IkReal x459=((1.0)*sj5);
IkReal x460=((1.0)*cj5);
IkReal x461=(new_r12*x458);
IkReal x462=(new_r02*x457);
evalcond[0]=(new_r02+(((-1.0)*x457*x459)));
evalcond[1]=(new_r12+(((-1.0)*x458*x459)));
evalcond[2]=(((new_r12*x457))+(((-1.0)*new_r02*x458)));
evalcond[3]=((((-1.0)*x459))+x462+x461);
evalcond[4]=(((cj5*x461))+((cj5*x462))+(((-1.0)*new_r22*x459)));
evalcond[5]=((((-1.0)*new_r10*x458*x459))+(((-1.0)*new_r20*x460))+(((-1.0)*new_r00*x457*x459)));
evalcond[6]=((((-1.0)*new_r21*x460))+(((-1.0)*new_r01*x457*x459))+(((-1.0)*new_r11*x458*x459)));
evalcond[7]=((1.0)+(((-1.0)*x459*x462))+(((-1.0)*x459*x461))+(((-1.0)*new_r22*x460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst155;
gconst155=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj4;
dummyeval[1]=cj5;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x463=(new_r22+(((-1.0)*cj5)));
IkReal x464=((((-1.0)*sj5))+new_r12);
IkReal x465=((1.0)*cj5);
IkReal x466=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x463;
evalcond[2]=x463;
evalcond[3]=new_r02;
evalcond[4]=x464;
evalcond[5]=((-1.0)*new_r02);
evalcond[6]=x464;
evalcond[7]=(((cj5*new_r12))+(((-1.0)*new_r22*x466)));
evalcond[8]=((((-1.0)*new_r20*x465))+(((-1.0)*new_r10*x466)));
evalcond[9]=((((-1.0)*new_r21*x465))+(((-1.0)*new_r11*x466)));
evalcond[10]=((1.0)+(((-1.0)*new_r12*x466))+(((-1.0)*new_r22*x465)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst156;
gconst156=IKsign(new_r12);
dummyeval[0]=new_r12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=new_r22;
dummyeval[1]=new_r12;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x467=IKPowWithIntegerCheck(new_r22,-1);
if(!x467.valid){
continue;
}
CheckValue<IkReal> x468=IKPowWithIntegerCheck(new_r12,-1);
if(!x468.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x467.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x468.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x467.value)))+IKsqr(((-1.0)*new_r20*(x468.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11*(x467.value)), ((-1.0)*new_r20*(x468.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x469=IKsin(j6);
IkReal x470=IKcos(j6);
IkReal x471=((1.0)*new_r12);
IkReal x472=((1.0)*x470);
evalcond[0]=(((new_r12*x470))+new_r20);
evalcond[1]=(new_r11+((new_r22*x469)));
evalcond[2]=((((-1.0)*x469*x471))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x472))+new_r10);
evalcond[4]=((((-1.0)*x469))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x472))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x471))+x469+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*x472))+((new_r10*new_r22))+(((-1.0)*new_r20*x471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x473 = IKatan2WithCheck((gconst156*new_r21),((-1.0)*gconst156*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x473.valid){
continue;
}
j6array[0]=x473.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x474=IKsin(j6);
IkReal x475=IKcos(j6);
IkReal x476=((1.0)*new_r12);
IkReal x477=((1.0)*x475);
evalcond[0]=(((new_r12*x475))+new_r20);
evalcond[1]=(((new_r22*x474))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x474*x476)));
evalcond[3]=((((-1.0)*new_r22*x477))+new_r10);
evalcond[4]=((((-1.0)*x474))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x477))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x476))+x474+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*x477))+((new_r10*new_r22))+(((-1.0)*new_r20*x476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x478=(new_r22+(((-1.0)*cj5)));
IkReal x479=((1.0)*cj5);
IkReal x480=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x478;
evalcond[2]=x478;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((-1.0)*x480))+(((-1.0)*new_r12)));
evalcond[8]=((((-1.0)*new_r12*x479))+(((-1.0)*new_r22*x480)));
evalcond[9]=(((new_r10*sj5))+(((-1.0)*new_r20*x479)));
evalcond[10]=(((new_r11*sj5))+(((-1.0)*new_r21*x479)));
evalcond[11]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x479)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x481=IKsin(j6);
IkReal x482=IKcos(j6);
IkReal x483=((1.0)*new_r22);
IkReal x484=((1.0)*x482);
evalcond[0]=(((new_r12*x481))+new_r21);
evalcond[1]=((((-1.0)*x481))+new_r00);
evalcond[2]=((((-1.0)*x484))+new_r01);
evalcond[3]=(new_r20+(((-1.0)*new_r12*x484)));
evalcond[4]=((((-1.0)*new_r11))+((new_r22*x481)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x482*x483)));
evalcond[6]=((((-1.0)*new_r11*x483))+((new_r12*new_r21))+x481);
evalcond[7]=((((-1.0)*new_r10*x483))+(((-1.0)*x484))+((new_r12*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x485=((1.0)*cj4);
IkReal x486=((1.0)*sj4);
IkReal x487=(((cj4*new_r12))+(((-1.0)*new_r02*x486)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((((-1.0)*x485))+new_r02);
evalcond[4]=((((-1.0)*x486))+new_r12);
evalcond[5]=x487;
evalcond[6]=x487;
evalcond[7]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[8]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[9]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[10]=((-1.0)*new_r22);
evalcond[11]=((((-1.0)*new_r10*x486))+(((-1.0)*new_r00*x485)));
evalcond[12]=((((-1.0)*new_r01*x485))+(((-1.0)*new_r11*x486)));
evalcond[13]=((1.0)+(((-1.0)*new_r02*x485))+(((-1.0)*new_r12*x486)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x488=IKcos(j6);
IkReal x489=IKsin(j6);
IkReal x490=((1.0)*new_r12);
IkReal x491=((1.0)*x489);
IkReal x492=((1.0)*x488);
evalcond[0]=(x488+new_r20);
evalcond[1]=((((-1.0)*x491))+new_r21);
evalcond[2]=(((new_r12*x488))+new_r01);
evalcond[3]=(((new_r12*x489))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x492))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x491))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x490))+(((-1.0)*x491))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x492))+(((-1.0)*new_r01*x490))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x493=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x494=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x495=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x496=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=(cj4+new_r02);
evalcond[4]=(sj4+new_r12);
evalcond[5]=x493;
evalcond[6]=x493;
evalcond[7]=x496;
evalcond[8]=x495;
evalcond[9]=x494;
evalcond[10]=new_r22;
evalcond[11]=x494;
evalcond[12]=x495;
evalcond[13]=x496;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x497=IKcos(j6);
IkReal x498=IKsin(j6);
IkReal x499=((1.0)*new_r02);
IkReal x500=((1.0)*new_r12);
IkReal x501=((1.0)*x497);
evalcond[0]=(x498+new_r21);
evalcond[1]=((((-1.0)*x501))+new_r20);
evalcond[2]=(((new_r02*x497))+new_r11);
evalcond[3]=(((new_r02*x498))+new_r10);
evalcond[4]=((((-1.0)*x497*x500))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x498*x500)));
evalcond[6]=((((-1.0)*new_r10*x499))+((new_r00*new_r12))+(((-1.0)*x498)));
evalcond[7]=((((-1.0)*x501))+(((-1.0)*new_r11*x499))+((new_r01*new_r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x502=((-1.0)+new_r22);
IkReal x503=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x504=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=x502;
evalcond[2]=x502;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x503;
evalcond[10]=x503;
evalcond[11]=x504;
evalcond[12]=x504;
evalcond[13]=((-1.0)*new_r20);
evalcond[14]=((-1.0)*new_r21);
evalcond[15]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst157;
gconst157=IKsign(((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4)))));
dummyeval[0]=((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst158;
gconst158=IKsign(((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4)))));
dummyeval[0]=((((-1.0)*(sj4*sj4)))+(((-1.0)*(cj4*cj4))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x505 = IKatan2WithCheck((gconst158*((((cj4*new_r01))+((new_r11*sj4))))),(gconst158*(((((-1.0)*cj4*new_r11))+((new_r01*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x505.valid){
continue;
}
j6array[0]=x505.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x506=IKsin(j6);
IkReal x507=IKcos(j6);
IkReal x508=((1.0)*sj4);
IkReal x509=((1.0)*x507);
IkReal x510=(sj4*x506);
IkReal x511=(sj4*x507);
IkReal x512=(cj4*x506);
IkReal x513=(cj4*x509);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x506);
evalcond[1]=(x512+x511+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x509)));
evalcond[3]=((((-1.0)*new_r00*x508))+((cj4*new_r10))+(((-1.0)*x506)));
evalcond[4]=((((-1.0)*new_r01*x508))+((cj4*new_r11))+(((-1.0)*x509)));
evalcond[5]=(x510+new_r00+(((-1.0)*x513)));
evalcond[6]=(x510+new_r11+(((-1.0)*x513)));
evalcond[7]=((((-1.0)*x512))+(((-1.0)*x507*x508))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x514 = IKatan2WithCheck((gconst157*((((cj4*new_r01))+((new_r00*sj4))))),(gconst157*(((((-1.0)*cj4*new_r00))+((new_r01*sj4))))),IKFAST_ATAN2_MAGTHRESH);
if(!x514.valid){
continue;
}
j6array[0]=x514.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x515=IKsin(j6);
IkReal x516=IKcos(j6);
IkReal x517=((1.0)*sj4);
IkReal x518=((1.0)*x516);
IkReal x519=(sj4*x515);
IkReal x520=(sj4*x516);
IkReal x521=(cj4*x515);
IkReal x522=(cj4*x518);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x515);
evalcond[1]=(x520+x521+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x518)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x515))+(((-1.0)*new_r00*x517)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x517))+(((-1.0)*x518)));
evalcond[5]=((((-1.0)*x522))+x519+new_r00);
evalcond[6]=((((-1.0)*x522))+x519+new_r11);
evalcond[7]=((((-1.0)*x521))+(((-1.0)*x516*x517))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x523=((1.0)+new_r22);
IkReal x524=(cj4*new_r02);
IkReal x525=(new_r12*sj4);
IkReal x526=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=x523;
evalcond[2]=x523;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x526;
evalcond[10]=x526;
evalcond[11]=(x524+x525);
evalcond[12]=((((-1.0)*x524))+(((-1.0)*x525)));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x523;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst159;
gconst159=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst160;
gconst160=IKsign(((sj4*sj4)+(cj4*cj4)));
dummyeval[0]=((sj4*sj4)+(cj4*cj4));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x527=((1.0)*new_r00);
CheckValue<IkReal> x528 = IKatan2WithCheck((gconst160*((((cj4*new_r10))+(((-1.0)*sj4*x527))))),(gconst160*(((((-1.0)*new_r10*sj4))+(((-1.0)*cj4*x527))))),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
j6array[0]=x528.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x529=IKcos(j6);
IkReal x530=IKsin(j6);
IkReal x531=((1.0)*sj4);
IkReal x532=((1.0)*x530);
IkReal x533=(sj4*x529);
IkReal x534=((1.0)*x529);
IkReal x535=(cj4*x532);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x529);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x532)));
evalcond[2]=(((cj4*x529))+new_r00+((sj4*x530)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x531))+(((-1.0)*x532)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x534))+(((-1.0)*new_r01*x531)));
evalcond[5]=((((-1.0)*x535))+x533+new_r01);
evalcond[6]=((((-1.0)*x535))+x533+new_r10);
evalcond[7]=((((-1.0)*x530*x531))+new_r11+(((-1.0)*cj4*x534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x536=((1.0)*new_r00);
CheckValue<IkReal> x537 = IKatan2WithCheck((gconst159*((((cj4*new_r01))+(((-1.0)*sj4*x536))))),(gconst159*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x536))))),IKFAST_ATAN2_MAGTHRESH);
if(!x537.valid){
continue;
}
j6array[0]=x537.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x538=IKcos(j6);
IkReal x539=IKsin(j6);
IkReal x540=((1.0)*sj4);
IkReal x541=((1.0)*x539);
IkReal x542=(sj4*x538);
IkReal x543=((1.0)*x538);
IkReal x544=(cj4*x541);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x538);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x541)));
evalcond[2]=(((cj4*x538))+new_r00+((sj4*x539)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x540))+(((-1.0)*x541)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x540))+(((-1.0)*x543)));
evalcond[5]=((((-1.0)*x544))+x542+new_r01);
evalcond[6]=((((-1.0)*x544))+x542+new_r10);
evalcond[7]=((((-1.0)*x539*x540))+new_r11+(((-1.0)*cj4*x543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x545=(new_r22+(((-1.0)*cj5)));
IkReal x546=((((-1.0)*sj5))+new_r02);
IkReal x547=((1.0)*cj5);
IkReal x548=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x545;
evalcond[2]=x545;
evalcond[3]=x546;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x546;
evalcond[8]=((((-1.0)*new_r22*x548))+((cj5*new_r02)));
evalcond[9]=((((-1.0)*new_r00*x548))+(((-1.0)*new_r20*x547)));
evalcond[10]=((((-1.0)*new_r01*x548))+(((-1.0)*new_r21*x547)));
evalcond[11]=((1.0)+(((-1.0)*new_r22*x547))+(((-1.0)*new_r02*x548)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x549=IKcos(j6);
IkReal x550=IKsin(j6);
IkReal x551=((1.0)*new_r02);
IkReal x552=((1.0)*x549);
evalcond[0]=(((new_r02*x549))+new_r20);
evalcond[1]=((((-1.0)*x550))+new_r10);
evalcond[2]=((((-1.0)*x552))+new_r11);
evalcond[3]=(new_r01+((new_r22*x550)));
evalcond[4]=((((-1.0)*x550*x551))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x552))+new_r00);
evalcond[6]=(((new_r01*new_r22))+(((-1.0)*new_r21*x551))+x550);
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*x552))+(((-1.0)*new_r20*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x553=(new_r22+(((-1.0)*cj5)));
IkReal x554=((1.0)*cj5);
IkReal x555=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x553;
evalcond[2]=x553;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((((-1.0)*x555))+(((-1.0)*new_r02)));
evalcond[7]=((((-1.0)*new_r22*x555))+(((-1.0)*new_r02*x554)));
evalcond[8]=(((new_r00*sj5))+(((-1.0)*new_r20*x554)));
evalcond[9]=(((new_r01*sj5))+(((-1.0)*new_r21*x554)));
evalcond[10]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x554)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst161;
gconst161=IKsign(new_r02);
dummyeval[0]=new_r02;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=new_r02;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=new_r02;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x556=IKPowWithIntegerCheck(new_r02,-1);
if(!x556.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x556.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x556.value)))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*(x556.value)), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x557=IKsin(j6);
IkReal x558=IKcos(j6);
IkReal x559=((1.0)*new_r01);
IkReal x560=((1.0)*new_r00);
IkReal x561=((1.0)*x558);
evalcond[0]=(((new_r02*x557))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x561))+new_r20);
evalcond[2]=((((-1.0)*x557))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x561)));
evalcond[4]=((((-1.0)*x559))+((new_r22*x557)));
evalcond[5]=((((-1.0)*new_r22*x561))+(((-1.0)*x560)));
evalcond[6]=((((-1.0)*new_r22*x559))+x557+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x560))+((new_r02*new_r20))+(((-1.0)*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x562=IKPowWithIntegerCheck(new_r02,-1);
if(!x562.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x562.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x562.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x562.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x563=IKsin(j6);
IkReal x564=IKcos(j6);
IkReal x565=((1.0)*new_r01);
IkReal x566=((1.0)*new_r00);
IkReal x567=((1.0)*x564);
evalcond[0]=(((new_r02*x563))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x567))+new_r20);
evalcond[2]=((((-1.0)*x563))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x567)));
evalcond[4]=(((new_r22*x563))+(((-1.0)*x565)));
evalcond[5]=((((-1.0)*new_r22*x567))+(((-1.0)*x566)));
evalcond[6]=((((-1.0)*new_r22*x565))+x563+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x566))+((new_r02*new_r20))+(((-1.0)*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x568 = IKatan2WithCheck(((-1.0)*gconst161*new_r21),(gconst161*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x568.valid){
continue;
}
j6array[0]=x568.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x569=IKsin(j6);
IkReal x570=IKcos(j6);
IkReal x571=((1.0)*new_r01);
IkReal x572=((1.0)*new_r00);
IkReal x573=((1.0)*x570);
evalcond[0]=(((new_r02*x569))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x573))+new_r20);
evalcond[2]=((((-1.0)*x569))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x573))+(((-1.0)*new_r11)));
evalcond[4]=(((new_r22*x569))+(((-1.0)*x571)));
evalcond[5]=((((-1.0)*new_r22*x573))+(((-1.0)*x572)));
evalcond[6]=((((-1.0)*new_r22*x571))+x569+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x572))+(((-1.0)*x573))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x574=((-1.0)+new_r02);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x574;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x574;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((-1.0)*new_r22);
evalcond[13]=((-1.0)*new_r00);
evalcond[14]=((-1.0)*new_r01);
evalcond[15]=((1.0)+(((-1.0)*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x575=IKcos(j6);
IkReal x576=((1.0)*(IKsin(j6)));
evalcond[0]=(x575+new_r20);
evalcond[1]=((((-1.0)*x576))+new_r21);
evalcond[2]=((((-1.0)*x576))+new_r10);
evalcond[3]=((((-1.0)*x575))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((1.0)+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((-1.0)+(((-1.0)*new_r02)));
evalcond[7]=((-1.0)*new_r01);
evalcond[8]=new_r01;
evalcond[9]=((-1.0)*new_r00);
evalcond[10]=new_r00;
evalcond[11]=((-1.0)*new_r22);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x577=IKcos(j6);
IkReal x578=((1.0)*(IKsin(j6)));
evalcond[0]=(x577+new_r20);
evalcond[1]=((((-1.0)*x578))+new_r21);
evalcond[2]=((((-1.0)*x578))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x577))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x579=((1.0)+new_r02);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x579;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x579;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x579;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x580=IKsin(j6);
IkReal x581=((1.0)*(IKcos(j6)));
evalcond[0]=(x580+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x581)));
evalcond[2]=((((-1.0)*x580))+new_r10);
evalcond[3]=(new_r11+(((-1.0)*x581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((-1.0)+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((-1.0)*new_r12);
evalcond[6]=((1.0)+(((-1.0)*new_r02)));
evalcond[7]=((-1.0)*new_r01);
evalcond[8]=new_r01;
evalcond[9]=((-1.0)*new_r00);
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x582=IKsin(j6);
IkReal x583=((1.0)*(IKcos(j6)));
evalcond[0]=(x582+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x583)));
evalcond[2]=((((-1.0)*x582))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x584=((-1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959))))));
evalcond[1]=x584;
evalcond[2]=x584;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((-1.0)*new_r20);
evalcond[14]=((-1.0)*new_r21);
evalcond[15]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r01), new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x585=IKsin(j6);
IkReal x586=((1.0)*(IKcos(j6)));
evalcond[0]=(x585+new_r01);
evalcond[1]=((((-1.0)*x585))+new_r10);
evalcond[2]=(new_r11+(((-1.0)*x586)));
evalcond[3]=(new_r00+(((-1.0)*x586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x587=((-1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959))))));
evalcond[1]=x587;
evalcond[2]=x587;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r12);
evalcond[10]=((-1.0)*new_r02);
evalcond[11]=((-1.0)*new_r20);
evalcond[12]=((-1.0)*new_r21);
evalcond[13]=((1.0)+(((-1.0)*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x588=IKsin(j6);
IkReal x589=((1.0)*(IKcos(j6)));
evalcond[0]=(x588+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*x588))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*new_r11))+(((-1.0)*x589)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x590=((1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959))))));
evalcond[1]=x590;
evalcond[2]=x590;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((-1.0)*new_r02);
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x590;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, ((-1.0)*new_r00));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x591=IKcos(j6);
IkReal x592=((1.0)*(IKsin(j6)));
evalcond[0]=(x591+new_r00);
evalcond[1]=((((-1.0)*x592))+new_r10);
evalcond[2]=((((-1.0)*x591))+new_r11);
evalcond[3]=((((-1.0)*x592))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x593=((1.0)+new_r22);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959))))));
evalcond[1]=x593;
evalcond[2]=x593;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((-1.0)*new_r12);
evalcond[10]=((-1.0)*new_r02);
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x593;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x594=IKcos(j6);
IkReal x595=((1.0)*(IKsin(j6)));
evalcond[0]=(x594+(((-1.0)*new_r00)));
evalcond[1]=((((-1.0)*x595))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*x594))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x595))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(sj5,-1);
if(!x597.valid){
continue;
}
IkReal x596=x597.value;
CheckValue<IkReal> x598=IKPowWithIntegerCheck(cj4,-1);
if(!x598.valid){
continue;
}
CheckValue<IkReal> x599=IKPowWithIntegerCheck(cj5,-1);
if(!x599.valid){
continue;
}
if( IKabs((x596*(x598.value)*(x599.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x596)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x596*(x598.value)*(x599.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x596))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x596*(x598.value)*(x599.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x596));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x600=IKsin(j6);
IkReal x601=IKcos(j6);
IkReal x602=((1.0)*sj5);
IkReal x603=((1.0)*sj4);
IkReal x604=(cj5*sj4);
IkReal x605=(cj4*new_r01);
IkReal x606=(cj4*new_r00);
IkReal x607=((1.0)*x601);
IkReal x608=(cj5*x600);
IkReal x609=((1.0)*x600);
evalcond[0]=(((sj5*x601))+new_r20);
evalcond[1]=((((-1.0)*x600*x602))+new_r21);
evalcond[2]=(((new_r11*sj4))+x605+x608);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x609))+(((-1.0)*new_r00*x603)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x607))+(((-1.0)*new_r01*x603)));
evalcond[5]=(((sj4*x601))+new_r01+((cj4*x608)));
evalcond[6]=(((new_r10*sj4))+x606+(((-1.0)*cj5*x607)));
evalcond[7]=(((sj4*x600))+new_r00+(((-1.0)*cj4*cj5*x607)));
evalcond[8]=(((x600*x604))+(((-1.0)*cj4*x607))+new_r11);
evalcond[9]=((((-1.0)*cj5*x601*x603))+(((-1.0)*cj4*x609))+new_r10);
evalcond[10]=(((cj5*x605))+((new_r11*x604))+x600+(((-1.0)*new_r21*x602)));
evalcond[11]=(((cj5*x606))+(((-1.0)*new_r20*x602))+((new_r10*x604))+(((-1.0)*x607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x611=IKPowWithIntegerCheck(sj5,-1);
if(!x611.valid){
continue;
}
IkReal x610=x611.value;
CheckValue<IkReal> x612=IKPowWithIntegerCheck(sj4,-1);
if(!x612.valid){
continue;
}
if( IKabs((x610*(x612.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x610)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x610*(x612.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x610))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x610*(x612.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x610));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x613=IKsin(j6);
IkReal x614=IKcos(j6);
IkReal x615=((1.0)*sj5);
IkReal x616=((1.0)*sj4);
IkReal x617=(cj5*sj4);
IkReal x618=(cj4*new_r01);
IkReal x619=(cj4*new_r00);
IkReal x620=((1.0)*x614);
IkReal x621=(cj5*x613);
IkReal x622=((1.0)*x613);
evalcond[0]=(new_r20+((sj5*x614)));
evalcond[1]=((((-1.0)*x613*x615))+new_r21);
evalcond[2]=(((new_r11*sj4))+x618+x621);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x622))+(((-1.0)*new_r00*x616)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x620))+(((-1.0)*new_r01*x616)));
evalcond[5]=(((sj4*x614))+((cj4*x621))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x620))+x619);
evalcond[7]=(((sj4*x613))+(((-1.0)*cj4*cj5*x620))+new_r00);
evalcond[8]=((((-1.0)*cj4*x620))+((x613*x617))+new_r11);
evalcond[9]=((((-1.0)*cj5*x614*x616))+(((-1.0)*cj4*x622))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x615))+((new_r11*x617))+x613+((cj5*x618)));
evalcond[11]=((((-1.0)*x620))+((new_r10*x617))+((cj5*x619))+(((-1.0)*new_r20*x615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x623 = IKatan2WithCheck((gconst155*new_r21),((-1.0)*gconst155*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x623.valid){
continue;
}
j6array[0]=x623.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x624=IKsin(j6);
IkReal x625=IKcos(j6);
IkReal x626=((1.0)*sj5);
IkReal x627=((1.0)*sj4);
IkReal x628=(cj5*sj4);
IkReal x629=(cj4*new_r01);
IkReal x630=(cj4*new_r00);
IkReal x631=((1.0)*x625);
IkReal x632=(cj5*x624);
IkReal x633=((1.0)*x624);
evalcond[0]=(((sj5*x625))+new_r20);
evalcond[1]=((((-1.0)*x624*x626))+new_r21);
evalcond[2]=(((new_r11*sj4))+x629+x632);
evalcond[3]=((((-1.0)*new_r00*x627))+((cj4*new_r10))+(((-1.0)*x633)));
evalcond[4]=((((-1.0)*new_r01*x627))+((cj4*new_r11))+(((-1.0)*x631)));
evalcond[5]=(((sj4*x625))+((cj4*x632))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x631))+x630);
evalcond[7]=(((sj4*x624))+new_r00+(((-1.0)*cj4*cj5*x631)));
evalcond[8]=((((-1.0)*cj4*x631))+((x624*x628))+new_r11);
evalcond[9]=((((-1.0)*cj4*x633))+new_r10+(((-1.0)*cj5*x625*x627)));
evalcond[10]=(((cj5*x629))+(((-1.0)*new_r21*x626))+((new_r11*x628))+x624);
evalcond[11]=((((-1.0)*x631))+((cj5*x630))+((new_r10*x628))+(((-1.0)*new_r20*x626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "2ac375a0aaf420715f482953e36187a5"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
