#define IKFAST_NAMESPACE ik_barrettwam
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 63 generated on 2013-07-09 02:04:51.791193
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==63);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct Atan2Value
{
    T value;
    bool valid;
};

template <typename T>
inline Atan2Value<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    Atan2Value<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.0450000000000000))*(x1));
x15=((IkReal(1.00000000000000))*(x5));
x16=((IkReal(0.300000000000000))*(x1));
x17=((IkReal(1.00000000000000))*(x11));
x18=((IkReal(0.0450000000000000))*(x5));
x19=((IkReal(1.00000000000000))*(x1));
x20=((IkReal(0.220000000000000))*(x8));
x21=((IkReal(1.00000000000000))*(x12));
x22=((IkReal(0.220000000000000))*(x5));
x23=((IkReal(1.00000000000000))*(x6));
x24=((IkReal(0.220000000000000))*(x9));
x25=((IkReal(0.220000000000000))*(x6));
x26=((x0)*(x4));
x27=((x0)*(x2));
x28=((x2)*(x7));
x29=((x3)*(x4));
x30=((x0)*(x7));
x31=((x2)*(x3));
x32=((x3)*(x7));
x33=((IkReal(1.00000000000000))*(x29));
x34=((IkReal(0.0450000000000000))*(x29));
x35=((IkReal(0.0450000000000000))*(x26));
x36=((x19)*(x6));
x37=((x32)*(x6));
x38=((x4)*(x7)*(x9));
x39=((x15)*(x30));
x40=((x23)*(x30));
x41=((x14)*(x27));
x42=((x15)*(x32));
x43=((x23)*(x32));
x44=((x14)*(x31));
x45=((((IkReal(-1.00000000000000))*(x33)))+(((x1)*(x27))));
x46=((x26)+(((x1)*(x31))));
x47=((((IkReal(-1.00000000000000))*(x19)*(x29)))+(x27));
x48=((((IkReal(-1.00000000000000))*(x36)))+(((x28)*(x5))));
x49=((((IkReal(-1.00000000000000))*(x19)*(x27)))+(x33));
x50=((((IkReal(-1.00000000000000))*(x31)))+(((IkReal(-1.00000000000000))*(x19)*(x26))));
x51=((((IkReal(-1.00000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x19)*(x31))));
x52=((((x1)*(x15)))+(((x23)*(x28))));
x53=((IkReal(-1.00000000000000))*(x52));
x54=((x35)+(x44));
x55=((x46)*(x6));
x56=((x11)*(x48));
x57=((x45)*(x6));
x58=((x5)*(x51));
x59=((x50)*(x9));
x60=((((IkReal(-1.00000000000000))*(x39)))+(x57));
x61=((((IkReal(-1.00000000000000))*(x42)))+(x55));
x62=((((IkReal(-1.00000000000000))*(x40)))+(((x49)*(x5))));
x63=((((IkReal(-1.00000000000000))*(x43)))+(x58));
x64=((((x4)*(x7)*(x8)))+(((x52)*(x9))));
x65=((((x53)*(x8)))+(x38));
x66=((x11)*(x63));
x67=((((x47)*(x9)))+(((x61)*(x8))));
x68=((((x9)*(((x42)+(((IkReal(-1.00000000000000))*(x23)*(x46)))))))+(((x47)*(x8))));
x69=((((x60)*(x8)))+(x59));
x70=((x12)*(x67));
x71=((((x50)*(x8)))+(((x9)*(((x39)+(((IkReal(-1.00000000000000))*(x57))))))));
eerot[0]=((((x10)*(x71)))+(((x13)*(((((x12)*(x69)))+(((x11)*(x62))))))));
eerot[1]=((((x13)*(x71)))+(((x10)*(((((IkReal(-1.00000000000000))*(x21)*(x69)))+(((IkReal(-1.00000000000000))*(x17)*(x62))))))));
eerot[2]=((((x11)*(x69)))+(((x12)*(((((IkReal(-1.00000000000000))*(x15)*(x49)))+(x40))))));
eetrans[0]=((IkReal(0.220000000000000))+(((IkReal(-1.00000000000000))*(x34)))+(((x11)*(((((x20)*(x60)))+(((x24)*(x50)))))))+(((x5)*(((((IkReal(-0.300000000000000))*(x29)))+(((x16)*(x27)))))))+(((x18)*(x30)))+(((x12)*(((((IkReal(-1.00000000000000))*(x22)*(x49)))+(((x25)*(x30)))))))+(((IkReal(0.300000000000000))*(x30)*(x6)))+(((IkReal(0.550000000000000))*(x30)))+(x41)+(((x6)*(((((IkReal(-1.00000000000000))*(x41)))+(x34))))));
eerot[3]=((((x13)*(((x70)+(x66)))))+(((x10)*(x68))));
eerot[4]=((((x10)*(((((IkReal(-1.00000000000000))*(x21)*(x67)))+(((IkReal(-1.00000000000000))*(x17)*(x63)))))))+(((x13)*(x68))));
eerot[5]=((((x12)*(((x43)+(((IkReal(-1.00000000000000))*(x15)*(x51)))))))+(((x11)*(x67))));
eetrans[1]=((IkReal(0.140000000000000))+(((x18)*(x32)))+(((IkReal(-1.00000000000000))*(x54)*(x6)))+(((x11)*(((((x20)*(x61)))+(((x24)*(x47)))))))+(((x12)*(((((x25)*(x32)))+(((IkReal(-1.00000000000000))*(x22)*(x51)))))))+(((IkReal(0.550000000000000))*(x32)))+(x54)+(((x5)*(((((x16)*(x31)))+(((IkReal(0.300000000000000))*(x26)))))))+(((IkReal(0.300000000000000))*(x37))));
eerot[6]=((((x10)*(x64)))+(((x13)*(((((x12)*(x65)))+(x56))))));
eerot[7]=((((x13)*(x64)))+(((x10)*(((((IkReal(-1.00000000000000))*(x17)*(x48)))+(((IkReal(-1.00000000000000))*(x21)*(x65))))))));
eerot[8]=((((x11)*(x65)))+(((x12)*(((((IkReal(-1.00000000000000))*(x15)*(x28)))+(x36))))));
IkReal x72=((IkReal(0.0450000000000000))*(x28));
eetrans[2]=((IkReal(0.346000000000000))+(((IkReal(-0.300000000000000))*(x28)*(x5)))+(((IkReal(-1.00000000000000))*(x72)))+(((x14)*(x5)))+(((x12)*(((((x1)*(x25)))+(((IkReal(-1.00000000000000))*(x22)*(x28)))))))+(((x16)*(x6)))+(((x6)*(x72)))+(((IkReal(0.550000000000000))*(x1)))+(((x11)*(((((x20)*(x53)))+(((x24)*(x4)*(x7))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((IkReal(-0.220000000000000))+(((IkReal(-0.220000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((IkReal(-0.140000000000000))+(((IkReal(-0.220000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.346000000000000))+(((IkReal(-0.220000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x73=IKasin(((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp)))));
j3array[0]=((IkReal(-1.34027003705633))+(((IkReal(-1.00000000000000))*(x73))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(1.80132261653346))+(x73));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x74=(cj2)*(cj2);
IkReal x75=(sj3)*(sj3);
IkReal x76=(cj3)*(cj3);
IkReal x77=((IkReal(13.3333333333333))*(cj3)*(sj3));
dummyeval[0]=((IkReal(149.382716049383))+(((IkReal(44.4444444444444))*(x76)))+(((IkReal(24.4444444444444))*(sj3)))+(((IkReal(13.3333333333333))*(sj3)*(x74)))+(((IkReal(-2.00000000000000))*(cj3)*(x74)))+(((IkReal(44.4444444444444))*(x74)*(x75)))+(((IkReal(-1.00000000000000))*(x74)*(x77)))+(x77)+(x75)+(x74)+(((x74)*(x76)))+(((IkReal(162.962962962963))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x78=((IkReal(0.0450000000000000))*(cj2));
IkReal x79=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
IkReal x80=((((IkReal(-1.00000000000000))*(cj3)*(x78)))+(((IkReal(0.300000000000000))*(cj2)*(sj3)))+(x78));
Atan2Value<IkReal> x83 = IKatan2WithCheck(x79,x80,IKFAST_ATAN2_MAGTHRESH);
if( !x83.valid ) {
    continue;
}
IkReal x81=((IkReal(1.00000000000000))*(x83.value));
if( ((((x79)*(x79))+((x80)*(x80)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x82=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x82)))+(((IkReal(-1.00000000000000))*(x81))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(x82)+(((IkReal(-1.00000000000000))*(x81))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x84=((IkReal(1.00000000000000))*(cj2)*(sj1));
gconst1=IKsign(((((IkReal(-1.00000000000000))*(x84)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x84)*((py)*(py))))));
IkReal x85=((IkReal(1.00000000000000))*(cj2)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x85)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x85)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x86=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x86;
evalcond[3]=x86;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x87=((IkReal(110.000000000000))*(pz));
IkReal x88=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x89 = IKatan2WithCheck(((gconst5)*(((((px)*(x87)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x88)))))),((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x87)))+(((IkReal(21.2500000000000))*(py)))+(((py)*(x88)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x89.valid ) {
    continue;
}
j0array[0]=x89.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x90=IKsin(j0);
IkReal x91=IKcos(j0);
IkReal x92=((px)*(x90));
IkReal x93=((py)*(x91));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x92)+(((IkReal(-1.00000000000000))*(x93)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x90)))+(((px)*(x91))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x93)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x92))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x652=((IkReal(0.300000000000000))*(sj3));
IkReal x653=((IkReal(0.0450000000000000))*(px));
IkReal x654=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x655 = IKatan2WithCheck(((gconst4)*(((((IkReal(-1.00000000000000))*(cj3)*(x653)))+(((px)*(x652)))+(x653)))),((gconst4)*(((((cj3)*(x654)))+(((IkReal(-1.00000000000000))*(x654)))+(((IkReal(-1.00000000000000))*(py)*(x652)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x655.valid ) {
    continue;
}
j0array[0]=x655.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x656=IKsin(j0);
IkReal x657=IKcos(j0);
IkReal x658=((px)*(x656));
IkReal x659=((py)*(x657));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x658)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x656)))+(((px)*(x657))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x659)))+(((IkReal(-0.0900000000000000))*(x658)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x660=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x660;
evalcond[3]=x660;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x661=((IkReal(110.000000000000))*(pz));
IkReal x662=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x663 = IKatan2WithCheck(((gconst7)*(((((px)*(x661)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x662)))))),((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x662)))+(((IkReal(-1.00000000000000))*(py)*(x661)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x663.valid ) {
    continue;
}
j0array[0]=x663.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x664=IKsin(j0);
IkReal x665=IKcos(j0);
IkReal x666=((px)*(x664));
IkReal x667=((py)*(x665));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x667)))+(x666)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x665)))+(((py)*(x664))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x666)))+(((IkReal(0.0900000000000000))*(x667)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x668=((IkReal(0.300000000000000))*(sj3));
IkReal x669=((IkReal(0.0450000000000000))*(px));
IkReal x670=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x671 = IKatan2WithCheck(((gconst6)*(((((IkReal(-1.00000000000000))*(cj3)*(x669)))+(((px)*(x668)))+(x669)))),((gconst6)*(((((cj3)*(x670)))+(((IkReal(-1.00000000000000))*(py)*(x668)))+(((IkReal(-1.00000000000000))*(x670)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x671.valid ) {
    continue;
}
j0array[0]=x671.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x672=IKsin(j0);
IkReal x673=IKcos(j0);
IkReal x674=((px)*(x672));
IkReal x675=((py)*(x673));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x674)+(((IkReal(-1.00000000000000))*(x675)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x672)))+(((px)*(x673))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x675)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x674)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x676=((IkReal(3.14159265358979))+(j1));
IkReal x677=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(x676, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((((IkReal(-2.00000000000000))*(atan(htj1))))+(x676)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x677;
evalcond[3]=x677;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x678=((IkReal(110.000000000000))*(pz));
IkReal x679=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x680 = IKatan2WithCheck(((gconst9)*(((((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x679)))+(((px)*(x678)))))),((gconst9)*(((((py)*(x679)))+(((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x678)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x680.valid ) {
    continue;
}
j0array[0]=x680.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x681=IKsin(j0);
IkReal x682=IKcos(j0);
IkReal x683=((px)*(x681));
IkReal x684=((py)*(x682));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x683)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x684))));
evalcond[1]=((((px)*(x682)))+(((py)*(x681))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x683)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x684))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x685=((IkReal(0.300000000000000))*(sj3));
IkReal x686=((IkReal(0.0450000000000000))*(px));
IkReal x687=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x688 = IKatan2WithCheck(((gconst8)*(((((px)*(x685)))+(x686)+(((IkReal(-1.00000000000000))*(cj3)*(x686)))))),((gconst8)*(((((IkReal(-1.00000000000000))*(x687)))+(((IkReal(-1.00000000000000))*(py)*(x685)))+(((cj3)*(x687)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x688.valid ) {
    continue;
}
j0array[0]=x688.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x689=IKsin(j0);
IkReal x690=IKcos(j0);
IkReal x691=((px)*(x689));
IkReal x692=((py)*(x690));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x691)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x692))));
evalcond[1]=((((px)*(x690)))+(((py)*(x689))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x691)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x692))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x693=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x693;
evalcond[3]=x693;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x694=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x694)))+(((IkReal(-12.2222222222222))*(pz)*(x694)))+(((IkReal(11.1111111111111))*(pp)*(x694))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x695=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x696=((IkReal(0.0450000000000000))*(x695));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x695)))+(((IkReal(-1.00000000000000))*(cj3)*(x696)))+(x696));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x697=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x697;
evalcond[3]=x697;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x698=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x698)))+(((IkReal(-12.2222222222222))*(pz)*(x698)))+(((IkReal(11.1111111111111))*(pp)*(x698))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x699=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x700=((IkReal(0.0450000000000000))*(x699));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x699)))+(((IkReal(-1.00000000000000))*(cj3)*(x700)))+(x700));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x701=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x701;
evalcond[3]=x701;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x702=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x702)))+(((IkReal(12.2222222222222))*(pz)*(x702)))+(((IkReal(-2.36111111111111))*(x702))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x703=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x704=((IkReal(0.0450000000000000))*(x703));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x703)))+(((IkReal(-1.00000000000000))*(x704)))+(((cj3)*(x704))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x705=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x705;
evalcond[3]=x705;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x706=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x706)))+(((IkReal(12.2222222222222))*(pz)*(x706)))+(((IkReal(-2.36111111111111))*(x706))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x707=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x708=((IkReal(0.0450000000000000))*(x707));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x707)))+(((IkReal(-1.00000000000000))*(x708)))+(((cj3)*(x708))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x709=((IkReal(0.0450000000000000))*(sj3));
IkReal x710=((IkReal(0.300000000000000))*(cj3));
IkReal x711=((x710)+(x709));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x711))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x711));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x712=((IkReal(110.000000000000))*(pz));
IkReal x713=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x714 = IKatan2WithCheck(((gconst11)*(((((IkReal(-1.00000000000000))*(px)*(x712)))+(((IkReal(-1.00000000000000))*(px)*(x713)))+(((IkReal(-21.2500000000000))*(px)))))),((gconst11)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x712)))+(((py)*(x713)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x714.valid ) {
    continue;
}
j0array[0]=x714.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x715=IKcos(j0);
IkReal x716=IKsin(j0);
IkReal x717=((px)*(x716));
IkReal x718=((IkReal(1.00000000000000))*(x715));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(x717)+(((IkReal(-1.00000000000000))*(py)*(x718))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x716)))+(((IkReal(-1.00000000000000))*(px)*(x718))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x715)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x717))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x719=((IkReal(0.300000000000000))*(sj3));
IkReal x720=((IkReal(0.0450000000000000))*(px));
IkReal x721=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x722 = IKatan2WithCheck(((gconst10)*(((((IkReal(-1.00000000000000))*(cj3)*(x720)))+(((px)*(x719)))+(x720)))),((gconst10)*(((((IkReal(-1.00000000000000))*(x721)))+(((cj3)*(x721)))+(((IkReal(-1.00000000000000))*(py)*(x719)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x722.valid ) {
    continue;
}
j0array[0]=x722.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x723=IKcos(j0);
IkReal x724=IKsin(j0);
IkReal x725=((px)*(x724));
IkReal x726=((IkReal(1.00000000000000))*(x723));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(x725)+(((IkReal(-1.00000000000000))*(py)*(x726))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x726)))+(((IkReal(-1.00000000000000))*(py)*(x724))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x725)))+(((IkReal(0.0900000000000000))*(py)*(x723))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x727=((IkReal(0.0450000000000000))*(sj3));
IkReal x728=((IkReal(0.300000000000000))*(cj3));
IkReal x729=((x727)+(x728));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x729)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x729));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x730=((IkReal(110.000000000000))*(pz));
IkReal x731=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x732 = IKatan2WithCheck(((gconst13)*(((((IkReal(-1.00000000000000))*(px)*(x731)))+(((IkReal(-1.00000000000000))*(px)*(x730)))+(((IkReal(-21.2500000000000))*(px)))))),((gconst13)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x731)))+(((py)*(x730)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x732.valid ) {
    continue;
}
j0array[0]=x732.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x733=IKcos(j0);
IkReal x734=IKsin(j0);
IkReal x735=((px)*(x734));
IkReal x736=((IkReal(1.00000000000000))*(x733));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(x735)+(((IkReal(-1.00000000000000))*(py)*(x736))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x736)))+(((IkReal(-1.00000000000000))*(py)*(x734))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x735)))+(((IkReal(0.0900000000000000))*(py)*(x733))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x737=((IkReal(0.300000000000000))*(sj3));
IkReal x738=((IkReal(0.0450000000000000))*(px));
IkReal x739=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x740 = IKatan2WithCheck(((gconst12)*(((((IkReal(-1.00000000000000))*(cj3)*(x738)))+(((px)*(x737)))+(x738)))),((gconst12)*(((((IkReal(-1.00000000000000))*(x739)))+(((cj3)*(x739)))+(((IkReal(-1.00000000000000))*(py)*(x737)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x740.valid ) {
    continue;
}
j0array[0]=x740.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x741=IKcos(j0);
IkReal x742=IKsin(j0);
IkReal x743=((px)*(x742));
IkReal x744=((IkReal(1.00000000000000))*(x741));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x744)))+(((IkReal(0.300000000000000))*(sj3)))+(x743));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x742)))+(((IkReal(-1.00000000000000))*(px)*(x744))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x741)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x743))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x745=((IkReal(0.0450000000000000))*(sj3));
IkReal x746=((IkReal(0.300000000000000))*(cj3));
IkReal x747=((x746)+(x745));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x747))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x747));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x748=((IkReal(110.000000000000))*(pz));
IkReal x749=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x750 = IKatan2WithCheck(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x749)))+(((IkReal(-1.00000000000000))*(px)*(x748)))+(((IkReal(-21.2500000000000))*(px)))))),((gconst15)*(((((py)*(x749)))+(((py)*(x748)))+(((IkReal(21.2500000000000))*(py)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x750.valid ) {
    continue;
}
j0array[0]=x750.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x751=IKcos(j0);
IkReal x752=IKsin(j0);
IkReal x753=((px)*(x752));
IkReal x754=((IkReal(1.00000000000000))*(x751));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x754)))+(((IkReal(0.300000000000000))*(sj3)))+(x753));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x754)))+(((IkReal(-1.00000000000000))*(py)*(x752))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x751)))+(((IkReal(-0.0900000000000000))*(x753)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x755=((IkReal(0.300000000000000))*(sj3));
IkReal x756=((IkReal(0.0450000000000000))*(px));
IkReal x757=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x758 = IKatan2WithCheck(((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x756)))+(((px)*(x755)))+(x756)))),((gconst14)*(((((cj3)*(x757)))+(((IkReal(-1.00000000000000))*(py)*(x755)))+(((IkReal(-1.00000000000000))*(x757)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x758.valid ) {
    continue;
}
j0array[0]=x758.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x759=IKcos(j0);
IkReal x760=IKsin(j0);
IkReal x761=((px)*(x760));
IkReal x762=((IkReal(1.00000000000000))*(x759));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(py)*(x762)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(x761));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x762)))+(((IkReal(-1.00000000000000))*(py)*(x760))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x759)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x761))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x763=((IkReal(0.0450000000000000))*(sj3));
IkReal x764=((IkReal(0.300000000000000))*(cj3));
IkReal x765=((x764)+(x763));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x765)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x765));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x766=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x766)))+(((IkReal(2.36111111111111))*(x766)))+(((IkReal(11.1111111111111))*(pp)*(x766))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x767=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x768=((IkReal(0.0450000000000000))*(x767));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x768)))+(((IkReal(0.300000000000000))*(sj3)*(x767)))+(x768));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x769=((IkReal(0.0450000000000000))*(sj3));
IkReal x770=((IkReal(0.300000000000000))*(cj3));
IkReal x771=((x770)+(x769));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x771))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x771));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x772=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x772)))+(((IkReal(12.2222222222222))*(pz)*(x772)))+(((IkReal(11.1111111111111))*(pp)*(x772))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x773=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x774=((IkReal(0.0450000000000000))*(x773));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x774)))+(((IkReal(0.300000000000000))*(sj3)*(x773)))+(x774));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x775=((IkReal(0.0450000000000000))*(sj3));
IkReal x776=((IkReal(0.300000000000000))*(cj3));
IkReal x777=((x776)+(x775));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x777))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x777));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x778=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x778)))+(((IkReal(-11.1111111111111))*(pp)*(x778)))+(((IkReal(-2.36111111111111))*(x778))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x779=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x780=((IkReal(0.0450000000000000))*(x779));
sj0array[0]=((((IkReal(-1.00000000000000))*(x780)))+(((IkReal(-0.300000000000000))*(sj3)*(x779)))+(((cj3)*(x780))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x781=((IkReal(0.0450000000000000))*(sj3));
IkReal x782=((IkReal(0.300000000000000))*(cj3));
IkReal x783=((x782)+(x781));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x783)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x783));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x784=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x784)))+(((IkReal(-12.2222222222222))*(pz)*(x784)))+(((IkReal(-11.1111111111111))*(pp)*(x784))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x785=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x786=((IkReal(0.0450000000000000))*(x785));
sj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x785)))+(((IkReal(-1.00000000000000))*(x786)))+(((cj3)*(x786))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x787=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x787;
evalcond[3]=x787;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x788=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x788)))+(((IkReal(11.1111111111111))*(pp)*(x788)))+(((IkReal(-12.2222222222222))*(pz)*(x788))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x789=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x790=((IkReal(0.0450000000000000))*(x789));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x790)))+(((IkReal(0.300000000000000))*(sj3)*(x789)))+(x790));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x791=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x791;
evalcond[3]=x791;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x792=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x792)))+(((IkReal(2.36111111111111))*(x792)))+(((IkReal(-12.2222222222222))*(pz)*(x792))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x793=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x794=((IkReal(0.0450000000000000))*(x793));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x794)))+(((IkReal(0.300000000000000))*(sj3)*(x793)))+(x794));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x795=((IkReal(3.14159265358979))+(j1));
IkReal x796=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(x795, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((((IkReal(-2.00000000000000))*(atan(htj1))))+(x795)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x796;
evalcond[3]=x796;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x797=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x797)))+(((IkReal(2.36111111111111))*(x797)))+(((IkReal(-12.2222222222222))*(pz)*(x797))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x798=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x799=((IkReal(0.0450000000000000))*(x798));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x799)))+(((IkReal(0.300000000000000))*(sj3)*(x798)))+(x799));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x800=IKabs(px);
IkReal x801=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))+(x800))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(x800)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x801;
evalcond[3]=x801;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x802=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x802)))+(((IkReal(-12.2222222222222))*(pz)*(x802)))+(((IkReal(11.1111111111111))*(pp)*(x802))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x803=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x804=((IkReal(0.0450000000000000))*(x803));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x803)))+(((IkReal(-1.00000000000000))*(cj3)*(x804)))+(x804));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x805=IKabs(px);
IkReal x806=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((x805)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(x805)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x806;
evalcond[3]=x806;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x807=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x807)))+(((IkReal(-12.2222222222222))*(pz)*(x807)))+(((IkReal(11.1111111111111))*(pp)*(x807))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x808=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x809=((IkReal(0.0450000000000000))*(x808));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x808)))+(((IkReal(-1.00000000000000))*(cj3)*(x809)))+(x809));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x810=((IkReal(0.0450000000000000))*(sj3));
IkReal x811=((IkReal(0.300000000000000))*(cj3));
IkReal x812=((x810)+(x811));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x812)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x812));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x813=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x813)))+(((IkReal(12.2222222222222))*(pz)*(x813)))+(((IkReal(2.36111111111111))*(x813))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x814=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x815=((IkReal(0.0450000000000000))*(x814));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x814)))+(((IkReal(-1.00000000000000))*(cj3)*(x815)))+(x815));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x816=((IkReal(0.0450000000000000))*(sj3));
IkReal x817=((IkReal(0.300000000000000))*(cj3));
IkReal x818=((x816)+(x817));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x818)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x818));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x819=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x819)))+(((IkReal(12.2222222222222))*(pz)*(x819)))+(((IkReal(2.36111111111111))*(x819))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x820=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x821=((IkReal(0.0450000000000000))*(x820));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x820)))+(x821)+(((IkReal(-1.00000000000000))*(cj3)*(x821))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x822=((IkReal(0.0450000000000000))*(sj3));
IkReal x823=((IkReal(0.300000000000000))*(cj3));
IkReal x824=((x823)+(x822));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x824)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x824));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x825=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x825)))+(((IkReal(12.2222222222222))*(pz)*(x825)))+(((IkReal(2.36111111111111))*(x825))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x826=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x827=((IkReal(0.0450000000000000))*(x826));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x826)))+(x827)+(((IkReal(-1.00000000000000))*(cj3)*(x827))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x828=IKabs(px);
IkReal x829=((IkReal(0.0450000000000000))*(sj3));
IkReal x830=((IkReal(0.300000000000000))*(cj3));
IkReal x831=((x829)+(x830));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x828))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))+(x828)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x831))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x831));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x832=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x832)))+(((IkReal(11.1111111111111))*(pp)*(x832)))+(((IkReal(12.2222222222222))*(pz)*(x832))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x833=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x834=((IkReal(0.0450000000000000))*(x833));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x833)))+(x834)+(((IkReal(-1.00000000000000))*(cj3)*(x834))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x835=IKabs(px);
IkReal x836=((IkReal(0.0450000000000000))*(sj3));
IkReal x837=((IkReal(0.300000000000000))*(cj3));
IkReal x838=((x836)+(x837));
evalcond[0]=((IKabs(((x835)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x835)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x838))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x838));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x839=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x839)))+(((IkReal(11.1111111111111))*(pp)*(x839)))+(((IkReal(12.2222222222222))*(pz)*(x839))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x840=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x841=((IkReal(0.0450000000000000))*(x840));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x840)))+(x841)+(((IkReal(-1.00000000000000))*(cj3)*(x841))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x842=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x842;
evalcond[3]=x842;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x843=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x843)))+(((IkReal(-11.1111111111111))*(pp)*(x843)))+(((IkReal(-2.36111111111111))*(x843))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x844=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x845=((IkReal(0.0450000000000000))*(x844));
sj0array[0]=((((IkReal(-1.00000000000000))*(x845)))+(((IkReal(-0.300000000000000))*(sj3)*(x844)))+(((cj3)*(x845))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x846=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x846;
evalcond[3]=x846;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x847=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x847)))+(((IkReal(-11.1111111111111))*(pp)*(x847)))+(((IkReal(-2.36111111111111))*(x847))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x848=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x849=((IkReal(0.0450000000000000))*(x848));
sj0array[0]=((((IkReal(-1.00000000000000))*(x849)))+(((IkReal(-0.300000000000000))*(sj3)*(x848)))+(((cj3)*(x849))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x850=((IkReal(3.14159265358979))+(j1));
IkReal x851=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((((IkReal(-2.00000000000000))*(atan(htj1))))+(x850)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(x850, IkReal(6.28318530717959))))))+(IKabs(py))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x851;
evalcond[3]=x851;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x852=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x852)))+(((IkReal(12.2222222222222))*(pz)*(x852)))+(((IkReal(-2.36111111111111))*(x852))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x853=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x854=((IkReal(0.0450000000000000))*(x853));
sj0array[0]=((((IkReal(-1.00000000000000))*(x854)))+(((cj3)*(x854)))+(((IkReal(-0.300000000000000))*(sj3)*(x853))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x855=IKabs(py);
IkReal x856=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))+(x855))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(x855)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x856;
evalcond[3]=x856;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x857=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x857)))+(((IkReal(12.2222222222222))*(pz)*(x857)))+(((IkReal(-2.36111111111111))*(x857))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x858=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x859=((IkReal(0.0450000000000000))*(x858));
sj0array[0]=((((IkReal(-1.00000000000000))*(x859)))+(((cj3)*(x859)))+(((IkReal(-0.300000000000000))*(sj3)*(x858))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x860=IKabs(py);
IkReal x861=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(x860))))+(IKabs(((x860)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x861;
evalcond[3]=x861;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x862=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x862)))+(((IkReal(-11.1111111111111))*(pp)*(x862)))+(((IkReal(12.2222222222222))*(pz)*(x862))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x863=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x864=((IkReal(0.0450000000000000))*(x863));
sj0array[0]=((((IkReal(-1.00000000000000))*(x864)))+(((cj3)*(x864)))+(((IkReal(-0.300000000000000))*(sj3)*(x863))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x865=((IkReal(0.0450000000000000))*(sj3));
IkReal x866=((IkReal(0.300000000000000))*(cj3));
IkReal x867=((x866)+(x865));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x867)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x867));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x868=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-2.36111111111111))*(x868)))+(((IkReal(-11.1111111111111))*(pp)*(x868)))+(((IkReal(-12.2222222222222))*(pz)*(x868))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x869=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x870=((IkReal(0.0450000000000000))*(x869));
sj0array[0]=((((cj3)*(x870)))+(((IkReal(-0.300000000000000))*(sj3)*(x869)))+(((IkReal(-1.00000000000000))*(x870))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x871=((IkReal(0.0450000000000000))*(sj3));
IkReal x872=((IkReal(0.300000000000000))*(cj3));
IkReal x873=((x871)+(x872));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x873))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x873));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x874=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x874)))+(((IkReal(-2.36111111111111))*(x874)))+(((IkReal(-12.2222222222222))*(pz)*(x874))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x875=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x876=((IkReal(0.0450000000000000))*(x875));
sj0array[0]=((((cj3)*(x876)))+(((IkReal(-0.300000000000000))*(sj3)*(x875)))+(((IkReal(-1.00000000000000))*(x876))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x877=((IkReal(0.0450000000000000))*(sj3));
IkReal x878=((IkReal(0.300000000000000))*(cj3));
IkReal x879=((x878)+(x877));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x879))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x879));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x880=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x880)))+(((IkReal(-2.36111111111111))*(x880)))+(((IkReal(-11.1111111111111))*(pp)*(x880))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x881=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x882=((IkReal(0.0450000000000000))*(x881));
sj0array[0]=((((cj3)*(x882)))+(((IkReal(-0.300000000000000))*(sj3)*(x881)))+(((IkReal(-1.00000000000000))*(x882))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x883=IKabs(py);
IkReal x884=((IkReal(0.0450000000000000))*(sj3));
IkReal x885=((IkReal(0.300000000000000))*(cj3));
IkReal x886=((x885)+(x884));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))+(x883))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x883)))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x886)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x886));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x887=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x887)))+(((IkReal(-2.36111111111111))*(x887)))+(((IkReal(-11.1111111111111))*(pp)*(x887))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x888=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x889=((IkReal(0.0450000000000000))*(x888));
sj0array[0]=((((cj3)*(x889)))+(((IkReal(-0.300000000000000))*(sj3)*(x888)))+(((IkReal(-1.00000000000000))*(x889))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x890=IKabs(py);
IkReal x891=((IkReal(0.0450000000000000))*(sj3));
IkReal x892=((IkReal(0.300000000000000))*(cj3));
IkReal x893=((x892)+(x891));
evalcond[0]=((IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))+(x890))))+(IKabs(((x890)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x893)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x893));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x894=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x894)))+(((IkReal(-11.1111111111111))*(pp)*(x894)))+(((IkReal(-2.36111111111111))*(x894))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x895=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x896=((IkReal(0.0450000000000000))*(x895));
sj0array[0]=((((cj3)*(x896)))+(((IkReal(-0.300000000000000))*(sj3)*(x895)))+(((IkReal(-1.00000000000000))*(x896))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x897=((px)*(sj3));
IkReal x898=((py)*(sj1));
IkReal x899=((IkReal(0.300000000000000))*(cj3));
IkReal x900=((IkReal(0.0450000000000000))*(cj3));
IkReal x901=((px)*(sj1));
IkReal x902=((IkReal(1.00000000000000))*(cj1)*(pz));
Atan2Value<IkReal> x903 = IKatan2WithCheck(((gconst3)*(((((py)*(x899)))+(((IkReal(-0.300000000000000))*(sj1)*(x897)))+(((IkReal(-1.00000000000000))*(py)*(x902)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((x900)*(x901)))+(((IkReal(-0.0450000000000000))*(x901)))+(((IkReal(0.550000000000000))*(py)))))),((gconst3)*(((((IkReal(0.300000000000000))*(sj3)*(x898)))+(((IkReal(-1.00000000000000))*(px)*(x902)))+(((px)*(x899)))+(((IkReal(-1.00000000000000))*(x898)*(x900)))+(((IkReal(0.0450000000000000))*(x897)))+(((IkReal(0.0450000000000000))*(x898)))+(((IkReal(0.550000000000000))*(px)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x903.valid ) {
    continue;
}
j0array[0]=x903.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x904=IKsin(j0);
IkReal x905=IKcos(j0);
IkReal x906=((IkReal(0.300000000000000))*(cj3));
IkReal x907=((IkReal(0.0450000000000000))*(sj3));
IkReal x908=((cj1)*(pz));
IkReal x909=((px)*(x904));
IkReal x910=((px)*(x905));
IkReal x911=((py)*(x904));
IkReal x912=((py)*(x905));
IkReal x913=((sj1)*(x911));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x907)))+(((IkReal(-1.00000000000000))*(x906)))+(x913)+(x908)+(((sj1)*(x910))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x912)))+(((IkReal(0.300000000000000))*(sj3)))+(x909));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj1)*(x910)))+(((cj1)*(x911))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x910)))+(((IkReal(-1.00000000000000))*(x911)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x907)))+(((sj1)*(x906))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x910)))+(((IkReal(1.10000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x909)))+(((IkReal(0.0900000000000000))*(x912)))+(((IkReal(1.10000000000000))*(x908))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x914=((IkReal(0.0450000000000000))*(cj1));
IkReal x915=((pz)*(sj1));
IkReal x916=((IkReal(0.300000000000000))*(cj1)*(sj3));
Atan2Value<IkReal> x917 = IKatan2WithCheck(((gconst2)*(((((IkReal(-1.00000000000000))*(px)*(x914)))+(((IkReal(-1.00000000000000))*(px)*(x916)))+(((cj3)*(px)*(x914)))+(((py)*(x915)))))),((gconst2)*(((((px)*(x915)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x914)))+(((py)*(x916)))+(((py)*(x914)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x917.valid ) {
    continue;
}
j0array[0]=x917.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x918=IKsin(j0);
IkReal x919=IKcos(j0);
IkReal x920=((IkReal(0.300000000000000))*(cj3));
IkReal x921=((IkReal(0.0450000000000000))*(sj3));
IkReal x922=((cj1)*(pz));
IkReal x923=((px)*(x918));
IkReal x924=((px)*(x919));
IkReal x925=((py)*(x918));
IkReal x926=((py)*(x919));
IkReal x927=((sj1)*(x925));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x921)))+(((IkReal(-1.00000000000000))*(x920)))+(((sj1)*(x924)))+(x927)+(x922));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x926)))+(((IkReal(0.300000000000000))*(sj3)))+(x923));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj1)*(x924)))+(((cj1)*(x925))));
evalcond[3]=((((sj1)*(x921)))+(((sj1)*(x920)))+(((IkReal(-1.00000000000000))*(x925)))+(((IkReal(-1.00000000000000))*(x924)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x923)))+(((IkReal(1.10000000000000))*(x922)))+(((IkReal(1.10000000000000))*(x927)))+(((IkReal(1.10000000000000))*(sj1)*(x924)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x926))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x928=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x928;
evalcond[3]=x928;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x929=((IkReal(110.000000000000))*(pz));
IkReal x930=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x931 = IKatan2WithCheck(((gconst19)*(((((IkReal(-1.00000000000000))*(px)*(x930)))+(((IkReal(-21.2500000000000))*(px)))+(((px)*(x929)))))),((gconst19)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x930)))+(((IkReal(-1.00000000000000))*(py)*(x929)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x931.valid ) {
    continue;
}
j0array[0]=x931.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x932=IKcos(j0);
IkReal x933=IKsin(j0);
IkReal x934=((px)*(x933));
IkReal x935=((IkReal(1.00000000000000))*(x932));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x935)))+(x934)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x935)))+(((IkReal(-1.00000000000000))*(py)*(x933))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(x932)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x934))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x936=((IkReal(0.300000000000000))*(sj3));
IkReal x937=((IkReal(0.0450000000000000))*(px));
IkReal x938=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x939 = IKatan2WithCheck(((gconst18)*(((((IkReal(-1.00000000000000))*(px)*(x936)))+(((cj3)*(x937)))+(((IkReal(-1.00000000000000))*(x937)))))),((gconst18)*(((((IkReal(-1.00000000000000))*(cj3)*(x938)))+(((py)*(x936)))+(x938)))),IKFAST_ATAN2_MAGTHRESH);
if( !x939.valid ) {
    continue;
}
j0array[0]=x939.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x940=IKcos(j0);
IkReal x941=IKsin(j0);
IkReal x942=((px)*(x941));
IkReal x943=((IkReal(1.00000000000000))*(x940));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(py)*(x943)))+(((IkReal(0.0450000000000000))*(cj3)))+(x942)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x941)))+(((IkReal(-1.00000000000000))*(px)*(x943))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x942)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x940)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x944=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x944;
evalcond[3]=x944;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x945=((IkReal(110.000000000000))*(pz));
IkReal x946=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x947 = IKatan2WithCheck(((gconst21)*(((((px)*(x945)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x946)))))),((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x945)))+(((IkReal(21.2500000000000))*(py)))+(((py)*(x946)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x947.valid ) {
    continue;
}
j0array[0]=x947.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x948=IKcos(j0);
IkReal x949=IKsin(j0);
IkReal x950=((px)*(x949));
IkReal x951=((IkReal(1.00000000000000))*(x948));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(py)*(x951)))+(((IkReal(0.0450000000000000))*(cj3)))+(x950)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x949)))+(((IkReal(-1.00000000000000))*(px)*(x951))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x950)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x948)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x952=((IkReal(0.300000000000000))*(sj3));
IkReal x953=((IkReal(0.0450000000000000))*(px));
IkReal x954=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x955 = IKatan2WithCheck(((gconst20)*(((((cj3)*(x953)))+(((IkReal(-1.00000000000000))*(px)*(x952)))+(((IkReal(-1.00000000000000))*(x953)))))),((gconst20)*(((((IkReal(-1.00000000000000))*(cj3)*(x954)))+(((py)*(x952)))+(x954)))),IKFAST_ATAN2_MAGTHRESH);
if( !x955.valid ) {
    continue;
}
j0array[0]=x955.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x956=IKcos(j0);
IkReal x957=IKsin(j0);
IkReal x958=((px)*(x957));
IkReal x959=((IkReal(1.00000000000000))*(x956));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(py)*(x959)))+(((IkReal(0.0450000000000000))*(cj3)))+(x958)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x957)))+(((IkReal(-1.00000000000000))*(px)*(x959))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(x956)))+(((IkReal(0.0900000000000000))*(x958)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x960=((IkReal(3.14159265358979))+(j1));
IkReal x961=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(x960, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((((IkReal(-2.00000000000000))*(atan(htj1))))+(x960)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x961;
evalcond[3]=x961;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x962=((IkReal(110.000000000000))*(pz));
IkReal x963=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x964 = IKatan2WithCheck(((gconst23)*(((((px)*(x962)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x963)))))),((gconst23)*(((((IkReal(-1.00000000000000))*(py)*(x962)))+(((IkReal(21.2500000000000))*(py)))+(((py)*(x963)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x964.valid ) {
    continue;
}
j0array[0]=x964.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x965=IKcos(j0);
IkReal x966=IKsin(j0);
IkReal x967=((px)*(x966));
IkReal x968=((IkReal(1.00000000000000))*(x965));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(py)*(x968)))+(((IkReal(0.0450000000000000))*(cj3)))+(x967)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x966)))+(((IkReal(-1.00000000000000))*(px)*(x968))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(x965)))+(((IkReal(0.0900000000000000))*(x967)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x969=((IkReal(0.300000000000000))*(sj3));
IkReal x970=((IkReal(0.0450000000000000))*(px));
IkReal x971=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x972 = IKatan2WithCheck(((gconst22)*(((((cj3)*(x970)))+(((IkReal(-1.00000000000000))*(px)*(x969)))+(((IkReal(-1.00000000000000))*(x970)))))),((gconst22)*(((((IkReal(-1.00000000000000))*(cj3)*(x971)))+(((py)*(x969)))+(x971)))),IKFAST_ATAN2_MAGTHRESH);
if( !x972.valid ) {
    continue;
}
j0array[0]=x972.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x973=IKcos(j0);
IkReal x974=IKsin(j0);
IkReal x975=((px)*(x974));
IkReal x976=((IkReal(1.00000000000000))*(x973));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x976)))+(x975)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x976)))+(((IkReal(-1.00000000000000))*(py)*(x974))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x975)))+(((IkReal(-0.0900000000000000))*(py)*(x973)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x977=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x977;
evalcond[3]=x977;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x978=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x978)))+(((IkReal(-11.1111111111111))*(pp)*(x978)))+(((IkReal(-2.36111111111111))*(x978))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x979=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x980=((IkReal(0.0450000000000000))*(x979));
cj0array[0]=((((IkReal(-1.00000000000000))*(x980)))+(((cj3)*(x980)))+(((IkReal(-0.300000000000000))*(sj3)*(x979))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x981=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x981;
evalcond[3]=x981;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x982=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x982)))+(((IkReal(-11.1111111111111))*(pp)*(x982)))+(((IkReal(-2.36111111111111))*(x982))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x983=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x984=((IkReal(0.0450000000000000))*(x983));
cj0array[0]=((((IkReal(-1.00000000000000))*(x984)))+(((cj3)*(x984)))+(((IkReal(-0.300000000000000))*(sj3)*(x983))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x985=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x985;
evalcond[3]=x985;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x986=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x986)))+(((IkReal(11.1111111111111))*(pp)*(x986)))+(((IkReal(2.36111111111111))*(x986))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x987=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x988=((IkReal(0.0450000000000000))*(x987));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x987)))+(((IkReal(-1.00000000000000))*(cj3)*(x988)))+(x988));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x989=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x989;
evalcond[3]=x989;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x990=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x990)))+(((IkReal(2.36111111111111))*(x990)))+(((IkReal(-12.2222222222222))*(pz)*(x990))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x991=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x992=((IkReal(0.0450000000000000))*(x991));
sj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x992)))+(((IkReal(0.300000000000000))*(sj3)*(x991)))+(x992));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x993=((IkReal(0.0450000000000000))*(sj3));
IkReal x994=((IkReal(0.300000000000000))*(cj3));
IkReal x995=((x993)+(x994));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x995))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x995));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x996=((IkReal(110.000000000000))*(pz));
IkReal x997=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x998 = IKatan2WithCheck(((gconst25)*(((((IkReal(-1.00000000000000))*(px)*(x997)))+(((IkReal(-1.00000000000000))*(px)*(x996)))+(((IkReal(-21.2500000000000))*(px)))))),((gconst25)*(((((py)*(x997)))+(((py)*(x996)))+(((IkReal(21.2500000000000))*(py)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x998.valid ) {
    continue;
}
j0array[0]=x998.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x999=IKsin(j0);
IkReal x1000=IKcos(j0);
IkReal x1001=((px)*(x999));
IkReal x1002=((py)*(x1000));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1002)))+(x1001)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x1000)))+(((py)*(x999))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1001)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x1002))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1003=((IkReal(0.300000000000000))*(sj3));
IkReal x1004=((IkReal(0.0450000000000000))*(px));
IkReal x1005=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x1006 = IKatan2WithCheck(((gconst24)*(((((cj3)*(x1004)))+(((IkReal(-1.00000000000000))*(x1004)))+(((IkReal(-1.00000000000000))*(px)*(x1003)))))),((gconst24)*(((x1005)+(((IkReal(-1.00000000000000))*(cj3)*(x1005)))+(((py)*(x1003)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1006.valid ) {
    continue;
}
j0array[0]=x1006.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1007=IKsin(j0);
IkReal x1008=IKcos(j0);
IkReal x1009=((px)*(x1007));
IkReal x1010=((py)*(x1008));
evalcond[0]=((IkReal(-0.0450000000000000))+(x1009)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1010))));
evalcond[1]=((((px)*(x1008)))+(((py)*(x1007))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1009)))+(((IkReal(-0.0900000000000000))*(x1010)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1011=((IkReal(0.0450000000000000))*(sj3));
IkReal x1012=((IkReal(0.300000000000000))*(cj3));
IkReal x1013=((x1011)+(x1012));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1013)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1013)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1014=((IkReal(110.000000000000))*(pz));
IkReal x1015=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x1016 = IKatan2WithCheck(((gconst27)*(((((IkReal(-1.00000000000000))*(px)*(x1015)))+(((IkReal(-1.00000000000000))*(px)*(x1014)))+(((IkReal(-21.2500000000000))*(px)))))),((gconst27)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x1015)))+(((py)*(x1014)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1016.valid ) {
    continue;
}
j0array[0]=x1016.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1017=IKsin(j0);
IkReal x1018=IKcos(j0);
IkReal x1019=((px)*(x1017));
IkReal x1020=((py)*(x1018));
evalcond[0]=((IkReal(-0.0450000000000000))+(x1019)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1020)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x1017)))+(((px)*(x1018))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1019)))+(((IkReal(-0.0900000000000000))*(x1020)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1021=((IkReal(0.300000000000000))*(sj3));
IkReal x1022=((IkReal(0.0450000000000000))*(px));
IkReal x1023=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x1024 = IKatan2WithCheck(((gconst26)*(((((IkReal(-1.00000000000000))*(x1022)))+(((IkReal(-1.00000000000000))*(px)*(x1021)))+(((cj3)*(x1022)))))),((gconst26)*(((((py)*(x1021)))+(x1023)+(((IkReal(-1.00000000000000))*(cj3)*(x1023)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1024.valid ) {
    continue;
}
j0array[0]=x1024.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1025=IKsin(j0);
IkReal x1026=IKcos(j0);
IkReal x1027=((px)*(x1025));
IkReal x1028=((py)*(x1026));
evalcond[0]=((IkReal(-0.0450000000000000))+(x1027)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1028)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x1025)))+(((px)*(x1026))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1028)))+(((IkReal(0.0900000000000000))*(x1027)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1029=((IkReal(0.0450000000000000))*(sj3));
IkReal x1030=((IkReal(0.300000000000000))*(cj3));
IkReal x1031=((x1030)+(x1029));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1031)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1031)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1032=((IkReal(110.000000000000))*(pz));
IkReal x1033=((IkReal(100.000000000000))*(pp));
Atan2Value<IkReal> x1034 = IKatan2WithCheck(((gconst29)*(((((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x1033)))+(((IkReal(-1.00000000000000))*(px)*(x1032)))))),((gconst29)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x1033)))+(((py)*(x1032)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1034.valid ) {
    continue;
}
j0array[0]=x1034.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1035=IKsin(j0);
IkReal x1036=IKcos(j0);
IkReal x1037=((px)*(x1035));
IkReal x1038=((py)*(x1036));
evalcond[0]=((IkReal(-0.0450000000000000))+(x1037)+(((IkReal(-1.00000000000000))*(x1038)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x1036)))+(((py)*(x1035))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1037)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x1038))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1039=((IkReal(0.300000000000000))*(sj3));
IkReal x1040=((IkReal(0.0450000000000000))*(px));
IkReal x1041=((IkReal(0.0450000000000000))*(py));
Atan2Value<IkReal> x1042 = IKatan2WithCheck(((gconst28)*(((((cj3)*(x1040)))+(((IkReal(-1.00000000000000))*(px)*(x1039)))+(((IkReal(-1.00000000000000))*(x1040)))))),((gconst28)*(((((IkReal(-1.00000000000000))*(cj3)*(x1041)))+(x1041)+(((py)*(x1039)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1042.valid ) {
    continue;
}
j0array[0]=x1042.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1043=IKsin(j0);
IkReal x1044=IKcos(j0);
IkReal x1045=((px)*(x1043));
IkReal x1046=((py)*(x1044));
evalcond[0]=((IkReal(-0.0450000000000000))+(x1045)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1046)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x1044)))+(((py)*(x1043))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x1046)))+(((IkReal(0.0900000000000000))*(x1045))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1047=((IkReal(0.0450000000000000))*(sj3));
IkReal x1048=((IkReal(0.300000000000000))*(cj3));
IkReal x1049=((x1047)+(x1048));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1049))));
evalcond[3]=((IkReal(0.550000000000000))+(x1049)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1050=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1050)))+(((IkReal(-2.36111111111111))*(x1050)))+(((IkReal(-11.1111111111111))*(pp)*(x1050))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1051=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1052=((IkReal(0.0450000000000000))*(x1051));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1052)))+(((cj3)*(x1052)))+(((IkReal(-0.300000000000000))*(sj3)*(x1051))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1053=((IkReal(0.0450000000000000))*(sj3));
IkReal x1054=((IkReal(0.300000000000000))*(cj3));
IkReal x1055=((x1053)+(x1054));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1055)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1055)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1056=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1056)))+(((IkReal(-2.36111111111111))*(x1056)))+(((IkReal(-11.1111111111111))*(pp)*(x1056))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1057=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1058=((IkReal(0.0450000000000000))*(x1057));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1058)))+(((cj3)*(x1058)))+(((IkReal(-0.300000000000000))*(sj3)*(x1057))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1059=((IkReal(0.0450000000000000))*(sj3));
IkReal x1060=((IkReal(0.300000000000000))*(cj3));
IkReal x1061=((x1059)+(x1060));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1061))));
evalcond[3]=((IkReal(0.550000000000000))+(x1061)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1062=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1062)))+(((IkReal(12.2222222222222))*(pz)*(x1062)))+(((IkReal(11.1111111111111))*(pp)*(x1062))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1063=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1064=((IkReal(0.0450000000000000))*(x1063));
sj0array[0]=((x1064)+(((IkReal(-1.00000000000000))*(cj3)*(x1064)))+(((IkReal(0.300000000000000))*(sj3)*(x1063))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1065=((IkReal(0.0450000000000000))*(sj3));
IkReal x1066=((IkReal(0.300000000000000))*(cj3));
IkReal x1067=((x1065)+(x1066));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1067))));
evalcond[3]=((IkReal(0.550000000000000))+(x1067)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1068=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1068)))+(((IkReal(12.2222222222222))*(pz)*(x1068)))+(((IkReal(11.1111111111111))*(pp)*(x1068))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1069=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1070=((IkReal(0.0450000000000000))*(x1069));
sj0array[0]=((x1070)+(((IkReal(-1.00000000000000))*(cj3)*(x1070)))+(((IkReal(0.300000000000000))*(sj3)*(x1069))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1071=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1071;
evalcond[3]=x1071;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1072=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1072)))+(((IkReal(-2.36111111111111))*(x1072)))+(((IkReal(-11.1111111111111))*(pp)*(x1072))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1073=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1074=((IkReal(0.0450000000000000))*(x1073));
cj0array[0]=((((cj3)*(x1074)))+(((IkReal(-0.300000000000000))*(sj3)*(x1073)))+(((IkReal(-1.00000000000000))*(x1074))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1075=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1075;
evalcond[3]=x1075;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1076=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1076)))+(((IkReal(-2.36111111111111))*(x1076)))+(((IkReal(-11.1111111111111))*(pp)*(x1076))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1077=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1078=((IkReal(0.0450000000000000))*(x1077));
cj0array[0]=((((cj3)*(x1078)))+(((IkReal(-0.300000000000000))*(sj3)*(x1077)))+(((IkReal(-1.00000000000000))*(x1078))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1079=((IkReal(3.14159265358979))+(j1));
IkReal x1080=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(x1079, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x1079)+(((IkReal(-2.00000000000000))*(atan(htj1))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1080;
evalcond[3]=x1080;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1081=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1081)))+(((IkReal(-11.1111111111111))*(pp)*(x1081)))+(((IkReal(-2.36111111111111))*(x1081))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1082=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1083=((IkReal(0.0450000000000000))*(x1082));
cj0array[0]=((((cj3)*(x1083)))+(((IkReal(-0.300000000000000))*(sj3)*(x1082)))+(((IkReal(-1.00000000000000))*(x1083))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1084=IKabs(px);
IkReal x1085=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((x1084)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((x1084)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1085;
evalcond[3]=x1085;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1086=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1086)))+(((IkReal(-11.1111111111111))*(pp)*(x1086)))+(((IkReal(-2.36111111111111))*(x1086))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1087=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1088=((IkReal(0.0450000000000000))*(x1087));
cj0array[0]=((((cj3)*(x1088)))+(((IkReal(-0.300000000000000))*(sj3)*(x1087)))+(((IkReal(-1.00000000000000))*(x1088))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1089=IKabs(px);
IkReal x1090=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((x1089)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((x1089)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1090;
evalcond[3]=x1090;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1091=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x1091)))+(((IkReal(12.2222222222222))*(pz)*(x1091)))+(((IkReal(-11.1111111111111))*(pp)*(x1091))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1092=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1093=((IkReal(0.0450000000000000))*(x1092));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1093)))+(((IkReal(-0.300000000000000))*(sj3)*(x1092)))+(((cj3)*(x1093))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1094=((IkReal(0.0450000000000000))*(sj3));
IkReal x1095=((IkReal(0.300000000000000))*(cj3));
IkReal x1096=((x1094)+(x1095));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1096)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1096)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1097=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1097)))+(((IkReal(-2.36111111111111))*(x1097)))+(((IkReal(-11.1111111111111))*(pp)*(x1097))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1098=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1099=((IkReal(0.0450000000000000))*(x1098));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1099)))+(((IkReal(-0.300000000000000))*(sj3)*(x1098)))+(((cj3)*(x1099))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1100=((IkReal(0.0450000000000000))*(sj3));
IkReal x1101=((IkReal(0.300000000000000))*(cj3));
IkReal x1102=((x1100)+(x1101));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1102))));
evalcond[3]=((IkReal(0.550000000000000))+(x1102)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1103=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1103)))+(((IkReal(-2.36111111111111))*(x1103)))+(((IkReal(-11.1111111111111))*(pp)*(x1103))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1104=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1105=((IkReal(0.0450000000000000))*(x1104));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1104)))+(((cj3)*(x1105)))+(((IkReal(-1.00000000000000))*(x1105))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1106=((IkReal(0.0450000000000000))*(sj3));
IkReal x1107=((IkReal(0.300000000000000))*(cj3));
IkReal x1108=((x1106)+(x1107));
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1108))));
evalcond[3]=((IkReal(0.550000000000000))+(x1108)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1109=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1109)))+(((IkReal(-2.36111111111111))*(x1109)))+(((IkReal(-11.1111111111111))*(pp)*(x1109))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1110=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1111=((IkReal(0.0450000000000000))*(x1110));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1110)))+(((IkReal(-1.00000000000000))*(x1111)))+(((cj3)*(x1111))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1112=IKabs(px);
IkReal x1113=((IkReal(0.0450000000000000))*(sj3));
IkReal x1114=((IkReal(0.300000000000000))*(cj3));
IkReal x1115=((x1113)+(x1114));
evalcond[0]=((IKabs(((x1112)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((x1112)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1115))));
evalcond[3]=((IkReal(0.550000000000000))+(x1115)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1116=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1116)))+(((IkReal(-2.36111111111111))*(x1116)))+(((IkReal(-11.1111111111111))*(pp)*(x1116))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1117=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1118=((IkReal(0.0450000000000000))*(x1117));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1117)))+(((IkReal(-1.00000000000000))*(x1118)))+(((cj3)*(x1118))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1119=IKabs(px);
IkReal x1120=((IkReal(0.0450000000000000))*(sj3));
IkReal x1121=((IkReal(0.300000000000000))*(cj3));
IkReal x1122=((x1120)+(x1121));
evalcond[0]=((IKabs(((x1119)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((x1119)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1122))));
evalcond[3]=((IkReal(0.550000000000000))+(x1122)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1123=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1123)))+(((IkReal(-11.1111111111111))*(pp)*(x1123)))+(((IkReal(-2.36111111111111))*(x1123))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1124=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1125=((IkReal(0.0450000000000000))*(x1124));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1124)))+(((IkReal(-1.00000000000000))*(x1125)))+(((cj3)*(x1125))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1126=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1126;
evalcond[3]=x1126;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1127=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1127)))+(((IkReal(11.1111111111111))*(pp)*(x1127)))+(((IkReal(2.36111111111111))*(x1127))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1128=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1129=((IkReal(0.0450000000000000))*(x1128));
sj0array[0]=((x1129)+(((IkReal(0.300000000000000))*(sj3)*(x1128)))+(((IkReal(-1.00000000000000))*(cj3)*(x1129))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1130=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1130;
evalcond[3]=x1130;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1131=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1131)))+(((IkReal(11.1111111111111))*(pp)*(x1131)))+(((IkReal(-12.2222222222222))*(pz)*(x1131))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1132=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1133=((IkReal(0.0450000000000000))*(x1132));
sj0array[0]=((x1133)+(((IkReal(0.300000000000000))*(sj3)*(x1132)))+(((IkReal(-1.00000000000000))*(cj3)*(x1133))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1134=((IkReal(3.14159265358979))+(j1));
IkReal x1135=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(x1134, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x1134)+(((IkReal(-2.00000000000000))*(atan(htj1))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1135;
evalcond[3]=x1135;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1136=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1136)))+(((IkReal(11.1111111111111))*(pp)*(x1136)))+(((IkReal(-12.2222222222222))*(pz)*(x1136))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1137=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1138=((IkReal(0.0450000000000000))*(x1137));
sj0array[0]=((x1138)+(((IkReal(0.300000000000000))*(sj3)*(x1137)))+(((IkReal(-1.00000000000000))*(cj3)*(x1138))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1139=IKabs(py);
IkReal x1140=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((x1139)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((x1139)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1140;
evalcond[3]=x1140;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1141=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1141)))+(((IkReal(2.36111111111111))*(x1141)))+(((IkReal(11.1111111111111))*(pp)*(x1141))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1142=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1143=((IkReal(0.0450000000000000))*(x1142));
sj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1143)))+(x1143)+(((IkReal(0.300000000000000))*(sj3)*(x1142))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1144=IKabs(py);
IkReal x1145=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((x1144)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((x1144)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1145;
evalcond[3]=x1145;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1146=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1146)))+(((IkReal(2.36111111111111))*(x1146)))+(((IkReal(11.1111111111111))*(pp)*(x1146))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1147=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1148=((IkReal(0.0450000000000000))*(x1147));
sj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1148)))+(x1148)+(((IkReal(0.300000000000000))*(sj3)*(x1147))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1149=((IkReal(0.0450000000000000))*(sj3));
IkReal x1150=((IkReal(0.300000000000000))*(cj3));
IkReal x1151=((x1149)+(x1150));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1151)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1151)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1152=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1152)))+(((IkReal(11.1111111111111))*(pp)*(x1152)))+(((IkReal(12.2222222222222))*(pz)*(x1152))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1153=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1154=((IkReal(0.0450000000000000))*(x1153));
sj0array[0]=((x1154)+(((IkReal(0.300000000000000))*(sj3)*(x1153)))+(((IkReal(-1.00000000000000))*(cj3)*(x1154))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1155=((IkReal(0.0450000000000000))*(sj3));
IkReal x1156=((IkReal(0.300000000000000))*(cj3));
IkReal x1157=((x1155)+(x1156));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1157)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1157)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1158=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1158)))+(((IkReal(11.1111111111111))*(pp)*(x1158)))+(((IkReal(12.2222222222222))*(pz)*(x1158))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1159=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1160=((IkReal(0.0450000000000000))*(x1159));
sj0array[0]=((x1160)+(((IkReal(0.300000000000000))*(sj3)*(x1159)))+(((IkReal(-1.00000000000000))*(cj3)*(x1160))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1161=((IkReal(0.0450000000000000))*(sj3));
IkReal x1162=((IkReal(0.300000000000000))*(cj3));
IkReal x1163=((x1161)+(x1162));
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1163))));
evalcond[3]=((IkReal(0.550000000000000))+(x1163)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1164=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1164)))+(((IkReal(11.1111111111111))*(pp)*(x1164)))+(((IkReal(12.2222222222222))*(pz)*(x1164))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1165=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1166=((IkReal(0.0450000000000000))*(x1165));
sj0array[0]=((x1166)+(((IkReal(-1.00000000000000))*(cj3)*(x1166)))+(((IkReal(0.300000000000000))*(sj3)*(x1165))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1167=IKabs(py);
IkReal x1168=((IkReal(0.0450000000000000))*(sj3));
IkReal x1169=((IkReal(0.300000000000000))*(cj3));
IkReal x1170=((x1168)+(x1169));
evalcond[0]=((IKabs(((x1167)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))))))+(IKabs(((x1167)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1170))));
evalcond[3]=((IkReal(0.550000000000000))+(x1170)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1171=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1171)))+(((IkReal(11.1111111111111))*(pp)*(x1171)))+(((IkReal(2.36111111111111))*(x1171))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1172=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1173=((IkReal(0.0450000000000000))*(x1172));
sj0array[0]=((x1173)+(((IkReal(-1.00000000000000))*(cj3)*(x1173)))+(((IkReal(0.300000000000000))*(sj3)*(x1172))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1174=IKabs(py);
IkReal x1175=((IkReal(0.0450000000000000))*(sj3));
IkReal x1176=((IkReal(0.300000000000000))*(cj3));
IkReal x1177=((x1176)+(x1175));
evalcond[0]=((IKabs(((x1174)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))))))+(IKabs(((x1174)+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1177))));
evalcond[3]=((IkReal(0.550000000000000))+(x1177)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1178=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1178)))+(((IkReal(11.1111111111111))*(pp)*(x1178)))+(((IkReal(2.36111111111111))*(x1178))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1179=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1180=((IkReal(0.0450000000000000))*(x1179));
sj0array[0]=((x1180)+(((IkReal(-1.00000000000000))*(cj3)*(x1180)))+(((IkReal(0.300000000000000))*(sj3)*(x1179))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1181=((px)*(sj3));
IkReal x1182=((IkReal(0.300000000000000))*(cj3));
IkReal x1183=((IkReal(0.300000000000000))*(sj1));
IkReal x1184=((py)*(sj3));
IkReal x1185=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x1186=((IkReal(0.0450000000000000))*(py)*(sj1));
IkReal x1187=((IkReal(0.0450000000000000))*(px)*(sj1));
Atan2Value<IkReal> x1188 = IKatan2WithCheck(((gconst17)*(((x1187)+(((py)*(x1182)))+(((IkReal(-1.00000000000000))*(py)*(x1185)))+(((IkReal(-1.00000000000000))*(cj3)*(x1187)))+(((IkReal(0.0450000000000000))*(x1184)))+(((x1181)*(x1183)))+(((IkReal(0.550000000000000))*(py)))))),((gconst17)*(((((IkReal(-1.00000000000000))*(x1186)))+(((IkReal(0.0450000000000000))*(x1181)))+(((px)*(x1182)))+(((IkReal(-1.00000000000000))*(x1183)*(x1184)))+(((IkReal(-1.00000000000000))*(px)*(x1185)))+(((cj3)*(x1186)))+(((IkReal(0.550000000000000))*(px)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1188.valid ) {
    continue;
}
j0array[0]=x1188.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1189=IKsin(j0);
IkReal x1190=IKcos(j0);
IkReal x1191=((IkReal(0.300000000000000))*(cj3));
IkReal x1192=((IkReal(0.0450000000000000))*(sj3));
IkReal x1193=((IkReal(1.00000000000000))*(py));
IkReal x1194=((cj1)*(pz));
IkReal x1195=((px)*(x1189));
IkReal x1196=((px)*(x1190));
IkReal x1197=((py)*(sj1)*(x1189));
evalcond[0]=((IkReal(-0.550000000000000))+(x1194)+(x1197)+(((IkReal(-1.00000000000000))*(x1192)))+(((IkReal(-1.00000000000000))*(x1191)))+(((sj1)*(x1196))));
evalcond[1]=((IkReal(-0.0450000000000000))+(x1195)+(((IkReal(-1.00000000000000))*(x1190)*(x1193)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1196)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x1189)*(x1193))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1189)*(x1193)))+(((sj1)*(x1192)))+(((sj1)*(x1191)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1196))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1195)))+(((IkReal(-0.0900000000000000))*(py)*(x1190)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1194)))+(((IkReal(1.10000000000000))*(x1197)))+(((IkReal(1.10000000000000))*(sj1)*(x1196))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1198=((IkReal(0.0450000000000000))*(cj1));
IkReal x1199=((pz)*(sj1));
IkReal x1200=((IkReal(0.300000000000000))*(cj1)*(sj3));
Atan2Value<IkReal> x1201 = IKatan2WithCheck(((gconst16)*(((((px)*(x1200)))+(((py)*(x1199)))+(((px)*(x1198)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x1198)))))),((gconst16)*(((((cj3)*(py)*(x1198)))+(((IkReal(-1.00000000000000))*(py)*(x1198)))+(((px)*(x1199)))+(((IkReal(-1.00000000000000))*(py)*(x1200)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1201.valid ) {
    continue;
}
j0array[0]=x1201.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1202=IKsin(j0);
IkReal x1203=IKcos(j0);
IkReal x1204=((IkReal(0.300000000000000))*(cj3));
IkReal x1205=((IkReal(0.0450000000000000))*(sj3));
IkReal x1206=((IkReal(1.00000000000000))*(py));
IkReal x1207=((cj1)*(pz));
IkReal x1208=((px)*(x1202));
IkReal x1209=((px)*(x1203));
IkReal x1210=((py)*(sj1)*(x1202));
evalcond[0]=((IkReal(-0.550000000000000))+(x1207)+(x1210)+(((sj1)*(x1209)))+(((IkReal(-1.00000000000000))*(x1204)))+(((IkReal(-1.00000000000000))*(x1205))));
evalcond[1]=((IkReal(-0.0450000000000000))+(x1208)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1203)*(x1206)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1209)))+(((IkReal(-1.00000000000000))*(cj1)*(x1202)*(x1206)))+(((pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1202)*(x1206)))+(((sj1)*(x1204)))+(((sj1)*(x1205)))+(((IkReal(-1.00000000000000))*(x1209)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x1209)))+(((IkReal(0.0900000000000000))*(x1208)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x1203)))+(((IkReal(1.10000000000000))*(x1207)))+(((IkReal(1.10000000000000))*(x1210))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1211=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1211;
evalcond[3]=x1211;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
IkReal x1212=((IkReal(1.00000000000000))*(sj2));
gconst30=IKsign(((((IkReal(-1.00000000000000))*(x1212)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x1212)*((py)*(py))))));
IkReal x1213=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x1213)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x1213)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1214=(sj2)*(sj2);
IkReal x1215=((cj2)*(sj2));
IkReal x1216=((IkReal(0.300000000000000))*(sj3));
IkReal x1217=((IkReal(0.0450000000000000))*(cj3));
IkReal x1218=((px)*(x1217));
IkReal x1219=((px)*(x1214));
IkReal x1220=((py)*(x1214));
Atan2Value<IkReal> x1221 = IKatan2WithCheck(((gconst30)*(((((IkReal(-1.00000000000000))*(x1214)*(x1218)))+(((IkReal(0.0450000000000000))*(x1219)))+(((py)*(x1215)*(x1217)))+(((x1216)*(x1219)))+(((IkReal(-1.00000000000000))*(py)*(x1215)*(x1216)))+(((IkReal(-0.0450000000000000))*(py)*(x1215)))))),((gconst30)*(((((IkReal(-1.00000000000000))*(px)*(x1215)*(x1216)))+(((x1217)*(x1220)))+(((IkReal(-0.0450000000000000))*(px)*(x1215)))+(((IkReal(-0.0450000000000000))*(x1220)))+(((IkReal(-1.00000000000000))*(x1216)*(x1220)))+(((x1215)*(x1218)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1221.valid ) {
    continue;
}
j0array[0]=x1221.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1222=IKcos(j0);
IkReal x1223=IKsin(j0);
IkReal x1224=((IkReal(0.0450000000000000))*(cj2));
IkReal x1225=((IkReal(0.0900000000000000))*(sj2));
IkReal x1226=((IkReal(0.300000000000000))*(sj3));
IkReal x1227=((IkReal(0.0450000000000000))*(cj3));
IkReal x1228=((IkReal(0.0900000000000000))*(cj2));
IkReal x1229=((IkReal(1.00000000000000))*(cj2));
IkReal x1230=((px)*(x1223));
IkReal x1231=((px)*(x1222));
IkReal x1232=((py)*(x1222));
IkReal x1233=((py)*(x1223));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1232)))+(x1230)+(((sj2)*(x1226)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1227))));
evalcond[1]=((((cj2)*(x1230)))+(((sj2)*(x1231)))+(((sj2)*(x1233)))+(((IkReal(-1.00000000000000))*(x1229)*(x1232))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1226)+(((IkReal(-1.00000000000000))*(x1227)))+(((sj2)*(x1230)))+(((IkReal(-1.00000000000000))*(sj2)*(x1232)))+(((IkReal(-1.00000000000000))*(x1229)*(x1231)))+(((IkReal(-1.00000000000000))*(x1229)*(x1233))));
evalcond[3]=((((cj2)*(x1226)))+(((IkReal(-1.00000000000000))*(x1231)))+(((IkReal(-1.00000000000000))*(x1233)))+(x1224)+(((IkReal(-1.00000000000000))*(cj3)*(x1224))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1225)*(x1230)))+(((x1225)*(x1232)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((x1228)*(x1233)))+(((x1228)*(x1231))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1234=((IkReal(0.0450000000000000))*(px));
IkReal x1235=((cj2)*(py));
IkReal x1236=((IkReal(0.300000000000000))*(sj3));
IkReal x1237=((py)*(sj2));
IkReal x1238=((IkReal(0.0450000000000000))*(cj3)*(py));
Atan2Value<IkReal> x1239 = IKatan2WithCheck(((gconst31)*(((((IkReal(0.0450000000000000))*(x1235)))+(((x1235)*(x1236)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x1236)))+(((cj3)*(sj2)*(x1234)))+(((IkReal(-0.0450000000000000))*(cj3)*(x1235)))+(((IkReal(-1.00000000000000))*(sj2)*(x1234)))))),((gconst31)*(((((cj2)*(x1234)))+(((IkReal(0.0450000000000000))*(x1237)))+(((cj2)*(px)*(x1236)))+(((IkReal(-0.0450000000000000))*(cj3)*(x1237)))+(((IkReal(-1.00000000000000))*(cj2)*(cj3)*(x1234)))+(((x1236)*(x1237)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1239.valid ) {
    continue;
}
j0array[0]=x1239.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1240=IKcos(j0);
IkReal x1241=IKsin(j0);
IkReal x1242=((IkReal(0.0450000000000000))*(cj2));
IkReal x1243=((IkReal(0.0900000000000000))*(sj2));
IkReal x1244=((IkReal(0.300000000000000))*(sj3));
IkReal x1245=((IkReal(0.0450000000000000))*(cj3));
IkReal x1246=((IkReal(0.0900000000000000))*(cj2));
IkReal x1247=((IkReal(1.00000000000000))*(cj2));
IkReal x1248=((px)*(x1241));
IkReal x1249=((px)*(x1240));
IkReal x1250=((py)*(x1240));
IkReal x1251=((py)*(x1241));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x1245)))+(x1248)+(((sj2)*(x1244)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x1250))));
evalcond[1]=((((sj2)*(x1249)))+(((IkReal(-1.00000000000000))*(x1247)*(x1250)))+(((cj2)*(x1248)))+(((sj2)*(x1251))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1244)+(((sj2)*(x1248)))+(((IkReal(-1.00000000000000))*(x1247)*(x1251)))+(((IkReal(-1.00000000000000))*(x1245)))+(((IkReal(-1.00000000000000))*(sj2)*(x1250)))+(((IkReal(-1.00000000000000))*(x1247)*(x1249))));
evalcond[3]=((x1242)+(((IkReal(-1.00000000000000))*(x1249)))+(((IkReal(-1.00000000000000))*(cj3)*(x1242)))+(((IkReal(-1.00000000000000))*(x1251)))+(((cj2)*(x1244))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1246)*(x1251)))+(((x1243)*(x1250)))+(((IkReal(-1.00000000000000))*(x1243)*(x1248)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1246)*(x1249)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1252=((IkReal(0.0450000000000000))*(sj3));
IkReal x1253=((IkReal(0.300000000000000))*(cj3));
IkReal x1254=((x1252)+(x1253));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1254)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1254)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((sj2)*((px)*(px))))+(((sj2)*((py)*(py))))));
dummyeval[0]=((((sj2)*((px)*(px))))+(((sj2)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1255=(sj2)*(sj2);
IkReal x1256=((cj2)*(sj2));
IkReal x1257=((IkReal(0.300000000000000))*(sj3));
IkReal x1258=((IkReal(0.0450000000000000))*(py));
IkReal x1259=((IkReal(0.0450000000000000))*(cj3)*(px));
IkReal x1260=((px)*(x1255));
IkReal x1261=((x1255)*(x1258));
Atan2Value<IkReal> x1262 = IKatan2WithCheck(((gconst33)*(((((IkReal(-1.00000000000000))*(py)*(x1256)*(x1257)))+(((IkReal(-0.0450000000000000))*(x1260)))+(((IkReal(-1.00000000000000))*(x1256)*(x1258)))+(((IkReal(-1.00000000000000))*(x1257)*(x1260)))+(((x1255)*(x1259)))+(((cj3)*(x1256)*(x1258)))))),((gconst33)*(((x1261)+(((IkReal(-1.00000000000000))*(cj3)*(x1261)))+(((x1256)*(x1259)))+(((py)*(x1255)*(x1257)))+(((IkReal(-1.00000000000000))*(px)*(x1256)*(x1257)))+(((IkReal(-0.0450000000000000))*(px)*(x1256)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1262.valid ) {
    continue;
}
j0array[0]=x1262.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1263=IKsin(j0);
IkReal x1264=IKcos(j0);
IkReal x1265=((IkReal(0.0450000000000000))*(cj2));
IkReal x1266=((IkReal(0.0900000000000000))*(sj2));
IkReal x1267=((IkReal(0.300000000000000))*(sj3));
IkReal x1268=((IkReal(0.0450000000000000))*(cj3));
IkReal x1269=((IkReal(1.00000000000000))*(sj2));
IkReal x1270=((IkReal(0.0900000000000000))*(cj2));
IkReal x1271=((px)*(x1263));
IkReal x1272=((px)*(x1264));
IkReal x1273=((py)*(x1264));
IkReal x1274=((py)*(x1263));
evalcond[0]=((x1271)+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1268)))+(((IkReal(-1.00000000000000))*(x1273)))+(((sj2)*(x1267))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1269)*(x1272)))+(((IkReal(-1.00000000000000))*(x1269)*(x1274)))+(((IkReal(-1.00000000000000))*(cj2)*(x1273)))+(((cj2)*(x1271))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1267)+(((sj2)*(x1271)))+(((IkReal(-1.00000000000000))*(x1269)*(x1273)))+(((cj2)*(x1272)))+(((cj2)*(x1274)))+(((IkReal(-1.00000000000000))*(x1268))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x1267)))+(((cj3)*(x1265)))+(((IkReal(-1.00000000000000))*(x1272)))+(((IkReal(-1.00000000000000))*(x1274)))+(((IkReal(-1.00000000000000))*(x1265))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1270)*(x1274)))+(((IkReal(-1.00000000000000))*(x1270)*(x1272)))+(((IkReal(-1.00000000000000))*(x1266)*(x1271)))+(((x1266)*(x1273)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1275=((px)*(sj2));
IkReal x1276=((IkReal(0.300000000000000))*(sj3));
IkReal x1277=((cj2)*(py));
IkReal x1278=((py)*(sj2));
IkReal x1279=((IkReal(0.0450000000000000))*(cj3)*(py));
IkReal x1280=((IkReal(0.0450000000000000))*(cj2)*(px));
Atan2Value<IkReal> x1281 = IKatan2WithCheck(((gconst32)*(((((IkReal(-1.00000000000000))*(x1275)*(x1276)))+(((IkReal(-1.00000000000000))*(x1276)*(x1277)))+(((IkReal(-0.0450000000000000))*(x1277)))+(((IkReal(-0.0450000000000000))*(x1275)))+(((IkReal(0.0450000000000000))*(cj3)*(x1275)))+(((IkReal(0.0450000000000000))*(cj3)*(x1277)))))),((gconst32)*(((((x1276)*(x1278)))+(((IkReal(0.0450000000000000))*(x1278)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x1276)))+(((IkReal(-1.00000000000000))*(x1280)))+(((cj3)*(x1280)))+(((IkReal(-0.0450000000000000))*(cj3)*(x1278)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1281.valid ) {
    continue;
}
j0array[0]=x1281.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1282=IKsin(j0);
IkReal x1283=IKcos(j0);
IkReal x1284=((IkReal(0.0450000000000000))*(cj2));
IkReal x1285=((IkReal(0.0900000000000000))*(sj2));
IkReal x1286=((IkReal(0.300000000000000))*(sj3));
IkReal x1287=((IkReal(0.0450000000000000))*(cj3));
IkReal x1288=((IkReal(1.00000000000000))*(sj2));
IkReal x1289=((IkReal(0.0900000000000000))*(cj2));
IkReal x1290=((px)*(x1282));
IkReal x1291=((px)*(x1283));
IkReal x1292=((py)*(x1283));
IkReal x1293=((py)*(x1282));
evalcond[0]=((x1290)+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1286)))+(((IkReal(-1.00000000000000))*(x1292)))+(((IkReal(-1.00000000000000))*(sj2)*(x1287))));
evalcond[1]=((((cj2)*(x1290)))+(((IkReal(-1.00000000000000))*(x1288)*(x1293)))+(((IkReal(-1.00000000000000))*(x1288)*(x1291)))+(((IkReal(-1.00000000000000))*(cj2)*(x1292))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1286)+(((sj2)*(x1290)))+(((cj2)*(x1293)))+(((cj2)*(x1291)))+(((IkReal(-1.00000000000000))*(x1288)*(x1292)))+(((IkReal(-1.00000000000000))*(x1287))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x1286)))+(((IkReal(-1.00000000000000))*(x1293)))+(((IkReal(-1.00000000000000))*(x1291)))+(((IkReal(-1.00000000000000))*(x1284)))+(((cj3)*(x1284))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1289)*(x1293)))+(((IkReal(-1.00000000000000))*(x1289)*(x1291)))+(((x1285)*(x1292)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1285)*(x1290))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1294=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1294;
evalcond[3]=x1294;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1295=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x1295)))+(((IkReal(2.36111111111111))*(x1295)))+(((IkReal(-12.2222222222222))*(pz)*(x1295))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1296=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1297=((IkReal(0.0450000000000000))*(x1296));
cj0array[0]=((x1297)+(((IkReal(0.300000000000000))*(sj3)*(x1296)))+(((IkReal(-1.00000000000000))*(cj3)*(x1297))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1298=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1298;
evalcond[3]=x1298;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1299=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x1299)))+(((IkReal(2.36111111111111))*(x1299)))+(((IkReal(-12.2222222222222))*(pz)*(x1299))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1300=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1301=((IkReal(0.0450000000000000))*(x1300));
cj0array[0]=((x1301)+(((IkReal(0.300000000000000))*(sj3)*(x1300)))+(((IkReal(-1.00000000000000))*(cj3)*(x1301))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1302=((IkReal(3.14159265358979))+(j1));
IkReal x1303=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(x1302, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x1302)+(((IkReal(-2.00000000000000))*(atan(htj1))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1303;
evalcond[3]=x1303;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1304=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x1304)))+(((IkReal(2.36111111111111))*(x1304)))+(((IkReal(-12.2222222222222))*(pz)*(x1304))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1305=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1306=((IkReal(0.0450000000000000))*(x1305));
cj0array[0]=((x1306)+(((IkReal(0.300000000000000))*(sj3)*(x1305)))+(((IkReal(-1.00000000000000))*(cj3)*(x1306))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1307=((IkReal(0.0450000000000000))*(sj3));
IkReal x1308=((IkReal(0.300000000000000))*(cj3));
IkReal x1309=((x1307)+(x1308));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1309)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1309)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1310=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x1310)))+(((IkReal(12.2222222222222))*(pz)*(x1310)))+(((IkReal(11.1111111111111))*(pp)*(x1310))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1311=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1312=((IkReal(0.0450000000000000))*(x1311));
cj0array[0]=((x1312)+(((IkReal(0.300000000000000))*(sj3)*(x1311)))+(((IkReal(-1.00000000000000))*(cj3)*(x1312))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1313=((IkReal(0.0450000000000000))*(sj3));
IkReal x1314=((IkReal(0.300000000000000))*(cj3));
IkReal x1315=((x1314)+(x1313));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1315)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1315)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1316=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x1316)))+(((IkReal(12.2222222222222))*(pz)*(x1316)))+(((IkReal(11.1111111111111))*(pp)*(x1316))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1317=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1318=((IkReal(0.0450000000000000))*(x1317));
cj0array[0]=((x1318)+(((IkReal(0.300000000000000))*(sj3)*(x1317)))+(((IkReal(-1.00000000000000))*(cj3)*(x1318))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1319=((IkReal(0.0450000000000000))*(sj3));
IkReal x1320=((IkReal(0.300000000000000))*(cj3));
IkReal x1321=((x1319)+(x1320));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1321)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1321)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1322=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x1322)))+(((IkReal(12.2222222222222))*(pz)*(x1322)))+(((IkReal(11.1111111111111))*(pp)*(x1322))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1323=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1324=((IkReal(0.0450000000000000))*(x1323));
cj0array[0]=((x1324)+(((IkReal(-1.00000000000000))*(cj3)*(x1324)))+(((IkReal(0.300000000000000))*(sj3)*(x1323))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1325=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
if( IKabs(((x1325)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1325)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1325)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))))+IKsqr(((x1325)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1325)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))), ((x1325)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1326=IKsin(j0);
IkReal x1327=IKcos(j0);
IkReal x1328=((cj1)*(pz));
IkReal x1329=((IkReal(0.300000000000000))*(cj3));
IkReal x1330=((IkReal(0.0450000000000000))*(sj3));
IkReal x1331=((py)*(x1326));
IkReal x1332=((py)*(x1327));
evalcond[0]=((IkReal(-0.550000000000000))+(x1328)+(((IkReal(-1.00000000000000))*(x1329)))+(((sj1)*(x1331)))+(((IkReal(-1.00000000000000))*(x1330))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1332)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x1331)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1331)))+(((sj1)*(x1330)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x1329))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1332)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1328)))+(((IkReal(1.10000000000000))*(sj1)*(x1331))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1333=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
if( IKabs(((pz)*(sj1)*(x1333)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1333)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((pz)*(sj1)*(x1333)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((x1333)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((pz)*(sj1)*(x1333)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((x1333)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1334=IKsin(j0);
IkReal x1335=IKcos(j0);
IkReal x1336=((cj1)*(pz));
IkReal x1337=((IkReal(0.300000000000000))*(cj3));
IkReal x1338=((IkReal(0.0450000000000000))*(sj3));
IkReal x1339=((py)*(x1334));
IkReal x1340=((py)*(x1335));
evalcond[0]=((IkReal(-0.550000000000000))+(x1336)+(((sj1)*(x1339)))+(((IkReal(-1.00000000000000))*(x1337)))+(((IkReal(-1.00000000000000))*(x1338))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1340))));
evalcond[2]=((((cj1)*(x1339)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1339)))+(((sj1)*(x1337)))+(((sj1)*(x1338)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1340)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1336)))+(((IkReal(1.10000000000000))*(sj1)*(x1339))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
Atan2Value<IkReal> x1341 = IKatan2WithCheck(((gconst34)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1)))))),((gconst34)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1341.valid ) {
    continue;
}
j0array[0]=x1341.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1342=IKsin(j0);
IkReal x1343=IKcos(j0);
IkReal x1344=((cj1)*(pz));
IkReal x1345=((IkReal(0.300000000000000))*(cj3));
IkReal x1346=((IkReal(0.0450000000000000))*(sj3));
IkReal x1347=((py)*(x1342));
IkReal x1348=((py)*(x1343));
evalcond[0]=((IkReal(-0.550000000000000))+(x1344)+(((sj1)*(x1347)))+(((IkReal(-1.00000000000000))*(x1345)))+(((IkReal(-1.00000000000000))*(x1346))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1348))));
evalcond[2]=((((cj1)*(x1347)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((sj1)*(x1345)))+(((sj1)*(x1346)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1347))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1348)))+(((IkReal(1.10000000000000))*(x1344)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(sj1)*(x1347))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(py);
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1349=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1349;
evalcond[3]=x1349;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1350=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1350)))+(((IkReal(12.2222222222222))*(pz)*(x1350)))+(((IkReal(-2.36111111111111))*(x1350))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1351=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1352=((IkReal(0.0450000000000000))*(x1351));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1352)))+(((IkReal(-0.300000000000000))*(sj3)*(x1351)))+(((cj3)*(x1352))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1353=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1353;
evalcond[3]=x1353;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1354=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1354)))+(((IkReal(12.2222222222222))*(pz)*(x1354)))+(((IkReal(-2.36111111111111))*(x1354))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1355=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1356=((IkReal(0.0450000000000000))*(x1355));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1356)))+(((IkReal(-0.300000000000000))*(sj3)*(x1355)))+(((cj3)*(x1356))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1357=((IkReal(3.14159265358979))+(j1));
IkReal x1358=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x1357)+(((IkReal(-2.00000000000000))*(atan(htj1))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(x1357, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1358;
evalcond[3]=x1358;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1359=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1359)))+(((IkReal(12.2222222222222))*(pz)*(x1359)))+(((IkReal(-2.36111111111111))*(x1359))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1360=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1361=((IkReal(0.0450000000000000))*(x1360));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1360)))+(((cj3)*(x1361)))+(((IkReal(-1.00000000000000))*(x1361))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1362=((IkReal(0.0450000000000000))*(sj3));
IkReal x1363=((IkReal(0.300000000000000))*(cj3));
IkReal x1364=((x1362)+(x1363));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1364))));
evalcond[3]=((IkReal(0.550000000000000))+(x1364)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1365=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x1365)))+(((IkReal(-12.2222222222222))*(pz)*(x1365)))+(((IkReal(-11.1111111111111))*(pp)*(x1365))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1366=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1367=((IkReal(0.0450000000000000))*(x1366));
cj0array[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1366)))+(((cj3)*(x1367)))+(((IkReal(-1.00000000000000))*(x1367))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1368=((IkReal(0.0450000000000000))*(sj3));
IkReal x1369=((IkReal(0.300000000000000))*(cj3));
IkReal x1370=((x1368)+(x1369));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1370)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1370)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1371=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1371)))+(((IkReal(-2.36111111111111))*(x1371)))+(((IkReal(-12.2222222222222))*(pz)*(x1371))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1372=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1373=((IkReal(0.0450000000000000))*(x1372));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1373)))+(((cj3)*(x1373)))+(((IkReal(-0.300000000000000))*(sj3)*(x1372))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1374=((IkReal(0.0450000000000000))*(sj3));
IkReal x1375=((IkReal(0.300000000000000))*(cj3));
IkReal x1376=((x1375)+(x1374));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1376)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1376)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1377=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1377)))+(((IkReal(-2.36111111111111))*(x1377)))+(((IkReal(-12.2222222222222))*(pz)*(x1377))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1378=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1379=((IkReal(0.0450000000000000))*(x1378));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1379)))+(((cj3)*(x1379)))+(((IkReal(-0.300000000000000))*(sj3)*(x1378))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1380=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
if( IKabs(((x1380)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1380)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1380)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))))+IKsqr(((x1380)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1380)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))), ((x1380)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1381=IKsin(j0);
IkReal x1382=IKcos(j0);
IkReal x1383=((cj1)*(pz));
IkReal x1384=((IkReal(0.0450000000000000))*(sj3));
IkReal x1385=((IkReal(0.300000000000000))*(cj3));
IkReal x1386=((py)*(x1381));
IkReal x1387=((py)*(x1382));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1385)))+(((IkReal(-1.00000000000000))*(x1384)))+(x1383)+(((sj1)*(x1386))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1387)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1386)))+(((pz)*(sj1))));
evalcond[3]=((((sj1)*(x1385)))+(((sj1)*(x1384)))+(((IkReal(-1.00000000000000))*(x1386)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1387)))+(((IkReal(1.10000000000000))*(x1383)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(sj1)*(x1386))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1388=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
if( IKabs(((pz)*(sj1)*(x1388)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1388)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((pz)*(sj1)*(x1388)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((x1388)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((pz)*(sj1)*(x1388)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((x1388)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1389=IKsin(j0);
IkReal x1390=IKcos(j0);
IkReal x1391=((cj1)*(pz));
IkReal x1392=((IkReal(0.0450000000000000))*(sj3));
IkReal x1393=((IkReal(0.300000000000000))*(cj3));
IkReal x1394=((py)*(x1389));
IkReal x1395=((py)*(x1390));
evalcond[0]=((IkReal(-0.550000000000000))+(x1391)+(((sj1)*(x1394)))+(((IkReal(-1.00000000000000))*(x1392)))+(((IkReal(-1.00000000000000))*(x1393))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1395)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1394)))+(((pz)*(sj1))));
evalcond[3]=((((sj1)*(x1392)))+(((sj1)*(x1393)))+(((IkReal(-1.00000000000000))*(x1394)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1395)))+(((IkReal(1.10000000000000))*(x1391)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(sj1)*(x1394))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
Atan2Value<IkReal> x1396 = IKatan2WithCheck(((gconst35)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1)))))),((gconst35)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1396.valid ) {
    continue;
}
j0array[0]=x1396.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1397=IKsin(j0);
IkReal x1398=IKcos(j0);
IkReal x1399=((cj1)*(pz));
IkReal x1400=((IkReal(0.0450000000000000))*(sj3));
IkReal x1401=((IkReal(0.300000000000000))*(cj3));
IkReal x1402=((py)*(x1397));
IkReal x1403=((py)*(x1398));
evalcond[0]=((IkReal(-0.550000000000000))+(x1399)+(((IkReal(-1.00000000000000))*(x1400)))+(((IkReal(-1.00000000000000))*(x1401)))+(((sj1)*(x1402))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1403)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1402)))+(((pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1402)))+(((sj1)*(x1400)))+(((sj1)*(x1401)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x1402)))+(((IkReal(1.10000000000000))*(x1399)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1403))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1404=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1404;
evalcond[3]=x1404;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign(((((py)*((cj2)*(cj2))))+(((py)*((sj2)*(sj2))))));
dummyeval[0]=((((py)*((cj2)*(cj2))))+(((py)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1405=x1404;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1405;
evalcond[3]=x1405;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1406=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x1406)))+(((IkReal(11.1111111111111))*(pp)*(x1406)))+(((IkReal(-12.2222222222222))*(pz)*(x1406))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1407=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1408=((IkReal(0.0450000000000000))*(x1407));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x1407)))+(((IkReal(-1.00000000000000))*(cj3)*(x1408)))+(x1408));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1409=x1404;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1409;
evalcond[3]=x1409;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1410=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1410)))+(((IkReal(11.1111111111111))*(pp)*(x1410)))+(((IkReal(2.36111111111111))*(x1410))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1411=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1412=((IkReal(0.0450000000000000))*(x1411));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1412)))+(x1412)+(((IkReal(0.300000000000000))*(sj3)*(x1411))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1413=x1404;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1413;
evalcond[3]=x1413;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1414=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1414)))+(((IkReal(12.2222222222222))*(pz)*(x1414)))+(((IkReal(-2.36111111111111))*(x1414))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1415=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1416=((IkReal(0.0450000000000000))*(x1415));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1416)))+(((IkReal(-0.300000000000000))*(sj3)*(x1415)))+(((cj3)*(x1416))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1417=x1404;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1417;
evalcond[3]=x1417;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1418=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1418)))+(((IkReal(12.2222222222222))*(pz)*(x1418)))+(((IkReal(-2.36111111111111))*(x1418))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1419=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1420=((IkReal(0.0450000000000000))*(x1419));
cj0array[0]=((((cj3)*(x1420)))+(((IkReal(-0.300000000000000))*(sj3)*(x1419)))+(((IkReal(-1.00000000000000))*(x1420))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1421=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1422=((IkReal(0.0450000000000000))*(cj2));
IkReal x1423=((IkReal(0.300000000000000))*(cj2)*(sj3));
if( IKabs(((x1421)*(((x1423)+(x1422)+(((IkReal(-1.00000000000000))*(cj3)*(x1422))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1421)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1422)))+(((sj2)*(x1422)))+(((sj2)*(x1423))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1421)*(((x1423)+(x1422)+(((IkReal(-1.00000000000000))*(cj3)*(x1422)))))))+IKsqr(((x1421)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1422)))+(((sj2)*(x1422)))+(((sj2)*(x1423)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1421)*(((x1423)+(x1422)+(((IkReal(-1.00000000000000))*(cj3)*(x1422)))))), ((x1421)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1422)))+(((sj2)*(x1422)))+(((sj2)*(x1423)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1424=IKcos(j0);
IkReal x1425=IKsin(j0);
IkReal x1426=((IkReal(0.0450000000000000))*(cj2));
IkReal x1427=((IkReal(0.300000000000000))*(sj3));
IkReal x1428=((IkReal(1.00000000000000))*(py));
IkReal x1429=((IkReal(0.0450000000000000))*(cj3));
IkReal x1430=((py)*(x1425));
IkReal x1431=((py)*(sj2)*(x1424));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1424)*(x1428)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1429)))+(((sj2)*(x1427))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(x1424)*(x1428)))+(((sj2)*(x1430))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x1424)*(x1428)))+(x1427)+(((IkReal(-1.00000000000000))*(x1429)))+(((IkReal(-1.00000000000000))*(cj2)*(x1425)*(x1428))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1425)*(x1428)))+(((cj2)*(x1427)))+(x1426)+(((IkReal(-1.00000000000000))*(cj3)*(x1426))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1431)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(cj2)*(x1430))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1432=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1433=((IkReal(0.0450000000000000))*(sj2));
IkReal x1434=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x1435=((cj3)*(x1433));
if( IKabs(((x1432)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1435)))+(((cj2)*(x1434)))+(((cj2)*(x1433))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1432)*(((((IkReal(-1.00000000000000))*(x1435)))+(x1434)+(x1433))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1432)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1435)))+(((cj2)*(x1434)))+(((cj2)*(x1433)))))))+IKsqr(((x1432)*(((((IkReal(-1.00000000000000))*(x1435)))+(x1434)+(x1433)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1432)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1435)))+(((cj2)*(x1434)))+(((cj2)*(x1433)))))), ((x1432)*(((((IkReal(-1.00000000000000))*(x1435)))+(x1434)+(x1433)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1436=IKcos(j0);
IkReal x1437=IKsin(j0);
IkReal x1438=((IkReal(0.0450000000000000))*(cj2));
IkReal x1439=((IkReal(0.300000000000000))*(sj3));
IkReal x1440=((IkReal(1.00000000000000))*(py));
IkReal x1441=((IkReal(0.0450000000000000))*(cj3));
IkReal x1442=((py)*(x1437));
IkReal x1443=((py)*(sj2)*(x1436));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x1441)))+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1439)))+(((IkReal(-1.00000000000000))*(x1436)*(x1440))));
evalcond[1]=((((sj2)*(x1442)))+(((IkReal(-1.00000000000000))*(cj2)*(x1436)*(x1440))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(x1437)*(x1440)))+(x1439)+(((IkReal(-1.00000000000000))*(x1441)))+(((IkReal(-1.00000000000000))*(sj2)*(x1436)*(x1440))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj3)*(x1438)))+(((IkReal(-1.00000000000000))*(x1437)*(x1440)))+(x1438)+(((cj2)*(x1439))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(cj2)*(x1442)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1443)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1444=((IkReal(0.0450000000000000))*(cj2));
IkReal x1445=((IkReal(0.300000000000000))*(sj3));
IkReal x1446=((IkReal(0.0450000000000000))*(sj2));
Atan2Value<IkReal> x1447 = IKatan2WithCheck(((gconst36)*(((((cj2)*(x1445)))+(x1444)+(((IkReal(-1.00000000000000))*(cj3)*(x1444)))))),((gconst36)*(((x1446)+(((sj2)*(x1445)))+(((IkReal(-1.00000000000000))*(cj3)*(x1446)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1447.valid ) {
    continue;
}
j0array[0]=x1447.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1448=IKcos(j0);
IkReal x1449=IKsin(j0);
IkReal x1450=((IkReal(0.0450000000000000))*(cj2));
IkReal x1451=((IkReal(0.300000000000000))*(sj3));
IkReal x1452=((IkReal(1.00000000000000))*(py));
IkReal x1453=((IkReal(0.0450000000000000))*(cj3));
IkReal x1454=((py)*(x1449));
IkReal x1455=((py)*(sj2)*(x1448));
evalcond[0]=((((sj2)*(x1451)))+(((IkReal(-1.00000000000000))*(x1448)*(x1452)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1453))));
evalcond[1]=((((sj2)*(x1454)))+(((IkReal(-1.00000000000000))*(cj2)*(x1448)*(x1452))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(cj2)*(x1449)*(x1452)))+(((IkReal(-1.00000000000000))*(x1453)))+(x1451)+(((IkReal(-1.00000000000000))*(sj2)*(x1448)*(x1452))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj3)*(x1450)))+(x1450)+(((cj2)*(x1451)))+(((IkReal(-1.00000000000000))*(x1449)*(x1452))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1455)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(cj2)*(x1454))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1456=((IkReal(0.0450000000000000))*(sj3));
IkReal x1457=((IkReal(0.300000000000000))*(cj3));
IkReal x1458=((x1456)+(x1457));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1458)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x1458));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((py)*((cj2)*(cj2))))+(((py)*((sj2)*(sj2))))));
dummyeval[0]=((((py)*((cj2)*(cj2))))+(((py)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1459=((IkReal(0.0450000000000000))*(sj3));
IkReal x1460=((IkReal(0.300000000000000))*(cj3));
IkReal x1461=((x1460)+(x1459));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1461)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x1461));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1462=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x1462)))+(((IkReal(11.1111111111111))*(pp)*(x1462)))+(((IkReal(12.2222222222222))*(pz)*(x1462))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1463=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1464=((IkReal(0.0450000000000000))*(x1463));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1464)))+(x1464)+(((IkReal(0.300000000000000))*(sj3)*(x1463))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1465=((IkReal(0.0450000000000000))*(sj3));
IkReal x1466=((IkReal(0.300000000000000))*(cj3));
IkReal x1467=((x1465)+(x1466));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1467)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x1467));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1468=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(2.36111111111111))*(x1468)))+(((IkReal(11.1111111111111))*(pp)*(x1468)))+(((IkReal(12.2222222222222))*(pz)*(x1468))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1469=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1470=((IkReal(0.0450000000000000))*(x1469));
cj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1470)))+(x1470)+(((IkReal(0.300000000000000))*(sj3)*(x1469))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1471=((IkReal(0.0450000000000000))*(sj3));
IkReal x1472=((IkReal(0.300000000000000))*(cj3));
IkReal x1473=((x1472)+(x1471));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1473))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x1473));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1474=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1474)))+(((IkReal(-2.36111111111111))*(x1474)))+(((IkReal(-12.2222222222222))*(pz)*(x1474))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1475=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1476=((IkReal(0.0450000000000000))*(x1475));
cj0array[0]=((((cj3)*(x1476)))+(((IkReal(-1.00000000000000))*(x1476)))+(((IkReal(-0.300000000000000))*(sj3)*(x1475))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1477=((IkReal(0.0450000000000000))*(sj3));
IkReal x1478=((IkReal(0.300000000000000))*(cj3));
IkReal x1479=((x1477)+(x1478));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1479))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x1479));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1480=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1480)))+(((IkReal(-12.2222222222222))*(pz)*(x1480)))+(((IkReal(-2.36111111111111))*(x1480))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((py)*(IKsin(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1481=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1482=((IkReal(0.0450000000000000))*(x1481));
cj0array[0]=((((cj3)*(x1482)))+(((IkReal(-1.00000000000000))*(x1482)))+(((IkReal(-0.300000000000000))*(sj3)*(x1481))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((py)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1483=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1484=((IkReal(0.0450000000000000))*(cj2));
IkReal x1485=((IkReal(0.300000000000000))*(cj2)*(sj3));
if( IKabs(((x1483)*(((((cj3)*(x1484)))+(((IkReal(-1.00000000000000))*(x1484)))+(((IkReal(-1.00000000000000))*(x1485))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1483)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((sj2)*(x1484)))+(((sj2)*(x1485)))+(((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1484))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1483)*(((((cj3)*(x1484)))+(((IkReal(-1.00000000000000))*(x1484)))+(((IkReal(-1.00000000000000))*(x1485)))))))+IKsqr(((x1483)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((sj2)*(x1484)))+(((sj2)*(x1485)))+(((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1484)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1483)*(((((cj3)*(x1484)))+(((IkReal(-1.00000000000000))*(x1484)))+(((IkReal(-1.00000000000000))*(x1485)))))), ((x1483)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((sj2)*(x1484)))+(((sj2)*(x1485)))+(((IkReal(-1.00000000000000))*(cj3)*(sj2)*(x1484)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1486=IKcos(j0);
IkReal x1487=IKsin(j0);
IkReal x1488=((IkReal(0.0450000000000000))*(cj2));
IkReal x1489=((IkReal(0.300000000000000))*(sj3));
IkReal x1490=((IkReal(1.00000000000000))*(py));
IkReal x1491=((IkReal(0.0450000000000000))*(cj3));
IkReal x1492=((py)*(sj2)*(x1486));
IkReal x1493=((cj2)*(py)*(x1487));
evalcond[0]=((((sj2)*(x1489)))+(((IkReal(-1.00000000000000))*(x1486)*(x1490)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1491))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x1487)*(x1490)))+(((IkReal(-1.00000000000000))*(cj2)*(x1486)*(x1490))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1491)))+(((IkReal(-1.00000000000000))*(sj2)*(x1486)*(x1490)))+(x1493)+(x1489));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x1489)))+(((cj3)*(x1488)))+(((IkReal(-1.00000000000000))*(x1487)*(x1490)))+(((IkReal(-1.00000000000000))*(x1488))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x1492)))+(((IkReal(-0.0900000000000000))*(x1493)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1494=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x1495=((IkReal(0.0450000000000000))*(sj2));
IkReal x1496=((IkReal(0.300000000000000))*(sj2)*(sj3));
if( IKabs(((x1494)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1496)))+(((IkReal(-1.00000000000000))*(cj2)*(x1495)))+(((cj2)*(cj3)*(x1495))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1494)*(((((IkReal(-1.00000000000000))*(cj3)*(x1495)))+(x1495)+(x1496))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1494)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1496)))+(((IkReal(-1.00000000000000))*(cj2)*(x1495)))+(((cj2)*(cj3)*(x1495)))))))+IKsqr(((x1494)*(((((IkReal(-1.00000000000000))*(cj3)*(x1495)))+(x1495)+(x1496)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1494)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1496)))+(((IkReal(-1.00000000000000))*(cj2)*(x1495)))+(((cj2)*(cj3)*(x1495)))))), ((x1494)*(((((IkReal(-1.00000000000000))*(cj3)*(x1495)))+(x1495)+(x1496)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1497=IKcos(j0);
IkReal x1498=IKsin(j0);
IkReal x1499=((IkReal(0.0450000000000000))*(cj2));
IkReal x1500=((IkReal(0.300000000000000))*(sj3));
IkReal x1501=((IkReal(1.00000000000000))*(py));
IkReal x1502=((IkReal(0.0450000000000000))*(cj3));
IkReal x1503=((py)*(sj2)*(x1497));
IkReal x1504=((cj2)*(py)*(x1498));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x1502)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x1497)*(x1501)))+(((sj2)*(x1500))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(x1497)*(x1501)))+(((IkReal(-1.00000000000000))*(sj2)*(x1498)*(x1501))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1502)))+(x1500)+(x1504)+(((IkReal(-1.00000000000000))*(sj2)*(x1497)*(x1501))));
evalcond[3]=((((cj3)*(x1499)))+(((IkReal(-1.00000000000000))*(x1498)*(x1501)))+(((IkReal(-1.00000000000000))*(x1499)))+(((IkReal(-1.00000000000000))*(cj2)*(x1500))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1504)))+(((IkReal(0.0900000000000000))*(x1503)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1505=((IkReal(0.0450000000000000))*(cj2));
IkReal x1506=((IkReal(0.300000000000000))*(sj3));
IkReal x1507=((IkReal(0.0450000000000000))*(sj2));
Atan2Value<IkReal> x1508 = IKatan2WithCheck(((gconst37)*(((((IkReal(-1.00000000000000))*(x1505)))+(((cj3)*(x1505)))+(((IkReal(-1.00000000000000))*(cj2)*(x1506)))))),((gconst37)*(((x1507)+(((IkReal(-1.00000000000000))*(cj3)*(x1507)))+(((sj2)*(x1506)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1508.valid ) {
    continue;
}
j0array[0]=x1508.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1509=IKcos(j0);
IkReal x1510=IKsin(j0);
IkReal x1511=((IkReal(0.0450000000000000))*(cj2));
IkReal x1512=((IkReal(0.300000000000000))*(sj3));
IkReal x1513=((IkReal(1.00000000000000))*(py));
IkReal x1514=((IkReal(0.0450000000000000))*(cj3));
IkReal x1515=((py)*(sj2)*(x1509));
IkReal x1516=((cj2)*(py)*(x1510));
evalcond[0]=((((sj2)*(x1512)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x1509)*(x1513)))+(((IkReal(-1.00000000000000))*(sj2)*(x1514))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x1510)*(x1513)))+(((IkReal(-1.00000000000000))*(cj2)*(x1509)*(x1513))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1514)))+(((IkReal(-1.00000000000000))*(sj2)*(x1509)*(x1513)))+(x1516)+(x1512));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1511)))+(((cj3)*(x1511)))+(((IkReal(-1.00000000000000))*(x1510)*(x1513)))+(((IkReal(-1.00000000000000))*(cj2)*(x1512))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1516)))+(((IkReal(0.0900000000000000))*(x1515)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1517=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1517;
evalcond[3]=x1517;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1518=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1518)))+(((IkReal(-11.1111111111111))*(pp)*(x1518)))+(((IkReal(-2.36111111111111))*(x1518))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1519=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1520=((IkReal(0.0450000000000000))*(x1519));
sj0array[0]=((((IkReal(-1.00000000000000))*(x1520)))+(((cj3)*(x1520)))+(((IkReal(-0.300000000000000))*(sj3)*(x1519))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1521=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1521;
evalcond[3]=x1521;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1522=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1522)))+(((IkReal(-2.36111111111111))*(x1522)))+(((IkReal(12.2222222222222))*(pz)*(x1522))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1523=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1524=((IkReal(0.0450000000000000))*(x1523));
sj0array[0]=((((IkReal(-1.00000000000000))*(x1524)))+(((cj3)*(x1524)))+(((IkReal(-0.300000000000000))*(sj3)*(x1523))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1525=((IkReal(3.14159265358979))+(j1));
IkReal x1526=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(x1525, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((((IkReal(-2.00000000000000))*(atan(htj1))))+(x1525)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1526;
evalcond[3]=x1526;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1527=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1527)))+(((IkReal(-2.36111111111111))*(x1527)))+(((IkReal(12.2222222222222))*(pz)*(x1527))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1528=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1529=((IkReal(0.0450000000000000))*(x1528));
sj0array[0]=((((IkReal(-1.00000000000000))*(x1529)))+(((cj3)*(x1529)))+(((IkReal(-0.300000000000000))*(sj3)*(x1528))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1530=((IkReal(0.0450000000000000))*(sj3));
IkReal x1531=((IkReal(0.300000000000000))*(cj3));
IkReal x1532=((x1531)+(x1530));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1532)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1532)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1533=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1533)))+(((IkReal(-2.36111111111111))*(x1533)))+(((IkReal(-12.2222222222222))*(pz)*(x1533))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1534=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1535=((IkReal(0.0450000000000000))*(x1534));
sj0array[0]=((((IkReal(-1.00000000000000))*(x1535)))+(((cj3)*(x1535)))+(((IkReal(-0.300000000000000))*(sj3)*(x1534))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1536=((IkReal(0.0450000000000000))*(sj3));
IkReal x1537=((IkReal(0.300000000000000))*(cj3));
IkReal x1538=((x1537)+(x1536));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1538)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1538)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1539=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1539)))+(((IkReal(-2.36111111111111))*(x1539)))+(((IkReal(-12.2222222222222))*(pz)*(x1539))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1540=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1541=((IkReal(0.0450000000000000))*(x1540));
sj0array[0]=((((cj3)*(x1541)))+(((IkReal(-1.00000000000000))*(x1541)))+(((IkReal(-0.300000000000000))*(sj3)*(x1540))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1542=((IkReal(0.0450000000000000))*(sj3));
IkReal x1543=((IkReal(0.300000000000000))*(cj3));
IkReal x1544=((x1542)+(x1543));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1544))));
evalcond[3]=((IkReal(0.550000000000000))+(x1544)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1545=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1545)))+(((IkReal(-12.2222222222222))*(pz)*(x1545)))+(((IkReal(-2.36111111111111))*(x1545))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1546=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1547=((IkReal(0.0450000000000000))*(x1546));
sj0array[0]=((((cj3)*(x1547)))+(((IkReal(-1.00000000000000))*(x1547)))+(((IkReal(-0.300000000000000))*(sj3)*(x1546))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1548=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
if( IKabs(((x1548)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1548)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1548)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))))+IKsqr(((x1548)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1548)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))), ((x1548)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1549=IKcos(j0);
IkReal x1550=IKsin(j0);
IkReal x1551=((cj1)*(pz));
IkReal x1552=((IkReal(0.300000000000000))*(cj3));
IkReal x1553=((IkReal(0.0450000000000000))*(sj3));
IkReal x1554=((px)*(x1550));
IkReal x1555=((px)*(x1549));
evalcond[0]=((IkReal(-0.550000000000000))+(x1551)+(((sj1)*(x1555)))+(((IkReal(-1.00000000000000))*(x1552)))+(((IkReal(-1.00000000000000))*(x1553))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x1554)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x1555)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1555)))+(((sj1)*(x1552)))+(((sj1)*(x1553)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1551)))+(((IkReal(-0.0900000000000000))*(x1554)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(sj1)*(x1555))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1556=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
if( IKabs(((x1556)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((pz)*(sj1)*(x1556)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1556)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))))+IKsqr(((pz)*(sj1)*(x1556)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1556)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))), ((pz)*(sj1)*(x1556)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1557=IKcos(j0);
IkReal x1558=IKsin(j0);
IkReal x1559=((cj1)*(pz));
IkReal x1560=((IkReal(0.300000000000000))*(cj3));
IkReal x1561=((IkReal(0.0450000000000000))*(sj3));
IkReal x1562=((px)*(x1558));
IkReal x1563=((px)*(x1557));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x1563)))+(x1559)+(((IkReal(-1.00000000000000))*(x1561)))+(((IkReal(-1.00000000000000))*(x1560))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x1562)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x1563)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((sj1)*(x1561)))+(((sj1)*(x1560)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1563))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1562)))+(((IkReal(1.10000000000000))*(x1559)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(sj1)*(x1563))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
Atan2Value<IkReal> x1564 = IKatan2WithCheck(((gconst38)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))),((gconst38)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1564.valid ) {
    continue;
}
j0array[0]=x1564.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1565=IKcos(j0);
IkReal x1566=IKsin(j0);
IkReal x1567=((cj1)*(pz));
IkReal x1568=((IkReal(0.300000000000000))*(cj3));
IkReal x1569=((IkReal(0.0450000000000000))*(sj3));
IkReal x1570=((px)*(x1566));
IkReal x1571=((px)*(x1565));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x1571)))+(x1567)+(((IkReal(-1.00000000000000))*(x1569)))+(((IkReal(-1.00000000000000))*(x1568))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x1570)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x1571)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((sj1)*(x1569)))+(((sj1)*(x1568)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1571))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1570)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1567)))+(((IkReal(1.10000000000000))*(sj1)*(x1571))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(px);
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1572=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1572;
evalcond[3]=x1572;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1573=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1573)))+(((IkReal(-12.2222222222222))*(pz)*(x1573)))+(((IkReal(11.1111111111111))*(pp)*(x1573))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1574=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1575=((IkReal(0.0450000000000000))*(x1574));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x1574)))+(x1575)+(((IkReal(-1.00000000000000))*(cj3)*(x1575))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1576=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1576;
evalcond[3]=x1576;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1577=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(2.36111111111111))*(x1577)))+(((IkReal(-12.2222222222222))*(pz)*(x1577)))+(((IkReal(11.1111111111111))*(pp)*(x1577))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1578=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1579=((IkReal(0.0450000000000000))*(x1578));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x1578)))+(x1579)+(((IkReal(-1.00000000000000))*(cj3)*(x1579))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1580=((IkReal(3.14159265358979))+(j1));
IkReal x1581=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(x1580, IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((((IkReal(-2.00000000000000))*(atan(htj1))))+(x1580)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1581;
evalcond[3]=x1581;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1582=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-12.2222222222222))*(pz)*(x1582)))+(((IkReal(2.36111111111111))*(x1582)))+(((IkReal(11.1111111111111))*(pp)*(x1582))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1583=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1584=((IkReal(0.0450000000000000))*(x1583));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x1583)))+(x1584)+(((IkReal(-1.00000000000000))*(cj3)*(x1584))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1585=((IkReal(0.0450000000000000))*(sj3));
IkReal x1586=((IkReal(0.300000000000000))*(cj3));
IkReal x1587=((x1586)+(x1585));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1587)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1587)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1588=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1588)))+(((IkReal(2.36111111111111))*(x1588)))+(((IkReal(11.1111111111111))*(pp)*(x1588))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1589=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1590=((IkReal(0.0450000000000000))*(x1589));
sj0array[0]=((((IkReal(-1.00000000000000))*(cj3)*(x1590)))+(((IkReal(0.300000000000000))*(sj3)*(x1589)))+(x1590));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1591=((IkReal(0.0450000000000000))*(sj3));
IkReal x1592=((IkReal(0.300000000000000))*(cj3));
IkReal x1593=((x1591)+(x1592));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1593)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1593)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1594=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1594)))+(((IkReal(2.36111111111111))*(x1594)))+(((IkReal(11.1111111111111))*(pp)*(x1594))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1595=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1596=((IkReal(0.0450000000000000))*(x1595));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x1595)))+(((IkReal(-1.00000000000000))*(cj3)*(x1596)))+(x1596));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1597=((IkReal(0.0450000000000000))*(sj3));
IkReal x1598=((IkReal(0.300000000000000))*(cj3));
IkReal x1599=((x1597)+(x1598));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-2.00000000000000))*(atan(htj1))))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1599)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1599)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1600=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x1600)))+(((IkReal(2.36111111111111))*(x1600)))+(((IkReal(12.2222222222222))*(pz)*(x1600))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1601=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1602=((IkReal(0.0450000000000000))*(x1601));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x1601)))+(x1602)+(((IkReal(-1.00000000000000))*(cj3)*(x1602))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1603=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
if( IKabs(((x1603)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1603)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1603)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))))+IKsqr(((x1603)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1603)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))), ((x1603)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(pz)))+(((IkReal(0.300000000000000))*(cj3)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1604=IKcos(j0);
IkReal x1605=IKsin(j0);
IkReal x1606=((cj1)*(pz));
IkReal x1607=((IkReal(0.0450000000000000))*(sj3));
IkReal x1608=((IkReal(0.300000000000000))*(cj3));
IkReal x1609=((px)*(x1605));
IkReal x1610=((px)*(x1604));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1608)))+(((IkReal(-1.00000000000000))*(x1607)))+(x1606)+(((sj1)*(x1610))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x1609)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1610)))+(((pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1610)))+(((sj1)*(x1607)))+(((sj1)*(x1608)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1609)))+(((IkReal(1.10000000000000))*(x1606)))+(((IkReal(1.10000000000000))*(sj1)*(x1610))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1611=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
if( IKabs(((x1611)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((pz)*(sj1)*(x1611)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1611)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))))+IKsqr(((pz)*(sj1)*(x1611)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1611)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))), ((pz)*(sj1)*(x1611)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1612=IKcos(j0);
IkReal x1613=IKsin(j0);
IkReal x1614=((cj1)*(pz));
IkReal x1615=((IkReal(0.0450000000000000))*(sj3));
IkReal x1616=((IkReal(0.300000000000000))*(cj3));
IkReal x1617=((px)*(x1613));
IkReal x1618=((px)*(x1612));
evalcond[0]=((IkReal(-0.550000000000000))+(x1614)+(((IkReal(-1.00000000000000))*(x1615)))+(((IkReal(-1.00000000000000))*(x1616)))+(((sj1)*(x1618))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x1617)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1618)))+(((pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1618)))+(((sj1)*(x1615)))+(((sj1)*(x1616)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1614)))+(((IkReal(0.0900000000000000))*(x1617)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(sj1)*(x1618))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
Atan2Value<IkReal> x1619 = IKatan2WithCheck(((gconst39)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))),((gconst39)*(((((IkReal(0.0450000000000000))*(sj1)*(sj3)))+(((IkReal(0.300000000000000))*(cj3)*(sj1)))+(((IkReal(0.550000000000000))*(sj1)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1619.valid ) {
    continue;
}
j0array[0]=x1619.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1620=IKcos(j0);
IkReal x1621=IKsin(j0);
IkReal x1622=((cj1)*(pz));
IkReal x1623=((IkReal(0.0450000000000000))*(sj3));
IkReal x1624=((IkReal(0.300000000000000))*(cj3));
IkReal x1625=((px)*(x1621));
IkReal x1626=((px)*(x1620));
evalcond[0]=((IkReal(-0.550000000000000))+(x1622)+(((sj1)*(x1626)))+(((IkReal(-1.00000000000000))*(x1623)))+(((IkReal(-1.00000000000000))*(x1624))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x1625)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x1626)))+(((pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1626)))+(((sj1)*(x1624)))+(((sj1)*(x1623)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(sj1)*(x1626)))+(((IkReal(1.10000000000000))*(x1622)))+(((IkReal(0.0900000000000000))*(x1625)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1627=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1627;
evalcond[3]=x1627;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((px)*((sj2)*(sj2))))+(((px)*((cj2)*(cj2))))));
dummyeval[0]=((((px)*((sj2)*(sj2))))+(((px)*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1628=x1627;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1628;
evalcond[3]=x1628;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1629=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1629)))+(((IkReal(-2.36111111111111))*(x1629)))+(((IkReal(12.2222222222222))*(pz)*(x1629))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1630=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1631=((IkReal(0.0450000000000000))*(x1630));
sj0array[0]=((((cj3)*(x1631)))+(((IkReal(-1.00000000000000))*(x1631)))+(((IkReal(-0.300000000000000))*(sj3)*(x1630))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1632=x1627;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1632;
evalcond[3]=x1632;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1633=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(-11.1111111111111))*(pp)*(x1633)))+(((IkReal(-2.36111111111111))*(x1633)))+(((IkReal(12.2222222222222))*(pz)*(x1633))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0450000000000000))+(((px)*(IKsin(j0))))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1634=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1635=((IkReal(0.0450000000000000))*(x1634));
sj0array[0]=((((cj3)*(x1635)))+(((IkReal(-1.00000000000000))*(x1635)))+(((IkReal(-0.300000000000000))*(sj3)*(x1634))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(px)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1636=x1627;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1636;
evalcond[3]=x1636;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1637=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x1637)))+(((IkReal(-12.2222222222222))*(pz)*(x1637)))+(((IkReal(2.36111111111111))*(x1637))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1638=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1639=((IkReal(0.0450000000000000))*(x1638));
sj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x1638)))+(x1639)+(((IkReal(-1.00000000000000))*(cj3)*(x1639))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1640=x1627;
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1640;
evalcond[3]=x1640;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1641=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
sj0array[0]=((((IkReal(11.1111111111111))*(pp)*(x1641)))+(((IkReal(-12.2222222222222))*(pz)*(x1641)))+(((IkReal(2.36111111111111))*(x1641))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((px)*(IKsin(j0))))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1642=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1643=((IkReal(0.0450000000000000))*(x1642));
sj0array[0]=((x1643)+(((IkReal(0.300000000000000))*(sj3)*(x1642)))+(((IkReal(-1.00000000000000))*(cj3)*(x1643))));
if( sj0array[0] >= -1-IKFAST_SINCOS_THRESH && sj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKasin(sj0array[0]);
    cj0array[0] = IKcos(j0array[0]);
    sj0array[1] = sj0array[0];
    j0array[1] = j0array[0] > 0 ? (IKPI-j0array[0]) : (-IKPI-j0array[0]);
    cj0array[1] = -cj0array[0];
}
else if( isnan(sj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-1.00000000000000))*(px)*(IKcos(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1644=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1645=((IkReal(0.0450000000000000))*(cj2));
IkReal x1646=((IkReal(0.300000000000000))*(cj2)*(sj3));
if( IKabs(((x1644)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(x1646)))+(((IkReal(-1.00000000000000))*(sj2)*(x1645)))+(((cj3)*(sj2)*(x1645))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1644)*(((x1645)+(x1646)+(((IkReal(-1.00000000000000))*(cj3)*(x1645))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1644)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(x1646)))+(((IkReal(-1.00000000000000))*(sj2)*(x1645)))+(((cj3)*(sj2)*(x1645)))))))+IKsqr(((x1644)*(((x1645)+(x1646)+(((IkReal(-1.00000000000000))*(cj3)*(x1645)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1644)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(x1646)))+(((IkReal(-1.00000000000000))*(sj2)*(x1645)))+(((cj3)*(sj2)*(x1645)))))), ((x1644)*(((x1645)+(x1646)+(((IkReal(-1.00000000000000))*(cj3)*(x1645)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1647=IKsin(j0);
IkReal x1648=IKcos(j0);
IkReal x1649=((IkReal(0.0450000000000000))*(cj2));
IkReal x1650=((IkReal(0.300000000000000))*(sj3));
IkReal x1651=((IkReal(0.0450000000000000))*(cj3));
IkReal x1652=((px)*(x1647));
IkReal x1653=((px)*(x1648));
evalcond[0]=((x1652)+(((IkReal(-1.00000000000000))*(sj2)*(x1651)))+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1650))));
evalcond[1]=((((cj2)*(x1652)))+(((sj2)*(x1653))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1650)+(((sj2)*(x1652)))+(((IkReal(-1.00000000000000))*(x1651)))+(((IkReal(-1.00000000000000))*(cj2)*(x1653))));
evalcond[3]=((x1649)+(((cj2)*(x1650)))+(((IkReal(-1.00000000000000))*(x1653)))+(((IkReal(-1.00000000000000))*(cj3)*(x1649))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(sj2)*(x1652)))+(((IkReal(0.0900000000000000))*(cj2)*(x1653))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1654=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1655=((IkReal(0.0450000000000000))*(sj2));
IkReal x1656=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x1657=((cj3)*(x1655));
if( IKabs(((x1654)*(((x1657)+(((IkReal(-1.00000000000000))*(x1655)))+(((IkReal(-1.00000000000000))*(x1656))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1654)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj2)*(x1655)))+(((cj2)*(x1656)))+(((IkReal(-1.00000000000000))*(cj2)*(x1657))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1654)*(((x1657)+(((IkReal(-1.00000000000000))*(x1655)))+(((IkReal(-1.00000000000000))*(x1656)))))))+IKsqr(((x1654)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj2)*(x1655)))+(((cj2)*(x1656)))+(((IkReal(-1.00000000000000))*(cj2)*(x1657)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1654)*(((x1657)+(((IkReal(-1.00000000000000))*(x1655)))+(((IkReal(-1.00000000000000))*(x1656)))))), ((x1654)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((cj2)*(x1655)))+(((cj2)*(x1656)))+(((IkReal(-1.00000000000000))*(cj2)*(x1657)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1658=IKsin(j0);
IkReal x1659=IKcos(j0);
IkReal x1660=((IkReal(0.0450000000000000))*(cj2));
IkReal x1661=((IkReal(0.300000000000000))*(sj3));
IkReal x1662=((IkReal(0.0450000000000000))*(cj3));
IkReal x1663=((px)*(x1658));
IkReal x1664=((px)*(x1659));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x1662)))+(x1663)+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1661))));
evalcond[1]=((((cj2)*(x1663)))+(((sj2)*(x1664))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1661)+(((sj2)*(x1663)))+(((IkReal(-1.00000000000000))*(x1662)))+(((IkReal(-1.00000000000000))*(cj2)*(x1664))));
evalcond[3]=((x1660)+(((IkReal(-1.00000000000000))*(x1664)))+(((cj2)*(x1661)))+(((IkReal(-1.00000000000000))*(cj3)*(x1660))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(sj2)*(x1663)))+(((IkReal(0.0900000000000000))*(cj2)*(x1664))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1665=((IkReal(0.0450000000000000))*(cj2));
IkReal x1666=((IkReal(0.300000000000000))*(sj3));
IkReal x1667=((IkReal(0.0450000000000000))*(sj2));
Atan2Value<IkReal> x1668 = IKatan2WithCheck(((gconst40)*(((((IkReal(-1.00000000000000))*(sj2)*(x1666)))+(((cj3)*(x1667)))+(((IkReal(-1.00000000000000))*(x1667)))))),((gconst40)*(((x1665)+(((cj2)*(x1666)))+(((IkReal(-1.00000000000000))*(cj3)*(x1665)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1668.valid ) {
    continue;
}
j0array[0]=x1668.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1669=IKsin(j0);
IkReal x1670=IKcos(j0);
IkReal x1671=((IkReal(0.0450000000000000))*(cj2));
IkReal x1672=((IkReal(0.300000000000000))*(sj3));
IkReal x1673=((IkReal(0.0450000000000000))*(cj3));
IkReal x1674=((px)*(x1669));
IkReal x1675=((px)*(x1670));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x1673)))+(x1674)+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1672))));
evalcond[1]=((((cj2)*(x1674)))+(((sj2)*(x1675))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1672)+(((sj2)*(x1674)))+(((IkReal(-1.00000000000000))*(x1673)))+(((IkReal(-1.00000000000000))*(cj2)*(x1675))));
evalcond[3]=((((cj2)*(x1672)))+(x1671)+(((IkReal(-1.00000000000000))*(cj3)*(x1671)))+(((IkReal(-1.00000000000000))*(x1675))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(sj2)*(x1674)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(cj2)*(x1675)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1676=((IkReal(0.0450000000000000))*(sj3));
IkReal x1677=((IkReal(0.300000000000000))*(cj3));
IkReal x1678=((x1676)+(x1677));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1678))));
evalcond[3]=((IkReal(0.550000000000000))+(x1678)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(((((px)*((sj2)*(sj2))))+(((px)*((cj2)*(cj2))))));
dummyeval[0]=((((px)*((sj2)*(sj2))))+(((px)*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1679=((IkReal(0.0450000000000000))*(sj3));
IkReal x1680=((IkReal(0.300000000000000))*(cj3));
IkReal x1681=((x1679)+(x1680));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1681)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1681)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1682=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(-2.36111111111111))*(x1682)))+(((IkReal(-12.2222222222222))*(pz)*(x1682)))+(((IkReal(-11.1111111111111))*(pp)*(x1682))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKsin(j0)));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((px)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1683=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1684=((IkReal(0.0450000000000000))*(x1683));
cj0array[0]=((((IkReal(-1.00000000000000))*(x1684)))+(((IkReal(-0.300000000000000))*(sj3)*(x1683)))+(((cj3)*(x1684))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(px)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1685=((IkReal(0.0450000000000000))*(sj3));
IkReal x1686=((IkReal(0.300000000000000))*(cj3));
IkReal x1687=((x1685)+(x1686));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1687)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x1687)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1688=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
cj0array[0]=((((IkReal(12.2222222222222))*(pz)*(x1688)))+(((IkReal(11.1111111111111))*(pp)*(x1688)))+(((IkReal(2.36111111111111))*(x1688))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKsin(j0)));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1689=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1690=((IkReal(0.0450000000000000))*(x1689));
cj0array[0]=((((IkReal(0.300000000000000))*(sj3)*(x1689)))+(x1690)+(((IkReal(-1.00000000000000))*(cj3)*(x1690))));
if( cj0array[0] >= -1-IKFAST_SINCOS_THRESH && cj0array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j0valid[0] = j0valid[1] = true;
    j0array[0] = IKacos(cj0array[0]);
    sj0array[0] = IKsin(j0array[0]);
    cj0array[1] = cj0array[0];
    j0array[1] = -j0array[0];
    sj0array[1] = -sj0array[0];
}
else if( isnan(cj0array[0]) )
{
    // probably any value will work
    j0valid[0] = true;
    cj0array[0] = 1; sj0array[0] = 0; j0array[0] = 0;
}
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((px)*(IKsin(j0)));
evalcond[1]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(IKcos(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1691=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x1692=((IkReal(0.0450000000000000))*(sj2));
IkReal x1693=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x1694=((cj3)*(x1692));
if( IKabs(((x1691)*(((((IkReal(-1.00000000000000))*(x1693)))+(((IkReal(-1.00000000000000))*(x1692)))+(x1694))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1691)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1692)))+(((IkReal(-1.00000000000000))*(cj2)*(x1693)))+(((cj2)*(x1694))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1691)*(((((IkReal(-1.00000000000000))*(x1693)))+(((IkReal(-1.00000000000000))*(x1692)))+(x1694)))))+IKsqr(((x1691)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1692)))+(((IkReal(-1.00000000000000))*(cj2)*(x1693)))+(((cj2)*(x1694)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1691)*(((((IkReal(-1.00000000000000))*(x1693)))+(((IkReal(-1.00000000000000))*(x1692)))+(x1694)))), ((x1691)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1692)))+(((IkReal(-1.00000000000000))*(cj2)*(x1693)))+(((cj2)*(x1694)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1695=IKsin(j0);
IkReal x1696=IKcos(j0);
IkReal x1697=((IkReal(0.0450000000000000))*(cj2));
IkReal x1698=((IkReal(0.300000000000000))*(sj3));
IkReal x1699=((IkReal(0.0450000000000000))*(cj3));
IkReal x1700=((px)*(x1695));
IkReal x1701=((px)*(x1696));
evalcond[0]=((((sj2)*(x1698)))+(((IkReal(-1.00000000000000))*(sj2)*(x1699)))+(x1700)+(((IkReal(0.0450000000000000))*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x1701)))+(((cj2)*(x1700))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1699)))+(x1698)+(((sj2)*(x1700)))+(((cj2)*(x1701))));
evalcond[3]=((((cj3)*(x1697)))+(((IkReal(-1.00000000000000))*(x1697)))+(((IkReal(-1.00000000000000))*(x1701)))+(((IkReal(-1.00000000000000))*(cj2)*(x1698))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(cj2)*(x1701)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(sj2)*(x1700))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1702=((IkReal(0.0450000000000000))*(cj2));
IkReal x1703=((IkReal(0.300000000000000))*(sj3));
IkReal x1704=((IkReal(0.0450000000000000))*(sj2));
Atan2Value<IkReal> x1705 = IKatan2WithCheck(((gconst41)*(((((IkReal(-1.00000000000000))*(sj2)*(x1703)))+(((IkReal(-1.00000000000000))*(x1704)))+(((cj3)*(x1704)))))),((gconst41)*(((((IkReal(-1.00000000000000))*(cj2)*(x1703)))+(((IkReal(-1.00000000000000))*(x1702)))+(((cj3)*(x1702)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1705.valid ) {
    continue;
}
j0array[0]=x1705.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1706=IKsin(j0);
IkReal x1707=IKcos(j0);
IkReal x1708=((IkReal(0.0450000000000000))*(cj2));
IkReal x1709=((IkReal(0.300000000000000))*(sj3));
IkReal x1710=((IkReal(0.0450000000000000))*(cj3));
IkReal x1711=((px)*(x1706));
IkReal x1712=((px)*(x1707));
evalcond[0]=((x1711)+(((IkReal(-1.00000000000000))*(sj2)*(x1710)))+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x1709))));
evalcond[1]=((((cj2)*(x1711)))+(((IkReal(-1.00000000000000))*(sj2)*(x1712))));
evalcond[2]=((IkReal(0.0450000000000000))+(x1709)+(((IkReal(-1.00000000000000))*(x1710)))+(((sj2)*(x1711)))+(((cj2)*(x1712))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x1709)))+(((IkReal(-1.00000000000000))*(x1712)))+(((IkReal(-1.00000000000000))*(x1708)))+(((cj3)*(x1708))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(cj2)*(x1712)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(sj2)*(x1711))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1713=(sj1)*(sj1);
IkReal x1714=(cj1)*(cj1);
IkReal x1715=((px)*(sj2));
IkReal x1716=((IkReal(0.550000000000000))*(cj1));
IkReal x1717=((IkReal(1.00000000000000))*(pz));
IkReal x1718=((cj2)*(py));
IkReal x1719=((IkReal(0.300000000000000))*(cj3));
IkReal x1720=((py)*(sj2));
IkReal x1721=((cj2)*(px));
IkReal x1722=((IkReal(0.0450000000000000))*(sj3));
IkReal x1723=((cj1)*(pz));
Atan2Value<IkReal> x1724 = IKatan2WithCheck(((gconst1)*(((((IkReal(-0.550000000000000))*(x1718)))+(((cj1)*(x1715)*(x1719)))+(((IkReal(-1.00000000000000))*(x1714)*(x1715)*(x1717)))+(((x1718)*(x1723)))+(((IkReal(-1.00000000000000))*(x1718)*(x1719)))+(((IkReal(-1.00000000000000))*(x1713)*(x1715)*(x1717)))+(((x1715)*(x1716)))+(((IkReal(-1.00000000000000))*(x1718)*(x1722)))+(((cj1)*(x1715)*(x1722)))))),((gconst1)*(((((pz)*(x1714)*(x1720)))+(((IkReal(-1.00000000000000))*(cj1)*(x1719)*(x1720)))+(((x1721)*(x1723)))+(((pz)*(x1713)*(x1720)))+(((IkReal(-1.00000000000000))*(cj1)*(x1720)*(x1722)))+(((IkReal(-0.550000000000000))*(x1721)))+(((IkReal(-1.00000000000000))*(x1719)*(x1721)))+(((IkReal(-1.00000000000000))*(x1716)*(x1720)))+(((IkReal(-1.00000000000000))*(x1721)*(x1722)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1724.valid ) {
    continue;
}
j0array[0]=x1724.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1725=IKsin(j0);
IkReal x1726=IKcos(j0);
IkReal x1727=((cj1)*(sj2));
IkReal x1728=((IkReal(0.0900000000000000))*(sj2));
IkReal x1729=((IkReal(0.300000000000000))*(sj3));
IkReal x1730=((IkReal(0.0450000000000000))*(cj3));
IkReal x1731=((IkReal(1.10000000000000))*(sj1));
IkReal x1732=((IkReal(0.300000000000000))*(cj3));
IkReal x1733=((cj1)*(cj2));
IkReal x1734=((IkReal(0.0450000000000000))*(sj3));
IkReal x1735=((IkReal(1.00000000000000))*(sj2));
IkReal x1736=((cj1)*(pz));
IkReal x1737=((px)*(x1725));
IkReal x1738=((px)*(x1726));
IkReal x1739=((py)*(x1726));
IkReal x1740=((py)*(x1725));
IkReal x1741=((cj2)*(pz)*(sj1));
evalcond[0]=((IkReal(-0.550000000000000))+(x1736)+(((sj1)*(x1738)))+(((sj1)*(x1740)))+(((IkReal(-1.00000000000000))*(x1734)))+(((IkReal(-1.00000000000000))*(x1732))));
evalcond[1]=((x1737)+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x1739)))+(((IkReal(-1.00000000000000))*(sj2)*(x1730)))+(((sj2)*(x1729))));
evalcond[2]=((((x1727)*(x1740)))+(((cj2)*(x1737)))+(((IkReal(-1.00000000000000))*(cj2)*(x1739)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1735)))+(((x1727)*(x1738))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1733)*(x1740)))+(x1729)+(x1741)+(((IkReal(-1.00000000000000))*(x1733)*(x1738)))+(((IkReal(-1.00000000000000))*(x1735)*(x1739)))+(((IkReal(-1.00000000000000))*(x1730)))+(((sj2)*(x1737))));
evalcond[4]=((((x1729)*(x1733)))+(((IkReal(0.0450000000000000))*(x1733)))+(((sj1)*(x1734)))+(((sj1)*(x1732)))+(((IkReal(-1.00000000000000))*(x1730)*(x1733)))+(((IkReal(-1.00000000000000))*(x1740)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1738))));
evalcond[5]=((IkReal(-0.212500000000000))+(((x1728)*(x1739)))+(((x1731)*(x1738)))+(((IkReal(-1.00000000000000))*(x1728)*(x1737)))+(((x1731)*(x1740)))+(((IkReal(0.0900000000000000))*(x1733)*(x1740)))+(((IkReal(0.0900000000000000))*(x1733)*(x1738)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1736)))+(((IkReal(-0.0900000000000000))*(x1741))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1742=((IkReal(0.0450000000000000))*(px));
IkReal x1743=((sj1)*(sj2));
IkReal x1744=((IkReal(0.300000000000000))*(cj3));
IkReal x1745=((IkReal(0.300000000000000))*(sj3));
IkReal x1746=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x1747=((IkReal(0.0450000000000000))*(py)*(x1743));
Atan2Value<IkReal> x1748 = IKatan2WithCheck(((gconst0)*(((((py)*(x1744)))+(((cj3)*(x1742)*(x1743)))+(((IkReal(-1.00000000000000))*(px)*(x1743)*(x1745)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x1746)))+(((IkReal(-1.00000000000000))*(x1742)*(x1743)))+(((IkReal(0.550000000000000))*(py)))))),((gconst0)*(((((py)*(x1743)*(x1745)))+(x1747)+(((px)*(x1744)))+(((IkReal(-1.00000000000000))*(cj3)*(x1747)))+(((sj3)*(x1742)))+(((IkReal(-1.00000000000000))*(px)*(x1746)))+(((IkReal(0.550000000000000))*(px)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1748.valid ) {
    continue;
}
j0array[0]=x1748.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1749=IKsin(j0);
IkReal x1750=IKcos(j0);
IkReal x1751=((cj1)*(sj2));
IkReal x1752=((IkReal(0.0900000000000000))*(sj2));
IkReal x1753=((IkReal(0.300000000000000))*(sj3));
IkReal x1754=((IkReal(0.0450000000000000))*(cj3));
IkReal x1755=((IkReal(1.10000000000000))*(sj1));
IkReal x1756=((IkReal(0.300000000000000))*(cj3));
IkReal x1757=((cj1)*(cj2));
IkReal x1758=((IkReal(0.0450000000000000))*(sj3));
IkReal x1759=((IkReal(1.00000000000000))*(sj2));
IkReal x1760=((cj1)*(pz));
IkReal x1761=((px)*(x1749));
IkReal x1762=((px)*(x1750));
IkReal x1763=((py)*(x1750));
IkReal x1764=((py)*(x1749));
IkReal x1765=((cj2)*(pz)*(sj1));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x1764)))+(((sj1)*(x1762)))+(x1760)+(((IkReal(-1.00000000000000))*(x1756)))+(((IkReal(-1.00000000000000))*(x1758))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1763)))+(x1761)+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x1754)))+(((sj2)*(x1753))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1759)))+(((x1751)*(x1762)))+(((x1751)*(x1764)))+(((IkReal(-1.00000000000000))*(cj2)*(x1763)))+(((cj2)*(x1761))));
evalcond[3]=((IkReal(0.0450000000000000))+(x1765)+(x1753)+(((sj2)*(x1761)))+(((IkReal(-1.00000000000000))*(x1759)*(x1763)))+(((IkReal(-1.00000000000000))*(x1757)*(x1764)))+(((IkReal(-1.00000000000000))*(x1757)*(x1762)))+(((IkReal(-1.00000000000000))*(x1754))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1764)))+(((IkReal(-1.00000000000000))*(x1762)))+(((x1753)*(x1757)))+(((IkReal(0.0450000000000000))*(x1757)))+(((sj1)*(x1756)))+(((sj1)*(x1758)))+(((IkReal(-1.00000000000000))*(x1754)*(x1757)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1752)*(x1761)))+(((x1755)*(x1762)))+(((x1755)*(x1764)))+(((IkReal(-0.0900000000000000))*(x1765)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1760)))+(((x1752)*(x1763)))+(((IkReal(0.0900000000000000))*(x1757)*(x1764)))+(((IkReal(0.0900000000000000))*(x1757)*(x1762))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1766=((IkReal(0.0450000000000000))*(sj2));
Atan2Value<IkReal> x1769 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(py)),px,IKFAST_ATAN2_MAGTHRESH);
if( !x1769.valid ) {
    continue;
}
IkReal x1767=((IkReal(1.00000000000000))*(x1769.value));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x1766)))+(x1766))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x1766)))+(x1766))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1768=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x1766)))+(x1766)))));
j0array[0]=((((IkReal(-1.00000000000000))*(x1768)))+(((IkReal(-1.00000000000000))*(x1767))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1767)))+(x1768));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1770=(py)*(py);
IkReal x1771=(cj2)*(cj2);
IkReal x1772=(sj2)*(sj2);
IkReal x1773=IKcos(j0);
IkReal x1774=IKsin(j0);
IkReal x1775=(px)*(px);
IkReal x1776=((IkReal(0.0450000000000000))*(sj2));
IkReal x1777=((IkReal(1.00000000000000))*(x1775));
IkReal x1778=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x1779=((px)*(py)*(x1772));
IkReal x1780=((px)*(py)*(x1771));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x1778)))+(((IkReal(-1.00000000000000))*(py)*(x1776)))+(((x1773)*(((((x1770)*(x1772)))+(((x1770)*(x1771)))))))+(((cj3)*(py)*(x1776)))+(((x1774)*(((((IkReal(-1.00000000000000))*(x1779)))+(((IkReal(-1.00000000000000))*(x1780))))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x1778)))+(((IkReal(-1.00000000000000))*(px)*(x1776)))+(((x1774)*(((((IkReal(-1.00000000000000))*(x1772)*(x1777)))+(((IkReal(-1.00000000000000))*(x1771)*(x1777)))))))+(((x1773)*(((x1780)+(x1779)))))+(((cj3)*(px)*(x1776))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst42;
IkReal x1781=((py)*(sj0));
IkReal x1782=((IkReal(0.300000000000000))*(cj3));
IkReal x1783=((cj0)*(px));
IkReal x1784=((cj2)*(pz));
IkReal x1785=((IkReal(0.0450000000000000))*(sj3));
gconst42=IKsign(((((IkReal(-1.00000000000000))*(x1783)*(x1785)))+(((IkReal(0.0450000000000000))*(cj3)*(x1784)))+(((IkReal(-0.550000000000000))*(x1781)))+(((IkReal(-0.550000000000000))*(x1783)))+(((IkReal(-0.300000000000000))*(sj3)*(x1784)))+(((IkReal(-1.00000000000000))*(x1781)*(x1785)))+(((IkReal(-1.00000000000000))*(x1781)*(x1782)))+(((IkReal(-0.0450000000000000))*(x1784)))+(((IkReal(-1.00000000000000))*(x1782)*(x1783)))));
IkReal x1786=((py)*(sj0));
IkReal x1787=((cj2)*(pz));
IkReal x1788=((IkReal(6.66666666666667))*(cj3));
IkReal x1789=((cj0)*(px));
IkReal x1790=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-6.66666666666667))*(sj3)*(x1787)))+(((cj3)*(x1787)))+(((IkReal(-1.00000000000000))*(x1789)*(x1790)))+(((IkReal(-1.00000000000000))*(x1788)*(x1789)))+(((IkReal(-1.00000000000000))*(x1787)))+(((IkReal(-1.00000000000000))*(x1786)*(x1790)))+(((IkReal(-1.00000000000000))*(x1786)*(x1788)))+(((IkReal(-12.2222222222222))*(x1786)))+(((IkReal(-12.2222222222222))*(x1789))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1791=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1791;
evalcond[3]=x1791;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
IkReal x1792=((cj0)*(px));
IkReal x1793=((IkReal(0.0450000000000000))*(pz));
IkReal x1794=((py)*(sj0));
IkReal x1795=((IkReal(0.300000000000000))*(cj3));
IkReal x1796=((IkReal(0.0450000000000000))*(sj3));
gconst44=IKsign(((((IkReal(-1.00000000000000))*(x1792)*(x1796)))+(((IkReal(-1.00000000000000))*(x1792)*(x1795)))+(((IkReal(-1.00000000000000))*(x1793)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((cj3)*(x1793)))+(((IkReal(-0.550000000000000))*(x1792)))+(((IkReal(-0.550000000000000))*(x1794)))+(((IkReal(-1.00000000000000))*(x1794)*(x1795)))+(((IkReal(-1.00000000000000))*(x1794)*(x1796)))));
IkReal x1797=((py)*(sj0));
IkReal x1798=((IkReal(6.66666666666667))*(cj3));
IkReal x1799=((cj0)*(px));
IkReal x1800=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x1797)*(x1800)))+(((IkReal(-1.00000000000000))*(x1799)*(x1800)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x1797)*(x1798)))+(((IkReal(-12.2222222222222))*(x1797)))+(((IkReal(-12.2222222222222))*(x1799)))+(((IkReal(-1.00000000000000))*(x1798)*(x1799))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1801=((IkReal(0.0450000000000000))*(pz));
IkReal x1802=((cj0)*(px));
IkReal x1803=((IkReal(0.300000000000000))*(sj3));
IkReal x1804=((py)*(sj0));
IkReal x1805=((IkReal(0.0450000000000000))*(cj3));
IkReal x1806=((IkReal(0.300000000000000))*(cj3));
IkReal x1807=((IkReal(0.0450000000000000))*(sj3));
Atan2Value<IkReal> x1808 = IKatan2WithCheck(((gconst45)*(((((IkReal(-1.00000000000000))*(cj3)*(x1801)))+(((IkReal(-1.00000000000000))*(x1804)*(x1806)))+(((IkReal(-1.00000000000000))*(x1804)*(x1807)))+(((IkReal(-1.00000000000000))*(x1802)*(x1807)))+(((IkReal(-1.00000000000000))*(x1802)*(x1806)))+(x1801)+(((IkReal(-0.550000000000000))*(x1804)))+(((IkReal(-0.550000000000000))*(x1802)))+(((pz)*(x1803)))))),((gconst45)*(((((IkReal(-0.550000000000000))*(pz)))+(((x1802)*(x1805)))+(((IkReal(-0.0450000000000000))*(x1802)))+(((IkReal(-0.0450000000000000))*(x1804)))+(((IkReal(-1.00000000000000))*(pz)*(x1806)))+(((IkReal(-1.00000000000000))*(x1802)*(x1803)))+(((IkReal(-1.00000000000000))*(sj3)*(x1801)))+(((x1804)*(x1805)))+(((IkReal(-1.00000000000000))*(x1803)*(x1804)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1808.valid ) {
    continue;
}
j1array[0]=x1808.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1809=IKsin(j1);
IkReal x1810=IKcos(j1);
IkReal x1811=((IkReal(0.300000000000000))*(cj3));
IkReal x1812=((IkReal(0.0450000000000000))*(cj3));
IkReal x1813=((cj0)*(px));
IkReal x1814=((py)*(sj0));
IkReal x1815=((IkReal(0.0450000000000000))*(sj3));
IkReal x1816=((IkReal(0.300000000000000))*(sj3));
IkReal x1817=((IkReal(0.0450000000000000))*(x1809));
IkReal x1818=((IkReal(1.00000000000000))*(x1810));
IkReal x1819=((pz)*(x1809));
IkReal x1820=((pz)*(x1810));
IkReal x1821=((IkReal(0.0900000000000000))*(x1810));
IkReal x1822=((IkReal(1.10000000000000))*(x1809));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1811)))+(((IkReal(-1.00000000000000))*(x1815)))+(((x1809)*(x1813)))+(((x1809)*(x1814)))+(x1820));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1809)*(x1812)))+(((x1809)*(x1816)))+(((IkReal(-1.00000000000000))*(x1810)*(x1811)))+(((IkReal(-1.00000000000000))*(x1810)*(x1815)))+(pz)+(x1817)+(((IkReal(-0.550000000000000))*(x1810))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1812)))+(((IkReal(-1.00000000000000))*(x1813)*(x1818)))+(((IkReal(-1.00000000000000))*(x1814)*(x1818)))+(x1816)+(x1819));
evalcond[3]=((((IkReal(0.0450000000000000))*(x1810)))+(((x1809)*(x1811)))+(((x1809)*(x1815)))+(((IkReal(-1.00000000000000))*(x1810)*(x1812)))+(((IkReal(0.550000000000000))*(x1809)))+(((x1810)*(x1816)))+(((IkReal(-1.00000000000000))*(x1814)))+(((IkReal(-1.00000000000000))*(x1813))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1819)))+(((IkReal(1.10000000000000))*(x1820)))+(((x1814)*(x1821)))+(((x1814)*(x1822)))+(((x1813)*(x1821)))+(((x1813)*(x1822))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1823=(cj3)*(cj3);
IkReal x1824=(sj3)*(sj3);
IkReal x1825=((cj3)*(sj3));
IkReal x1826=((IkReal(1.00000000000000))*(pz));
Atan2Value<IkReal> x1827 = IKatan2WithCheck(((gconst44)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x1825)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x1824)))+(((IkReal(-0.0900000000000000))*(x1823)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst44)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0879750000000000))*(x1825)))+(((IkReal(0.0135000000000000))*(x1823)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1826)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1826)))+(((IkReal(-0.0135000000000000))*(x1824)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1827.valid ) {
    continue;
}
j1array[0]=x1827.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1828=IKsin(j1);
IkReal x1829=IKcos(j1);
IkReal x1830=((IkReal(0.300000000000000))*(cj3));
IkReal x1831=((IkReal(0.0450000000000000))*(cj3));
IkReal x1832=((cj0)*(px));
IkReal x1833=((py)*(sj0));
IkReal x1834=((IkReal(0.0450000000000000))*(sj3));
IkReal x1835=((IkReal(0.300000000000000))*(sj3));
IkReal x1836=((IkReal(0.0450000000000000))*(x1828));
IkReal x1837=((IkReal(1.00000000000000))*(x1829));
IkReal x1838=((pz)*(x1828));
IkReal x1839=((pz)*(x1829));
IkReal x1840=((IkReal(0.0900000000000000))*(x1829));
IkReal x1841=((IkReal(1.10000000000000))*(x1828));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1834)))+(((IkReal(-1.00000000000000))*(x1830)))+(x1839)+(((x1828)*(x1833)))+(((x1828)*(x1832))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1828)*(x1831)))+(((IkReal(-0.550000000000000))*(x1829)))+(pz)+(x1836)+(((x1828)*(x1835)))+(((IkReal(-1.00000000000000))*(x1829)*(x1830)))+(((IkReal(-1.00000000000000))*(x1829)*(x1834))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1832)*(x1837)))+(((IkReal(-1.00000000000000))*(x1833)*(x1837)))+(((IkReal(-1.00000000000000))*(x1831)))+(x1835)+(x1838));
evalcond[3]=((((IkReal(0.550000000000000))*(x1828)))+(((IkReal(-1.00000000000000))*(x1832)))+(((IkReal(-1.00000000000000))*(x1833)))+(((x1829)*(x1835)))+(((x1828)*(x1830)))+(((x1828)*(x1834)))+(((IkReal(0.0450000000000000))*(x1829)))+(((IkReal(-1.00000000000000))*(x1829)*(x1831))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1832)*(x1840)))+(((x1832)*(x1841)))+(((x1833)*(x1841)))+(((x1833)*(x1840)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1838)))+(((IkReal(1.10000000000000))*(x1839))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1842=((px)*(sj0));
IkReal x1843=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((x1842)+(((IkReal(-1.00000000000000))*(x1843))));
evalcond[3]=((x1843)+(((IkReal(-1.00000000000000))*(x1842))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
IkReal x1844=((cj0)*(px));
IkReal x1845=((IkReal(0.0450000000000000))*(pz));
IkReal x1846=((py)*(sj0));
IkReal x1847=((IkReal(0.300000000000000))*(cj3));
IkReal x1848=((IkReal(0.0450000000000000))*(sj3));
gconst46=IKsign(((((IkReal(-1.00000000000000))*(cj3)*(x1845)))+(((IkReal(-0.550000000000000))*(x1846)))+(((IkReal(-0.550000000000000))*(x1844)))+(x1845)+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x1844)*(x1848)))+(((IkReal(-1.00000000000000))*(x1844)*(x1847)))+(((IkReal(-1.00000000000000))*(x1846)*(x1847)))+(((IkReal(-1.00000000000000))*(x1846)*(x1848)))));
IkReal x1849=((py)*(sj0));
IkReal x1850=((IkReal(6.66666666666667))*(cj3));
IkReal x1851=((cj0)*(px));
IkReal x1852=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x1849)*(x1850)))+(((IkReal(-1.00000000000000))*(x1849)*(x1852)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x1851)*(x1852)))+(((IkReal(-1.00000000000000))*(x1850)*(x1851)))+(((IkReal(-12.2222222222222))*(x1851)))+(pz)+(((IkReal(-12.2222222222222))*(x1849))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1853=((py)*(sj0));
IkReal x1854=((cj0)*(px));
IkReal x1855=((IkReal(0.300000000000000))*(sj3));
IkReal x1856=((IkReal(0.0450000000000000))*(pz));
IkReal x1857=((IkReal(0.0450000000000000))*(cj3));
IkReal x1858=((IkReal(0.300000000000000))*(cj3));
IkReal x1859=((IkReal(0.0450000000000000))*(sj3));
Atan2Value<IkReal> x1860 = IKatan2WithCheck(((gconst47)*(((((IkReal(0.550000000000000))*(x1854)))+(((IkReal(0.550000000000000))*(x1853)))+(((IkReal(-1.00000000000000))*(cj3)*(x1856)))+(((pz)*(x1855)))+(((x1854)*(x1858)))+(((x1854)*(x1859)))+(((x1853)*(x1859)))+(((x1853)*(x1858)))+(x1856)))),((gconst47)*(((((pz)*(x1858)))+(((IkReal(-0.0450000000000000))*(x1853)))+(((IkReal(-0.0450000000000000))*(x1854)))+(((x1854)*(x1857)))+(((x1853)*(x1857)))+(((sj3)*(x1856)))+(((IkReal(-1.00000000000000))*(x1854)*(x1855)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1853)*(x1855)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1860.valid ) {
    continue;
}
j1array[0]=x1860.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1861=IKsin(j1);
IkReal x1862=IKcos(j1);
IkReal x1863=((IkReal(0.300000000000000))*(cj3));
IkReal x1864=((IkReal(0.0450000000000000))*(cj3));
IkReal x1865=((cj0)*(px));
IkReal x1866=((py)*(sj0));
IkReal x1867=((IkReal(0.0450000000000000))*(sj3));
IkReal x1868=((IkReal(0.300000000000000))*(sj3));
IkReal x1869=((IkReal(0.0450000000000000))*(x1861));
IkReal x1870=((pz)*(x1861));
IkReal x1871=((pz)*(x1862));
IkReal x1872=((IkReal(0.0900000000000000))*(x1862));
IkReal x1873=((IkReal(1.10000000000000))*(x1861));
evalcond[0]=((IkReal(-0.550000000000000))+(x1871)+(((IkReal(-1.00000000000000))*(x1867)))+(((IkReal(-1.00000000000000))*(x1863)))+(((x1861)*(x1865)))+(((x1861)*(x1866))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x1862)))+(((IkReal(-1.00000000000000))*(x1862)*(x1863)))+(((IkReal(-1.00000000000000))*(x1862)*(x1867)))+(pz)+(((IkReal(-1.00000000000000))*(x1861)*(x1868)))+(((IkReal(-1.00000000000000))*(x1869)))+(((x1861)*(x1864))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x1862)*(x1865)))+(((x1862)*(x1866)))+(x1868)+(((IkReal(-1.00000000000000))*(x1870)))+(((IkReal(-1.00000000000000))*(x1864))));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x1862)))+(((x1862)*(x1864)))+(((IkReal(-1.00000000000000))*(x1862)*(x1868)))+(((IkReal(0.550000000000000))*(x1861)))+(((IkReal(-1.00000000000000))*(x1866)))+(((IkReal(-1.00000000000000))*(x1865)))+(((x1861)*(x1863)))+(((x1861)*(x1867))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1866)*(x1873)))+(((IkReal(1.10000000000000))*(x1871)))+(((x1865)*(x1873)))+(((IkReal(-1.00000000000000))*(x1866)*(x1872)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1865)*(x1872)))+(((IkReal(0.0900000000000000))*(x1870))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1874=(sj3)*(sj3);
IkReal x1875=(cj3)*(cj3);
IkReal x1876=((cj3)*(sj3));
IkReal x1877=((IkReal(1.00000000000000))*(pz));
Atan2Value<IkReal> x1878 = IKatan2WithCheck(((gconst46)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x1876)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x1875)))+(((IkReal(-0.00202500000000000))*(x1874)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst46)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*(x1874)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1877)))+(((IkReal(0.0879750000000000))*(x1876)))+(((IkReal(-0.0135000000000000))*(x1875)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1877)))+(((IkReal(0.167025000000000))*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1878.valid ) {
    continue;
}
j1array[0]=x1878.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1879=IKsin(j1);
IkReal x1880=IKcos(j1);
IkReal x1881=((IkReal(0.300000000000000))*(cj3));
IkReal x1882=((IkReal(0.0450000000000000))*(cj3));
IkReal x1883=((cj0)*(px));
IkReal x1884=((py)*(sj0));
IkReal x1885=((IkReal(0.0450000000000000))*(sj3));
IkReal x1886=((IkReal(0.300000000000000))*(sj3));
IkReal x1887=((IkReal(0.0450000000000000))*(x1879));
IkReal x1888=((pz)*(x1879));
IkReal x1889=((pz)*(x1880));
IkReal x1890=((IkReal(0.0900000000000000))*(x1880));
IkReal x1891=((IkReal(1.10000000000000))*(x1879));
evalcond[0]=((IkReal(-0.550000000000000))+(((x1879)*(x1883)))+(((x1879)*(x1884)))+(x1889)+(((IkReal(-1.00000000000000))*(x1885)))+(((IkReal(-1.00000000000000))*(x1881))));
evalcond[1]=((((x1879)*(x1882)))+(((IkReal(-1.00000000000000))*(x1879)*(x1886)))+(((IkReal(-1.00000000000000))*(x1880)*(x1885)))+(((IkReal(-1.00000000000000))*(x1880)*(x1881)))+(((IkReal(-0.550000000000000))*(x1880)))+(pz)+(((IkReal(-1.00000000000000))*(x1887))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x1880)*(x1884)))+(((x1880)*(x1883)))+(x1886)+(((IkReal(-1.00000000000000))*(x1888)))+(((IkReal(-1.00000000000000))*(x1882))));
evalcond[3]=((((x1879)*(x1881)))+(((x1879)*(x1885)))+(((IkReal(-1.00000000000000))*(x1880)*(x1886)))+(((x1880)*(x1882)))+(((IkReal(0.550000000000000))*(x1879)))+(((IkReal(-0.0450000000000000))*(x1880)))+(((IkReal(-1.00000000000000))*(x1883)))+(((IkReal(-1.00000000000000))*(x1884))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x1884)*(x1891)))+(((x1883)*(x1891)))+(((IkReal(-1.00000000000000))*(x1883)*(x1890)))+(((IkReal(1.10000000000000))*(x1889)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1888)))+(((IkReal(-1.00000000000000))*(x1884)*(x1890))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1892=((IkReal(-1.00000000000000))*(cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x1892;
evalcond[3]=x1892;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x1893=((IkReal(0.0450000000000000))*(pz));
IkReal x1894=((py)*(sj0));
gconst49=IKsign(((((IkReal(-0.0450000000000000))*(sj3)*(x1894)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)*(x1894)))+(((IkReal(-0.550000000000000))*(x1894)))+(((cj3)*(x1893)))+(((IkReal(-1.00000000000000))*(x1893)))));
IkReal x1895=((py)*(sj0));
dummyeval[0]=((((IkReal(-6.66666666666667))*(cj3)*(x1895)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-12.2222222222222))*(x1895)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj3)*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x1895))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1896=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1896))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1896))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1897=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x1897)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x1897))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x1897)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x1897)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x1897)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x1897)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1898=IKcos(j1);
IkReal x1899=IKsin(j1);
IkReal x1900=((pz)*(x1899));
IkReal x1901=((pz)*(x1898));
evalcond[0]=((IkReal(-0.850000000000000))+(x1901));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1898)))+(pz));
evalcond[2]=x1900;
evalcond[3]=((IkReal(0.850000000000000))*(x1899));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1901)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1900))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1902=IKcos(j1);
IkReal x1903=IKsin(j1);
IkReal x1904=((pz)*(x1903));
IkReal x1905=((pz)*(x1902));
evalcond[0]=((IkReal(-0.850000000000000))+(x1905));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1902)))+(pz));
evalcond[2]=x1904;
evalcond[3]=((IkReal(0.850000000000000))*(x1903));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1905)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1904))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1906=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1906))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1906))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1907=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x1907)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x1907))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x1907)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x1907)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x1907)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x1907)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1908=IKcos(j1);
IkReal x1909=IKsin(j1);
IkReal x1910=((pz)*(x1909));
IkReal x1911=((pz)*(x1908));
evalcond[0]=((IkReal(-0.850000000000000))+(x1911));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1908)))+(pz));
evalcond[2]=x1910;
evalcond[3]=((IkReal(0.850000000000000))*(x1909));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1910)))+(((IkReal(1.10000000000000))*(x1911)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1912=IKcos(j1);
IkReal x1913=IKsin(j1);
IkReal x1914=((pz)*(x1913));
IkReal x1915=((pz)*(x1912));
evalcond[0]=((IkReal(-0.850000000000000))+(x1915));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1912)))+(pz));
evalcond[2]=x1914;
evalcond[3]=((IkReal(0.850000000000000))*(x1913));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x1914)))+(((IkReal(1.10000000000000))*(x1915)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1916=((IkReal(1.00000000000000))*(pp));
IkReal x1917=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1916)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x1917;
evalcond[4]=x1917;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1916))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x1919 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x1919.valid ) {
    continue;
}
IkReal x1918=x1919.value;
j1array[0]=((IkReal(-1.00000000000000))*(x1918));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1918))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1920=IKsin(j1);
IkReal x1921=IKcos(j1);
IkReal x1922=((IkReal(0.0450000000000000))*(x1921));
evalcond[0]=((((IkReal(0.550000000000000))*(x1920)))+(((IkReal(0.0450000000000000))*(sj3)*(x1920)))+(x1922)+(((IkReal(0.300000000000000))*(sj3)*(x1921)))+(((IkReal(0.300000000000000))*(cj3)*(x1920)))+(((IkReal(-1.00000000000000))*(cj3)*(x1922))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1923=((IkReal(1.00000000000000))*(pp));
IkReal x1924=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1923)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x1924;
evalcond[4]=x1924;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1923))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x1926 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x1926.valid ) {
    continue;
}
IkReal x1925=x1926.value;
j1array[0]=((IkReal(-1.00000000000000))*(x1925));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1925))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1927=IKsin(j1);
IkReal x1928=IKcos(j1);
IkReal x1929=((IkReal(0.0450000000000000))*(x1928));
evalcond[0]=((((IkReal(0.550000000000000))*(x1927)))+(((IkReal(0.0450000000000000))*(sj3)*(x1927)))+(x1929)+(((IkReal(0.300000000000000))*(sj3)*(x1928)))+(((IkReal(0.300000000000000))*(cj3)*(x1927)))+(((IkReal(-1.00000000000000))*(cj3)*(x1929))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1930=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1930))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1930))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x1932 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x1932.valid ) {
    continue;
}
IkReal x1931=x1932.value;
j1array[0]=((IkReal(-1.00000000000000))*(x1931));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1931))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1933=IKsin(j1);
IkReal x1934=IKcos(j1);
IkReal x1935=((IkReal(0.0450000000000000))*(x1934));
evalcond[0]=((((IkReal(0.300000000000000))*(sj3)*(x1934)))+(((IkReal(0.300000000000000))*(cj3)*(x1933)))+(((IkReal(0.550000000000000))*(x1933)))+(((IkReal(0.0450000000000000))*(sj3)*(x1933)))+(x1935)+(((IkReal(-1.00000000000000))*(cj3)*(x1935))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1936=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1936))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1936))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x1938 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x1938.valid ) {
    continue;
}
IkReal x1937=x1938.value;
j1array[0]=((IkReal(-1.00000000000000))*(x1937));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1937))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1939=IKsin(j1);
IkReal x1940=IKcos(j1);
IkReal x1941=((IkReal(0.0450000000000000))*(x1940));
evalcond[0]=((((IkReal(0.300000000000000))*(sj3)*(x1940)))+(((IkReal(0.300000000000000))*(cj3)*(x1939)))+(((IkReal(0.550000000000000))*(x1939)))+(((IkReal(-1.00000000000000))*(cj3)*(x1941)))+(((IkReal(0.0450000000000000))*(sj3)*(x1939)))+(x1941));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1942=(cj3)*(cj3);
IkReal x1943=(sj3)*(sj3);
IkReal x1944=((cj3)*(sj3));
Atan2Value<IkReal> x1945 = IKatan2WithCheck(((gconst49)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x1943)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x1942)))+(((IkReal(-0.0270000000000000))*(x1944)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst49)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0135000000000000))*(x1942)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(-0.0879750000000000))*(x1944)))+(((IkReal(-0.0135000000000000))*(x1943)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1945.valid ) {
    continue;
}
j1array[0]=x1945.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1946=IKsin(j1);
IkReal x1947=IKcos(j1);
IkReal x1948=((IkReal(0.300000000000000))*(cj3));
IkReal x1949=((IkReal(0.0450000000000000))*(cj3));
IkReal x1950=((py)*(sj0));
IkReal x1951=((IkReal(0.0450000000000000))*(sj3));
IkReal x1952=((IkReal(0.300000000000000))*(sj3));
IkReal x1953=((IkReal(0.0450000000000000))*(x1946));
IkReal x1954=((pz)*(x1946));
IkReal x1955=((pz)*(x1947));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1951)))+(((IkReal(-1.00000000000000))*(x1948)))+(((x1946)*(x1950)))+(x1955));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1947)*(x1948)))+(((x1946)*(x1952)))+(((IkReal(-1.00000000000000))*(x1947)*(x1951)))+(((IkReal(-1.00000000000000))*(x1946)*(x1949)))+(x1953)+(pz)+(((IkReal(-0.550000000000000))*(x1947))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1949)))+(((IkReal(-1.00000000000000))*(x1947)*(x1950)))+(x1954)+(x1952));
evalcond[3]=((((IkReal(0.0450000000000000))*(x1947)))+(((x1946)*(x1948)))+(((IkReal(-1.00000000000000))*(x1947)*(x1949)))+(((x1946)*(x1951)))+(((IkReal(-1.00000000000000))*(x1950)))+(((x1947)*(x1952)))+(((IkReal(0.550000000000000))*(x1946))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1955)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x1954)))+(((IkReal(1.10000000000000))*(x1946)*(x1950)))+(((IkReal(0.0900000000000000))*(x1947)*(x1950))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1956=((IkReal(0.0450000000000000))*(pz));
IkReal x1957=((IkReal(0.300000000000000))*(sj3));
IkReal x1958=((py)*(sj0));
IkReal x1959=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x1960 = IKatan2WithCheck(((gconst48)*(((((IkReal(-1.00000000000000))*(x1958)*(x1959)))+(((pz)*(x1957)))+(((IkReal(-1.00000000000000))*(cj3)*(x1956)))+(x1956)+(((IkReal(-0.0450000000000000))*(sj3)*(x1958)))+(((IkReal(-0.550000000000000))*(x1958)))))),((gconst48)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1957)*(x1958)))+(((IkReal(-1.00000000000000))*(sj3)*(x1956)))+(((IkReal(-1.00000000000000))*(pz)*(x1959)))+(((IkReal(-0.0450000000000000))*(x1958)))+(((IkReal(0.0450000000000000))*(cj3)*(x1958)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1960.valid ) {
    continue;
}
j1array[0]=x1960.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1961=IKsin(j1);
IkReal x1962=IKcos(j1);
IkReal x1963=((IkReal(0.300000000000000))*(cj3));
IkReal x1964=((IkReal(0.0450000000000000))*(cj3));
IkReal x1965=((py)*(sj0));
IkReal x1966=((IkReal(0.0450000000000000))*(sj3));
IkReal x1967=((IkReal(0.300000000000000))*(sj3));
IkReal x1968=((IkReal(0.0450000000000000))*(x1961));
IkReal x1969=((pz)*(x1961));
IkReal x1970=((pz)*(x1962));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x1966)))+(((IkReal(-1.00000000000000))*(x1963)))+(x1970)+(((x1961)*(x1965))));
evalcond[1]=((x1968)+(pz)+(((IkReal(-1.00000000000000))*(x1961)*(x1964)))+(((x1961)*(x1967)))+(((IkReal(-0.550000000000000))*(x1962)))+(((IkReal(-1.00000000000000))*(x1962)*(x1963)))+(((IkReal(-1.00000000000000))*(x1962)*(x1966))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x1964)))+(x1969)+(x1967)+(((IkReal(-1.00000000000000))*(x1962)*(x1965))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1965)))+(((x1961)*(x1966)))+(((x1961)*(x1963)))+(((x1962)*(x1967)))+(((IkReal(-1.00000000000000))*(x1962)*(x1964)))+(((IkReal(0.550000000000000))*(x1961)))+(((IkReal(0.0450000000000000))*(x1962))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1970)))+(((IkReal(0.0900000000000000))*(x1962)*(x1965)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1961)*(x1965)))+(((IkReal(-0.0900000000000000))*(x1969))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1971=((cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(x1971));
evalcond[3]=x1971;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x1972=((py)*(sj0));
IkReal x1973=((IkReal(0.0450000000000000))*(pz));
gconst51=IKsign(((((IkReal(-0.0450000000000000))*(sj3)*(x1972)))+(((IkReal(-0.300000000000000))*(cj3)*(x1972)))+(x1973)+(((IkReal(-1.00000000000000))*(cj3)*(x1973)))+(((IkReal(-0.550000000000000))*(x1972)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))));
IkReal x1974=((py)*(sj0));
dummyeval[0]=((((IkReal(-6.66666666666667))*(cj3)*(x1974)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(pz)+(((IkReal(-12.2222222222222))*(x1974)))+(((IkReal(-1.00000000000000))*(sj3)*(x1974))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1975=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1975))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1975))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1976=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x1976)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x1976))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x1976)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x1976)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x1976)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x1976)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1977=IKcos(j1);
IkReal x1978=IKsin(j1);
IkReal x1979=((pz)*(x1978));
IkReal x1980=((pz)*(x1977));
evalcond[0]=((IkReal(-0.850000000000000))+(x1980));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1977)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x1979));
evalcond[3]=((IkReal(0.850000000000000))*(x1978));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1980)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1979))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1981=IKcos(j1);
IkReal x1982=IKsin(j1);
IkReal x1983=((pz)*(x1982));
IkReal x1984=((pz)*(x1981));
evalcond[0]=((IkReal(-0.850000000000000))+(x1984));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1981)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x1983));
evalcond[3]=((IkReal(0.850000000000000))*(x1982));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x1984)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1983))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1985=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x1985))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1985))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1986=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x1986)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x1986))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x1986)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x1986)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x1986)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x1986)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1987=IKcos(j1);
IkReal x1988=IKsin(j1);
IkReal x1989=((pz)*(x1988));
IkReal x1990=((pz)*(x1987));
evalcond[0]=((IkReal(-0.850000000000000))+(x1990));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1987)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x1989));
evalcond[3]=((IkReal(0.850000000000000))*(x1988));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x1989)))+(((IkReal(1.10000000000000))*(x1990))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1991=IKcos(j1);
IkReal x1992=IKsin(j1);
IkReal x1993=((pz)*(x1992));
IkReal x1994=((pz)*(x1991));
evalcond[0]=((IkReal(-0.850000000000000))+(x1994));
evalcond[1]=((((IkReal(-0.850000000000000))*(x1991)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x1993));
evalcond[3]=((IkReal(0.850000000000000))*(x1992));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x1994)))+(((IkReal(0.0900000000000000))*(x1993))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1995=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1995)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x1995))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x1997 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x1997.valid ) {
    continue;
}
IkReal x1996=x1997.value;
j1array[0]=((IkReal(-1.00000000000000))*(x1996));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1996))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1998=IKsin(j1);
IkReal x1999=IKcos(j1);
IkReal x2000=((IkReal(0.0450000000000000))*(x1999));
evalcond[0]=((((IkReal(-0.300000000000000))*(sj3)*(x1999)))+(((IkReal(0.0450000000000000))*(sj3)*(x1998)))+(((IkReal(-1.00000000000000))*(x2000)))+(((cj3)*(x2000)))+(((IkReal(0.300000000000000))*(cj3)*(x1998)))+(((IkReal(0.550000000000000))*(x1998))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2001=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2001)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2001))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2003 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2003.valid ) {
    continue;
}
IkReal x2002=x2003.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2002));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2002))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2004=IKsin(j1);
IkReal x2005=IKcos(j1);
IkReal x2006=((IkReal(0.0450000000000000))*(x2005));
evalcond[0]=((((IkReal(-0.300000000000000))*(sj3)*(x2005)))+(((IkReal(0.300000000000000))*(cj3)*(x2004)))+(((IkReal(0.550000000000000))*(x2004)))+(((IkReal(-1.00000000000000))*(x2006)))+(((cj3)*(x2006)))+(((IkReal(0.0450000000000000))*(sj3)*(x2004))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2007=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2007)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2007))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2009 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2009.valid ) {
    continue;
}
IkReal x2008=x2009.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2008));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2008))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2010=IKsin(j1);
IkReal x2011=IKcos(j1);
IkReal x2012=((IkReal(0.0450000000000000))*(x2011));
evalcond[0]=((((IkReal(-1.00000000000000))*(x2012)))+(((IkReal(0.550000000000000))*(x2010)))+(((IkReal(-0.300000000000000))*(sj3)*(x2011)))+(((cj3)*(x2012)))+(((IkReal(0.300000000000000))*(cj3)*(x2010)))+(((IkReal(0.0450000000000000))*(sj3)*(x2010))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2013=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2013)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2013))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2015 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2015.valid ) {
    continue;
}
IkReal x2014=x2015.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2014));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2014))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2016=IKsin(j1);
IkReal x2017=IKcos(j1);
IkReal x2018=((IkReal(0.0450000000000000))*(x2017));
evalcond[0]=((((IkReal(-1.00000000000000))*(x2018)))+(((IkReal(0.550000000000000))*(x2016)))+(((IkReal(-0.300000000000000))*(sj3)*(x2017)))+(((cj3)*(x2018)))+(((IkReal(0.300000000000000))*(cj3)*(x2016)))+(((IkReal(0.0450000000000000))*(sj3)*(x2016))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2019=(sj3)*(sj3);
IkReal x2020=(cj3)*(cj3);
IkReal x2021=((cj3)*(sj3));
Atan2Value<IkReal> x2022 = IKatan2WithCheck(((gconst51)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x2021)))+(((IkReal(-0.0900000000000000))*(x2020)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x2019)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst51)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*(x2019)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(-0.0135000000000000))*(x2020)))+(((IkReal(0.0879750000000000))*(x2021)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2022.valid ) {
    continue;
}
j1array[0]=x2022.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2023=IKsin(j1);
IkReal x2024=IKcos(j1);
IkReal x2025=((IkReal(0.300000000000000))*(cj3));
IkReal x2026=((IkReal(0.0450000000000000))*(cj3));
IkReal x2027=((py)*(sj0));
IkReal x2028=((IkReal(0.0450000000000000))*(sj3));
IkReal x2029=((IkReal(0.300000000000000))*(sj3));
IkReal x2030=((IkReal(0.0450000000000000))*(x2023));
IkReal x2031=((pz)*(x2023));
IkReal x2032=((pz)*(x2024));
evalcond[0]=((IkReal(-0.550000000000000))+(x2032)+(((x2023)*(x2027)))+(((IkReal(-1.00000000000000))*(x2025)))+(((IkReal(-1.00000000000000))*(x2028))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2023)*(x2029)))+(((x2023)*(x2026)))+(((IkReal(-0.550000000000000))*(x2024)))+(((IkReal(-1.00000000000000))*(x2024)*(x2025)))+(((IkReal(-1.00000000000000))*(x2024)*(x2028)))+(pz)+(((IkReal(-1.00000000000000))*(x2030))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x2024)*(x2027)))+(x2029)+(((IkReal(-1.00000000000000))*(x2031)))+(((IkReal(-1.00000000000000))*(x2026))));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x2024)))+(((IkReal(0.550000000000000))*(x2023)))+(((x2024)*(x2026)))+(((x2023)*(x2028)))+(((x2023)*(x2025)))+(((IkReal(-1.00000000000000))*(x2027)))+(((IkReal(-1.00000000000000))*(x2024)*(x2029))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2032)))+(((IkReal(1.10000000000000))*(x2023)*(x2027)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2031)))+(((IkReal(-0.0900000000000000))*(x2024)*(x2027))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2033=((IkReal(0.0450000000000000))*(cj3));
IkReal x2034=((IkReal(0.300000000000000))*(sj3));
IkReal x2035=((py)*(sj0));
IkReal x2036=((IkReal(0.0450000000000000))*(pz));
IkReal x2037=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x2038 = IKatan2WithCheck(((gconst50)*(((((IkReal(0.550000000000000))*(x2035)))+(((IkReal(-1.00000000000000))*(pz)*(x2033)))+(x2036)+(((pz)*(x2034)))+(((x2035)*(x2037)))+(((IkReal(0.0450000000000000))*(sj3)*(x2035)))))),((gconst50)*(((((sj3)*(x2036)))+(((x2033)*(x2035)))+(((pz)*(x2037)))+(((IkReal(-1.00000000000000))*(x2034)*(x2035)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x2035)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2038.valid ) {
    continue;
}
j1array[0]=x2038.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2039=IKsin(j1);
IkReal x2040=IKcos(j1);
IkReal x2041=((IkReal(0.300000000000000))*(cj3));
IkReal x2042=((IkReal(0.0450000000000000))*(cj3));
IkReal x2043=((py)*(sj0));
IkReal x2044=((IkReal(0.0450000000000000))*(sj3));
IkReal x2045=((IkReal(0.300000000000000))*(sj3));
IkReal x2046=((IkReal(0.0450000000000000))*(x2039));
IkReal x2047=((pz)*(x2039));
IkReal x2048=((pz)*(x2040));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2041)))+(((IkReal(-1.00000000000000))*(x2044)))+(x2048)+(((x2039)*(x2043))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2046)))+(((IkReal(-1.00000000000000))*(x2039)*(x2045)))+(((x2039)*(x2042)))+(((IkReal(-0.550000000000000))*(x2040)))+(pz)+(((IkReal(-1.00000000000000))*(x2040)*(x2044)))+(((IkReal(-1.00000000000000))*(x2040)*(x2041))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x2040)*(x2043)))+(((IkReal(-1.00000000000000))*(x2042)))+(x2045)+(((IkReal(-1.00000000000000))*(x2047))));
evalcond[3]=((((x2040)*(x2042)))+(((IkReal(0.550000000000000))*(x2039)))+(((x2039)*(x2044)))+(((x2039)*(x2041)))+(((IkReal(-1.00000000000000))*(x2043)))+(((IkReal(-1.00000000000000))*(x2040)*(x2045)))+(((IkReal(-0.0450000000000000))*(x2040))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2048)))+(((IkReal(-0.0900000000000000))*(x2040)*(x2043)))+(((IkReal(0.0900000000000000))*(x2047)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2039)*(x2043))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2049=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2049;
evalcond[3]=x2049;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
IkReal x2050=((IkReal(0.0450000000000000))*(pz));
IkReal x2051=((cj0)*(px));
gconst53=IKsign(((((IkReal(-0.0450000000000000))*(sj3)*(x2051)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)*(x2051)))+(((IkReal(-0.550000000000000))*(x2051)))+(((cj3)*(x2050)))+(((IkReal(-1.00000000000000))*(x2050)))));
IkReal x2052=((cj0)*(px));
dummyeval[0]=((((IkReal(-6.66666666666667))*(cj3)*(x2052)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x2052)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj3)*(pz)))+(((IkReal(-12.2222222222222))*(x2052))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2053=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2053))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2053))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2054=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x2054)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x2054))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x2054)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x2054)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x2054)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x2054)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2055=IKcos(j1);
IkReal x2056=IKsin(j1);
IkReal x2057=((pz)*(x2056));
IkReal x2058=((pz)*(x2055));
evalcond[0]=((IkReal(-0.850000000000000))+(x2058));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x2055))));
evalcond[2]=x2057;
evalcond[3]=((IkReal(0.850000000000000))*(x2056));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2058)))+(((IkReal(-0.0900000000000000))*(x2057)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2059=IKcos(j1);
IkReal x2060=IKsin(j1);
IkReal x2061=((pz)*(x2060));
IkReal x2062=((pz)*(x2059));
evalcond[0]=((IkReal(-0.850000000000000))+(x2062));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x2059))));
evalcond[2]=x2061;
evalcond[3]=((IkReal(0.850000000000000))*(x2060));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2062)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2061))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2063=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2063))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2063))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2064=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x2064)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x2064))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x2064)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x2064)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x2064)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x2064)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2065=IKcos(j1);
IkReal x2066=IKsin(j1);
IkReal x2067=((pz)*(x2066));
IkReal x2068=((pz)*(x2065));
evalcond[0]=((IkReal(-0.850000000000000))+(x2068));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x2065))));
evalcond[2]=x2067;
evalcond[3]=((IkReal(0.850000000000000))*(x2066));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2068)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2067))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2069=IKcos(j1);
IkReal x2070=IKsin(j1);
IkReal x2071=((pz)*(x2070));
IkReal x2072=((pz)*(x2069));
evalcond[0]=((IkReal(-0.850000000000000))+(x2072));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x2069))));
evalcond[2]=x2071;
evalcond[3]=((IkReal(0.850000000000000))*(x2070));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2072)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2071))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2073=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2073)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2073))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2075 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2075.valid ) {
    continue;
}
IkReal x2074=x2075.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2074));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2074))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2076=IKsin(j1);
IkReal x2077=IKcos(j1);
IkReal x2078=((IkReal(0.0450000000000000))*(x2077));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x2076)))+(((IkReal(0.0450000000000000))*(sj3)*(x2076)))+(x2078)+(((IkReal(-1.00000000000000))*(cj3)*(x2078)))+(((IkReal(0.550000000000000))*(x2076)))+(((IkReal(0.300000000000000))*(sj3)*(x2077))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2079=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2079)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2079))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2081 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2081.valid ) {
    continue;
}
IkReal x2080=x2081.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2080));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2080))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2082=IKsin(j1);
IkReal x2083=IKcos(j1);
IkReal x2084=((IkReal(0.0450000000000000))*(x2083));
evalcond[0]=((((IkReal(0.300000000000000))*(sj3)*(x2083)))+(x2084)+(((IkReal(0.300000000000000))*(cj3)*(x2082)))+(((IkReal(0.0450000000000000))*(sj3)*(x2082)))+(((IkReal(-1.00000000000000))*(cj3)*(x2084)))+(((IkReal(0.550000000000000))*(x2082))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2085=((IkReal(1.00000000000000))*(pp));
IkReal x2086=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2085)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2086;
evalcond[4]=x2086;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2085))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2088 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2088.valid ) {
    continue;
}
IkReal x2087=x2088.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2087));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2087))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2089=IKsin(j1);
IkReal x2090=IKcos(j1);
IkReal x2091=((IkReal(0.0450000000000000))*(x2090));
evalcond[0]=((x2091)+(((IkReal(0.300000000000000))*(sj3)*(x2090)))+(((IkReal(0.300000000000000))*(cj3)*(x2089)))+(((IkReal(0.0450000000000000))*(sj3)*(x2089)))+(((IkReal(-1.00000000000000))*(cj3)*(x2091)))+(((IkReal(0.550000000000000))*(x2089))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2092=((IkReal(1.00000000000000))*(pp));
IkReal x2093=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2092)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2093;
evalcond[4]=x2093;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2092))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2095 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2095.valid ) {
    continue;
}
IkReal x2094=x2095.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2094));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2094))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2096=IKsin(j1);
IkReal x2097=IKcos(j1);
IkReal x2098=((IkReal(0.0450000000000000))*(x2097));
evalcond[0]=((x2098)+(((IkReal(0.550000000000000))*(x2096)))+(((IkReal(0.300000000000000))*(sj3)*(x2097)))+(((IkReal(0.0450000000000000))*(sj3)*(x2096)))+(((IkReal(0.300000000000000))*(cj3)*(x2096)))+(((IkReal(-1.00000000000000))*(cj3)*(x2098))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2099=(cj3)*(cj3);
IkReal x2100=(sj3)*(sj3);
IkReal x2101=((cj3)*(sj3));
Atan2Value<IkReal> x2102 = IKatan2WithCheck(((gconst53)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x2099)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x2101)))+(((IkReal(-0.00202500000000000))*(x2100)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst53)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(0.0135000000000000))*(x2099)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x2100)))+(((IkReal(-0.0879750000000000))*(x2101)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2102.valid ) {
    continue;
}
j1array[0]=x2102.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2103=IKsin(j1);
IkReal x2104=IKcos(j1);
IkReal x2105=((IkReal(0.300000000000000))*(cj3));
IkReal x2106=((IkReal(0.0450000000000000))*(cj3));
IkReal x2107=((IkReal(0.0450000000000000))*(sj3));
IkReal x2108=((cj0)*(px));
IkReal x2109=((IkReal(0.300000000000000))*(sj3));
IkReal x2110=((IkReal(0.0450000000000000))*(x2103));
IkReal x2111=((IkReal(1.00000000000000))*(x2108));
IkReal x2112=((pz)*(x2103));
IkReal x2113=((pz)*(x2104));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2105)))+(((IkReal(-1.00000000000000))*(x2107)))+(((x2103)*(x2108)))+(x2113));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2103)*(x2106)))+(((x2103)*(x2109)))+(x2110)+(pz)+(((IkReal(-0.550000000000000))*(x2104)))+(((IkReal(-1.00000000000000))*(x2104)*(x2105)))+(((IkReal(-1.00000000000000))*(x2104)*(x2107))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2106)))+(x2112)+(x2109)+(((IkReal(-1.00000000000000))*(x2104)*(x2111))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x2104)))+(((x2104)*(x2109)))+(((x2103)*(x2105)))+(((x2103)*(x2107)))+(((IkReal(0.550000000000000))*(x2103)))+(((IkReal(-1.00000000000000))*(x2111)))+(((IkReal(-1.00000000000000))*(x2104)*(x2106))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2104)*(x2108)))+(((IkReal(-0.0900000000000000))*(x2112)))+(((IkReal(1.10000000000000))*(x2113)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2103)*(x2108))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2114=((IkReal(0.300000000000000))*(sj3));
IkReal x2115=((cj0)*(px));
IkReal x2116=((IkReal(0.0450000000000000))*(cj3));
IkReal x2117=((IkReal(0.0450000000000000))*(pz));
IkReal x2118=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x2119 = IKatan2WithCheck(((gconst52)*(((x2117)+(((IkReal(-0.0450000000000000))*(sj3)*(x2115)))+(((IkReal(-1.00000000000000))*(pz)*(x2116)))+(((IkReal(-0.550000000000000))*(x2115)))+(((pz)*(x2114)))+(((IkReal(-1.00000000000000))*(x2115)*(x2118)))))),((gconst52)*(((((IkReal(-1.00000000000000))*(x2114)*(x2115)))+(((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x2117)))+(((IkReal(-1.00000000000000))*(pz)*(x2118)))+(((IkReal(-0.0450000000000000))*(x2115)))+(((x2115)*(x2116)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2119.valid ) {
    continue;
}
j1array[0]=x2119.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2120=IKsin(j1);
IkReal x2121=IKcos(j1);
IkReal x2122=((IkReal(0.300000000000000))*(cj3));
IkReal x2123=((IkReal(0.0450000000000000))*(cj3));
IkReal x2124=((IkReal(0.0450000000000000))*(sj3));
IkReal x2125=((cj0)*(px));
IkReal x2126=((IkReal(0.300000000000000))*(sj3));
IkReal x2127=((IkReal(0.0450000000000000))*(x2120));
IkReal x2128=((IkReal(1.00000000000000))*(x2125));
IkReal x2129=((pz)*(x2120));
IkReal x2130=((pz)*(x2121));
evalcond[0]=((IkReal(-0.550000000000000))+(x2130)+(((x2120)*(x2125)))+(((IkReal(-1.00000000000000))*(x2124)))+(((IkReal(-1.00000000000000))*(x2122))));
evalcond[1]=((x2127)+(((IkReal(-1.00000000000000))*(x2120)*(x2123)))+(((IkReal(-0.550000000000000))*(x2121)))+(((IkReal(-1.00000000000000))*(x2121)*(x2124)))+(((IkReal(-1.00000000000000))*(x2121)*(x2122)))+(((x2120)*(x2126)))+(pz));
evalcond[2]=((IkReal(0.0450000000000000))+(x2126)+(x2129)+(((IkReal(-1.00000000000000))*(x2121)*(x2128)))+(((IkReal(-1.00000000000000))*(x2123))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x2121)))+(((IkReal(-1.00000000000000))*(x2121)*(x2123)))+(((x2120)*(x2122)))+(((x2120)*(x2124)))+(((x2121)*(x2126)))+(((IkReal(-1.00000000000000))*(x2128)))+(((IkReal(0.550000000000000))*(x2120))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2130)))+(((IkReal(1.10000000000000))*(x2120)*(x2125)))+(((IkReal(-0.0900000000000000))*(x2129)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2121)*(x2125))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2131=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2131;
evalcond[3]=((IkReal(-1.00000000000000))*(x2131));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign((((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=(((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst55;
IkReal x2132=((IkReal(0.0450000000000000))*(pz));
IkReal x2133=((cj0)*(px));
gconst55=IKsign(((((IkReal(-1.00000000000000))*(cj3)*(x2132)))+(x2132)+(((IkReal(-0.0450000000000000))*(sj3)*(x2133)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.550000000000000))*(x2133)))+(((IkReal(-0.300000000000000))*(cj3)*(x2133)))));
IkReal x2134=((cj0)*(px));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj3)*(x2134)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(-6.66666666666667))*(cj3)*(x2134)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-12.2222222222222))*(x2134)))+(pz));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2135=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2135))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2135))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2136=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x2136)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x2136))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x2136)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x2136)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x2136)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x2136)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2137=IKcos(j1);
IkReal x2138=IKsin(j1);
IkReal x2139=((pz)*(x2138));
IkReal x2140=((pz)*(x2137));
evalcond[0]=((IkReal(-0.850000000000000))+(x2140));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x2137))));
evalcond[2]=((IkReal(-1.00000000000000))*(x2139));
evalcond[3]=((IkReal(0.850000000000000))*(x2138));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2139)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2140))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2141=IKcos(j1);
IkReal x2142=IKsin(j1);
IkReal x2143=((pz)*(x2142));
IkReal x2144=((pz)*(x2141));
evalcond[0]=((IkReal(-0.850000000000000))+(x2144));
evalcond[1]=((((IkReal(-0.850000000000000))*(x2141)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x2143));
evalcond[3]=((IkReal(0.850000000000000))*(x2142));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2143)))+(((IkReal(1.10000000000000))*(x2144))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2145=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2145))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2145))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2146=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x2146)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x2146))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x2146)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x2146)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x2146)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x2146)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2147=IKcos(j1);
IkReal x2148=IKsin(j1);
IkReal x2149=((pz)*(x2148));
IkReal x2150=((pz)*(x2147));
evalcond[0]=((IkReal(-0.850000000000000))+(x2150));
evalcond[1]=((((IkReal(-0.850000000000000))*(x2147)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x2149));
evalcond[3]=((IkReal(0.850000000000000))*(x2148));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2149)))+(((IkReal(1.10000000000000))*(x2150))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2151=IKcos(j1);
IkReal x2152=IKsin(j1);
IkReal x2153=((pz)*(x2152));
IkReal x2154=((pz)*(x2151));
evalcond[0]=((IkReal(-0.850000000000000))+(x2154));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x2151))));
evalcond[2]=((IkReal(-1.00000000000000))*(x2153));
evalcond[3]=((IkReal(0.850000000000000))*(x2152));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2153)))+(((IkReal(1.10000000000000))*(x2154))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2155=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2155)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2155))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2157 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2157.valid ) {
    continue;
}
IkReal x2156=x2157.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2156));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2156))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2158=IKsin(j1);
IkReal x2159=IKcos(j1);
IkReal x2160=((IkReal(0.0450000000000000))*(x2159));
evalcond[0]=((((IkReal(-0.300000000000000))*(sj3)*(x2159)))+(((IkReal(0.300000000000000))*(cj3)*(x2158)))+(((IkReal(0.0450000000000000))*(sj3)*(x2158)))+(((IkReal(0.550000000000000))*(x2158)))+(((IkReal(-1.00000000000000))*(x2160)))+(((cj3)*(x2160))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2161=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2161)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2161))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2163 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2163.valid ) {
    continue;
}
IkReal x2162=x2163.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2162));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2162))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2164=IKsin(j1);
IkReal x2165=IKcos(j1);
IkReal x2166=((IkReal(0.0450000000000000))*(x2165));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x2164)))+(((IkReal(0.550000000000000))*(x2164)))+(((IkReal(-1.00000000000000))*(x2166)))+(((IkReal(-0.300000000000000))*(sj3)*(x2165)))+(((IkReal(0.300000000000000))*(cj3)*(x2164)))+(((cj3)*(x2166))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2167=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2167)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2167))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2169 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2169.valid ) {
    continue;
}
IkReal x2168=x2169.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2168));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2168))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2170=IKsin(j1);
IkReal x2171=IKcos(j1);
IkReal x2172=((IkReal(0.0450000000000000))*(x2171));
evalcond[0]=((((IkReal(0.550000000000000))*(x2170)))+(((cj3)*(x2172)))+(((IkReal(-0.300000000000000))*(sj3)*(x2171)))+(((IkReal(0.0450000000000000))*(sj3)*(x2170)))+(((IkReal(0.300000000000000))*(cj3)*(x2170)))+(((IkReal(-1.00000000000000))*(x2172))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2173=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2173)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2173))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2175 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2175.valid ) {
    continue;
}
IkReal x2174=x2175.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2174));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2174))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2176=IKsin(j1);
IkReal x2177=IKcos(j1);
IkReal x2178=((IkReal(0.0450000000000000))*(x2177));
evalcond[0]=((((IkReal(0.550000000000000))*(x2176)))+(((cj3)*(x2178)))+(((IkReal(-0.300000000000000))*(sj3)*(x2177)))+(((IkReal(0.0450000000000000))*(sj3)*(x2176)))+(((IkReal(0.300000000000000))*(cj3)*(x2176)))+(((IkReal(-1.00000000000000))*(x2178))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2179=(sj3)*(sj3);
IkReal x2180=(cj3)*(cj3);
IkReal x2181=((cj3)*(sj3));
Atan2Value<IkReal> x2182 = IKatan2WithCheck(((gconst55)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x2179)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x2181)))+(((IkReal(-0.0900000000000000))*(x2180)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst55)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(0.0135000000000000))*(x2179)))+(((IkReal(-0.0135000000000000))*(x2180)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0879750000000000))*(x2181)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2182.valid ) {
    continue;
}
j1array[0]=x2182.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2183=IKsin(j1);
IkReal x2184=IKcos(j1);
IkReal x2185=((IkReal(0.300000000000000))*(cj3));
IkReal x2186=((IkReal(0.0450000000000000))*(cj3));
IkReal x2187=((cj0)*(px));
IkReal x2188=((IkReal(0.0450000000000000))*(sj3));
IkReal x2189=((IkReal(0.300000000000000))*(sj3));
IkReal x2190=((IkReal(0.0450000000000000))*(x2183));
IkReal x2191=((pz)*(x2183));
IkReal x2192=((pz)*(x2184));
evalcond[0]=((IkReal(-0.550000000000000))+(x2192)+(((x2183)*(x2187)))+(((IkReal(-1.00000000000000))*(x2188)))+(((IkReal(-1.00000000000000))*(x2185))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x2184)))+(((x2183)*(x2186)))+(pz)+(((IkReal(-1.00000000000000))*(x2190)))+(((IkReal(-1.00000000000000))*(x2184)*(x2185)))+(((IkReal(-1.00000000000000))*(x2184)*(x2188)))+(((IkReal(-1.00000000000000))*(x2183)*(x2189))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2191)))+(x2189)+(((IkReal(-1.00000000000000))*(x2186)))+(((x2184)*(x2187))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2187)))+(((x2183)*(x2185)))+(((x2183)*(x2188)))+(((IkReal(-0.0450000000000000))*(x2184)))+(((IkReal(-1.00000000000000))*(x2184)*(x2189)))+(((x2184)*(x2186)))+(((IkReal(0.550000000000000))*(x2183))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x2184)*(x2187)))+(((IkReal(1.10000000000000))*(x2183)*(x2187)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2192)))+(((IkReal(0.0900000000000000))*(x2191))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2193=((pz)*(sj3));
IkReal x2194=((cj0)*(px));
IkReal x2195=((IkReal(0.0450000000000000))*(cj3));
IkReal x2196=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x2197 = IKatan2WithCheck(((gconst54)*(((((IkReal(0.300000000000000))*(x2193)))+(((x2194)*(x2196)))+(((IkReal(0.0450000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x2195)))+(((IkReal(0.0450000000000000))*(sj3)*(x2194)))+(((IkReal(0.550000000000000))*(x2194)))))),((gconst54)*(((((x2194)*(x2195)))+(((IkReal(-0.300000000000000))*(sj3)*(x2194)))+(((IkReal(0.0450000000000000))*(x2193)))+(((IkReal(-0.0450000000000000))*(x2194)))+(((IkReal(0.550000000000000))*(pz)))+(((pz)*(x2196)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2197.valid ) {
    continue;
}
j1array[0]=x2197.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2198=IKsin(j1);
IkReal x2199=IKcos(j1);
IkReal x2200=((IkReal(0.300000000000000))*(cj3));
IkReal x2201=((IkReal(0.0450000000000000))*(cj3));
IkReal x2202=((cj0)*(px));
IkReal x2203=((IkReal(0.0450000000000000))*(sj3));
IkReal x2204=((IkReal(0.300000000000000))*(sj3));
IkReal x2205=((IkReal(0.0450000000000000))*(x2198));
IkReal x2206=((pz)*(x2198));
IkReal x2207=((pz)*(x2199));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2198)*(x2202)))+(x2207)+(((IkReal(-1.00000000000000))*(x2203)))+(((IkReal(-1.00000000000000))*(x2200))));
evalcond[1]=((((x2198)*(x2201)))+(((IkReal(-0.550000000000000))*(x2199)))+(((IkReal(-1.00000000000000))*(x2205)))+(((IkReal(-1.00000000000000))*(x2198)*(x2204)))+(pz)+(((IkReal(-1.00000000000000))*(x2199)*(x2203)))+(((IkReal(-1.00000000000000))*(x2199)*(x2200))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2206)))+(x2204)+(((IkReal(-1.00000000000000))*(x2201)))+(((x2199)*(x2202))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2202)))+(((x2198)*(x2203)))+(((x2198)*(x2200)))+(((IkReal(-1.00000000000000))*(x2199)*(x2204)))+(((x2199)*(x2201)))+(((IkReal(-0.0450000000000000))*(x2199)))+(((IkReal(0.550000000000000))*(x2198))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2206)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2199)*(x2202)))+(((IkReal(1.10000000000000))*(x2207)))+(((IkReal(1.10000000000000))*(x2198)*(x2202))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2208=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2208;
evalcond[3]=x2208;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign(((((cj0)*(px)))+(((py)*(sj0)))));
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2209=((cj0)*(px));
IkReal x2210=((py)*(sj0));
IkReal x2211=((IkReal(6.66666666666667))*(cj3));
IkReal x2212=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((x2209)+(x2210));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x2210)*(x2211)))+(((IkReal(-1.00000000000000))*(x2210)*(x2212)))+(((IkReal(-12.2222222222222))*(x2210)))+(((IkReal(-12.2222222222222))*(x2209)))+(((IkReal(-1.00000000000000))*(x2209)*(x2212)))+(((IkReal(-1.00000000000000))*(x2209)*(x2211))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2213=((py)*(sj0));
IkReal x2214=((cj0)*(px));
IkReal x2215=((IkReal(6.66666666666667))*(sj3));
IkReal x2216=((IkReal(1.00000000000000))*(x2214));
IkReal x2217=((IkReal(1.00000000000000))*(x2213));
IkReal x2218=((x2217)+(x2216));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x2214)*(x2215)))+(((IkReal(-1.00000000000000))*(x2218)))+(((IkReal(-1.00000000000000))*(x2213)*(x2215)))+(((cj3)*(x2213)))+(((cj3)*(x2214))));
dummyeval[1]=((IkReal(-1.00000000000000))*(x2218));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
Atan2Value<IkReal> x2221 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2221.valid ) {
    continue;
}
IkReal x2219=x2221.value;
IkReal x2220=((((IkReal(-1.00000000000000))*(py)*(IKcos(x2219))))+(((IkReal(-1.00000000000000))*(px)*(IKsin(x2219)))));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x2219)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2220;
evalcond[3]=x2220;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
Atan2Value<IkReal> x2223 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2223.valid ) {
    continue;
}
IkReal x2222=x2223.value;
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(IKsin(x2222))))+(((px)*(IKcos(x2222)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
Atan2Value<IkReal> x2229 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2229.valid ) {
    continue;
}
IkReal x2224=x2229.value;
IkReal x2225=IKcos(x2224);
IkReal x2226=IKsin(x2224);
IkReal x2227=((px)*(x2225));
IkReal x2228=((py)*(x2226));
dummyeval[0]=((x2227)+(((IkReal(-1.00000000000000))*(x2228))));
dummyeval[1]=((((IkReal(-2.00000000000000))*(x2227)*(x2228)))+((x2228)*(x2228))+((x2227)*(x2227)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2236 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2236.valid ) {
    continue;
}
IkReal x2230=x2236.value;
IkReal x2231=IKsin(x2230);
IkReal x2232=IKcos(x2230);
IkReal x2233=((px)*(x2232));
IkReal x2234=((py)*(x2231));
IkReal x2235=((IkReal(20.0000000000000))*(x2234));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(-1.00000000000000))*(x2235)))+(((IkReal(20.0000000000000))*(x2233))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2235)))+(((IkReal(20.0000000000000))*(x2233)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.80000000000000))*((x2234)*(x2234))))+(((IkReal(-3.60000000000000))*(x2233)*(x2234)))+(((IkReal(1.80000000000000))*((x2233)*(x2233)))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x2234)*(x2234))))+(((IkReal(-3.60000000000000))*(x2233)*(x2234)))+(((IkReal(1.80000000000000))*((x2233)*(x2233))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pp)*(x2235)))+(((IkReal(20.0000000000000))*(pp)*(x2233)))+(((IkReal(-14.4500000000000))*(x2233)))+(((IkReal(14.4500000000000))*(x2234))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(-1.00000000000000))*(x2235)))+(((IkReal(20.0000000000000))*(x2233))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2235)))+(((IkReal(20.0000000000000))*(x2233)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(1.80000000000000))*((x2234)*(x2234))))+(((IkReal(-3.60000000000000))*(x2233)*(x2234)))+(((IkReal(1.80000000000000))*((x2233)*(x2233)))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x2234)*(x2234))))+(((IkReal(-3.60000000000000))*(x2233)*(x2234)))+(((IkReal(1.80000000000000))*((x2233)*(x2233))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pp)*(x2235)))+(((IkReal(20.0000000000000))*(pp)*(x2233)))+(((IkReal(-14.4500000000000))*(x2233)))+(((IkReal(14.4500000000000))*(x2234)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(-1.00000000000000))*(x2235)))+(((IkReal(20.0000000000000))*(x2233))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2235)))+(((IkReal(20.0000000000000))*(x2233)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(1.80000000000000))*((x2234)*(x2234))))+(((IkReal(-3.60000000000000))*(x2233)*(x2234)))+(((IkReal(1.80000000000000))*((x2233)*(x2233)))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x2234)*(x2234))))+(((IkReal(-3.60000000000000))*(x2233)*(x2234)))+(((IkReal(1.80000000000000))*((x2233)*(x2233))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pp)*(x2235)))+(((IkReal(20.0000000000000))*(pp)*(x2233)))+(((IkReal(-14.4500000000000))*(x2233)))+(((IkReal(14.4500000000000))*(x2234)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2237=IKsin(j1);
Atan2Value<IkReal> x2246 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2246.valid ) {
    continue;
}
IkReal x2238=x2246.value;
IkReal x2239=IKcos(j1);
IkReal x2240=IKsin(x2238);
IkReal x2241=IKcos(x2238);
IkReal x2242=((IkReal(0.0900000000000000))*(x2239));
IkReal x2243=((IkReal(1.10000000000000))*(x2237));
IkReal x2244=((py)*(x2240));
IkReal x2245=((px)*(x2241));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x2237)*(x2244)))+(((x2237)*(x2245))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2239));
evalcond[2]=((((IkReal(-1.00000000000000))*(x2239)*(x2245)))+(((x2239)*(x2244))));
evalcond[3]=((x2244)+(((IkReal(-1.00000000000000))*(x2245)))+(((IkReal(0.850000000000000))*(x2237))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2243)*(x2245)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2243)*(x2244)))+(((IkReal(-1.00000000000000))*(x2242)*(x2244)))+(((x2242)*(x2245))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2252 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2252.valid ) {
    continue;
}
IkReal x2247=x2252.value;
IkReal x2248=IKcos(x2247);
IkReal x2249=IKsin(x2247);
IkReal x2250=((px)*(x2248));
IkReal x2251=((py)*(x2249));
if( IKabs(((((IkReal(1.17647058823529))*(x2250)))+(((IkReal(-1.17647058823529))*(x2251))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x2250)))+(((IkReal(-1.53000000000000))*(x2251))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2250)))+(((IkReal(-1.53000000000000))*(x2251)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(44.0000000000000))*(x2250)*(x2251)))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2251)*(x2251))))+(((IkReal(-22.0000000000000))*((x2250)*(x2250)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x2250)))+(((IkReal(-1.17647058823529))*(x2251)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x2250)))+(((IkReal(-1.53000000000000))*(x2251))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2250)))+(((IkReal(-1.53000000000000))*(x2251)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(44.0000000000000))*(x2250)*(x2251)))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2251)*(x2251))))+(((IkReal(-22.0000000000000))*((x2250)*(x2250))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x2250)))+(((IkReal(-1.17647058823529))*(x2251)))), ((((IKabs(((((IkReal(1.53000000000000))*(x2250)))+(((IkReal(-1.53000000000000))*(x2251))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2250)))+(((IkReal(-1.53000000000000))*(x2251)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(44.0000000000000))*(x2250)*(x2251)))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2251)*(x2251))))+(((IkReal(-22.0000000000000))*((x2250)*(x2250))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2253=IKsin(j1);
Atan2Value<IkReal> x2262 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2262.valid ) {
    continue;
}
IkReal x2254=x2262.value;
IkReal x2255=IKcos(j1);
IkReal x2256=IKsin(x2254);
IkReal x2257=IKcos(x2254);
IkReal x2258=((IkReal(0.0900000000000000))*(x2255));
IkReal x2259=((IkReal(1.10000000000000))*(x2253));
IkReal x2260=((py)*(x2256));
IkReal x2261=((px)*(x2257));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x2253)*(x2260)))+(((x2253)*(x2261))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2255));
evalcond[2]=((((x2255)*(x2260)))+(((IkReal(-1.00000000000000))*(x2255)*(x2261))));
evalcond[3]=((((IkReal(0.850000000000000))*(x2253)))+(x2260)+(((IkReal(-1.00000000000000))*(x2261))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2258)*(x2261)))+(((x2259)*(x2261)))+(((IkReal(-1.00000000000000))*(x2258)*(x2260)))+(((IkReal(-1.00000000000000))*(x2259)*(x2260)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x2266 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2266.valid ) {
    continue;
}
IkReal x2263=x2266.value;
IkReal x2264=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2263))));
IkReal x2265=((((IkReal(-1.00000000000000))*(py)*(IKcos(x2264))))+(((px)*(IKsin(x2264)))));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x2263)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2265;
evalcond[3]=x2265;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
Atan2Value<IkReal> x2268 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2268.valid ) {
    continue;
}
IkReal x2267=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2268.value))));
dummyeval[0]=((((px)*(IKcos(x2267))))+(((py)*(IKsin(x2267)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
Atan2Value<IkReal> x2274 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2274.valid ) {
    continue;
}
IkReal x2269=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2274.value))));
IkReal x2270=IKcos(x2269);
IkReal x2271=IKsin(x2269);
IkReal x2272=((px)*(x2270));
IkReal x2273=((py)*(x2271));
dummyeval[0]=((x2273)+(x2272));
dummyeval[1]=(((x2272)*(x2272))+(((IkReal(2.00000000000000))*(x2272)*(x2273)))+((x2273)*(x2273)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2275=((IkReal(20.0000000000000))*(pp));
Atan2Value<IkReal> x2282 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2282.valid ) {
    continue;
}
IkReal x2276=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2282.value))));
IkReal x2277=IKcos(x2276);
IkReal x2278=IKsin(x2276);
IkReal x2279=((px)*(x2277));
IkReal x2280=((py)*(x2278));
IkReal x2281=((IkReal(20.0000000000000))*(x2279));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((x2281)+(((IkReal(20.0000000000000))*(x2280))))) != 0)?((IkReal)1/(((x2281)+(((IkReal(20.0000000000000))*(x2280)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(3.60000000000000))*(x2279)*(x2280)))+(((IkReal(1.80000000000000))*((x2279)*(x2279))))+(((IkReal(1.80000000000000))*((x2280)*(x2280)))))) != 0)?((IkReal)1/(((((IkReal(3.60000000000000))*(x2279)*(x2280)))+(((IkReal(1.80000000000000))*((x2279)*(x2279))))+(((IkReal(1.80000000000000))*((x2280)*(x2280))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2279)))+(((x2275)*(x2280)))+(((IkReal(-14.4500000000000))*(x2280)))+(((x2275)*(x2279))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((x2281)+(((IkReal(20.0000000000000))*(x2280))))) != 0)?((IkReal)1/(((x2281)+(((IkReal(20.0000000000000))*(x2280)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(3.60000000000000))*(x2279)*(x2280)))+(((IkReal(1.80000000000000))*((x2279)*(x2279))))+(((IkReal(1.80000000000000))*((x2280)*(x2280)))))) != 0)?((IkReal)1/(((((IkReal(3.60000000000000))*(x2279)*(x2280)))+(((IkReal(1.80000000000000))*((x2279)*(x2279))))+(((IkReal(1.80000000000000))*((x2280)*(x2280))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2279)))+(((x2275)*(x2280)))+(((IkReal(-14.4500000000000))*(x2280)))+(((x2275)*(x2279)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((x2281)+(((IkReal(20.0000000000000))*(x2280))))) != 0)?((IkReal)1/(((x2281)+(((IkReal(20.0000000000000))*(x2280)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(3.60000000000000))*(x2279)*(x2280)))+(((IkReal(1.80000000000000))*((x2279)*(x2279))))+(((IkReal(1.80000000000000))*((x2280)*(x2280)))))) != 0)?((IkReal)1/(((((IkReal(3.60000000000000))*(x2279)*(x2280)))+(((IkReal(1.80000000000000))*((x2279)*(x2279))))+(((IkReal(1.80000000000000))*((x2280)*(x2280))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2279)))+(((x2275)*(x2280)))+(((IkReal(-14.4500000000000))*(x2280)))+(((x2275)*(x2279)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2283=IKsin(j1);
IkReal x2284=IKcos(j1);
IkReal x2285=x2276;
IkReal x2286=((IkReal(1.00000000000000))*(x2284));
IkReal x2287=((IkReal(1.10000000000000))*(x2283));
IkReal x2288=((IkReal(0.0900000000000000))*(x2284));
IkReal x2289=IKsin(x2285);
IkReal x2290=IKcos(x2285);
IkReal x2291=((py)*(x2289));
IkReal x2292=((px)*(x2290));
IkReal x2293=((IkReal(1.00000000000000))*(x2291));
IkReal x2294=((x2283)*(x2291));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2283)*(x2292)))+(x2294));
evalcond[1]=((IkReal(-0.850000000000000))*(x2284));
evalcond[2]=((((IkReal(-1.00000000000000))*(x2286)*(x2291)))+(((IkReal(-1.00000000000000))*(x2286)*(x2292))));
evalcond[3]=((((IkReal(0.850000000000000))*(x2283)))+(((IkReal(-1.00000000000000))*(x2292)))+(((IkReal(-1.00000000000000))*(x2293))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2287)*(x2292)))+(((x2287)*(x2291)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2288)*(x2292)))+(((x2288)*(x2291))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2300 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2300.valid ) {
    continue;
}
IkReal x2295=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2300.value))));
IkReal x2296=IKsin(x2295);
IkReal x2297=IKcos(x2295);
IkReal x2298=((py)*(x2296));
IkReal x2299=((px)*(x2297));
if( IKabs(((((IkReal(1.17647058823529))*(x2298)))+(((IkReal(1.17647058823529))*(x2299))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x2298)))+(((IkReal(1.53000000000000))*(x2299))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2298)))+(((IkReal(1.53000000000000))*(x2299)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2298)*(x2298))))+(((IkReal(-44.0000000000000))*(x2298)*(x2299)))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2299)*(x2299)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x2298)))+(((IkReal(1.17647058823529))*(x2299)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x2298)))+(((IkReal(1.53000000000000))*(x2299))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2298)))+(((IkReal(1.53000000000000))*(x2299)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2298)*(x2298))))+(((IkReal(-44.0000000000000))*(x2298)*(x2299)))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2299)*(x2299))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x2298)))+(((IkReal(1.17647058823529))*(x2299)))), ((((IKabs(((((IkReal(1.53000000000000))*(x2298)))+(((IkReal(1.53000000000000))*(x2299))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2298)))+(((IkReal(1.53000000000000))*(x2299)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2298)*(x2298))))+(((IkReal(-44.0000000000000))*(x2298)*(x2299)))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2299)*(x2299))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2301=IKsin(j1);
IkReal x2302=IKcos(j1);
IkReal x2303=x2295;
IkReal x2304=((IkReal(1.00000000000000))*(x2302));
IkReal x2305=((IkReal(1.10000000000000))*(x2301));
IkReal x2306=((IkReal(0.0900000000000000))*(x2302));
IkReal x2307=IKsin(x2303);
IkReal x2308=IKcos(x2303);
IkReal x2309=((py)*(x2307));
IkReal x2310=((px)*(x2308));
IkReal x2311=((IkReal(1.00000000000000))*(x2309));
IkReal x2312=((x2301)*(x2309));
evalcond[0]=((IkReal(-0.850000000000000))+(x2312)+(((x2301)*(x2310))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2302));
evalcond[2]=((((IkReal(-1.00000000000000))*(x2304)*(x2310)))+(((IkReal(-1.00000000000000))*(x2304)*(x2309))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2310)))+(((IkReal(0.850000000000000))*(x2301)))+(((IkReal(-1.00000000000000))*(x2311))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2305)*(x2309)))+(((x2306)*(x2310)))+(((x2306)*(x2309)))+(((x2305)*(x2310)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2313=((IkReal(3.14159265358979))+(j0));
Atan2Value<IkReal> x2316 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2316.valid ) {
    continue;
}
IkReal x2314=x2316.value;
IkReal x2315=((((IkReal(-1.00000000000000))*(py)*(IKcos(x2314))))+(((IkReal(-1.00000000000000))*(px)*(IKsin(x2314)))));
Atan2Value<IkReal> x2317 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2317.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x2314)+(x2313)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x2313)+(x2317.value)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2315;
evalcond[3]=x2315;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2318=((IkReal(6.66666666666667))*(cj3));
IkReal x2319=x2314;
IkReal x2320=IKsin(x2319);
IkReal x2321=IKcos(x2319);
IkReal x2322=((px)*(x2321));
IkReal x2323=((py)*(x2320));
dummyeval[0]=((x2322)+(((IkReal(-1.00000000000000))*(x2323))));
dummyeval[1]=((((sj3)*(x2323)))+(((IkReal(-1.00000000000000))*(x2318)*(x2322)))+(((IkReal(-1.00000000000000))*(sj3)*(x2322)))+(((IkReal(12.2222222222222))*(x2323)))+(((x2318)*(x2323)))+(((IkReal(-12.2222222222222))*(x2322))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2324=((IkReal(0.0450000000000000))*(sj3));
IkReal x2325=((IkReal(0.300000000000000))*(cj3));
IkReal x2326=x2314;
IkReal x2327=IKsin(x2326);
IkReal x2328=IKcos(x2326);
IkReal x2329=((px)*(x2328));
IkReal x2330=((py)*(x2327));
if( IKabs(((((IKabs(((x2329)+(((IkReal(-1.00000000000000))*(x2330))))) != 0)?((IkReal)1/(((x2329)+(((IkReal(-1.00000000000000))*(x2330)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2325)+(x2324))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x2324)*(x2329)))+(((IkReal(-0.550000000000000))*(x2329)))+(((x2324)*(x2330)))+(((IkReal(0.550000000000000))*(x2330)))+(((x2325)*(x2330)))+(((IkReal(-1.00000000000000))*(x2325)*(x2329))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2324)*(x2329)))+(((IkReal(-0.550000000000000))*(x2329)))+(((x2324)*(x2330)))+(((IkReal(0.550000000000000))*(x2330)))+(((x2325)*(x2330)))+(((IkReal(-1.00000000000000))*(x2325)*(x2329)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x2329)+(((IkReal(-1.00000000000000))*(x2330))))) != 0)?((IkReal)1/(((x2329)+(((IkReal(-1.00000000000000))*(x2330)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2325)+(x2324)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x2324)*(x2329)))+(((IkReal(-0.550000000000000))*(x2329)))+(((x2324)*(x2330)))+(((IkReal(0.550000000000000))*(x2330)))+(((x2325)*(x2330)))+(((IkReal(-1.00000000000000))*(x2325)*(x2329))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2324)*(x2329)))+(((IkReal(-0.550000000000000))*(x2329)))+(((x2324)*(x2330)))+(((IkReal(0.550000000000000))*(x2330)))+(((x2325)*(x2330)))+(((IkReal(-1.00000000000000))*(x2325)*(x2329)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x2329)+(((IkReal(-1.00000000000000))*(x2330))))) != 0)?((IkReal)1/(((x2329)+(((IkReal(-1.00000000000000))*(x2330)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2325)+(x2324)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x2324)*(x2329)))+(((IkReal(-0.550000000000000))*(x2329)))+(((x2324)*(x2330)))+(((IkReal(0.550000000000000))*(x2330)))+(((x2325)*(x2330)))+(((IkReal(-1.00000000000000))*(x2325)*(x2329))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2324)*(x2329)))+(((IkReal(-0.550000000000000))*(x2329)))+(((x2324)*(x2330)))+(((IkReal(0.550000000000000))*(x2330)))+(((x2325)*(x2330)))+(((IkReal(-1.00000000000000))*(x2325)*(x2329)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2331=IKsin(j1);
IkReal x2332=IKcos(j1);
IkReal x2333=((IkReal(0.300000000000000))*(cj3));
IkReal x2334=((IkReal(0.0450000000000000))*(cj3));
IkReal x2335=((IkReal(0.300000000000000))*(sj3));
IkReal x2336=((IkReal(0.0450000000000000))*(sj3));
IkReal x2337=((IkReal(0.0450000000000000))*(x2331));
IkReal x2338=((IkReal(0.0900000000000000))*(x2332));
IkReal x2339=((IkReal(1.10000000000000))*(x2331));
IkReal x2340=x2314;
IkReal x2341=IKsin(x2340);
IkReal x2342=IKcos(x2340);
IkReal x2343=((px)*(x2342));
IkReal x2344=((py)*(x2341));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2331)*(x2343)))+(((IkReal(-1.00000000000000))*(x2336)))+(((IkReal(-1.00000000000000))*(x2333)))+(((IkReal(-1.00000000000000))*(x2331)*(x2344))));
evalcond[1]=((((x2331)*(x2335)))+(((IkReal(-1.00000000000000))*(x2332)*(x2336)))+(((IkReal(-1.00000000000000))*(x2332)*(x2333)))+(x2337)+(((IkReal(-1.00000000000000))*(x2331)*(x2334)))+(((IkReal(-0.550000000000000))*(x2332))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2334)))+(((IkReal(-1.00000000000000))*(x2332)*(x2343)))+(x2335)+(((x2332)*(x2344))));
evalcond[3]=((((x2331)*(x2333)))+(((x2331)*(x2336)))+(((IkReal(-1.00000000000000))*(x2332)*(x2334)))+(x2344)+(((x2332)*(x2335)))+(((IkReal(0.0450000000000000))*(x2332)))+(((IkReal(-1.00000000000000))*(x2343)))+(((IkReal(0.550000000000000))*(x2331))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2339)*(x2344)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2338)*(x2343)))+(((x2339)*(x2343)))+(((IkReal(-1.00000000000000))*(x2338)*(x2344))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2345=((IkReal(0.300000000000000))*(sj3));
IkReal x2346=((IkReal(0.300000000000000))*(cj3));
IkReal x2347=x2314;
IkReal x2348=IKcos(x2347);
IkReal x2349=IKsin(x2347);
IkReal x2350=((px)*(x2348));
IkReal x2351=((py)*(x2349));
IkReal x2352=((IkReal(0.0450000000000000))*(x2351));
Atan2Value<IkReal> x2353 = IKatan2WithCheck(((gconst57)*(((((x2346)*(x2350)))+(((IkReal(-1.00000000000000))*(x2346)*(x2351)))+(((IkReal(0.0450000000000000))*(sj3)*(x2350)))+(((IkReal(0.550000000000000))*(x2350)))+(((IkReal(-1.00000000000000))*(sj3)*(x2352)))+(((IkReal(-0.550000000000000))*(x2351)))))),((gconst57)*(((((IkReal(-1.00000000000000))*(x2345)*(x2351)))+(((IkReal(0.0450000000000000))*(x2350)))+(((cj3)*(x2352)))+(((x2345)*(x2350)))+(((IkReal(-0.0450000000000000))*(cj3)*(x2350)))+(((IkReal(-1.00000000000000))*(x2352)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2353.valid ) {
    continue;
}
j1array[0]=x2353.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2354=IKsin(j1);
IkReal x2355=IKcos(j1);
IkReal x2356=((IkReal(0.300000000000000))*(cj3));
IkReal x2357=((IkReal(0.0450000000000000))*(cj3));
IkReal x2358=((IkReal(0.300000000000000))*(sj3));
IkReal x2359=((IkReal(0.0450000000000000))*(sj3));
IkReal x2360=((IkReal(0.0450000000000000))*(x2354));
IkReal x2361=((IkReal(0.0900000000000000))*(x2355));
IkReal x2362=((IkReal(1.10000000000000))*(x2354));
IkReal x2363=x2314;
IkReal x2364=IKsin(x2363);
IkReal x2365=IKcos(x2363);
IkReal x2366=((px)*(x2365));
IkReal x2367=((py)*(x2364));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2354)*(x2366)))+(((IkReal(-1.00000000000000))*(x2354)*(x2367)))+(((IkReal(-1.00000000000000))*(x2356)))+(((IkReal(-1.00000000000000))*(x2359))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2354)*(x2357)))+(x2360)+(((IkReal(-1.00000000000000))*(x2355)*(x2356)))+(((IkReal(-1.00000000000000))*(x2355)*(x2359)))+(((x2354)*(x2358)))+(((IkReal(-0.550000000000000))*(x2355))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2358)+(((x2355)*(x2367)))+(((IkReal(-1.00000000000000))*(x2355)*(x2366)))+(((IkReal(-1.00000000000000))*(x2357))));
evalcond[3]=((x2367)+(((IkReal(-1.00000000000000))*(x2355)*(x2357)))+(((IkReal(0.0450000000000000))*(x2355)))+(((x2354)*(x2359)))+(((x2354)*(x2356)))+(((IkReal(0.550000000000000))*(x2354)))+(((IkReal(-1.00000000000000))*(x2366)))+(((x2355)*(x2358))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x2361)*(x2366)))+(((IkReal(-1.00000000000000))*(x2361)*(x2367)))+(((x2362)*(x2366)))+(((IkReal(-1.00000000000000))*(x2362)*(x2367))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x2370 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2370.valid ) {
    continue;
}
IkReal x2368=x2370.value;
IkReal x2369=((((IkReal(-1.00000000000000))*(px)*(IKsin(x2368))))+(((IkReal(-1.00000000000000))*(py)*(IKcos(x2368)))));
Atan2Value<IkReal> x2371 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2371.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x2371.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x2368)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2369;
evalcond[3]=x2369;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2372=((IkReal(6.66666666666667))*(cj3));
IkReal x2373=x2368;
IkReal x2374=IKsin(x2373);
IkReal x2375=IKcos(x2373);
IkReal x2376=((px)*(x2375));
IkReal x2377=((py)*(x2374));
dummyeval[0]=((x2376)+(((IkReal(-1.00000000000000))*(x2377))));
dummyeval[1]=((((x2372)*(x2377)))+(((IkReal(-12.2222222222222))*(x2376)))+(((sj3)*(x2377)))+(((IkReal(12.2222222222222))*(x2377)))+(((IkReal(-1.00000000000000))*(x2372)*(x2376)))+(((IkReal(-1.00000000000000))*(sj3)*(x2376))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2378=((IkReal(0.0450000000000000))*(sj3));
IkReal x2379=((IkReal(0.300000000000000))*(cj3));
IkReal x2380=x2368;
IkReal x2381=IKsin(x2380);
IkReal x2382=IKcos(x2380);
IkReal x2383=((px)*(x2382));
IkReal x2384=((py)*(x2381));
if( IKabs(((((IKabs(((x2383)+(((IkReal(-1.00000000000000))*(x2384))))) != 0)?((IkReal)1/(((x2383)+(((IkReal(-1.00000000000000))*(x2384)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2378)+(x2379))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-0.550000000000000))*(x2383)))+(((IkReal(-1.00000000000000))*(x2378)*(x2383)))+(((IkReal(0.550000000000000))*(x2384)))+(((IkReal(-1.00000000000000))*(x2379)*(x2383)))+(((x2379)*(x2384)))+(((x2378)*(x2384))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x2383)))+(((IkReal(-1.00000000000000))*(x2378)*(x2383)))+(((IkReal(0.550000000000000))*(x2384)))+(((IkReal(-1.00000000000000))*(x2379)*(x2383)))+(((x2379)*(x2384)))+(((x2378)*(x2384)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x2383)+(((IkReal(-1.00000000000000))*(x2384))))) != 0)?((IkReal)1/(((x2383)+(((IkReal(-1.00000000000000))*(x2384)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2378)+(x2379)))))+IKsqr(((((IKabs(((((IkReal(-0.550000000000000))*(x2383)))+(((IkReal(-1.00000000000000))*(x2378)*(x2383)))+(((IkReal(0.550000000000000))*(x2384)))+(((IkReal(-1.00000000000000))*(x2379)*(x2383)))+(((x2379)*(x2384)))+(((x2378)*(x2384))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x2383)))+(((IkReal(-1.00000000000000))*(x2378)*(x2383)))+(((IkReal(0.550000000000000))*(x2384)))+(((IkReal(-1.00000000000000))*(x2379)*(x2383)))+(((x2379)*(x2384)))+(((x2378)*(x2384)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x2383)+(((IkReal(-1.00000000000000))*(x2384))))) != 0)?((IkReal)1/(((x2383)+(((IkReal(-1.00000000000000))*(x2384)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2378)+(x2379)))), ((((IKabs(((((IkReal(-0.550000000000000))*(x2383)))+(((IkReal(-1.00000000000000))*(x2378)*(x2383)))+(((IkReal(0.550000000000000))*(x2384)))+(((IkReal(-1.00000000000000))*(x2379)*(x2383)))+(((x2379)*(x2384)))+(((x2378)*(x2384))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x2383)))+(((IkReal(-1.00000000000000))*(x2378)*(x2383)))+(((IkReal(0.550000000000000))*(x2384)))+(((IkReal(-1.00000000000000))*(x2379)*(x2383)))+(((x2379)*(x2384)))+(((x2378)*(x2384)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2385=IKsin(j1);
IkReal x2386=IKcos(j1);
IkReal x2387=((IkReal(0.300000000000000))*(cj3));
IkReal x2388=((IkReal(0.0450000000000000))*(cj3));
IkReal x2389=((IkReal(0.300000000000000))*(sj3));
IkReal x2390=((IkReal(0.0450000000000000))*(sj3));
IkReal x2391=((IkReal(0.0450000000000000))*(x2385));
IkReal x2392=((IkReal(0.0900000000000000))*(x2386));
IkReal x2393=((IkReal(1.10000000000000))*(x2385));
IkReal x2394=x2368;
IkReal x2395=IKsin(x2394);
IkReal x2396=IKcos(x2394);
IkReal x2397=((px)*(x2396));
IkReal x2398=((py)*(x2395));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2385)*(x2397)))+(((IkReal(-1.00000000000000))*(x2387)))+(((IkReal(-1.00000000000000))*(x2390)))+(((IkReal(-1.00000000000000))*(x2385)*(x2398))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x2386)))+(((x2385)*(x2389)))+(x2391)+(((IkReal(-1.00000000000000))*(x2386)*(x2387)))+(((IkReal(-1.00000000000000))*(x2386)*(x2390)))+(((IkReal(-1.00000000000000))*(x2385)*(x2388))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2389)+(((IkReal(-1.00000000000000))*(x2388)))+(((IkReal(-1.00000000000000))*(x2386)*(x2397)))+(((x2386)*(x2398))));
evalcond[3]=((((x2385)*(x2387)))+(x2398)+(((x2385)*(x2390)))+(((IkReal(-1.00000000000000))*(x2386)*(x2388)))+(((IkReal(0.550000000000000))*(x2385)))+(((IkReal(-1.00000000000000))*(x2397)))+(((IkReal(0.0450000000000000))*(x2386)))+(((x2386)*(x2389))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2392)*(x2397)))+(((x2393)*(x2397)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2392)*(x2398)))+(((IkReal(-1.00000000000000))*(x2393)*(x2398))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2399=((IkReal(0.300000000000000))*(sj3));
IkReal x2400=((IkReal(0.300000000000000))*(cj3));
IkReal x2401=x2368;
IkReal x2402=IKcos(x2401);
IkReal x2403=IKsin(x2401);
IkReal x2404=((px)*(x2402));
IkReal x2405=((py)*(x2403));
IkReal x2406=((IkReal(0.0450000000000000))*(x2405));
Atan2Value<IkReal> x2407 = IKatan2WithCheck(((gconst58)*(((((IkReal(-0.550000000000000))*(x2405)))+(((IkReal(0.550000000000000))*(x2404)))+(((IkReal(-1.00000000000000))*(x2400)*(x2405)))+(((IkReal(0.0450000000000000))*(sj3)*(x2404)))+(((IkReal(-1.00000000000000))*(sj3)*(x2406)))+(((x2400)*(x2404)))))),((gconst58)*(((((IkReal(-1.00000000000000))*(x2399)*(x2405)))+(((IkReal(-1.00000000000000))*(x2406)))+(((x2399)*(x2404)))+(((cj3)*(x2406)))+(((IkReal(-0.0450000000000000))*(cj3)*(x2404)))+(((IkReal(0.0450000000000000))*(x2404)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2407.valid ) {
    continue;
}
j1array[0]=x2407.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2408=IKsin(j1);
IkReal x2409=IKcos(j1);
IkReal x2410=((IkReal(0.300000000000000))*(cj3));
IkReal x2411=((IkReal(0.0450000000000000))*(cj3));
IkReal x2412=((IkReal(0.300000000000000))*(sj3));
IkReal x2413=((IkReal(0.0450000000000000))*(sj3));
IkReal x2414=((IkReal(0.0450000000000000))*(x2408));
IkReal x2415=((IkReal(0.0900000000000000))*(x2409));
IkReal x2416=((IkReal(1.10000000000000))*(x2408));
IkReal x2417=x2368;
IkReal x2418=IKsin(x2417);
IkReal x2419=IKcos(x2417);
IkReal x2420=((px)*(x2419));
IkReal x2421=((py)*(x2418));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2413)))+(((IkReal(-1.00000000000000))*(x2410)))+(((IkReal(-1.00000000000000))*(x2408)*(x2421)))+(((x2408)*(x2420))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x2409)))+(x2414)+(((IkReal(-1.00000000000000))*(x2408)*(x2411)))+(((x2408)*(x2412)))+(((IkReal(-1.00000000000000))*(x2409)*(x2413)))+(((IkReal(-1.00000000000000))*(x2409)*(x2410))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2412)+(((IkReal(-1.00000000000000))*(x2409)*(x2420)))+(((x2409)*(x2421)))+(((IkReal(-1.00000000000000))*(x2411))));
evalcond[3]=((x2421)+(((IkReal(0.550000000000000))*(x2408)))+(((x2408)*(x2410)))+(((x2408)*(x2413)))+(((x2409)*(x2412)))+(((IkReal(-1.00000000000000))*(x2420)))+(((IkReal(0.0450000000000000))*(x2409)))+(((IkReal(-1.00000000000000))*(x2409)*(x2411))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2416)*(x2420)))+(((x2415)*(x2420)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2416)*(x2421)))+(((IkReal(-1.00000000000000))*(x2415)*(x2421))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x2425 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2425.valid ) {
    continue;
}
IkReal x2422=x2425.value;
IkReal x2423=((IkReal(-3.14159265000000))+(x2422));
IkReal x2424=((((IkReal(-1.00000000000000))*(py)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2422))))))))+(((IkReal(1.00000000000000))*(px)*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2422)))))))));
Atan2Value<IkReal> x2426 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2426.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x2422)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x2426.value)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2424;
evalcond[3]=x2424;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2427=((IkReal(6.66666666666667))*(cj3));
Atan2Value<IkReal> x2433 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2433.valid ) {
    continue;
}
IkReal x2428=((IkReal(-3.14159265000000))+(x2433.value));
IkReal x2429=IKsin(x2428);
IkReal x2430=IKcos(x2428);
IkReal x2431=((py)*(x2429));
IkReal x2432=((px)*(x2430));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x2431)))+(x2432));
dummyeval[1]=((((IkReal(12.2222222222222))*(x2431)))+(((IkReal(-12.2222222222222))*(x2432)))+(((IkReal(-1.00000000000000))*(sj3)*(x2432)))+(((sj3)*(x2431)))+(((IkReal(-1.00000000000000))*(x2427)*(x2432)))+(((x2427)*(x2431))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2434=((IkReal(6.66666666666667))*(sj3));
Atan2Value<IkReal> x2441 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2441.valid ) {
    continue;
}
IkReal x2435=((IkReal(-3.14159265000000))+(x2441.value));
IkReal x2436=IKsin(x2435);
IkReal x2437=IKcos(x2435);
IkReal x2438=((py)*(x2436));
IkReal x2439=((px)*(x2437));
IkReal x2440=((IkReal(1.00000000000000))*(x2439));
dummyeval[0]=((x2438)+(((IkReal(-1.00000000000000))*(x2434)*(x2439)))+(((cj3)*(x2439)))+(((IkReal(-1.00000000000000))*(cj3)*(x2438)))+(((IkReal(-1.00000000000000))*(x2440)))+(((x2434)*(x2438))));
dummyeval[1]=((x2438)+(((IkReal(-1.00000000000000))*(x2440))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
Atan2Value<IkReal> x2444 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2444.valid ) {
    continue;
}
IkReal x2442=((IkReal(-3.14159265000000))+(x2444.value));
IkReal x2443=x2424;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2443;
evalcond[3]=x2443;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x2445=x2442;
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(IKsin(x2445))))+(((px)*(IKcos(x2445)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2446=(py)*(py);
IkReal x2447=x2442;
IkReal x2448=IKcos(x2447);
IkReal x2449=IKsin(x2447);
IkReal x2450=(x2448)*(x2448);
IkReal x2451=((py)*(x2449));
IkReal x2452=((px)*(x2448));
dummyeval[0]=((x2452)+(((IkReal(-1.00000000000000))*(x2451))));
dummyeval[1]=((x2446)+(((IkReal(-2.00000000000000))*(x2451)*(x2452)))+(((IkReal(-1.00000000000000))*(x2446)*(x2450)))+(((x2450)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2453=(py)*(py);
IkReal x2454=((IkReal(1.80000000000000))*(x2453));
IkReal x2455=x2442;
IkReal x2456=IKsin(x2455);
IkReal x2457=IKcos(x2455);
IkReal x2458=(x2457)*(x2457);
IkReal x2459=((px)*(x2457));
IkReal x2460=((py)*(x2456));
IkReal x2461=((IkReal(20.0000000000000))*(x2460));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2459)))+(((IkReal(-1.00000000000000))*(x2461))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2459)))+(((IkReal(-1.00000000000000))*(x2461)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x2454)+(((IkReal(-1.00000000000000))*(x2454)*(x2458)))+(((IkReal(1.80000000000000))*(x2458)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x2459)*(x2460))))) != 0)?((IkReal)1/(((x2454)+(((IkReal(-1.00000000000000))*(x2454)*(x2458)))+(((IkReal(1.80000000000000))*(x2458)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x2459)*(x2460)))))):(IkReal)1.0e30))*(((((IkReal(14.4500000000000))*(x2460)))+(((IkReal(-1.00000000000000))*(pp)*(x2461)))+(((IkReal(-14.4500000000000))*(x2459)))+(((IkReal(20.0000000000000))*(pp)*(x2459))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2459)))+(((IkReal(-1.00000000000000))*(x2461))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2459)))+(((IkReal(-1.00000000000000))*(x2461)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((x2454)+(((IkReal(-1.00000000000000))*(x2454)*(x2458)))+(((IkReal(1.80000000000000))*(x2458)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x2459)*(x2460))))) != 0)?((IkReal)1/(((x2454)+(((IkReal(-1.00000000000000))*(x2454)*(x2458)))+(((IkReal(1.80000000000000))*(x2458)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x2459)*(x2460)))))):(IkReal)1.0e30))*(((((IkReal(14.4500000000000))*(x2460)))+(((IkReal(-1.00000000000000))*(pp)*(x2461)))+(((IkReal(-14.4500000000000))*(x2459)))+(((IkReal(20.0000000000000))*(pp)*(x2459)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2459)))+(((IkReal(-1.00000000000000))*(x2461))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2459)))+(((IkReal(-1.00000000000000))*(x2461)))))):(IkReal)1.0e30))), ((((IKabs(((x2454)+(((IkReal(-1.00000000000000))*(x2454)*(x2458)))+(((IkReal(1.80000000000000))*(x2458)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x2459)*(x2460))))) != 0)?((IkReal)1/(((x2454)+(((IkReal(-1.00000000000000))*(x2454)*(x2458)))+(((IkReal(1.80000000000000))*(x2458)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x2459)*(x2460)))))):(IkReal)1.0e30))*(((((IkReal(14.4500000000000))*(x2460)))+(((IkReal(-1.00000000000000))*(pp)*(x2461)))+(((IkReal(-14.4500000000000))*(x2459)))+(((IkReal(20.0000000000000))*(pp)*(x2459)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2462=IKsin(j1);
IkReal x2463=IKcos(j1);
IkReal x2464=((IkReal(1.10000000000000))*(x2462));
IkReal x2465=((IkReal(0.0900000000000000))*(x2463));
IkReal x2466=x2442;
IkReal x2467=IKsin(x2466);
IkReal x2468=IKcos(x2466);
IkReal x2469=((py)*(x2467));
IkReal x2470=((px)*(x2468));
IkReal x2471=((IkReal(1.00000000000000))*(x2470));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2462)*(x2470)))+(((IkReal(-1.00000000000000))*(x2462)*(x2469))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2463));
evalcond[2]=((((IkReal(-1.00000000000000))*(x2463)*(x2471)))+(((x2463)*(x2469))));
evalcond[3]=((x2469)+(((IkReal(-1.00000000000000))*(x2471)))+(((IkReal(0.850000000000000))*(x2462))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2464)*(x2469)))+(((IkReal(-1.00000000000000))*(x2465)*(x2469)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2465)*(x2470)))+(((x2464)*(x2470))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2472=x2442;
IkReal x2473=IKcos(x2472);
IkReal x2474=IKsin(x2472);
IkReal x2475=((py)*(x2474));
IkReal x2476=((px)*(x2473));
if( IKabs(((((IkReal(1.17647058823529))*(x2476)))+(((IkReal(-1.17647058823529))*(x2475))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x2476)))+(((IkReal(-1.53000000000000))*(x2475))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2476)))+(((IkReal(-1.53000000000000))*(x2475)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2476)*(x2476))))+(((IkReal(44.0000000000000))*(x2475)*(x2476)))+(((IkReal(-22.0000000000000))*((x2475)*(x2475))))+(((IkReal(17.0000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x2476)))+(((IkReal(-1.17647058823529))*(x2475)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x2476)))+(((IkReal(-1.53000000000000))*(x2475))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2476)))+(((IkReal(-1.53000000000000))*(x2475)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2476)*(x2476))))+(((IkReal(44.0000000000000))*(x2475)*(x2476)))+(((IkReal(-22.0000000000000))*((x2475)*(x2475))))+(((IkReal(17.0000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x2476)))+(((IkReal(-1.17647058823529))*(x2475)))), ((((IKabs(((((IkReal(1.53000000000000))*(x2476)))+(((IkReal(-1.53000000000000))*(x2475))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2476)))+(((IkReal(-1.53000000000000))*(x2475)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2476)*(x2476))))+(((IkReal(44.0000000000000))*(x2475)*(x2476)))+(((IkReal(-22.0000000000000))*((x2475)*(x2475))))+(((IkReal(17.0000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2477=IKsin(j1);
IkReal x2478=IKcos(j1);
IkReal x2479=((IkReal(1.10000000000000))*(x2477));
IkReal x2480=((IkReal(0.0900000000000000))*(x2478));
IkReal x2481=x2442;
IkReal x2482=IKsin(x2481);
IkReal x2483=IKcos(x2481);
IkReal x2484=((py)*(x2482));
IkReal x2485=((px)*(x2483));
IkReal x2486=((IkReal(1.00000000000000))*(x2485));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2477)*(x2485)))+(((IkReal(-1.00000000000000))*(x2477)*(x2484))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2478));
evalcond[2]=((((x2478)*(x2484)))+(((IkReal(-1.00000000000000))*(x2478)*(x2486))));
evalcond[3]=((x2484)+(((IkReal(0.850000000000000))*(x2477)))+(((IkReal(-1.00000000000000))*(x2486))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2480)*(x2485)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2480)*(x2484)))+(((IkReal(-1.00000000000000))*(x2479)*(x2484)))+(((x2479)*(x2485))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2487=((IkReal(-1.00000000000000))*(py));
Atan2Value<IkReal> x2489 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2489.valid ) {
    continue;
}
IkReal x2488=((x2487)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2489.value)))))));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2488;
evalcond[3]=x2488;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x2490 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2490.valid ) {
    continue;
}
dummyeval[1]=((IkReal(-1.00000000000000))*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2490.value)))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x2491 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2491.valid ) {
    continue;
}
dummyeval[1]=((IkReal(-1.00000000000000))*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2491.value)))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2494 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2494.valid ) {
    continue;
}
IkReal x2492=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2494.value)))));
IkReal x2493=((py)*(x2492));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2492) != 0)?((IkReal)1/(x2492)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2492) != 0)?((IkReal)1/((x2492)*(x2492))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2493)))+(((IkReal(20.0000000000000))*(pp)*(x2493))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2492) != 0)?((IkReal)1/(x2492)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2492) != 0)?((IkReal)1/((x2492)*(x2492))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2493)))+(((IkReal(20.0000000000000))*(pp)*(x2493)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2492) != 0)?((IkReal)1/(x2492)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2492) != 0)?((IkReal)1/((x2492)*(x2492))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2493)))+(((IkReal(20.0000000000000))*(pp)*(x2493)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2495=IKcos(j1);
IkReal x2496=IKsin(j1);
IkReal x2497=x2492;
IkReal x2498=((py)*(x2497));
IkReal x2499=((x2495)*(x2498));
IkReal x2500=((x2496)*(x2498));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(1.00000000000000))*(x2500))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2495));
evalcond[2]=((IkReal(-1.00000000000000))*(x2499));
evalcond[3]=((((IkReal(0.850000000000000))*(x2496)))+(((IkReal(-1.00000000000000))*(x2498))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2499)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2500))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2502 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2502.valid ) {
    continue;
}
IkReal x2501=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2502.value)))));
if( IKabs(((IkReal(1.17647058823529))*(py)*(x2501))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2501) != 0)?((IkReal)1/(x2501)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2501)*(x2501))))+(((IkReal(17.0000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(x2501)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2501) != 0)?((IkReal)1/(x2501)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2501)*(x2501))))+(((IkReal(17.0000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(x2501)), ((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2501) != 0)?((IkReal)1/(x2501)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2501)*(x2501))))+(((IkReal(17.0000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2503=IKcos(j1);
IkReal x2504=IKsin(j1);
IkReal x2505=x2501;
IkReal x2506=((py)*(x2505));
IkReal x2507=((x2503)*(x2506));
IkReal x2508=((x2504)*(x2506));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(1.00000000000000))*(x2508))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2503));
evalcond[2]=((IkReal(-1.00000000000000))*(x2507));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2506)))+(((IkReal(0.850000000000000))*(x2504))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2507)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2508))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x2510 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2510.valid ) {
    continue;
}
IkReal x2509=((px)*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2510.value)))))));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2509;
evalcond[3]=x2509;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x2511 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2511.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2511.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x2512 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2512.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2512.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2515 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2515.valid ) {
    continue;
}
IkReal x2513=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2515.value)))));
IkReal x2514=((px)*(x2513));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2513) != 0)?((IkReal)1/(x2513)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2513) != 0)?((IkReal)1/((x2513)*(x2513))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x2514)))+(((IkReal(-14.4500000000000))*(x2514))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2513) != 0)?((IkReal)1/(x2513)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2513) != 0)?((IkReal)1/((x2513)*(x2513))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x2514)))+(((IkReal(-14.4500000000000))*(x2514)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2513) != 0)?((IkReal)1/(x2513)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2513) != 0)?((IkReal)1/((x2513)*(x2513))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x2514)))+(((IkReal(-14.4500000000000))*(x2514)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2516=IKcos(j1);
IkReal x2517=IKsin(j1);
IkReal x2518=((IkReal(-1.00000000000000))*(px));
IkReal x2519=x2513;
IkReal x2520=((px)*(x2519));
IkReal x2521=((x2516)*(x2520));
IkReal x2522=((x2517)*(x2520));
evalcond[0]=((IkReal(-0.850000000000000))+(x2522));
evalcond[1]=((IkReal(-0.850000000000000))*(x2516));
Atan2Value<IkReal> x2523 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2523.valid ) {
    continue;
}
evalcond[2]=((x2516)*(x2518)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2523.value)))))));
evalcond[3]=((((IkReal(0.850000000000000))*(x2517)))+(((IkReal(-1.00000000000000))*(x2520))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2521)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2522))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2525 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2525.valid ) {
    continue;
}
IkReal x2524=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2525.value)))));
if( IKabs(((IkReal(1.17647058823529))*(px)*(x2524))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2524) != 0)?((IkReal)1/(x2524)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2524)*(x2524)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x2524)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2524) != 0)?((IkReal)1/(x2524)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2524)*(x2524))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x2524)), ((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2524) != 0)?((IkReal)1/(x2524)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2524)*(x2524))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2526=IKcos(j1);
IkReal x2527=IKsin(j1);
IkReal x2528=((IkReal(-1.00000000000000))*(px));
IkReal x2529=x2524;
IkReal x2530=((px)*(x2529));
IkReal x2531=((x2526)*(x2530));
IkReal x2532=((x2527)*(x2530));
evalcond[0]=((IkReal(-0.850000000000000))+(x2532));
evalcond[1]=((IkReal(-0.850000000000000))*(x2526));
Atan2Value<IkReal> x2533 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2533.valid ) {
    continue;
}
evalcond[2]=((x2526)*(x2528)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2533.value)))))));
evalcond[3]=((((IkReal(0.850000000000000))*(x2527)))+(((IkReal(-1.00000000000000))*(x2530))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2532)))+(((IkReal(0.0900000000000000))*(x2531)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2534=((IkReal(0.300000000000000))*(sj3));
IkReal x2535=((IkReal(0.0450000000000000))*(cj3));
Atan2Value<IkReal> x2542 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2542.valid ) {
    continue;
}
IkReal x2536=((IkReal(-3.14159265000000))+(x2542.value));
IkReal x2537=IKsin(x2536);
IkReal x2538=IKcos(x2536);
IkReal x2539=((px)*(x2538));
IkReal x2540=((py)*(x2537));
IkReal x2541=((IkReal(0.0450000000000000))*(x2539));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x2534)*(x2539)))+(((x2534)*(x2540)))+(((IkReal(-1.00000000000000))*(x2535)*(x2540)))+(((IkReal(-1.00000000000000))*(x2541)))+(((IkReal(0.0450000000000000))*(x2540)))+(((x2535)*(x2539))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2534)*(x2539)))+(((x2534)*(x2540)))+(((IkReal(-1.00000000000000))*(x2535)*(x2540)))+(((IkReal(-1.00000000000000))*(x2541)))+(((IkReal(0.0450000000000000))*(x2540)))+(((x2535)*(x2539)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x2540)+(((IkReal(-1.00000000000000))*(x2539))))) != 0)?((IkReal)1/(((x2540)+(((IkReal(-1.00000000000000))*(x2539)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2535)+(((IkReal(-1.00000000000000))*(x2534))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x2534)*(x2539)))+(((x2534)*(x2540)))+(((IkReal(-1.00000000000000))*(x2535)*(x2540)))+(((IkReal(-1.00000000000000))*(x2541)))+(((IkReal(0.0450000000000000))*(x2540)))+(((x2535)*(x2539))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2534)*(x2539)))+(((x2534)*(x2540)))+(((IkReal(-1.00000000000000))*(x2535)*(x2540)))+(((IkReal(-1.00000000000000))*(x2541)))+(((IkReal(0.0450000000000000))*(x2540)))+(((x2535)*(x2539)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((x2540)+(((IkReal(-1.00000000000000))*(x2539))))) != 0)?((IkReal)1/(((x2540)+(((IkReal(-1.00000000000000))*(x2539)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2535)+(((IkReal(-1.00000000000000))*(x2534)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x2534)*(x2539)))+(((x2534)*(x2540)))+(((IkReal(-1.00000000000000))*(x2535)*(x2540)))+(((IkReal(-1.00000000000000))*(x2541)))+(((IkReal(0.0450000000000000))*(x2540)))+(((x2535)*(x2539))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2534)*(x2539)))+(((x2534)*(x2540)))+(((IkReal(-1.00000000000000))*(x2535)*(x2540)))+(((IkReal(-1.00000000000000))*(x2541)))+(((IkReal(0.0450000000000000))*(x2540)))+(((x2535)*(x2539)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((x2540)+(((IkReal(-1.00000000000000))*(x2539))))) != 0)?((IkReal)1/(((x2540)+(((IkReal(-1.00000000000000))*(x2539)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2535)+(((IkReal(-1.00000000000000))*(x2534)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2543=IKsin(j1);
IkReal x2544=IKcos(j1);
IkReal x2545=((IkReal(0.300000000000000))*(cj3));
IkReal x2546=((IkReal(0.0450000000000000))*(cj3));
IkReal x2547=((IkReal(0.0450000000000000))*(sj3));
IkReal x2548=((IkReal(0.300000000000000))*(sj3));
IkReal x2549=((IkReal(0.0450000000000000))*(x2543));
IkReal x2550=((IkReal(0.0900000000000000))*(x2544));
IkReal x2551=((IkReal(1.10000000000000))*(x2543));
IkReal x2552=x2536;
IkReal x2553=IKsin(x2552);
IkReal x2554=IKcos(x2552);
IkReal x2555=((px)*(x2554));
IkReal x2556=((py)*(x2553));
IkReal x2557=((IkReal(1.00000000000000))*(x2555));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2543)*(x2555)))+(((IkReal(-1.00000000000000))*(x2543)*(x2556)))+(((IkReal(-1.00000000000000))*(x2545)))+(((IkReal(-1.00000000000000))*(x2547))));
evalcond[1]=((x2549)+(((IkReal(-0.550000000000000))*(x2544)))+(((IkReal(-1.00000000000000))*(x2543)*(x2546)))+(((x2543)*(x2548)))+(((IkReal(-1.00000000000000))*(x2544)*(x2547)))+(((IkReal(-1.00000000000000))*(x2544)*(x2545))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2548)+(((IkReal(-1.00000000000000))*(x2544)*(x2557)))+(((IkReal(-1.00000000000000))*(x2546)))+(((x2544)*(x2556))));
evalcond[3]=((x2556)+(((x2543)*(x2545)))+(((x2543)*(x2547)))+(((IkReal(-1.00000000000000))*(x2544)*(x2546)))+(((IkReal(0.550000000000000))*(x2543)))+(((IkReal(-1.00000000000000))*(x2557)))+(((IkReal(0.0450000000000000))*(x2544)))+(((x2544)*(x2548))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2551)*(x2555)))+(((x2550)*(x2555)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2550)*(x2556)))+(((IkReal(-1.00000000000000))*(x2551)*(x2556))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2558=((IkReal(0.0450000000000000))*(sj3));
IkReal x2559=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x2565 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2565.valid ) {
    continue;
}
IkReal x2560=((IkReal(-3.14159265000000))+(x2565.value));
IkReal x2561=IKsin(x2560);
IkReal x2562=IKcos(x2560);
IkReal x2563=((py)*(x2561));
IkReal x2564=((px)*(x2562));
if( IKabs(((((IKabs(((x2564)+(((IkReal(-1.00000000000000))*(x2563))))) != 0)?((IkReal)1/(((x2564)+(((IkReal(-1.00000000000000))*(x2563)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2558)+(x2559))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(0.550000000000000))*(x2563)))+(((x2559)*(x2563)))+(((x2558)*(x2563)))+(((IkReal(-1.00000000000000))*(x2558)*(x2564)))+(((IkReal(-1.00000000000000))*(x2559)*(x2564)))+(((IkReal(-0.550000000000000))*(x2564))))) != 0)?((IkReal)1/(((((IkReal(0.550000000000000))*(x2563)))+(((x2559)*(x2563)))+(((x2558)*(x2563)))+(((IkReal(-1.00000000000000))*(x2558)*(x2564)))+(((IkReal(-1.00000000000000))*(x2559)*(x2564)))+(((IkReal(-0.550000000000000))*(x2564)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x2564)+(((IkReal(-1.00000000000000))*(x2563))))) != 0)?((IkReal)1/(((x2564)+(((IkReal(-1.00000000000000))*(x2563)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2558)+(x2559)))))+IKsqr(((((IKabs(((((IkReal(0.550000000000000))*(x2563)))+(((x2559)*(x2563)))+(((x2558)*(x2563)))+(((IkReal(-1.00000000000000))*(x2558)*(x2564)))+(((IkReal(-1.00000000000000))*(x2559)*(x2564)))+(((IkReal(-0.550000000000000))*(x2564))))) != 0)?((IkReal)1/(((((IkReal(0.550000000000000))*(x2563)))+(((x2559)*(x2563)))+(((x2558)*(x2563)))+(((IkReal(-1.00000000000000))*(x2558)*(x2564)))+(((IkReal(-1.00000000000000))*(x2559)*(x2564)))+(((IkReal(-0.550000000000000))*(x2564)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x2564)+(((IkReal(-1.00000000000000))*(x2563))))) != 0)?((IkReal)1/(((x2564)+(((IkReal(-1.00000000000000))*(x2563)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2558)+(x2559)))), ((((IKabs(((((IkReal(0.550000000000000))*(x2563)))+(((x2559)*(x2563)))+(((x2558)*(x2563)))+(((IkReal(-1.00000000000000))*(x2558)*(x2564)))+(((IkReal(-1.00000000000000))*(x2559)*(x2564)))+(((IkReal(-0.550000000000000))*(x2564))))) != 0)?((IkReal)1/(((((IkReal(0.550000000000000))*(x2563)))+(((x2559)*(x2563)))+(((x2558)*(x2563)))+(((IkReal(-1.00000000000000))*(x2558)*(x2564)))+(((IkReal(-1.00000000000000))*(x2559)*(x2564)))+(((IkReal(-0.550000000000000))*(x2564)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2566=IKsin(j1);
IkReal x2567=IKcos(j1);
IkReal x2568=((IkReal(0.300000000000000))*(cj3));
IkReal x2569=((IkReal(0.0450000000000000))*(cj3));
IkReal x2570=((IkReal(0.0450000000000000))*(sj3));
IkReal x2571=((IkReal(0.300000000000000))*(sj3));
IkReal x2572=((IkReal(0.0450000000000000))*(x2566));
IkReal x2573=((IkReal(0.0900000000000000))*(x2567));
IkReal x2574=((IkReal(1.10000000000000))*(x2566));
IkReal x2575=x2560;
IkReal x2576=IKsin(x2575);
IkReal x2577=IKcos(x2575);
IkReal x2578=((px)*(x2577));
IkReal x2579=((py)*(x2576));
IkReal x2580=((IkReal(1.00000000000000))*(x2578));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2566)*(x2579)))+(((IkReal(-1.00000000000000))*(x2568)))+(((x2566)*(x2578)))+(((IkReal(-1.00000000000000))*(x2570))));
evalcond[1]=((x2572)+(((IkReal(-1.00000000000000))*(x2566)*(x2569)))+(((IkReal(-1.00000000000000))*(x2567)*(x2570)))+(((x2566)*(x2571)))+(((IkReal(-1.00000000000000))*(x2567)*(x2568)))+(((IkReal(-0.550000000000000))*(x2567))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2571)+(((x2567)*(x2579)))+(((IkReal(-1.00000000000000))*(x2569)))+(((IkReal(-1.00000000000000))*(x2567)*(x2580))));
evalcond[3]=((x2579)+(((x2567)*(x2571)))+(((IkReal(0.550000000000000))*(x2566)))+(((IkReal(-1.00000000000000))*(x2580)))+(((x2566)*(x2568)))+(((x2566)*(x2570)))+(((IkReal(-1.00000000000000))*(x2567)*(x2569)))+(((IkReal(0.0450000000000000))*(x2567))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2573)*(x2578)))+(((x2574)*(x2578)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2573)*(x2579)))+(((IkReal(-1.00000000000000))*(x2574)*(x2579))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2581=((IkReal(0.0450000000000000))*(cj3));
IkReal x2582=((IkReal(0.300000000000000))*(cj3));
IkReal x2583=((IkReal(0.0450000000000000))*(sj3));
IkReal x2584=((IkReal(0.300000000000000))*(sj3));
Atan2Value<IkReal> x2590 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2590.valid ) {
    continue;
}
IkReal x2585=((IkReal(-3.14159265000000))+(x2590.value));
IkReal x2586=IKcos(x2585);
IkReal x2587=IKsin(x2585);
IkReal x2588=((px)*(x2586));
IkReal x2589=((py)*(x2587));
Atan2Value<IkReal> x2591 = IKatan2WithCheck(((gconst59)*(((((IkReal(0.550000000000000))*(x2588)))+(((x2582)*(x2588)))+(((IkReal(-0.550000000000000))*(x2589)))+(((IkReal(-1.00000000000000))*(x2582)*(x2589)))+(((IkReal(-1.00000000000000))*(x2583)*(x2589)))+(((x2583)*(x2588)))))),((gconst59)*(((((x2584)*(x2588)))+(((x2581)*(x2589)))+(((IkReal(-1.00000000000000))*(x2584)*(x2589)))+(((IkReal(-0.0450000000000000))*(x2589)))+(((IkReal(0.0450000000000000))*(x2588)))+(((IkReal(-1.00000000000000))*(x2581)*(x2588)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2591.valid ) {
    continue;
}
j1array[0]=x2591.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2592=IKsin(j1);
IkReal x2593=IKcos(j1);
IkReal x2594=((IkReal(0.300000000000000))*(cj3));
IkReal x2595=((IkReal(0.0450000000000000))*(cj3));
IkReal x2596=((IkReal(0.0450000000000000))*(sj3));
IkReal x2597=((IkReal(0.300000000000000))*(sj3));
IkReal x2598=((IkReal(0.0450000000000000))*(x2592));
IkReal x2599=((IkReal(0.0900000000000000))*(x2593));
IkReal x2600=((IkReal(1.10000000000000))*(x2592));
IkReal x2601=x2585;
IkReal x2602=IKsin(x2601);
IkReal x2603=IKcos(x2601);
IkReal x2604=((px)*(x2603));
IkReal x2605=((py)*(x2602));
IkReal x2606=((IkReal(1.00000000000000))*(x2604));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2592)*(x2605)))+(((IkReal(-1.00000000000000))*(x2594)))+(((IkReal(-1.00000000000000))*(x2596)))+(((x2592)*(x2604))));
evalcond[1]=((x2598)+(((x2592)*(x2597)))+(((IkReal(-1.00000000000000))*(x2593)*(x2596)))+(((IkReal(-1.00000000000000))*(x2593)*(x2594)))+(((IkReal(-0.550000000000000))*(x2593)))+(((IkReal(-1.00000000000000))*(x2592)*(x2595))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2597)+(((IkReal(-1.00000000000000))*(x2593)*(x2606)))+(((IkReal(-1.00000000000000))*(x2595)))+(((x2593)*(x2605))));
evalcond[3]=((((IkReal(0.550000000000000))*(x2592)))+(((x2592)*(x2594)))+(((x2592)*(x2596)))+(((IkReal(-1.00000000000000))*(x2593)*(x2595)))+(((x2593)*(x2597)))+(((IkReal(0.0450000000000000))*(x2593)))+(((IkReal(-1.00000000000000))*(x2606)))+(x2605));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2600)*(x2605)))+(((x2600)*(x2604)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2599)*(x2604)))+(((IkReal(-1.00000000000000))*(x2599)*(x2605))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x2610 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2610.valid ) {
    continue;
}
IkReal x2607=x2610.value;
IkReal x2608=((IkReal(-3.14159265000000))+(x2607));
IkReal x2609=((((IkReal(-1.00000000000000))*(px)*(IKsin(x2608))))+(((IkReal(-1.00000000000000))*(py)*(IKcos(x2608)))));
Atan2Value<IkReal> x2611 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2611.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((j0)+(x2607)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x2611.value)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x2609;
evalcond[3]=x2609;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2612=((IkReal(6.66666666666667))*(cj3));
Atan2Value<IkReal> x2618 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2618.valid ) {
    continue;
}
IkReal x2613=((IkReal(-3.14159265000000))+(x2618.value));
IkReal x2614=IKsin(x2613);
IkReal x2615=IKcos(x2613);
IkReal x2616=((py)*(x2614));
IkReal x2617=((px)*(x2615));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x2616)))+(x2617));
dummyeval[1]=((((IkReal(12.2222222222222))*(x2616)))+(((IkReal(-1.00000000000000))*(x2612)*(x2617)))+(((IkReal(-12.2222222222222))*(x2617)))+(((x2612)*(x2616)))+(((sj3)*(x2616)))+(((IkReal(-1.00000000000000))*(sj3)*(x2617))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2619=((IkReal(6.66666666666667))*(sj3));
Atan2Value<IkReal> x2626 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2626.valid ) {
    continue;
}
IkReal x2620=((IkReal(-3.14159265000000))+(x2626.value));
IkReal x2621=IKsin(x2620);
IkReal x2622=IKcos(x2620);
IkReal x2623=((py)*(x2621));
IkReal x2624=((px)*(x2622));
IkReal x2625=((IkReal(1.00000000000000))*(x2624));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x2619)*(x2624)))+(((x2619)*(x2623)))+(((IkReal(-1.00000000000000))*(cj3)*(x2623)))+(((cj3)*(x2624)))+(((IkReal(-1.00000000000000))*(x2625)))+(x2623));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x2625)))+(x2623));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
Atan2Value<IkReal> x2629 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2629.valid ) {
    continue;
}
IkReal x2627=((IkReal(-3.14159265000000))+(x2629.value));
IkReal x2628=((((IkReal(-1.00000000000000))*(px)*(IKsin(x2627))))+(((IkReal(-1.00000000000000))*(py)*(IKcos(x2627)))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2628;
evalcond[3]=x2628;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x2630=x2627;
dummyeval[0]=((((px)*(IKcos(x2630))))+(((IkReal(-1.00000000000000))*(py)*(IKsin(x2630)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2631=(py)*(py);
IkReal x2632=x2627;
IkReal x2633=IKcos(x2632);
IkReal x2634=IKsin(x2632);
IkReal x2635=(x2633)*(x2633);
IkReal x2636=((py)*(x2634));
IkReal x2637=((px)*(x2633));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x2636)))+(x2637));
dummyeval[1]=((((x2635)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x2631)*(x2635)))+(((IkReal(-2.00000000000000))*(x2636)*(x2637)))+(x2631));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2638=(py)*(py);
IkReal x2639=((IkReal(1.80000000000000))*(x2638));
IkReal x2640=x2627;
IkReal x2641=IKsin(x2640);
IkReal x2642=IKcos(x2640);
IkReal x2643=(x2642)*(x2642);
IkReal x2644=((px)*(x2642));
IkReal x2645=((py)*(x2641));
IkReal x2646=((IkReal(20.0000000000000))*(x2645));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2644)))+(((IkReal(-1.00000000000000))*(x2646))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2644)))+(((IkReal(-1.00000000000000))*(x2646)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-3.60000000000000))*(x2644)*(x2645)))+(((IkReal(1.80000000000000))*(x2643)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x2639)*(x2643)))+(x2639))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x2644)*(x2645)))+(((IkReal(1.80000000000000))*(x2643)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x2639)*(x2643)))+(x2639)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pp)*(x2646)))+(((IkReal(14.4500000000000))*(x2645)))+(((IkReal(20.0000000000000))*(pp)*(x2644)))+(((IkReal(-14.4500000000000))*(x2644))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2644)))+(((IkReal(-1.00000000000000))*(x2646))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2644)))+(((IkReal(-1.00000000000000))*(x2646)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(-3.60000000000000))*(x2644)*(x2645)))+(((IkReal(1.80000000000000))*(x2643)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x2639)*(x2643)))+(x2639))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x2644)*(x2645)))+(((IkReal(1.80000000000000))*(x2643)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x2639)*(x2643)))+(x2639)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pp)*(x2646)))+(((IkReal(14.4500000000000))*(x2645)))+(((IkReal(20.0000000000000))*(pp)*(x2644)))+(((IkReal(-14.4500000000000))*(x2644)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x2644)))+(((IkReal(-1.00000000000000))*(x2646))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x2644)))+(((IkReal(-1.00000000000000))*(x2646)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(-3.60000000000000))*(x2644)*(x2645)))+(((IkReal(1.80000000000000))*(x2643)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x2639)*(x2643)))+(x2639))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x2644)*(x2645)))+(((IkReal(1.80000000000000))*(x2643)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x2639)*(x2643)))+(x2639)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pp)*(x2646)))+(((IkReal(14.4500000000000))*(x2645)))+(((IkReal(20.0000000000000))*(pp)*(x2644)))+(((IkReal(-14.4500000000000))*(x2644)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2647=IKsin(j1);
IkReal x2648=IKcos(j1);
IkReal x2649=((IkReal(1.10000000000000))*(x2647));
IkReal x2650=((IkReal(0.0900000000000000))*(x2648));
IkReal x2651=x2627;
IkReal x2652=IKsin(x2651);
IkReal x2653=IKcos(x2651);
IkReal x2654=((py)*(x2652));
IkReal x2655=((px)*(x2653));
IkReal x2656=((IkReal(1.00000000000000))*(x2655));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x2647)*(x2654)))+(((x2647)*(x2655))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2648));
evalcond[2]=((((x2648)*(x2654)))+(((IkReal(-1.00000000000000))*(x2648)*(x2656))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2656)))+(((IkReal(0.850000000000000))*(x2647)))+(x2654));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2649)*(x2655)))+(((IkReal(-1.00000000000000))*(x2650)*(x2654)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2649)*(x2654)))+(((x2650)*(x2655))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2657=x2627;
IkReal x2658=IKcos(x2657);
IkReal x2659=IKsin(x2657);
IkReal x2660=((py)*(x2659));
IkReal x2661=((px)*(x2658));
if( IKabs(((((IkReal(1.17647058823529))*(x2661)))+(((IkReal(-1.17647058823529))*(x2660))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x2661)))+(((IkReal(-1.53000000000000))*(x2660))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2661)))+(((IkReal(-1.53000000000000))*(x2660)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2661)*(x2661))))+(((IkReal(44.0000000000000))*(x2660)*(x2661)))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2660)*(x2660)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x2661)))+(((IkReal(-1.17647058823529))*(x2660)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x2661)))+(((IkReal(-1.53000000000000))*(x2660))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2661)))+(((IkReal(-1.53000000000000))*(x2660)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2661)*(x2661))))+(((IkReal(44.0000000000000))*(x2660)*(x2661)))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2660)*(x2660))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x2661)))+(((IkReal(-1.17647058823529))*(x2660)))), ((((IKabs(((((IkReal(1.53000000000000))*(x2661)))+(((IkReal(-1.53000000000000))*(x2660))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x2661)))+(((IkReal(-1.53000000000000))*(x2660)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x2661)*(x2661))))+(((IkReal(44.0000000000000))*(x2660)*(x2661)))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x2660)*(x2660))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2662=IKsin(j1);
IkReal x2663=IKcos(j1);
IkReal x2664=((IkReal(1.10000000000000))*(x2662));
IkReal x2665=((IkReal(0.0900000000000000))*(x2663));
IkReal x2666=x2627;
IkReal x2667=IKsin(x2666);
IkReal x2668=IKcos(x2666);
IkReal x2669=((py)*(x2667));
IkReal x2670=((px)*(x2668));
IkReal x2671=((IkReal(1.00000000000000))*(x2670));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x2662)*(x2669)))+(((x2662)*(x2670))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2663));
evalcond[2]=((((x2663)*(x2669)))+(((IkReal(-1.00000000000000))*(x2663)*(x2671))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2671)))+(((IkReal(0.850000000000000))*(x2662)))+(x2669));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2664)*(x2670)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2664)*(x2669)))+(((IkReal(-1.00000000000000))*(x2665)*(x2669)))+(((x2665)*(x2670))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2672=((IkReal(-1.00000000000000))*(py));
Atan2Value<IkReal> x2674 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2674.valid ) {
    continue;
}
IkReal x2673=((x2672)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2674.value)))))));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2673;
evalcond[3]=x2673;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x2675 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2675.valid ) {
    continue;
}
dummyeval[1]=((IkReal(-1.00000000000000))*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2675.value)))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x2676 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2676.valid ) {
    continue;
}
dummyeval[1]=((IkReal(-1.00000000000000))*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2676.value)))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2679 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2679.valid ) {
    continue;
}
IkReal x2677=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2679.value)))));
IkReal x2678=((py)*(x2677));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2677) != 0)?((IkReal)1/(x2677)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2677) != 0)?((IkReal)1/((x2677)*(x2677))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2678)))+(((IkReal(20.0000000000000))*(pp)*(x2678))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2677) != 0)?((IkReal)1/(x2677)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2677) != 0)?((IkReal)1/((x2677)*(x2677))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2678)))+(((IkReal(20.0000000000000))*(pp)*(x2678)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2677) != 0)?((IkReal)1/(x2677)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2677) != 0)?((IkReal)1/((x2677)*(x2677))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2678)))+(((IkReal(20.0000000000000))*(pp)*(x2678)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2680=IKcos(j1);
IkReal x2681=IKsin(j1);
IkReal x2682=x2677;
IkReal x2683=((py)*(x2682));
IkReal x2684=((x2680)*(x2683));
IkReal x2685=((x2681)*(x2683));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(1.00000000000000))*(x2685))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2680));
evalcond[2]=((IkReal(-1.00000000000000))*(x2684));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2683)))+(((IkReal(0.850000000000000))*(x2681))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2685)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2684))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2687 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2687.valid ) {
    continue;
}
IkReal x2686=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2687.value)))));
if( IKabs(((IkReal(1.17647058823529))*(py)*(x2686))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2686) != 0)?((IkReal)1/(x2686)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2686)*(x2686)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(x2686)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2686) != 0)?((IkReal)1/(x2686)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2686)*(x2686))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(x2686)), ((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2686) != 0)?((IkReal)1/(x2686)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2686)*(x2686))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2688=IKcos(j1);
IkReal x2689=IKsin(j1);
IkReal x2690=x2686;
IkReal x2691=((py)*(x2690));
IkReal x2692=((x2688)*(x2691));
IkReal x2693=((x2689)*(x2691));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(1.00000000000000))*(x2693))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2688));
evalcond[2]=((IkReal(-1.00000000000000))*(x2692));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2691)))+(((IkReal(0.850000000000000))*(x2689))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2692)))+(((IkReal(1.10000000000000))*(x2693))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x2695 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2695.valid ) {
    continue;
}
IkReal x2694=((px)*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2695.value)))))));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2694;
evalcond[3]=x2694;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x2696 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2696.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2696.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x2697 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2697.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2697.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2700 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2700.valid ) {
    continue;
}
IkReal x2698=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2700.value)))));
IkReal x2699=((px)*(x2698));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2698) != 0)?((IkReal)1/(x2698)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2698) != 0)?((IkReal)1/((x2698)*(x2698))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2699)))+(((IkReal(20.0000000000000))*(pp)*(x2699))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2698) != 0)?((IkReal)1/(x2698)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2698) != 0)?((IkReal)1/((x2698)*(x2698))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2699)))+(((IkReal(20.0000000000000))*(pp)*(x2699)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2698) != 0)?((IkReal)1/(x2698)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2698) != 0)?((IkReal)1/((x2698)*(x2698))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2699)))+(((IkReal(20.0000000000000))*(pp)*(x2699)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2701=IKcos(j1);
IkReal x2702=IKsin(j1);
IkReal x2703=((IkReal(-1.00000000000000))*(px));
IkReal x2704=x2698;
IkReal x2705=((px)*(x2704));
IkReal x2706=((x2701)*(x2705));
IkReal x2707=((x2702)*(x2705));
evalcond[0]=((IkReal(-0.850000000000000))+(x2707));
evalcond[1]=((IkReal(-0.850000000000000))*(x2701));
Atan2Value<IkReal> x2708 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2708.valid ) {
    continue;
}
evalcond[2]=((x2701)*(x2703)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2708.value)))))));
evalcond[3]=((((IkReal(0.850000000000000))*(x2702)))+(((IkReal(-1.00000000000000))*(x2705))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2707)))+(((IkReal(0.0900000000000000))*(x2706))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2710 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2710.valid ) {
    continue;
}
IkReal x2709=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2710.value)))));
if( IKabs(((IkReal(1.17647058823529))*(px)*(x2709))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2709) != 0)?((IkReal)1/(x2709)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2709)*(x2709)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x2709)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2709) != 0)?((IkReal)1/(x2709)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2709)*(x2709))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x2709)), ((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2709) != 0)?((IkReal)1/(x2709)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2709)*(x2709))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2711=IKcos(j1);
IkReal x2712=IKsin(j1);
IkReal x2713=((IkReal(-1.00000000000000))*(px));
IkReal x2714=x2709;
IkReal x2715=((px)*(x2714));
IkReal x2716=((x2711)*(x2715));
IkReal x2717=((x2712)*(x2715));
evalcond[0]=((IkReal(-0.850000000000000))+(x2717));
evalcond[1]=((IkReal(-0.850000000000000))*(x2711));
Atan2Value<IkReal> x2718 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x2718.valid ) {
    continue;
}
evalcond[2]=((x2711)*(x2713)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2718.value)))))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2715)))+(((IkReal(0.850000000000000))*(x2712))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2716)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x2717))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2719=((IkReal(0.300000000000000))*(sj3));
IkReal x2720=((IkReal(0.0450000000000000))*(cj3));
Atan2Value<IkReal> x2727 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2727.valid ) {
    continue;
}
IkReal x2721=((IkReal(-3.14159265000000))+(x2727.value));
IkReal x2722=IKsin(x2721);
IkReal x2723=IKcos(x2721);
IkReal x2724=((px)*(x2723));
IkReal x2725=((py)*(x2722));
IkReal x2726=((IkReal(0.0450000000000000))*(x2724));
if( IKabs(((((IKabs(((((IkReal(0.0450000000000000))*(x2725)))+(((IkReal(-1.00000000000000))*(x2719)*(x2724)))+(((IkReal(-1.00000000000000))*(x2720)*(x2725)))+(((x2720)*(x2724)))+(((x2719)*(x2725)))+(((IkReal(-1.00000000000000))*(x2726))))) != 0)?((IkReal)1/(((((IkReal(0.0450000000000000))*(x2725)))+(((IkReal(-1.00000000000000))*(x2719)*(x2724)))+(((IkReal(-1.00000000000000))*(x2720)*(x2725)))+(((x2720)*(x2724)))+(((x2719)*(x2725)))+(((IkReal(-1.00000000000000))*(x2726)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x2725)+(((IkReal(-1.00000000000000))*(x2724))))) != 0)?((IkReal)1/(((x2725)+(((IkReal(-1.00000000000000))*(x2724)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2720)+(((IkReal(-1.00000000000000))*(x2719))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(0.0450000000000000))*(x2725)))+(((IkReal(-1.00000000000000))*(x2719)*(x2724)))+(((IkReal(-1.00000000000000))*(x2720)*(x2725)))+(((x2720)*(x2724)))+(((x2719)*(x2725)))+(((IkReal(-1.00000000000000))*(x2726))))) != 0)?((IkReal)1/(((((IkReal(0.0450000000000000))*(x2725)))+(((IkReal(-1.00000000000000))*(x2719)*(x2724)))+(((IkReal(-1.00000000000000))*(x2720)*(x2725)))+(((x2720)*(x2724)))+(((x2719)*(x2725)))+(((IkReal(-1.00000000000000))*(x2726)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((x2725)+(((IkReal(-1.00000000000000))*(x2724))))) != 0)?((IkReal)1/(((x2725)+(((IkReal(-1.00000000000000))*(x2724)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2720)+(((IkReal(-1.00000000000000))*(x2719)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(0.0450000000000000))*(x2725)))+(((IkReal(-1.00000000000000))*(x2719)*(x2724)))+(((IkReal(-1.00000000000000))*(x2720)*(x2725)))+(((x2720)*(x2724)))+(((x2719)*(x2725)))+(((IkReal(-1.00000000000000))*(x2726))))) != 0)?((IkReal)1/(((((IkReal(0.0450000000000000))*(x2725)))+(((IkReal(-1.00000000000000))*(x2719)*(x2724)))+(((IkReal(-1.00000000000000))*(x2720)*(x2725)))+(((x2720)*(x2724)))+(((x2719)*(x2725)))+(((IkReal(-1.00000000000000))*(x2726)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((x2725)+(((IkReal(-1.00000000000000))*(x2724))))) != 0)?((IkReal)1/(((x2725)+(((IkReal(-1.00000000000000))*(x2724)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x2720)+(((IkReal(-1.00000000000000))*(x2719)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2728=IKsin(j1);
IkReal x2729=IKcos(j1);
IkReal x2730=((IkReal(0.300000000000000))*(cj3));
IkReal x2731=((IkReal(0.0450000000000000))*(cj3));
IkReal x2732=((IkReal(0.0450000000000000))*(sj3));
IkReal x2733=((IkReal(0.300000000000000))*(sj3));
IkReal x2734=((IkReal(0.0450000000000000))*(x2728));
IkReal x2735=((IkReal(0.0900000000000000))*(x2729));
IkReal x2736=((IkReal(1.10000000000000))*(x2728));
IkReal x2737=x2721;
IkReal x2738=IKsin(x2737);
IkReal x2739=IKcos(x2737);
IkReal x2740=((px)*(x2739));
IkReal x2741=((py)*(x2738));
IkReal x2742=((IkReal(1.00000000000000))*(x2740));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2728)*(x2740)))+(((IkReal(-1.00000000000000))*(x2732)))+(((IkReal(-1.00000000000000))*(x2730)))+(((IkReal(-1.00000000000000))*(x2728)*(x2741))));
evalcond[1]=((x2734)+(((IkReal(-1.00000000000000))*(x2728)*(x2731)))+(((IkReal(-0.550000000000000))*(x2729)))+(((x2728)*(x2733)))+(((IkReal(-1.00000000000000))*(x2729)*(x2730)))+(((IkReal(-1.00000000000000))*(x2729)*(x2732))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2733)+(((x2729)*(x2741)))+(((IkReal(-1.00000000000000))*(x2729)*(x2742)))+(((IkReal(-1.00000000000000))*(x2731))));
evalcond[3]=((x2741)+(((IkReal(0.0450000000000000))*(x2729)))+(((IkReal(0.550000000000000))*(x2728)))+(((x2728)*(x2730)))+(((x2728)*(x2732)))+(((IkReal(-1.00000000000000))*(x2742)))+(((x2729)*(x2733)))+(((IkReal(-1.00000000000000))*(x2729)*(x2731))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2736)*(x2741)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x2735)*(x2741)))+(((x2736)*(x2740)))+(((x2735)*(x2740))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2743=((IkReal(0.0450000000000000))*(sj3));
IkReal x2744=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x2750 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2750.valid ) {
    continue;
}
IkReal x2745=((IkReal(-3.14159265000000))+(x2750.value));
IkReal x2746=IKsin(x2745);
IkReal x2747=IKcos(x2745);
IkReal x2748=((py)*(x2746));
IkReal x2749=((px)*(x2747));
if( IKabs(((((IKabs(((x2749)+(((IkReal(-1.00000000000000))*(x2748))))) != 0)?((IkReal)1/(((x2749)+(((IkReal(-1.00000000000000))*(x2748)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2743)+(x2744))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x2743)*(x2749)))+(((IkReal(-1.00000000000000))*(x2744)*(x2749)))+(((x2743)*(x2748)))+(((IkReal(0.550000000000000))*(x2748)))+(((x2744)*(x2748)))+(((IkReal(-0.550000000000000))*(x2749))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2743)*(x2749)))+(((IkReal(-1.00000000000000))*(x2744)*(x2749)))+(((x2743)*(x2748)))+(((IkReal(0.550000000000000))*(x2748)))+(((x2744)*(x2748)))+(((IkReal(-0.550000000000000))*(x2749)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x2749)+(((IkReal(-1.00000000000000))*(x2748))))) != 0)?((IkReal)1/(((x2749)+(((IkReal(-1.00000000000000))*(x2748)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2743)+(x2744)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x2743)*(x2749)))+(((IkReal(-1.00000000000000))*(x2744)*(x2749)))+(((x2743)*(x2748)))+(((IkReal(0.550000000000000))*(x2748)))+(((x2744)*(x2748)))+(((IkReal(-0.550000000000000))*(x2749))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2743)*(x2749)))+(((IkReal(-1.00000000000000))*(x2744)*(x2749)))+(((x2743)*(x2748)))+(((IkReal(0.550000000000000))*(x2748)))+(((x2744)*(x2748)))+(((IkReal(-0.550000000000000))*(x2749)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x2749)+(((IkReal(-1.00000000000000))*(x2748))))) != 0)?((IkReal)1/(((x2749)+(((IkReal(-1.00000000000000))*(x2748)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2743)+(x2744)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x2743)*(x2749)))+(((IkReal(-1.00000000000000))*(x2744)*(x2749)))+(((x2743)*(x2748)))+(((IkReal(0.550000000000000))*(x2748)))+(((x2744)*(x2748)))+(((IkReal(-0.550000000000000))*(x2749))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2743)*(x2749)))+(((IkReal(-1.00000000000000))*(x2744)*(x2749)))+(((x2743)*(x2748)))+(((IkReal(0.550000000000000))*(x2748)))+(((x2744)*(x2748)))+(((IkReal(-0.550000000000000))*(x2749)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2751=IKsin(j1);
IkReal x2752=IKcos(j1);
IkReal x2753=((IkReal(0.300000000000000))*(cj3));
IkReal x2754=((IkReal(0.0450000000000000))*(cj3));
IkReal x2755=((IkReal(0.0450000000000000))*(sj3));
IkReal x2756=((IkReal(0.300000000000000))*(sj3));
IkReal x2757=((IkReal(0.0450000000000000))*(x2751));
IkReal x2758=((IkReal(0.0900000000000000))*(x2752));
IkReal x2759=((IkReal(1.10000000000000))*(x2751));
IkReal x2760=x2745;
IkReal x2761=IKsin(x2760);
IkReal x2762=IKcos(x2760);
IkReal x2763=((px)*(x2762));
IkReal x2764=((py)*(x2761));
IkReal x2765=((IkReal(1.00000000000000))*(x2763));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2751)*(x2763)))+(((IkReal(-1.00000000000000))*(x2751)*(x2764)))+(((IkReal(-1.00000000000000))*(x2753)))+(((IkReal(-1.00000000000000))*(x2755))));
evalcond[1]=((x2757)+(((IkReal(-1.00000000000000))*(x2752)*(x2755)))+(((IkReal(-1.00000000000000))*(x2752)*(x2753)))+(((IkReal(-1.00000000000000))*(x2751)*(x2754)))+(((IkReal(-0.550000000000000))*(x2752)))+(((x2751)*(x2756))));
evalcond[2]=((IkReal(0.0450000000000000))+(x2756)+(((IkReal(-1.00000000000000))*(x2752)*(x2765)))+(((x2752)*(x2764)))+(((IkReal(-1.00000000000000))*(x2754))));
evalcond[3]=((((x2752)*(x2756)))+(x2764)+(((IkReal(-1.00000000000000))*(x2752)*(x2754)))+(((IkReal(0.550000000000000))*(x2751)))+(((IkReal(0.0450000000000000))*(x2752)))+(((IkReal(-1.00000000000000))*(x2765)))+(((x2751)*(x2755)))+(((x2751)*(x2753))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2758)*(x2763)))+(((x2759)*(x2763)))+(((IkReal(-1.00000000000000))*(x2758)*(x2764)))+(((IkReal(-1.00000000000000))*(x2759)*(x2764)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2766=((IkReal(0.0450000000000000))*(cj3));
IkReal x2767=((IkReal(0.300000000000000))*(cj3));
IkReal x2768=((IkReal(0.0450000000000000))*(sj3));
IkReal x2769=((IkReal(0.300000000000000))*(sj3));
Atan2Value<IkReal> x2775 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x2775.valid ) {
    continue;
}
IkReal x2770=((IkReal(-3.14159265000000))+(x2775.value));
IkReal x2771=IKcos(x2770);
IkReal x2772=IKsin(x2770);
IkReal x2773=((px)*(x2771));
IkReal x2774=((py)*(x2772));
Atan2Value<IkReal> x2776 = IKatan2WithCheck(((gconst60)*(((((IkReal(-1.00000000000000))*(x2768)*(x2774)))+(((IkReal(-0.550000000000000))*(x2774)))+(((x2768)*(x2773)))+(((IkReal(-1.00000000000000))*(x2767)*(x2774)))+(((x2767)*(x2773)))+(((IkReal(0.550000000000000))*(x2773)))))),((gconst60)*(((((x2769)*(x2773)))+(((x2766)*(x2774)))+(((IkReal(-1.00000000000000))*(x2766)*(x2773)))+(((IkReal(-1.00000000000000))*(x2769)*(x2774)))+(((IkReal(-0.0450000000000000))*(x2774)))+(((IkReal(0.0450000000000000))*(x2773)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2776.valid ) {
    continue;
}
j1array[0]=x2776.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2777=IKsin(j1);
IkReal x2778=IKcos(j1);
IkReal x2779=((IkReal(0.300000000000000))*(cj3));
IkReal x2780=((IkReal(0.0450000000000000))*(cj3));
IkReal x2781=((IkReal(0.0450000000000000))*(sj3));
IkReal x2782=((IkReal(0.300000000000000))*(sj3));
IkReal x2783=((IkReal(0.0450000000000000))*(x2777));
IkReal x2784=((IkReal(0.0900000000000000))*(x2778));
IkReal x2785=((IkReal(1.10000000000000))*(x2777));
IkReal x2786=x2770;
IkReal x2787=IKsin(x2786);
IkReal x2788=IKcos(x2786);
IkReal x2789=((px)*(x2788));
IkReal x2790=((py)*(x2787));
IkReal x2791=((IkReal(1.00000000000000))*(x2789));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x2781)))+(((IkReal(-1.00000000000000))*(x2777)*(x2790)))+(((x2777)*(x2789)))+(((IkReal(-1.00000000000000))*(x2779))));
evalcond[1]=((x2783)+(((x2777)*(x2782)))+(((IkReal(-0.550000000000000))*(x2778)))+(((IkReal(-1.00000000000000))*(x2778)*(x2781)))+(((IkReal(-1.00000000000000))*(x2777)*(x2780)))+(((IkReal(-1.00000000000000))*(x2778)*(x2779))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2780)))+(x2782)+(((IkReal(-1.00000000000000))*(x2778)*(x2791)))+(((x2778)*(x2790))));
evalcond[3]=((x2790)+(((x2778)*(x2782)))+(((IkReal(-1.00000000000000))*(x2791)))+(((x2777)*(x2781)))+(((IkReal(0.0450000000000000))*(x2778)))+(((IkReal(-1.00000000000000))*(x2778)*(x2780)))+(((x2777)*(x2779)))+(((IkReal(0.550000000000000))*(x2777))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2784)*(x2790)))+(((x2785)*(x2789)))+(((x2784)*(x2789)))+(((IkReal(-1.00000000000000))*(x2785)*(x2790)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x2794 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2794.valid ) {
    continue;
}
IkReal x2792=x2794.value;
IkReal x2793=((IkReal(-1.00000000000000))*(py)*(IKcos(x2792)));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x2792)+(j0)), IkReal(6.28318530717959))))))+(IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2793;
evalcond[3]=x2793;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x2795 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2795.valid ) {
    continue;
}
dummyeval[1]=IKsin(x2795.value);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x2796 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2796.valid ) {
    continue;
}
dummyeval[1]=IKsin(x2796.value);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2797=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2797))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2797))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2800 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2800.valid ) {
    continue;
}
IkReal x2798=IKsin(x2800.value);
IkReal x2799=((py)*(x2798));
if( IKabs(((IkReal(-0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2798) != 0)?((IkReal)1/(x2798)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2798) != 0)?((IkReal)1/((x2798)*(x2798))):(IkReal)1.0e30))*(((((IkReal(14.4500000000000))*(x2799)))+(((IkReal(-20.0000000000000))*(pp)*(x2799))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2798) != 0)?((IkReal)1/(x2798)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2798) != 0)?((IkReal)1/((x2798)*(x2798))):(IkReal)1.0e30))*(((((IkReal(14.4500000000000))*(x2799)))+(((IkReal(-20.0000000000000))*(pp)*(x2799)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(-0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2798) != 0)?((IkReal)1/(x2798)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2798) != 0)?((IkReal)1/((x2798)*(x2798))):(IkReal)1.0e30))*(((((IkReal(14.4500000000000))*(x2799)))+(((IkReal(-20.0000000000000))*(pp)*(x2799)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2801=IKcos(j1);
IkReal x2802=IKsin(j1);
Atan2Value<IkReal> x2805 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2805.valid ) {
    continue;
}
IkReal x2803=IKsin(x2805.value);
IkReal x2804=((py)*(x2803));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x2802)*(x2804))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2801));
evalcond[2]=((x2801)*(x2804));
evalcond[3]=((((IkReal(0.850000000000000))*(x2802)))+(x2804));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(x2802)*(x2804)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x2801)*(x2804))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2807 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2807.valid ) {
    continue;
}
IkReal x2806=IKsin(x2807.value);
if( IKabs(((IkReal(-1.17647058823529))*(py)*(x2806))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2806) != 0)?((IkReal)1/(x2806)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2806)*(x2806)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.17647058823529))*(py)*(x2806)))+IKsqr(((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2806) != 0)?((IkReal)1/(x2806)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2806)*(x2806))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(-1.17647058823529))*(py)*(x2806)), ((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2806) != 0)?((IkReal)1/(x2806)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2806)*(x2806))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2808=IKcos(j1);
IkReal x2809=IKsin(j1);
Atan2Value<IkReal> x2812 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2812.valid ) {
    continue;
}
IkReal x2810=IKsin(x2812.value);
IkReal x2811=((py)*(x2810));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x2809)*(x2811))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2808));
evalcond[2]=((x2808)*(x2811));
evalcond[3]=((((IkReal(0.850000000000000))*(x2809)))+(x2811));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x2808)*(x2811)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(x2809)*(x2811))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x2815 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2815.valid ) {
    continue;
}
IkReal x2813=x2815.value;
IkReal x2814=((IkReal(-1.00000000000000))*(py)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2813)))))));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x2813)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2814;
evalcond[3]=x2814;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x2816 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2816.valid ) {
    continue;
}
dummyeval[1]=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2816.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x2817 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2817.valid ) {
    continue;
}
dummyeval[1]=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2817.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2818=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2818))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2818))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2821 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2821.valid ) {
    continue;
}
IkReal x2819=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2821.value)))));
IkReal x2820=((py)*(x2819));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2819) != 0)?((IkReal)1/(x2819)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2819) != 0)?((IkReal)1/((x2819)*(x2819))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2820)))+(((IkReal(20.0000000000000))*(pp)*(x2820))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2819) != 0)?((IkReal)1/(x2819)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2819) != 0)?((IkReal)1/((x2819)*(x2819))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2820)))+(((IkReal(20.0000000000000))*(pp)*(x2820)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2819) != 0)?((IkReal)1/(x2819)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x2819) != 0)?((IkReal)1/((x2819)*(x2819))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2820)))+(((IkReal(20.0000000000000))*(pp)*(x2820)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2822=IKcos(j1);
IkReal x2823=IKsin(j1);
IkReal x2824=x2819;
IkReal x2825=((py)*(x2824));
IkReal x2826=((x2822)*(x2825));
IkReal x2827=((x2823)*(x2825));
evalcond[0]=((IkReal(-0.850000000000000))+(x2827));
evalcond[1]=((IkReal(-0.850000000000000))*(x2822));
evalcond[2]=((IkReal(-1.00000000000000))*(x2826));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2825)))+(((IkReal(0.850000000000000))*(x2823))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2827)))+(((IkReal(0.0900000000000000))*(x2826)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2829 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2829.valid ) {
    continue;
}
IkReal x2828=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2829.value)))));
if( IKabs(((IkReal(1.17647058823529))*(py)*(x2828))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2828) != 0)?((IkReal)1/(x2828)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2828)*(x2828)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(x2828)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2828) != 0)?((IkReal)1/(x2828)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2828)*(x2828))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(x2828)), ((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x2828) != 0)?((IkReal)1/(x2828)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x2828)*(x2828))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2830=IKcos(j1);
IkReal x2831=IKsin(j1);
IkReal x2832=x2828;
IkReal x2833=((py)*(x2832));
IkReal x2834=((x2830)*(x2833));
IkReal x2835=((x2831)*(x2833));
evalcond[0]=((IkReal(-0.850000000000000))+(x2835));
evalcond[1]=((IkReal(-0.850000000000000))*(x2830));
evalcond[2]=((IkReal(-1.00000000000000))*(x2834));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2833)))+(((IkReal(0.850000000000000))*(x2831))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2835)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x2834))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2836=((IkReal(1.00000000000000))*(pp));
IkReal x2837=((IkReal(3.14159265358979))+(j0));
IkReal x2838=((IkReal(-1.00000000000000))*(py));
Atan2Value<IkReal> x2839 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2839.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x2839.value)+(x2837)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(x2837, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2836)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2838;
evalcond[4]=x2838;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2836))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2841 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2841.valid ) {
    continue;
}
IkReal x2840=x2841.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2840));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2840))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2842=IKsin(j1);
IkReal x2843=IKcos(j1);
IkReal x2844=((IkReal(0.0450000000000000))*(x2843));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x2842)))+(((IkReal(0.300000000000000))*(cj3)*(x2842)))+(((IkReal(0.550000000000000))*(x2842)))+(x2844)+(((IkReal(-1.00000000000000))*(cj3)*(x2844)))+(((IkReal(0.300000000000000))*(sj3)*(x2843))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2845=((IkReal(1.00000000000000))*(pp));
IkReal x2846=((IkReal(-1.00000000000000))*(py));
Atan2Value<IkReal> x2847 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2847.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x2847.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x2845))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2846;
evalcond[4]=x2846;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2845))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2849 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2849.valid ) {
    continue;
}
IkReal x2848=x2849.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2848));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2848))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2850=IKsin(j1);
IkReal x2851=IKcos(j1);
IkReal x2852=((IkReal(0.0450000000000000))*(x2851));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x2850)))+(((IkReal(0.300000000000000))*(cj3)*(x2850)))+(((IkReal(0.550000000000000))*(x2850)))+(x2852)+(((IkReal(0.300000000000000))*(sj3)*(x2851)))+(((IkReal(-1.00000000000000))*(cj3)*(x2852))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2853=((IkReal(1.00000000000000))*(pp));
Atan2Value<IkReal> x2854 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2854.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x2854.value)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2853)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2853))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2856 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2856.valid ) {
    continue;
}
IkReal x2855=x2856.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2855));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2855))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2857=IKsin(j1);
IkReal x2858=IKcos(j1);
IkReal x2859=((IkReal(0.0450000000000000))*(x2858));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x2857)))+(((IkReal(0.300000000000000))*(cj3)*(x2857)))+(((IkReal(0.550000000000000))*(x2857)))+(x2859)+(((IkReal(0.300000000000000))*(sj3)*(x2858)))+(((IkReal(-1.00000000000000))*(cj3)*(x2859))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2860=((IkReal(1.00000000000000))*(pp));
Atan2Value<IkReal> x2861 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2861.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x2861.value)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2860)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2860))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2863 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2863.valid ) {
    continue;
}
IkReal x2862=x2863.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2862));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2862))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2864=IKsin(j1);
IkReal x2865=IKcos(j1);
IkReal x2866=((IkReal(0.0450000000000000))*(x2865));
evalcond[0]=((((IkReal(0.300000000000000))*(sj3)*(x2865)))+(((IkReal(0.0450000000000000))*(sj3)*(x2864)))+(((IkReal(0.300000000000000))*(cj3)*(x2864)))+(((IkReal(-1.00000000000000))*(cj3)*(x2866)))+(x2866)+(((IkReal(0.550000000000000))*(x2864))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
Atan2Value<IkReal> x2869 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2869.valid ) {
    continue;
}
IkReal x2867=x2869.value;
IkReal x2868=((IkReal(-1.00000000000000))*(px)*(IKsin(x2867)));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x2867)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2868;
evalcond[3]=x2868;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x2870 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2870.valid ) {
    continue;
}
dummyeval[1]=IKcos(x2870.value);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x2871 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2871.valid ) {
    continue;
}
dummyeval[1]=IKcos(x2871.value);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2872=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2872))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2872))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2875 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2875.valid ) {
    continue;
}
IkReal x2873=IKcos(x2875.value);
IkReal x2874=((px)*(x2873));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2873) != 0)?((IkReal)1/(x2873)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2873) != 0)?((IkReal)1/((x2873)*(x2873))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2874)))+(((IkReal(20.0000000000000))*(pp)*(x2874))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2873) != 0)?((IkReal)1/(x2873)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2873) != 0)?((IkReal)1/((x2873)*(x2873))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2874)))+(((IkReal(20.0000000000000))*(pp)*(x2874)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2873) != 0)?((IkReal)1/(x2873)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2873) != 0)?((IkReal)1/((x2873)*(x2873))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2874)))+(((IkReal(20.0000000000000))*(pp)*(x2874)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2876=IKcos(j1);
IkReal x2877=IKsin(j1);
Atan2Value<IkReal> x2880 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2880.valid ) {
    continue;
}
IkReal x2878=IKcos(x2880.value);
IkReal x2879=((px)*(x2878));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2877)*(x2879))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2876));
evalcond[2]=((IkReal(-1.00000000000000))*(x2876)*(x2879));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2879)))+(((IkReal(0.850000000000000))*(x2877))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x2876)*(x2879)))+(((IkReal(1.10000000000000))*(x2877)*(x2879)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2882 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2882.valid ) {
    continue;
}
IkReal x2881=IKcos(x2882.value);
if( IKabs(((IkReal(1.17647058823529))*(px)*(x2881))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2881) != 0)?((IkReal)1/(x2881)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2881)*(x2881)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x2881)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2881) != 0)?((IkReal)1/(x2881)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2881)*(x2881))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x2881)), ((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2881) != 0)?((IkReal)1/(x2881)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2881)*(x2881))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2883=IKcos(j1);
IkReal x2884=IKsin(j1);
Atan2Value<IkReal> x2887 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2887.valid ) {
    continue;
}
IkReal x2885=IKcos(x2887.value);
IkReal x2886=((px)*(x2885));
evalcond[0]=((IkReal(-0.850000000000000))+(((x2884)*(x2886))));
evalcond[1]=((IkReal(-0.850000000000000))*(x2883));
evalcond[2]=((IkReal(-1.00000000000000))*(x2883)*(x2886));
evalcond[3]=((((IkReal(0.850000000000000))*(x2884)))+(((IkReal(-1.00000000000000))*(x2886))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2884)*(x2886)))+(((IkReal(0.0900000000000000))*(x2883)*(x2886)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x2890 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2890.valid ) {
    continue;
}
IkReal x2888=x2890.value;
IkReal x2889=((px)*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2888)))))));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x2888)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x2889;
evalcond[3]=x2889;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x2891 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2891.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2891.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x2892 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2892.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2892.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x2893=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2893))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2893))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2896 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2896.valid ) {
    continue;
}
IkReal x2894=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2896.value)))));
IkReal x2895=((px)*(x2894));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2894) != 0)?((IkReal)1/(x2894)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2894) != 0)?((IkReal)1/((x2894)*(x2894))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2895)))+(((IkReal(20.0000000000000))*(pp)*(x2895))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2894) != 0)?((IkReal)1/(x2894)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2894) != 0)?((IkReal)1/((x2894)*(x2894))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2895)))+(((IkReal(20.0000000000000))*(pp)*(x2895)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2894) != 0)?((IkReal)1/(x2894)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x2894) != 0)?((IkReal)1/((x2894)*(x2894))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x2895)))+(((IkReal(20.0000000000000))*(pp)*(x2895)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2897=IKcos(j1);
IkReal x2898=IKsin(j1);
IkReal x2899=x2894;
IkReal x2900=((px)*(x2899));
IkReal x2901=((x2897)*(x2900));
IkReal x2902=((x2898)*(x2900));
evalcond[0]=((IkReal(-0.850000000000000))+(x2902));
evalcond[1]=((IkReal(-0.850000000000000))*(x2897));
evalcond[2]=((IkReal(-1.00000000000000))*(x2901));
evalcond[3]=((((IkReal(0.850000000000000))*(x2898)))+(((IkReal(-1.00000000000000))*(x2900))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2902)))+(((IkReal(0.0900000000000000))*(x2901)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2904 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2904.valid ) {
    continue;
}
IkReal x2903=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x2904.value)))));
if( IKabs(((IkReal(1.17647058823529))*(px)*(x2903))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2903) != 0)?((IkReal)1/(x2903)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2903)*(x2903))))+(((IkReal(17.0000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x2903)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2903) != 0)?((IkReal)1/(x2903)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2903)*(x2903))))+(((IkReal(17.0000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x2903)), ((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x2903) != 0)?((IkReal)1/(x2903)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((px)*(px))*((x2903)*(x2903))))+(((IkReal(17.0000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2905=IKcos(j1);
IkReal x2906=IKsin(j1);
IkReal x2907=x2903;
IkReal x2908=((px)*(x2907));
IkReal x2909=((x2905)*(x2908));
IkReal x2910=((x2906)*(x2908));
evalcond[0]=((IkReal(-0.850000000000000))+(x2910));
evalcond[1]=((IkReal(-0.850000000000000))*(x2905));
evalcond[2]=((IkReal(-1.00000000000000))*(x2909));
evalcond[3]=((((IkReal(0.850000000000000))*(x2906)))+(((IkReal(-1.00000000000000))*(x2908))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x2910)))+(((IkReal(0.0900000000000000))*(x2909)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2911=((IkReal(1.00000000000000))*(pp));
Atan2Value<IkReal> x2912 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2912.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x2912.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2911)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2911))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2914 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2914.valid ) {
    continue;
}
IkReal x2913=x2914.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2913));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2913))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2915=IKsin(j1);
IkReal x2916=IKcos(j1);
IkReal x2917=((IkReal(0.0450000000000000))*(x2916));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x2917)))+(((IkReal(0.300000000000000))*(sj3)*(x2916)))+(((IkReal(0.0450000000000000))*(sj3)*(x2915)))+(((IkReal(0.550000000000000))*(x2915)))+(((IkReal(0.300000000000000))*(cj3)*(x2915)))+(x2917));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2918=((IkReal(1.00000000000000))*(pp));
Atan2Value<IkReal> x2919 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2919.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x2919.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x2918)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2918))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2921 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2921.valid ) {
    continue;
}
IkReal x2920=x2921.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2920));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2920))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2922=IKsin(j1);
IkReal x2923=IKcos(j1);
IkReal x2924=((IkReal(0.0450000000000000))*(x2923));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x2922)))+(((IkReal(0.0450000000000000))*(sj3)*(x2922)))+(((IkReal(0.300000000000000))*(sj3)*(x2923)))+(((IkReal(0.550000000000000))*(x2922)))+(((IkReal(-1.00000000000000))*(cj3)*(x2924)))+(x2924));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2925=((IkReal(1.00000000000000))*(pp));
IkReal x2926=((IkReal(-1.00000000000000))*(px));
Atan2Value<IkReal> x2927 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2927.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x2927.value)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2925)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2926;
evalcond[4]=x2926;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2925))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2929 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2929.valid ) {
    continue;
}
IkReal x2928=x2929.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2928));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2928))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2930=IKsin(j1);
IkReal x2931=IKcos(j1);
IkReal x2932=((IkReal(0.0450000000000000))*(x2931));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x2930)))+(((IkReal(0.550000000000000))*(x2930)))+(((IkReal(0.300000000000000))*(sj3)*(x2931)))+(((IkReal(-1.00000000000000))*(cj3)*(x2932)))+(x2932)+(((IkReal(0.300000000000000))*(cj3)*(x2930))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x2933=((IkReal(1.00000000000000))*(pp));
IkReal x2934=((IkReal(-1.00000000000000))*(px));
Atan2Value<IkReal> x2935 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x2935.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x2935.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x2933)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x2934;
evalcond[4]=x2934;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2933))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x2937 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x2937.valid ) {
    continue;
}
IkReal x2936=x2937.value;
j1array[0]=((IkReal(-1.00000000000000))*(x2936));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x2936))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2938=IKsin(j1);
IkReal x2939=IKcos(j1);
IkReal x2940=((IkReal(0.0450000000000000))*(x2939));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x2938)))+(((IkReal(0.550000000000000))*(x2938)))+(((IkReal(0.300000000000000))*(sj3)*(x2939)))+(((IkReal(-1.00000000000000))*(cj3)*(x2940)))+(x2940)+(((IkReal(0.300000000000000))*(cj3)*(x2938))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2941=((IkReal(0.300000000000000))*(sj3));
IkReal x2942=((py)*(sj0));
IkReal x2943=((IkReal(0.0450000000000000))*(cj3));
IkReal x2944=((cj0)*(px));
if( IKabs(((((IKabs(((((IkReal(-0.0450000000000000))*(x2942)))+(((IkReal(-0.0450000000000000))*(x2944)))+(((x2943)*(x2944)))+(((x2942)*(x2943)))+(((IkReal(-1.00000000000000))*(x2941)*(x2944)))+(((IkReal(-1.00000000000000))*(x2941)*(x2942))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x2942)))+(((IkReal(-0.0450000000000000))*(x2944)))+(((x2943)*(x2944)))+(((x2942)*(x2943)))+(((IkReal(-1.00000000000000))*(x2941)*(x2944)))+(((IkReal(-1.00000000000000))*(x2941)*(x2942)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x2944)))+(((IkReal(-1.00000000000000))*(x2942))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2944)))+(((IkReal(-1.00000000000000))*(x2942)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2941)))+(x2943))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.0450000000000000))*(x2942)))+(((IkReal(-0.0450000000000000))*(x2944)))+(((x2943)*(x2944)))+(((x2942)*(x2943)))+(((IkReal(-1.00000000000000))*(x2941)*(x2944)))+(((IkReal(-1.00000000000000))*(x2941)*(x2942))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x2942)))+(((IkReal(-0.0450000000000000))*(x2944)))+(((x2943)*(x2944)))+(((x2942)*(x2943)))+(((IkReal(-1.00000000000000))*(x2941)*(x2944)))+(((IkReal(-1.00000000000000))*(x2941)*(x2942)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x2944)))+(((IkReal(-1.00000000000000))*(x2942))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2944)))+(((IkReal(-1.00000000000000))*(x2942)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2941)))+(x2943)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-0.0450000000000000))*(x2942)))+(((IkReal(-0.0450000000000000))*(x2944)))+(((x2943)*(x2944)))+(((x2942)*(x2943)))+(((IkReal(-1.00000000000000))*(x2941)*(x2944)))+(((IkReal(-1.00000000000000))*(x2941)*(x2942))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x2942)))+(((IkReal(-0.0450000000000000))*(x2944)))+(((x2943)*(x2944)))+(((x2942)*(x2943)))+(((IkReal(-1.00000000000000))*(x2941)*(x2944)))+(((IkReal(-1.00000000000000))*(x2941)*(x2942)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x2944)))+(((IkReal(-1.00000000000000))*(x2942))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2944)))+(((IkReal(-1.00000000000000))*(x2942)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2941)))+(x2943)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2945=IKsin(j1);
IkReal x2946=IKcos(j1);
IkReal x2947=((IkReal(0.300000000000000))*(cj3));
IkReal x2948=((IkReal(0.0450000000000000))*(cj3));
IkReal x2949=((cj0)*(px));
IkReal x2950=((py)*(sj0));
IkReal x2951=((IkReal(0.0450000000000000))*(sj3));
IkReal x2952=((IkReal(0.300000000000000))*(sj3));
IkReal x2953=((IkReal(0.0450000000000000))*(x2945));
IkReal x2954=((IkReal(1.00000000000000))*(x2946));
IkReal x2955=((IkReal(0.0900000000000000))*(x2946));
IkReal x2956=((IkReal(1.10000000000000))*(x2945));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2945)*(x2950)))+(((IkReal(-1.00000000000000))*(x2951)))+(((x2945)*(x2949)))+(((IkReal(-1.00000000000000))*(x2947))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x2946)))+(((x2945)*(x2952)))+(((IkReal(-1.00000000000000))*(x2946)*(x2947)))+(((IkReal(-1.00000000000000))*(x2945)*(x2948)))+(x2953)+(((IkReal(-1.00000000000000))*(x2946)*(x2951))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2948)))+(((IkReal(-1.00000000000000))*(x2949)*(x2954)))+(((IkReal(-1.00000000000000))*(x2950)*(x2954)))+(x2952));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2950)))+(((IkReal(-1.00000000000000))*(x2949)))+(((x2946)*(x2952)))+(((x2945)*(x2951)))+(((x2945)*(x2947)))+(((IkReal(0.0450000000000000))*(x2946)))+(((IkReal(0.550000000000000))*(x2945)))+(((IkReal(-1.00000000000000))*(x2946)*(x2948))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2950)*(x2955)))+(((x2950)*(x2956)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2949)*(x2956)))+(((x2949)*(x2955))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2957=((cj0)*(px));
IkReal x2958=((IkReal(0.0450000000000000))*(sj3));
IkReal x2959=((py)*(sj0));
IkReal x2960=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((((IKabs(((x2959)+(x2957))) != 0)?((IkReal)1/(((x2959)+(x2957)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2958)+(x2960))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x2957)*(x2960)))+(((IkReal(-0.550000000000000))*(x2957)))+(((IkReal(-0.550000000000000))*(x2959)))+(((IkReal(-1.00000000000000))*(x2958)*(x2959)))+(((IkReal(-1.00000000000000))*(x2959)*(x2960)))+(((IkReal(-1.00000000000000))*(x2957)*(x2958))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2957)*(x2960)))+(((IkReal(-0.550000000000000))*(x2957)))+(((IkReal(-0.550000000000000))*(x2959)))+(((IkReal(-1.00000000000000))*(x2958)*(x2959)))+(((IkReal(-1.00000000000000))*(x2959)*(x2960)))+(((IkReal(-1.00000000000000))*(x2957)*(x2958)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x2959)+(x2957))) != 0)?((IkReal)1/(((x2959)+(x2957)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2958)+(x2960)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x2957)*(x2960)))+(((IkReal(-0.550000000000000))*(x2957)))+(((IkReal(-0.550000000000000))*(x2959)))+(((IkReal(-1.00000000000000))*(x2958)*(x2959)))+(((IkReal(-1.00000000000000))*(x2959)*(x2960)))+(((IkReal(-1.00000000000000))*(x2957)*(x2958))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2957)*(x2960)))+(((IkReal(-0.550000000000000))*(x2957)))+(((IkReal(-0.550000000000000))*(x2959)))+(((IkReal(-1.00000000000000))*(x2958)*(x2959)))+(((IkReal(-1.00000000000000))*(x2959)*(x2960)))+(((IkReal(-1.00000000000000))*(x2957)*(x2958)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x2959)+(x2957))) != 0)?((IkReal)1/(((x2959)+(x2957)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x2958)+(x2960)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x2957)*(x2960)))+(((IkReal(-0.550000000000000))*(x2957)))+(((IkReal(-0.550000000000000))*(x2959)))+(((IkReal(-1.00000000000000))*(x2958)*(x2959)))+(((IkReal(-1.00000000000000))*(x2959)*(x2960)))+(((IkReal(-1.00000000000000))*(x2957)*(x2958))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x2957)*(x2960)))+(((IkReal(-0.550000000000000))*(x2957)))+(((IkReal(-0.550000000000000))*(x2959)))+(((IkReal(-1.00000000000000))*(x2958)*(x2959)))+(((IkReal(-1.00000000000000))*(x2959)*(x2960)))+(((IkReal(-1.00000000000000))*(x2957)*(x2958)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2961=IKsin(j1);
IkReal x2962=IKcos(j1);
IkReal x2963=((IkReal(0.300000000000000))*(cj3));
IkReal x2964=((IkReal(0.0450000000000000))*(cj3));
IkReal x2965=((cj0)*(px));
IkReal x2966=((py)*(sj0));
IkReal x2967=((IkReal(0.0450000000000000))*(sj3));
IkReal x2968=((IkReal(0.300000000000000))*(sj3));
IkReal x2969=((IkReal(0.0450000000000000))*(x2961));
IkReal x2970=((IkReal(1.00000000000000))*(x2962));
IkReal x2971=((IkReal(0.0900000000000000))*(x2962));
IkReal x2972=((IkReal(1.10000000000000))*(x2961));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2961)*(x2965)))+(((x2961)*(x2966)))+(((IkReal(-1.00000000000000))*(x2967)))+(((IkReal(-1.00000000000000))*(x2963))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x2962)))+(((x2961)*(x2968)))+(((IkReal(-1.00000000000000))*(x2962)*(x2963)))+(((IkReal(-1.00000000000000))*(x2962)*(x2967)))+(((IkReal(-1.00000000000000))*(x2961)*(x2964)))+(x2969));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2965)*(x2970)))+(((IkReal(-1.00000000000000))*(x2964)))+(x2968)+(((IkReal(-1.00000000000000))*(x2966)*(x2970))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2965)))+(((IkReal(-1.00000000000000))*(x2966)))+(((x2961)*(x2967)))+(((x2961)*(x2963)))+(((IkReal(0.0450000000000000))*(x2962)))+(((x2962)*(x2968)))+(((IkReal(-1.00000000000000))*(x2962)*(x2964)))+(((IkReal(0.550000000000000))*(x2961))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x2966)*(x2971)))+(((x2966)*(x2972)))+(((x2965)*(x2972)))+(((x2965)*(x2971))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x2973 = IKatan2WithCheck(((gconst56)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))),((gconst56)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x2973.valid ) {
    continue;
}
j1array[0]=x2973.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2974=IKsin(j1);
IkReal x2975=IKcos(j1);
IkReal x2976=((IkReal(0.300000000000000))*(cj3));
IkReal x2977=((IkReal(0.0450000000000000))*(cj3));
IkReal x2978=((cj0)*(px));
IkReal x2979=((py)*(sj0));
IkReal x2980=((IkReal(0.0450000000000000))*(sj3));
IkReal x2981=((IkReal(0.300000000000000))*(sj3));
IkReal x2982=((IkReal(0.0450000000000000))*(x2974));
IkReal x2983=((IkReal(1.00000000000000))*(x2975));
IkReal x2984=((IkReal(0.0900000000000000))*(x2975));
IkReal x2985=((IkReal(1.10000000000000))*(x2974));
evalcond[0]=((IkReal(-0.550000000000000))+(((x2974)*(x2978)))+(((x2974)*(x2979)))+(((IkReal(-1.00000000000000))*(x2980)))+(((IkReal(-1.00000000000000))*(x2976))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x2975)*(x2976)))+(((IkReal(-0.550000000000000))*(x2975)))+(((x2974)*(x2981)))+(((IkReal(-1.00000000000000))*(x2974)*(x2977)))+(x2982)+(((IkReal(-1.00000000000000))*(x2975)*(x2980))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x2978)*(x2983)))+(((IkReal(-1.00000000000000))*(x2979)*(x2983)))+(((IkReal(-1.00000000000000))*(x2977)))+(x2981));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2975)*(x2977)))+(((IkReal(-1.00000000000000))*(x2978)))+(((IkReal(-1.00000000000000))*(x2979)))+(((x2974)*(x2976)))+(((x2974)*(x2980)))+(((IkReal(0.0450000000000000))*(x2975)))+(((IkReal(0.550000000000000))*(x2974)))+(((x2975)*(x2981))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x2978)*(x2984)))+(((x2978)*(x2985)))+(((IkReal(-1.00000000000000))*(pp)))+(((x2979)*(x2984)))+(((x2979)*(x2985))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x2986=((px)*(sj0));
IkReal x2987=((cj0)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x2987)))+(x2986));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2986)))+(x2987));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((cj0)*(px)))+(((py)*(sj0)))));
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2988=((cj0)*(px));
IkReal x2989=((py)*(sj0));
IkReal x2990=((IkReal(6.66666666666667))*(cj3));
IkReal x2991=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((x2989)+(x2988));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x2989)*(x2990)))+(((IkReal(-1.00000000000000))*(x2989)*(x2991)))+(((IkReal(-1.00000000000000))*(x2988)*(x2991)))+(((IkReal(-1.00000000000000))*(x2988)*(x2990)))+(((IkReal(-12.2222222222222))*(x2988)))+(((IkReal(-12.2222222222222))*(x2989))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2992=((cj0)*(px));
IkReal x2993=((py)*(sj0));
IkReal x2994=((IkReal(6.66666666666667))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x2992)*(x2994)))+(((cj3)*(x2992)))+(((cj3)*(x2993)))+(((IkReal(-1.00000000000000))*(x2993)*(x2994)))+(((IkReal(-1.00000000000000))*(x2993)))+(((IkReal(-1.00000000000000))*(x2992))));
dummyeval[1]=((x2992)+(x2993));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2995=((px)*(sj0));
IkReal x2996=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x2996)))+(x2995));
evalcond[3]=((((IkReal(-1.00000000000000))*(x2995)))+(x2996));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x2997=((cj0)*(px));
IkReal x2998=((py)*(sj0));
dummyeval[0]=((x2998)+(x2997));
dummyeval[1]=((((IkReal(-2.00000000000000))*(x2997)*(x2998)))+(((IkReal(-1.00000000000000))*((x2997)*(x2997))))+(((IkReal(-1.00000000000000))*((x2998)*(x2998)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x2999=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x2999))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x2999))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x3000=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3000))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3000))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x3001=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3001))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3001))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x3002=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3002))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3002))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3003=((cj0)*(px));
IkReal x3004=((py)*(sj0));
IkReal x3005=((IkReal(20.0000000000000))*(pp));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x3003)))+(((IkReal(20.0000000000000))*(x3004))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x3003)))+(((IkReal(20.0000000000000))*(x3004)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-3.60000000000000))*(x3003)*(x3004)))+(((IkReal(-1.80000000000000))*((x3004)*(x3004))))+(((IkReal(-1.80000000000000))*((x3003)*(x3003)))))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x3003)*(x3004)))+(((IkReal(-1.80000000000000))*((x3004)*(x3004))))+(((IkReal(-1.80000000000000))*((x3003)*(x3003))))))):(IkReal)1.0e30))*(((((x3003)*(x3005)))+(((IkReal(-14.4500000000000))*(x3004)))+(((IkReal(-14.4500000000000))*(x3003)))+(((x3004)*(x3005))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x3003)))+(((IkReal(20.0000000000000))*(x3004))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x3003)))+(((IkReal(20.0000000000000))*(x3004)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(-3.60000000000000))*(x3003)*(x3004)))+(((IkReal(-1.80000000000000))*((x3004)*(x3004))))+(((IkReal(-1.80000000000000))*((x3003)*(x3003)))))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x3003)*(x3004)))+(((IkReal(-1.80000000000000))*((x3004)*(x3004))))+(((IkReal(-1.80000000000000))*((x3003)*(x3003))))))):(IkReal)1.0e30))*(((((x3003)*(x3005)))+(((IkReal(-14.4500000000000))*(x3004)))+(((IkReal(-14.4500000000000))*(x3003)))+(((x3004)*(x3005)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x3003)))+(((IkReal(20.0000000000000))*(x3004))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x3003)))+(((IkReal(20.0000000000000))*(x3004)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(-3.60000000000000))*(x3003)*(x3004)))+(((IkReal(-1.80000000000000))*((x3004)*(x3004))))+(((IkReal(-1.80000000000000))*((x3003)*(x3003)))))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x3003)*(x3004)))+(((IkReal(-1.80000000000000))*((x3004)*(x3004))))+(((IkReal(-1.80000000000000))*((x3003)*(x3003))))))):(IkReal)1.0e30))*(((((x3003)*(x3005)))+(((IkReal(-14.4500000000000))*(x3004)))+(((IkReal(-14.4500000000000))*(x3003)))+(((x3004)*(x3005)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3006=IKsin(j1);
IkReal x3007=IKcos(j1);
IkReal x3008=((py)*(sj0));
IkReal x3009=((cj0)*(px));
IkReal x3010=((IkReal(0.0900000000000000))*(x3007));
IkReal x3011=((x3006)*(x3008));
evalcond[0]=((IkReal(-0.850000000000000))+(x3011)+(((x3006)*(x3009))));
evalcond[1]=((IkReal(-0.850000000000000))*(x3007));
evalcond[2]=((((x3007)*(x3008)))+(((x3007)*(x3009))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3009)))+(((IkReal(-1.00000000000000))*(x3008)))+(((IkReal(0.850000000000000))*(x3006))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3006)*(x3009)))+(((IkReal(1.10000000000000))*(x3011)))+(((IkReal(-1.00000000000000))*(x3008)*(x3010)))+(((IkReal(-1.00000000000000))*(x3009)*(x3010))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3012=((cj0)*(px));
IkReal x3013=((py)*(sj0));
if( IKabs(((((IkReal(1.17647058823529))*(x3013)))+(((IkReal(1.17647058823529))*(x3012))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.53000000000000))*(x3012)))+(((IkReal(-1.53000000000000))*(x3013))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x3012)))+(((IkReal(-1.53000000000000))*(x3013)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x3012)*(x3012))))+(((IkReal(-22.0000000000000))*((x3013)*(x3013))))+(((IkReal(-44.0000000000000))*(x3012)*(x3013))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x3013)))+(((IkReal(1.17647058823529))*(x3012)))))+IKsqr(((((IKabs(((((IkReal(-1.53000000000000))*(x3012)))+(((IkReal(-1.53000000000000))*(x3013))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x3012)))+(((IkReal(-1.53000000000000))*(x3013)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x3012)*(x3012))))+(((IkReal(-22.0000000000000))*((x3013)*(x3013))))+(((IkReal(-44.0000000000000))*(x3012)*(x3013)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x3013)))+(((IkReal(1.17647058823529))*(x3012)))), ((((IKabs(((((IkReal(-1.53000000000000))*(x3012)))+(((IkReal(-1.53000000000000))*(x3013))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x3012)))+(((IkReal(-1.53000000000000))*(x3013)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x3012)*(x3012))))+(((IkReal(-22.0000000000000))*((x3013)*(x3013))))+(((IkReal(-44.0000000000000))*(x3012)*(x3013)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3014=IKsin(j1);
IkReal x3015=IKcos(j1);
IkReal x3016=((py)*(sj0));
IkReal x3017=((cj0)*(px));
IkReal x3018=((IkReal(0.0900000000000000))*(x3015));
IkReal x3019=((x3014)*(x3016));
evalcond[0]=((IkReal(-0.850000000000000))+(x3019)+(((x3014)*(x3017))));
evalcond[1]=((IkReal(-0.850000000000000))*(x3015));
evalcond[2]=((((x3015)*(x3017)))+(((x3015)*(x3016))));
evalcond[3]=((((IkReal(0.850000000000000))*(x3014)))+(((IkReal(-1.00000000000000))*(x3017)))+(((IkReal(-1.00000000000000))*(x3016))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3014)*(x3017)))+(((IkReal(-1.00000000000000))*(x3017)*(x3018)))+(((IkReal(1.10000000000000))*(x3019)))+(((IkReal(-1.00000000000000))*(x3016)*(x3018))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x3025 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3025.valid ) {
    continue;
}
IkReal x3020=x3025.value;
IkReal x3021=IKcos(x3020);
IkReal x3022=IKsin(x3020);
IkReal x3023=((px)*(x3022));
IkReal x3024=((py)*(x3021));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x3020)+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x3024)))+(((IkReal(-1.00000000000000))*(x3023))));
evalcond[3]=((x3024)+(x3023));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst62;
Atan2Value<IkReal> x3027 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3027.valid ) {
    continue;
}
IkReal x3026=x3027.value;
gconst62=IKsign(((((IkReal(-1.00000000000000))*(py)*(IKsin(x3026))))+(((px)*(IKcos(x3026))))));
Atan2Value<IkReal> x3029 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3029.valid ) {
    continue;
}
IkReal x3028=x3029.value;
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(IKsin(x3028))))+(((px)*(IKcos(x3028)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
Atan2Value<IkReal> x3036 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3036.valid ) {
    continue;
}
IkReal x3030=x3036.value;
IkReal x3031=((IkReal(6.66666666666667))*(cj3));
IkReal x3032=IKsin(x3030);
IkReal x3033=IKcos(x3030);
IkReal x3034=((px)*(x3033));
IkReal x3035=((py)*(x3032));
dummyeval[0]=((x3034)+(((IkReal(-1.00000000000000))*(x3035))));
dummyeval[1]=((((IkReal(12.2222222222222))*(x3035)))+(((IkReal(-12.2222222222222))*(x3034)))+(((sj3)*(x3035)))+(((x3031)*(x3035)))+(((IkReal(-1.00000000000000))*(x3031)*(x3034)))+(((IkReal(-1.00000000000000))*(sj3)*(x3034))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3044 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3044.valid ) {
    continue;
}
IkReal x3037=x3044.value;
IkReal x3038=((IkReal(0.300000000000000))*(cj3));
IkReal x3039=((IkReal(0.0450000000000000))*(sj3));
IkReal x3040=IKsin(x3037);
IkReal x3041=IKcos(x3037);
IkReal x3042=((px)*(x3041));
IkReal x3043=((py)*(x3040));
if( IKabs(((((IKabs(((x3042)+(((IkReal(-1.00000000000000))*(x3043))))) != 0)?((IkReal)1/(((x3042)+(((IkReal(-1.00000000000000))*(x3043)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x3038)+(x3039))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x3039)*(x3043)))+(((IkReal(-1.00000000000000))*(x3038)*(x3042)))+(((IkReal(-1.00000000000000))*(x3039)*(x3042)))+(((IkReal(0.550000000000000))*(x3043)))+(((x3038)*(x3043)))+(((IkReal(-0.550000000000000))*(x3042))))) != 0)?((IkReal)1/(((((x3039)*(x3043)))+(((IkReal(-1.00000000000000))*(x3038)*(x3042)))+(((IkReal(-1.00000000000000))*(x3039)*(x3042)))+(((IkReal(0.550000000000000))*(x3043)))+(((x3038)*(x3043)))+(((IkReal(-0.550000000000000))*(x3042)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x3042)+(((IkReal(-1.00000000000000))*(x3043))))) != 0)?((IkReal)1/(((x3042)+(((IkReal(-1.00000000000000))*(x3043)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x3038)+(x3039)))))+IKsqr(((((IKabs(((((x3039)*(x3043)))+(((IkReal(-1.00000000000000))*(x3038)*(x3042)))+(((IkReal(-1.00000000000000))*(x3039)*(x3042)))+(((IkReal(0.550000000000000))*(x3043)))+(((x3038)*(x3043)))+(((IkReal(-0.550000000000000))*(x3042))))) != 0)?((IkReal)1/(((((x3039)*(x3043)))+(((IkReal(-1.00000000000000))*(x3038)*(x3042)))+(((IkReal(-1.00000000000000))*(x3039)*(x3042)))+(((IkReal(0.550000000000000))*(x3043)))+(((x3038)*(x3043)))+(((IkReal(-0.550000000000000))*(x3042)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x3042)+(((IkReal(-1.00000000000000))*(x3043))))) != 0)?((IkReal)1/(((x3042)+(((IkReal(-1.00000000000000))*(x3043)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x3038)+(x3039)))), ((((IKabs(((((x3039)*(x3043)))+(((IkReal(-1.00000000000000))*(x3038)*(x3042)))+(((IkReal(-1.00000000000000))*(x3039)*(x3042)))+(((IkReal(0.550000000000000))*(x3043)))+(((x3038)*(x3043)))+(((IkReal(-0.550000000000000))*(x3042))))) != 0)?((IkReal)1/(((((x3039)*(x3043)))+(((IkReal(-1.00000000000000))*(x3038)*(x3042)))+(((IkReal(-1.00000000000000))*(x3039)*(x3042)))+(((IkReal(0.550000000000000))*(x3043)))+(((x3038)*(x3043)))+(((IkReal(-0.550000000000000))*(x3042)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3045=IKsin(j1);
Atan2Value<IkReal> x3059 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3059.valid ) {
    continue;
}
IkReal x3046=x3059.value;
IkReal x3047=IKcos(j1);
IkReal x3048=((IkReal(0.300000000000000))*(cj3));
IkReal x3049=((IkReal(0.0450000000000000))*(cj3));
IkReal x3050=((IkReal(0.0450000000000000))*(sj3));
IkReal x3051=((IkReal(0.300000000000000))*(sj3));
IkReal x3052=IKcos(x3046);
IkReal x3053=IKsin(x3046);
IkReal x3054=((IkReal(0.0450000000000000))*(x3045));
IkReal x3055=((IkReal(0.0900000000000000))*(x3047));
IkReal x3056=((py)*(x3053));
IkReal x3057=((px)*(x3052));
IkReal x3058=((x3045)*(x3057));
evalcond[0]=((IkReal(-0.550000000000000))+(x3058)+(((IkReal(-1.00000000000000))*(x3048)))+(((IkReal(-1.00000000000000))*(x3045)*(x3056)))+(((IkReal(-1.00000000000000))*(x3050))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3047)*(x3050)))+(((IkReal(-1.00000000000000))*(x3045)*(x3051)))+(((IkReal(-1.00000000000000))*(x3047)*(x3048)))+(((x3045)*(x3049)))+(((IkReal(-1.00000000000000))*(x3054)))+(((IkReal(-0.550000000000000))*(x3047))));
evalcond[2]=((IkReal(0.0450000000000000))+(x3051)+(((IkReal(-1.00000000000000))*(x3047)*(x3056)))+(((IkReal(-1.00000000000000))*(x3049)))+(((x3047)*(x3057))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3047)*(x3051)))+(x3056)+(((x3045)*(x3050)))+(((IkReal(-1.00000000000000))*(x3057)))+(((x3047)*(x3049)))+(((IkReal(0.550000000000000))*(x3045)))+(((x3045)*(x3048)))+(((IkReal(-0.0450000000000000))*(x3047))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3055)*(x3057)))+(((IkReal(-1.10000000000000))*(x3045)*(x3056)))+(((IkReal(1.10000000000000))*(x3058)))+(((IkReal(-1.00000000000000))*(pp)))+(((x3055)*(x3056))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3060 = IKatan2WithCheck(((gconst62)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))),((gconst62)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3060.valid ) {
    continue;
}
j1array[0]=x3060.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3061=IKsin(j1);
Atan2Value<IkReal> x3075 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3075.valid ) {
    continue;
}
IkReal x3062=x3075.value;
IkReal x3063=IKcos(j1);
IkReal x3064=((IkReal(0.300000000000000))*(cj3));
IkReal x3065=((IkReal(0.0450000000000000))*(cj3));
IkReal x3066=((IkReal(0.0450000000000000))*(sj3));
IkReal x3067=((IkReal(0.300000000000000))*(sj3));
IkReal x3068=IKcos(x3062);
IkReal x3069=IKsin(x3062);
IkReal x3070=((IkReal(0.0450000000000000))*(x3061));
IkReal x3071=((IkReal(0.0900000000000000))*(x3063));
IkReal x3072=((py)*(x3069));
IkReal x3073=((px)*(x3068));
IkReal x3074=((x3061)*(x3073));
evalcond[0]=((IkReal(-0.550000000000000))+(x3074)+(((IkReal(-1.00000000000000))*(x3061)*(x3072)))+(((IkReal(-1.00000000000000))*(x3064)))+(((IkReal(-1.00000000000000))*(x3066))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x3063)))+(((IkReal(-1.00000000000000))*(x3061)*(x3067)))+(((IkReal(-1.00000000000000))*(x3063)*(x3066)))+(((IkReal(-1.00000000000000))*(x3063)*(x3064)))+(((IkReal(-1.00000000000000))*(x3070)))+(((x3061)*(x3065))));
evalcond[2]=((IkReal(0.0450000000000000))+(x3067)+(((IkReal(-1.00000000000000))*(x3065)))+(((IkReal(-1.00000000000000))*(x3063)*(x3072)))+(((x3063)*(x3073))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3073)))+(x3072)+(((IkReal(-1.00000000000000))*(x3063)*(x3067)))+(((x3061)*(x3064)))+(((x3061)*(x3066)))+(((IkReal(-0.0450000000000000))*(x3063)))+(((IkReal(0.550000000000000))*(x3061)))+(((x3063)*(x3065))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x3071)*(x3073)))+(((IkReal(-1.10000000000000))*(x3061)*(x3072)))+(((IkReal(1.10000000000000))*(x3074)))+(((x3071)*(x3072))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x3082 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3082.valid ) {
    continue;
}
IkReal x3076=x3082.value;
IkReal x3077=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3076))));
IkReal x3078=IKcos(x3077);
IkReal x3079=IKsin(x3077);
IkReal x3080=((py)*(x3078));
IkReal x3081=((px)*(x3079));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x3076)+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((x3081)+(((IkReal(-1.00000000000000))*(x3080))));
evalcond[3]=((x3080)+(((IkReal(-1.00000000000000))*(x3081))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3083=((IkReal(6.66666666666667))*(cj3));
IkReal x3084=((IkReal(1.00000000000000))*(sj3));
Atan2Value<IkReal> x3090 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3090.valid ) {
    continue;
}
IkReal x3085=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3090.value))));
IkReal x3086=IKcos(x3085);
IkReal x3087=IKsin(x3085);
IkReal x3088=((py)*(x3087));
IkReal x3089=((px)*(x3086));
dummyeval[0]=((x3089)+(x3088));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x3083)*(x3089)))+(((IkReal(-1.00000000000000))*(x3083)*(x3088)))+(((IkReal(-12.2222222222222))*(x3088)))+(((IkReal(-12.2222222222222))*(x3089)))+(((IkReal(-1.00000000000000))*(x3084)*(x3089)))+(((IkReal(-1.00000000000000))*(x3084)*(x3088))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3091=((IkReal(6.66666666666667))*(sj3));
Atan2Value<IkReal> x3097 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3097.valid ) {
    continue;
}
IkReal x3092=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3097.value))));
IkReal x3093=IKcos(x3092);
IkReal x3094=IKsin(x3092);
IkReal x3095=((py)*(x3094));
IkReal x3096=((px)*(x3093));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x3091)*(x3095)))+(((IkReal(-1.00000000000000))*(x3091)*(x3096)))+(((cj3)*(x3096)))+(((cj3)*(x3095)))+(((IkReal(-1.00000000000000))*(x3095)))+(((IkReal(-1.00000000000000))*(x3096))));
dummyeval[1]=((x3096)+(x3095));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
Atan2Value<IkReal> x3103 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3103.valid ) {
    continue;
}
IkReal x3098=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3103.value))));
IkReal x3099=IKcos(x3098);
IkReal x3100=IKsin(x3098);
IkReal x3101=((py)*(x3099));
IkReal x3102=((px)*(x3100));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((x3102)+(((IkReal(-1.00000000000000))*(x3101))));
evalcond[3]=((x3101)+(((IkReal(-1.00000000000000))*(x3102))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x3104=x3098;
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(IKsin(x3104))))+(((IkReal(-1.00000000000000))*(px)*(IKcos(x3104)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3105=(py)*(py);
IkReal x3106=x3098;
IkReal x3107=IKcos(x3106);
IkReal x3108=IKsin(x3106);
IkReal x3109=(x3107)*(x3107);
IkReal x3110=((px)*(x3107));
IkReal x3111=((py)*(x3108));
dummyeval[0]=((x3111)+(x3110));
dummyeval[1]=((((IkReal(-2.00000000000000))*(x3110)*(x3111)))+(((IkReal(-1.00000000000000))*(x3105)))+(((IkReal(-1.00000000000000))*(x3109)*((px)*(px))))+(((x3105)*(x3109))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3112=(py)*(py);
IkReal x3113=((IkReal(20.0000000000000))*(pp));
IkReal x3114=x3098;
IkReal x3115=IKcos(x3114);
IkReal x3116=IKsin(x3114);
IkReal x3117=(x3115)*(x3115);
IkReal x3118=((px)*(x3115));
IkReal x3119=((py)*(x3116));
IkReal x3120=((IkReal(20.0000000000000))*(x3118));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x3119)))+(x3120))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x3119)))+(x3120)))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.80000000000000))*(x3112)))+(((IkReal(1.80000000000000))*(x3112)*(x3117)))+(((IkReal(-3.60000000000000))*(x3118)*(x3119)))+(((IkReal(-1.80000000000000))*(x3117)*((px)*(px)))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*(x3112)))+(((IkReal(1.80000000000000))*(x3112)*(x3117)))+(((IkReal(-3.60000000000000))*(x3118)*(x3119)))+(((IkReal(-1.80000000000000))*(x3117)*((px)*(px))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x3118)))+(((IkReal(-14.4500000000000))*(x3119)))+(((x3113)*(x3119)))+(((x3113)*(x3118))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x3119)))+(x3120))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x3119)))+(x3120)))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(-1.80000000000000))*(x3112)))+(((IkReal(1.80000000000000))*(x3112)*(x3117)))+(((IkReal(-3.60000000000000))*(x3118)*(x3119)))+(((IkReal(-1.80000000000000))*(x3117)*((px)*(px)))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*(x3112)))+(((IkReal(1.80000000000000))*(x3112)*(x3117)))+(((IkReal(-3.60000000000000))*(x3118)*(x3119)))+(((IkReal(-1.80000000000000))*(x3117)*((px)*(px))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x3118)))+(((IkReal(-14.4500000000000))*(x3119)))+(((x3113)*(x3119)))+(((x3113)*(x3118)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x3119)))+(x3120))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x3119)))+(x3120)))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(-1.80000000000000))*(x3112)))+(((IkReal(1.80000000000000))*(x3112)*(x3117)))+(((IkReal(-3.60000000000000))*(x3118)*(x3119)))+(((IkReal(-1.80000000000000))*(x3117)*((px)*(px)))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*(x3112)))+(((IkReal(1.80000000000000))*(x3112)*(x3117)))+(((IkReal(-3.60000000000000))*(x3118)*(x3119)))+(((IkReal(-1.80000000000000))*(x3117)*((px)*(px))))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x3118)))+(((IkReal(-14.4500000000000))*(x3119)))+(((x3113)*(x3119)))+(((x3113)*(x3118)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3121=IKsin(j1);
IkReal x3122=IKcos(j1);
IkReal x3123=x3098;
IkReal x3124=((IkReal(0.0900000000000000))*(x3122));
IkReal x3125=((IkReal(1.10000000000000))*(x3121));
IkReal x3126=IKsin(x3123);
IkReal x3127=IKcos(x3123);
IkReal x3128=((py)*(x3126));
IkReal x3129=((px)*(x3127));
IkReal x3130=((x3121)*(x3128));
IkReal x3131=((x3122)*(x3129));
evalcond[0]=((IkReal(-0.850000000000000))+(x3130)+(((x3121)*(x3129))));
evalcond[1]=((IkReal(-0.850000000000000))*(x3122));
evalcond[2]=((x3131)+(((x3122)*(x3128))));
evalcond[3]=((((IkReal(0.850000000000000))*(x3121)))+(((IkReal(-1.00000000000000))*(x3128)))+(((IkReal(-1.00000000000000))*(x3129))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3124)*(x3129)))+(((IkReal(-1.00000000000000))*(x3124)*(x3128)))+(((x3125)*(x3128)))+(((x3125)*(x3129)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3132=x3098;
IkReal x3133=IKcos(x3132);
IkReal x3134=IKsin(x3132);
IkReal x3135=((py)*(x3134));
IkReal x3136=((px)*(x3133));
if( IKabs(((((IkReal(1.17647058823529))*(x3136)))+(((IkReal(1.17647058823529))*(x3135))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.53000000000000))*(x3135)))+(((IkReal(-1.53000000000000))*(x3136))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x3135)))+(((IkReal(-1.53000000000000))*(x3136)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x3135)*(x3135))))+(((IkReal(-22.0000000000000))*((x3136)*(x3136))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x3135)*(x3136))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x3136)))+(((IkReal(1.17647058823529))*(x3135)))))+IKsqr(((((IKabs(((((IkReal(-1.53000000000000))*(x3135)))+(((IkReal(-1.53000000000000))*(x3136))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x3135)))+(((IkReal(-1.53000000000000))*(x3136)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x3135)*(x3135))))+(((IkReal(-22.0000000000000))*((x3136)*(x3136))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x3135)*(x3136)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x3136)))+(((IkReal(1.17647058823529))*(x3135)))), ((((IKabs(((((IkReal(-1.53000000000000))*(x3135)))+(((IkReal(-1.53000000000000))*(x3136))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x3135)))+(((IkReal(-1.53000000000000))*(x3136)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x3135)*(x3135))))+(((IkReal(-22.0000000000000))*((x3136)*(x3136))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x3135)*(x3136)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3137=IKsin(j1);
IkReal x3138=IKcos(j1);
IkReal x3139=x3098;
IkReal x3140=((IkReal(0.0900000000000000))*(x3138));
IkReal x3141=((IkReal(1.10000000000000))*(x3137));
IkReal x3142=IKsin(x3139);
IkReal x3143=IKcos(x3139);
IkReal x3144=((py)*(x3142));
IkReal x3145=((px)*(x3143));
IkReal x3146=((x3137)*(x3144));
IkReal x3147=((x3138)*(x3145));
evalcond[0]=((IkReal(-0.850000000000000))+(x3146)+(((x3137)*(x3145))));
evalcond[1]=((IkReal(-0.850000000000000))*(x3138));
evalcond[2]=((x3147)+(((x3138)*(x3144))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3144)))+(((IkReal(-1.00000000000000))*(x3145)))+(((IkReal(0.850000000000000))*(x3137))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3140)*(x3145)))+(((IkReal(-1.00000000000000))*(x3140)*(x3144)))+(((IkReal(-1.00000000000000))*(pp)))+(((x3141)*(x3145)))+(((x3141)*(x3144))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x3150 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x3150.valid ) {
    continue;
}
IkReal x3148=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3150.value)))));
IkReal x3149=((py)*(x3148));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-1.00000000000000))*(x3149));
evalcond[3]=x3149;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x3151 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x3151.valid ) {
    continue;
}
dummyeval[1]=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3151.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x3152 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x3152.valid ) {
    continue;
}
dummyeval[1]=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3152.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3155 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x3155.valid ) {
    continue;
}
IkReal x3153=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3155.value)))));
IkReal x3154=((py)*(x3153));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x3153) != 0)?((IkReal)1/(x3153)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x3153) != 0)?((IkReal)1/((x3153)*(x3153))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x3154)))+(((IkReal(20.0000000000000))*(pp)*(x3154))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x3153) != 0)?((IkReal)1/(x3153)):(IkReal)1.0e30))))+IKsqr(((IkReal(-0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x3153) != 0)?((IkReal)1/((x3153)*(x3153))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x3154)))+(((IkReal(20.0000000000000))*(pp)*(x3154)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x3153) != 0)?((IkReal)1/(x3153)):(IkReal)1.0e30))), ((IkReal(-0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x3153) != 0)?((IkReal)1/((x3153)*(x3153))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x3154)))+(((IkReal(20.0000000000000))*(pp)*(x3154)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3156=IKcos(j1);
IkReal x3157=IKsin(j1);
IkReal x3158=x3153;
IkReal x3159=((py)*(x3158));
IkReal x3160=((x3157)*(x3159));
IkReal x3161=((x3156)*(x3159));
evalcond[0]=((IkReal(-0.850000000000000))+(x3160));
evalcond[1]=((IkReal(-0.850000000000000))*(x3156));
evalcond[2]=x3161;
evalcond[3]=((((IkReal(-1.00000000000000))*(x3159)))+(((IkReal(0.850000000000000))*(x3157))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3160)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3161))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3163 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x3163.valid ) {
    continue;
}
IkReal x3162=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3163.value)))));
if( IKabs(((IkReal(1.17647058823529))*(py)*(x3162))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x3162) != 0)?((IkReal)1/(x3162)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x3162)*(x3162)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(x3162)))+IKsqr(((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x3162) != 0)?((IkReal)1/(x3162)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x3162)*(x3162))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(x3162)), ((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x3162) != 0)?((IkReal)1/(x3162)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x3162)*(x3162))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3164=IKcos(j1);
IkReal x3165=IKsin(j1);
IkReal x3166=x3162;
IkReal x3167=((py)*(x3166));
IkReal x3168=((x3165)*(x3167));
IkReal x3169=((x3164)*(x3167));
evalcond[0]=((IkReal(-0.850000000000000))+(x3168));
evalcond[1]=((IkReal(-0.850000000000000))*(x3164));
evalcond[2]=x3169;
evalcond[3]=((((IkReal(-1.00000000000000))*(x3167)))+(((IkReal(0.850000000000000))*(x3165))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3168)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3169))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x3172 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x3172.valid ) {
    continue;
}
IkReal x3170=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3172.value)))));
IkReal x3171=((px)*(x3170));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x3171;
evalcond[3]=((IkReal(-1.00000000000000))*(x3171));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x3173 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x3173.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3173.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x3174 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x3174.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3174.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3177 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x3177.valid ) {
    continue;
}
IkReal x3175=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3177.value)))));
IkReal x3176=((px)*(x3175));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x3175) != 0)?((IkReal)1/(x3175)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x3175) != 0)?((IkReal)1/((x3175)*(x3175))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x3176)))+(((IkReal(-14.4500000000000))*(x3176))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x3175) != 0)?((IkReal)1/(x3175)):(IkReal)1.0e30))))+IKsqr(((IkReal(-0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x3175) != 0)?((IkReal)1/((x3175)*(x3175))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x3176)))+(((IkReal(-14.4500000000000))*(x3176)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x3175) != 0)?((IkReal)1/(x3175)):(IkReal)1.0e30))), ((IkReal(-0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x3175) != 0)?((IkReal)1/((x3175)*(x3175))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x3176)))+(((IkReal(-14.4500000000000))*(x3176)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3178=IKcos(j1);
IkReal x3179=IKsin(j1);
IkReal x3180=x3175;
IkReal x3181=((px)*(x3180));
IkReal x3182=((x3178)*(x3181));
IkReal x3183=((x3179)*(x3181));
evalcond[0]=((IkReal(-0.850000000000000))+(x3183));
evalcond[1]=((IkReal(-0.850000000000000))*(x3178));
evalcond[2]=x3182;
evalcond[3]=((((IkReal(0.850000000000000))*(x3179)))+(((IkReal(-1.00000000000000))*(x3181))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3183)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3182))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3185 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x3185.valid ) {
    continue;
}
IkReal x3184=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3185.value)))));
if( IKabs(((IkReal(1.17647058823529))*(px)*(x3184))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x3184) != 0)?((IkReal)1/(x3184)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x3184)*(x3184)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x3184)))+IKsqr(((IkReal(-0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x3184) != 0)?((IkReal)1/(x3184)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x3184)*(x3184))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x3184)), ((IkReal(-0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x3184) != 0)?((IkReal)1/(x3184)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x3184)*(x3184))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3186=IKcos(j1);
IkReal x3187=IKsin(j1);
IkReal x3188=x3184;
IkReal x3189=((px)*(x3188));
IkReal x3190=((x3186)*(x3189));
IkReal x3191=((x3187)*(x3189));
evalcond[0]=((IkReal(-0.850000000000000))+(x3191));
evalcond[1]=((IkReal(-0.850000000000000))*(x3186));
evalcond[2]=x3190;
evalcond[3]=((((IkReal(0.850000000000000))*(x3187)))+(((IkReal(-1.00000000000000))*(x3189))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x3190)))+(((IkReal(1.10000000000000))*(x3191)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3192=((IkReal(0.0450000000000000))*(cj3));
IkReal x3193=((IkReal(0.300000000000000))*(sj3));
Atan2Value<IkReal> x3199 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3199.valid ) {
    continue;
}
IkReal x3194=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3199.value))));
IkReal x3195=IKsin(x3194);
IkReal x3196=IKcos(x3194);
IkReal x3197=((px)*(x3196));
IkReal x3198=((py)*(x3195));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x3193)*(x3197)))+(((IkReal(-1.00000000000000))*(x3193)*(x3198)))+(((IkReal(-0.0450000000000000))*(x3198)))+(((IkReal(-0.0450000000000000))*(x3197)))+(((x3192)*(x3198)))+(((x3192)*(x3197))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x3193)*(x3197)))+(((IkReal(-1.00000000000000))*(x3193)*(x3198)))+(((IkReal(-0.0450000000000000))*(x3198)))+(((IkReal(-0.0450000000000000))*(x3197)))+(((x3192)*(x3198)))+(((x3192)*(x3197)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x3197)+(x3198))) != 0)?((IkReal)1/(((x3197)+(x3198)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x3192)+(((IkReal(-1.00000000000000))*(x3193))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x3193)*(x3197)))+(((IkReal(-1.00000000000000))*(x3193)*(x3198)))+(((IkReal(-0.0450000000000000))*(x3198)))+(((IkReal(-0.0450000000000000))*(x3197)))+(((x3192)*(x3198)))+(((x3192)*(x3197))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x3193)*(x3197)))+(((IkReal(-1.00000000000000))*(x3193)*(x3198)))+(((IkReal(-0.0450000000000000))*(x3198)))+(((IkReal(-0.0450000000000000))*(x3197)))+(((x3192)*(x3198)))+(((x3192)*(x3197)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((x3197)+(x3198))) != 0)?((IkReal)1/(((x3197)+(x3198)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x3192)+(((IkReal(-1.00000000000000))*(x3193)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x3193)*(x3197)))+(((IkReal(-1.00000000000000))*(x3193)*(x3198)))+(((IkReal(-0.0450000000000000))*(x3198)))+(((IkReal(-0.0450000000000000))*(x3197)))+(((x3192)*(x3198)))+(((x3192)*(x3197))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x3193)*(x3197)))+(((IkReal(-1.00000000000000))*(x3193)*(x3198)))+(((IkReal(-0.0450000000000000))*(x3198)))+(((IkReal(-0.0450000000000000))*(x3197)))+(((x3192)*(x3198)))+(((x3192)*(x3197)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((x3197)+(x3198))) != 0)?((IkReal)1/(((x3197)+(x3198)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x3192)+(((IkReal(-1.00000000000000))*(x3193)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3200=IKsin(j1);
IkReal x3201=IKcos(j1);
IkReal x3202=((IkReal(0.300000000000000))*(cj3));
IkReal x3203=((IkReal(0.0450000000000000))*(cj3));
IkReal x3204=((IkReal(0.0450000000000000))*(sj3));
IkReal x3205=((IkReal(0.300000000000000))*(sj3));
IkReal x3206=x3194;
IkReal x3207=((IkReal(0.0450000000000000))*(x3200));
IkReal x3208=((IkReal(0.0900000000000000))*(x3201));
IkReal x3209=((IkReal(1.10000000000000))*(x3200));
IkReal x3210=IKsin(x3206);
IkReal x3211=IKcos(x3206);
IkReal x3212=((px)*(x3211));
IkReal x3213=((py)*(x3210));
IkReal x3214=((x3201)*(x3212));
IkReal x3215=((x3200)*(x3213));
evalcond[0]=((IkReal(-0.550000000000000))+(x3215)+(((x3200)*(x3212)))+(((IkReal(-1.00000000000000))*(x3202)))+(((IkReal(-1.00000000000000))*(x3204))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3200)*(x3205)))+(((IkReal(-0.550000000000000))*(x3201)))+(((IkReal(-1.00000000000000))*(x3201)*(x3202)))+(((IkReal(-1.00000000000000))*(x3201)*(x3204)))+(((x3200)*(x3203)))+(((IkReal(-1.00000000000000))*(x3207))));
evalcond[2]=((IkReal(0.0450000000000000))+(x3214)+(x3205)+(((IkReal(-1.00000000000000))*(x3203)))+(((x3201)*(x3213))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3212)))+(((IkReal(-1.00000000000000))*(x3213)))+(((x3201)*(x3203)))+(((IkReal(0.550000000000000))*(x3200)))+(((IkReal(-1.00000000000000))*(x3201)*(x3205)))+(((x3200)*(x3202)))+(((x3200)*(x3204)))+(((IkReal(-0.0450000000000000))*(x3201))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x3209)*(x3213)))+(((x3209)*(x3212)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x3208)*(x3212)))+(((IkReal(-1.00000000000000))*(x3208)*(x3213))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3223 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3223.valid ) {
    continue;
}
IkReal x3216=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3223.value))));
IkReal x3217=((IkReal(-0.0450000000000000))*(sj3));
IkReal x3218=((IkReal(-0.300000000000000))*(cj3));
IkReal x3219=IKcos(x3216);
IkReal x3220=IKsin(x3216);
IkReal x3221=((py)*(x3220));
IkReal x3222=((px)*(x3219));
if( IKabs(((((IKabs(((x3221)+(x3222))) != 0)?((IkReal)1/(((x3221)+(x3222)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x3218)*(x3221)))+(((x3218)*(x3222)))+(((IkReal(-0.550000000000000))*(x3221)))+(((IkReal(-0.550000000000000))*(x3222)))+(((x3217)*(x3222)))+(((x3217)*(x3221))))) != 0)?((IkReal)1/(((((x3218)*(x3221)))+(((x3218)*(x3222)))+(((IkReal(-0.550000000000000))*(x3221)))+(((IkReal(-0.550000000000000))*(x3222)))+(((x3217)*(x3222)))+(((x3217)*(x3221)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x3221)+(x3222))) != 0)?((IkReal)1/(((x3221)+(x3222)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))))+IKsqr(((((IKabs(((((x3218)*(x3221)))+(((x3218)*(x3222)))+(((IkReal(-0.550000000000000))*(x3221)))+(((IkReal(-0.550000000000000))*(x3222)))+(((x3217)*(x3222)))+(((x3217)*(x3221))))) != 0)?((IkReal)1/(((((x3218)*(x3221)))+(((x3218)*(x3222)))+(((IkReal(-0.550000000000000))*(x3221)))+(((IkReal(-0.550000000000000))*(x3222)))+(((x3217)*(x3222)))+(((x3217)*(x3221)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x3221)+(x3222))) != 0)?((IkReal)1/(((x3221)+(x3222)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))), ((((IKabs(((((x3218)*(x3221)))+(((x3218)*(x3222)))+(((IkReal(-0.550000000000000))*(x3221)))+(((IkReal(-0.550000000000000))*(x3222)))+(((x3217)*(x3222)))+(((x3217)*(x3221))))) != 0)?((IkReal)1/(((((x3218)*(x3221)))+(((x3218)*(x3222)))+(((IkReal(-0.550000000000000))*(x3221)))+(((IkReal(-0.550000000000000))*(x3222)))+(((x3217)*(x3222)))+(((x3217)*(x3221)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3224=IKsin(j1);
IkReal x3225=IKcos(j1);
IkReal x3226=((IkReal(0.300000000000000))*(cj3));
IkReal x3227=((IkReal(0.0450000000000000))*(cj3));
IkReal x3228=((IkReal(0.0450000000000000))*(sj3));
IkReal x3229=((IkReal(0.300000000000000))*(sj3));
IkReal x3230=x3216;
IkReal x3231=((IkReal(0.0450000000000000))*(x3224));
IkReal x3232=((IkReal(0.0900000000000000))*(x3225));
IkReal x3233=((IkReal(1.10000000000000))*(x3224));
IkReal x3234=IKsin(x3230);
IkReal x3235=IKcos(x3230);
IkReal x3236=((px)*(x3235));
IkReal x3237=((py)*(x3234));
IkReal x3238=((x3225)*(x3236));
IkReal x3239=((x3224)*(x3237));
evalcond[0]=((IkReal(-0.550000000000000))+(((x3224)*(x3236)))+(x3239)+(((IkReal(-1.00000000000000))*(x3228)))+(((IkReal(-1.00000000000000))*(x3226))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3225)*(x3226)))+(((IkReal(-1.00000000000000))*(x3225)*(x3228)))+(((IkReal(-1.00000000000000))*(x3224)*(x3229)))+(((IkReal(-0.550000000000000))*(x3225)))+(((IkReal(-1.00000000000000))*(x3231)))+(((x3224)*(x3227))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x3225)*(x3237)))+(x3238)+(x3229)+(((IkReal(-1.00000000000000))*(x3227))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3225)*(x3229)))+(((IkReal(-1.00000000000000))*(x3236)))+(((IkReal(-1.00000000000000))*(x3237)))+(((x3225)*(x3227)))+(((x3224)*(x3226)))+(((x3224)*(x3228)))+(((IkReal(0.550000000000000))*(x3224)))+(((IkReal(-0.0450000000000000))*(x3225))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x3232)*(x3236)))+(((IkReal(-1.00000000000000))*(x3232)*(x3237)))+(((x3233)*(x3236)))+(((x3233)*(x3237))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3240=((IkReal(0.0450000000000000))*(sj3));
IkReal x3241=((IkReal(0.0450000000000000))*(cj3));
IkReal x3242=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x3250 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3250.valid ) {
    continue;
}
IkReal x3243=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3250.value))));
IkReal x3244=((IkReal(-0.300000000000000))*(sj3));
IkReal x3245=IKcos(x3243);
IkReal x3246=IKsin(x3243);
IkReal x3247=((py)*(x3246));
IkReal x3248=((px)*(x3245));
IkReal x3249=((sj3)*(x3247));
Atan2Value<IkReal> x3251 = IKatan2WithCheck(((gconst63)*(((((IkReal(0.550000000000000))*(x3248)))+(((IkReal(0.550000000000000))*(x3247)))+(((x3240)*(x3247)))+(((x3240)*(x3248)))+(((x3242)*(x3248)))+(((x3242)*(x3247)))))),((gconst63)*(((((IkReal(-0.0450000000000000))*(x3247)))+(((IkReal(-0.0450000000000000))*(x3248)))+(((x3241)*(x3248)))+(((x3241)*(x3247)))+(((x3244)*(x3247)))+(((x3244)*(x3248)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3251.valid ) {
    continue;
}
j1array[0]=x3251.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3252=IKsin(j1);
IkReal x3253=IKcos(j1);
IkReal x3254=((IkReal(0.300000000000000))*(cj3));
IkReal x3255=((IkReal(0.0450000000000000))*(cj3));
IkReal x3256=((IkReal(0.0450000000000000))*(sj3));
IkReal x3257=((IkReal(0.300000000000000))*(sj3));
IkReal x3258=x3243;
IkReal x3259=((IkReal(0.0450000000000000))*(x3252));
IkReal x3260=((IkReal(0.0900000000000000))*(x3253));
IkReal x3261=((IkReal(1.10000000000000))*(x3252));
IkReal x3262=IKsin(x3258);
IkReal x3263=IKcos(x3258);
IkReal x3264=((px)*(x3263));
IkReal x3265=((py)*(x3262));
IkReal x3266=((x3253)*(x3264));
IkReal x3267=((x3252)*(x3265));
evalcond[0]=((IkReal(-0.550000000000000))+(x3267)+(((IkReal(-1.00000000000000))*(x3254)))+(((IkReal(-1.00000000000000))*(x3256)))+(((x3252)*(x3264))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3253)*(x3254)))+(((IkReal(-1.00000000000000))*(x3253)*(x3256)))+(((IkReal(-0.550000000000000))*(x3253)))+(((x3252)*(x3255)))+(((IkReal(-1.00000000000000))*(x3252)*(x3257)))+(((IkReal(-1.00000000000000))*(x3259))));
evalcond[2]=((IkReal(0.0450000000000000))+(x3266)+(x3257)+(((x3253)*(x3265)))+(((IkReal(-1.00000000000000))*(x3255))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3265)))+(((IkReal(-1.00000000000000))*(x3264)))+(((IkReal(-1.00000000000000))*(x3253)*(x3257)))+(((x3252)*(x3256)))+(((x3252)*(x3254)))+(((IkReal(0.550000000000000))*(x3252)))+(((x3253)*(x3255)))+(((IkReal(-0.0450000000000000))*(x3253))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3260)*(x3264)))+(((IkReal(-1.00000000000000))*(x3260)*(x3265)))+(((IkReal(-1.00000000000000))*(pp)))+(((x3261)*(x3264)))+(((x3261)*(x3265))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3268=((cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-1.00000000000000))*(x3268));
evalcond[3]=x3268;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x3269=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3269))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3269))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x3270=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3270))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3270))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x3271=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3271))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3271))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3272=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x3273=((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30);
IkReal x3274=((x3272)*(x3273));
if( IKabs(((IkReal(0.850000000000000))*(x3274))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x3274)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x3274)))+IKsqr(((IkReal(0.0555555555555556))*(x3274)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x3274)), ((IkReal(0.0555555555555556))*(x3274)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3275=IKcos(j1);
IkReal x3276=IKsin(j1);
IkReal x3277=((py)*(sj0));
IkReal x3278=((x3276)*(x3277));
evalcond[0]=((IkReal(-0.850000000000000))+(x3278));
evalcond[1]=((IkReal(-0.850000000000000))*(x3275));
evalcond[2]=((x3275)*(x3277));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3277)))+(((IkReal(0.850000000000000))*(x3276))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3278)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3275)*(x3277))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(py)*(sj0))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(sj0)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(sj0)), ((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3279=IKcos(j1);
IkReal x3280=IKsin(j1);
IkReal x3281=((py)*(sj0));
IkReal x3282=((x3280)*(x3281));
evalcond[0]=((IkReal(-0.850000000000000))+(x3282));
evalcond[1]=((IkReal(-0.850000000000000))*(x3279));
evalcond[2]=((x3279)*(x3281));
evalcond[3]=((((IkReal(0.850000000000000))*(x3280)))+(((IkReal(-1.00000000000000))*(x3281))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x3279)*(x3281)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3282))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3283=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x3283)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3283))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3285 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3285.valid ) {
    continue;
}
IkReal x3284=x3285.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3284));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3284))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3286=IKsin(j1);
IkReal x3287=IKcos(j1);
IkReal x3288=((IkReal(0.0450000000000000))*(x3287));
evalcond[0]=((((cj3)*(x3288)))+(((IkReal(-1.00000000000000))*(x3288)))+(((IkReal(0.550000000000000))*(x3286)))+(((IkReal(-0.300000000000000))*(sj3)*(x3287)))+(((IkReal(0.0450000000000000))*(sj3)*(x3286)))+(((IkReal(0.300000000000000))*(cj3)*(x3286))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3289=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x3289)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3289))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3291 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3291.valid ) {
    continue;
}
IkReal x3290=x3291.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3290));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3290))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3292=IKsin(j1);
IkReal x3293=IKcos(j1);
IkReal x3294=((IkReal(0.0450000000000000))*(x3293));
evalcond[0]=((((IkReal(-1.00000000000000))*(x3294)))+(((IkReal(0.550000000000000))*(x3292)))+(((IkReal(-0.300000000000000))*(sj3)*(x3293)))+(((IkReal(0.0450000000000000))*(sj3)*(x3292)))+(((IkReal(0.300000000000000))*(cj3)*(x3292)))+(((cj3)*(x3294))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3295=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x3295;
evalcond[3]=((IkReal(-1.00000000000000))*(x3295));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x3296=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3296))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3296))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x3297=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3297))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3297))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x3298=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3298))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3298))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3299=((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30);
IkReal x3300=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x3301=((x3299)*(x3300));
if( IKabs(((IkReal(0.850000000000000))*(x3301))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x3301)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x3301)))+IKsqr(((IkReal(0.0555555555555556))*(x3301)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x3301)), ((IkReal(0.0555555555555556))*(x3301)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3302=IKcos(j1);
IkReal x3303=IKsin(j1);
IkReal x3304=((cj0)*(px));
evalcond[0]=((IkReal(-0.850000000000000))+(((x3303)*(x3304))));
evalcond[1]=((IkReal(-0.850000000000000))*(x3302));
evalcond[2]=((x3302)*(x3304));
evalcond[3]=((((IkReal(0.850000000000000))*(x3303)))+(((IkReal(-1.00000000000000))*(x3304))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x3302)*(x3304)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3303)*(x3304))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(cj0)*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(cj0)*(px)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(cj0)*(px)), ((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3305=IKcos(j1);
IkReal x3306=IKsin(j1);
IkReal x3307=((cj0)*(px));
evalcond[0]=((IkReal(-0.850000000000000))+(((x3306)*(x3307))));
evalcond[1]=((IkReal(-0.850000000000000))*(x3305));
evalcond[2]=((x3305)*(x3307));
evalcond[3]=((((IkReal(0.850000000000000))*(x3306)))+(((IkReal(-1.00000000000000))*(x3307))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3306)*(x3307)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3305)*(x3307))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3308=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3308)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3308))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3310 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3310.valid ) {
    continue;
}
IkReal x3309=x3310.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3309));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3309))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3311=IKsin(j1);
IkReal x3312=IKcos(j1);
IkReal x3313=((IkReal(0.0450000000000000))*(x3312));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x3311)))+(((IkReal(0.550000000000000))*(x3311)))+(((IkReal(-1.00000000000000))*(x3313)))+(((cj3)*(x3313)))+(((IkReal(0.300000000000000))*(cj3)*(x3311)))+(((IkReal(-0.300000000000000))*(sj3)*(x3312))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3314=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3314)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3314))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3316 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3316.valid ) {
    continue;
}
IkReal x3315=x3316.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3315));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3315))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3317=IKsin(j1);
IkReal x3318=IKcos(j1);
IkReal x3319=((IkReal(0.0450000000000000))*(x3318));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x3317)))+(((IkReal(0.550000000000000))*(x3317)))+(((IkReal(-1.00000000000000))*(x3319)))+(((cj3)*(x3319)))+(((IkReal(0.300000000000000))*(cj3)*(x3317)))+(((IkReal(-0.300000000000000))*(sj3)*(x3318))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3320=((cj0)*(px));
IkReal x3321=((IkReal(0.300000000000000))*(sj3));
IkReal x3322=((py)*(sj0));
IkReal x3323=((IkReal(0.0450000000000000))*(cj3));
if( IKabs(((((IKabs(((((IkReal(-0.0450000000000000))*(x3322)))+(((IkReal(-0.0450000000000000))*(x3320)))+(((IkReal(-1.00000000000000))*(x3321)*(x3322)))+(((IkReal(-1.00000000000000))*(x3320)*(x3321)))+(((x3322)*(x3323)))+(((x3320)*(x3323))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x3322)))+(((IkReal(-0.0450000000000000))*(x3320)))+(((IkReal(-1.00000000000000))*(x3321)*(x3322)))+(((IkReal(-1.00000000000000))*(x3320)*(x3321)))+(((x3322)*(x3323)))+(((x3320)*(x3323)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x3320)+(x3322))) != 0)?((IkReal)1/(((x3320)+(x3322)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3321)))+(x3323))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.0450000000000000))*(x3322)))+(((IkReal(-0.0450000000000000))*(x3320)))+(((IkReal(-1.00000000000000))*(x3321)*(x3322)))+(((IkReal(-1.00000000000000))*(x3320)*(x3321)))+(((x3322)*(x3323)))+(((x3320)*(x3323))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x3322)))+(((IkReal(-0.0450000000000000))*(x3320)))+(((IkReal(-1.00000000000000))*(x3321)*(x3322)))+(((IkReal(-1.00000000000000))*(x3320)*(x3321)))+(((x3322)*(x3323)))+(((x3320)*(x3323)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((x3320)+(x3322))) != 0)?((IkReal)1/(((x3320)+(x3322)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3321)))+(x3323)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-0.0450000000000000))*(x3322)))+(((IkReal(-0.0450000000000000))*(x3320)))+(((IkReal(-1.00000000000000))*(x3321)*(x3322)))+(((IkReal(-1.00000000000000))*(x3320)*(x3321)))+(((x3322)*(x3323)))+(((x3320)*(x3323))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x3322)))+(((IkReal(-0.0450000000000000))*(x3320)))+(((IkReal(-1.00000000000000))*(x3321)*(x3322)))+(((IkReal(-1.00000000000000))*(x3320)*(x3321)))+(((x3322)*(x3323)))+(((x3320)*(x3323)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((x3320)+(x3322))) != 0)?((IkReal)1/(((x3320)+(x3322)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3321)))+(x3323)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3324=IKsin(j1);
IkReal x3325=IKcos(j1);
IkReal x3326=((IkReal(0.300000000000000))*(cj3));
IkReal x3327=((IkReal(0.0450000000000000))*(cj3));
IkReal x3328=((cj0)*(px));
IkReal x3329=((py)*(sj0));
IkReal x3330=((IkReal(0.0450000000000000))*(sj3));
IkReal x3331=((IkReal(0.300000000000000))*(sj3));
IkReal x3332=((IkReal(0.0450000000000000))*(x3324));
IkReal x3333=((IkReal(0.0900000000000000))*(x3325));
IkReal x3334=((IkReal(1.10000000000000))*(x3324));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x3326)))+(((x3324)*(x3328)))+(((x3324)*(x3329)))+(((IkReal(-1.00000000000000))*(x3330))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3325)*(x3326)))+(((x3324)*(x3327)))+(((IkReal(-1.00000000000000))*(x3332)))+(((IkReal(-1.00000000000000))*(x3324)*(x3331)))+(((IkReal(-0.550000000000000))*(x3325)))+(((IkReal(-1.00000000000000))*(x3325)*(x3330))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3327)))+(x3331)+(((x3325)*(x3328)))+(((x3325)*(x3329))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3328)))+(((IkReal(-1.00000000000000))*(x3329)))+(((IkReal(-0.0450000000000000))*(x3325)))+(((x3324)*(x3326)))+(((x3325)*(x3327)))+(((x3324)*(x3330)))+(((IkReal(0.550000000000000))*(x3324)))+(((IkReal(-1.00000000000000))*(x3325)*(x3331))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x3329)*(x3334)))+(((x3328)*(x3334)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x3329)*(x3333)))+(((IkReal(-1.00000000000000))*(x3328)*(x3333))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3335=((cj0)*(px));
IkReal x3336=((IkReal(0.0450000000000000))*(sj3));
IkReal x3337=((py)*(sj0));
IkReal x3338=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((((IKabs(((x3337)+(x3335))) != 0)?((IkReal)1/(((x3337)+(x3335)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x3336)+(x3338))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-0.550000000000000))*(x3337)))+(((IkReal(-0.550000000000000))*(x3335)))+(((IkReal(-1.00000000000000))*(x3337)*(x3338)))+(((IkReal(-1.00000000000000))*(x3335)*(x3336)))+(((IkReal(-1.00000000000000))*(x3335)*(x3338)))+(((IkReal(-1.00000000000000))*(x3336)*(x3337))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x3337)))+(((IkReal(-0.550000000000000))*(x3335)))+(((IkReal(-1.00000000000000))*(x3337)*(x3338)))+(((IkReal(-1.00000000000000))*(x3335)*(x3336)))+(((IkReal(-1.00000000000000))*(x3335)*(x3338)))+(((IkReal(-1.00000000000000))*(x3336)*(x3337)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x3337)+(x3335))) != 0)?((IkReal)1/(((x3337)+(x3335)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x3336)+(x3338)))))+IKsqr(((((IKabs(((((IkReal(-0.550000000000000))*(x3337)))+(((IkReal(-0.550000000000000))*(x3335)))+(((IkReal(-1.00000000000000))*(x3337)*(x3338)))+(((IkReal(-1.00000000000000))*(x3335)*(x3336)))+(((IkReal(-1.00000000000000))*(x3335)*(x3338)))+(((IkReal(-1.00000000000000))*(x3336)*(x3337))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x3337)))+(((IkReal(-0.550000000000000))*(x3335)))+(((IkReal(-1.00000000000000))*(x3337)*(x3338)))+(((IkReal(-1.00000000000000))*(x3335)*(x3336)))+(((IkReal(-1.00000000000000))*(x3335)*(x3338)))+(((IkReal(-1.00000000000000))*(x3336)*(x3337)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x3337)+(x3335))) != 0)?((IkReal)1/(((x3337)+(x3335)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x3336)+(x3338)))), ((((IKabs(((((IkReal(-0.550000000000000))*(x3337)))+(((IkReal(-0.550000000000000))*(x3335)))+(((IkReal(-1.00000000000000))*(x3337)*(x3338)))+(((IkReal(-1.00000000000000))*(x3335)*(x3336)))+(((IkReal(-1.00000000000000))*(x3335)*(x3338)))+(((IkReal(-1.00000000000000))*(x3336)*(x3337))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x3337)))+(((IkReal(-0.550000000000000))*(x3335)))+(((IkReal(-1.00000000000000))*(x3337)*(x3338)))+(((IkReal(-1.00000000000000))*(x3335)*(x3336)))+(((IkReal(-1.00000000000000))*(x3335)*(x3338)))+(((IkReal(-1.00000000000000))*(x3336)*(x3337)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3339=IKsin(j1);
IkReal x3340=IKcos(j1);
IkReal x3341=((IkReal(0.300000000000000))*(cj3));
IkReal x3342=((IkReal(0.0450000000000000))*(cj3));
IkReal x3343=((cj0)*(px));
IkReal x3344=((py)*(sj0));
IkReal x3345=((IkReal(0.0450000000000000))*(sj3));
IkReal x3346=((IkReal(0.300000000000000))*(sj3));
IkReal x3347=((IkReal(0.0450000000000000))*(x3339));
IkReal x3348=((IkReal(0.0900000000000000))*(x3340));
IkReal x3349=((IkReal(1.10000000000000))*(x3339));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x3345)))+(((IkReal(-1.00000000000000))*(x3341)))+(((x3339)*(x3344)))+(((x3339)*(x3343))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3340)*(x3345)))+(((IkReal(-1.00000000000000))*(x3340)*(x3341)))+(((IkReal(-1.00000000000000))*(x3347)))+(((IkReal(-0.550000000000000))*(x3340)))+(((IkReal(-1.00000000000000))*(x3339)*(x3346)))+(((x3339)*(x3342))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x3340)*(x3343)))+(((x3340)*(x3344)))+(x3346)+(((IkReal(-1.00000000000000))*(x3342))));
evalcond[3]=((((IkReal(0.550000000000000))*(x3339)))+(((x3340)*(x3342)))+(((IkReal(-1.00000000000000))*(x3340)*(x3346)))+(((IkReal(-1.00000000000000))*(x3344)))+(((IkReal(-1.00000000000000))*(x3343)))+(((IkReal(-0.0450000000000000))*(x3340)))+(((x3339)*(x3345)))+(((x3339)*(x3341))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x3344)*(x3349)))+(((IkReal(-1.00000000000000))*(x3343)*(x3348)))+(((x3343)*(x3349)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x3344)*(x3348))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3350 = IKatan2WithCheck(((gconst61)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))),((gconst61)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3350.valid ) {
    continue;
}
j1array[0]=x3350.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3351=IKsin(j1);
IkReal x3352=IKcos(j1);
IkReal x3353=((IkReal(0.300000000000000))*(cj3));
IkReal x3354=((IkReal(0.0450000000000000))*(cj3));
IkReal x3355=((cj0)*(px));
IkReal x3356=((py)*(sj0));
IkReal x3357=((IkReal(0.0450000000000000))*(sj3));
IkReal x3358=((IkReal(0.300000000000000))*(sj3));
IkReal x3359=((IkReal(0.0450000000000000))*(x3351));
IkReal x3360=((IkReal(0.0900000000000000))*(x3352));
IkReal x3361=((IkReal(1.10000000000000))*(x3351));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x3353)))+(((IkReal(-1.00000000000000))*(x3357)))+(((x3351)*(x3355)))+(((x3351)*(x3356))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3359)))+(((IkReal(-1.00000000000000))*(x3352)*(x3357)))+(((IkReal(-1.00000000000000))*(x3352)*(x3353)))+(((IkReal(-1.00000000000000))*(x3351)*(x3358)))+(((x3351)*(x3354)))+(((IkReal(-0.550000000000000))*(x3352))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3354)))+(x3358)+(((x3352)*(x3356)))+(((x3352)*(x3355))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3352)*(x3358)))+(((IkReal(-0.0450000000000000))*(x3352)))+(((x3352)*(x3354)))+(((IkReal(0.550000000000000))*(x3351)))+(((x3351)*(x3357)))+(((x3351)*(x3353)))+(((IkReal(-1.00000000000000))*(x3355)))+(((IkReal(-1.00000000000000))*(x3356))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x3356)*(x3361)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x3355)*(x3360)))+(((IkReal(-1.00000000000000))*(x3356)*(x3360)))+(((x3355)*(x3361))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3362=((cj2)*(pz));
IkReal x3363=((IkReal(1.00000000000000))*(cj0));
IkReal x3364=((cj0)*(px));
IkReal x3365=((py)*(sj0));
IkReal x3366=((IkReal(0.550000000000000))*(sj2));
IkReal x3367=((cj2)*(sj0));
IkReal x3368=((IkReal(0.300000000000000))*(cj3)*(sj2));
IkReal x3369=((cj2)*(px)*(py));
IkReal x3370=((IkReal(0.0450000000000000))*(sj2)*(sj3));
Atan2Value<IkReal> x3371 = IKatan2WithCheck(((gconst43)*(((((px)*(sj0)*(x3362)))+(((x3365)*(x3368)))+(((x3365)*(x3366)))+(((x3364)*(x3370)))+(((x3365)*(x3370)))+(((IkReal(-1.00000000000000))*(py)*(x3362)*(x3363)))+(((x3364)*(x3368)))+(((x3364)*(x3366)))))),((gconst43)*(((((pz)*(x3370)))+(((pz)*(x3366)))+(((pz)*(x3368)))+(((cj0)*(cj2)*(py)*(x3365)))+(((cj0)*(cj2)*(py)*(x3364)))+(((IkReal(-1.00000000000000))*(px)*(x3365)*(x3367)))+(((IkReal(-1.00000000000000))*(x3363)*(x3367)*((px)*(px))))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3371.valid ) {
    continue;
}
j1array[0]=x3371.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3372=IKsin(j1);
IkReal x3373=IKcos(j1);
IkReal x3374=((px)*(sj2));
IkReal x3375=((IkReal(0.300000000000000))*(sj3));
IkReal x3376=((IkReal(0.0900000000000000))*(sj0));
IkReal x3377=((cj2)*(px));
IkReal x3378=((IkReal(0.0450000000000000))*(cj3));
IkReal x3379=((IkReal(0.0450000000000000))*(cj2));
IkReal x3380=((py)*(sj0));
IkReal x3381=((IkReal(0.0450000000000000))*(sj3));
IkReal x3382=((IkReal(1.00000000000000))*(cj0));
IkReal x3383=((IkReal(0.300000000000000))*(cj3));
IkReal x3384=((py)*(sj2));
IkReal x3385=((cj0)*(x3373));
IkReal x3386=((cj3)*(x3372));
IkReal x3387=((cj2)*(x3373));
IkReal x3388=((cj2)*(x3372));
IkReal x3389=((pz)*(x3373));
IkReal x3390=((cj0)*(px)*(x3372));
evalcond[0]=((IkReal(-0.550000000000000))+(((x3372)*(x3380)))+(x3389)+(x3390)+(((IkReal(-1.00000000000000))*(x3381)))+(((IkReal(-1.00000000000000))*(x3383))));
evalcond[1]=((((x3374)*(x3385)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x3382)))+(((sj0)*(x3377)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x3372)))+(((sj2)*(x3373)*(x3380))));
evalcond[2]=((((x3375)*(x3388)))+(((IkReal(-1.00000000000000))*(x3378)*(x3388)))+(((x3372)*(x3379)))+(pz)+(((IkReal(-0.550000000000000))*(x3373)))+(((IkReal(-1.00000000000000))*(x3373)*(x3381)))+(((IkReal(-1.00000000000000))*(x3373)*(x3383))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3382)*(x3384)))+(x3375)+(((IkReal(-1.00000000000000))*(x3378)))+(((sj0)*(x3374)))+(((pz)*(x3388)))+(((IkReal(-1.00000000000000))*(x3373)*(x3377)*(x3382)))+(((IkReal(-1.00000000000000))*(x3380)*(x3387))));
evalcond[4]=((((x3375)*(x3387)))+(((IkReal(-1.00000000000000))*(x3378)*(x3387)))+(((x3372)*(x3381)))+(((x3372)*(x3383)))+(((IkReal(-1.00000000000000))*(x3380)))+(((IkReal(0.550000000000000))*(x3372)))+(((x3373)*(x3379)))+(((IkReal(-1.00000000000000))*(px)*(x3382))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3374)*(x3376)))+(((py)*(x3376)*(x3387)))+(((IkReal(0.0900000000000000))*(cj0)*(x3384)))+(((IkReal(-0.0900000000000000))*(pz)*(x3388)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3390)))+(((IkReal(0.0900000000000000))*(x3377)*(x3385)))+(((IkReal(1.10000000000000))*(x3389)))+(((IkReal(1.10000000000000))*(x3372)*(x3380))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3391=(cj3)*(cj3);
IkReal x3392=(sj3)*(sj3);
IkReal x3393=((cj2)*(sj3));
IkReal x3394=((IkReal(0.0135000000000000))*(cj2));
IkReal x3395=((IkReal(1.00000000000000))*(pz));
Atan2Value<IkReal> x3396 = IKatan2WithCheck(((gconst42)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x3392)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x3391)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst42)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x3395)))+(((IkReal(-1.00000000000000))*(x3392)*(x3394)))+(((x3391)*(x3394)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.167025000000000))*(x3393)))+(((IkReal(-0.0879750000000000))*(cj3)*(x3393)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x3395)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3396.valid ) {
    continue;
}
j1array[0]=x3396.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3397=IKsin(j1);
IkReal x3398=IKcos(j1);
IkReal x3399=((px)*(sj2));
IkReal x3400=((IkReal(0.300000000000000))*(sj3));
IkReal x3401=((IkReal(0.0900000000000000))*(sj0));
IkReal x3402=((cj2)*(px));
IkReal x3403=((IkReal(0.0450000000000000))*(cj3));
IkReal x3404=((IkReal(0.0450000000000000))*(cj2));
IkReal x3405=((py)*(sj0));
IkReal x3406=((IkReal(0.0450000000000000))*(sj3));
IkReal x3407=((IkReal(1.00000000000000))*(cj0));
IkReal x3408=((IkReal(0.300000000000000))*(cj3));
IkReal x3409=((py)*(sj2));
IkReal x3410=((cj0)*(x3398));
IkReal x3411=((cj3)*(x3397));
IkReal x3412=((cj2)*(x3398));
IkReal x3413=((cj2)*(x3397));
IkReal x3414=((pz)*(x3398));
IkReal x3415=((cj0)*(px)*(x3397));
evalcond[0]=((IkReal(-0.550000000000000))+(x3414)+(x3415)+(((x3397)*(x3405)))+(((IkReal(-1.00000000000000))*(x3408)))+(((IkReal(-1.00000000000000))*(x3406))));
evalcond[1]=((((sj0)*(x3402)))+(((x3399)*(x3410)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x3407)))+(((sj2)*(x3398)*(x3405)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x3397))));
evalcond[2]=((((IkReal(-0.550000000000000))*(x3398)))+(((IkReal(-1.00000000000000))*(x3398)*(x3408)))+(((IkReal(-1.00000000000000))*(x3398)*(x3406)))+(((x3400)*(x3413)))+(((x3397)*(x3404)))+(pz)+(((IkReal(-1.00000000000000))*(x3403)*(x3413))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3398)*(x3402)*(x3407)))+(((pz)*(x3413)))+(((IkReal(-1.00000000000000))*(x3405)*(x3412)))+(((sj0)*(x3399)))+(((IkReal(-1.00000000000000))*(x3407)*(x3409)))+(x3400)+(((IkReal(-1.00000000000000))*(x3403))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x3405)))+(((x3398)*(x3404)))+(((x3400)*(x3412)))+(((IkReal(-1.00000000000000))*(px)*(x3407)))+(((IkReal(0.550000000000000))*(x3397)))+(((x3397)*(x3406)))+(((x3397)*(x3408)))+(((IkReal(-1.00000000000000))*(x3403)*(x3412))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(cj0)*(x3409)))+(((IkReal(1.10000000000000))*(x3397)*(x3405)))+(((IkReal(-1.00000000000000))*(x3399)*(x3401)))+(((IkReal(0.0900000000000000))*(x3402)*(x3410)))+(((py)*(x3401)*(x3412)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3415)))+(((IkReal(1.10000000000000))*(x3414)))+(((IkReal(-0.0900000000000000))*(pz)*(x3413))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x3416=((IkReal(0.0450000000000000))*(sj2));
Atan2Value<IkReal> x3419 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(py)),px,IKFAST_ATAN2_MAGTHRESH);
if( !x3419.valid ) {
    continue;
}
IkReal x3417=((IkReal(1.00000000000000))*(x3419.value));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x3416)+(((IkReal(-1.00000000000000))*(cj3)*(x3416))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x3416)+(((IkReal(-1.00000000000000))*(cj3)*(x3416))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x3418=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x3416)+(((IkReal(-1.00000000000000))*(cj3)*(x3416)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x3418)))+(((IkReal(-1.00000000000000))*(x3417))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x3418)+(((IkReal(-1.00000000000000))*(x3417))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst42;
IkReal x3420=((py)*(sj0));
IkReal x3421=((IkReal(0.300000000000000))*(cj3));
IkReal x3422=((cj0)*(px));
IkReal x3423=((cj2)*(pz));
IkReal x3424=((IkReal(0.0450000000000000))*(sj3));
gconst42=IKsign(((((IkReal(-1.00000000000000))*(x3420)*(x3421)))+(((IkReal(-1.00000000000000))*(x3420)*(x3424)))+(((IkReal(-0.0450000000000000))*(x3423)))+(((IkReal(-0.550000000000000))*(x3422)))+(((IkReal(-0.550000000000000))*(x3420)))+(((IkReal(-1.00000000000000))*(x3422)*(x3424)))+(((IkReal(-0.300000000000000))*(sj3)*(x3423)))+(((IkReal(-1.00000000000000))*(x3421)*(x3422)))+(((IkReal(0.0450000000000000))*(cj3)*(x3423)))));
IkReal x3425=((py)*(sj0));
IkReal x3426=((cj2)*(pz));
IkReal x3427=((IkReal(6.66666666666667))*(cj3));
IkReal x3428=((cj0)*(px));
IkReal x3429=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x3427)*(x3428)))+(((IkReal(-1.00000000000000))*(x3425)*(x3427)))+(((IkReal(-1.00000000000000))*(x3425)*(x3429)))+(((IkReal(-6.66666666666667))*(sj3)*(x3426)))+(((IkReal(-1.00000000000000))*(x3426)))+(((IkReal(-12.2222222222222))*(x3425)))+(((IkReal(-12.2222222222222))*(x3428)))+(((cj3)*(x3426)))+(((IkReal(-1.00000000000000))*(x3428)*(x3429))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x3430=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x3430;
evalcond[3]=x3430;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
IkReal x3431=((cj0)*(px));
IkReal x3432=((IkReal(0.0450000000000000))*(pz));
IkReal x3433=((py)*(sj0));
IkReal x3434=((IkReal(0.300000000000000))*(cj3));
IkReal x3435=((IkReal(0.0450000000000000))*(sj3));
gconst44=IKsign(((((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x3431)*(x3435)))+(((IkReal(-1.00000000000000))*(x3431)*(x3434)))+(((IkReal(-1.00000000000000))*(x3433)*(x3435)))+(((IkReal(-1.00000000000000))*(x3433)*(x3434)))+(((IkReal(-1.00000000000000))*(x3432)))+(((IkReal(-0.550000000000000))*(x3431)))+(((IkReal(-0.550000000000000))*(x3433)))+(((cj3)*(x3432)))));
IkReal x3436=((py)*(sj0));
IkReal x3437=((IkReal(6.66666666666667))*(cj3));
IkReal x3438=((cj0)*(px));
IkReal x3439=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x3437)*(x3438)))+(((IkReal(-1.00000000000000))*(x3436)*(x3437)))+(((IkReal(-1.00000000000000))*(x3436)*(x3439)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x3438)*(x3439)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-12.2222222222222))*(x3436)))+(((IkReal(-12.2222222222222))*(x3438)))+(((cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3440=((IkReal(0.0450000000000000))*(pz));
IkReal x3441=((cj0)*(px));
IkReal x3442=((IkReal(0.300000000000000))*(sj3));
IkReal x3443=((py)*(sj0));
IkReal x3444=((IkReal(0.0450000000000000))*(cj3));
IkReal x3445=((IkReal(0.300000000000000))*(cj3));
IkReal x3446=((IkReal(0.0450000000000000))*(sj3));
Atan2Value<IkReal> x3447 = IKatan2WithCheck(((gconst45)*(((((pz)*(x3442)))+(((IkReal(-0.550000000000000))*(x3441)))+(((IkReal(-0.550000000000000))*(x3443)))+(x3440)+(((IkReal(-1.00000000000000))*(x3441)*(x3445)))+(((IkReal(-1.00000000000000))*(x3441)*(x3446)))+(((IkReal(-1.00000000000000))*(cj3)*(x3440)))+(((IkReal(-1.00000000000000))*(x3443)*(x3446)))+(((IkReal(-1.00000000000000))*(x3443)*(x3445)))))),((gconst45)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x3440)))+(((IkReal(-1.00000000000000))*(x3441)*(x3442)))+(((x3443)*(x3444)))+(((IkReal(-1.00000000000000))*(x3442)*(x3443)))+(((IkReal(-0.0450000000000000))*(x3443)))+(((IkReal(-0.0450000000000000))*(x3441)))+(((x3441)*(x3444)))+(((IkReal(-1.00000000000000))*(pz)*(x3445)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3447.valid ) {
    continue;
}
j1array[0]=x3447.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3448=IKsin(j1);
IkReal x3449=IKcos(j1);
IkReal x3450=((IkReal(0.300000000000000))*(cj3));
IkReal x3451=((IkReal(0.0450000000000000))*(cj3));
IkReal x3452=((cj0)*(px));
IkReal x3453=((py)*(sj0));
IkReal x3454=((IkReal(0.0450000000000000))*(sj3));
IkReal x3455=((IkReal(0.300000000000000))*(sj3));
IkReal x3456=((IkReal(0.0450000000000000))*(x3448));
IkReal x3457=((IkReal(1.00000000000000))*(x3449));
IkReal x3458=((pz)*(x3448));
IkReal x3459=((pz)*(x3449));
IkReal x3460=((IkReal(0.0900000000000000))*(x3449));
IkReal x3461=((IkReal(1.10000000000000))*(x3448));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x3450)))+(((IkReal(-1.00000000000000))*(x3454)))+(((x3448)*(x3453)))+(((x3448)*(x3452)))+(x3459));
evalcond[1]=((((x3448)*(x3455)))+(((IkReal(-0.550000000000000))*(x3449)))+(x3456)+(pz)+(((IkReal(-1.00000000000000))*(x3448)*(x3451)))+(((IkReal(-1.00000000000000))*(x3449)*(x3450)))+(((IkReal(-1.00000000000000))*(x3449)*(x3454))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3453)*(x3457)))+(((IkReal(-1.00000000000000))*(x3451)))+(x3455)+(x3458)+(((IkReal(-1.00000000000000))*(x3452)*(x3457))));
evalcond[3]=((((IkReal(0.550000000000000))*(x3448)))+(((x3448)*(x3454)))+(((x3448)*(x3450)))+(((IkReal(-1.00000000000000))*(x3452)))+(((IkReal(-1.00000000000000))*(x3453)))+(((IkReal(0.0450000000000000))*(x3449)))+(((IkReal(-1.00000000000000))*(x3449)*(x3451)))+(((x3449)*(x3455))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3459)))+(((x3452)*(x3461)))+(((x3452)*(x3460)))+(((IkReal(-1.00000000000000))*(pp)))+(((x3453)*(x3461)))+(((x3453)*(x3460)))+(((IkReal(-0.0900000000000000))*(x3458))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3462=(cj3)*(cj3);
IkReal x3463=(sj3)*(sj3);
IkReal x3464=((cj3)*(sj3));
IkReal x3465=((IkReal(1.00000000000000))*(pz));
Atan2Value<IkReal> x3466 = IKatan2WithCheck(((gconst44)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x3463)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x3462)))+(((IkReal(-0.0270000000000000))*(x3464)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst44)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0135000000000000))*(x3462)))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x3465)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x3463)))+(((IkReal(-0.0879750000000000))*(x3464)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x3465)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3466.valid ) {
    continue;
}
j1array[0]=x3466.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3467=IKsin(j1);
IkReal x3468=IKcos(j1);
IkReal x3469=((IkReal(0.300000000000000))*(cj3));
IkReal x3470=((IkReal(0.0450000000000000))*(cj3));
IkReal x3471=((cj0)*(px));
IkReal x3472=((py)*(sj0));
IkReal x3473=((IkReal(0.0450000000000000))*(sj3));
IkReal x3474=((IkReal(0.300000000000000))*(sj3));
IkReal x3475=((IkReal(0.0450000000000000))*(x3467));
IkReal x3476=((IkReal(1.00000000000000))*(x3468));
IkReal x3477=((pz)*(x3467));
IkReal x3478=((pz)*(x3468));
IkReal x3479=((IkReal(0.0900000000000000))*(x3468));
IkReal x3480=((IkReal(1.10000000000000))*(x3467));
evalcond[0]=((IkReal(-0.550000000000000))+(((x3467)*(x3472)))+(((x3467)*(x3471)))+(x3478)+(((IkReal(-1.00000000000000))*(x3473)))+(((IkReal(-1.00000000000000))*(x3469))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3467)*(x3470)))+(((x3467)*(x3474)))+(x3475)+(pz)+(((IkReal(-1.00000000000000))*(x3468)*(x3473)))+(((IkReal(-1.00000000000000))*(x3468)*(x3469)))+(((IkReal(-0.550000000000000))*(x3468))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3472)*(x3476)))+(((IkReal(-1.00000000000000))*(x3471)*(x3476)))+(x3474)+(x3477)+(((IkReal(-1.00000000000000))*(x3470))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x3468)))+(((x3467)*(x3473)))+(((x3467)*(x3469)))+(((IkReal(0.550000000000000))*(x3467)))+(((x3468)*(x3474)))+(((IkReal(-1.00000000000000))*(x3468)*(x3470)))+(((IkReal(-1.00000000000000))*(x3472)))+(((IkReal(-1.00000000000000))*(x3471))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x3471)*(x3480)))+(((x3471)*(x3479)))+(((IkReal(-1.00000000000000))*(pp)))+(((x3472)*(x3479)))+(((IkReal(-0.0900000000000000))*(x3477)))+(((IkReal(1.10000000000000))*(x3478)))+(((x3472)*(x3480))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3481=((px)*(sj0));
IkReal x3482=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((x3481)+(((IkReal(-1.00000000000000))*(x3482))));
evalcond[3]=((x3482)+(((IkReal(-1.00000000000000))*(x3481))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
IkReal x3483=((cj0)*(px));
IkReal x3484=((IkReal(0.0450000000000000))*(pz));
IkReal x3485=((py)*(sj0));
IkReal x3486=((IkReal(0.300000000000000))*(cj3));
IkReal x3487=((IkReal(0.0450000000000000))*(sj3));
gconst46=IKsign(((((IkReal(-1.00000000000000))*(x3483)*(x3486)))+(((IkReal(-1.00000000000000))*(x3483)*(x3487)))+(((IkReal(-1.00000000000000))*(cj3)*(x3484)))+(((IkReal(-1.00000000000000))*(x3485)*(x3486)))+(((IkReal(-1.00000000000000))*(x3485)*(x3487)))+(x3484)+(((IkReal(-0.550000000000000))*(x3483)))+(((IkReal(-0.550000000000000))*(x3485)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))));
IkReal x3488=((py)*(sj0));
IkReal x3489=((IkReal(6.66666666666667))*(cj3));
IkReal x3490=((cj0)*(px));
IkReal x3491=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x3488)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x3488)*(x3491)))+(((IkReal(-1.00000000000000))*(x3489)*(x3490)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x3490)*(x3491)))+(pz)+(((IkReal(-12.2222222222222))*(x3490)))+(((IkReal(-1.00000000000000))*(x3488)*(x3489))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst47;
gconst47=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3492=((py)*(sj0));
IkReal x3493=((cj0)*(px));
IkReal x3494=((IkReal(0.300000000000000))*(sj3));
IkReal x3495=((IkReal(0.0450000000000000))*(pz));
IkReal x3496=((IkReal(0.0450000000000000))*(cj3));
IkReal x3497=((IkReal(0.300000000000000))*(cj3));
IkReal x3498=((IkReal(0.0450000000000000))*(sj3));
Atan2Value<IkReal> x3499 = IKatan2WithCheck(((gconst47)*(((((IkReal(-1.00000000000000))*(cj3)*(x3495)))+(((IkReal(0.550000000000000))*(x3492)))+(((IkReal(0.550000000000000))*(x3493)))+(x3495)+(((pz)*(x3494)))+(((x3493)*(x3498)))+(((x3493)*(x3497)))+(((x3492)*(x3498)))+(((x3492)*(x3497)))))),((gconst47)*(((((sj3)*(x3495)))+(((IkReal(-0.0450000000000000))*(x3493)))+(((IkReal(-0.0450000000000000))*(x3492)))+(((pz)*(x3497)))+(((IkReal(-1.00000000000000))*(x3493)*(x3494)))+(((IkReal(-1.00000000000000))*(x3492)*(x3494)))+(((x3493)*(x3496)))+(((IkReal(0.550000000000000))*(pz)))+(((x3492)*(x3496)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3499.valid ) {
    continue;
}
j1array[0]=x3499.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3500=IKsin(j1);
IkReal x3501=IKcos(j1);
IkReal x3502=((IkReal(0.300000000000000))*(cj3));
IkReal x3503=((IkReal(0.0450000000000000))*(cj3));
IkReal x3504=((cj0)*(px));
IkReal x3505=((py)*(sj0));
IkReal x3506=((IkReal(0.0450000000000000))*(sj3));
IkReal x3507=((IkReal(0.300000000000000))*(sj3));
IkReal x3508=((IkReal(0.0450000000000000))*(x3500));
IkReal x3509=((pz)*(x3500));
IkReal x3510=((pz)*(x3501));
IkReal x3511=((IkReal(0.0900000000000000))*(x3501));
IkReal x3512=((IkReal(1.10000000000000))*(x3500));
evalcond[0]=((IkReal(-0.550000000000000))+(((x3500)*(x3504)))+(((x3500)*(x3505)))+(x3510)+(((IkReal(-1.00000000000000))*(x3502)))+(((IkReal(-1.00000000000000))*(x3506))));
evalcond[1]=((((x3500)*(x3503)))+(((IkReal(-1.00000000000000))*(x3508)))+(((IkReal(-0.550000000000000))*(x3501)))+(pz)+(((IkReal(-1.00000000000000))*(x3501)*(x3506)))+(((IkReal(-1.00000000000000))*(x3501)*(x3502)))+(((IkReal(-1.00000000000000))*(x3500)*(x3507))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x3501)*(x3505)))+(((x3501)*(x3504)))+(x3507)+(((IkReal(-1.00000000000000))*(x3503)))+(((IkReal(-1.00000000000000))*(x3509))));
evalcond[3]=((((x3501)*(x3503)))+(((IkReal(-0.0450000000000000))*(x3501)))+(((x3500)*(x3506)))+(((x3500)*(x3502)))+(((IkReal(0.550000000000000))*(x3500)))+(((IkReal(-1.00000000000000))*(x3501)*(x3507)))+(((IkReal(-1.00000000000000))*(x3504)))+(((IkReal(-1.00000000000000))*(x3505))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3510)))+(((IkReal(-1.00000000000000))*(x3504)*(x3511)))+(((IkReal(-1.00000000000000))*(x3505)*(x3511)))+(((x3504)*(x3512)))+(((IkReal(0.0900000000000000))*(x3509)))+(((x3505)*(x3512))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3513=(sj3)*(sj3);
IkReal x3514=(cj3)*(cj3);
IkReal x3515=((cj3)*(sj3));
IkReal x3516=((IkReal(1.00000000000000))*(pz));
Atan2Value<IkReal> x3517 = IKatan2WithCheck(((gconst46)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x3513)))+(((IkReal(-0.0900000000000000))*(x3514)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x3515)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst46)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x3516)))+(((IkReal(0.0135000000000000))*(x3513)))+(((IkReal(-0.0135000000000000))*(x3514)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0879750000000000))*(x3515)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x3516)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3517.valid ) {
    continue;
}
j1array[0]=x3517.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3518=IKsin(j1);
IkReal x3519=IKcos(j1);
IkReal x3520=((IkReal(0.300000000000000))*(cj3));
IkReal x3521=((IkReal(0.0450000000000000))*(cj3));
IkReal x3522=((cj0)*(px));
IkReal x3523=((py)*(sj0));
IkReal x3524=((IkReal(0.0450000000000000))*(sj3));
IkReal x3525=((IkReal(0.300000000000000))*(sj3));
IkReal x3526=((IkReal(0.0450000000000000))*(x3518));
IkReal x3527=((pz)*(x3518));
IkReal x3528=((pz)*(x3519));
IkReal x3529=((IkReal(0.0900000000000000))*(x3519));
IkReal x3530=((IkReal(1.10000000000000))*(x3518));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x3524)))+(((IkReal(-1.00000000000000))*(x3520)))+(x3528)+(((x3518)*(x3522)))+(((x3518)*(x3523))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3519)*(x3520)))+(((IkReal(-1.00000000000000))*(x3519)*(x3524)))+(((IkReal(-1.00000000000000))*(x3526)))+(pz)+(((IkReal(-0.550000000000000))*(x3519)))+(((x3518)*(x3521)))+(((IkReal(-1.00000000000000))*(x3518)*(x3525))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3527)))+(((IkReal(-1.00000000000000))*(x3521)))+(x3525)+(((x3519)*(x3522)))+(((x3519)*(x3523))));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x3519)))+(((IkReal(-1.00000000000000))*(x3522)))+(((IkReal(-1.00000000000000))*(x3523)))+(((IkReal(-1.00000000000000))*(x3519)*(x3525)))+(((IkReal(0.550000000000000))*(x3518)))+(((x3518)*(x3520)))+(((x3518)*(x3524)))+(((x3519)*(x3521))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3522)*(x3529)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3528)))+(((IkReal(-1.00000000000000))*(x3523)*(x3529)))+(((x3523)*(x3530)))+(((IkReal(0.0900000000000000))*(x3527)))+(((x3522)*(x3530))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3531=((IkReal(-1.00000000000000))*(cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x3531;
evalcond[3]=x3531;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x3532=((IkReal(0.0450000000000000))*(pz));
IkReal x3533=((py)*(sj0));
gconst49=IKsign(((((cj3)*(x3532)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.550000000000000))*(x3533)))+(((IkReal(-1.00000000000000))*(x3532)))+(((IkReal(-0.0450000000000000))*(sj3)*(x3533)))+(((IkReal(-0.300000000000000))*(cj3)*(x3533)))));
IkReal x3534=((py)*(sj0));
dummyeval[0]=((((IkReal(-6.66666666666667))*(cj3)*(x3534)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x3534)))+(((cj3)*(pz)))+(((IkReal(-12.2222222222222))*(x3534))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x3535=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3535))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3535))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3536=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x3536)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x3536))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x3536)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x3536)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x3536)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x3536)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3537=IKcos(j1);
IkReal x3538=IKsin(j1);
IkReal x3539=((pz)*(x3538));
IkReal x3540=((pz)*(x3537));
evalcond[0]=((IkReal(-0.850000000000000))+(x3540));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3537)))+(pz));
evalcond[2]=x3539;
evalcond[3]=((IkReal(0.850000000000000))*(x3538));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3539)))+(((IkReal(1.10000000000000))*(x3540))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3541=IKcos(j1);
IkReal x3542=IKsin(j1);
IkReal x3543=((pz)*(x3542));
IkReal x3544=((pz)*(x3541));
evalcond[0]=((IkReal(-0.850000000000000))+(x3544));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3541)))+(pz));
evalcond[2]=x3543;
evalcond[3]=((IkReal(0.850000000000000))*(x3542));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x3543)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3544))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x3545=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3545))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3545))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3546=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x3546)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x3546))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x3546)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x3546)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x3546)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x3546)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3547=IKcos(j1);
IkReal x3548=IKsin(j1);
IkReal x3549=((pz)*(x3548));
IkReal x3550=((pz)*(x3547));
evalcond[0]=((IkReal(-0.850000000000000))+(x3550));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3547)))+(pz));
evalcond[2]=x3549;
evalcond[3]=((IkReal(0.850000000000000))*(x3548));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3550)))+(((IkReal(-0.0900000000000000))*(x3549)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3551=IKcos(j1);
IkReal x3552=IKsin(j1);
IkReal x3553=((pz)*(x3552));
IkReal x3554=((pz)*(x3551));
evalcond[0]=((IkReal(-0.850000000000000))+(x3554));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3551)))+(pz));
evalcond[2]=x3553;
evalcond[3]=((IkReal(0.850000000000000))*(x3552));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3554)))+(((IkReal(-0.0900000000000000))*(x3553)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3555=((IkReal(1.00000000000000))*(pp));
IkReal x3556=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3555)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x3556;
evalcond[4]=x3556;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3555))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3558 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3558.valid ) {
    continue;
}
IkReal x3557=x3558.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3557));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3557))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3559=IKsin(j1);
IkReal x3560=IKcos(j1);
IkReal x3561=((IkReal(0.0450000000000000))*(x3560));
evalcond[0]=((((IkReal(0.550000000000000))*(x3559)))+(((IkReal(-1.00000000000000))*(cj3)*(x3561)))+(x3561)+(((IkReal(0.300000000000000))*(cj3)*(x3559)))+(((IkReal(0.300000000000000))*(sj3)*(x3560)))+(((IkReal(0.0450000000000000))*(sj3)*(x3559))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3562=((IkReal(1.00000000000000))*(pp));
IkReal x3563=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3562)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x3563;
evalcond[4]=x3563;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3562))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3565 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3565.valid ) {
    continue;
}
IkReal x3564=x3565.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3564));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3564))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3566=IKsin(j1);
IkReal x3567=IKcos(j1);
IkReal x3568=((IkReal(0.0450000000000000))*(x3567));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x3568)))+(x3568)+(((IkReal(0.550000000000000))*(x3566)))+(((IkReal(0.300000000000000))*(sj3)*(x3567)))+(((IkReal(0.0450000000000000))*(sj3)*(x3566)))+(((IkReal(0.300000000000000))*(cj3)*(x3566))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3569=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3569)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3569))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3571 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3571.valid ) {
    continue;
}
IkReal x3570=x3571.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3570));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3570))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3572=IKsin(j1);
IkReal x3573=IKcos(j1);
IkReal x3574=((IkReal(0.0450000000000000))*(x3573));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x3574)))+(x3574)+(((IkReal(0.550000000000000))*(x3572)))+(((IkReal(0.300000000000000))*(cj3)*(x3572)))+(((IkReal(0.0450000000000000))*(sj3)*(x3572)))+(((IkReal(0.300000000000000))*(sj3)*(x3573))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3575=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3575)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3575))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3577 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3577.valid ) {
    continue;
}
IkReal x3576=x3577.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3576));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3576))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3578=IKsin(j1);
IkReal x3579=IKcos(j1);
IkReal x3580=((IkReal(0.0450000000000000))*(x3579));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x3580)))+(x3580)+(((IkReal(0.550000000000000))*(x3578)))+(((IkReal(0.300000000000000))*(cj3)*(x3578)))+(((IkReal(0.0450000000000000))*(sj3)*(x3578)))+(((IkReal(0.300000000000000))*(sj3)*(x3579))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3581=(cj3)*(cj3);
IkReal x3582=(sj3)*(sj3);
IkReal x3583=((cj3)*(sj3));
Atan2Value<IkReal> x3584 = IKatan2WithCheck(((gconst49)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x3583)))+(((IkReal(-0.0900000000000000))*(x3581)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x3582)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst49)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x3582)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(0.0135000000000000))*(x3581)))+(((IkReal(-0.0879750000000000))*(x3583)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3584.valid ) {
    continue;
}
j1array[0]=x3584.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3585=IKsin(j1);
IkReal x3586=IKcos(j1);
IkReal x3587=((IkReal(0.300000000000000))*(cj3));
IkReal x3588=((IkReal(0.0450000000000000))*(cj3));
IkReal x3589=((py)*(sj0));
IkReal x3590=((IkReal(0.0450000000000000))*(sj3));
IkReal x3591=((IkReal(0.300000000000000))*(sj3));
IkReal x3592=((IkReal(0.0450000000000000))*(x3585));
IkReal x3593=((pz)*(x3585));
IkReal x3594=((pz)*(x3586));
evalcond[0]=((IkReal(-0.550000000000000))+(((x3585)*(x3589)))+(x3594)+(((IkReal(-1.00000000000000))*(x3590)))+(((IkReal(-1.00000000000000))*(x3587))));
evalcond[1]=((((x3585)*(x3591)))+(((IkReal(-0.550000000000000))*(x3586)))+(x3592)+(((IkReal(-1.00000000000000))*(x3586)*(x3590)))+(pz)+(((IkReal(-1.00000000000000))*(x3586)*(x3587)))+(((IkReal(-1.00000000000000))*(x3585)*(x3588))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3586)*(x3589)))+(x3593)+(x3591)+(((IkReal(-1.00000000000000))*(x3588))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x3586)))+(((x3585)*(x3590)))+(((x3586)*(x3591)))+(((x3585)*(x3587)))+(((IkReal(0.550000000000000))*(x3585)))+(((IkReal(-1.00000000000000))*(x3586)*(x3588)))+(((IkReal(-1.00000000000000))*(x3589))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x3593)))+(((IkReal(1.10000000000000))*(x3585)*(x3589)))+(((IkReal(0.0900000000000000))*(x3586)*(x3589)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3594))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3595=((IkReal(0.0450000000000000))*(pz));
IkReal x3596=((IkReal(0.300000000000000))*(sj3));
IkReal x3597=((py)*(sj0));
IkReal x3598=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x3599 = IKatan2WithCheck(((gconst48)*(((((pz)*(x3596)))+(((IkReal(-0.550000000000000))*(x3597)))+(x3595)+(((IkReal(-0.0450000000000000))*(sj3)*(x3597)))+(((IkReal(-1.00000000000000))*(x3597)*(x3598)))+(((IkReal(-1.00000000000000))*(cj3)*(x3595)))))),((gconst48)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x3597)))+(((IkReal(-1.00000000000000))*(sj3)*(x3595)))+(((IkReal(-1.00000000000000))*(pz)*(x3598)))+(((IkReal(0.0450000000000000))*(cj3)*(x3597)))+(((IkReal(-1.00000000000000))*(x3596)*(x3597)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3599.valid ) {
    continue;
}
j1array[0]=x3599.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3600=IKsin(j1);
IkReal x3601=IKcos(j1);
IkReal x3602=((IkReal(0.300000000000000))*(cj3));
IkReal x3603=((IkReal(0.0450000000000000))*(cj3));
IkReal x3604=((py)*(sj0));
IkReal x3605=((IkReal(0.0450000000000000))*(sj3));
IkReal x3606=((IkReal(0.300000000000000))*(sj3));
IkReal x3607=((IkReal(0.0450000000000000))*(x3600));
IkReal x3608=((pz)*(x3600));
IkReal x3609=((pz)*(x3601));
evalcond[0]=((IkReal(-0.550000000000000))+(((x3600)*(x3604)))+(x3609)+(((IkReal(-1.00000000000000))*(x3605)))+(((IkReal(-1.00000000000000))*(x3602))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3601)*(x3605)))+(((IkReal(-1.00000000000000))*(x3601)*(x3602)))+(((x3600)*(x3606)))+(x3607)+(((IkReal(-1.00000000000000))*(x3600)*(x3603)))+(pz)+(((IkReal(-0.550000000000000))*(x3601))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3601)*(x3604)))+(x3606)+(x3608)+(((IkReal(-1.00000000000000))*(x3603))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3601)*(x3603)))+(((IkReal(-1.00000000000000))*(x3604)))+(((x3600)*(x3602)))+(((x3600)*(x3605)))+(((IkReal(0.550000000000000))*(x3600)))+(((x3601)*(x3606)))+(((IkReal(0.0450000000000000))*(x3601))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x3608)))+(((IkReal(1.10000000000000))*(x3609)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3600)*(x3604)))+(((IkReal(0.0900000000000000))*(x3601)*(x3604))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3610=((cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(x3610));
evalcond[3]=x3610;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x3611=((py)*(sj0));
IkReal x3612=((IkReal(0.0450000000000000))*(pz));
gconst51=IKsign(((((IkReal(-0.0450000000000000))*(sj3)*(x3611)))+(((IkReal(-1.00000000000000))*(cj3)*(x3612)))+(x3612)+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)*(x3611)))+(((IkReal(-0.550000000000000))*(x3611)))));
IkReal x3613=((py)*(sj0));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x3613)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-6.66666666666667))*(cj3)*(x3613)))+(pz)+(((IkReal(-1.00000000000000))*(sj3)*(x3613))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x3614=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3614))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3614))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3615=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x3615)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x3615))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x3615)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x3615)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x3615)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x3615)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3616=IKcos(j1);
IkReal x3617=IKsin(j1);
IkReal x3618=((pz)*(x3617));
IkReal x3619=((pz)*(x3616));
evalcond[0]=((IkReal(-0.850000000000000))+(x3619));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3616)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x3618));
evalcond[3]=((IkReal(0.850000000000000))*(x3617));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3619)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x3618))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3620=IKcos(j1);
IkReal x3621=IKsin(j1);
IkReal x3622=((pz)*(x3621));
IkReal x3623=((pz)*(x3620));
evalcond[0]=((IkReal(-0.850000000000000))+(x3623));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3620)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x3622));
evalcond[3]=((IkReal(0.850000000000000))*(x3621));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x3622)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3623))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x3624=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3624))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3624))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3625=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x3625)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x3625))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x3625)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x3625)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x3625)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x3625)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3626=IKcos(j1);
IkReal x3627=IKsin(j1);
IkReal x3628=((pz)*(x3627));
IkReal x3629=((pz)*(x3626));
evalcond[0]=((IkReal(-0.850000000000000))+(x3629));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3626)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x3628));
evalcond[3]=((IkReal(0.850000000000000))*(x3627));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x3628)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3629))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3630=IKcos(j1);
IkReal x3631=IKsin(j1);
IkReal x3632=((pz)*(x3631));
IkReal x3633=((pz)*(x3630));
evalcond[0]=((IkReal(-0.850000000000000))+(x3633));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3630)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x3632));
evalcond[3]=((IkReal(0.850000000000000))*(x3631));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3633)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x3632))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3634=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3634)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3634))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3636 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3636.valid ) {
    continue;
}
IkReal x3635=x3636.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3635));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3635))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3637=IKsin(j1);
IkReal x3638=IKcos(j1);
IkReal x3639=((IkReal(0.0450000000000000))*(x3638));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x3637)))+(((IkReal(0.0450000000000000))*(sj3)*(x3637)))+(((IkReal(-1.00000000000000))*(x3639)))+(((cj3)*(x3639)))+(((IkReal(0.550000000000000))*(x3637)))+(((IkReal(-0.300000000000000))*(sj3)*(x3638))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3640=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(pz))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3640)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3640))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3642 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3642.valid ) {
    continue;
}
IkReal x3641=x3642.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3641));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3641))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3643=IKsin(j1);
IkReal x3644=IKcos(j1);
IkReal x3645=((IkReal(0.0450000000000000))*(x3644));
evalcond[0]=((((IkReal(0.550000000000000))*(x3643)))+(((IkReal(0.0450000000000000))*(sj3)*(x3643)))+(((IkReal(0.300000000000000))*(cj3)*(x3643)))+(((IkReal(-0.300000000000000))*(sj3)*(x3644)))+(((IkReal(-1.00000000000000))*(x3645)))+(((cj3)*(x3645))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3646=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3646)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3646))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3648 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3648.valid ) {
    continue;
}
IkReal x3647=x3648.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3647));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3647))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3649=IKsin(j1);
IkReal x3650=IKcos(j1);
IkReal x3651=((IkReal(0.0450000000000000))*(x3650));
evalcond[0]=((((IkReal(0.550000000000000))*(x3649)))+(((cj3)*(x3651)))+(((IkReal(0.0450000000000000))*(sj3)*(x3649)))+(((IkReal(0.300000000000000))*(cj3)*(x3649)))+(((IkReal(-0.300000000000000))*(sj3)*(x3650)))+(((IkReal(-1.00000000000000))*(x3651))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3652=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(sj0))+(IKabs(((((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(1.00000000000000))+(IKsign(cj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x3652))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3652))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3654 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3654.valid ) {
    continue;
}
IkReal x3653=x3654.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3653));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3653))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3655=IKsin(j1);
IkReal x3656=IKcos(j1);
IkReal x3657=((IkReal(0.0450000000000000))*(x3656));
evalcond[0]=((((cj3)*(x3657)))+(((IkReal(0.300000000000000))*(cj3)*(x3655)))+(((IkReal(0.0450000000000000))*(sj3)*(x3655)))+(((IkReal(-0.300000000000000))*(sj3)*(x3656)))+(((IkReal(-1.00000000000000))*(x3657)))+(((IkReal(0.550000000000000))*(x3655))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3658=(sj3)*(sj3);
IkReal x3659=(cj3)*(cj3);
IkReal x3660=((cj3)*(sj3));
Atan2Value<IkReal> x3661 = IKatan2WithCheck(((gconst51)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x3659)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x3658)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x3660)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst51)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*(x3659)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(sj0)))+(((IkReal(0.0135000000000000))*(x3658)))+(((IkReal(0.0879750000000000))*(x3660)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3661.valid ) {
    continue;
}
j1array[0]=x3661.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3662=IKsin(j1);
IkReal x3663=IKcos(j1);
IkReal x3664=((IkReal(0.300000000000000))*(cj3));
IkReal x3665=((IkReal(0.0450000000000000))*(cj3));
IkReal x3666=((py)*(sj0));
IkReal x3667=((IkReal(0.0450000000000000))*(sj3));
IkReal x3668=((IkReal(0.300000000000000))*(sj3));
IkReal x3669=((IkReal(0.0450000000000000))*(x3662));
IkReal x3670=((pz)*(x3662));
IkReal x3671=((pz)*(x3663));
evalcond[0]=((IkReal(-0.550000000000000))+(((x3662)*(x3666)))+(((IkReal(-1.00000000000000))*(x3667)))+(((IkReal(-1.00000000000000))*(x3664)))+(x3671));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3662)*(x3668)))+(((IkReal(-1.00000000000000))*(x3663)*(x3664)))+(((IkReal(-1.00000000000000))*(x3663)*(x3667)))+(((x3662)*(x3665)))+(((IkReal(-1.00000000000000))*(x3669)))+(pz)+(((IkReal(-0.550000000000000))*(x3663))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3665)))+(x3668)+(((IkReal(-1.00000000000000))*(x3670)))+(((x3663)*(x3666))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3663)*(x3668)))+(((x3662)*(x3667)))+(((x3662)*(x3664)))+(((IkReal(-1.00000000000000))*(x3666)))+(((IkReal(-0.0450000000000000))*(x3663)))+(((IkReal(0.550000000000000))*(x3662)))+(((x3663)*(x3665))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3662)*(x3666)))+(((IkReal(0.0900000000000000))*(x3670)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3663)*(x3666)))+(((IkReal(1.10000000000000))*(x3671))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3672=((IkReal(0.0450000000000000))*(cj3));
IkReal x3673=((IkReal(0.300000000000000))*(sj3));
IkReal x3674=((py)*(sj0));
IkReal x3675=((IkReal(0.0450000000000000))*(pz));
IkReal x3676=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x3677 = IKatan2WithCheck(((gconst50)*(((((IkReal(0.550000000000000))*(x3674)))+(((IkReal(0.0450000000000000))*(sj3)*(x3674)))+(((IkReal(-1.00000000000000))*(pz)*(x3672)))+(((x3674)*(x3676)))+(x3675)+(((pz)*(x3673)))))),((gconst50)*(((((IkReal(-0.0450000000000000))*(x3674)))+(((IkReal(-1.00000000000000))*(x3673)*(x3674)))+(((sj3)*(x3675)))+(((x3672)*(x3674)))+(((pz)*(x3676)))+(((IkReal(0.550000000000000))*(pz)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3677.valid ) {
    continue;
}
j1array[0]=x3677.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3678=IKsin(j1);
IkReal x3679=IKcos(j1);
IkReal x3680=((IkReal(0.300000000000000))*(cj3));
IkReal x3681=((IkReal(0.0450000000000000))*(cj3));
IkReal x3682=((py)*(sj0));
IkReal x3683=((IkReal(0.0450000000000000))*(sj3));
IkReal x3684=((IkReal(0.300000000000000))*(sj3));
IkReal x3685=((IkReal(0.0450000000000000))*(x3678));
IkReal x3686=((pz)*(x3678));
IkReal x3687=((pz)*(x3679));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x3680)))+(((IkReal(-1.00000000000000))*(x3683)))+(((x3678)*(x3682)))+(x3687));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3685)))+(((IkReal(-0.550000000000000))*(x3679)))+(((x3678)*(x3681)))+(pz)+(((IkReal(-1.00000000000000))*(x3679)*(x3683)))+(((IkReal(-1.00000000000000))*(x3679)*(x3680)))+(((IkReal(-1.00000000000000))*(x3678)*(x3684))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3681)))+(x3684)+(((IkReal(-1.00000000000000))*(x3686)))+(((x3679)*(x3682))));
evalcond[3]=((((IkReal(0.550000000000000))*(x3678)))+(((IkReal(-0.0450000000000000))*(x3679)))+(((x3678)*(x3683)))+(((x3678)*(x3680)))+(((IkReal(-1.00000000000000))*(x3679)*(x3684)))+(((IkReal(-1.00000000000000))*(x3682)))+(((x3679)*(x3681))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3678)*(x3682)))+(((IkReal(-0.0900000000000000))*(x3679)*(x3682)))+(((IkReal(0.0900000000000000))*(x3686)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3687))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3688=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x3688;
evalcond[3]=x3688;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
IkReal x3689=((IkReal(0.0450000000000000))*(pz));
IkReal x3690=((cj0)*(px));
gconst53=IKsign(((((cj3)*(x3689)))+(((IkReal(-0.0450000000000000))*(sj3)*(x3690)))+(((IkReal(-1.00000000000000))*(x3689)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.550000000000000))*(x3690)))+(((IkReal(-0.300000000000000))*(cj3)*(x3690)))));
IkReal x3691=((cj0)*(px));
dummyeval[0]=((((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-12.2222222222222))*(x3691)))+(((IkReal(-6.66666666666667))*(cj3)*(x3691)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(x3691)))+(((cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x3692=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3692))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3692))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3693=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x3693)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x3693))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x3693)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x3693)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x3693)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x3693)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3694=IKcos(j1);
IkReal x3695=IKsin(j1);
IkReal x3696=((pz)*(x3695));
IkReal x3697=((pz)*(x3694));
evalcond[0]=((IkReal(-0.850000000000000))+(x3697));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x3694))));
evalcond[2]=x3696;
evalcond[3]=((IkReal(0.850000000000000))*(x3695));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3697)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3696))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3698=IKcos(j1);
IkReal x3699=IKsin(j1);
IkReal x3700=((pz)*(x3699));
IkReal x3701=((pz)*(x3698));
evalcond[0]=((IkReal(-0.850000000000000))+(x3701));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x3698))));
evalcond[2]=x3700;
evalcond[3]=((IkReal(0.850000000000000))*(x3699));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3700)))+(((IkReal(1.10000000000000))*(x3701))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x3702=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3702))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3702))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3703=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x3703)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x3703))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x3703)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x3703)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x3703)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x3703)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3704=IKcos(j1);
IkReal x3705=IKsin(j1);
IkReal x3706=((pz)*(x3705));
IkReal x3707=((pz)*(x3704));
evalcond[0]=((IkReal(-0.850000000000000))+(x3707));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3704)))+(pz));
evalcond[2]=x3706;
evalcond[3]=((IkReal(0.850000000000000))*(x3705));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3706)))+(((IkReal(1.10000000000000))*(x3707))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((pz)*(pz))))+(((IkReal(-1700.00000000000))*(pp)))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3708=IKcos(j1);
IkReal x3709=IKsin(j1);
IkReal x3710=((pz)*(x3709));
IkReal x3711=((pz)*(x3708));
evalcond[0]=((IkReal(-0.850000000000000))+(x3711));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3708)))+(pz));
evalcond[2]=x3710;
evalcond[3]=((IkReal(0.850000000000000))*(x3709));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3711)))+(((IkReal(-0.0900000000000000))*(x3710))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3712=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x3712)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3712))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3714 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3714.valid ) {
    continue;
}
IkReal x3713=x3714.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3713));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3713))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3715=IKsin(j1);
IkReal x3716=IKcos(j1);
IkReal x3717=((IkReal(0.0450000000000000))*(x3716));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x3717)))+(x3717)+(((IkReal(0.0450000000000000))*(sj3)*(x3715)))+(((IkReal(0.300000000000000))*(cj3)*(x3715)))+(((IkReal(0.300000000000000))*(sj3)*(x3716)))+(((IkReal(0.550000000000000))*(x3715))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3718=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x3718)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3718))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3720 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3720.valid ) {
    continue;
}
IkReal x3719=x3720.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3719));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3719))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3721=IKsin(j1);
IkReal x3722=IKcos(j1);
IkReal x3723=((IkReal(0.0450000000000000))*(x3722));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x3723)))+(x3723)+(((IkReal(0.550000000000000))*(x3721)))+(((IkReal(0.300000000000000))*(cj3)*(x3721)))+(((IkReal(0.300000000000000))*(sj3)*(x3722)))+(((IkReal(0.0450000000000000))*(sj3)*(x3721))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3724=((IkReal(1.00000000000000))*(pp));
IkReal x3725=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x3724)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x3725;
evalcond[4]=x3725;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3724))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3727 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3727.valid ) {
    continue;
}
IkReal x3726=x3727.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3726));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3726))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3728=IKsin(j1);
IkReal x3729=IKcos(j1);
IkReal x3730=((IkReal(0.0450000000000000))*(x3729));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x3730)))+(x3730)+(((IkReal(0.550000000000000))*(x3728)))+(((IkReal(0.300000000000000))*(cj3)*(x3728)))+(((IkReal(0.300000000000000))*(sj3)*(x3729)))+(((IkReal(0.0450000000000000))*(sj3)*(x3728))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3731=((IkReal(1.00000000000000))*(pp));
IkReal x3732=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x3731)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x3732;
evalcond[4]=x3732;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3731))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3734 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3734.valid ) {
    continue;
}
IkReal x3733=x3734.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3733));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3733))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3735=IKsin(j1);
IkReal x3736=IKcos(j1);
IkReal x3737=((IkReal(0.0450000000000000))*(x3736));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x3737)))+(x3737)+(((IkReal(0.300000000000000))*(sj3)*(x3736)))+(((IkReal(0.550000000000000))*(x3735)))+(((IkReal(0.0450000000000000))*(sj3)*(x3735)))+(((IkReal(0.300000000000000))*(cj3)*(x3735))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3738=(cj3)*(cj3);
IkReal x3739=(sj3)*(sj3);
IkReal x3740=((cj3)*(sj3));
Atan2Value<IkReal> x3741 = IKatan2WithCheck(((gconst53)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x3740)))+(((IkReal(-0.0900000000000000))*(x3738)))+(((IkReal(-0.00202500000000000))*(x3739)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst53)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(0.0135000000000000))*(x3738)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x3739)))+(((IkReal(-0.0879750000000000))*(x3740)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3741.valid ) {
    continue;
}
j1array[0]=x3741.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3742=IKsin(j1);
IkReal x3743=IKcos(j1);
IkReal x3744=((IkReal(0.300000000000000))*(cj3));
IkReal x3745=((IkReal(0.0450000000000000))*(cj3));
IkReal x3746=((IkReal(0.0450000000000000))*(sj3));
IkReal x3747=((cj0)*(px));
IkReal x3748=((IkReal(0.300000000000000))*(sj3));
IkReal x3749=((IkReal(0.0450000000000000))*(x3742));
IkReal x3750=((IkReal(1.00000000000000))*(x3747));
IkReal x3751=((pz)*(x3742));
IkReal x3752=((pz)*(x3743));
evalcond[0]=((IkReal(-0.550000000000000))+(((x3742)*(x3747)))+(((IkReal(-1.00000000000000))*(x3744)))+(((IkReal(-1.00000000000000))*(x3746)))+(x3752));
evalcond[1]=((((x3742)*(x3748)))+(((IkReal(-1.00000000000000))*(x3743)*(x3744)))+(((IkReal(-1.00000000000000))*(x3743)*(x3746)))+(x3749)+(((IkReal(-0.550000000000000))*(x3743)))+(pz)+(((IkReal(-1.00000000000000))*(x3742)*(x3745))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3743)*(x3750)))+(((IkReal(-1.00000000000000))*(x3745)))+(x3748)+(x3751));
evalcond[3]=((((x3742)*(x3746)))+(((x3742)*(x3744)))+(((x3743)*(x3748)))+(((IkReal(-1.00000000000000))*(x3743)*(x3745)))+(((IkReal(-1.00000000000000))*(x3750)))+(((IkReal(0.550000000000000))*(x3742)))+(((IkReal(0.0450000000000000))*(x3743))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3752)))+(((IkReal(0.0900000000000000))*(x3743)*(x3747)))+(((IkReal(1.10000000000000))*(x3742)*(x3747)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x3751))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3753=((IkReal(0.300000000000000))*(sj3));
IkReal x3754=((cj0)*(px));
IkReal x3755=((IkReal(0.0450000000000000))*(cj3));
IkReal x3756=((IkReal(0.0450000000000000))*(pz));
IkReal x3757=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x3758 = IKatan2WithCheck(((gconst52)*(((((IkReal(-0.0450000000000000))*(sj3)*(x3754)))+(((pz)*(x3753)))+(x3756)+(((IkReal(-1.00000000000000))*(x3754)*(x3757)))+(((IkReal(-0.550000000000000))*(x3754)))+(((IkReal(-1.00000000000000))*(pz)*(x3755)))))),((gconst52)*(((((IkReal(-0.550000000000000))*(pz)))+(((x3754)*(x3755)))+(((IkReal(-1.00000000000000))*(x3753)*(x3754)))+(((IkReal(-1.00000000000000))*(sj3)*(x3756)))+(((IkReal(-0.0450000000000000))*(x3754)))+(((IkReal(-1.00000000000000))*(pz)*(x3757)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3758.valid ) {
    continue;
}
j1array[0]=x3758.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3759=IKsin(j1);
IkReal x3760=IKcos(j1);
IkReal x3761=((IkReal(0.300000000000000))*(cj3));
IkReal x3762=((IkReal(0.0450000000000000))*(cj3));
IkReal x3763=((IkReal(0.0450000000000000))*(sj3));
IkReal x3764=((cj0)*(px));
IkReal x3765=((IkReal(0.300000000000000))*(sj3));
IkReal x3766=((IkReal(0.0450000000000000))*(x3759));
IkReal x3767=((IkReal(1.00000000000000))*(x3764));
IkReal x3768=((pz)*(x3759));
IkReal x3769=((pz)*(x3760));
evalcond[0]=((IkReal(-0.550000000000000))+(x3769)+(((x3759)*(x3764)))+(((IkReal(-1.00000000000000))*(x3763)))+(((IkReal(-1.00000000000000))*(x3761))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3759)*(x3762)))+(x3766)+(((IkReal(-0.550000000000000))*(x3760)))+(((IkReal(-1.00000000000000))*(x3760)*(x3763)))+(((IkReal(-1.00000000000000))*(x3760)*(x3761)))+(pz)+(((x3759)*(x3765))));
evalcond[2]=((IkReal(0.0450000000000000))+(x3765)+(x3768)+(((IkReal(-1.00000000000000))*(x3760)*(x3767)))+(((IkReal(-1.00000000000000))*(x3762))));
evalcond[3]=((((IkReal(0.550000000000000))*(x3759)))+(((IkReal(-1.00000000000000))*(x3760)*(x3762)))+(((x3759)*(x3763)))+(((x3759)*(x3761)))+(((x3760)*(x3765)))+(((IkReal(-1.00000000000000))*(x3767)))+(((IkReal(0.0450000000000000))*(x3760))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3759)*(x3764)))+(((IkReal(1.10000000000000))*(x3769)))+(((IkReal(-0.0900000000000000))*(x3768)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x3760)*(x3764))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3770=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x3770;
evalcond[3]=((IkReal(-1.00000000000000))*(x3770));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign((((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=(((pz)*(pz))+((((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst55;
IkReal x3771=((IkReal(0.0450000000000000))*(pz));
IkReal x3772=((cj0)*(px));
gconst55=IKsign(((((IkReal(-1.00000000000000))*(cj3)*(x3771)))+(x3771)+(((IkReal(-0.550000000000000))*(x3772)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.0450000000000000))*(sj3)*(x3772)))+(((IkReal(-0.300000000000000))*(cj3)*(x3772)))));
IkReal x3773=((cj0)*(px));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(-12.2222222222222))*(x3773)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x3773)))+(pz)+(((IkReal(-6.66666666666667))*(cj3)*(x3773))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x3774=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3774))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3774))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3775=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x3775)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x3775))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x3775)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x3775)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x3775)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x3775)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3776=IKcos(j1);
IkReal x3777=IKsin(j1);
IkReal x3778=((pz)*(x3777));
IkReal x3779=((pz)*(x3776));
evalcond[0]=((IkReal(-0.850000000000000))+(x3779));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3776)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x3778));
evalcond[3]=((IkReal(0.850000000000000))*(x3777));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3779)))+(((IkReal(0.0900000000000000))*(x3778)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3780=IKcos(j1);
IkReal x3781=IKsin(j1);
IkReal x3782=((pz)*(x3781));
IkReal x3783=((pz)*(x3780));
evalcond[0]=((IkReal(-0.850000000000000))+(x3783));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3780)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x3782));
evalcond[3]=((IkReal(0.850000000000000))*(x3781));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x3782)))+(((IkReal(1.10000000000000))*(x3783)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=IkReal(0);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=pz;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x3784=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(pz);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x3784))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3784))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3785=((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30);
if( IKabs(((IkReal(0.0555555555555556))*(x3785)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.850000000000000))*(x3785))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0555555555555556))*(x3785)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))))+IKsqr(((IkReal(0.850000000000000))*(x3785)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.0555555555555556))*(x3785)*(((IkReal(-144.500000000000))+(((IkReal(200.000000000000))*(pp)))))), ((IkReal(0.850000000000000))*(x3785)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3786=IKcos(j1);
IkReal x3787=IKsin(j1);
IkReal x3788=((pz)*(x3787));
IkReal x3789=((pz)*(x3786));
evalcond[0]=((IkReal(-0.850000000000000))+(x3789));
evalcond[1]=((((IkReal(-0.850000000000000))*(x3786)))+(pz));
evalcond[2]=((IkReal(-1.00000000000000))*(x3788));
evalcond[3]=((IkReal(0.850000000000000))*(x3787));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x3788)))+(((IkReal(1.10000000000000))*(x3789)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.17647058823529))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))))+IKsqr(((IkReal(1.17647058823529))*(pz)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.00653594771241830))*(((IKabs(pz) != 0)?((IkReal)1/(pz)):(IkReal)1.0e30))*(((IkReal(361.250000000000))+(((IkReal(1700.00000000000))*(pp)))+(((IkReal(-2200.00000000000))*((pz)*(pz))))))), ((IkReal(1.17647058823529))*(pz)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3790=IKcos(j1);
IkReal x3791=IKsin(j1);
IkReal x3792=((pz)*(x3791));
IkReal x3793=((pz)*(x3790));
evalcond[0]=((IkReal(-0.850000000000000))+(x3793));
evalcond[1]=((pz)+(((IkReal(-0.850000000000000))*(x3790))));
evalcond[2]=((IkReal(-1.00000000000000))*(x3792));
evalcond[3]=((IkReal(0.850000000000000))*(x3791));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x3792)))+(((IkReal(1.10000000000000))*(x3793)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3794=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x3794)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3794))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3796 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3796.valid ) {
    continue;
}
IkReal x3795=x3796.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3795));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3795))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3797=IKsin(j1);
IkReal x3798=IKcos(j1);
IkReal x3799=((IkReal(0.0450000000000000))*(x3798));
evalcond[0]=((((IkReal(-1.00000000000000))*(x3799)))+(((IkReal(-0.300000000000000))*(sj3)*(x3798)))+(((IkReal(0.550000000000000))*(x3797)))+(((IkReal(0.0450000000000000))*(sj3)*(x3797)))+(((cj3)*(x3799)))+(((IkReal(0.300000000000000))*(cj3)*(x3797))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3800=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959))))))+(IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x3800)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3800))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3802 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3802.valid ) {
    continue;
}
IkReal x3801=x3802.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3801));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3801))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3803=IKsin(j1);
IkReal x3804=IKcos(j1);
IkReal x3805=((IkReal(0.0450000000000000))*(x3804));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x3803)))+(((IkReal(-1.00000000000000))*(x3805)))+(((IkReal(0.550000000000000))*(x3803)))+(((IkReal(0.300000000000000))*(cj3)*(x3803)))+(((IkReal(-0.300000000000000))*(sj3)*(x3804)))+(((cj3)*(x3805))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3806=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))+(IKabs(((IkReal(-1.00000000000000))+(IKsign(sj0)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x3806)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3806))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3808 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3808.valid ) {
    continue;
}
IkReal x3807=x3808.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3807));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3807))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3809=IKsin(j1);
IkReal x3810=IKcos(j1);
IkReal x3811=((IkReal(0.0450000000000000))*(x3810));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x3809)))+(((IkReal(-0.300000000000000))*(sj3)*(x3810)))+(((cj3)*(x3811)))+(((IkReal(-1.00000000000000))*(x3811)))+(((IkReal(0.550000000000000))*(x3809)))+(((IkReal(0.300000000000000))*(cj3)*(x3809))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x3812=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.00000000000000))+(IKsign(sj0)))))+(IKabs(cj0))+(IKabs(((((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*((pz)*(pz)))))), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x3812)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3812))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x3814 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x3814.valid ) {
    continue;
}
IkReal x3813=x3814.value;
j1array[0]=((IkReal(-1.00000000000000))*(x3813));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x3813))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x3815=IKsin(j1);
IkReal x3816=IKcos(j1);
IkReal x3817=((IkReal(0.0450000000000000))*(x3816));
evalcond[0]=((((IkReal(-0.300000000000000))*(sj3)*(x3816)))+(((IkReal(0.0450000000000000))*(sj3)*(x3815)))+(((cj3)*(x3817)))+(((IkReal(-1.00000000000000))*(x3817)))+(((IkReal(0.550000000000000))*(x3815)))+(((IkReal(0.300000000000000))*(cj3)*(x3815))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3818=(sj3)*(sj3);
IkReal x3819=(cj3)*(cj3);
IkReal x3820=((cj3)*(sj3));
Atan2Value<IkReal> x3821 = IKatan2WithCheck(((gconst55)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x3818)))+(((IkReal(-0.0900000000000000))*(x3819)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x3820)))+((pz)*(pz))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst55)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(pz)))+(((IkReal(0.0879750000000000))*(x3820)))+(((IkReal(0.0135000000000000))*(x3818)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x3819)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3821.valid ) {
    continue;
}
j1array[0]=x3821.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3822=IKsin(j1);
IkReal x3823=IKcos(j1);
IkReal x3824=((IkReal(0.300000000000000))*(cj3));
IkReal x3825=((IkReal(0.0450000000000000))*(cj3));
IkReal x3826=((cj0)*(px));
IkReal x3827=((IkReal(0.0450000000000000))*(sj3));
IkReal x3828=((IkReal(0.300000000000000))*(sj3));
IkReal x3829=((IkReal(0.0450000000000000))*(x3822));
IkReal x3830=((pz)*(x3822));
IkReal x3831=((pz)*(x3823));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x3824)))+(((IkReal(-1.00000000000000))*(x3827)))+(x3831)+(((x3822)*(x3826))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3822)*(x3828)))+(((IkReal(-1.00000000000000))*(x3829)))+(((IkReal(-1.00000000000000))*(x3823)*(x3827)))+(((IkReal(-1.00000000000000))*(x3823)*(x3824)))+(pz)+(((x3822)*(x3825)))+(((IkReal(-0.550000000000000))*(x3823))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3830)))+(((IkReal(-1.00000000000000))*(x3825)))+(x3828)+(((x3823)*(x3826))));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x3823)))+(((IkReal(-1.00000000000000))*(x3823)*(x3828)))+(((IkReal(-1.00000000000000))*(x3826)))+(((IkReal(0.550000000000000))*(x3822)))+(((x3822)*(x3824)))+(((x3822)*(x3827)))+(((x3823)*(x3825))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3831)))+(((IkReal(-0.0900000000000000))*(x3823)*(x3826)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x3830)))+(((IkReal(1.10000000000000))*(x3822)*(x3826))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3832=((pz)*(sj3));
IkReal x3833=((cj0)*(px));
IkReal x3834=((IkReal(0.0450000000000000))*(cj3));
IkReal x3835=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x3836 = IKatan2WithCheck(((gconst54)*(((((IkReal(0.0450000000000000))*(pz)))+(((x3833)*(x3835)))+(((IkReal(0.0450000000000000))*(sj3)*(x3833)))+(((IkReal(0.300000000000000))*(x3832)))+(((IkReal(-1.00000000000000))*(pz)*(x3834)))+(((IkReal(0.550000000000000))*(x3833)))))),((gconst54)*(((((IkReal(0.0450000000000000))*(x3832)))+(((pz)*(x3835)))+(((x3833)*(x3834)))+(((IkReal(-0.300000000000000))*(sj3)*(x3833)))+(((IkReal(-0.0450000000000000))*(x3833)))+(((IkReal(0.550000000000000))*(pz)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3836.valid ) {
    continue;
}
j1array[0]=x3836.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3837=IKsin(j1);
IkReal x3838=IKcos(j1);
IkReal x3839=((IkReal(0.300000000000000))*(cj3));
IkReal x3840=((IkReal(0.0450000000000000))*(cj3));
IkReal x3841=((cj0)*(px));
IkReal x3842=((IkReal(0.0450000000000000))*(sj3));
IkReal x3843=((IkReal(0.300000000000000))*(sj3));
IkReal x3844=((IkReal(0.0450000000000000))*(x3837));
IkReal x3845=((pz)*(x3837));
IkReal x3846=((pz)*(x3838));
evalcond[0]=((IkReal(-0.550000000000000))+(((x3837)*(x3841)))+(x3846)+(((IkReal(-1.00000000000000))*(x3842)))+(((IkReal(-1.00000000000000))*(x3839))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3838)*(x3839)))+(((IkReal(-0.550000000000000))*(x3838)))+(((x3837)*(x3840)))+(((IkReal(-1.00000000000000))*(x3838)*(x3842)))+(pz)+(((IkReal(-1.00000000000000))*(x3837)*(x3843)))+(((IkReal(-1.00000000000000))*(x3844))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x3838)*(x3841)))+(((IkReal(-1.00000000000000))*(x3845)))+(x3843)+(((IkReal(-1.00000000000000))*(x3840))));
evalcond[3]=((((x3838)*(x3840)))+(((x3837)*(x3842)))+(((IkReal(-1.00000000000000))*(x3838)*(x3843)))+(((IkReal(-1.00000000000000))*(x3841)))+(((IkReal(-0.0450000000000000))*(x3838)))+(((x3837)*(x3839)))+(((IkReal(0.550000000000000))*(x3837))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x3846)))+(((IkReal(0.0900000000000000))*(x3845)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x3837)*(x3841)))+(((IkReal(-0.0900000000000000))*(x3838)*(x3841))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3847=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x3847;
evalcond[3]=x3847;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign(((((cj0)*(px)))+(((py)*(sj0)))));
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3848=((cj0)*(px));
IkReal x3849=((py)*(sj0));
IkReal x3850=((IkReal(6.66666666666667))*(cj3));
IkReal x3851=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((x3849)+(x3848));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x3848)*(x3850)))+(((IkReal(-1.00000000000000))*(x3848)*(x3851)))+(((IkReal(-12.2222222222222))*(x3848)))+(((IkReal(-12.2222222222222))*(x3849)))+(((IkReal(-1.00000000000000))*(x3849)*(x3851)))+(((IkReal(-1.00000000000000))*(x3849)*(x3850))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3852=((py)*(sj0));
IkReal x3853=((cj0)*(px));
IkReal x3854=((IkReal(6.66666666666667))*(sj3));
IkReal x3855=((IkReal(1.00000000000000))*(x3853));
IkReal x3856=((IkReal(1.00000000000000))*(x3852));
IkReal x3857=((x3856)+(x3855));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x3857)))+(((cj3)*(x3853)))+(((cj3)*(x3852)))+(((IkReal(-1.00000000000000))*(x3853)*(x3854)))+(((IkReal(-1.00000000000000))*(x3852)*(x3854))));
dummyeval[1]=((IkReal(-1.00000000000000))*(x3857));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
Atan2Value<IkReal> x3860 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3860.valid ) {
    continue;
}
IkReal x3858=x3860.value;
IkReal x3859=((((IkReal(-1.00000000000000))*(py)*(IKcos(x3858))))+(((IkReal(-1.00000000000000))*(px)*(IKsin(x3858)))));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x3858)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x3859;
evalcond[3]=x3859;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
Atan2Value<IkReal> x3862 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3862.valid ) {
    continue;
}
IkReal x3861=x3862.value;
dummyeval[0]=((((px)*(IKcos(x3861))))+(((IkReal(-1.00000000000000))*(py)*(IKsin(x3861)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
Atan2Value<IkReal> x3868 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3868.valid ) {
    continue;
}
IkReal x3863=x3868.value;
IkReal x3864=IKcos(x3863);
IkReal x3865=IKsin(x3863);
IkReal x3866=((px)*(x3864));
IkReal x3867=((py)*(x3865));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x3867)))+(x3866));
dummyeval[1]=((((IkReal(-2.00000000000000))*(x3866)*(x3867)))+((x3866)*(x3866))+((x3867)*(x3867)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3875 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3875.valid ) {
    continue;
}
IkReal x3869=x3875.value;
IkReal x3870=IKsin(x3869);
IkReal x3871=IKcos(x3869);
IkReal x3872=((px)*(x3871));
IkReal x3873=((py)*(x3870));
IkReal x3874=((IkReal(20.0000000000000))*(x3873));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x3872)))+(((IkReal(-1.00000000000000))*(x3874))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x3872)))+(((IkReal(-1.00000000000000))*(x3874)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.80000000000000))*((x3873)*(x3873))))+(((IkReal(1.80000000000000))*((x3872)*(x3872))))+(((IkReal(-3.60000000000000))*(x3872)*(x3873))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x3873)*(x3873))))+(((IkReal(1.80000000000000))*((x3872)*(x3872))))+(((IkReal(-3.60000000000000))*(x3872)*(x3873)))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x3872)))+(((IkReal(14.4500000000000))*(x3873)))+(((IkReal(20.0000000000000))*(pp)*(x3872)))+(((IkReal(-1.00000000000000))*(pp)*(x3874))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x3872)))+(((IkReal(-1.00000000000000))*(x3874))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x3872)))+(((IkReal(-1.00000000000000))*(x3874)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(1.80000000000000))*((x3873)*(x3873))))+(((IkReal(1.80000000000000))*((x3872)*(x3872))))+(((IkReal(-3.60000000000000))*(x3872)*(x3873))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x3873)*(x3873))))+(((IkReal(1.80000000000000))*((x3872)*(x3872))))+(((IkReal(-3.60000000000000))*(x3872)*(x3873)))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x3872)))+(((IkReal(14.4500000000000))*(x3873)))+(((IkReal(20.0000000000000))*(pp)*(x3872)))+(((IkReal(-1.00000000000000))*(pp)*(x3874)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x3872)))+(((IkReal(-1.00000000000000))*(x3874))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x3872)))+(((IkReal(-1.00000000000000))*(x3874)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(1.80000000000000))*((x3873)*(x3873))))+(((IkReal(1.80000000000000))*((x3872)*(x3872))))+(((IkReal(-3.60000000000000))*(x3872)*(x3873))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x3873)*(x3873))))+(((IkReal(1.80000000000000))*((x3872)*(x3872))))+(((IkReal(-3.60000000000000))*(x3872)*(x3873)))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x3872)))+(((IkReal(14.4500000000000))*(x3873)))+(((IkReal(20.0000000000000))*(pp)*(x3872)))+(((IkReal(-1.00000000000000))*(pp)*(x3874)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3876=IKsin(j1);
Atan2Value<IkReal> x3885 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3885.valid ) {
    continue;
}
IkReal x3877=x3885.value;
IkReal x3878=IKcos(j1);
IkReal x3879=IKsin(x3877);
IkReal x3880=IKcos(x3877);
IkReal x3881=((IkReal(0.0900000000000000))*(x3878));
IkReal x3882=((IkReal(1.10000000000000))*(x3876));
IkReal x3883=((py)*(x3879));
IkReal x3884=((px)*(x3880));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x3876)*(x3883)))+(((x3876)*(x3884))));
evalcond[1]=((IkReal(-0.850000000000000))*(x3878));
evalcond[2]=((((x3878)*(x3883)))+(((IkReal(-1.00000000000000))*(x3878)*(x3884))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3884)))+(x3883)+(((IkReal(0.850000000000000))*(x3876))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x3882)*(x3884)))+(((IkReal(-1.00000000000000))*(pp)))+(((x3881)*(x3884)))+(((IkReal(-1.00000000000000))*(x3881)*(x3883)))+(((IkReal(-1.00000000000000))*(x3882)*(x3883))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3891 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3891.valid ) {
    continue;
}
IkReal x3886=x3891.value;
IkReal x3887=IKcos(x3886);
IkReal x3888=IKsin(x3886);
IkReal x3889=((px)*(x3887));
IkReal x3890=((py)*(x3888));
if( IKabs(((((IkReal(1.17647058823529))*(x3889)))+(((IkReal(-1.17647058823529))*(x3890))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x3889)))+(((IkReal(-1.53000000000000))*(x3890))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x3889)))+(((IkReal(-1.53000000000000))*(x3890)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x3889)*(x3889))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x3890)*(x3890))))+(((IkReal(44.0000000000000))*(x3889)*(x3890))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x3889)))+(((IkReal(-1.17647058823529))*(x3890)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x3889)))+(((IkReal(-1.53000000000000))*(x3890))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x3889)))+(((IkReal(-1.53000000000000))*(x3890)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x3889)*(x3889))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x3890)*(x3890))))+(((IkReal(44.0000000000000))*(x3889)*(x3890)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x3889)))+(((IkReal(-1.17647058823529))*(x3890)))), ((((IKabs(((((IkReal(1.53000000000000))*(x3889)))+(((IkReal(-1.53000000000000))*(x3890))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x3889)))+(((IkReal(-1.53000000000000))*(x3890)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x3889)*(x3889))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x3890)*(x3890))))+(((IkReal(44.0000000000000))*(x3889)*(x3890)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3892=IKsin(j1);
Atan2Value<IkReal> x3901 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3901.valid ) {
    continue;
}
IkReal x3893=x3901.value;
IkReal x3894=IKcos(j1);
IkReal x3895=IKsin(x3893);
IkReal x3896=IKcos(x3893);
IkReal x3897=((IkReal(0.0900000000000000))*(x3894));
IkReal x3898=((IkReal(1.10000000000000))*(x3892));
IkReal x3899=((py)*(x3895));
IkReal x3900=((px)*(x3896));
evalcond[0]=((IkReal(-0.850000000000000))+(((x3892)*(x3900)))+(((IkReal(-1.00000000000000))*(x3892)*(x3899))));
evalcond[1]=((IkReal(-0.850000000000000))*(x3894));
evalcond[2]=((((x3894)*(x3899)))+(((IkReal(-1.00000000000000))*(x3894)*(x3900))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3900)))+(x3899)+(((IkReal(0.850000000000000))*(x3892))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3898)*(x3899)))+(((x3897)*(x3900)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x3897)*(x3899)))+(((x3898)*(x3900))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x3905 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3905.valid ) {
    continue;
}
IkReal x3902=x3905.value;
IkReal x3903=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3902))));
IkReal x3904=((((px)*(IKsin(x3903))))+(((IkReal(-1.00000000000000))*(py)*(IKcos(x3903)))));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x3902)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x3904;
evalcond[3]=x3904;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
Atan2Value<IkReal> x3907 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3907.valid ) {
    continue;
}
IkReal x3906=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3907.value))));
dummyeval[0]=((((py)*(IKsin(x3906))))+(((px)*(IKcos(x3906)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
Atan2Value<IkReal> x3913 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3913.valid ) {
    continue;
}
IkReal x3908=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3913.value))));
IkReal x3909=IKcos(x3908);
IkReal x3910=IKsin(x3908);
IkReal x3911=((px)*(x3909));
IkReal x3912=((py)*(x3910));
dummyeval[0]=((x3912)+(x3911));
dummyeval[1]=((((IkReal(2.00000000000000))*(x3911)*(x3912)))+((x3911)*(x3911))+((x3912)*(x3912)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3914=((IkReal(20.0000000000000))*(pp));
Atan2Value<IkReal> x3921 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3921.valid ) {
    continue;
}
IkReal x3915=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3921.value))));
IkReal x3916=IKcos(x3915);
IkReal x3917=IKsin(x3915);
IkReal x3918=((px)*(x3916));
IkReal x3919=((py)*(x3917));
IkReal x3920=((IkReal(20.0000000000000))*(x3918));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((x3920)+(((IkReal(20.0000000000000))*(x3919))))) != 0)?((IkReal)1/(((x3920)+(((IkReal(20.0000000000000))*(x3919)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.80000000000000))*((x3918)*(x3918))))+(((IkReal(3.60000000000000))*(x3918)*(x3919)))+(((IkReal(1.80000000000000))*((x3919)*(x3919)))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x3918)*(x3918))))+(((IkReal(3.60000000000000))*(x3918)*(x3919)))+(((IkReal(1.80000000000000))*((x3919)*(x3919))))))):(IkReal)1.0e30))*(((((x3914)*(x3918)))+(((x3914)*(x3919)))+(((IkReal(-14.4500000000000))*(x3918)))+(((IkReal(-14.4500000000000))*(x3919))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((x3920)+(((IkReal(20.0000000000000))*(x3919))))) != 0)?((IkReal)1/(((x3920)+(((IkReal(20.0000000000000))*(x3919)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(1.80000000000000))*((x3918)*(x3918))))+(((IkReal(3.60000000000000))*(x3918)*(x3919)))+(((IkReal(1.80000000000000))*((x3919)*(x3919)))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x3918)*(x3918))))+(((IkReal(3.60000000000000))*(x3918)*(x3919)))+(((IkReal(1.80000000000000))*((x3919)*(x3919))))))):(IkReal)1.0e30))*(((((x3914)*(x3918)))+(((x3914)*(x3919)))+(((IkReal(-14.4500000000000))*(x3918)))+(((IkReal(-14.4500000000000))*(x3919)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((x3920)+(((IkReal(20.0000000000000))*(x3919))))) != 0)?((IkReal)1/(((x3920)+(((IkReal(20.0000000000000))*(x3919)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(1.80000000000000))*((x3918)*(x3918))))+(((IkReal(3.60000000000000))*(x3918)*(x3919)))+(((IkReal(1.80000000000000))*((x3919)*(x3919)))))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*((x3918)*(x3918))))+(((IkReal(3.60000000000000))*(x3918)*(x3919)))+(((IkReal(1.80000000000000))*((x3919)*(x3919))))))):(IkReal)1.0e30))*(((((x3914)*(x3918)))+(((x3914)*(x3919)))+(((IkReal(-14.4500000000000))*(x3918)))+(((IkReal(-14.4500000000000))*(x3919)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3922=IKsin(j1);
IkReal x3923=IKcos(j1);
IkReal x3924=x3915;
IkReal x3925=((IkReal(1.00000000000000))*(x3923));
IkReal x3926=((IkReal(1.10000000000000))*(x3922));
IkReal x3927=((IkReal(0.0900000000000000))*(x3923));
IkReal x3928=IKsin(x3924);
IkReal x3929=IKcos(x3924);
IkReal x3930=((py)*(x3928));
IkReal x3931=((px)*(x3929));
IkReal x3932=((IkReal(1.00000000000000))*(x3930));
IkReal x3933=((x3922)*(x3930));
evalcond[0]=((IkReal(-0.850000000000000))+(((x3922)*(x3931)))+(x3933));
evalcond[1]=((IkReal(-0.850000000000000))*(x3923));
evalcond[2]=((((IkReal(-1.00000000000000))*(x3925)*(x3930)))+(((IkReal(-1.00000000000000))*(x3925)*(x3931))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3931)))+(((IkReal(0.850000000000000))*(x3922)))+(((IkReal(-1.00000000000000))*(x3932))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x3926)*(x3931)))+(((x3926)*(x3930)))+(((x3927)*(x3931)))+(((x3927)*(x3930))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x3939 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3939.valid ) {
    continue;
}
IkReal x3934=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x3939.value))));
IkReal x3935=IKsin(x3934);
IkReal x3936=IKcos(x3934);
IkReal x3937=((py)*(x3935));
IkReal x3938=((px)*(x3936));
if( IKabs(((((IkReal(1.17647058823529))*(x3938)))+(((IkReal(1.17647058823529))*(x3937))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x3938)))+(((IkReal(1.53000000000000))*(x3937))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x3938)))+(((IkReal(1.53000000000000))*(x3937)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x3938)*(x3938))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x3937)*(x3938)))+(((IkReal(-22.0000000000000))*((x3937)*(x3937)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x3938)))+(((IkReal(1.17647058823529))*(x3937)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x3938)))+(((IkReal(1.53000000000000))*(x3937))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x3938)))+(((IkReal(1.53000000000000))*(x3937)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x3938)*(x3938))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x3937)*(x3938)))+(((IkReal(-22.0000000000000))*((x3937)*(x3937))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x3938)))+(((IkReal(1.17647058823529))*(x3937)))), ((((IKabs(((((IkReal(1.53000000000000))*(x3938)))+(((IkReal(1.53000000000000))*(x3937))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x3938)))+(((IkReal(1.53000000000000))*(x3937)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x3938)*(x3938))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x3937)*(x3938)))+(((IkReal(-22.0000000000000))*((x3937)*(x3937))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3940=IKsin(j1);
IkReal x3941=IKcos(j1);
IkReal x3942=x3934;
IkReal x3943=((IkReal(1.00000000000000))*(x3941));
IkReal x3944=((IkReal(1.10000000000000))*(x3940));
IkReal x3945=((IkReal(0.0900000000000000))*(x3941));
IkReal x3946=IKsin(x3942);
IkReal x3947=IKcos(x3942);
IkReal x3948=((py)*(x3946));
IkReal x3949=((px)*(x3947));
IkReal x3950=((IkReal(1.00000000000000))*(x3948));
IkReal x3951=((x3940)*(x3948));
evalcond[0]=((IkReal(-0.850000000000000))+(((x3940)*(x3949)))+(x3951));
evalcond[1]=((IkReal(-0.850000000000000))*(x3941));
evalcond[2]=((((IkReal(-1.00000000000000))*(x3943)*(x3948)))+(((IkReal(-1.00000000000000))*(x3943)*(x3949))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x3949)))+(((IkReal(0.850000000000000))*(x3940)))+(((IkReal(-1.00000000000000))*(x3950))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x3945)*(x3948)))+(((x3945)*(x3949)))+(((x3944)*(x3949)))+(((x3944)*(x3948))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x3952=((IkReal(3.14159265358979))+(j0));
Atan2Value<IkReal> x3955 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x3955.valid ) {
    continue;
}
IkReal x3953=x3955.value;
IkReal x3954=((((IkReal(-1.00000000000000))*(py)*(IKcos(x3953))))+(((IkReal(-1.00000000000000))*(px)*(IKsin(x3953)))));
Atan2Value<IkReal> x3956 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x3956.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x3953)+(x3952)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x3952)+(x3956.value)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x3954;
evalcond[3]=x3954;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x3957=((IkReal(6.66666666666667))*(cj3));
IkReal x3958=x3953;
IkReal x3959=IKsin(x3958);
IkReal x3960=IKcos(x3958);
IkReal x3961=((px)*(x3960));
IkReal x3962=((py)*(x3959));
dummyeval[0]=((x3961)+(((IkReal(-1.00000000000000))*(x3962))));
dummyeval[1]=((((sj3)*(x3962)))+(((IkReal(-1.00000000000000))*(sj3)*(x3961)))+(((IkReal(12.2222222222222))*(x3962)))+(((x3957)*(x3962)))+(((IkReal(-12.2222222222222))*(x3961)))+(((IkReal(-1.00000000000000))*(x3957)*(x3961))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3963=((IkReal(0.0450000000000000))*(sj3));
IkReal x3964=((IkReal(0.300000000000000))*(cj3));
IkReal x3965=x3953;
IkReal x3966=IKsin(x3965);
IkReal x3967=IKcos(x3965);
IkReal x3968=((px)*(x3967));
IkReal x3969=((py)*(x3966));
if( IKabs(((((IKabs(((x3968)+(((IkReal(-1.00000000000000))*(x3969))))) != 0)?((IkReal)1/(((x3968)+(((IkReal(-1.00000000000000))*(x3969)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x3964)+(x3963))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x3963)*(x3968)))+(((IkReal(-0.550000000000000))*(x3968)))+(((IkReal(0.550000000000000))*(x3969)))+(((x3964)*(x3969)))+(((x3963)*(x3969)))+(((IkReal(-1.00000000000000))*(x3964)*(x3968))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x3963)*(x3968)))+(((IkReal(-0.550000000000000))*(x3968)))+(((IkReal(0.550000000000000))*(x3969)))+(((x3964)*(x3969)))+(((x3963)*(x3969)))+(((IkReal(-1.00000000000000))*(x3964)*(x3968)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x3968)+(((IkReal(-1.00000000000000))*(x3969))))) != 0)?((IkReal)1/(((x3968)+(((IkReal(-1.00000000000000))*(x3969)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x3964)+(x3963)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x3963)*(x3968)))+(((IkReal(-0.550000000000000))*(x3968)))+(((IkReal(0.550000000000000))*(x3969)))+(((x3964)*(x3969)))+(((x3963)*(x3969)))+(((IkReal(-1.00000000000000))*(x3964)*(x3968))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x3963)*(x3968)))+(((IkReal(-0.550000000000000))*(x3968)))+(((IkReal(0.550000000000000))*(x3969)))+(((x3964)*(x3969)))+(((x3963)*(x3969)))+(((IkReal(-1.00000000000000))*(x3964)*(x3968)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x3968)+(((IkReal(-1.00000000000000))*(x3969))))) != 0)?((IkReal)1/(((x3968)+(((IkReal(-1.00000000000000))*(x3969)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x3964)+(x3963)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x3963)*(x3968)))+(((IkReal(-0.550000000000000))*(x3968)))+(((IkReal(0.550000000000000))*(x3969)))+(((x3964)*(x3969)))+(((x3963)*(x3969)))+(((IkReal(-1.00000000000000))*(x3964)*(x3968))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x3963)*(x3968)))+(((IkReal(-0.550000000000000))*(x3968)))+(((IkReal(0.550000000000000))*(x3969)))+(((x3964)*(x3969)))+(((x3963)*(x3969)))+(((IkReal(-1.00000000000000))*(x3964)*(x3968)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3970=IKsin(j1);
IkReal x3971=IKcos(j1);
IkReal x3972=((IkReal(0.300000000000000))*(cj3));
IkReal x3973=((IkReal(0.0450000000000000))*(cj3));
IkReal x3974=((IkReal(0.300000000000000))*(sj3));
IkReal x3975=((IkReal(0.0450000000000000))*(sj3));
IkReal x3976=((IkReal(0.0450000000000000))*(x3970));
IkReal x3977=((IkReal(0.0900000000000000))*(x3971));
IkReal x3978=((IkReal(1.10000000000000))*(x3970));
IkReal x3979=x3953;
IkReal x3980=IKsin(x3979);
IkReal x3981=IKcos(x3979);
IkReal x3982=((px)*(x3981));
IkReal x3983=((py)*(x3980));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x3975)))+(((IkReal(-1.00000000000000))*(x3972)))+(((x3970)*(x3982)))+(((IkReal(-1.00000000000000))*(x3970)*(x3983))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x3971)))+(((x3970)*(x3974)))+(x3976)+(((IkReal(-1.00000000000000))*(x3970)*(x3973)))+(((IkReal(-1.00000000000000))*(x3971)*(x3972)))+(((IkReal(-1.00000000000000))*(x3971)*(x3975))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x3971)*(x3983)))+(((IkReal(-1.00000000000000))*(x3973)))+(x3974)+(((IkReal(-1.00000000000000))*(x3971)*(x3982))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x3971)))+(((IkReal(0.550000000000000))*(x3970)))+(((x3970)*(x3975)))+(((x3970)*(x3972)))+(((x3971)*(x3974)))+(x3983)+(((IkReal(-1.00000000000000))*(x3971)*(x3973)))+(((IkReal(-1.00000000000000))*(x3982))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x3977)*(x3983)))+(((x3977)*(x3982)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x3978)*(x3983)))+(((x3978)*(x3982))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3984=((IkReal(0.300000000000000))*(sj3));
IkReal x3985=((IkReal(0.300000000000000))*(cj3));
IkReal x3986=x3953;
IkReal x3987=IKcos(x3986);
IkReal x3988=IKsin(x3986);
IkReal x3989=((px)*(x3987));
IkReal x3990=((py)*(x3988));
IkReal x3991=((IkReal(0.0450000000000000))*(x3990));
Atan2Value<IkReal> x3992 = IKatan2WithCheck(((gconst57)*(((((x3985)*(x3989)))+(((IkReal(-1.00000000000000))*(x3985)*(x3990)))+(((IkReal(0.550000000000000))*(x3989)))+(((IkReal(0.0450000000000000))*(sj3)*(x3989)))+(((IkReal(-0.550000000000000))*(x3990)))+(((IkReal(-1.00000000000000))*(sj3)*(x3991)))))),((gconst57)*(((((x3984)*(x3989)))+(((IkReal(-1.00000000000000))*(x3991)))+(((IkReal(0.0450000000000000))*(x3989)))+(((IkReal(-1.00000000000000))*(x3984)*(x3990)))+(((cj3)*(x3991)))+(((IkReal(-0.0450000000000000))*(cj3)*(x3989)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x3992.valid ) {
    continue;
}
j1array[0]=x3992.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3993=IKsin(j1);
IkReal x3994=IKcos(j1);
IkReal x3995=((IkReal(0.300000000000000))*(cj3));
IkReal x3996=((IkReal(0.0450000000000000))*(cj3));
IkReal x3997=((IkReal(0.300000000000000))*(sj3));
IkReal x3998=((IkReal(0.0450000000000000))*(sj3));
IkReal x3999=((IkReal(0.0450000000000000))*(x3993));
IkReal x4000=((IkReal(0.0900000000000000))*(x3994));
IkReal x4001=((IkReal(1.10000000000000))*(x3993));
IkReal x4002=x3953;
IkReal x4003=IKsin(x4002);
IkReal x4004=IKcos(x4002);
IkReal x4005=((px)*(x4004));
IkReal x4006=((py)*(x4003));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x3995)))+(((IkReal(-1.00000000000000))*(x3998)))+(((IkReal(-1.00000000000000))*(x3993)*(x4006)))+(((x3993)*(x4005))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x3993)*(x3996)))+(x3999)+(((x3993)*(x3997)))+(((IkReal(-0.550000000000000))*(x3994)))+(((IkReal(-1.00000000000000))*(x3994)*(x3998)))+(((IkReal(-1.00000000000000))*(x3994)*(x3995))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x3996)))+(((IkReal(-1.00000000000000))*(x3994)*(x4005)))+(x3997)+(((x3994)*(x4006))));
evalcond[3]=((((x3994)*(x3997)))+(((IkReal(0.550000000000000))*(x3993)))+(((IkReal(-1.00000000000000))*(x4005)))+(x4006)+(((IkReal(0.0450000000000000))*(x3994)))+(((x3993)*(x3998)))+(((x3993)*(x3995)))+(((IkReal(-1.00000000000000))*(x3994)*(x3996))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x4001)*(x4005)))+(((x4000)*(x4005)))+(((IkReal(-1.00000000000000))*(x4001)*(x4006)))+(((IkReal(-1.00000000000000))*(x4000)*(x4006)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4009 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4009.valid ) {
    continue;
}
IkReal x4007=x4009.value;
IkReal x4008=((((IkReal(-1.00000000000000))*(px)*(IKsin(x4007))))+(((IkReal(-1.00000000000000))*(py)*(IKcos(x4007)))));
Atan2Value<IkReal> x4010 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4010.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x4010.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x4007)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x4008;
evalcond[3]=x4008;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst58;
gconst58=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4011=((IkReal(6.66666666666667))*(cj3));
IkReal x4012=x4007;
IkReal x4013=IKsin(x4012);
IkReal x4014=IKcos(x4012);
IkReal x4015=((px)*(x4014));
IkReal x4016=((py)*(x4013));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x4016)))+(x4015));
dummyeval[1]=((((IkReal(-12.2222222222222))*(x4015)))+(((IkReal(-1.00000000000000))*(x4011)*(x4015)))+(((IkReal(12.2222222222222))*(x4016)))+(((x4011)*(x4016)))+(((IkReal(-1.00000000000000))*(sj3)*(x4015)))+(((sj3)*(x4016))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4017=((IkReal(0.0450000000000000))*(sj3));
IkReal x4018=((IkReal(0.300000000000000))*(cj3));
IkReal x4019=x4007;
IkReal x4020=IKsin(x4019);
IkReal x4021=IKcos(x4019);
IkReal x4022=((px)*(x4021));
IkReal x4023=((py)*(x4020));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x4023)))+(x4022))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4023)))+(x4022)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4018)+(x4017))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x4017)*(x4023)))+(((IkReal(-1.00000000000000))*(x4018)*(x4022)))+(((IkReal(0.550000000000000))*(x4023)))+(((x4018)*(x4023)))+(((IkReal(-0.550000000000000))*(x4022)))+(((IkReal(-1.00000000000000))*(x4017)*(x4022))))) != 0)?((IkReal)1/(((((x4017)*(x4023)))+(((IkReal(-1.00000000000000))*(x4018)*(x4022)))+(((IkReal(0.550000000000000))*(x4023)))+(((x4018)*(x4023)))+(((IkReal(-0.550000000000000))*(x4022)))+(((IkReal(-1.00000000000000))*(x4017)*(x4022)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x4023)))+(x4022))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4023)))+(x4022)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4018)+(x4017)))))+IKsqr(((((IKabs(((((x4017)*(x4023)))+(((IkReal(-1.00000000000000))*(x4018)*(x4022)))+(((IkReal(0.550000000000000))*(x4023)))+(((x4018)*(x4023)))+(((IkReal(-0.550000000000000))*(x4022)))+(((IkReal(-1.00000000000000))*(x4017)*(x4022))))) != 0)?((IkReal)1/(((((x4017)*(x4023)))+(((IkReal(-1.00000000000000))*(x4018)*(x4022)))+(((IkReal(0.550000000000000))*(x4023)))+(((x4018)*(x4023)))+(((IkReal(-0.550000000000000))*(x4022)))+(((IkReal(-1.00000000000000))*(x4017)*(x4022)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x4023)))+(x4022))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4023)))+(x4022)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4018)+(x4017)))), ((((IKabs(((((x4017)*(x4023)))+(((IkReal(-1.00000000000000))*(x4018)*(x4022)))+(((IkReal(0.550000000000000))*(x4023)))+(((x4018)*(x4023)))+(((IkReal(-0.550000000000000))*(x4022)))+(((IkReal(-1.00000000000000))*(x4017)*(x4022))))) != 0)?((IkReal)1/(((((x4017)*(x4023)))+(((IkReal(-1.00000000000000))*(x4018)*(x4022)))+(((IkReal(0.550000000000000))*(x4023)))+(((x4018)*(x4023)))+(((IkReal(-0.550000000000000))*(x4022)))+(((IkReal(-1.00000000000000))*(x4017)*(x4022)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4024=IKsin(j1);
IkReal x4025=IKcos(j1);
IkReal x4026=((IkReal(0.300000000000000))*(cj3));
IkReal x4027=((IkReal(0.0450000000000000))*(cj3));
IkReal x4028=((IkReal(0.300000000000000))*(sj3));
IkReal x4029=((IkReal(0.0450000000000000))*(sj3));
IkReal x4030=((IkReal(0.0450000000000000))*(x4024));
IkReal x4031=((IkReal(0.0900000000000000))*(x4025));
IkReal x4032=((IkReal(1.10000000000000))*(x4024));
IkReal x4033=x4007;
IkReal x4034=IKsin(x4033);
IkReal x4035=IKcos(x4033);
IkReal x4036=((px)*(x4035));
IkReal x4037=((py)*(x4034));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4029)))+(((IkReal(-1.00000000000000))*(x4026)))+(((IkReal(-1.00000000000000))*(x4024)*(x4037)))+(((x4024)*(x4036))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4024)*(x4027)))+(((IkReal(-1.00000000000000))*(x4025)*(x4026)))+(((IkReal(-1.00000000000000))*(x4025)*(x4029)))+(x4030)+(((IkReal(-0.550000000000000))*(x4025)))+(((x4024)*(x4028))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4025)*(x4036)))+(((IkReal(-1.00000000000000))*(x4027)))+(x4028)+(((x4025)*(x4037))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4025)*(x4027)))+(((IkReal(0.0450000000000000))*(x4025)))+(((IkReal(0.550000000000000))*(x4024)))+(x4037)+(((x4025)*(x4028)))+(((x4024)*(x4026)))+(((x4024)*(x4029)))+(((IkReal(-1.00000000000000))*(x4036))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x4032)*(x4036)))+(((IkReal(-1.00000000000000))*(x4031)*(x4037)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x4032)*(x4037)))+(((x4031)*(x4036))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4038=((IkReal(0.300000000000000))*(sj3));
IkReal x4039=((IkReal(0.300000000000000))*(cj3));
IkReal x4040=x4007;
IkReal x4041=IKcos(x4040);
IkReal x4042=IKsin(x4040);
IkReal x4043=((px)*(x4041));
IkReal x4044=((py)*(x4042));
IkReal x4045=((IkReal(0.0450000000000000))*(x4044));
Atan2Value<IkReal> x4046 = IKatan2WithCheck(((gconst58)*(((((IkReal(-1.00000000000000))*(sj3)*(x4045)))+(((IkReal(-1.00000000000000))*(x4039)*(x4044)))+(((x4039)*(x4043)))+(((IkReal(0.0450000000000000))*(sj3)*(x4043)))+(((IkReal(0.550000000000000))*(x4043)))+(((IkReal(-0.550000000000000))*(x4044)))))),((gconst58)*(((((cj3)*(x4045)))+(((x4038)*(x4043)))+(((IkReal(-1.00000000000000))*(x4045)))+(((IkReal(0.0450000000000000))*(x4043)))+(((IkReal(-1.00000000000000))*(x4038)*(x4044)))+(((IkReal(-0.0450000000000000))*(cj3)*(x4043)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x4046.valid ) {
    continue;
}
j1array[0]=x4046.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4047=IKsin(j1);
IkReal x4048=IKcos(j1);
IkReal x4049=((IkReal(0.300000000000000))*(cj3));
IkReal x4050=((IkReal(0.0450000000000000))*(cj3));
IkReal x4051=((IkReal(0.300000000000000))*(sj3));
IkReal x4052=((IkReal(0.0450000000000000))*(sj3));
IkReal x4053=((IkReal(0.0450000000000000))*(x4047));
IkReal x4054=((IkReal(0.0900000000000000))*(x4048));
IkReal x4055=((IkReal(1.10000000000000))*(x4047));
IkReal x4056=x4007;
IkReal x4057=IKsin(x4056);
IkReal x4058=IKcos(x4056);
IkReal x4059=((px)*(x4058));
IkReal x4060=((py)*(x4057));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4047)*(x4060)))+(((IkReal(-1.00000000000000))*(x4052)))+(((x4047)*(x4059)))+(((IkReal(-1.00000000000000))*(x4049))));
evalcond[1]=((x4053)+(((IkReal(-1.00000000000000))*(x4047)*(x4050)))+(((IkReal(-0.550000000000000))*(x4048)))+(((x4047)*(x4051)))+(((IkReal(-1.00000000000000))*(x4048)*(x4052)))+(((IkReal(-1.00000000000000))*(x4048)*(x4049))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x4048)*(x4060)))+(x4051)+(((IkReal(-1.00000000000000))*(x4050)))+(((IkReal(-1.00000000000000))*(x4048)*(x4059))));
evalcond[3]=((((x4048)*(x4051)))+(x4060)+(((IkReal(0.550000000000000))*(x4047)))+(((IkReal(-1.00000000000000))*(x4059)))+(((x4047)*(x4052)))+(((IkReal(0.0450000000000000))*(x4048)))+(((IkReal(-1.00000000000000))*(x4048)*(x4050)))+(((x4047)*(x4049))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4055)*(x4060)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4054)*(x4059)))+(((IkReal(-1.00000000000000))*(x4054)*(x4060)))+(((x4055)*(x4059))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4064 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4064.valid ) {
    continue;
}
IkReal x4061=x4064.value;
IkReal x4062=((IkReal(-3.14159265000000))+(x4061));
IkReal x4063=((((IkReal(-1.00000000000000))*(px)*(IKsin(x4062))))+(((IkReal(-1.00000000000000))*(py)*(IKcos(x4062)))));
Atan2Value<IkReal> x4065 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4065.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x4065.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x4061)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x4063;
evalcond[3]=x4063;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst59;
gconst59=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4066=((IkReal(6.66666666666667))*(cj3));
Atan2Value<IkReal> x4072 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4072.valid ) {
    continue;
}
IkReal x4067=((IkReal(-3.14159265000000))+(x4072.value));
IkReal x4068=IKsin(x4067);
IkReal x4069=IKcos(x4067);
IkReal x4070=((py)*(x4068));
IkReal x4071=((px)*(x4069));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x4070)))+(x4071));
dummyeval[1]=((((IkReal(12.2222222222222))*(x4070)))+(((sj3)*(x4070)))+(((x4066)*(x4070)))+(((IkReal(-1.00000000000000))*(x4066)*(x4071)))+(((IkReal(-12.2222222222222))*(x4071)))+(((IkReal(-1.00000000000000))*(sj3)*(x4071))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4073=((IkReal(6.66666666666667))*(sj3));
Atan2Value<IkReal> x4080 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4080.valid ) {
    continue;
}
IkReal x4074=((IkReal(-3.14159265000000))+(x4080.value));
IkReal x4075=IKsin(x4074);
IkReal x4076=IKcos(x4074);
IkReal x4077=((py)*(x4075));
IkReal x4078=((px)*(x4076));
IkReal x4079=((IkReal(1.00000000000000))*(x4078));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(x4077)))+(((IkReal(-1.00000000000000))*(x4079)))+(x4077)+(((x4073)*(x4077)))+(((cj3)*(x4078)))+(((IkReal(-1.00000000000000))*(x4073)*(x4078))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x4079)))+(x4077));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
Atan2Value<IkReal> x4083 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4083.valid ) {
    continue;
}
IkReal x4081=((IkReal(-3.14159265000000))+(x4083.value));
IkReal x4082=((((IkReal(-1.00000000000000))*(py)*(IKcos(x4081))))+(((IkReal(-1.00000000000000))*(px)*(IKsin(x4081)))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4082;
evalcond[3]=x4082;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x4084=x4081;
dummyeval[0]=((((px)*(IKcos(x4084))))+(((IkReal(-1.00000000000000))*(py)*(IKsin(x4084)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4085=(py)*(py);
IkReal x4086=x4081;
IkReal x4087=IKcos(x4086);
IkReal x4088=IKsin(x4086);
IkReal x4089=(x4087)*(x4087);
IkReal x4090=((py)*(x4088));
IkReal x4091=((px)*(x4087));
dummyeval[0]=((x4091)+(((IkReal(-1.00000000000000))*(x4090))));
dummyeval[1]=((((x4089)*((px)*(px))))+(((IkReal(-2.00000000000000))*(x4090)*(x4091)))+(x4085)+(((IkReal(-1.00000000000000))*(x4085)*(x4089))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4092=(py)*(py);
IkReal x4093=((IkReal(1.80000000000000))*(x4092));
IkReal x4094=x4081;
IkReal x4095=IKsin(x4094);
IkReal x4096=IKcos(x4094);
IkReal x4097=(x4096)*(x4096);
IkReal x4098=((px)*(x4096));
IkReal x4099=((py)*(x4095));
IkReal x4100=((IkReal(20.0000000000000))*(x4099));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x4098)))+(((IkReal(-1.00000000000000))*(x4100))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x4098)))+(((IkReal(-1.00000000000000))*(x4100)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-3.60000000000000))*(x4098)*(x4099)))+(((IkReal(1.80000000000000))*(x4097)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4093)*(x4097)))+(x4093))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x4098)*(x4099)))+(((IkReal(1.80000000000000))*(x4097)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4093)*(x4097)))+(x4093)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pp)*(x4100)))+(((IkReal(-14.4500000000000))*(x4098)))+(((IkReal(14.4500000000000))*(x4099)))+(((IkReal(20.0000000000000))*(pp)*(x4098))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x4098)))+(((IkReal(-1.00000000000000))*(x4100))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x4098)))+(((IkReal(-1.00000000000000))*(x4100)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(-3.60000000000000))*(x4098)*(x4099)))+(((IkReal(1.80000000000000))*(x4097)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4093)*(x4097)))+(x4093))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x4098)*(x4099)))+(((IkReal(1.80000000000000))*(x4097)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4093)*(x4097)))+(x4093)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pp)*(x4100)))+(((IkReal(-14.4500000000000))*(x4098)))+(((IkReal(14.4500000000000))*(x4099)))+(((IkReal(20.0000000000000))*(pp)*(x4098)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x4098)))+(((IkReal(-1.00000000000000))*(x4100))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x4098)))+(((IkReal(-1.00000000000000))*(x4100)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(-3.60000000000000))*(x4098)*(x4099)))+(((IkReal(1.80000000000000))*(x4097)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4093)*(x4097)))+(x4093))) != 0)?((IkReal)1/(((((IkReal(-3.60000000000000))*(x4098)*(x4099)))+(((IkReal(1.80000000000000))*(x4097)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4093)*(x4097)))+(x4093)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pp)*(x4100)))+(((IkReal(-14.4500000000000))*(x4098)))+(((IkReal(14.4500000000000))*(x4099)))+(((IkReal(20.0000000000000))*(pp)*(x4098)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4101=IKsin(j1);
IkReal x4102=IKcos(j1);
IkReal x4103=((IkReal(1.10000000000000))*(x4101));
IkReal x4104=((IkReal(0.0900000000000000))*(x4102));
IkReal x4105=x4081;
IkReal x4106=IKsin(x4105);
IkReal x4107=IKcos(x4105);
IkReal x4108=((py)*(x4106));
IkReal x4109=((px)*(x4107));
IkReal x4110=((IkReal(1.00000000000000))*(x4109));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x4101)*(x4108)))+(((x4101)*(x4109))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4102));
evalcond[2]=((((IkReal(-1.00000000000000))*(x4102)*(x4110)))+(((x4102)*(x4108))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4110)))+(x4108)+(((IkReal(0.850000000000000))*(x4101))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4104)*(x4108)))+(((x4103)*(x4109)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4104)*(x4109)))+(((IkReal(-1.00000000000000))*(x4103)*(x4108))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4111=x4081;
IkReal x4112=IKcos(x4111);
IkReal x4113=IKsin(x4111);
IkReal x4114=((py)*(x4113));
IkReal x4115=((px)*(x4112));
if( IKabs(((((IkReal(-1.17647058823529))*(x4114)))+(((IkReal(1.17647058823529))*(x4115))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x4115)))+(((IkReal(-1.53000000000000))*(x4114))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x4115)))+(((IkReal(-1.53000000000000))*(x4114)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x4115)*(x4115))))+(((IkReal(-22.0000000000000))*((x4114)*(x4114))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(44.0000000000000))*(x4114)*(x4115))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.17647058823529))*(x4114)))+(((IkReal(1.17647058823529))*(x4115)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x4115)))+(((IkReal(-1.53000000000000))*(x4114))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x4115)))+(((IkReal(-1.53000000000000))*(x4114)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x4115)*(x4115))))+(((IkReal(-22.0000000000000))*((x4114)*(x4114))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(44.0000000000000))*(x4114)*(x4115)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(-1.17647058823529))*(x4114)))+(((IkReal(1.17647058823529))*(x4115)))), ((((IKabs(((((IkReal(1.53000000000000))*(x4115)))+(((IkReal(-1.53000000000000))*(x4114))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x4115)))+(((IkReal(-1.53000000000000))*(x4114)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x4115)*(x4115))))+(((IkReal(-22.0000000000000))*((x4114)*(x4114))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(44.0000000000000))*(x4114)*(x4115)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4116=IKsin(j1);
IkReal x4117=IKcos(j1);
IkReal x4118=((IkReal(1.10000000000000))*(x4116));
IkReal x4119=((IkReal(0.0900000000000000))*(x4117));
IkReal x4120=x4081;
IkReal x4121=IKsin(x4120);
IkReal x4122=IKcos(x4120);
IkReal x4123=((py)*(x4121));
IkReal x4124=((px)*(x4122));
IkReal x4125=((IkReal(1.00000000000000))*(x4124));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x4116)*(x4123)))+(((x4116)*(x4124))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4117));
evalcond[2]=((((x4117)*(x4123)))+(((IkReal(-1.00000000000000))*(x4117)*(x4125))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4125)))+(x4123)+(((IkReal(0.850000000000000))*(x4116))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4119)*(x4123)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4118)*(x4124)))+(((IkReal(-1.00000000000000))*(x4118)*(x4123)))+(((x4119)*(x4124))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x4126=((IkReal(-1.00000000000000))*(py));
Atan2Value<IkReal> x4128 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4128.valid ) {
    continue;
}
IkReal x4127=((x4126)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4128.value)))))));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4127;
evalcond[3]=x4127;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4129 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4129.valid ) {
    continue;
}
dummyeval[1]=((IkReal(-1.00000000000000))*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4129.value)))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4130 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4130.valid ) {
    continue;
}
dummyeval[1]=((IkReal(-1.00000000000000))*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4130.value)))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4133 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4133.valid ) {
    continue;
}
IkReal x4131=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4133.value)))));
IkReal x4132=((py)*(x4131));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4131) != 0)?((IkReal)1/(x4131)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4131) != 0)?((IkReal)1/((x4131)*(x4131))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4132)))+(((IkReal(20.0000000000000))*(pp)*(x4132))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4131) != 0)?((IkReal)1/(x4131)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4131) != 0)?((IkReal)1/((x4131)*(x4131))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4132)))+(((IkReal(20.0000000000000))*(pp)*(x4132)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4131) != 0)?((IkReal)1/(x4131)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4131) != 0)?((IkReal)1/((x4131)*(x4131))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4132)))+(((IkReal(20.0000000000000))*(pp)*(x4132)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4134=IKcos(j1);
IkReal x4135=IKsin(j1);
IkReal x4136=x4131;
IkReal x4137=((py)*(x4136));
IkReal x4138=((x4134)*(x4137));
IkReal x4139=((x4135)*(x4137));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(1.00000000000000))*(x4139))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4134));
evalcond[2]=((IkReal(-1.00000000000000))*(x4138));
evalcond[3]=((((IkReal(0.850000000000000))*(x4135)))+(((IkReal(-1.00000000000000))*(x4137))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x4138)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4139))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4141 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4141.valid ) {
    continue;
}
IkReal x4140=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4141.value)))));
if( IKabs(((IkReal(1.17647058823529))*(py)*(x4140))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4140) != 0)?((IkReal)1/(x4140)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4140)*(x4140)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(x4140)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4140) != 0)?((IkReal)1/(x4140)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4140)*(x4140))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(x4140)), ((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4140) != 0)?((IkReal)1/(x4140)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4140)*(x4140))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4142=IKcos(j1);
IkReal x4143=IKsin(j1);
IkReal x4144=x4140;
IkReal x4145=((py)*(x4144));
IkReal x4146=((x4142)*(x4145));
IkReal x4147=((x4143)*(x4145));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(1.00000000000000))*(x4147))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4142));
evalcond[2]=((IkReal(-1.00000000000000))*(x4146));
evalcond[3]=((((IkReal(0.850000000000000))*(x4143)))+(((IkReal(-1.00000000000000))*(x4145))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x4146)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4147))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4149 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4149.valid ) {
    continue;
}
IkReal x4148=((px)*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4149.value)))))));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4148;
evalcond[3]=x4148;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4150 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4150.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4150.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4151 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4151.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4151.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4154 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4154.valid ) {
    continue;
}
IkReal x4152=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4154.value)))));
IkReal x4153=((px)*(x4152));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4152) != 0)?((IkReal)1/(x4152)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4152) != 0)?((IkReal)1/((x4152)*(x4152))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4153)))+(((IkReal(20.0000000000000))*(pp)*(x4153))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4152) != 0)?((IkReal)1/(x4152)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4152) != 0)?((IkReal)1/((x4152)*(x4152))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4153)))+(((IkReal(20.0000000000000))*(pp)*(x4153)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4152) != 0)?((IkReal)1/(x4152)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4152) != 0)?((IkReal)1/((x4152)*(x4152))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4153)))+(((IkReal(20.0000000000000))*(pp)*(x4153)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4155=IKcos(j1);
IkReal x4156=IKsin(j1);
IkReal x4157=((IkReal(-1.00000000000000))*(px));
IkReal x4158=x4152;
IkReal x4159=((px)*(x4158));
IkReal x4160=((x4155)*(x4159));
IkReal x4161=((x4156)*(x4159));
evalcond[0]=((IkReal(-0.850000000000000))+(x4161));
evalcond[1]=((IkReal(-0.850000000000000))*(x4155));
Atan2Value<IkReal> x4162 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4162.valid ) {
    continue;
}
evalcond[2]=((x4155)*(x4157)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4162.value)))))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4159)))+(((IkReal(0.850000000000000))*(x4156))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x4160)))+(((IkReal(1.10000000000000))*(x4161)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4164 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4164.valid ) {
    continue;
}
IkReal x4163=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4164.value)))));
if( IKabs(((IkReal(1.17647058823529))*(px)*(x4163))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4163) != 0)?((IkReal)1/(x4163)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4163)*(x4163)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x4163)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4163) != 0)?((IkReal)1/(x4163)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4163)*(x4163))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x4163)), ((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4163) != 0)?((IkReal)1/(x4163)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4163)*(x4163))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4165=IKcos(j1);
IkReal x4166=IKsin(j1);
IkReal x4167=((IkReal(-1.00000000000000))*(px));
IkReal x4168=x4163;
IkReal x4169=((px)*(x4168));
IkReal x4170=((x4165)*(x4169));
IkReal x4171=((x4166)*(x4169));
evalcond[0]=((IkReal(-0.850000000000000))+(x4171));
evalcond[1]=((IkReal(-0.850000000000000))*(x4165));
Atan2Value<IkReal> x4172 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4172.valid ) {
    continue;
}
evalcond[2]=((x4165)*(x4167)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4172.value)))))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4169)))+(((IkReal(0.850000000000000))*(x4166))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x4170)))+(((IkReal(1.10000000000000))*(x4171))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4173=((IkReal(0.300000000000000))*(sj3));
IkReal x4174=((IkReal(0.0450000000000000))*(cj3));
Atan2Value<IkReal> x4181 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4181.valid ) {
    continue;
}
IkReal x4175=((IkReal(-3.14159265000000))+(x4181.value));
IkReal x4176=IKsin(x4175);
IkReal x4177=IKcos(x4175);
IkReal x4178=((px)*(x4177));
IkReal x4179=((py)*(x4176));
IkReal x4180=((IkReal(0.0450000000000000))*(x4178));
if( IKabs(((((IKabs(((((x4173)*(x4179)))+(((IkReal(-1.00000000000000))*(x4180)))+(((IkReal(-1.00000000000000))*(x4174)*(x4179)))+(((IkReal(0.0450000000000000))*(x4179)))+(((IkReal(-1.00000000000000))*(x4173)*(x4178)))+(((x4174)*(x4178))))) != 0)?((IkReal)1/(((((x4173)*(x4179)))+(((IkReal(-1.00000000000000))*(x4180)))+(((IkReal(-1.00000000000000))*(x4174)*(x4179)))+(((IkReal(0.0450000000000000))*(x4179)))+(((IkReal(-1.00000000000000))*(x4173)*(x4178)))+(((x4174)*(x4178)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x4178)))+(x4179))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4178)))+(x4179)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4173)))+(x4174))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x4173)*(x4179)))+(((IkReal(-1.00000000000000))*(x4180)))+(((IkReal(-1.00000000000000))*(x4174)*(x4179)))+(((IkReal(0.0450000000000000))*(x4179)))+(((IkReal(-1.00000000000000))*(x4173)*(x4178)))+(((x4174)*(x4178))))) != 0)?((IkReal)1/(((((x4173)*(x4179)))+(((IkReal(-1.00000000000000))*(x4180)))+(((IkReal(-1.00000000000000))*(x4174)*(x4179)))+(((IkReal(0.0450000000000000))*(x4179)))+(((IkReal(-1.00000000000000))*(x4173)*(x4178)))+(((x4174)*(x4178)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x4178)))+(x4179))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4178)))+(x4179)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4173)))+(x4174)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((x4173)*(x4179)))+(((IkReal(-1.00000000000000))*(x4180)))+(((IkReal(-1.00000000000000))*(x4174)*(x4179)))+(((IkReal(0.0450000000000000))*(x4179)))+(((IkReal(-1.00000000000000))*(x4173)*(x4178)))+(((x4174)*(x4178))))) != 0)?((IkReal)1/(((((x4173)*(x4179)))+(((IkReal(-1.00000000000000))*(x4180)))+(((IkReal(-1.00000000000000))*(x4174)*(x4179)))+(((IkReal(0.0450000000000000))*(x4179)))+(((IkReal(-1.00000000000000))*(x4173)*(x4178)))+(((x4174)*(x4178)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x4178)))+(x4179))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4178)))+(x4179)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4173)))+(x4174)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4182=IKsin(j1);
IkReal x4183=IKcos(j1);
IkReal x4184=((IkReal(0.300000000000000))*(cj3));
IkReal x4185=((IkReal(0.0450000000000000))*(cj3));
IkReal x4186=((IkReal(0.0450000000000000))*(sj3));
IkReal x4187=((IkReal(0.300000000000000))*(sj3));
IkReal x4188=((IkReal(0.0450000000000000))*(x4182));
IkReal x4189=((IkReal(0.0900000000000000))*(x4183));
IkReal x4190=((IkReal(1.10000000000000))*(x4182));
IkReal x4191=x4175;
IkReal x4192=IKsin(x4191);
IkReal x4193=IKcos(x4191);
IkReal x4194=((px)*(x4193));
IkReal x4195=((py)*(x4192));
IkReal x4196=((IkReal(1.00000000000000))*(x4194));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4186)))+(((IkReal(-1.00000000000000))*(x4184)))+(((x4182)*(x4194)))+(((IkReal(-1.00000000000000))*(x4182)*(x4195))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4183)*(x4186)))+(((IkReal(-1.00000000000000))*(x4183)*(x4184)))+(x4188)+(((x4182)*(x4187)))+(((IkReal(-1.00000000000000))*(x4182)*(x4185)))+(((IkReal(-0.550000000000000))*(x4183))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4185)))+(x4187)+(((x4183)*(x4195)))+(((IkReal(-1.00000000000000))*(x4183)*(x4196))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4183)*(x4185)))+(((IkReal(-1.00000000000000))*(x4196)))+(((IkReal(0.550000000000000))*(x4182)))+(((IkReal(0.0450000000000000))*(x4183)))+(((x4183)*(x4187)))+(x4195)+(((x4182)*(x4184)))+(((x4182)*(x4186))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x4190)*(x4194)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4189)*(x4194)))+(((IkReal(-1.00000000000000))*(x4189)*(x4195)))+(((IkReal(-1.00000000000000))*(x4190)*(x4195))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4197=((IkReal(0.0450000000000000))*(sj3));
IkReal x4198=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x4204 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4204.valid ) {
    continue;
}
IkReal x4199=((IkReal(-3.14159265000000))+(x4204.value));
IkReal x4200=IKsin(x4199);
IkReal x4201=IKcos(x4199);
IkReal x4202=((py)*(x4200));
IkReal x4203=((px)*(x4201));
if( IKabs(((((IKabs(((x4203)+(((IkReal(-1.00000000000000))*(x4202))))) != 0)?((IkReal)1/(((x4203)+(((IkReal(-1.00000000000000))*(x4202)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4198)+(x4197))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x4198)*(x4202)))+(((IkReal(-1.00000000000000))*(x4197)*(x4203)))+(((IkReal(0.550000000000000))*(x4202)))+(((IkReal(-1.00000000000000))*(x4198)*(x4203)))+(((IkReal(-0.550000000000000))*(x4203)))+(((x4197)*(x4202))))) != 0)?((IkReal)1/(((((x4198)*(x4202)))+(((IkReal(-1.00000000000000))*(x4197)*(x4203)))+(((IkReal(0.550000000000000))*(x4202)))+(((IkReal(-1.00000000000000))*(x4198)*(x4203)))+(((IkReal(-0.550000000000000))*(x4203)))+(((x4197)*(x4202)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x4203)+(((IkReal(-1.00000000000000))*(x4202))))) != 0)?((IkReal)1/(((x4203)+(((IkReal(-1.00000000000000))*(x4202)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4198)+(x4197)))))+IKsqr(((((IKabs(((((x4198)*(x4202)))+(((IkReal(-1.00000000000000))*(x4197)*(x4203)))+(((IkReal(0.550000000000000))*(x4202)))+(((IkReal(-1.00000000000000))*(x4198)*(x4203)))+(((IkReal(-0.550000000000000))*(x4203)))+(((x4197)*(x4202))))) != 0)?((IkReal)1/(((((x4198)*(x4202)))+(((IkReal(-1.00000000000000))*(x4197)*(x4203)))+(((IkReal(0.550000000000000))*(x4202)))+(((IkReal(-1.00000000000000))*(x4198)*(x4203)))+(((IkReal(-0.550000000000000))*(x4203)))+(((x4197)*(x4202)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x4203)+(((IkReal(-1.00000000000000))*(x4202))))) != 0)?((IkReal)1/(((x4203)+(((IkReal(-1.00000000000000))*(x4202)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4198)+(x4197)))), ((((IKabs(((((x4198)*(x4202)))+(((IkReal(-1.00000000000000))*(x4197)*(x4203)))+(((IkReal(0.550000000000000))*(x4202)))+(((IkReal(-1.00000000000000))*(x4198)*(x4203)))+(((IkReal(-0.550000000000000))*(x4203)))+(((x4197)*(x4202))))) != 0)?((IkReal)1/(((((x4198)*(x4202)))+(((IkReal(-1.00000000000000))*(x4197)*(x4203)))+(((IkReal(0.550000000000000))*(x4202)))+(((IkReal(-1.00000000000000))*(x4198)*(x4203)))+(((IkReal(-0.550000000000000))*(x4203)))+(((x4197)*(x4202)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4205=IKsin(j1);
IkReal x4206=IKcos(j1);
IkReal x4207=((IkReal(0.300000000000000))*(cj3));
IkReal x4208=((IkReal(0.0450000000000000))*(cj3));
IkReal x4209=((IkReal(0.0450000000000000))*(sj3));
IkReal x4210=((IkReal(0.300000000000000))*(sj3));
IkReal x4211=((IkReal(0.0450000000000000))*(x4205));
IkReal x4212=((IkReal(0.0900000000000000))*(x4206));
IkReal x4213=((IkReal(1.10000000000000))*(x4205));
IkReal x4214=x4199;
IkReal x4215=IKsin(x4214);
IkReal x4216=IKcos(x4214);
IkReal x4217=((px)*(x4216));
IkReal x4218=((py)*(x4215));
IkReal x4219=((IkReal(1.00000000000000))*(x4217));
evalcond[0]=((IkReal(-0.550000000000000))+(((x4205)*(x4217)))+(((IkReal(-1.00000000000000))*(x4209)))+(((IkReal(-1.00000000000000))*(x4207)))+(((IkReal(-1.00000000000000))*(x4205)*(x4218))));
evalcond[1]=((((x4205)*(x4210)))+(((IkReal(-1.00000000000000))*(x4206)*(x4209)))+(((IkReal(-1.00000000000000))*(x4206)*(x4207)))+(((IkReal(-0.550000000000000))*(x4206)))+(x4211)+(((IkReal(-1.00000000000000))*(x4205)*(x4208))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4208)))+(((x4206)*(x4218)))+(((IkReal(-1.00000000000000))*(x4206)*(x4219)))+(x4210));
evalcond[3]=((((IkReal(0.550000000000000))*(x4205)))+(((IkReal(-1.00000000000000))*(x4206)*(x4208)))+(((x4205)*(x4207)))+(((x4205)*(x4209)))+(((x4206)*(x4210)))+(x4218)+(((IkReal(0.0450000000000000))*(x4206)))+(((IkReal(-1.00000000000000))*(x4219))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4213)*(x4218)))+(((IkReal(-1.00000000000000))*(x4212)*(x4218)))+(((x4213)*(x4217)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4212)*(x4217))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4220=((IkReal(0.0450000000000000))*(cj3));
IkReal x4221=((IkReal(0.300000000000000))*(cj3));
IkReal x4222=((IkReal(0.0450000000000000))*(sj3));
IkReal x4223=((IkReal(0.300000000000000))*(sj3));
Atan2Value<IkReal> x4229 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4229.valid ) {
    continue;
}
IkReal x4224=((IkReal(-3.14159265000000))+(x4229.value));
IkReal x4225=IKcos(x4224);
IkReal x4226=IKsin(x4224);
IkReal x4227=((px)*(x4225));
IkReal x4228=((py)*(x4226));
Atan2Value<IkReal> x4230 = IKatan2WithCheck(((gconst59)*(((((IkReal(0.550000000000000))*(x4227)))+(((IkReal(-1.00000000000000))*(x4222)*(x4228)))+(((IkReal(-1.00000000000000))*(x4221)*(x4228)))+(((IkReal(-0.550000000000000))*(x4228)))+(((x4222)*(x4227)))+(((x4221)*(x4227)))))),((gconst59)*(((((x4220)*(x4228)))+(((IkReal(-1.00000000000000))*(x4223)*(x4228)))+(((IkReal(-0.0450000000000000))*(x4228)))+(((x4223)*(x4227)))+(((IkReal(0.0450000000000000))*(x4227)))+(((IkReal(-1.00000000000000))*(x4220)*(x4227)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x4230.valid ) {
    continue;
}
j1array[0]=x4230.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4231=IKsin(j1);
IkReal x4232=IKcos(j1);
IkReal x4233=((IkReal(0.300000000000000))*(cj3));
IkReal x4234=((IkReal(0.0450000000000000))*(cj3));
IkReal x4235=((IkReal(0.0450000000000000))*(sj3));
IkReal x4236=((IkReal(0.300000000000000))*(sj3));
IkReal x4237=((IkReal(0.0450000000000000))*(x4231));
IkReal x4238=((IkReal(0.0900000000000000))*(x4232));
IkReal x4239=((IkReal(1.10000000000000))*(x4231));
IkReal x4240=x4224;
IkReal x4241=IKsin(x4240);
IkReal x4242=IKcos(x4240);
IkReal x4243=((px)*(x4242));
IkReal x4244=((py)*(x4241));
IkReal x4245=((IkReal(1.00000000000000))*(x4243));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4233)))+(((IkReal(-1.00000000000000))*(x4235)))+(((IkReal(-1.00000000000000))*(x4231)*(x4244)))+(((x4231)*(x4243))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4231)*(x4234)))+(((x4231)*(x4236)))+(((IkReal(-1.00000000000000))*(x4232)*(x4233)))+(((IkReal(-1.00000000000000))*(x4232)*(x4235)))+(((IkReal(-0.550000000000000))*(x4232)))+(x4237));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4234)))+(((x4232)*(x4244)))+(((IkReal(-1.00000000000000))*(x4232)*(x4245)))+(x4236));
evalcond[3]=((((IkReal(0.550000000000000))*(x4231)))+(((x4231)*(x4235)))+(((x4231)*(x4233)))+(((IkReal(-1.00000000000000))*(x4232)*(x4234)))+(((x4232)*(x4236)))+(((IkReal(-1.00000000000000))*(x4245)))+(x4244)+(((IkReal(0.0450000000000000))*(x4232))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x4239)*(x4243)))+(((x4238)*(x4243)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x4238)*(x4244)))+(((IkReal(-1.00000000000000))*(x4239)*(x4244))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4249 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4249.valid ) {
    continue;
}
IkReal x4246=x4249.value;
IkReal x4247=((IkReal(-3.14159265000000))+(x4246));
IkReal x4248=((((IkReal(-1.00000000000000))*(py)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4246))))))))+(((IkReal(1.00000000000000))*(px)*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4246)))))))));
Atan2Value<IkReal> x4250 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4250.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x4250.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x4246)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x4248;
evalcond[3]=x4248;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4251=((IkReal(6.66666666666667))*(cj3));
Atan2Value<IkReal> x4257 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4257.valid ) {
    continue;
}
IkReal x4252=((IkReal(-3.14159265000000))+(x4257.value));
IkReal x4253=IKsin(x4252);
IkReal x4254=IKcos(x4252);
IkReal x4255=((py)*(x4253));
IkReal x4256=((px)*(x4254));
dummyeval[0]=((x4256)+(((IkReal(-1.00000000000000))*(x4255))));
dummyeval[1]=((((IkReal(-12.2222222222222))*(x4256)))+(((sj3)*(x4255)))+(((IkReal(-1.00000000000000))*(sj3)*(x4256)))+(((IkReal(-1.00000000000000))*(x4251)*(x4256)))+(((IkReal(12.2222222222222))*(x4255)))+(((x4251)*(x4255))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4258=((IkReal(6.66666666666667))*(sj3));
Atan2Value<IkReal> x4265 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4265.valid ) {
    continue;
}
IkReal x4259=((IkReal(-3.14159265000000))+(x4265.value));
IkReal x4260=IKsin(x4259);
IkReal x4261=IKcos(x4259);
IkReal x4262=((py)*(x4260));
IkReal x4263=((px)*(x4261));
IkReal x4264=((IkReal(1.00000000000000))*(x4263));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x4258)*(x4263)))+(x4262)+(((x4258)*(x4262)))+(((cj3)*(x4263)))+(((IkReal(-1.00000000000000))*(x4264)))+(((IkReal(-1.00000000000000))*(cj3)*(x4262))));
dummyeval[1]=((x4262)+(((IkReal(-1.00000000000000))*(x4264))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
Atan2Value<IkReal> x4268 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4268.valid ) {
    continue;
}
IkReal x4266=((IkReal(-3.14159265000000))+(x4268.value));
IkReal x4267=x4248;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4267;
evalcond[3]=x4267;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x4269=x4266;
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(IKsin(x4269))))+(((px)*(IKcos(x4269)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4270=(py)*(py);
IkReal x4271=x4266;
IkReal x4272=IKcos(x4271);
IkReal x4273=IKsin(x4271);
IkReal x4274=(x4272)*(x4272);
IkReal x4275=((py)*(x4273));
IkReal x4276=((px)*(x4272));
dummyeval[0]=((x4276)+(((IkReal(-1.00000000000000))*(x4275))));
dummyeval[1]=((((x4274)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4270)*(x4274)))+(x4270)+(((IkReal(-2.00000000000000))*(x4275)*(x4276))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4277=(py)*(py);
IkReal x4278=((IkReal(1.80000000000000))*(x4277));
IkReal x4279=x4266;
IkReal x4280=IKsin(x4279);
IkReal x4281=IKcos(x4279);
IkReal x4282=(x4281)*(x4281);
IkReal x4283=((px)*(x4281));
IkReal x4284=((py)*(x4280));
IkReal x4285=((IkReal(20.0000000000000))*(x4284));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(-1.00000000000000))*(x4285)))+(((IkReal(20.0000000000000))*(x4283))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4285)))+(((IkReal(20.0000000000000))*(x4283)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.80000000000000))*(x4282)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4278)*(x4282)))+(((IkReal(-3.60000000000000))*(x4283)*(x4284)))+(x4278))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*(x4282)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4278)*(x4282)))+(((IkReal(-3.60000000000000))*(x4283)*(x4284)))+(x4278)))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4283)))+(((IkReal(20.0000000000000))*(pp)*(x4283)))+(((IkReal(14.4500000000000))*(x4284)))+(((IkReal(-1.00000000000000))*(pp)*(x4285))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(-1.00000000000000))*(x4285)))+(((IkReal(20.0000000000000))*(x4283))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4285)))+(((IkReal(20.0000000000000))*(x4283)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(1.80000000000000))*(x4282)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4278)*(x4282)))+(((IkReal(-3.60000000000000))*(x4283)*(x4284)))+(x4278))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*(x4282)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4278)*(x4282)))+(((IkReal(-3.60000000000000))*(x4283)*(x4284)))+(x4278)))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4283)))+(((IkReal(20.0000000000000))*(pp)*(x4283)))+(((IkReal(14.4500000000000))*(x4284)))+(((IkReal(-1.00000000000000))*(pp)*(x4285)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(-1.00000000000000))*(x4285)))+(((IkReal(20.0000000000000))*(x4283))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4285)))+(((IkReal(20.0000000000000))*(x4283)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(1.80000000000000))*(x4282)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4278)*(x4282)))+(((IkReal(-3.60000000000000))*(x4283)*(x4284)))+(x4278))) != 0)?((IkReal)1/(((((IkReal(1.80000000000000))*(x4282)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4278)*(x4282)))+(((IkReal(-3.60000000000000))*(x4283)*(x4284)))+(x4278)))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4283)))+(((IkReal(20.0000000000000))*(pp)*(x4283)))+(((IkReal(14.4500000000000))*(x4284)))+(((IkReal(-1.00000000000000))*(pp)*(x4285)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4286=IKsin(j1);
IkReal x4287=IKcos(j1);
IkReal x4288=((IkReal(1.10000000000000))*(x4286));
IkReal x4289=((IkReal(0.0900000000000000))*(x4287));
IkReal x4290=x4266;
IkReal x4291=IKsin(x4290);
IkReal x4292=IKcos(x4290);
IkReal x4293=((py)*(x4291));
IkReal x4294=((px)*(x4292));
IkReal x4295=((IkReal(1.00000000000000))*(x4294));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x4286)*(x4293)))+(((x4286)*(x4294))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4287));
evalcond[2]=((((IkReal(-1.00000000000000))*(x4287)*(x4295)))+(((x4287)*(x4293))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4295)))+(((IkReal(0.850000000000000))*(x4286)))+(x4293));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4288)*(x4293)))+(((x4288)*(x4294)))+(((IkReal(-1.00000000000000))*(x4289)*(x4293)))+(((x4289)*(x4294)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4296=x4266;
IkReal x4297=IKcos(x4296);
IkReal x4298=IKsin(x4296);
IkReal x4299=((py)*(x4298));
IkReal x4300=((px)*(x4297));
if( IKabs(((((IkReal(1.17647058823529))*(x4300)))+(((IkReal(-1.17647058823529))*(x4299))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(1.53000000000000))*(x4300)))+(((IkReal(-1.53000000000000))*(x4299))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x4300)))+(((IkReal(-1.53000000000000))*(x4299)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x4300)*(x4300))))+(((IkReal(44.0000000000000))*(x4299)*(x4300)))+(((IkReal(-22.0000000000000))*((x4299)*(x4299)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x4300)))+(((IkReal(-1.17647058823529))*(x4299)))))+IKsqr(((((IKabs(((((IkReal(1.53000000000000))*(x4300)))+(((IkReal(-1.53000000000000))*(x4299))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x4300)))+(((IkReal(-1.53000000000000))*(x4299)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x4300)*(x4300))))+(((IkReal(44.0000000000000))*(x4299)*(x4300)))+(((IkReal(-22.0000000000000))*((x4299)*(x4299))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x4300)))+(((IkReal(-1.17647058823529))*(x4299)))), ((((IKabs(((((IkReal(1.53000000000000))*(x4300)))+(((IkReal(-1.53000000000000))*(x4299))))) != 0)?((IkReal)1/(((((IkReal(1.53000000000000))*(x4300)))+(((IkReal(-1.53000000000000))*(x4299)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((x4300)*(x4300))))+(((IkReal(44.0000000000000))*(x4299)*(x4300)))+(((IkReal(-22.0000000000000))*((x4299)*(x4299))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4301=IKsin(j1);
IkReal x4302=IKcos(j1);
IkReal x4303=((IkReal(1.10000000000000))*(x4301));
IkReal x4304=((IkReal(0.0900000000000000))*(x4302));
IkReal x4305=x4266;
IkReal x4306=IKsin(x4305);
IkReal x4307=IKcos(x4305);
IkReal x4308=((py)*(x4306));
IkReal x4309=((px)*(x4307));
IkReal x4310=((IkReal(1.00000000000000))*(x4309));
evalcond[0]=((IkReal(-0.850000000000000))+(((x4301)*(x4309)))+(((IkReal(-1.00000000000000))*(x4301)*(x4308))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4302));
evalcond[2]=((((x4302)*(x4308)))+(((IkReal(-1.00000000000000))*(x4302)*(x4310))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4310)))+(((IkReal(0.850000000000000))*(x4301)))+(x4308));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4303)*(x4308)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4304)*(x4309)))+(((x4303)*(x4309)))+(((IkReal(-1.00000000000000))*(x4304)*(x4308))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x4311=((IkReal(-1.00000000000000))*(py));
Atan2Value<IkReal> x4313 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4313.valid ) {
    continue;
}
IkReal x4312=((x4311)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4313.value)))))));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4312;
evalcond[3]=x4312;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4314 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4314.valid ) {
    continue;
}
dummyeval[1]=((IkReal(-1.00000000000000))*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4314.value)))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4315 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4315.valid ) {
    continue;
}
dummyeval[1]=((IkReal(-1.00000000000000))*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4315.value)))))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4318 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4318.valid ) {
    continue;
}
IkReal x4316=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4318.value)))));
IkReal x4317=((py)*(x4316));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4316) != 0)?((IkReal)1/(x4316)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4316) != 0)?((IkReal)1/((x4316)*(x4316))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4317)))+(((IkReal(20.0000000000000))*(pp)*(x4317))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4316) != 0)?((IkReal)1/(x4316)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4316) != 0)?((IkReal)1/((x4316)*(x4316))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4317)))+(((IkReal(20.0000000000000))*(pp)*(x4317)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4316) != 0)?((IkReal)1/(x4316)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4316) != 0)?((IkReal)1/((x4316)*(x4316))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4317)))+(((IkReal(20.0000000000000))*(pp)*(x4317)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4319=IKcos(j1);
IkReal x4320=IKsin(j1);
IkReal x4321=x4316;
IkReal x4322=((py)*(x4321));
IkReal x4323=((x4319)*(x4322));
IkReal x4324=((x4320)*(x4322));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(1.00000000000000))*(x4324))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4319));
evalcond[2]=((IkReal(-1.00000000000000))*(x4323));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4322)))+(((IkReal(0.850000000000000))*(x4320))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x4324)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x4323))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4326 = IKatan2WithCheck(IkReal(0),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4326.valid ) {
    continue;
}
IkReal x4325=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4326.value)))));
if( IKabs(((IkReal(1.17647058823529))*(py)*(x4325))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4325) != 0)?((IkReal)1/(x4325)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4325)*(x4325)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(x4325)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4325) != 0)?((IkReal)1/(x4325)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4325)*(x4325))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(x4325)), ((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4325) != 0)?((IkReal)1/(x4325)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4325)*(x4325))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4327=IKcos(j1);
IkReal x4328=IKsin(j1);
IkReal x4329=x4325;
IkReal x4330=((py)*(x4329));
IkReal x4331=((x4327)*(x4330));
IkReal x4332=((x4328)*(x4330));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(1.00000000000000))*(x4332))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4327));
evalcond[2]=((IkReal(-1.00000000000000))*(x4331));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4330)))+(((IkReal(0.850000000000000))*(x4328))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x4332)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x4331))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4334 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4334.valid ) {
    continue;
}
IkReal x4333=((px)*(IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4334.value)))))));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4333;
evalcond[3]=x4333;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4335 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4335.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4335.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4336 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4336.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4336.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4339 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4339.valid ) {
    continue;
}
IkReal x4337=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4339.value)))));
IkReal x4338=((px)*(x4337));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4337) != 0)?((IkReal)1/(x4337)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4337) != 0)?((IkReal)1/((x4337)*(x4337))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4338)))+(((IkReal(20.0000000000000))*(pp)*(x4338))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4337) != 0)?((IkReal)1/(x4337)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4337) != 0)?((IkReal)1/((x4337)*(x4337))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4338)))+(((IkReal(20.0000000000000))*(pp)*(x4338)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4337) != 0)?((IkReal)1/(x4337)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4337) != 0)?((IkReal)1/((x4337)*(x4337))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4338)))+(((IkReal(20.0000000000000))*(pp)*(x4338)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4340=IKcos(j1);
IkReal x4341=IKsin(j1);
IkReal x4342=((IkReal(-1.00000000000000))*(px));
IkReal x4343=x4337;
IkReal x4344=((px)*(x4343));
IkReal x4345=((x4340)*(x4344));
IkReal x4346=((x4341)*(x4344));
evalcond[0]=((IkReal(-0.850000000000000))+(x4346));
evalcond[1]=((IkReal(-0.850000000000000))*(x4340));
Atan2Value<IkReal> x4347 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4347.valid ) {
    continue;
}
evalcond[2]=((x4340)*(x4342)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4347.value)))))));
evalcond[3]=((((IkReal(0.850000000000000))*(x4341)))+(((IkReal(-1.00000000000000))*(x4344))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x4345)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4346))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4349 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4349.valid ) {
    continue;
}
IkReal x4348=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4349.value)))));
if( IKabs(((IkReal(1.17647058823529))*(px)*(x4348))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4348) != 0)?((IkReal)1/(x4348)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4348)*(x4348))))+(((IkReal(17.0000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x4348)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4348) != 0)?((IkReal)1/(x4348)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4348)*(x4348))))+(((IkReal(17.0000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x4348)), ((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4348) != 0)?((IkReal)1/(x4348)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4348)*(x4348))))+(((IkReal(17.0000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4350=IKcos(j1);
IkReal x4351=IKsin(j1);
IkReal x4352=((IkReal(-1.00000000000000))*(px));
IkReal x4353=x4348;
IkReal x4354=((px)*(x4353));
IkReal x4355=((x4350)*(x4354));
IkReal x4356=((x4351)*(x4354));
evalcond[0]=((IkReal(-0.850000000000000))+(x4356));
evalcond[1]=((IkReal(-0.850000000000000))*(x4350));
Atan2Value<IkReal> x4357 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4357.valid ) {
    continue;
}
evalcond[2]=((x4350)*(x4352)*(IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4357.value)))))));
evalcond[3]=((((IkReal(0.850000000000000))*(x4351)))+(((IkReal(-1.00000000000000))*(x4354))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x4355)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4356))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4358=((IkReal(0.300000000000000))*(sj3));
IkReal x4359=((IkReal(0.0450000000000000))*(cj3));
Atan2Value<IkReal> x4366 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4366.valid ) {
    continue;
}
IkReal x4360=((IkReal(-3.14159265000000))+(x4366.value));
IkReal x4361=IKsin(x4360);
IkReal x4362=IKcos(x4360);
IkReal x4363=((px)*(x4362));
IkReal x4364=((py)*(x4361));
IkReal x4365=((IkReal(0.0450000000000000))*(x4363));
if( IKabs(((((IKabs(((((x4359)*(x4363)))+(((IkReal(-1.00000000000000))*(x4359)*(x4364)))+(((IkReal(-1.00000000000000))*(x4358)*(x4363)))+(((IkReal(-1.00000000000000))*(x4365)))+(((IkReal(0.0450000000000000))*(x4364)))+(((x4358)*(x4364))))) != 0)?((IkReal)1/(((((x4359)*(x4363)))+(((IkReal(-1.00000000000000))*(x4359)*(x4364)))+(((IkReal(-1.00000000000000))*(x4358)*(x4363)))+(((IkReal(-1.00000000000000))*(x4365)))+(((IkReal(0.0450000000000000))*(x4364)))+(((x4358)*(x4364)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x4363)))+(x4364))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4363)))+(x4364)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4358)))+(x4359))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x4359)*(x4363)))+(((IkReal(-1.00000000000000))*(x4359)*(x4364)))+(((IkReal(-1.00000000000000))*(x4358)*(x4363)))+(((IkReal(-1.00000000000000))*(x4365)))+(((IkReal(0.0450000000000000))*(x4364)))+(((x4358)*(x4364))))) != 0)?((IkReal)1/(((((x4359)*(x4363)))+(((IkReal(-1.00000000000000))*(x4359)*(x4364)))+(((IkReal(-1.00000000000000))*(x4358)*(x4363)))+(((IkReal(-1.00000000000000))*(x4365)))+(((IkReal(0.0450000000000000))*(x4364)))+(((x4358)*(x4364)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x4363)))+(x4364))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4363)))+(x4364)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4358)))+(x4359)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((x4359)*(x4363)))+(((IkReal(-1.00000000000000))*(x4359)*(x4364)))+(((IkReal(-1.00000000000000))*(x4358)*(x4363)))+(((IkReal(-1.00000000000000))*(x4365)))+(((IkReal(0.0450000000000000))*(x4364)))+(((x4358)*(x4364))))) != 0)?((IkReal)1/(((((x4359)*(x4363)))+(((IkReal(-1.00000000000000))*(x4359)*(x4364)))+(((IkReal(-1.00000000000000))*(x4358)*(x4363)))+(((IkReal(-1.00000000000000))*(x4365)))+(((IkReal(0.0450000000000000))*(x4364)))+(((x4358)*(x4364)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x4363)))+(x4364))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4363)))+(x4364)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4358)))+(x4359)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4367=IKsin(j1);
IkReal x4368=IKcos(j1);
IkReal x4369=((IkReal(0.300000000000000))*(cj3));
IkReal x4370=((IkReal(0.0450000000000000))*(cj3));
IkReal x4371=((IkReal(0.0450000000000000))*(sj3));
IkReal x4372=((IkReal(0.300000000000000))*(sj3));
IkReal x4373=((IkReal(0.0450000000000000))*(x4367));
IkReal x4374=((IkReal(0.0900000000000000))*(x4368));
IkReal x4375=((IkReal(1.10000000000000))*(x4367));
IkReal x4376=x4360;
IkReal x4377=IKsin(x4376);
IkReal x4378=IKcos(x4376);
IkReal x4379=((px)*(x4378));
IkReal x4380=((py)*(x4377));
IkReal x4381=((IkReal(1.00000000000000))*(x4379));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4369)))+(((IkReal(-1.00000000000000))*(x4371)))+(((x4367)*(x4379)))+(((IkReal(-1.00000000000000))*(x4367)*(x4380))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x4368)))+(((x4367)*(x4372)))+(x4373)+(((IkReal(-1.00000000000000))*(x4368)*(x4369)))+(((IkReal(-1.00000000000000))*(x4367)*(x4370)))+(((IkReal(-1.00000000000000))*(x4368)*(x4371))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4368)*(x4381)))+(((x4368)*(x4380)))+(((IkReal(-1.00000000000000))*(x4370)))+(x4372));
evalcond[3]=((((x4368)*(x4372)))+(((IkReal(0.550000000000000))*(x4367)))+(((IkReal(0.0450000000000000))*(x4368)))+(((x4367)*(x4371)))+(x4380)+(((x4367)*(x4369)))+(((IkReal(-1.00000000000000))*(x4368)*(x4370)))+(((IkReal(-1.00000000000000))*(x4381))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x4374)*(x4379)))+(((x4375)*(x4379)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x4375)*(x4380)))+(((IkReal(-1.00000000000000))*(x4374)*(x4380))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4382=((IkReal(0.0450000000000000))*(sj3));
IkReal x4383=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x4389 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4389.valid ) {
    continue;
}
IkReal x4384=((IkReal(-3.14159265000000))+(x4389.value));
IkReal x4385=IKsin(x4384);
IkReal x4386=IKcos(x4384);
IkReal x4387=((py)*(x4385));
IkReal x4388=((px)*(x4386));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x4387)))+(x4388))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4387)))+(x4388)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4383)+(x4382))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(0.550000000000000))*(x4387)))+(((IkReal(-1.00000000000000))*(x4382)*(x4388)))+(((x4383)*(x4387)))+(((x4382)*(x4387)))+(((IkReal(-1.00000000000000))*(x4383)*(x4388)))+(((IkReal(-0.550000000000000))*(x4388))))) != 0)?((IkReal)1/(((((IkReal(0.550000000000000))*(x4387)))+(((IkReal(-1.00000000000000))*(x4382)*(x4388)))+(((x4383)*(x4387)))+(((x4382)*(x4387)))+(((IkReal(-1.00000000000000))*(x4383)*(x4388)))+(((IkReal(-0.550000000000000))*(x4388)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x4387)))+(x4388))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4387)))+(x4388)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4383)+(x4382)))))+IKsqr(((((IKabs(((((IkReal(0.550000000000000))*(x4387)))+(((IkReal(-1.00000000000000))*(x4382)*(x4388)))+(((x4383)*(x4387)))+(((x4382)*(x4387)))+(((IkReal(-1.00000000000000))*(x4383)*(x4388)))+(((IkReal(-0.550000000000000))*(x4388))))) != 0)?((IkReal)1/(((((IkReal(0.550000000000000))*(x4387)))+(((IkReal(-1.00000000000000))*(x4382)*(x4388)))+(((x4383)*(x4387)))+(((x4382)*(x4387)))+(((IkReal(-1.00000000000000))*(x4383)*(x4388)))+(((IkReal(-0.550000000000000))*(x4388)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x4387)))+(x4388))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4387)))+(x4388)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4383)+(x4382)))), ((((IKabs(((((IkReal(0.550000000000000))*(x4387)))+(((IkReal(-1.00000000000000))*(x4382)*(x4388)))+(((x4383)*(x4387)))+(((x4382)*(x4387)))+(((IkReal(-1.00000000000000))*(x4383)*(x4388)))+(((IkReal(-0.550000000000000))*(x4388))))) != 0)?((IkReal)1/(((((IkReal(0.550000000000000))*(x4387)))+(((IkReal(-1.00000000000000))*(x4382)*(x4388)))+(((x4383)*(x4387)))+(((x4382)*(x4387)))+(((IkReal(-1.00000000000000))*(x4383)*(x4388)))+(((IkReal(-0.550000000000000))*(x4388)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4390=IKsin(j1);
IkReal x4391=IKcos(j1);
IkReal x4392=((IkReal(0.300000000000000))*(cj3));
IkReal x4393=((IkReal(0.0450000000000000))*(cj3));
IkReal x4394=((IkReal(0.0450000000000000))*(sj3));
IkReal x4395=((IkReal(0.300000000000000))*(sj3));
IkReal x4396=((IkReal(0.0450000000000000))*(x4390));
IkReal x4397=((IkReal(0.0900000000000000))*(x4391));
IkReal x4398=((IkReal(1.10000000000000))*(x4390));
IkReal x4399=x4384;
IkReal x4400=IKsin(x4399);
IkReal x4401=IKcos(x4399);
IkReal x4402=((px)*(x4401));
IkReal x4403=((py)*(x4400));
IkReal x4404=((IkReal(1.00000000000000))*(x4402));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4394)))+(((IkReal(-1.00000000000000))*(x4392)))+(((x4390)*(x4402)))+(((IkReal(-1.00000000000000))*(x4390)*(x4403))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4390)*(x4393)))+(((x4390)*(x4395)))+(x4396)+(((IkReal(-1.00000000000000))*(x4391)*(x4394)))+(((IkReal(-1.00000000000000))*(x4391)*(x4392)))+(((IkReal(-0.550000000000000))*(x4391))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4393)))+(x4395)+(((x4391)*(x4403)))+(((IkReal(-1.00000000000000))*(x4391)*(x4404))));
evalcond[3]=((((IkReal(0.550000000000000))*(x4390)))+(((x4391)*(x4395)))+(((IkReal(0.0450000000000000))*(x4391)))+(x4403)+(((IkReal(-1.00000000000000))*(x4404)))+(((x4390)*(x4394)))+(((x4390)*(x4392)))+(((IkReal(-1.00000000000000))*(x4391)*(x4393))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4398)*(x4403)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x4397)*(x4403)))+(((x4397)*(x4402)))+(((x4398)*(x4402))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4405=((IkReal(0.0450000000000000))*(cj3));
IkReal x4406=((IkReal(0.300000000000000))*(cj3));
IkReal x4407=((IkReal(0.0450000000000000))*(sj3));
IkReal x4408=((IkReal(0.300000000000000))*(sj3));
Atan2Value<IkReal> x4414 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(px)),((IkReal(-1.00000000000000))*(py)),IKFAST_ATAN2_MAGTHRESH);
if( !x4414.valid ) {
    continue;
}
IkReal x4409=((IkReal(-3.14159265000000))+(x4414.value));
IkReal x4410=IKcos(x4409);
IkReal x4411=IKsin(x4409);
IkReal x4412=((px)*(x4410));
IkReal x4413=((py)*(x4411));
Atan2Value<IkReal> x4415 = IKatan2WithCheck(((gconst60)*(((((IkReal(-0.550000000000000))*(x4413)))+(((x4407)*(x4412)))+(((IkReal(-1.00000000000000))*(x4407)*(x4413)))+(((IkReal(-1.00000000000000))*(x4406)*(x4413)))+(((IkReal(0.550000000000000))*(x4412)))+(((x4406)*(x4412)))))),((gconst60)*(((((IkReal(-1.00000000000000))*(x4408)*(x4413)))+(((IkReal(0.0450000000000000))*(x4412)))+(((x4405)*(x4413)))+(((IkReal(-0.0450000000000000))*(x4413)))+(((IkReal(-1.00000000000000))*(x4405)*(x4412)))+(((x4408)*(x4412)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x4415.valid ) {
    continue;
}
j1array[0]=x4415.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4416=IKsin(j1);
IkReal x4417=IKcos(j1);
IkReal x4418=((IkReal(0.300000000000000))*(cj3));
IkReal x4419=((IkReal(0.0450000000000000))*(cj3));
IkReal x4420=((IkReal(0.0450000000000000))*(sj3));
IkReal x4421=((IkReal(0.300000000000000))*(sj3));
IkReal x4422=((IkReal(0.0450000000000000))*(x4416));
IkReal x4423=((IkReal(0.0900000000000000))*(x4417));
IkReal x4424=((IkReal(1.10000000000000))*(x4416));
IkReal x4425=x4409;
IkReal x4426=IKsin(x4425);
IkReal x4427=IKcos(x4425);
IkReal x4428=((px)*(x4427));
IkReal x4429=((py)*(x4426));
IkReal x4430=((IkReal(1.00000000000000))*(x4428));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4420)))+(((IkReal(-1.00000000000000))*(x4418)))+(((IkReal(-1.00000000000000))*(x4416)*(x4429)))+(((x4416)*(x4428))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x4417)))+(x4422)+(((IkReal(-1.00000000000000))*(x4417)*(x4420)))+(((IkReal(-1.00000000000000))*(x4417)*(x4418)))+(((IkReal(-1.00000000000000))*(x4416)*(x4419)))+(((x4416)*(x4421))));
evalcond[2]=((IkReal(0.0450000000000000))+(x4421)+(((IkReal(-1.00000000000000))*(x4417)*(x4430)))+(((IkReal(-1.00000000000000))*(x4419)))+(((x4417)*(x4429))));
evalcond[3]=((x4429)+(((IkReal(0.0450000000000000))*(x4417)))+(((IkReal(-1.00000000000000))*(x4430)))+(((IkReal(-1.00000000000000))*(x4417)*(x4419)))+(((x4416)*(x4418)))+(((x4417)*(x4421)))+(((IkReal(0.550000000000000))*(x4416)))+(((x4416)*(x4420))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4423)*(x4429)))+(((x4423)*(x4428)))+(((IkReal(-1.00000000000000))*(x4424)*(x4429)))+(((x4424)*(x4428)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4433 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4433.valid ) {
    continue;
}
IkReal x4431=x4433.value;
IkReal x4432=((IkReal(-1.00000000000000))*(py)*(IKcos(x4431)));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x4431)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4432;
evalcond[3]=x4432;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4434 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4434.valid ) {
    continue;
}
dummyeval[1]=IKsin(x4434.value);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4435 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4435.valid ) {
    continue;
}
dummyeval[1]=IKsin(x4435.value);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x4436=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4436))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4436))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4439 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4439.valid ) {
    continue;
}
IkReal x4437=IKsin(x4439.value);
IkReal x4438=((py)*(x4437));
if( IKabs(((IkReal(-0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4437) != 0)?((IkReal)1/(x4437)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4437) != 0)?((IkReal)1/((x4437)*(x4437))):(IkReal)1.0e30))*(((((IkReal(14.4500000000000))*(x4438)))+(((IkReal(-20.0000000000000))*(pp)*(x4438))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4437) != 0)?((IkReal)1/(x4437)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4437) != 0)?((IkReal)1/((x4437)*(x4437))):(IkReal)1.0e30))*(((((IkReal(14.4500000000000))*(x4438)))+(((IkReal(-20.0000000000000))*(pp)*(x4438)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(-0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4437) != 0)?((IkReal)1/(x4437)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4437) != 0)?((IkReal)1/((x4437)*(x4437))):(IkReal)1.0e30))*(((((IkReal(14.4500000000000))*(x4438)))+(((IkReal(-20.0000000000000))*(pp)*(x4438)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4440=IKcos(j1);
IkReal x4441=IKsin(j1);
Atan2Value<IkReal> x4444 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4444.valid ) {
    continue;
}
IkReal x4442=IKsin(x4444.value);
IkReal x4443=((py)*(x4442));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x4441)*(x4443))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4440));
evalcond[2]=((x4440)*(x4443));
evalcond[3]=((x4443)+(((IkReal(0.850000000000000))*(x4441))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(x4441)*(x4443)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x4440)*(x4443))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4446 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4446.valid ) {
    continue;
}
IkReal x4445=IKsin(x4446.value);
if( IKabs(((IkReal(-1.17647058823529))*(py)*(x4445))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4445) != 0)?((IkReal)1/(x4445)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4445)*(x4445)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.17647058823529))*(py)*(x4445)))+IKsqr(((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4445) != 0)?((IkReal)1/(x4445)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4445)*(x4445))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(-1.17647058823529))*(py)*(x4445)), ((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4445) != 0)?((IkReal)1/(x4445)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4445)*(x4445))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4447=IKcos(j1);
IkReal x4448=IKsin(j1);
Atan2Value<IkReal> x4451 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4451.valid ) {
    continue;
}
IkReal x4449=IKsin(x4451.value);
IkReal x4450=((py)*(x4449));
evalcond[0]=((IkReal(-0.850000000000000))+(((IkReal(-1.00000000000000))*(x4448)*(x4450))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4447));
evalcond[2]=((x4447)*(x4450));
evalcond[3]=((x4450)+(((IkReal(0.850000000000000))*(x4448))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(x4448)*(x4450)))+(((IkReal(-0.0900000000000000))*(x4447)*(x4450)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4454 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4454.valid ) {
    continue;
}
IkReal x4452=x4454.value;
IkReal x4453=((IkReal(-1.00000000000000))*(py)*(IKcos(((IkReal(-3.14159265000000))+(((IkReal(1.00000000000000))*(x4452)))))));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x4452)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4453;
evalcond[3]=x4453;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4455 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4455.valid ) {
    continue;
}
dummyeval[1]=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4455.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4456 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4456.valid ) {
    continue;
}
dummyeval[1]=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4456.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x4457=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4457))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4457))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4460 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4460.valid ) {
    continue;
}
IkReal x4458=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4460.value)))));
IkReal x4459=((py)*(x4458));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4458) != 0)?((IkReal)1/(x4458)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4458) != 0)?((IkReal)1/((x4458)*(x4458))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x4459)))+(((IkReal(-14.4500000000000))*(x4459))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4458) != 0)?((IkReal)1/(x4458)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4458) != 0)?((IkReal)1/((x4458)*(x4458))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x4459)))+(((IkReal(-14.4500000000000))*(x4459)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4458) != 0)?((IkReal)1/(x4458)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4458) != 0)?((IkReal)1/((x4458)*(x4458))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x4459)))+(((IkReal(-14.4500000000000))*(x4459)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4461=IKcos(j1);
IkReal x4462=IKsin(j1);
IkReal x4463=x4458;
IkReal x4464=((py)*(x4463));
IkReal x4465=((x4461)*(x4464));
IkReal x4466=((x4462)*(x4464));
evalcond[0]=((IkReal(-0.850000000000000))+(x4466));
evalcond[1]=((IkReal(-0.850000000000000))*(x4461));
evalcond[2]=((IkReal(-1.00000000000000))*(x4465));
evalcond[3]=((((IkReal(0.850000000000000))*(x4462)))+(((IkReal(-1.00000000000000))*(x4464))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x4465)))+(((IkReal(1.10000000000000))*(x4466)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4468 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4468.valid ) {
    continue;
}
IkReal x4467=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4468.value)))));
if( IKabs(((IkReal(1.17647058823529))*(py)*(x4467))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4467) != 0)?((IkReal)1/(x4467)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4467)*(x4467)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(x4467)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4467) != 0)?((IkReal)1/(x4467)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4467)*(x4467))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(x4467)), ((IkReal(0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4467) != 0)?((IkReal)1/(x4467)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4467)*(x4467))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4469=IKcos(j1);
IkReal x4470=IKsin(j1);
IkReal x4471=x4467;
IkReal x4472=((py)*(x4471));
IkReal x4473=((x4469)*(x4472));
IkReal x4474=((x4470)*(x4472));
evalcond[0]=((IkReal(-0.850000000000000))+(x4474));
evalcond[1]=((IkReal(-0.850000000000000))*(x4469));
evalcond[2]=((IkReal(-1.00000000000000))*(x4473));
evalcond[3]=((((IkReal(0.850000000000000))*(x4470)))+(((IkReal(-1.00000000000000))*(x4472))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x4473)))+(((IkReal(1.10000000000000))*(x4474))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x4475=((IkReal(1.00000000000000))*(pp));
IkReal x4476=((IkReal(3.14159265358979))+(j0));
IkReal x4477=((IkReal(-1.00000000000000))*(py));
Atan2Value<IkReal> x4478 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4478.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(x4476, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((x4476)+(x4478.value)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x4475)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x4477;
evalcond[4]=x4477;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4475))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4480 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4480.valid ) {
    continue;
}
IkReal x4479=x4480.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4479));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4479))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4481=IKsin(j1);
IkReal x4482=IKcos(j1);
IkReal x4483=((IkReal(0.0450000000000000))*(x4482));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x4483)))+(x4483)+(((IkReal(0.300000000000000))*(cj3)*(x4481)))+(((IkReal(0.550000000000000))*(x4481)))+(((IkReal(0.300000000000000))*(sj3)*(x4482)))+(((IkReal(0.0450000000000000))*(sj3)*(x4481))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x4484=((IkReal(1.00000000000000))*(pp));
IkReal x4485=((IkReal(-1.00000000000000))*(py));
Atan2Value<IkReal> x4486 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4486.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x4486.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x4484))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x4485;
evalcond[4]=x4485;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4484))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4488 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4488.valid ) {
    continue;
}
IkReal x4487=x4488.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4487));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4487))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4489=IKsin(j1);
IkReal x4490=IKcos(j1);
IkReal x4491=((IkReal(0.0450000000000000))*(x4490));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x4491)))+(x4491)+(((IkReal(0.300000000000000))*(cj3)*(x4489)))+(((IkReal(0.300000000000000))*(sj3)*(x4490)))+(((IkReal(0.550000000000000))*(x4489)))+(((IkReal(0.0450000000000000))*(sj3)*(x4489))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x4492=((IkReal(1.00000000000000))*(pp));
Atan2Value<IkReal> x4493 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4493.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x4493.value)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x4492)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4492))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4495 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4495.valid ) {
    continue;
}
IkReal x4494=x4495.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4494));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4494))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4496=IKsin(j1);
IkReal x4497=IKcos(j1);
IkReal x4498=((IkReal(0.0450000000000000))*(x4497));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x4498)))+(x4498)+(((IkReal(0.300000000000000))*(sj3)*(x4497)))+(((IkReal(0.550000000000000))*(x4496)))+(((IkReal(0.300000000000000))*(cj3)*(x4496)))+(((IkReal(0.0450000000000000))*(sj3)*(x4496))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x4499=((IkReal(1.00000000000000))*(pp));
Atan2Value<IkReal> x4500 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4500.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x4500.value)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x4499)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4499))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4502 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4502.valid ) {
    continue;
}
IkReal x4501=x4502.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4501));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4501))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4503=IKsin(j1);
IkReal x4504=IKcos(j1);
IkReal x4505=((IkReal(0.0450000000000000))*(x4504));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x4503)))+(x4505)+(((IkReal(-1.00000000000000))*(cj3)*(x4505)))+(((IkReal(0.300000000000000))*(sj3)*(x4504)))+(((IkReal(0.0450000000000000))*(sj3)*(x4503)))+(((IkReal(0.550000000000000))*(x4503))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
Atan2Value<IkReal> x4508 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4508.valid ) {
    continue;
}
IkReal x4506=x4508.value;
IkReal x4507=((IkReal(-1.00000000000000))*(px)*(IKsin(x4506)));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x4506)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4507;
evalcond[3]=x4507;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4509 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4509.valid ) {
    continue;
}
dummyeval[1]=IKcos(x4509.value);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4510 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4510.valid ) {
    continue;
}
dummyeval[1]=IKcos(x4510.value);
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x4511=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4511))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4511))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4514 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4514.valid ) {
    continue;
}
IkReal x4512=IKcos(x4514.value);
IkReal x4513=((px)*(x4512));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4512) != 0)?((IkReal)1/(x4512)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4512) != 0)?((IkReal)1/((x4512)*(x4512))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4513)))+(((IkReal(20.0000000000000))*(pp)*(x4513))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4512) != 0)?((IkReal)1/(x4512)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4512) != 0)?((IkReal)1/((x4512)*(x4512))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4513)))+(((IkReal(20.0000000000000))*(pp)*(x4513)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4512) != 0)?((IkReal)1/(x4512)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4512) != 0)?((IkReal)1/((x4512)*(x4512))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4513)))+(((IkReal(20.0000000000000))*(pp)*(x4513)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4515=IKcos(j1);
IkReal x4516=IKsin(j1);
Atan2Value<IkReal> x4519 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4519.valid ) {
    continue;
}
IkReal x4517=IKcos(x4519.value);
IkReal x4518=((px)*(x4517));
evalcond[0]=((IkReal(-0.850000000000000))+(((x4516)*(x4518))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4515));
evalcond[2]=((IkReal(-1.00000000000000))*(x4515)*(x4518));
evalcond[3]=((((IkReal(0.850000000000000))*(x4516)))+(((IkReal(-1.00000000000000))*(x4518))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x4516)*(x4518)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x4515)*(x4518))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4521 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4521.valid ) {
    continue;
}
IkReal x4520=IKcos(x4521.value);
if( IKabs(((IkReal(1.17647058823529))*(px)*(x4520))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4520) != 0)?((IkReal)1/(x4520)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4520)*(x4520)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x4520)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4520) != 0)?((IkReal)1/(x4520)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4520)*(x4520))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x4520)), ((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4520) != 0)?((IkReal)1/(x4520)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4520)*(x4520))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4522=IKcos(j1);
IkReal x4523=IKsin(j1);
Atan2Value<IkReal> x4526 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4526.valid ) {
    continue;
}
IkReal x4524=IKcos(x4526.value);
IkReal x4525=((px)*(x4524));
evalcond[0]=((IkReal(-0.850000000000000))+(((x4523)*(x4525))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4522));
evalcond[2]=((IkReal(-1.00000000000000))*(x4522)*(x4525));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4525)))+(((IkReal(0.850000000000000))*(x4523))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4523)*(x4525)))+(((IkReal(0.0900000000000000))*(x4522)*(x4525))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4529 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4529.valid ) {
    continue;
}
IkReal x4527=x4529.value;
IkReal x4528=((IkReal(-1.00000000000000))*(px)*(IKsin(((IkReal(-3.14159265000000))+(((IkReal(1.00000000000000))*(x4527)))))));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x4527)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4528;
evalcond[3]=x4528;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4530 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4530.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4530.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4531 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4531.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4531.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x4532=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4532))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4532))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4535 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4535.valid ) {
    continue;
}
IkReal x4533=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4535.value)))));
IkReal x4534=((px)*(x4533));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4533) != 0)?((IkReal)1/(x4533)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4533) != 0)?((IkReal)1/((x4533)*(x4533))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4534)))+(((IkReal(20.0000000000000))*(pp)*(x4534))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4533) != 0)?((IkReal)1/(x4533)):(IkReal)1.0e30))))+IKsqr(((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4533) != 0)?((IkReal)1/((x4533)*(x4533))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4534)))+(((IkReal(20.0000000000000))*(pp)*(x4534)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4533) != 0)?((IkReal)1/(x4533)):(IkReal)1.0e30))), ((IkReal(0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4533) != 0)?((IkReal)1/((x4533)*(x4533))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4534)))+(((IkReal(20.0000000000000))*(pp)*(x4534)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4536=IKcos(j1);
IkReal x4537=IKsin(j1);
IkReal x4538=x4533;
IkReal x4539=((px)*(x4538));
IkReal x4540=((x4536)*(x4539));
IkReal x4541=((x4537)*(x4539));
evalcond[0]=((IkReal(-0.850000000000000))+(x4541));
evalcond[1]=((IkReal(-0.850000000000000))*(x4536));
evalcond[2]=((IkReal(-1.00000000000000))*(x4540));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4539)))+(((IkReal(0.850000000000000))*(x4537))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x4541)))+(((IkReal(0.0900000000000000))*(x4540)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4543 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4543.valid ) {
    continue;
}
IkReal x4542=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4543.value)))));
if( IKabs(((IkReal(1.17647058823529))*(px)*(x4542))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4542) != 0)?((IkReal)1/(x4542)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4542)*(x4542)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x4542)))+IKsqr(((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4542) != 0)?((IkReal)1/(x4542)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4542)*(x4542))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x4542)), ((IkReal(0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4542) != 0)?((IkReal)1/(x4542)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4542)*(x4542))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4544=IKcos(j1);
IkReal x4545=IKsin(j1);
IkReal x4546=x4542;
IkReal x4547=((px)*(x4546));
IkReal x4548=((x4544)*(x4547));
IkReal x4549=((x4545)*(x4547));
evalcond[0]=((IkReal(-0.850000000000000))+(x4549));
evalcond[1]=((IkReal(-0.850000000000000))*(x4544));
evalcond[2]=((IkReal(-1.00000000000000))*(x4548));
evalcond[3]=((((IkReal(0.850000000000000))*(x4545)))+(((IkReal(-1.00000000000000))*(x4547))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x4549)))+(((IkReal(0.0900000000000000))*(x4548)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x4550=((IkReal(1.00000000000000))*(pp));
Atan2Value<IkReal> x4551 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4551.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x4551.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x4550)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4550))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4553 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4553.valid ) {
    continue;
}
IkReal x4552=x4553.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4552));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4552))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4554=IKsin(j1);
IkReal x4555=IKcos(j1);
IkReal x4556=((IkReal(0.0450000000000000))*(x4555));
evalcond[0]=((((IkReal(0.300000000000000))*(sj3)*(x4555)))+(x4556)+(((IkReal(0.550000000000000))*(x4554)))+(((IkReal(-1.00000000000000))*(cj3)*(x4556)))+(((IkReal(0.300000000000000))*(cj3)*(x4554)))+(((IkReal(0.0450000000000000))*(sj3)*(x4554))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x4557=((IkReal(1.00000000000000))*(pp));
Atan2Value<IkReal> x4558 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4558.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x4558.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x4557)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4557))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4560 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4560.valid ) {
    continue;
}
IkReal x4559=x4560.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4559));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4559))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4561=IKsin(j1);
IkReal x4562=IKcos(j1);
IkReal x4563=((IkReal(0.0450000000000000))*(x4562));
evalcond[0]=((((IkReal(0.550000000000000))*(x4561)))+(((IkReal(0.300000000000000))*(sj3)*(x4562)))+(((IkReal(-1.00000000000000))*(cj3)*(x4563)))+(x4563)+(((IkReal(0.300000000000000))*(cj3)*(x4561)))+(((IkReal(0.0450000000000000))*(sj3)*(x4561))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x4564=((IkReal(1.00000000000000))*(pp));
IkReal x4565=((IkReal(-1.00000000000000))*(px));
Atan2Value<IkReal> x4566 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4566.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x4566.value)+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x4564))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x4565;
evalcond[4]=x4565;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4564))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4568 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4568.valid ) {
    continue;
}
IkReal x4567=x4568.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4567));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4567))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4569=IKsin(j1);
IkReal x4570=IKcos(j1);
IkReal x4571=((IkReal(0.0450000000000000))*(x4570));
evalcond[0]=((((IkReal(0.550000000000000))*(x4569)))+(x4571)+(((IkReal(0.300000000000000))*(cj3)*(x4569)))+(((IkReal(0.300000000000000))*(sj3)*(x4570)))+(((IkReal(0.0450000000000000))*(sj3)*(x4569)))+(((IkReal(-1.00000000000000))*(cj3)*(x4571))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x4572=((IkReal(1.00000000000000))*(pp));
IkReal x4573=((IkReal(-1.00000000000000))*(px));
Atan2Value<IkReal> x4574 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4574.valid ) {
    continue;
}
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x4574.value)+(j0)), IkReal(6.28318530717959))))))+(IKabs(((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959))))))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x4572)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=x4573;
evalcond[4]=x4573;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4572))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4576 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4576.valid ) {
    continue;
}
IkReal x4575=x4576.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4575));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4575))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4577=IKsin(j1);
IkReal x4578=IKcos(j1);
IkReal x4579=((IkReal(0.0450000000000000))*(x4578));
evalcond[0]=((((IkReal(0.300000000000000))*(cj3)*(x4577)))+(x4579)+(((IkReal(0.300000000000000))*(sj3)*(x4578)))+(((IkReal(-1.00000000000000))*(cj3)*(x4579)))+(((IkReal(0.0450000000000000))*(sj3)*(x4577)))+(((IkReal(0.550000000000000))*(x4577))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4580=((IkReal(0.300000000000000))*(sj3));
IkReal x4581=((py)*(sj0));
IkReal x4582=((IkReal(0.0450000000000000))*(cj3));
IkReal x4583=((cj0)*(px));
if( IKabs(((((IKabs(((((IkReal(-0.0450000000000000))*(x4581)))+(((IkReal(-0.0450000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4581)))+(((x4581)*(x4582)))+(((x4582)*(x4583))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x4581)))+(((IkReal(-0.0450000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4581)))+(((x4581)*(x4582)))+(((x4582)*(x4583)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4581))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4581)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4580)))+(x4582))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-0.0450000000000000))*(x4581)))+(((IkReal(-0.0450000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4581)))+(((x4581)*(x4582)))+(((x4582)*(x4583))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x4581)))+(((IkReal(-0.0450000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4581)))+(((x4581)*(x4582)))+(((x4582)*(x4583)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4581))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4581)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4580)))+(x4582)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-0.0450000000000000))*(x4581)))+(((IkReal(-0.0450000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4581)))+(((x4581)*(x4582)))+(((x4582)*(x4583))))) != 0)?((IkReal)1/(((((IkReal(-0.0450000000000000))*(x4581)))+(((IkReal(-0.0450000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4583)))+(((IkReal(-1.00000000000000))*(x4580)*(x4581)))+(((x4581)*(x4582)))+(((x4582)*(x4583)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4581))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4583)))+(((IkReal(-1.00000000000000))*(x4581)))))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4580)))+(x4582)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4584=IKsin(j1);
IkReal x4585=IKcos(j1);
IkReal x4586=((IkReal(0.300000000000000))*(cj3));
IkReal x4587=((IkReal(0.0450000000000000))*(cj3));
IkReal x4588=((cj0)*(px));
IkReal x4589=((py)*(sj0));
IkReal x4590=((IkReal(0.0450000000000000))*(sj3));
IkReal x4591=((IkReal(0.300000000000000))*(sj3));
IkReal x4592=((IkReal(0.0450000000000000))*(x4584));
IkReal x4593=((IkReal(1.00000000000000))*(x4585));
IkReal x4594=((IkReal(0.0900000000000000))*(x4585));
IkReal x4595=((IkReal(1.10000000000000))*(x4584));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4586)))+(((IkReal(-1.00000000000000))*(x4590)))+(((x4584)*(x4588)))+(((x4584)*(x4589))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4585)*(x4590)))+(x4592)+(((x4584)*(x4591)))+(((IkReal(-0.550000000000000))*(x4585)))+(((IkReal(-1.00000000000000))*(x4584)*(x4587)))+(((IkReal(-1.00000000000000))*(x4585)*(x4586))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4587)))+(x4591)+(((IkReal(-1.00000000000000))*(x4589)*(x4593)))+(((IkReal(-1.00000000000000))*(x4588)*(x4593))));
evalcond[3]=((((IkReal(0.550000000000000))*(x4584)))+(((IkReal(0.0450000000000000))*(x4585)))+(((IkReal(-1.00000000000000))*(x4589)))+(((IkReal(-1.00000000000000))*(x4588)))+(((x4584)*(x4586)))+(((x4585)*(x4591)))+(((x4584)*(x4590)))+(((IkReal(-1.00000000000000))*(x4585)*(x4587))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x4589)*(x4594)))+(((x4589)*(x4595)))+(((x4588)*(x4595)))+(((x4588)*(x4594))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4596=((cj0)*(px));
IkReal x4597=((IkReal(0.0450000000000000))*(sj3));
IkReal x4598=((py)*(sj0));
IkReal x4599=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((((IKabs(((x4596)+(x4598))) != 0)?((IkReal)1/(((x4596)+(x4598)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4597)+(x4599))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x4598)*(x4599)))+(((IkReal(-1.00000000000000))*(x4596)*(x4597)))+(((IkReal(-1.00000000000000))*(x4596)*(x4599)))+(((IkReal(-1.00000000000000))*(x4597)*(x4598)))+(((IkReal(-0.550000000000000))*(x4598)))+(((IkReal(-0.550000000000000))*(x4596))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4598)*(x4599)))+(((IkReal(-1.00000000000000))*(x4596)*(x4597)))+(((IkReal(-1.00000000000000))*(x4596)*(x4599)))+(((IkReal(-1.00000000000000))*(x4597)*(x4598)))+(((IkReal(-0.550000000000000))*(x4598)))+(((IkReal(-0.550000000000000))*(x4596)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x4596)+(x4598))) != 0)?((IkReal)1/(((x4596)+(x4598)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4597)+(x4599)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x4598)*(x4599)))+(((IkReal(-1.00000000000000))*(x4596)*(x4597)))+(((IkReal(-1.00000000000000))*(x4596)*(x4599)))+(((IkReal(-1.00000000000000))*(x4597)*(x4598)))+(((IkReal(-0.550000000000000))*(x4598)))+(((IkReal(-0.550000000000000))*(x4596))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4598)*(x4599)))+(((IkReal(-1.00000000000000))*(x4596)*(x4597)))+(((IkReal(-1.00000000000000))*(x4596)*(x4599)))+(((IkReal(-1.00000000000000))*(x4597)*(x4598)))+(((IkReal(-0.550000000000000))*(x4598)))+(((IkReal(-0.550000000000000))*(x4596)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x4596)+(x4598))) != 0)?((IkReal)1/(((x4596)+(x4598)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4597)+(x4599)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x4598)*(x4599)))+(((IkReal(-1.00000000000000))*(x4596)*(x4597)))+(((IkReal(-1.00000000000000))*(x4596)*(x4599)))+(((IkReal(-1.00000000000000))*(x4597)*(x4598)))+(((IkReal(-0.550000000000000))*(x4598)))+(((IkReal(-0.550000000000000))*(x4596))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4598)*(x4599)))+(((IkReal(-1.00000000000000))*(x4596)*(x4597)))+(((IkReal(-1.00000000000000))*(x4596)*(x4599)))+(((IkReal(-1.00000000000000))*(x4597)*(x4598)))+(((IkReal(-0.550000000000000))*(x4598)))+(((IkReal(-0.550000000000000))*(x4596)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4600=IKsin(j1);
IkReal x4601=IKcos(j1);
IkReal x4602=((IkReal(0.300000000000000))*(cj3));
IkReal x4603=((IkReal(0.0450000000000000))*(cj3));
IkReal x4604=((cj0)*(px));
IkReal x4605=((py)*(sj0));
IkReal x4606=((IkReal(0.0450000000000000))*(sj3));
IkReal x4607=((IkReal(0.300000000000000))*(sj3));
IkReal x4608=((IkReal(0.0450000000000000))*(x4600));
IkReal x4609=((IkReal(1.00000000000000))*(x4601));
IkReal x4610=((IkReal(0.0900000000000000))*(x4601));
IkReal x4611=((IkReal(1.10000000000000))*(x4600));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4602)))+(((IkReal(-1.00000000000000))*(x4606)))+(((x4600)*(x4605)))+(((x4600)*(x4604))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4600)*(x4603)))+(x4608)+(((IkReal(-1.00000000000000))*(x4601)*(x4606)))+(((IkReal(-1.00000000000000))*(x4601)*(x4602)))+(((x4600)*(x4607)))+(((IkReal(-0.550000000000000))*(x4601))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4603)))+(x4607)+(((IkReal(-1.00000000000000))*(x4604)*(x4609)))+(((IkReal(-1.00000000000000))*(x4605)*(x4609))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x4601)))+(((x4601)*(x4607)))+(((IkReal(-1.00000000000000))*(x4604)))+(((IkReal(-1.00000000000000))*(x4605)))+(((IkReal(-1.00000000000000))*(x4601)*(x4603)))+(((x4600)*(x4602)))+(((x4600)*(x4606)))+(((IkReal(0.550000000000000))*(x4600))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x4605)*(x4611)))+(((x4605)*(x4610)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4604)*(x4610)))+(((x4604)*(x4611))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4612 = IKatan2WithCheck(((gconst56)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))),((gconst56)*(((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x4612.valid ) {
    continue;
}
j1array[0]=x4612.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4613=IKsin(j1);
IkReal x4614=IKcos(j1);
IkReal x4615=((IkReal(0.300000000000000))*(cj3));
IkReal x4616=((IkReal(0.0450000000000000))*(cj3));
IkReal x4617=((cj0)*(px));
IkReal x4618=((py)*(sj0));
IkReal x4619=((IkReal(0.0450000000000000))*(sj3));
IkReal x4620=((IkReal(0.300000000000000))*(sj3));
IkReal x4621=((IkReal(0.0450000000000000))*(x4613));
IkReal x4622=((IkReal(1.00000000000000))*(x4614));
IkReal x4623=((IkReal(0.0900000000000000))*(x4614));
IkReal x4624=((IkReal(1.10000000000000))*(x4613));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4619)))+(((IkReal(-1.00000000000000))*(x4615)))+(((x4613)*(x4618)))+(((x4613)*(x4617))));
evalcond[1]=((x4621)+(((x4613)*(x4620)))+(((IkReal(-1.00000000000000))*(x4614)*(x4619)))+(((IkReal(-1.00000000000000))*(x4614)*(x4615)))+(((IkReal(-0.550000000000000))*(x4614)))+(((IkReal(-1.00000000000000))*(x4613)*(x4616))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4618)*(x4622)))+(x4620)+(((IkReal(-1.00000000000000))*(x4616)))+(((IkReal(-1.00000000000000))*(x4617)*(x4622))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x4614)))+(((IkReal(-1.00000000000000))*(x4618)))+(((IkReal(-1.00000000000000))*(x4617)))+(((IkReal(0.550000000000000))*(x4613)))+(((IkReal(-1.00000000000000))*(x4614)*(x4616)))+(((x4614)*(x4620)))+(((x4613)*(x4619)))+(((x4613)*(x4615))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x4618)*(x4623)))+(((x4618)*(x4624)))+(((x4617)*(x4623)))+(((x4617)*(x4624))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x4625=((px)*(sj0));
IkReal x4626=((cj0)*(py));
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((x4625)+(((IkReal(-1.00000000000000))*(x4626))));
evalcond[3]=((x4626)+(((IkReal(-1.00000000000000))*(x4625))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((cj0)*(px)))+(((py)*(sj0)))));
dummyeval[0]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4627=((cj0)*(px));
IkReal x4628=((py)*(sj0));
IkReal x4629=((IkReal(6.66666666666667))*(cj3));
IkReal x4630=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((x4627)+(x4628));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x4627)*(x4629)))+(((IkReal(-1.00000000000000))*(x4628)*(x4630)))+(((IkReal(-1.00000000000000))*(x4627)*(x4630)))+(((IkReal(-1.00000000000000))*(x4628)*(x4629)))+(((IkReal(-12.2222222222222))*(x4628)))+(((IkReal(-12.2222222222222))*(x4627))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4631=((cj0)*(px));
IkReal x4632=((py)*(sj0));
IkReal x4633=((IkReal(6.66666666666667))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x4632)))+(((IkReal(-1.00000000000000))*(x4631)))+(((IkReal(-1.00000000000000))*(x4631)*(x4633)))+(((IkReal(-1.00000000000000))*(x4632)*(x4633)))+(((cj3)*(x4631)))+(((cj3)*(x4632))));
dummyeval[1]=((x4632)+(x4631));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x4634=((px)*(sj0));
IkReal x4635=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x4635)))+(x4634));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4634)))+(x4635));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4636=((cj0)*(px));
IkReal x4637=((py)*(sj0));
dummyeval[0]=((x4637)+(x4636));
dummyeval[1]=((((IkReal(-1.00000000000000))*((x4636)*(x4636))))+(((IkReal(-1.00000000000000))*((x4637)*(x4637))))+(((IkReal(-2.00000000000000))*(x4636)*(x4637))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x4638=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4638))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4638))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x4639=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4639))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4639))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x4640=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4640))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4640))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x4641=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4641))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4641))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4642=((cj0)*(px));
IkReal x4643=((py)*(sj0));
IkReal x4644=((IkReal(20.0000000000000))*(pp));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x4642)))+(((IkReal(20.0000000000000))*(x4643))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x4642)))+(((IkReal(20.0000000000000))*(x4643)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.80000000000000))*((x4642)*(x4642))))+(((IkReal(-3.60000000000000))*(x4642)*(x4643)))+(((IkReal(-1.80000000000000))*((x4643)*(x4643)))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*((x4642)*(x4642))))+(((IkReal(-3.60000000000000))*(x4642)*(x4643)))+(((IkReal(-1.80000000000000))*((x4643)*(x4643))))))):(IkReal)1.0e30))*(((((x4643)*(x4644)))+(((x4642)*(x4644)))+(((IkReal(-14.4500000000000))*(x4643)))+(((IkReal(-14.4500000000000))*(x4642))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x4642)))+(((IkReal(20.0000000000000))*(x4643))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x4642)))+(((IkReal(20.0000000000000))*(x4643)))))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(-1.80000000000000))*((x4642)*(x4642))))+(((IkReal(-3.60000000000000))*(x4642)*(x4643)))+(((IkReal(-1.80000000000000))*((x4643)*(x4643)))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*((x4642)*(x4642))))+(((IkReal(-3.60000000000000))*(x4642)*(x4643)))+(((IkReal(-1.80000000000000))*((x4643)*(x4643))))))):(IkReal)1.0e30))*(((((x4643)*(x4644)))+(((x4642)*(x4644)))+(((IkReal(-14.4500000000000))*(x4643)))+(((IkReal(-14.4500000000000))*(x4642)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x4642)))+(((IkReal(20.0000000000000))*(x4643))))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x4642)))+(((IkReal(20.0000000000000))*(x4643)))))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(-1.80000000000000))*((x4642)*(x4642))))+(((IkReal(-3.60000000000000))*(x4642)*(x4643)))+(((IkReal(-1.80000000000000))*((x4643)*(x4643)))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*((x4642)*(x4642))))+(((IkReal(-3.60000000000000))*(x4642)*(x4643)))+(((IkReal(-1.80000000000000))*((x4643)*(x4643))))))):(IkReal)1.0e30))*(((((x4643)*(x4644)))+(((x4642)*(x4644)))+(((IkReal(-14.4500000000000))*(x4643)))+(((IkReal(-14.4500000000000))*(x4642)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4645=IKsin(j1);
IkReal x4646=IKcos(j1);
IkReal x4647=((py)*(sj0));
IkReal x4648=((cj0)*(px));
IkReal x4649=((IkReal(0.0900000000000000))*(x4646));
IkReal x4650=((x4645)*(x4647));
evalcond[0]=((IkReal(-0.850000000000000))+(x4650)+(((x4645)*(x4648))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4646));
evalcond[2]=((((x4646)*(x4648)))+(((x4646)*(x4647))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4647)))+(((IkReal(-1.00000000000000))*(x4648)))+(((IkReal(0.850000000000000))*(x4645))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4647)*(x4649)))+(((IkReal(1.10000000000000))*(x4650)))+(((IkReal(-1.00000000000000))*(x4648)*(x4649)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4645)*(x4648))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4651=((cj0)*(px));
IkReal x4652=((py)*(sj0));
if( IKabs(((((IkReal(1.17647058823529))*(x4652)))+(((IkReal(1.17647058823529))*(x4651))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.53000000000000))*(x4652)))+(((IkReal(-1.53000000000000))*(x4651))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x4652)))+(((IkReal(-1.53000000000000))*(x4651)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x4651)*(x4651))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x4651)*(x4652)))+(((IkReal(-22.0000000000000))*((x4652)*(x4652)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x4652)))+(((IkReal(1.17647058823529))*(x4651)))))+IKsqr(((((IKabs(((((IkReal(-1.53000000000000))*(x4652)))+(((IkReal(-1.53000000000000))*(x4651))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x4652)))+(((IkReal(-1.53000000000000))*(x4651)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x4651)*(x4651))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x4651)*(x4652)))+(((IkReal(-22.0000000000000))*((x4652)*(x4652))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x4652)))+(((IkReal(1.17647058823529))*(x4651)))), ((((IKabs(((((IkReal(-1.53000000000000))*(x4652)))+(((IkReal(-1.53000000000000))*(x4651))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x4652)))+(((IkReal(-1.53000000000000))*(x4651)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x4651)*(x4651))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x4651)*(x4652)))+(((IkReal(-22.0000000000000))*((x4652)*(x4652))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4653=IKsin(j1);
IkReal x4654=IKcos(j1);
IkReal x4655=((py)*(sj0));
IkReal x4656=((cj0)*(px));
IkReal x4657=((IkReal(0.0900000000000000))*(x4654));
IkReal x4658=((x4653)*(x4655));
evalcond[0]=((IkReal(-0.850000000000000))+(((x4653)*(x4656)))+(x4658));
evalcond[1]=((IkReal(-0.850000000000000))*(x4654));
evalcond[2]=((((x4654)*(x4655)))+(((x4654)*(x4656))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4655)))+(((IkReal(-1.00000000000000))*(x4656)))+(((IkReal(0.850000000000000))*(x4653))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x4658)))+(((IkReal(-1.00000000000000))*(x4655)*(x4657)))+(((IkReal(1.10000000000000))*(x4653)*(x4656)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x4656)*(x4657))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4664 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4664.valid ) {
    continue;
}
IkReal x4659=x4664.value;
IkReal x4660=IKcos(x4659);
IkReal x4661=IKsin(x4659);
IkReal x4662=((px)*(x4661));
IkReal x4663=((py)*(x4660));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x4659)+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x4662)))+(((IkReal(-1.00000000000000))*(x4663))));
evalcond[3]=((x4662)+(x4663));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst62;
Atan2Value<IkReal> x4666 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4666.valid ) {
    continue;
}
IkReal x4665=x4666.value;
gconst62=IKsign(((((IkReal(-1.00000000000000))*(py)*(IKsin(x4665))))+(((px)*(IKcos(x4665))))));
Atan2Value<IkReal> x4668 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4668.valid ) {
    continue;
}
IkReal x4667=x4668.value;
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(IKsin(x4667))))+(((px)*(IKcos(x4667)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
Atan2Value<IkReal> x4675 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4675.valid ) {
    continue;
}
IkReal x4669=x4675.value;
IkReal x4670=((IkReal(6.66666666666667))*(cj3));
IkReal x4671=IKsin(x4669);
IkReal x4672=IKcos(x4669);
IkReal x4673=((px)*(x4672));
IkReal x4674=((py)*(x4671));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x4674)))+(x4673));
dummyeval[1]=((((sj3)*(x4674)))+(((IkReal(12.2222222222222))*(x4674)))+(((x4670)*(x4674)))+(((IkReal(-1.00000000000000))*(sj3)*(x4673)))+(((IkReal(-12.2222222222222))*(x4673)))+(((IkReal(-1.00000000000000))*(x4670)*(x4673))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4683 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4683.valid ) {
    continue;
}
IkReal x4676=x4683.value;
IkReal x4677=((IkReal(0.300000000000000))*(cj3));
IkReal x4678=((IkReal(0.0450000000000000))*(sj3));
IkReal x4679=IKsin(x4676);
IkReal x4680=IKcos(x4676);
IkReal x4681=((px)*(x4680));
IkReal x4682=((py)*(x4679));
if( IKabs(((((IKabs(((x4681)+(((IkReal(-1.00000000000000))*(x4682))))) != 0)?((IkReal)1/(((x4681)+(((IkReal(-1.00000000000000))*(x4682)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4678)+(x4677))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-0.550000000000000))*(x4681)))+(((IkReal(0.550000000000000))*(x4682)))+(((x4678)*(x4682)))+(((x4677)*(x4682)))+(((IkReal(-1.00000000000000))*(x4678)*(x4681)))+(((IkReal(-1.00000000000000))*(x4677)*(x4681))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x4681)))+(((IkReal(0.550000000000000))*(x4682)))+(((x4678)*(x4682)))+(((x4677)*(x4682)))+(((IkReal(-1.00000000000000))*(x4678)*(x4681)))+(((IkReal(-1.00000000000000))*(x4677)*(x4681)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x4681)+(((IkReal(-1.00000000000000))*(x4682))))) != 0)?((IkReal)1/(((x4681)+(((IkReal(-1.00000000000000))*(x4682)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4678)+(x4677)))))+IKsqr(((((IKabs(((((IkReal(-0.550000000000000))*(x4681)))+(((IkReal(0.550000000000000))*(x4682)))+(((x4678)*(x4682)))+(((x4677)*(x4682)))+(((IkReal(-1.00000000000000))*(x4678)*(x4681)))+(((IkReal(-1.00000000000000))*(x4677)*(x4681))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x4681)))+(((IkReal(0.550000000000000))*(x4682)))+(((x4678)*(x4682)))+(((x4677)*(x4682)))+(((IkReal(-1.00000000000000))*(x4678)*(x4681)))+(((IkReal(-1.00000000000000))*(x4677)*(x4681)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x4681)+(((IkReal(-1.00000000000000))*(x4682))))) != 0)?((IkReal)1/(((x4681)+(((IkReal(-1.00000000000000))*(x4682)))))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4678)+(x4677)))), ((((IKabs(((((IkReal(-0.550000000000000))*(x4681)))+(((IkReal(0.550000000000000))*(x4682)))+(((x4678)*(x4682)))+(((x4677)*(x4682)))+(((IkReal(-1.00000000000000))*(x4678)*(x4681)))+(((IkReal(-1.00000000000000))*(x4677)*(x4681))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x4681)))+(((IkReal(0.550000000000000))*(x4682)))+(((x4678)*(x4682)))+(((x4677)*(x4682)))+(((IkReal(-1.00000000000000))*(x4678)*(x4681)))+(((IkReal(-1.00000000000000))*(x4677)*(x4681)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4684=IKsin(j1);
Atan2Value<IkReal> x4698 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4698.valid ) {
    continue;
}
IkReal x4685=x4698.value;
IkReal x4686=IKcos(j1);
IkReal x4687=((IkReal(0.300000000000000))*(cj3));
IkReal x4688=((IkReal(0.0450000000000000))*(cj3));
IkReal x4689=((IkReal(0.0450000000000000))*(sj3));
IkReal x4690=((IkReal(0.300000000000000))*(sj3));
IkReal x4691=IKcos(x4685);
IkReal x4692=IKsin(x4685);
IkReal x4693=((IkReal(0.0450000000000000))*(x4684));
IkReal x4694=((IkReal(0.0900000000000000))*(x4686));
IkReal x4695=((py)*(x4692));
IkReal x4696=((px)*(x4691));
IkReal x4697=((x4684)*(x4696));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4684)*(x4695)))+(x4697)+(((IkReal(-1.00000000000000))*(x4687)))+(((IkReal(-1.00000000000000))*(x4689))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4684)*(x4690)))+(((IkReal(-1.00000000000000))*(x4686)*(x4687)))+(((IkReal(-1.00000000000000))*(x4686)*(x4689)))+(((IkReal(-0.550000000000000))*(x4686)))+(((IkReal(-1.00000000000000))*(x4693)))+(((x4684)*(x4688))));
evalcond[2]=((IkReal(0.0450000000000000))+(x4690)+(((x4686)*(x4696)))+(((IkReal(-1.00000000000000))*(x4686)*(x4695)))+(((IkReal(-1.00000000000000))*(x4688))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4686)*(x4690)))+(((IkReal(0.550000000000000))*(x4684)))+(x4695)+(((IkReal(-1.00000000000000))*(x4696)))+(((IkReal(-0.0450000000000000))*(x4686)))+(((x4686)*(x4688)))+(((x4684)*(x4689)))+(((x4684)*(x4687))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(x4684)*(x4695)))+(((x4694)*(x4695)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4697)))+(((IkReal(-1.00000000000000))*(x4694)*(x4696))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4699 = IKatan2WithCheck(((gconst62)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))),((gconst62)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x4699.valid ) {
    continue;
}
j1array[0]=x4699.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4700=IKsin(j1);
Atan2Value<IkReal> x4714 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4714.valid ) {
    continue;
}
IkReal x4701=x4714.value;
IkReal x4702=IKcos(j1);
IkReal x4703=((IkReal(0.300000000000000))*(cj3));
IkReal x4704=((IkReal(0.0450000000000000))*(cj3));
IkReal x4705=((IkReal(0.0450000000000000))*(sj3));
IkReal x4706=((IkReal(0.300000000000000))*(sj3));
IkReal x4707=IKcos(x4701);
IkReal x4708=IKsin(x4701);
IkReal x4709=((IkReal(0.0450000000000000))*(x4700));
IkReal x4710=((IkReal(0.0900000000000000))*(x4702));
IkReal x4711=((py)*(x4708));
IkReal x4712=((px)*(x4707));
IkReal x4713=((x4700)*(x4712));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4700)*(x4711)))+(x4713)+(((IkReal(-1.00000000000000))*(x4703)))+(((IkReal(-1.00000000000000))*(x4705))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4700)*(x4706)))+(((IkReal(-0.550000000000000))*(x4702)))+(((IkReal(-1.00000000000000))*(x4702)*(x4705)))+(((IkReal(-1.00000000000000))*(x4702)*(x4703)))+(((x4700)*(x4704)))+(((IkReal(-1.00000000000000))*(x4709))));
evalcond[2]=((IkReal(0.0450000000000000))+(x4706)+(((IkReal(-1.00000000000000))*(x4702)*(x4711)))+(((IkReal(-1.00000000000000))*(x4704)))+(((x4702)*(x4712))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4712)))+(((IkReal(-0.0450000000000000))*(x4702)))+(((IkReal(-1.00000000000000))*(x4702)*(x4706)))+(x4711)+(((IkReal(0.550000000000000))*(x4700)))+(((x4700)*(x4705)))+(((x4700)*(x4703)))+(((x4702)*(x4704))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4710)*(x4712)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4710)*(x4711)))+(((IkReal(1.10000000000000))*(x4713)))+(((IkReal(-1.10000000000000))*(x4700)*(x4711))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4721 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4721.valid ) {
    continue;
}
IkReal x4715=x4721.value;
IkReal x4716=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4715))));
IkReal x4717=IKcos(x4716);
IkReal x4718=IKsin(x4716);
IkReal x4719=((py)*(x4717));
IkReal x4720=((px)*(x4718));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x4715)+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x4719)))+(x4720));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4720)))+(x4719));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst63;
gconst63=IKsign(((IkReal(0.304525000000000))+(((IkReal(0.0920250000000000))*((sj3)*(sj3))))+(((IkReal(0.0920250000000000))*((cj3)*(cj3))))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3)))));
dummyeval[0]=((IkReal(3.98071895424837))+(sj3)+(((IkReal(4.26078431372549))*(cj3)))+(((IkReal(1.20294117647059))*((cj3)*(cj3))))+(((IkReal(1.20294117647059))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4722=((IkReal(6.66666666666667))*(cj3));
IkReal x4723=((IkReal(1.00000000000000))*(sj3));
Atan2Value<IkReal> x4729 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4729.valid ) {
    continue;
}
IkReal x4724=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4729.value))));
IkReal x4725=IKcos(x4724);
IkReal x4726=IKsin(x4724);
IkReal x4727=((py)*(x4726));
IkReal x4728=((px)*(x4725));
dummyeval[0]=((x4728)+(x4727));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x4722)*(x4728)))+(((IkReal(-1.00000000000000))*(x4722)*(x4727)))+(((IkReal(-1.00000000000000))*(x4723)*(x4728)))+(((IkReal(-1.00000000000000))*(x4723)*(x4727)))+(((IkReal(-12.2222222222222))*(x4727)))+(((IkReal(-12.2222222222222))*(x4728))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4730=((IkReal(6.66666666666667))*(sj3));
Atan2Value<IkReal> x4736 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4736.valid ) {
    continue;
}
IkReal x4731=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4736.value))));
IkReal x4732=IKcos(x4731);
IkReal x4733=IKsin(x4731);
IkReal x4734=((py)*(x4733));
IkReal x4735=((px)*(x4732));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x4730)*(x4735)))+(((IkReal(-1.00000000000000))*(x4730)*(x4734)))+(((IkReal(-1.00000000000000))*(x4734)))+(((IkReal(-1.00000000000000))*(x4735)))+(((cj3)*(x4735)))+(((cj3)*(x4734))));
dummyeval[1]=((x4734)+(x4735));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
Atan2Value<IkReal> x4742 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4742.valid ) {
    continue;
}
IkReal x4737=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4742.value))));
IkReal x4738=IKcos(x4737);
IkReal x4739=IKsin(x4737);
IkReal x4740=((py)*(x4738));
IkReal x4741=((px)*(x4739));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((x4741)+(((IkReal(-1.00000000000000))*(x4740))));
evalcond[3]=((x4740)+(((IkReal(-1.00000000000000))*(x4741))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x4743=x4737;
dummyeval[0]=((((IkReal(-1.00000000000000))*(py)*(IKsin(x4743))))+(((IkReal(-1.00000000000000))*(px)*(IKcos(x4743)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x4744=(py)*(py);
IkReal x4745=x4737;
IkReal x4746=IKcos(x4745);
IkReal x4747=IKsin(x4745);
IkReal x4748=(x4746)*(x4746);
IkReal x4749=((px)*(x4746));
IkReal x4750=((py)*(x4747));
dummyeval[0]=((x4750)+(x4749));
dummyeval[1]=((((IkReal(-2.00000000000000))*(x4749)*(x4750)))+(((IkReal(-1.00000000000000))*(x4748)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x4744)))+(((x4744)*(x4748))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4751=(py)*(py);
IkReal x4752=((IkReal(20.0000000000000))*(pp));
IkReal x4753=x4737;
IkReal x4754=IKcos(x4753);
IkReal x4755=IKsin(x4753);
IkReal x4756=(x4754)*(x4754);
IkReal x4757=((px)*(x4754));
IkReal x4758=((py)*(x4755));
IkReal x4759=((IkReal(20.0000000000000))*(x4757));
if( IKabs(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x4758)))+(x4759))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x4758)))+(x4759)))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.80000000000000))*(x4756)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x4757)*(x4758)))+(((IkReal(1.80000000000000))*(x4751)*(x4756)))+(((IkReal(-1.80000000000000))*(x4751))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*(x4756)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x4757)*(x4758)))+(((IkReal(1.80000000000000))*(x4751)*(x4756)))+(((IkReal(-1.80000000000000))*(x4751)))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4757)))+(((IkReal(-14.4500000000000))*(x4758)))+(((x4752)*(x4757)))+(((x4752)*(x4758))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x4758)))+(x4759))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x4758)))+(x4759)))):(IkReal)1.0e30))))+IKsqr(((((IKabs(((((IkReal(-1.80000000000000))*(x4756)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x4757)*(x4758)))+(((IkReal(1.80000000000000))*(x4751)*(x4756)))+(((IkReal(-1.80000000000000))*(x4751))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*(x4756)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x4757)*(x4758)))+(((IkReal(1.80000000000000))*(x4751)*(x4756)))+(((IkReal(-1.80000000000000))*(x4751)))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4757)))+(((IkReal(-14.4500000000000))*(x4758)))+(((x4752)*(x4757)))+(((x4752)*(x4758)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(17.0000000000000))*(((IKabs(((((IkReal(20.0000000000000))*(x4758)))+(x4759))) != 0)?((IkReal)1/(((((IkReal(20.0000000000000))*(x4758)))+(x4759)))):(IkReal)1.0e30))), ((((IKabs(((((IkReal(-1.80000000000000))*(x4756)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x4757)*(x4758)))+(((IkReal(1.80000000000000))*(x4751)*(x4756)))+(((IkReal(-1.80000000000000))*(x4751))))) != 0)?((IkReal)1/(((((IkReal(-1.80000000000000))*(x4756)*((px)*(px))))+(((IkReal(-3.60000000000000))*(x4757)*(x4758)))+(((IkReal(1.80000000000000))*(x4751)*(x4756)))+(((IkReal(-1.80000000000000))*(x4751)))))):(IkReal)1.0e30))*(((((IkReal(-14.4500000000000))*(x4757)))+(((IkReal(-14.4500000000000))*(x4758)))+(((x4752)*(x4757)))+(((x4752)*(x4758)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4760=IKsin(j1);
IkReal x4761=IKcos(j1);
IkReal x4762=x4737;
IkReal x4763=((IkReal(0.0900000000000000))*(x4761));
IkReal x4764=((IkReal(1.10000000000000))*(x4760));
IkReal x4765=IKsin(x4762);
IkReal x4766=IKcos(x4762);
IkReal x4767=((py)*(x4765));
IkReal x4768=((px)*(x4766));
IkReal x4769=((x4760)*(x4767));
IkReal x4770=((x4761)*(x4768));
evalcond[0]=((IkReal(-0.850000000000000))+(x4769)+(((x4760)*(x4768))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4761));
evalcond[2]=((x4770)+(((x4761)*(x4767))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4768)))+(((IkReal(-1.00000000000000))*(x4767)))+(((IkReal(0.850000000000000))*(x4760))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4763)*(x4768)))+(((IkReal(-1.00000000000000))*(x4763)*(x4767)))+(((x4764)*(x4768)))+(((x4764)*(x4767)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4771=x4737;
IkReal x4772=IKcos(x4771);
IkReal x4773=IKsin(x4771);
IkReal x4774=((py)*(x4773));
IkReal x4775=((px)*(x4772));
if( IKabs(((((IkReal(1.17647058823529))*(x4775)))+(((IkReal(1.17647058823529))*(x4774))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.53000000000000))*(x4774)))+(((IkReal(-1.53000000000000))*(x4775))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x4774)))+(((IkReal(-1.53000000000000))*(x4775)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x4775)*(x4775))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x4774)*(x4775)))+(((IkReal(-22.0000000000000))*((x4774)*(x4774)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.17647058823529))*(x4775)))+(((IkReal(1.17647058823529))*(x4774)))))+IKsqr(((((IKabs(((((IkReal(-1.53000000000000))*(x4774)))+(((IkReal(-1.53000000000000))*(x4775))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x4774)))+(((IkReal(-1.53000000000000))*(x4775)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x4775)*(x4775))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x4774)*(x4775)))+(((IkReal(-22.0000000000000))*((x4774)*(x4774))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IkReal(1.17647058823529))*(x4775)))+(((IkReal(1.17647058823529))*(x4774)))), ((((IKabs(((((IkReal(-1.53000000000000))*(x4774)))+(((IkReal(-1.53000000000000))*(x4775))))) != 0)?((IkReal)1/(((((IkReal(-1.53000000000000))*(x4774)))+(((IkReal(-1.53000000000000))*(x4775)))))):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(-22.0000000000000))*((x4775)*(x4775))))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-44.0000000000000))*(x4774)*(x4775)))+(((IkReal(-22.0000000000000))*((x4774)*(x4774))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4776=IKsin(j1);
IkReal x4777=IKcos(j1);
IkReal x4778=x4737;
IkReal x4779=((IkReal(0.0900000000000000))*(x4777));
IkReal x4780=((IkReal(1.10000000000000))*(x4776));
IkReal x4781=IKsin(x4778);
IkReal x4782=IKcos(x4778);
IkReal x4783=((py)*(x4781));
IkReal x4784=((px)*(x4782));
IkReal x4785=((x4776)*(x4783));
IkReal x4786=((x4777)*(x4784));
evalcond[0]=((IkReal(-0.850000000000000))+(((x4776)*(x4784)))+(x4785));
evalcond[1]=((IkReal(-0.850000000000000))*(x4777));
evalcond[2]=((((x4777)*(x4783)))+(x4786));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4783)))+(((IkReal(-1.00000000000000))*(x4784)))+(((IkReal(0.850000000000000))*(x4776))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4779)*(x4784)))+(((IkReal(-1.00000000000000))*(x4779)*(x4783)))+(((x4780)*(x4783)))+(((x4780)*(x4784)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4789 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x4789.valid ) {
    continue;
}
IkReal x4787=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4789.value)))));
IkReal x4788=((py)*(x4787));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-1.00000000000000))*(x4788));
evalcond[3]=x4788;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4790 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x4790.valid ) {
    continue;
}
dummyeval[1]=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4790.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
Atan2Value<IkReal> x4791 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x4791.valid ) {
    continue;
}
dummyeval[1]=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4791.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4794 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x4794.valid ) {
    continue;
}
IkReal x4792=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4794.value)))));
IkReal x4793=((py)*(x4792));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4792) != 0)?((IkReal)1/(x4792)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4792) != 0)?((IkReal)1/((x4792)*(x4792))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x4793)))+(((IkReal(-14.4500000000000))*(x4793))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4792) != 0)?((IkReal)1/(x4792)):(IkReal)1.0e30))))+IKsqr(((IkReal(-0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4792) != 0)?((IkReal)1/((x4792)*(x4792))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x4793)))+(((IkReal(-14.4500000000000))*(x4793)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4792) != 0)?((IkReal)1/(x4792)):(IkReal)1.0e30))), ((IkReal(-0.555555555555556))*(((IKabs(py) != 0)?((IkReal)1/((py)*(py))):(IkReal)1.0e30))*(((IKabs(x4792) != 0)?((IkReal)1/((x4792)*(x4792))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x4793)))+(((IkReal(-14.4500000000000))*(x4793)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4795=IKcos(j1);
IkReal x4796=IKsin(j1);
IkReal x4797=x4792;
IkReal x4798=((py)*(x4797));
IkReal x4799=((x4796)*(x4798));
IkReal x4800=((x4795)*(x4798));
evalcond[0]=((IkReal(-0.850000000000000))+(x4799));
evalcond[1]=((IkReal(-0.850000000000000))*(x4795));
evalcond[2]=x4800;
evalcond[3]=((((IkReal(-1.00000000000000))*(x4798)))+(((IkReal(0.850000000000000))*(x4796))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x4800)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4799))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4802 = IKatan2WithCheck(IkReal(0),py,IKFAST_ATAN2_MAGTHRESH);
if( !x4802.valid ) {
    continue;
}
IkReal x4801=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4802.value)))));
if( IKabs(((IkReal(1.17647058823529))*(py)*(x4801))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4801) != 0)?((IkReal)1/(x4801)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4801)*(x4801)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(x4801)))+IKsqr(((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4801) != 0)?((IkReal)1/(x4801)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4801)*(x4801))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(x4801)), ((IkReal(-0.653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(x4801) != 0)?((IkReal)1/(x4801)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((py)*(py))*((x4801)*(x4801))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4803=IKcos(j1);
IkReal x4804=IKsin(j1);
IkReal x4805=x4801;
IkReal x4806=((py)*(x4805));
IkReal x4807=((x4804)*(x4806));
IkReal x4808=((x4803)*(x4806));
evalcond[0]=((IkReal(-0.850000000000000))+(x4807));
evalcond[1]=((IkReal(-0.850000000000000))*(x4803));
evalcond[2]=x4808;
evalcond[3]=((((IkReal(0.850000000000000))*(x4804)))+(((IkReal(-1.00000000000000))*(x4806))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x4808)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4807))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
Atan2Value<IkReal> x4811 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4811.valid ) {
    continue;
}
IkReal x4809=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4811.value)))));
IkReal x4810=((px)*(x4809));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4810;
evalcond[3]=((IkReal(-1.00000000000000))*(x4810));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4812 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4812.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4812.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=px;
Atan2Value<IkReal> x4813 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4813.valid ) {
    continue;
}
dummyeval[1]=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4813.value)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4816 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4816.valid ) {
    continue;
}
IkReal x4814=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4816.value)))));
IkReal x4815=((px)*(x4814));
if( IKabs(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4814) != 0)?((IkReal)1/(x4814)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4814) != 0)?((IkReal)1/((x4814)*(x4814))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x4815)))+(((IkReal(-14.4500000000000))*(x4815))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4814) != 0)?((IkReal)1/(x4814)):(IkReal)1.0e30))))+IKsqr(((IkReal(-0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4814) != 0)?((IkReal)1/((x4814)*(x4814))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x4815)))+(((IkReal(-14.4500000000000))*(x4815)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4814) != 0)?((IkReal)1/(x4814)):(IkReal)1.0e30))), ((IkReal(-0.555555555555556))*(((IKabs(px) != 0)?((IkReal)1/((px)*(px))):(IkReal)1.0e30))*(((IKabs(x4814) != 0)?((IkReal)1/((x4814)*(x4814))):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(pp)*(x4815)))+(((IkReal(-14.4500000000000))*(x4815)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4817=IKcos(j1);
IkReal x4818=IKsin(j1);
IkReal x4819=x4814;
IkReal x4820=((px)*(x4819));
IkReal x4821=((x4817)*(x4820));
IkReal x4822=((x4818)*(x4820));
evalcond[0]=((IkReal(-0.850000000000000))+(x4822));
evalcond[1]=((IkReal(-0.850000000000000))*(x4817));
evalcond[2]=x4821;
evalcond[3]=((((IkReal(-1.00000000000000))*(x4820)))+(((IkReal(0.850000000000000))*(x4818))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x4821)))+(((IkReal(1.10000000000000))*(x4822)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4824 = IKatan2WithCheck(px,IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if( !x4824.valid ) {
    continue;
}
IkReal x4823=IKcos(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4824.value)))));
if( IKabs(((IkReal(1.17647058823529))*(px)*(x4823))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4823) != 0)?((IkReal)1/(x4823)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4823)*(x4823)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(px)*(x4823)))+IKsqr(((IkReal(-0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4823) != 0)?((IkReal)1/(x4823)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4823)*(x4823))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(px)*(x4823)), ((IkReal(-0.653594771241830))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IKabs(x4823) != 0)?((IkReal)1/(x4823)):(IkReal)1.0e30))*(((IkReal(3.61250000000000))+(((IkReal(17.0000000000000))*(pp)))+(((IkReal(-22.0000000000000))*((px)*(px))*((x4823)*(x4823))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4825=IKcos(j1);
IkReal x4826=IKsin(j1);
IkReal x4827=x4823;
IkReal x4828=((px)*(x4827));
IkReal x4829=((x4825)*(x4828));
IkReal x4830=((x4826)*(x4828));
evalcond[0]=((IkReal(-0.850000000000000))+(x4830));
evalcond[1]=((IkReal(-0.850000000000000))*(x4825));
evalcond[2]=x4829;
evalcond[3]=((((IkReal(-1.00000000000000))*(x4828)))+(((IkReal(0.850000000000000))*(x4826))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x4829)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4830))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4831=((IkReal(0.0450000000000000))*(cj3));
IkReal x4832=((IkReal(0.300000000000000))*(sj3));
Atan2Value<IkReal> x4838 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4838.valid ) {
    continue;
}
IkReal x4833=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4838.value))));
IkReal x4834=IKsin(x4833);
IkReal x4835=IKcos(x4833);
IkReal x4836=((px)*(x4835));
IkReal x4837=((py)*(x4834));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x4832)*(x4836)))+(((IkReal(-1.00000000000000))*(x4832)*(x4837)))+(((x4831)*(x4837)))+(((x4831)*(x4836)))+(((IkReal(-0.0450000000000000))*(x4837)))+(((IkReal(-0.0450000000000000))*(x4836))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4832)*(x4836)))+(((IkReal(-1.00000000000000))*(x4832)*(x4837)))+(((x4831)*(x4837)))+(((x4831)*(x4836)))+(((IkReal(-0.0450000000000000))*(x4837)))+(((IkReal(-0.0450000000000000))*(x4836)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x4837)+(x4836))) != 0)?((IkReal)1/(((x4837)+(x4836)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4832)))+(x4831))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x4832)*(x4836)))+(((IkReal(-1.00000000000000))*(x4832)*(x4837)))+(((x4831)*(x4837)))+(((x4831)*(x4836)))+(((IkReal(-0.0450000000000000))*(x4837)))+(((IkReal(-0.0450000000000000))*(x4836))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4832)*(x4836)))+(((IkReal(-1.00000000000000))*(x4832)*(x4837)))+(((x4831)*(x4837)))+(((x4831)*(x4836)))+(((IkReal(-0.0450000000000000))*(x4837)))+(((IkReal(-0.0450000000000000))*(x4836)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((x4837)+(x4836))) != 0)?((IkReal)1/(((x4837)+(x4836)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4832)))+(x4831)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x4832)*(x4836)))+(((IkReal(-1.00000000000000))*(x4832)*(x4837)))+(((x4831)*(x4837)))+(((x4831)*(x4836)))+(((IkReal(-0.0450000000000000))*(x4837)))+(((IkReal(-0.0450000000000000))*(x4836))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4832)*(x4836)))+(((IkReal(-1.00000000000000))*(x4832)*(x4837)))+(((x4831)*(x4837)))+(((x4831)*(x4836)))+(((IkReal(-0.0450000000000000))*(x4837)))+(((IkReal(-0.0450000000000000))*(x4836)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((x4837)+(x4836))) != 0)?((IkReal)1/(((x4837)+(x4836)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4832)))+(x4831)))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4839=IKsin(j1);
IkReal x4840=IKcos(j1);
IkReal x4841=((IkReal(0.300000000000000))*(cj3));
IkReal x4842=((IkReal(0.0450000000000000))*(cj3));
IkReal x4843=((IkReal(0.0450000000000000))*(sj3));
IkReal x4844=((IkReal(0.300000000000000))*(sj3));
IkReal x4845=x4833;
IkReal x4846=((IkReal(0.0450000000000000))*(x4839));
IkReal x4847=((IkReal(0.0900000000000000))*(x4840));
IkReal x4848=((IkReal(1.10000000000000))*(x4839));
IkReal x4849=IKsin(x4845);
IkReal x4850=IKcos(x4845);
IkReal x4851=((px)*(x4850));
IkReal x4852=((py)*(x4849));
IkReal x4853=((x4840)*(x4851));
IkReal x4854=((x4839)*(x4852));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4843)))+(((IkReal(-1.00000000000000))*(x4841)))+(((x4839)*(x4851)))+(x4854));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4846)))+(((IkReal(-1.00000000000000))*(x4839)*(x4844)))+(((IkReal(-1.00000000000000))*(x4840)*(x4843)))+(((IkReal(-1.00000000000000))*(x4840)*(x4841)))+(((IkReal(-0.550000000000000))*(x4840)))+(((x4839)*(x4842))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x4840)*(x4852)))+(((IkReal(-1.00000000000000))*(x4842)))+(x4853)+(x4844));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x4840)))+(((IkReal(0.550000000000000))*(x4839)))+(((IkReal(-1.00000000000000))*(x4840)*(x4844)))+(((x4840)*(x4842)))+(((IkReal(-1.00000000000000))*(x4852)))+(((IkReal(-1.00000000000000))*(x4851)))+(((x4839)*(x4843)))+(((x4839)*(x4841))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4847)*(x4851)))+(((IkReal(-1.00000000000000))*(x4847)*(x4852)))+(((x4848)*(x4851)))+(((x4848)*(x4852)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4862 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4862.valid ) {
    continue;
}
IkReal x4855=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4862.value))));
IkReal x4856=((IkReal(-0.0450000000000000))*(sj3));
IkReal x4857=((IkReal(-0.300000000000000))*(cj3));
IkReal x4858=IKcos(x4855);
IkReal x4859=IKsin(x4855);
IkReal x4860=((py)*(x4859));
IkReal x4861=((px)*(x4858));
if( IKabs(((((IKabs(((x4860)+(x4861))) != 0)?((IkReal)1/(((x4860)+(x4861)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-0.550000000000000))*(x4860)))+(((IkReal(-0.550000000000000))*(x4861)))+(((x4857)*(x4860)))+(((x4857)*(x4861)))+(((x4856)*(x4860)))+(((x4856)*(x4861))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x4860)))+(((IkReal(-0.550000000000000))*(x4861)))+(((x4857)*(x4860)))+(((x4857)*(x4861)))+(((x4856)*(x4860)))+(((x4856)*(x4861)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x4860)+(x4861))) != 0)?((IkReal)1/(((x4860)+(x4861)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))))+IKsqr(((((IKabs(((((IkReal(-0.550000000000000))*(x4860)))+(((IkReal(-0.550000000000000))*(x4861)))+(((x4857)*(x4860)))+(((x4857)*(x4861)))+(((x4856)*(x4860)))+(((x4856)*(x4861))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x4860)))+(((IkReal(-0.550000000000000))*(x4861)))+(((x4857)*(x4860)))+(((x4857)*(x4861)))+(((x4856)*(x4860)))+(((x4856)*(x4861)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x4860)+(x4861))) != 0)?((IkReal)1/(((x4860)+(x4861)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))), ((((IKabs(((((IkReal(-0.550000000000000))*(x4860)))+(((IkReal(-0.550000000000000))*(x4861)))+(((x4857)*(x4860)))+(((x4857)*(x4861)))+(((x4856)*(x4860)))+(((x4856)*(x4861))))) != 0)?((IkReal)1/(((((IkReal(-0.550000000000000))*(x4860)))+(((IkReal(-0.550000000000000))*(x4861)))+(((x4857)*(x4860)))+(((x4857)*(x4861)))+(((x4856)*(x4860)))+(((x4856)*(x4861)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4863=IKsin(j1);
IkReal x4864=IKcos(j1);
IkReal x4865=((IkReal(0.300000000000000))*(cj3));
IkReal x4866=((IkReal(0.0450000000000000))*(cj3));
IkReal x4867=((IkReal(0.0450000000000000))*(sj3));
IkReal x4868=((IkReal(0.300000000000000))*(sj3));
IkReal x4869=x4855;
IkReal x4870=((IkReal(0.0450000000000000))*(x4863));
IkReal x4871=((IkReal(0.0900000000000000))*(x4864));
IkReal x4872=((IkReal(1.10000000000000))*(x4863));
IkReal x4873=IKsin(x4869);
IkReal x4874=IKcos(x4869);
IkReal x4875=((px)*(x4874));
IkReal x4876=((py)*(x4873));
IkReal x4877=((x4864)*(x4875));
IkReal x4878=((x4863)*(x4876));
evalcond[0]=((IkReal(-0.550000000000000))+(((x4863)*(x4875)))+(((IkReal(-1.00000000000000))*(x4867)))+(((IkReal(-1.00000000000000))*(x4865)))+(x4878));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4863)*(x4868)))+(((IkReal(-0.550000000000000))*(x4864)))+(((IkReal(-1.00000000000000))*(x4864)*(x4867)))+(((IkReal(-1.00000000000000))*(x4864)*(x4865)))+(((x4863)*(x4866)))+(((IkReal(-1.00000000000000))*(x4870))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x4866)))+(((x4864)*(x4876)))+(x4868)+(x4877));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4864)*(x4868)))+(((IkReal(0.550000000000000))*(x4863)))+(((x4863)*(x4867)))+(((x4863)*(x4865)))+(((IkReal(-1.00000000000000))*(x4875)))+(((IkReal(-1.00000000000000))*(x4876)))+(((IkReal(-0.0450000000000000))*(x4864)))+(((x4864)*(x4866))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x4872)*(x4876)))+(((x4872)*(x4875)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x4871)*(x4876)))+(((IkReal(-1.00000000000000))*(x4871)*(x4875))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4879=((IkReal(0.0450000000000000))*(sj3));
IkReal x4880=((IkReal(0.0450000000000000))*(cj3));
IkReal x4881=((IkReal(0.300000000000000))*(cj3));
Atan2Value<IkReal> x4889 = IKatan2WithCheck(px,py,IKFAST_ATAN2_MAGTHRESH);
if( !x4889.valid ) {
    continue;
}
IkReal x4882=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x4889.value))));
IkReal x4883=((IkReal(-0.300000000000000))*(sj3));
IkReal x4884=IKcos(x4882);
IkReal x4885=IKsin(x4882);
IkReal x4886=((py)*(x4885));
IkReal x4887=((px)*(x4884));
IkReal x4888=((sj3)*(x4886));
Atan2Value<IkReal> x4890 = IKatan2WithCheck(((gconst63)*(((((IkReal(0.550000000000000))*(x4887)))+(((IkReal(0.550000000000000))*(x4886)))+(((x4879)*(x4886)))+(((x4879)*(x4887)))+(((x4881)*(x4886)))+(((x4881)*(x4887)))))),((gconst63)*(((((IkReal(-0.0450000000000000))*(x4886)))+(((IkReal(-0.0450000000000000))*(x4887)))+(((x4880)*(x4886)))+(((x4880)*(x4887)))+(((x4883)*(x4887)))+(((x4883)*(x4886)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x4890.valid ) {
    continue;
}
j1array[0]=x4890.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4891=IKsin(j1);
IkReal x4892=IKcos(j1);
IkReal x4893=((IkReal(0.300000000000000))*(cj3));
IkReal x4894=((IkReal(0.0450000000000000))*(cj3));
IkReal x4895=((IkReal(0.0450000000000000))*(sj3));
IkReal x4896=((IkReal(0.300000000000000))*(sj3));
IkReal x4897=x4882;
IkReal x4898=((IkReal(0.0450000000000000))*(x4891));
IkReal x4899=((IkReal(0.0900000000000000))*(x4892));
IkReal x4900=((IkReal(1.10000000000000))*(x4891));
IkReal x4901=IKsin(x4897);
IkReal x4902=IKcos(x4897);
IkReal x4903=((px)*(x4902));
IkReal x4904=((py)*(x4901));
IkReal x4905=((x4892)*(x4903));
IkReal x4906=((x4891)*(x4904));
evalcond[0]=((IkReal(-0.550000000000000))+(x4906)+(((IkReal(-1.00000000000000))*(x4893)))+(((IkReal(-1.00000000000000))*(x4895)))+(((x4891)*(x4903))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x4898)))+(((IkReal(-0.550000000000000))*(x4892)))+(((x4891)*(x4894)))+(((IkReal(-1.00000000000000))*(x4891)*(x4896)))+(((IkReal(-1.00000000000000))*(x4892)*(x4893)))+(((IkReal(-1.00000000000000))*(x4892)*(x4895))));
evalcond[2]=((IkReal(0.0450000000000000))+(x4905)+(((IkReal(-1.00000000000000))*(x4894)))+(((x4892)*(x4904)))+(x4896));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x4892)))+(((x4892)*(x4894)))+(((IkReal(0.550000000000000))*(x4891)))+(((IkReal(-1.00000000000000))*(x4903)))+(((IkReal(-1.00000000000000))*(x4904)))+(((x4891)*(x4893)))+(((x4891)*(x4895)))+(((IkReal(-1.00000000000000))*(x4892)*(x4896))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4899)*(x4904)))+(((IkReal(-1.00000000000000))*(x4899)*(x4903)))+(((x4900)*(x4904)))+(((x4900)*(x4903)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x4907=((cj0)*(py));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(-1.00000000000000))*(x4907));
evalcond[3]=x4907;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=py;
dummyeval[1]=sj0;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x4908=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4908))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4908))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x4909=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4909))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4909))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x4910=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(py);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4910))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4910))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4911=((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30);
IkReal x4912=((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30);
IkReal x4913=((x4911)*(x4912));
if( IKabs(((IkReal(0.850000000000000))*(x4913))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x4913)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x4913)))+IKsqr(((IkReal(0.0555555555555556))*(x4913)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x4913)), ((IkReal(0.0555555555555556))*(x4913)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4914=IKcos(j1);
IkReal x4915=IKsin(j1);
IkReal x4916=((py)*(sj0));
IkReal x4917=((x4915)*(x4916));
evalcond[0]=((IkReal(-0.850000000000000))+(x4917));
evalcond[1]=((IkReal(-0.850000000000000))*(x4914));
evalcond[2]=((x4914)*(x4916));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4916)))+(((IkReal(0.850000000000000))*(x4915))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x4914)*(x4916)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4917))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(py)*(sj0))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(py)*(sj0)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(py)*(sj0)), ((IkReal(0.00653594771241830))*(((IKabs(py) != 0)?((IkReal)1/(py)):(IkReal)1.0e30))*(((IKabs(sj0) != 0)?((IkReal)1/(sj0)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1700.00000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4918=IKcos(j1);
IkReal x4919=IKsin(j1);
IkReal x4920=((py)*(sj0));
IkReal x4921=((x4919)*(x4920));
evalcond[0]=((IkReal(-0.850000000000000))+(x4921));
evalcond[1]=((IkReal(-0.850000000000000))*(x4918));
evalcond[2]=((x4918)*(x4920));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4920)))+(((IkReal(0.850000000000000))*(x4919))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x4921)))+(((IkReal(-0.0900000000000000))*(x4918)*(x4920)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x4922=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j0)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x4922)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(py));
evalcond[4]=py;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4922))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4924 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4924.valid ) {
    continue;
}
IkReal x4923=x4924.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4923));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4923))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4925=IKsin(j1);
IkReal x4926=IKcos(j1);
IkReal x4927=((IkReal(0.0450000000000000))*(x4926));
evalcond[0]=((((IkReal(0.550000000000000))*(x4925)))+(((IkReal(0.300000000000000))*(cj3)*(x4925)))+(((IkReal(-0.300000000000000))*(sj3)*(x4926)))+(((cj3)*(x4927)))+(((IkReal(-1.00000000000000))*(x4927)))+(((IkReal(0.0450000000000000))*(sj3)*(x4925))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x4928=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j0, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x4928)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=py;
evalcond[4]=((IkReal(-1.00000000000000))*(py));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4928))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4930 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4930.valid ) {
    continue;
}
IkReal x4929=x4930.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4929));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4929))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4931=IKsin(j1);
IkReal x4932=IKcos(j1);
IkReal x4933=((IkReal(0.0450000000000000))*(x4932));
evalcond[0]=((((IkReal(0.0450000000000000))*(sj3)*(x4931)))+(((IkReal(0.300000000000000))*(cj3)*(x4931)))+(((IkReal(-0.300000000000000))*(sj3)*(x4932)))+(((cj3)*(x4933)))+(((IkReal(-1.00000000000000))*(x4933)))+(((IkReal(0.550000000000000))*(x4931))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x4934=((px)*(sj0));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x4934;
evalcond[3]=((IkReal(-1.00000000000000))*(x4934));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj0;
dummyeval[1]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x4935=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4935))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4935))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x4936=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4936))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4936))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x4937=((IkReal(1.00000000000000))*(pp));
evalcond[0]=IKabs(px);
evalcond[1]=((IkReal(0.722500000000000))+(((IkReal(-1.00000000000000))*(x4937))));
evalcond[2]=IkReal(-0.850000000000000);
evalcond[3]=IkReal(0);
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4937))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(-1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4938=((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30);
IkReal x4939=((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30);
IkReal x4940=((x4938)*(x4939));
if( IKabs(((IkReal(0.850000000000000))*(x4940))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0555555555555556))*(x4940)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.850000000000000))*(x4940)))+IKsqr(((IkReal(0.0555555555555556))*(x4940)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(0.850000000000000))*(x4940)), ((IkReal(0.0555555555555556))*(x4940)*(((IkReal(144.500000000000))+(((IkReal(-200.000000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4941=IKcos(j1);
IkReal x4942=IKsin(j1);
IkReal x4943=((cj0)*(px));
evalcond[0]=((IkReal(-0.850000000000000))+(((x4942)*(x4943))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4941));
evalcond[2]=((x4941)*(x4943));
evalcond[3]=((((IkReal(0.850000000000000))*(x4942)))+(((IkReal(-1.00000000000000))*(x4943))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x4941)*(x4943)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x4942)*(x4943))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((IkReal(1.17647058823529))*(cj0)*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.17647058823529))*(cj0)*(px)))+IKsqr(((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((IkReal(1.17647058823529))*(cj0)*(px)), ((IkReal(0.00653594771241830))*(((IKabs(cj0) != 0)?((IkReal)1/(cj0)):(IkReal)1.0e30))*(((IKabs(px) != 0)?((IkReal)1/(px)):(IkReal)1.0e30))*(((IkReal(-361.250000000000))+(((IkReal(2200.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1700.00000000000))*(pp)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4944=IKcos(j1);
IkReal x4945=IKsin(j1);
IkReal x4946=((cj0)*(px));
evalcond[0]=((IkReal(-0.850000000000000))+(((x4945)*(x4946))));
evalcond[1]=((IkReal(-0.850000000000000))*(x4944));
evalcond[2]=((x4944)*(x4946));
evalcond[3]=((((IkReal(0.850000000000000))*(x4945)))+(((IkReal(-1.00000000000000))*(x4946))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x4945)*(x4946)))+(((IkReal(-0.0900000000000000))*(x4944)*(x4946)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x4947=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(-1.00000000000000))*(x4947)))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=px;
evalcond[4]=((IkReal(-1.00000000000000))*(px));
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4947))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4949 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4949.valid ) {
    continue;
}
IkReal x4948=x4949.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4948));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4948))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4950=IKsin(j1);
IkReal x4951=IKcos(j1);
IkReal x4952=((IkReal(0.0450000000000000))*(x4951));
evalcond[0]=((((IkReal(0.550000000000000))*(x4950)))+(((cj3)*(x4952)))+(((IkReal(-1.00000000000000))*(x4952)))+(((IkReal(-0.300000000000000))*(sj3)*(x4951)))+(((IkReal(0.0450000000000000))*(sj3)*(x4950)))+(((IkReal(0.300000000000000))*(cj3)*(x4950))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x4953=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j0)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x4953)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[3]=((IkReal(-1.00000000000000))*(px));
evalcond[4]=px;
evalcond[5]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[6]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4953))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
Atan2Value<IkReal> x4955 = IKatan2WithCheck(((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))),((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))),IKFAST_ATAN2_MAGTHRESH);
if( !x4955.valid ) {
    continue;
}
IkReal x4954=x4955.value;
j1array[0]=((IkReal(-1.00000000000000))*(x4954));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x4954))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x4956=IKsin(j1);
IkReal x4957=IKcos(j1);
IkReal x4958=((IkReal(0.0450000000000000))*(x4957));
evalcond[0]=((((IkReal(0.550000000000000))*(x4956)))+(((cj3)*(x4958)))+(((IkReal(-1.00000000000000))*(x4958)))+(((IkReal(-0.300000000000000))*(sj3)*(x4957)))+(((IkReal(0.0450000000000000))*(sj3)*(x4956)))+(((IkReal(0.300000000000000))*(cj3)*(x4956))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4959=((cj0)*(px));
IkReal x4960=((IkReal(0.300000000000000))*(sj3));
IkReal x4961=((py)*(sj0));
IkReal x4962=((IkReal(0.0450000000000000))*(cj3));
if( IKabs(((((IKabs(((((x4959)*(x4962)))+(((IkReal(-1.00000000000000))*(x4960)*(x4961)))+(((x4961)*(x4962)))+(((IkReal(-1.00000000000000))*(x4959)*(x4960)))+(((IkReal(-0.0450000000000000))*(x4961)))+(((IkReal(-0.0450000000000000))*(x4959))))) != 0)?((IkReal)1/(((((x4959)*(x4962)))+(((IkReal(-1.00000000000000))*(x4960)*(x4961)))+(((x4961)*(x4962)))+(((IkReal(-1.00000000000000))*(x4959)*(x4960)))+(((IkReal(-0.0450000000000000))*(x4961)))+(((IkReal(-0.0450000000000000))*(x4959)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x4961)+(x4959))) != 0)?((IkReal)1/(((x4961)+(x4959)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x4962)+(((IkReal(-1.00000000000000))*(x4960))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x4959)*(x4962)))+(((IkReal(-1.00000000000000))*(x4960)*(x4961)))+(((x4961)*(x4962)))+(((IkReal(-1.00000000000000))*(x4959)*(x4960)))+(((IkReal(-0.0450000000000000))*(x4961)))+(((IkReal(-0.0450000000000000))*(x4959))))) != 0)?((IkReal)1/(((((x4959)*(x4962)))+(((IkReal(-1.00000000000000))*(x4960)*(x4961)))+(((x4961)*(x4962)))+(((IkReal(-1.00000000000000))*(x4959)*(x4960)))+(((IkReal(-0.0450000000000000))*(x4961)))+(((IkReal(-0.0450000000000000))*(x4959)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))))+IKsqr(((((IKabs(((x4961)+(x4959))) != 0)?((IkReal)1/(((x4961)+(x4959)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x4962)+(((IkReal(-1.00000000000000))*(x4960)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((((x4959)*(x4962)))+(((IkReal(-1.00000000000000))*(x4960)*(x4961)))+(((x4961)*(x4962)))+(((IkReal(-1.00000000000000))*(x4959)*(x4960)))+(((IkReal(-0.0450000000000000))*(x4961)))+(((IkReal(-0.0450000000000000))*(x4959))))) != 0)?((IkReal)1/(((((x4959)*(x4962)))+(((IkReal(-1.00000000000000))*(x4960)*(x4961)))+(((x4961)*(x4962)))+(((IkReal(-1.00000000000000))*(x4959)*(x4960)))+(((IkReal(-0.0450000000000000))*(x4961)))+(((IkReal(-0.0450000000000000))*(x4959)))))):(IkReal)1.0e30))*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(0.0135000000000000))*((cj3)*(cj3))))+(((IkReal(-0.0879750000000000))*(cj3)*(sj3)))))), ((((IKabs(((x4961)+(x4959))) != 0)?((IkReal)1/(((x4961)+(x4959)))):(IkReal)1.0e30))*(((IkReal(-0.0450000000000000))+(x4962)+(((IkReal(-1.00000000000000))*(x4960)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4963=IKsin(j1);
IkReal x4964=IKcos(j1);
IkReal x4965=((IkReal(0.300000000000000))*(cj3));
IkReal x4966=((IkReal(0.0450000000000000))*(cj3));
IkReal x4967=((cj0)*(px));
IkReal x4968=((py)*(sj0));
IkReal x4969=((IkReal(0.0450000000000000))*(sj3));
IkReal x4970=((IkReal(0.300000000000000))*(sj3));
IkReal x4971=((IkReal(0.0450000000000000))*(x4963));
IkReal x4972=((IkReal(0.0900000000000000))*(x4964));
IkReal x4973=((IkReal(1.10000000000000))*(x4963));
evalcond[0]=((IkReal(-0.550000000000000))+(((x4963)*(x4967)))+(((x4963)*(x4968)))+(((IkReal(-1.00000000000000))*(x4965)))+(((IkReal(-1.00000000000000))*(x4969))));
evalcond[1]=((((x4963)*(x4966)))+(((IkReal(-1.00000000000000))*(x4963)*(x4970)))+(((IkReal(-1.00000000000000))*(x4971)))+(((IkReal(-1.00000000000000))*(x4964)*(x4965)))+(((IkReal(-1.00000000000000))*(x4964)*(x4969)))+(((IkReal(-0.550000000000000))*(x4964))));
evalcond[2]=((IkReal(0.0450000000000000))+(x4970)+(((x4964)*(x4968)))+(((x4964)*(x4967)))+(((IkReal(-1.00000000000000))*(x4966))));
evalcond[3]=((((x4963)*(x4965)))+(((x4963)*(x4969)))+(((x4964)*(x4966)))+(((IkReal(0.550000000000000))*(x4963)))+(((IkReal(-1.00000000000000))*(x4967)))+(((IkReal(-1.00000000000000))*(x4968)))+(((IkReal(-1.00000000000000))*(x4964)*(x4970)))+(((IkReal(-0.0450000000000000))*(x4964))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4968)*(x4972)))+(((x4967)*(x4973)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x4967)*(x4972)))+(((x4968)*(x4973))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4974=((cj0)*(px));
IkReal x4975=((IkReal(0.0450000000000000))*(sj3));
IkReal x4976=((py)*(sj0));
IkReal x4977=((IkReal(0.300000000000000))*(cj3));
if( IKabs(((((IKabs(((x4974)+(x4976))) != 0)?((IkReal)1/(((x4974)+(x4976)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4975)+(x4977))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x4975)*(x4976)))+(((IkReal(-1.00000000000000))*(x4976)*(x4977)))+(((IkReal(-0.550000000000000))*(x4974)))+(((IkReal(-0.550000000000000))*(x4976)))+(((IkReal(-1.00000000000000))*(x4974)*(x4977)))+(((IkReal(-1.00000000000000))*(x4974)*(x4975))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4975)*(x4976)))+(((IkReal(-1.00000000000000))*(x4976)*(x4977)))+(((IkReal(-0.550000000000000))*(x4974)))+(((IkReal(-0.550000000000000))*(x4976)))+(((IkReal(-1.00000000000000))*(x4974)*(x4977)))+(((IkReal(-1.00000000000000))*(x4974)*(x4975)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x4974)+(x4976))) != 0)?((IkReal)1/(((x4974)+(x4976)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4975)+(x4977)))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x4975)*(x4976)))+(((IkReal(-1.00000000000000))*(x4976)*(x4977)))+(((IkReal(-0.550000000000000))*(x4974)))+(((IkReal(-0.550000000000000))*(x4976)))+(((IkReal(-1.00000000000000))*(x4974)*(x4977)))+(((IkReal(-1.00000000000000))*(x4974)*(x4975))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4975)*(x4976)))+(((IkReal(-1.00000000000000))*(x4976)*(x4977)))+(((IkReal(-0.550000000000000))*(x4974)))+(((IkReal(-0.550000000000000))*(x4976)))+(((IkReal(-1.00000000000000))*(x4974)*(x4977)))+(((IkReal(-1.00000000000000))*(x4974)*(x4975)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs(((x4974)+(x4976))) != 0)?((IkReal)1/(((x4974)+(x4976)))):(IkReal)1.0e30))*(((IkReal(0.550000000000000))+(x4975)+(x4977)))), ((((IKabs(((((IkReal(-1.00000000000000))*(x4975)*(x4976)))+(((IkReal(-1.00000000000000))*(x4976)*(x4977)))+(((IkReal(-0.550000000000000))*(x4974)))+(((IkReal(-0.550000000000000))*(x4976)))+(((IkReal(-1.00000000000000))*(x4974)*(x4977)))+(((IkReal(-1.00000000000000))*(x4974)*(x4975))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x4975)*(x4976)))+(((IkReal(-1.00000000000000))*(x4976)*(x4977)))+(((IkReal(-0.550000000000000))*(x4974)))+(((IkReal(-0.550000000000000))*(x4976)))+(((IkReal(-1.00000000000000))*(x4974)*(x4977)))+(((IkReal(-1.00000000000000))*(x4974)*(x4975)))))):(IkReal)1.0e30))*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*((sj3)*(sj3))))+(((IkReal(0.0879750000000000))*(cj3)*(sj3)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*((cj3)*(cj3))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4978=IKsin(j1);
IkReal x4979=IKcos(j1);
IkReal x4980=((IkReal(0.300000000000000))*(cj3));
IkReal x4981=((IkReal(0.0450000000000000))*(cj3));
IkReal x4982=((cj0)*(px));
IkReal x4983=((py)*(sj0));
IkReal x4984=((IkReal(0.0450000000000000))*(sj3));
IkReal x4985=((IkReal(0.300000000000000))*(sj3));
IkReal x4986=((IkReal(0.0450000000000000))*(x4978));
IkReal x4987=((IkReal(0.0900000000000000))*(x4979));
IkReal x4988=((IkReal(1.10000000000000))*(x4978));
evalcond[0]=((IkReal(-0.550000000000000))+(((x4978)*(x4982)))+(((x4978)*(x4983)))+(((IkReal(-1.00000000000000))*(x4984)))+(((IkReal(-1.00000000000000))*(x4980))));
evalcond[1]=((((x4978)*(x4981)))+(((IkReal(-1.00000000000000))*(x4978)*(x4985)))+(((IkReal(-1.00000000000000))*(x4986)))+(((IkReal(-1.00000000000000))*(x4979)*(x4980)))+(((IkReal(-1.00000000000000))*(x4979)*(x4984)))+(((IkReal(-0.550000000000000))*(x4979))));
evalcond[2]=((IkReal(0.0450000000000000))+(x4985)+(((x4979)*(x4983)))+(((x4979)*(x4982)))+(((IkReal(-1.00000000000000))*(x4981))));
evalcond[3]=((((x4978)*(x4984)))+(((x4978)*(x4980)))+(((x4979)*(x4981)))+(((IkReal(0.550000000000000))*(x4978)))+(((IkReal(-1.00000000000000))*(x4979)*(x4985)))+(((IkReal(-1.00000000000000))*(x4982)))+(((IkReal(-1.00000000000000))*(x4983)))+(((IkReal(-0.0450000000000000))*(x4979))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x4982)*(x4987)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4982)*(x4988)))+(((IkReal(-1.00000000000000))*(x4983)*(x4987)))+(((x4983)*(x4988))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
Atan2Value<IkReal> x4989 = IKatan2WithCheck(((gconst61)*(((IkReal(0.550000000000000))+(((IkReal(0.0450000000000000))*(sj3)))+(((IkReal(0.300000000000000))*(cj3)))))),((gconst61)*(((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-0.300000000000000))*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x4989.valid ) {
    continue;
}
j1array[0]=x4989.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x4990=IKsin(j1);
IkReal x4991=IKcos(j1);
IkReal x4992=((IkReal(0.300000000000000))*(cj3));
IkReal x4993=((IkReal(0.0450000000000000))*(cj3));
IkReal x4994=((cj0)*(px));
IkReal x4995=((py)*(sj0));
IkReal x4996=((IkReal(0.0450000000000000))*(sj3));
IkReal x4997=((IkReal(0.300000000000000))*(sj3));
IkReal x4998=((IkReal(0.0450000000000000))*(x4990));
IkReal x4999=((IkReal(0.0900000000000000))*(x4991));
IkReal x5000=((IkReal(1.10000000000000))*(x4990));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x4996)))+(((IkReal(-1.00000000000000))*(x4992)))+(((x4990)*(x4994)))+(((x4990)*(x4995))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x4991)))+(((IkReal(-1.00000000000000))*(x4998)))+(((IkReal(-1.00000000000000))*(x4990)*(x4997)))+(((IkReal(-1.00000000000000))*(x4991)*(x4992)))+(((IkReal(-1.00000000000000))*(x4991)*(x4996)))+(((x4990)*(x4993))));
evalcond[2]=((IkReal(0.0450000000000000))+(x4997)+(((IkReal(-1.00000000000000))*(x4993)))+(((x4991)*(x4995)))+(((x4991)*(x4994))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x4991)*(x4997)))+(((IkReal(0.550000000000000))*(x4990)))+(((IkReal(-1.00000000000000))*(x4994)))+(((IkReal(-1.00000000000000))*(x4995)))+(((IkReal(-0.0450000000000000))*(x4991)))+(((x4991)*(x4993)))+(((x4990)*(x4996)))+(((x4990)*(x4992))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x4994)*(x5000)))+(((IkReal(-1.00000000000000))*(pp)))+(((x4995)*(x5000)))+(((IkReal(-1.00000000000000))*(x4995)*(x4999)))+(((IkReal(-1.00000000000000))*(x4994)*(x4999))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5001=((cj2)*(pz));
IkReal x5002=((IkReal(1.00000000000000))*(cj0));
IkReal x5003=((cj0)*(px));
IkReal x5004=((py)*(sj0));
IkReal x5005=((IkReal(0.550000000000000))*(sj2));
IkReal x5006=((cj2)*(sj0));
IkReal x5007=((IkReal(0.300000000000000))*(cj3)*(sj2));
IkReal x5008=((cj2)*(px)*(py));
IkReal x5009=((IkReal(0.0450000000000000))*(sj2)*(sj3));
Atan2Value<IkReal> x5010 = IKatan2WithCheck(((gconst43)*(((((IkReal(-1.00000000000000))*(py)*(x5001)*(x5002)))+(((x5003)*(x5009)))+(((x5003)*(x5005)))+(((x5003)*(x5007)))+(((px)*(sj0)*(x5001)))+(((x5004)*(x5007)))+(((x5004)*(x5005)))+(((x5004)*(x5009)))))),((gconst43)*(((((pz)*(x5009)))+(((pz)*(x5005)))+(((pz)*(x5007)))+(((IkReal(-1.00000000000000))*(x5002)*(x5006)*((px)*(px))))+(((IkReal(-1.00000000000000))*(px)*(x5004)*(x5006)))+(((cj0)*(cj2)*(py)*(x5004)))+(((cj0)*(cj2)*(py)*(x5003)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x5010.valid ) {
    continue;
}
j1array[0]=x5010.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5011=IKsin(j1);
IkReal x5012=IKcos(j1);
IkReal x5013=((px)*(sj2));
IkReal x5014=((IkReal(0.300000000000000))*(sj3));
IkReal x5015=((IkReal(0.0900000000000000))*(sj0));
IkReal x5016=((cj2)*(px));
IkReal x5017=((IkReal(0.0450000000000000))*(cj3));
IkReal x5018=((IkReal(0.0450000000000000))*(cj2));
IkReal x5019=((py)*(sj0));
IkReal x5020=((IkReal(0.0450000000000000))*(sj3));
IkReal x5021=((IkReal(1.00000000000000))*(cj0));
IkReal x5022=((IkReal(0.300000000000000))*(cj3));
IkReal x5023=((py)*(sj2));
IkReal x5024=((cj0)*(x5012));
IkReal x5025=((cj3)*(x5011));
IkReal x5026=((cj2)*(x5012));
IkReal x5027=((cj2)*(x5011));
IkReal x5028=((pz)*(x5012));
IkReal x5029=((cj0)*(px)*(x5011));
evalcond[0]=((IkReal(-0.550000000000000))+(((x5011)*(x5019)))+(x5029)+(x5028)+(((IkReal(-1.00000000000000))*(x5022)))+(((IkReal(-1.00000000000000))*(x5020))));
evalcond[1]=((((sj2)*(x5012)*(x5019)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x5021)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x5011)))+(((x5013)*(x5024)))+(((sj0)*(x5016))));
evalcond[2]=((((x5014)*(x5027)))+(((x5011)*(x5018)))+(((IkReal(-1.00000000000000))*(x5017)*(x5027)))+(((IkReal(-1.00000000000000))*(x5012)*(x5022)))+(((IkReal(-1.00000000000000))*(x5012)*(x5020)))+(pz)+(((IkReal(-0.550000000000000))*(x5012))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x5019)*(x5026)))+(((pz)*(x5027)))+(((sj0)*(x5013)))+(x5014)+(((IkReal(-1.00000000000000))*(x5021)*(x5023)))+(((IkReal(-1.00000000000000))*(x5012)*(x5016)*(x5021)))+(((IkReal(-1.00000000000000))*(x5017))));
evalcond[4]=((((IkReal(-1.00000000000000))*(px)*(x5021)))+(((x5014)*(x5026)))+(((x5011)*(x5022)))+(((x5011)*(x5020)))+(((IkReal(-1.00000000000000))*(x5017)*(x5026)))+(((x5012)*(x5018)))+(((IkReal(-1.00000000000000))*(x5019)))+(((IkReal(0.550000000000000))*(x5011))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x5028)))+(((IkReal(1.10000000000000))*(x5029)))+(((py)*(x5015)*(x5026)))+(((IkReal(1.10000000000000))*(x5011)*(x5019)))+(((IkReal(0.0900000000000000))*(cj0)*(x5023)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x5013)*(x5015)))+(((IkReal(-0.0900000000000000))*(pz)*(x5027)))+(((IkReal(0.0900000000000000))*(x5016)*(x5024))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5030=(cj3)*(cj3);
IkReal x5031=(sj3)*(sj3);
IkReal x5032=((cj2)*(sj3));
IkReal x5033=((IkReal(0.0135000000000000))*(cj2));
IkReal x5034=((IkReal(1.00000000000000))*(pz));
Atan2Value<IkReal> x5035 = IKatan2WithCheck(((gconst42)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0900000000000000))*(x5030)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x5031)))+(((IkReal(-0.330000000000000))*(cj3)))))),((gconst42)*(((((IkReal(-0.167025000000000))*(x5032)))+(((IkReal(-1.00000000000000))*(x5031)*(x5033)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x5034)))+(((x5030)*(x5033)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x5034)))+(((IkReal(-0.0879750000000000))*(cj3)*(x5032)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x5035.valid ) {
    continue;
}
j1array[0]=x5035.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5036=IKsin(j1);
IkReal x5037=IKcos(j1);
IkReal x5038=((px)*(sj2));
IkReal x5039=((IkReal(0.300000000000000))*(sj3));
IkReal x5040=((IkReal(0.0900000000000000))*(sj0));
IkReal x5041=((cj2)*(px));
IkReal x5042=((IkReal(0.0450000000000000))*(cj3));
IkReal x5043=((IkReal(0.0450000000000000))*(cj2));
IkReal x5044=((py)*(sj0));
IkReal x5045=((IkReal(0.0450000000000000))*(sj3));
IkReal x5046=((IkReal(1.00000000000000))*(cj0));
IkReal x5047=((IkReal(0.300000000000000))*(cj3));
IkReal x5048=((py)*(sj2));
IkReal x5049=((cj0)*(x5037));
IkReal x5050=((cj3)*(x5036));
IkReal x5051=((cj2)*(x5037));
IkReal x5052=((cj2)*(x5036));
IkReal x5053=((pz)*(x5037));
IkReal x5054=((cj0)*(px)*(x5036));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x5045)))+(((IkReal(-1.00000000000000))*(x5047)))+(((x5036)*(x5044)))+(x5054)+(x5053));
evalcond[1]=((((sj0)*(x5041)))+(((x5038)*(x5049)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x5046)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x5036)))+(((sj2)*(x5037)*(x5044))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x5037)*(x5045)))+(((IkReal(-1.00000000000000))*(x5037)*(x5047)))+(((x5036)*(x5043)))+(((IkReal(-0.550000000000000))*(x5037)))+(pz)+(((x5039)*(x5052)))+(((IkReal(-1.00000000000000))*(x5042)*(x5052))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x5037)*(x5041)*(x5046)))+(((IkReal(-1.00000000000000))*(x5042)))+(((sj0)*(x5038)))+(x5039)+(((IkReal(-1.00000000000000))*(x5046)*(x5048)))+(((IkReal(-1.00000000000000))*(x5044)*(x5051)))+(((pz)*(x5052))));
evalcond[4]=((((x5037)*(x5043)))+(((x5036)*(x5045)))+(((x5036)*(x5047)))+(((IkReal(0.550000000000000))*(x5036)))+(((IkReal(-1.00000000000000))*(x5044)))+(((x5039)*(x5051)))+(((IkReal(-1.00000000000000))*(px)*(x5046)))+(((IkReal(-1.00000000000000))*(x5042)*(x5051))));
evalcond[5]=((IkReal(-0.212500000000000))+(((py)*(x5040)*(x5051)))+(((IkReal(-0.0900000000000000))*(pz)*(x5052)))+(((IkReal(0.0900000000000000))*(cj0)*(x5048)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x5036)*(x5044)))+(((IkReal(0.0900000000000000))*(x5041)*(x5049)))+(((IkReal(-1.00000000000000))*(x5038)*(x5040)))+(((IkReal(1.10000000000000))*(x5053)))+(((IkReal(1.10000000000000))*(x5054))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x94=((IkReal(1.00000000000000))*(cj3));
IkReal x95=((sj0)*(sj2));
IkReal x96=((cj2)*(sj1));
IkReal x97=((IkReal(1.00000000000000))*(sj3));
IkReal x98=((cj1)*(cj2));
IkReal x99=((sj1)*(sj2));
IkReal x100=((cj0)*(sj2));
IkReal x101=((IkReal(1.00000000000000))*(cj1));
IkReal x102=((((IkReal(-1.00000000000000))*(sj1)*(x97)))+(((cj3)*(x98))));
IkReal x103=((((cj0)*(cj2)))+(((IkReal(-1.00000000000000))*(x101)*(x95))));
IkReal x104=((((sj3)*(x98)))+(((cj3)*(sj1))));
IkReal x105=((((cj1)*(cj3)))+(((IkReal(-1.00000000000000))*(x96)*(x97))));
IkReal x106=((cj0)*(x102));
IkReal x107=((((IkReal(-1.00000000000000))*(x94)*(x96)))+(((IkReal(-1.00000000000000))*(cj1)*(x97))));
IkReal x108=((((IkReal(-1.00000000000000))*(x100)*(x101)))+(((IkReal(-1.00000000000000))*(cj2)*(sj0))));
IkReal x109=((((cj3)*(x100)))+(((sj0)*(x102))));
IkReal x110=((((IkReal(-1.00000000000000))*(x95)*(x97)))+(((cj0)*(x104))));
IkReal x111=((((sj3)*(x100)))+(((sj0)*(x104))));
IkReal x112=((x106)+(((IkReal(-1.00000000000000))*(cj3)*(x95))));
new_r00=((((r10)*(x109)))+(((r20)*(x107)))+(((r00)*(((((IkReal(-1.00000000000000))*(x94)*(x95)))+(x106))))));
new_r01=((((r21)*(x107)))+(((r11)*(x109)))+(((r01)*(x112))));
new_r02=((((r02)*(x112)))+(((r22)*(x107)))+(((r12)*(x109))));
new_r10=((((r10)*(x103)))+(((r20)*(x99)))+(((r00)*(x108))));
new_r11=((((r21)*(x99)))+(((r01)*(x108)))+(((r11)*(x103))));
new_r12=((((r02)*(x108)))+(((r12)*(x103)))+(((r22)*(x99))));
new_r20=((((r10)*(x111)))+(((r20)*(x105)))+(((r00)*(x110))));
new_r21=((((r21)*(x105)))+(((r11)*(x111)))+(((r01)*(x110))));
new_r22=((((r02)*(x110)))+(((r22)*(x105)))+(((r12)*(x111))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst66;
gconst66=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x113=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x113;
evalcond[2]=x113;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
IkReal j6mul = 1;
j6=0;
IkReal j4mul=IkReal(-1.00000000000000);
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

} else
{
IkReal x114=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x114;
evalcond[2]=x114;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x114;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
Atan2Value<IkReal> x116 = IKatan2WithCheck(new_r02,new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x116.valid ) {
    continue;
}
IkReal x115=x116.value;
j4array[0]=((IkReal(-1.00000000000000))*(x115));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x115))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst84;
gconst84=IKsign((((sj4)*(sj4))+((cj4)*(cj4))));
dummyeval[0]=(((sj4)*(sj4))+((cj4)*(cj4)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst85;
gconst85=IKsign((((sj4)*(sj4))+((cj4)*(cj4))));
dummyeval[0]=(((sj4)*(sj4))+((cj4)*(cj4)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x117=((IkReal(1.00000000000000))*(new_r00));
Atan2Value<IkReal> x118 = IKatan2WithCheck(((gconst85)*(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(sj4)*(x117)))))),((gconst85)*(((((IkReal(-1.00000000000000))*(cj4)*(x117)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x118.valid ) {
    continue;
}
j6array[0]=x118.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x119=IKcos(j6);
IkReal x120=IKsin(j6);
IkReal x121=((IkReal(1.00000000000000))*(sj4));
IkReal x122=((IkReal(1.00000000000000))*(x120));
IkReal x123=((sj4)*(x119));
IkReal x124=((IkReal(1.00000000000000))*(x119));
IkReal x125=((cj4)*(x122));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x121)))+(((IkReal(-1.00000000000000))*(x122))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x121)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x124))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x122))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x125)))+(x123)+(new_r01));
evalcond[4]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x119));
evalcond[5]=((((cj4)*(x119)))+(((sj4)*(x120)))+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(-1.00000000000000))*(cj4)*(x124)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x125)))+(x123)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x126=((IkReal(1.00000000000000))*(new_r00));
Atan2Value<IkReal> x127 = IKatan2WithCheck(((gconst84)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(sj4)*(x126)))))),((gconst84)*(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(x126)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x127.valid ) {
    continue;
}
j6array[0]=x127.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x128=IKcos(j6);
IkReal x129=IKsin(j6);
IkReal x130=((IkReal(1.00000000000000))*(sj4));
IkReal x131=((IkReal(1.00000000000000))*(x129));
IkReal x132=((sj4)*(x128));
IkReal x133=((IkReal(1.00000000000000))*(x128));
IkReal x134=((cj4)*(x131));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x130)))+(((IkReal(-1.00000000000000))*(x131))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x130)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x133))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x131))));
evalcond[3]=((x132)+(((IkReal(-1.00000000000000))*(x134)))+(new_r01));
evalcond[4]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x128));
evalcond[5]=((((sj4)*(x129)))+(new_r00)+(((cj4)*(x128))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x129)*(x130)))+(new_r11)+(((IkReal(-1.00000000000000))*(cj4)*(x133))));
evalcond[7]=((x132)+(((IkReal(-1.00000000000000))*(x134)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
Atan2Value<IkReal> x135 = IKatan2WithCheck(((gconst66)*(new_r21)),((IkReal(-1.00000000000000))*(gconst66)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x135.valid ) {
    continue;
}
j6array[0]=x135.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)*(IKsin(j6))))+(new_r21));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst67;
gconst67=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst68;
gconst68=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x136=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x136;
evalcond[2]=x136;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst69;
gconst69=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst70;
gconst70=IKsign(((((new_r12)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(new_r02)))));
dummyeval[0]=((((new_r12)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x137=((IkReal(-1.00000000000000))+(new_r22));
Atan2Value<IkReal> x138 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x138.valid ) {
    continue;
}
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x138.value)+(j6)), IkReal(6.28318530717959))));
evalcond[1]=x137;
evalcond[2]=x137;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst71;
gconst71=IKsign(((((new_r10)*(new_r12)))+(((new_r00)*(new_r02)))));
dummyeval[0]=((((new_r10)*(new_r12)))+(((new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst72;
gconst72=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x141 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x141.valid ) {
    continue;
}
IkReal x139=IKsin(x141.value);
IkReal x140=((gconst72)*(x139));
Atan2Value<IkReal> x142 = IKatan2WithCheck(((new_r12)*(x140)),((new_r02)*(x140)),IKFAST_ATAN2_MAGTHRESH);
if( !x142.valid ) {
    continue;
}
j4array[0]=x142.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x143=IKcos(j4);
IkReal x144=IKsin(j4);
IkReal x145=((IkReal(1.00000000000000))*(x144));
Atan2Value<IkReal> x152 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x152.valid ) {
    continue;
}
IkReal x146=x152.value;
IkReal x147=IKsin(x146);
IkReal x148=IKcos(x146);
IkReal x149=((IkReal(1.00000000000000))*(x148));
IkReal x150=((IkReal(1.00000000000000))*(x147));
IkReal x151=((((x145)*(x147)))+(((x143)*(x149))));
evalcond[0]=((((new_r12)*(x143)))+(((IkReal(-1.00000000000000))*(new_r02)*(x145))));
evalcond[1]=((((new_r12)*(x144)))+(((new_r02)*(x143))));
evalcond[2]=((((new_r10)*(x143)))+(x147)+(((IkReal(-1.00000000000000))*(new_r00)*(x145))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x145)))+(((IkReal(-1.00000000000000))*(x149)))+(((new_r11)*(x143))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x150)))+(((new_r01)*(x143)))+(((new_r11)*(x144))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x143)*(x150)))+(((x144)*(x148)))+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x149)))+(((new_r00)*(x143)))+(((new_r10)*(x144))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x151)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x151)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x145)*(x148)))+(new_r10)+(((x143)*(x147))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x155 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x155.valid ) {
    continue;
}
IkReal x153=IKsin(x155.value);
IkReal x154=((gconst71)*(x153));
Atan2Value<IkReal> x156 = IKatan2WithCheck(((new_r02)*(x154)),((IkReal(-1.00000000000000))*(new_r12)*(x154)),IKFAST_ATAN2_MAGTHRESH);
if( !x156.valid ) {
    continue;
}
j4array[0]=x156.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x157=IKcos(j4);
IkReal x158=IKsin(j4);
IkReal x159=((IkReal(1.00000000000000))*(x158));
Atan2Value<IkReal> x166 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x166.valid ) {
    continue;
}
IkReal x160=x166.value;
IkReal x161=IKsin(x160);
IkReal x162=IKcos(x160);
IkReal x163=((IkReal(1.00000000000000))*(x162));
IkReal x164=((IkReal(1.00000000000000))*(x161));
IkReal x165=((((x157)*(x163)))+(((x159)*(x161))));
evalcond[0]=((((new_r12)*(x157)))+(((IkReal(-1.00000000000000))*(new_r02)*(x159))));
evalcond[1]=((((new_r12)*(x158)))+(((new_r02)*(x157))));
evalcond[2]=((((new_r10)*(x157)))+(x161)+(((IkReal(-1.00000000000000))*(new_r00)*(x159))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x163)))+(((new_r11)*(x157)))+(((IkReal(-1.00000000000000))*(new_r01)*(x159))));
evalcond[4]=((((new_r01)*(x157)))+(((IkReal(-1.00000000000000))*(x164)))+(((new_r11)*(x158))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x157)*(x164)))+(new_r01)+(((x158)*(x162))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x163)))+(((new_r00)*(x157)))+(((new_r10)*(x158))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x165)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x165)))+(new_r11));
evalcond[9]=((((x157)*(x161)))+(((IkReal(-1.00000000000000))*(x159)*(x162)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x167=((IkReal(-1.00000000000000))+(new_r22));
Atan2Value<IkReal> x168 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x168.valid ) {
    continue;
}
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((x168.value)+(j6)), IkReal(6.28318530717959))));
evalcond[1]=x167;
evalcond[2]=x167;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst73;
gconst73=IKsign(((((new_r10)*(new_r12)))+(((new_r00)*(new_r02)))));
dummyeval[0]=((((new_r10)*(new_r12)))+(((new_r00)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst74;
gconst74=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x171 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x171.valid ) {
    continue;
}
IkReal x169=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x171.value)))));
IkReal x170=((IkReal(-1.00000000000000))*(gconst74)*(x169));
Atan2Value<IkReal> x172 = IKatan2WithCheck(((new_r12)*(x170)),((new_r02)*(x170)),IKFAST_ATAN2_MAGTHRESH);
if( !x172.valid ) {
    continue;
}
j4array[0]=x172.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x173=IKcos(j4);
IkReal x174=IKsin(j4);
IkReal x175=((IkReal(1.00000000000000))*(x174));
IkReal x176=((IkReal(1.00000000000000))*(x173));
Atan2Value<IkReal> x185 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x185.valid ) {
    continue;
}
IkReal x177=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x185.value))));
IkReal x178=IKsin(x177);
IkReal x179=IKcos(x177);
IkReal x180=((IkReal(1.00000000000000))*(x179));
IkReal x181=((x173)*(x178));
IkReal x182=((x174)*(x179));
IkReal x183=((x175)*(x178));
IkReal x184=((x176)*(x179));
evalcond[0]=((((new_r12)*(x173)))+(((IkReal(-1.00000000000000))*(new_r02)*(x175))));
evalcond[1]=((((new_r02)*(x173)))+(((new_r12)*(x174))));
evalcond[2]=((((new_r10)*(x173)))+(((IkReal(-1.00000000000000))*(x178)))+(((IkReal(-1.00000000000000))*(new_r00)*(x175))));
evalcond[3]=((((new_r11)*(x173)))+(((IkReal(-1.00000000000000))*(x180)))+(((IkReal(-1.00000000000000))*(new_r01)*(x175))));
evalcond[4]=((((new_r01)*(x173)))+(((new_r11)*(x174)))+(((IkReal(1.00000000000000))*(x178))));
evalcond[5]=((((x176)*(x178)))+(x182)+(new_r01));
evalcond[6]=((((new_r00)*(x173)))+(((new_r10)*(x174)))+(((IkReal(-1.00000000000000))*(x180))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x184)))+(x183)+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x184)))+(x183)+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x175)*(x179)))+(((IkReal(-1.00000000000000))*(x181)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x188 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x188.valid ) {
    continue;
}
IkReal x186=IKsin(((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x188.value)))));
IkReal x187=((gconst73)*(x186));
Atan2Value<IkReal> x189 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)*(x187)),((IkReal(1.00000000000000))*(new_r12)*(x187)),IKFAST_ATAN2_MAGTHRESH);
if( !x189.valid ) {
    continue;
}
j4array[0]=x189.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x190=IKcos(j4);
IkReal x191=IKsin(j4);
IkReal x192=((IkReal(1.00000000000000))*(x191));
IkReal x193=((IkReal(1.00000000000000))*(x190));
Atan2Value<IkReal> x202 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x202.valid ) {
    continue;
}
IkReal x194=((IkReal(3.14159265000000))+(((IkReal(-1.00000000000000))*(x202.value))));
IkReal x195=IKsin(x194);
IkReal x196=IKcos(x194);
IkReal x197=((IkReal(1.00000000000000))*(x196));
IkReal x198=((x190)*(x195));
IkReal x199=((x191)*(x196));
IkReal x200=((x192)*(x195));
IkReal x201=((x193)*(x196));
evalcond[0]=((((new_r12)*(x190)))+(((IkReal(-1.00000000000000))*(new_r02)*(x192))));
evalcond[1]=((((new_r02)*(x190)))+(((new_r12)*(x191))));
evalcond[2]=((((new_r10)*(x190)))+(((IkReal(-1.00000000000000))*(x195)))+(((IkReal(-1.00000000000000))*(new_r00)*(x192))));
evalcond[3]=((((new_r11)*(x190)))+(((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(new_r01)*(x192))));
evalcond[4]=((((new_r11)*(x191)))+(((new_r01)*(x190)))+(((IkReal(1.00000000000000))*(x195))));
evalcond[5]=((((x193)*(x195)))+(x199)+(new_r01));
evalcond[6]=((((new_r10)*(x191)))+(((new_r00)*(x190)))+(((IkReal(-1.00000000000000))*(x197))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x201)))+(x200)+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x201)))+(x200)+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x192)*(x196)))+(((IkReal(-1.00000000000000))*(x198)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x203=((gconst70)*(new_r01));
Atan2Value<IkReal> x204 = IKatan2WithCheck(((new_r02)*(x203)),((IkReal(-1.00000000000000))*(new_r12)*(x203)),IKFAST_ATAN2_MAGTHRESH);
if( !x204.valid ) {
    continue;
}
j4array[0]=x204.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x205=IKcos(j4);
IkReal x206=IKsin(j4);
IkReal x207=((IkReal(1.00000000000000))*(cj6));
IkReal x208=((IkReal(1.00000000000000))*(sj6));
IkReal x209=((sj6)*(x206));
IkReal x210=((IkReal(1.00000000000000))*(x206));
IkReal x211=((x205)*(x207));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x210)))+(((new_r12)*(x205))));
evalcond[1]=((((new_r02)*(x205)))+(((new_r12)*(x206))));
evalcond[2]=((((new_r10)*(x205)))+(((IkReal(-1.00000000000000))*(x208)))+(((IkReal(-1.00000000000000))*(new_r00)*(x210))));
evalcond[3]=((((new_r11)*(x205)))+(((IkReal(-1.00000000000000))*(x207)))+(((IkReal(-1.00000000000000))*(new_r01)*(x210))));
evalcond[4]=((sj6)+(((new_r11)*(x206)))+(((new_r01)*(x205))));
evalcond[5]=((((cj6)*(x206)))+(new_r01)+(((sj6)*(x205))));
evalcond[6]=((((new_r10)*(x206)))+(((new_r00)*(x205)))+(((IkReal(-1.00000000000000))*(x207))));
evalcond[7]=((x209)+(new_r00)+(((IkReal(-1.00000000000000))*(x211))));
evalcond[8]=((x209)+(new_r11)+(((IkReal(-1.00000000000000))*(x211))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x206)*(x207)))+(((IkReal(-1.00000000000000))*(x205)*(x208)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x212=((gconst69)*(sj6));
Atan2Value<IkReal> x213 = IKatan2WithCheck(((new_r02)*(x212)),((IkReal(-1.00000000000000))*(new_r12)*(x212)),IKFAST_ATAN2_MAGTHRESH);
if( !x213.valid ) {
    continue;
}
j4array[0]=x213.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x214=IKcos(j4);
IkReal x215=IKsin(j4);
IkReal x216=((IkReal(1.00000000000000))*(cj6));
IkReal x217=((IkReal(1.00000000000000))*(sj6));
IkReal x218=((sj6)*(x215));
IkReal x219=((IkReal(1.00000000000000))*(x215));
IkReal x220=((x214)*(x216));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x219)))+(((new_r12)*(x214))));
evalcond[1]=((((new_r02)*(x214)))+(((new_r12)*(x215))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(new_r00)*(x219)))+(((new_r10)*(x214))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x219)))+(((IkReal(-1.00000000000000))*(x216)))+(((new_r11)*(x214))));
evalcond[4]=((sj6)+(((new_r01)*(x214)))+(((new_r11)*(x215))));
evalcond[5]=((((cj6)*(x215)))+(((sj6)*(x214)))+(new_r01));
evalcond[6]=((((new_r00)*(x214)))+(((IkReal(-1.00000000000000))*(x216)))+(((new_r10)*(x215))));
evalcond[7]=((x218)+(new_r00)+(((IkReal(-1.00000000000000))*(x220))));
evalcond[8]=((x218)+(new_r11)+(((IkReal(-1.00000000000000))*(x220))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x214)*(x217)))+(new_r10)+(((IkReal(-1.00000000000000))*(x215)*(x216))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x221=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x221;
evalcond[2]=x221;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x221;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst75;
gconst75=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst76;
gconst76=IKsign(((((IkReal(-1.00000000000000))*(new_r02)*(sj6)))+(((cj6)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r02)*(sj6)))+(((cj6)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x222=((IkReal(1.00000000000000))+(new_r22));
Atan2Value<IkReal> x223 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x223.valid ) {
    continue;
}
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(x223.value)+(j6)), IkReal(6.28318530717959))));
evalcond[1]=x222;
evalcond[2]=x222;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x222;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst77;
gconst77=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst78;
gconst78=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x226 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x226.valid ) {
    continue;
}
IkReal x224=IKcos(x226.value);
IkReal x225=((gconst78)*(x224));
Atan2Value<IkReal> x227 = IKatan2WithCheck(((new_r02)*(x225)),((IkReal(-1.00000000000000))*(new_r12)*(x225)),IKFAST_ATAN2_MAGTHRESH);
if( !x227.valid ) {
    continue;
}
j4array[0]=x227.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x228=IKcos(j4);
IkReal x229=IKsin(j4);
IkReal x230=((IkReal(1.00000000000000))*(x229));
Atan2Value<IkReal> x239 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x239.valid ) {
    continue;
}
IkReal x231=x239.value;
IkReal x232=IKsin(x231);
IkReal x233=IKcos(x231);
IkReal x234=((x228)*(x232));
IkReal x235=((x229)*(x233));
IkReal x236=((x228)*(x233));
IkReal x237=((x229)*(x232));
IkReal x238=((x234)+(x235));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x230)))+(((new_r12)*(x228))));
evalcond[1]=((((new_r02)*(x228)))+(((new_r12)*(x229))));
evalcond[2]=((x232)+(((new_r10)*(x228)))+(((IkReal(-1.00000000000000))*(new_r00)*(x230))));
evalcond[3]=((((new_r11)*(x228)))+(((IkReal(-1.00000000000000))*(new_r01)*(x230)))+(((IkReal(-1.00000000000000))*(x233))));
evalcond[4]=((((new_r01)*(x228)))+(x232)+(((new_r11)*(x229))));
evalcond[5]=((x238)+(new_r01));
evalcond[6]=((((new_r00)*(x228)))+(x233)+(((new_r10)*(x229))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x230)*(x232)))+(x236)+(new_r00));
evalcond[8]=((x237)+(new_r11)+(((IkReal(-1.00000000000000))*(x236))));
evalcond[9]=((x238)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x242 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x242.valid ) {
    continue;
}
IkReal x240=IKsin(x242.value);
IkReal x241=((gconst77)*(x240));
Atan2Value<IkReal> x243 = IKatan2WithCheck(((new_r02)*(x241)),((IkReal(-1.00000000000000))*(new_r12)*(x241)),IKFAST_ATAN2_MAGTHRESH);
if( !x243.valid ) {
    continue;
}
j4array[0]=x243.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x244=IKcos(j4);
IkReal x245=IKsin(j4);
IkReal x246=((IkReal(1.00000000000000))*(x245));
Atan2Value<IkReal> x255 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x255.valid ) {
    continue;
}
IkReal x247=x255.value;
IkReal x248=IKsin(x247);
IkReal x249=IKcos(x247);
IkReal x250=((x244)*(x248));
IkReal x251=((x245)*(x249));
IkReal x252=((x244)*(x249));
IkReal x253=((x245)*(x248));
IkReal x254=((x250)+(x251));
evalcond[0]=((((new_r12)*(x244)))+(((IkReal(-1.00000000000000))*(new_r02)*(x246))));
evalcond[1]=((((new_r12)*(x245)))+(((new_r02)*(x244))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x246)))+(x248)+(((new_r10)*(x244))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x246)))+(((IkReal(-1.00000000000000))*(x249)))+(((new_r11)*(x244))));
evalcond[4]=((x248)+(((new_r01)*(x244)))+(((new_r11)*(x245))));
evalcond[5]=((x254)+(new_r01));
evalcond[6]=((x249)+(((new_r00)*(x244)))+(((new_r10)*(x245))));
evalcond[7]=((x252)+(new_r00)+(((IkReal(-1.00000000000000))*(x246)*(x248))));
evalcond[8]=((x253)+(new_r11)+(((IkReal(-1.00000000000000))*(x252))));
evalcond[9]=((x254)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x256=((IkReal(1.00000000000000))+(new_r22));
Atan2Value<IkReal> x257 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x257.valid ) {
    continue;
}
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(x257.value)+(j6)), IkReal(6.28318530717959))));
evalcond[1]=x256;
evalcond[2]=x256;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x256;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst79;
gconst79=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst80;
gconst80=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x260 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x260.valid ) {
    continue;
}
IkReal x258=IKcos(((IkReal(-3.14159265000000))+(x260.value)));
IkReal x259=((gconst80)*(x258));
Atan2Value<IkReal> x261 = IKatan2WithCheck(((new_r02)*(x259)),((IkReal(-1.00000000000000))*(new_r12)*(x259)),IKFAST_ATAN2_MAGTHRESH);
if( !x261.valid ) {
    continue;
}
j4array[0]=x261.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x262=IKcos(j4);
IkReal x263=IKsin(j4);
IkReal x264=((IkReal(1.00000000000000))*(x263));
Atan2Value<IkReal> x273 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x273.valid ) {
    continue;
}
IkReal x265=((IkReal(-3.14159265000000))+(x273.value));
IkReal x266=IKsin(x265);
IkReal x267=IKcos(x265);
IkReal x268=((IkReal(1.00000000000000))*(x267));
IkReal x269=((x262)*(x266));
IkReal x270=((x263)*(x267));
IkReal x271=((x263)*(x266));
IkReal x272=((x269)+(x270));
evalcond[0]=((((new_r12)*(x262)))+(((IkReal(-1.00000000000000))*(new_r02)*(x264))));
evalcond[1]=((((new_r12)*(x263)))+(((new_r02)*(x262))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x264)))+(x266)+(((new_r10)*(x262))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x264)))+(((IkReal(-1.00000000000000))*(x268)))+(((new_r11)*(x262))));
evalcond[4]=((x266)+(((new_r01)*(x262)))+(((new_r11)*(x263))));
evalcond[5]=((x272)+(new_r01));
evalcond[6]=((x267)+(((new_r00)*(x262)))+(((new_r10)*(x263))));
evalcond[7]=((((x262)*(x267)))+(new_r00)+(((IkReal(-1.00000000000000))*(x264)*(x266))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x262)*(x268)))+(x271)+(new_r11));
evalcond[9]=((x272)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x276 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x276.valid ) {
    continue;
}
IkReal x274=IKsin(((IkReal(-3.14159265000000))+(x276.value)));
IkReal x275=((gconst79)*(x274));
Atan2Value<IkReal> x277 = IKatan2WithCheck(((new_r02)*(x275)),((IkReal(-1.00000000000000))*(new_r12)*(x275)),IKFAST_ATAN2_MAGTHRESH);
if( !x277.valid ) {
    continue;
}
j4array[0]=x277.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x278=IKcos(j4);
IkReal x279=IKsin(j4);
IkReal x280=((IkReal(1.00000000000000))*(x279));
Atan2Value<IkReal> x289 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x289.valid ) {
    continue;
}
IkReal x281=((IkReal(-3.14159265000000))+(x289.value));
IkReal x282=IKsin(x281);
IkReal x283=IKcos(x281);
IkReal x284=((IkReal(1.00000000000000))*(x283));
IkReal x285=((x278)*(x282));
IkReal x286=((x279)*(x283));
IkReal x287=((x279)*(x282));
IkReal x288=((x286)+(x285));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x280)))+(((new_r12)*(x278))));
evalcond[1]=((((new_r02)*(x278)))+(((new_r12)*(x279))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x280)))+(x282)+(((new_r10)*(x278))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x280)))+(((IkReal(-1.00000000000000))*(x284)))+(((new_r11)*(x278))));
evalcond[4]=((x282)+(((new_r01)*(x278)))+(((new_r11)*(x279))));
evalcond[5]=((x288)+(new_r01));
evalcond[6]=((x283)+(((new_r00)*(x278)))+(((new_r10)*(x279))));
evalcond[7]=((((x278)*(x283)))+(((IkReal(-1.00000000000000))*(x280)*(x282)))+(new_r00));
evalcond[8]=((x287)+(new_r11)+(((IkReal(-1.00000000000000))*(x278)*(x284))));
evalcond[9]=((x288)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x290=((gconst76)*(new_r00));
Atan2Value<IkReal> x291 = IKatan2WithCheck(((new_r02)*(x290)),((IkReal(-1.00000000000000))*(new_r12)*(x290)),IKFAST_ATAN2_MAGTHRESH);
if( !x291.valid ) {
    continue;
}
j4array[0]=x291.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x292=IKcos(j4);
IkReal x293=IKsin(j4);
IkReal x294=((IkReal(1.00000000000000))*(sj6));
IkReal x295=((IkReal(1.00000000000000))*(cj6));
IkReal x296=((cj6)*(x293));
IkReal x297=((IkReal(1.00000000000000))*(x293));
IkReal x298=((x292)*(x294));
evalcond[0]=((((new_r12)*(x292)))+(((IkReal(-1.00000000000000))*(new_r02)*(x297))));
evalcond[1]=((((new_r02)*(x292)))+(((new_r12)*(x293))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x294)))+(((new_r10)*(x292)))+(((IkReal(-1.00000000000000))*(new_r00)*(x297))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x297)))+(((new_r11)*(x292)))+(((IkReal(-1.00000000000000))*(x295))));
evalcond[4]=((((new_r11)*(x293)))+(((IkReal(-1.00000000000000))*(x294)))+(((new_r01)*(x292))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x298)))+(x296)+(new_r01));
evalcond[6]=((cj6)+(((new_r10)*(x293)))+(((new_r00)*(x292))));
evalcond[7]=((((cj6)*(x292)))+(((sj6)*(x293)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(x293)*(x294)))+(new_r11)+(((IkReal(-1.00000000000000))*(x292)*(x295))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x298)))+(x296)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x299=((cj6)*(gconst75));
Atan2Value<IkReal> x300 = IKatan2WithCheck(((new_r02)*(x299)),((IkReal(-1.00000000000000))*(new_r12)*(x299)),IKFAST_ATAN2_MAGTHRESH);
if( !x300.valid ) {
    continue;
}
j4array[0]=x300.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x301=IKcos(j4);
IkReal x302=IKsin(j4);
IkReal x303=((IkReal(1.00000000000000))*(sj6));
IkReal x304=((IkReal(1.00000000000000))*(cj6));
IkReal x305=((cj6)*(x302));
IkReal x306=((IkReal(1.00000000000000))*(x302));
IkReal x307=((x301)*(x303));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x306)))+(((new_r12)*(x301))));
evalcond[1]=((((new_r12)*(x302)))+(((new_r02)*(x301))));
evalcond[2]=((((new_r10)*(x301)))+(((IkReal(-1.00000000000000))*(new_r00)*(x306)))+(((IkReal(-1.00000000000000))*(x303))));
evalcond[3]=((((new_r11)*(x301)))+(((IkReal(-1.00000000000000))*(new_r01)*(x306)))+(((IkReal(-1.00000000000000))*(x304))));
evalcond[4]=((((new_r01)*(x301)))+(((new_r11)*(x302)))+(((IkReal(-1.00000000000000))*(x303))));
evalcond[5]=((x305)+(new_r01)+(((IkReal(-1.00000000000000))*(x307))));
evalcond[6]=((((new_r00)*(x301)))+(cj6)+(((new_r10)*(x302))));
evalcond[7]=((((cj6)*(x301)))+(new_r00)+(((sj6)*(x302))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x301)*(x304)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(new_r11));
evalcond[9]=((x305)+(new_r10)+(((IkReal(-1.00000000000000))*(x307))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x308 = IKatan2WithCheck(((gconst68)*(new_r12)),((gconst68)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x308.valid ) {
    continue;
}
j4array[0]=x308.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x309=IKcos(j4);
IkReal x310=IKsin(j4);
IkReal x311=((IkReal(1.00000000000000))*(cj6));
IkReal x312=((cj5)*(sj6));
IkReal x313=((IkReal(1.00000000000000))*(cj5));
IkReal x314=((IkReal(1.00000000000000))*(sj5));
IkReal x315=((IkReal(1.00000000000000))*(x309));
IkReal x316=((cj5)*(x310));
IkReal x317=((new_r11)*(x310));
IkReal x318=((cj5)*(x309));
IkReal x319=((new_r12)*(x310));
IkReal x320=((new_r10)*(x310));
IkReal x321=((IkReal(1.00000000000000))*(x310));
evalcond[0]=((new_r02)+(((IkReal(-1.00000000000000))*(x309)*(x314))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x310)*(x314)))+(new_r12));
evalcond[2]=((((new_r12)*(x309)))+(((IkReal(-1.00000000000000))*(new_r02)*(x321))));
evalcond[3]=((((new_r02)*(x309)))+(x319)+(((IkReal(-1.00000000000000))*(x314))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x309)))+(((IkReal(-1.00000000000000))*(new_r00)*(x321))));
evalcond[5]=((((new_r11)*(x309)))+(((IkReal(-1.00000000000000))*(new_r01)*(x321)))+(((IkReal(-1.00000000000000))*(x311))));
evalcond[6]=((((new_r01)*(x309)))+(x317)+(x312));
evalcond[7]=((((x309)*(x312)))+(((cj6)*(x310)))+(new_r01));
evalcond[8]=((((new_r00)*(x309)))+(x320)+(((IkReal(-1.00000000000000))*(cj5)*(x311))));
evalcond[9]=((((sj6)*(x310)))+(new_r00)+(((IkReal(-1.00000000000000))*(x311)*(x318))));
evalcond[10]=((((x310)*(x312)))+(new_r11)+(((IkReal(-1.00000000000000))*(x309)*(x311))));
evalcond[11]=((((IkReal(-1.00000000000000))*(sj6)*(x315)))+(new_r10)+(((IkReal(-1.00000000000000))*(x311)*(x316))));
evalcond[12]=((((IkReal(-1.00000000000000))*(new_r22)*(x314)))+(((new_r02)*(x318)))+(((new_r12)*(x316))));
evalcond[13]=((((IkReal(-1.00000000000000))*(x314)*(x320)))+(((IkReal(-1.00000000000000))*(new_r20)*(x313)))+(((IkReal(-1.00000000000000))*(new_r00)*(x309)*(x314))));
evalcond[14]=((((IkReal(-1.00000000000000))*(new_r21)*(x313)))+(((IkReal(-1.00000000000000))*(x314)*(x317)))+(((IkReal(-1.00000000000000))*(new_r01)*(x309)*(x314))));
evalcond[15]=((((IkReal(-1.00000000000000))*(new_r21)*(x314)))+(sj6)+(((new_r01)*(x318)))+(((new_r11)*(x316))));
evalcond[16]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x313)))+(((IkReal(-1.00000000000000))*(new_r02)*(x309)*(x314)))+(((IkReal(-1.00000000000000))*(x314)*(x319))));
evalcond[17]=((((IkReal(-1.00000000000000))*(new_r20)*(x314)))+(((new_r00)*(x318)))+(((IkReal(-1.00000000000000))*(x311)))+(((new_r10)*(x316))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x322 = IKatan2WithCheck(((gconst67)*(new_r12)),((gconst67)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x322.valid ) {
    continue;
}
j4array[0]=x322.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x323=IKcos(j4);
IkReal x324=IKsin(j4);
IkReal x325=((IkReal(1.00000000000000))*(cj6));
IkReal x326=((cj5)*(sj6));
IkReal x327=((IkReal(1.00000000000000))*(cj5));
IkReal x328=((IkReal(1.00000000000000))*(sj5));
IkReal x329=((IkReal(1.00000000000000))*(x323));
IkReal x330=((cj5)*(x324));
IkReal x331=((new_r11)*(x324));
IkReal x332=((cj5)*(x323));
IkReal x333=((new_r12)*(x324));
IkReal x334=((new_r10)*(x324));
IkReal x335=((IkReal(1.00000000000000))*(x324));
evalcond[0]=((((IkReal(-1.00000000000000))*(x323)*(x328)))+(new_r02));
evalcond[1]=((new_r12)+(((IkReal(-1.00000000000000))*(x324)*(x328))));
evalcond[2]=((((new_r12)*(x323)))+(((IkReal(-1.00000000000000))*(new_r02)*(x335))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x328)))+(x333)+(((new_r02)*(x323))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x335)))+(((new_r10)*(x323))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x325)))+(((IkReal(-1.00000000000000))*(new_r01)*(x335)))+(((new_r11)*(x323))));
evalcond[6]=((((new_r01)*(x323)))+(x331)+(x326));
evalcond[7]=((((x323)*(x326)))+(new_r01)+(((cj6)*(x324))));
evalcond[8]=((((new_r00)*(x323)))+(x334)+(((IkReal(-1.00000000000000))*(cj5)*(x325))));
evalcond[9]=((((sj6)*(x324)))+(new_r00)+(((IkReal(-1.00000000000000))*(x325)*(x332))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x323)*(x325)))+(((x324)*(x326)))+(new_r11));
evalcond[11]=((((IkReal(-1.00000000000000))*(sj6)*(x329)))+(new_r10)+(((IkReal(-1.00000000000000))*(x325)*(x330))));
evalcond[12]=((((IkReal(-1.00000000000000))*(new_r22)*(x328)))+(((new_r12)*(x330)))+(((new_r02)*(x332))));
evalcond[13]=((((IkReal(-1.00000000000000))*(new_r00)*(x323)*(x328)))+(((IkReal(-1.00000000000000))*(x328)*(x334)))+(((IkReal(-1.00000000000000))*(new_r20)*(x327))));
evalcond[14]=((((IkReal(-1.00000000000000))*(new_r01)*(x323)*(x328)))+(((IkReal(-1.00000000000000))*(x328)*(x331)))+(((IkReal(-1.00000000000000))*(new_r21)*(x327))));
evalcond[15]=((sj6)+(((new_r01)*(x332)))+(((new_r11)*(x330)))+(((IkReal(-1.00000000000000))*(new_r21)*(x328))));
evalcond[16]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x327)))+(((IkReal(-1.00000000000000))*(x328)*(x333)))+(((IkReal(-1.00000000000000))*(new_r02)*(x323)*(x328))));
evalcond[17]=((((new_r00)*(x332)))+(((IkReal(-1.00000000000000))*(x325)))+(((new_r10)*(x330)))+(((IkReal(-1.00000000000000))*(new_r20)*(x328))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x336 = IKatan2WithCheck(((gconst65)*(new_r12)),((gconst65)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x336.valid ) {
    continue;
}
j4array[0]=x336.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x337=IKcos(j4);
IkReal x338=IKsin(j4);
IkReal x339=((IkReal(1.00000000000000))*(sj5));
IkReal x340=((IkReal(1.00000000000000))*(cj5));
IkReal x341=((new_r12)*(x338));
IkReal x342=((new_r02)*(x337));
evalcond[0]=((((IkReal(-1.00000000000000))*(x337)*(x339)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x338)*(x339)))+(new_r12));
evalcond[2]=((((new_r12)*(x337)))+(((IkReal(-1.00000000000000))*(new_r02)*(x338))));
evalcond[3]=((x342)+(x341)+(((IkReal(-1.00000000000000))*(x339))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r22)*(x339)))+(((cj5)*(x341)))+(((cj5)*(x342))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r00)*(x337)*(x339)))+(((IkReal(-1.00000000000000))*(new_r10)*(x338)*(x339)))+(((IkReal(-1.00000000000000))*(new_r20)*(x340))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r01)*(x337)*(x339)))+(((IkReal(-1.00000000000000))*(new_r11)*(x338)*(x339)))+(((IkReal(-1.00000000000000))*(new_r21)*(x340))));
evalcond[7]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x340)))+(((IkReal(-1.00000000000000))*(x339)*(x342)))+(((IkReal(-1.00000000000000))*(x339)*(x341))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst81;
gconst81=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj4;
dummyeval[1]=cj5;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
IkReal x343=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x344=((((IkReal(-1.00000000000000))*(sj5)))+(new_r12));
IkReal x345=((IkReal(1.00000000000000))*(cj5));
IkReal x346=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x343;
evalcond[2]=x343;
evalcond[3]=new_r02;
evalcond[4]=x344;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x344;
evalcond[7]=((((cj5)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x346))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x346)))+(((IkReal(-1.00000000000000))*(new_r20)*(x345))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x346)))+(((IkReal(-1.00000000000000))*(new_r21)*(x345))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x346)))+(((IkReal(-1.00000000000000))*(new_r22)*(x345))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst82;
gconst82=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x347=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x347;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x347;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x348=IKcos(j6);
IkReal x349=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x348)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x349))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x349))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x348))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x350=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x350;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x350;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x350;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x351=IKsin(j6);
IkReal x352=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x352)))+(new_r20));
evalcond[1]=((x351)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x351)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x352)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x353=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x353;
evalcond[2]=x353;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x354=IKsin(j6);
IkReal x355=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x354)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x355)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x354)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x355)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x356=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x356;
evalcond[2]=x356;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x356;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x357=IKcos(j6);
IkReal x358=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x358)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x357)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x358)))+(new_r11));
evalcond[3]=((x357)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x359=IKsin(j6);
IkReal x360=IKcos(j6);
IkReal x361=((IkReal(1.00000000000000))*(sj5));
IkReal x362=((IkReal(1.00000000000000))*(x360));
evalcond[0]=((((sj5)*(x360)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x359)*(x361)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x359)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x362)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x359)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x362)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(x359)+(((IkReal(-1.00000000000000))*(new_r21)*(x361))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x361)))+(((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(x362))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
Atan2Value<IkReal> x363 = IKatan2WithCheck(((gconst82)*(new_r21)),((IkReal(-1.00000000000000))*(gconst82)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x363.valid ) {
    continue;
}
j6array[0]=x363.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x364=IKsin(j6);
IkReal x365=IKcos(j6);
IkReal x366=((IkReal(1.00000000000000))*(sj5));
IkReal x367=((IkReal(1.00000000000000))*(x365));
evalcond[0]=((((sj5)*(x365)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x364)*(x366)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x364)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x367)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x364)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x367)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(x364)+(((IkReal(-1.00000000000000))*(new_r21)*(x366))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x366)))+(((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(x367))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x368=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x369=((((IkReal(-1.00000000000000))*(sj5)))+(new_r12));
IkReal x370=((IkReal(1.00000000000000))*(cj5));
IkReal x371=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x368;
evalcond[2]=x368;
evalcond[3]=new_r02;
evalcond[4]=x369;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x369;
evalcond[7]=((((cj5)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x371))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r20)*(x370)))+(((IkReal(-1.00000000000000))*(new_r10)*(x371))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x370)))+(((IkReal(-1.00000000000000))*(new_r11)*(x371))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x371)))+(((IkReal(-1.00000000000000))*(new_r22)*(x370))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst83;
gconst83=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x372=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x372;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x372;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x373=IKcos(j6);
IkReal x374=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x373)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x374)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x373)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x375=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x375;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x375;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x375;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x376=IKsin(j6);
IkReal x377=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x377)))+(new_r20));
evalcond[1]=((x376)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x376)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x377)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x378=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x378;
evalcond[2]=x378;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x379=IKsin(j6);
IkReal x380=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x379)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x380)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x379)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x380)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x381=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x381;
evalcond[2]=x381;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x381;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x382=IKcos(j6);
IkReal x383=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x383)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x382)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x383)))+(new_r11));
evalcond[3]=((x382)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x384=IKsin(j6);
IkReal x385=IKcos(j6);
IkReal x386=((IkReal(1.00000000000000))*(sj5));
IkReal x387=((IkReal(1.00000000000000))*(x385));
evalcond[0]=((((sj5)*(x385)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x384)*(x386)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x384)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x387)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x384)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x387)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(x384)+(((IkReal(-1.00000000000000))*(new_r21)*(x386))));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x386)))+(((IkReal(-1.00000000000000))*(x387))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
Atan2Value<IkReal> x388 = IKatan2WithCheck(((gconst83)*(new_r21)),((IkReal(-1.00000000000000))*(gconst83)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x388.valid ) {
    continue;
}
j6array[0]=x388.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x389=IKsin(j6);
IkReal x390=IKcos(j6);
IkReal x391=((IkReal(1.00000000000000))*(sj5));
IkReal x392=((IkReal(1.00000000000000))*(x390));
evalcond[0]=((((sj5)*(x390)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x389)*(x391)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x389)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x392)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x389)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x392)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x391)))+(((cj5)*(new_r11)))+(x389));
evalcond[7]=((((IkReal(-1.00000000000000))*(x392)))+(((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x391))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x393=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x394=((IkReal(1.00000000000000))*(cj5));
IkReal x395=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x393;
evalcond[2]=x393;
evalcond[3]=new_r02;
evalcond[4]=((sj5)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x395)))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x395)))+(((IkReal(-1.00000000000000))*(new_r12)*(x394))));
evalcond[9]=((((new_r10)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r20)*(x394))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x394)))+(((new_r11)*(sj5))));
evalcond[11]=((IkReal(1.00000000000000))+(((new_r12)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r22)*(x394))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x396=IKsin(j6);
IkReal x397=IKcos(j6);
IkReal x398=((IkReal(1.00000000000000))*(sj5));
IkReal x399=((IkReal(1.00000000000000))*(new_r11));
IkReal x400=((IkReal(1.00000000000000))*(new_r10));
IkReal x401=((IkReal(1.00000000000000))*(x397));
evalcond[0]=((((sj5)*(x397)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x396)*(x398)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x396)))+(new_r00));
evalcond[3]=((new_r01)+(((IkReal(-1.00000000000000))*(x401))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x399)))+(((cj5)*(x396))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x401)))+(((IkReal(-1.00000000000000))*(x400))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj5)*(x399)))+(((IkReal(-1.00000000000000))*(new_r21)*(x398)))+(x396));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj5)*(x400)))+(((IkReal(-1.00000000000000))*(x401)))+(((IkReal(-1.00000000000000))*(new_r20)*(x398))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x402=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x403=((IkReal(1.00000000000000))*(cj5));
IkReal x404=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x402;
evalcond[2]=x402;
evalcond[3]=new_r02;
evalcond[4]=((sj5)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r12)))+(((IkReal(-1.00000000000000))*(x404))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r12)*(x403)))+(((IkReal(-1.00000000000000))*(new_r22)*(x404))));
evalcond[9]=((((new_r10)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r20)*(x403))));
evalcond[10]=((((new_r11)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r21)*(x403))));
evalcond[11]=((IkReal(1.00000000000000))+(((new_r12)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r22)*(x403))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x405=IKsin(j6);
IkReal x406=IKcos(j6);
IkReal x407=((IkReal(1.00000000000000))*(sj5));
IkReal x408=((IkReal(1.00000000000000))*(new_r11));
IkReal x409=((IkReal(1.00000000000000))*(new_r10));
IkReal x410=((IkReal(1.00000000000000))*(x406));
evalcond[0]=((((sj5)*(x406)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x405)*(x407))));
evalcond[2]=((new_r00)+(((IkReal(-1.00000000000000))*(x405))));
evalcond[3]=((new_r01)+(((IkReal(-1.00000000000000))*(x410))));
evalcond[4]=((((cj5)*(x405)))+(((IkReal(-1.00000000000000))*(x408))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x410)))+(((IkReal(-1.00000000000000))*(x409))));
evalcond[6]=((x405)+(((IkReal(-1.00000000000000))*(new_r21)*(x407)))+(((IkReal(-1.00000000000000))*(cj5)*(x408))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x407)))+(((IkReal(-1.00000000000000))*(cj5)*(x409)))+(((IkReal(-1.00000000000000))*(x410))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x411=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x411;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x411;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x412=IKcos(j6);
IkReal x413=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x412)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x413))));
evalcond[2]=((new_r10)+(((IkReal(-1.00000000000000))*(x413))));
evalcond[3]=((new_r11)+(((IkReal(-1.00000000000000))*(x412))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x414=IKcos(j6);
IkReal x415=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x414)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x415))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x415))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x414))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x416=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x416;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x416;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x416;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x417=IKsin(j6);
IkReal x418=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x418))));
evalcond[1]=((x417)+(new_r21));
evalcond[2]=((new_r10)+(((IkReal(-1.00000000000000))*(x417))));
evalcond[3]=((new_r11)+(((IkReal(-1.00000000000000))*(x418))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x419=IKsin(j6);
IkReal x420=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x420)))+(new_r20));
evalcond[1]=((x419)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x419))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x420)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x421=((IkReal(2.00000000000000))*(atan(htj5)));
IkReal x422=IKcos(x421);
IkReal x423=IKsin(x421);
IkReal x424=((((IkReal(-1.00000000000000))*(x422)))+(new_r22));
IkReal x425=((((IkReal(-1.00000000000000))*(x423)))+(new_r02));
IkReal x426=((IkReal(1.00000000000000))*(x422));
IkReal x427=((IkReal(1.00000000000000))*(x423));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x421)))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x424;
evalcond[2]=x424;
evalcond[3]=x425;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x425;
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x427)))+(((new_r02)*(x422))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r00)*(x427)))+(((IkReal(-1.00000000000000))*(new_r20)*(x426))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x426)))+(((IkReal(-1.00000000000000))*(new_r01)*(x427))));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x426)))+(((IkReal(-1.00000000000000))*(new_r02)*(x427))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x428=IKsin(j6);
IkReal x429=IKcos(j6);
IkReal x430=((IkReal(2.00000000000000))*(atan(htj5)));
IkReal x431=((IkReal(1.00000000000000))*(x429));
IkReal x432=IKsin(x430);
IkReal x433=IKcos(x430);
IkReal x434=((IkReal(1.00000000000000))*(x432));
evalcond[0]=((((x429)*(x432)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x428)*(x434))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x428)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x431)))+(new_r11));
evalcond[4]=((((x428)*(x433)))+(new_r01));
evalcond[5]=((((IkReal(-1.00000000000000))*(x431)*(x433)))+(new_r00));
evalcond[6]=((((new_r01)*(x433)))+(x428)+(((IkReal(-1.00000000000000))*(new_r21)*(x434))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x431)))+(((new_r00)*(x433)))+(((IkReal(-1.00000000000000))*(new_r20)*(x434))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x435=((IkReal(2.00000000000000))*(atan(htj5)));
IkReal x436=IKsin(x435);
IkReal x437=IKcos(x435);
IkReal x438=((((IkReal(-1.00000000000000))*(x437)))+(new_r22));
IkReal x439=((IkReal(1.00000000000000))*(x437));
IkReal x440=((IkReal(1.00000000000000))*(x436));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x435)))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x438;
evalcond[2]=x438;
evalcond[3]=((x436)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x440)))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r02)*(x439)))+(((IkReal(-1.00000000000000))*(new_r22)*(x440))));
evalcond[8]=((((new_r00)*(x436)))+(((IkReal(-1.00000000000000))*(new_r20)*(x439))));
evalcond[9]=((((new_r01)*(x436)))+(((IkReal(-1.00000000000000))*(new_r21)*(x439))));
evalcond[10]=((IkReal(1.00000000000000))+(((new_r02)*(x436)))+(((IkReal(-1.00000000000000))*(new_r22)*(x439))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r11)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x441=IKsin(j6);
IkReal x442=IKcos(j6);
IkReal x443=((IkReal(2.00000000000000))*(atan(htj5)));
IkReal x444=((IkReal(1.00000000000000))*(x442));
IkReal x445=IKsin(x443);
IkReal x446=IKcos(x443);
IkReal x447=((IkReal(1.00000000000000))*(x446));
IkReal x448=((IkReal(1.00000000000000))*(x445));
evalcond[0]=((((x442)*(x445)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x441)*(x448))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x441)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x444)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((x441)*(x446)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x444)*(x446)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r01)*(x447)))+(x441)+(((IkReal(-1.00000000000000))*(new_r21)*(x448))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x444)))+(((IkReal(-1.00000000000000))*(new_r00)*(x447)))+(((IkReal(-1.00000000000000))*(new_r20)*(x448))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x449=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x449;
evalcond[2]=x449;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x450=IKsin(j6);
IkReal x451=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x450)))+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x451)))+(new_r11));
evalcond[2]=((x450)+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x451)))+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x452=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x452;
evalcond[2]=x452;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x453=IKsin(j6);
IkReal x454=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x453)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x454)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[2]=((x453)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x454)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x455=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x455;
evalcond[2]=x455;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x455;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x456=IKcos(j6);
IkReal x457=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x457)))+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x456)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x457)))+(new_r01));
evalcond[3]=((x456)+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x458=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x458;
evalcond[2]=x458;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x458;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x459=IKcos(j6);
IkReal x460=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x459)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((x459)+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x461=((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30);
if( IKabs(((x461)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x461))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x461)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x461)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x461)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x461)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x462=IKsin(j6);
IkReal x463=IKcos(j6);
IkReal x464=((IkReal(1.00000000000000))*(sj5));
IkReal x465=((IkReal(1.00000000000000))*(sj4));
IkReal x466=((cj5)*(sj4));
IkReal x467=((cj4)*(new_r01));
IkReal x468=((cj4)*(new_r00));
IkReal x469=((IkReal(1.00000000000000))*(x463));
IkReal x470=((cj5)*(x462));
IkReal x471=((IkReal(1.00000000000000))*(x462));
evalcond[0]=((new_r20)+(((sj5)*(x463))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x462)*(x464)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x471)))+(((IkReal(-1.00000000000000))*(new_r00)*(x465))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x465)))+(((IkReal(-1.00000000000000))*(x469))));
evalcond[4]=((((new_r11)*(sj4)))+(x467)+(x470));
evalcond[5]=((((cj4)*(x470)))+(((sj4)*(x463)))+(new_r01));
evalcond[6]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(cj5)*(x469)))+(x468));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x469)))+(((sj4)*(x462)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj4)*(x469)))+(new_r11)+(((x462)*(x466))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj4)*(x471)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj5)*(x463)*(x465))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x464)))+(((new_r11)*(x466)))+(((cj5)*(x467)))+(x462));
evalcond[11]=((((cj5)*(x468)))+(((new_r10)*(x466)))+(((IkReal(-1.00000000000000))*(new_r20)*(x464)))+(((IkReal(-1.00000000000000))*(x469))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x472=((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30);
if( IKabs(((x472)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x472))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x472)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x472)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x472)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x472)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x473=IKsin(j6);
IkReal x474=IKcos(j6);
IkReal x475=((IkReal(1.00000000000000))*(sj5));
IkReal x476=((IkReal(1.00000000000000))*(sj4));
IkReal x477=((cj5)*(sj4));
IkReal x478=((cj4)*(new_r01));
IkReal x479=((cj4)*(new_r00));
IkReal x480=((IkReal(1.00000000000000))*(x474));
IkReal x481=((cj5)*(x473));
IkReal x482=((IkReal(1.00000000000000))*(x473));
evalcond[0]=((((sj5)*(x474)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x473)*(x475)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x482)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x476))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x480)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x476))));
evalcond[4]=((((new_r11)*(sj4)))+(x481)+(x478));
evalcond[5]=((((sj4)*(x474)))+(((cj4)*(x481)))+(new_r01));
evalcond[6]=((((new_r10)*(sj4)))+(x479)+(((IkReal(-1.00000000000000))*(cj5)*(x480))));
evalcond[7]=((((sj4)*(x473)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x480)))+(new_r00));
evalcond[8]=((((x473)*(x477)))+(new_r11)+(((IkReal(-1.00000000000000))*(cj4)*(x480))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj5)*(x474)*(x476)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj4)*(x482))));
evalcond[10]=((((cj5)*(x478)))+(((IkReal(-1.00000000000000))*(new_r21)*(x475)))+(((new_r11)*(x477)))+(x473));
evalcond[11]=((((cj5)*(x479)))+(((IkReal(-1.00000000000000))*(x480)))+(((new_r10)*(x477)))+(((IkReal(-1.00000000000000))*(new_r20)*(x475))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
Atan2Value<IkReal> x483 = IKatan2WithCheck(((gconst81)*(new_r21)),((IkReal(-1.00000000000000))*(gconst81)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x483.valid ) {
    continue;
}
j6array[0]=x483.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x484=IKsin(j6);
IkReal x485=IKcos(j6);
IkReal x486=((IkReal(1.00000000000000))*(sj5));
IkReal x487=((IkReal(1.00000000000000))*(sj4));
IkReal x488=((cj5)*(sj4));
IkReal x489=((cj4)*(new_r01));
IkReal x490=((cj4)*(new_r00));
IkReal x491=((IkReal(1.00000000000000))*(x485));
IkReal x492=((cj5)*(x484));
IkReal x493=((IkReal(1.00000000000000))*(x484));
evalcond[0]=((((sj5)*(x485)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x484)*(x486)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(new_r00)*(x487)))+(((cj4)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x487)))+(((IkReal(-1.00000000000000))*(x491)))+(((cj4)*(new_r11))));
evalcond[4]=((((new_r11)*(sj4)))+(x489)+(x492));
evalcond[5]=((((sj4)*(x485)))+(((cj4)*(x492)))+(new_r01));
evalcond[6]=((((new_r10)*(sj4)))+(x490)+(((IkReal(-1.00000000000000))*(cj5)*(x491))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x491)))+(((sj4)*(x484)))+(new_r00));
evalcond[8]=((((x484)*(x488)))+(((IkReal(-1.00000000000000))*(cj4)*(x491)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj5)*(x485)*(x487)))+(((IkReal(-1.00000000000000))*(cj4)*(x493)))+(new_r10));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x486)))+(((new_r11)*(x488)))+(((cj5)*(x489)))+(x484));
evalcond[11]=((((IkReal(-1.00000000000000))*(x491)))+(((cj5)*(x490)))+(((IkReal(-1.00000000000000))*(new_r20)*(x486)))+(((new_r10)*(x488))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
Atan2Value<IkReal> x494 = IKatan2WithCheck(((gconst64)*(new_r12)),((gconst64)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x494.valid ) {
    continue;
}
j4array[0]=x494.value;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x495=IKcos(j4);
IkReal x496=IKsin(j4);
IkReal x497=((IkReal(1.00000000000000))*(sj5));
IkReal x498=((IkReal(1.00000000000000))*(cj5));
IkReal x499=((new_r12)*(x496));
IkReal x500=((new_r02)*(x495));
evalcond[0]=((((IkReal(-1.00000000000000))*(x495)*(x497)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x496)*(x497)))+(new_r12));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r02)*(x496)))+(((new_r12)*(x495))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x497)))+(x499)+(x500));
evalcond[4]=((((cj5)*(x499)))+(((cj5)*(x500)))+(((IkReal(-1.00000000000000))*(new_r22)*(x497))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r20)*(x498)))+(((IkReal(-1.00000000000000))*(new_r10)*(x496)*(x497)))+(((IkReal(-1.00000000000000))*(new_r00)*(x495)*(x497))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r01)*(x495)*(x497)))+(((IkReal(-1.00000000000000))*(new_r21)*(x498)))+(((IkReal(-1.00000000000000))*(new_r11)*(x496)*(x497))));
evalcond[7]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x497)*(x500)))+(((IkReal(-1.00000000000000))*(x497)*(x499)))+(((IkReal(-1.00000000000000))*(new_r22)*(x498))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst81;
gconst81=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj4;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj4;
dummyeval[1]=cj5;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
IkReal x501=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x502=((((IkReal(-1.00000000000000))*(sj5)))+(new_r12));
IkReal x503=((IkReal(1.00000000000000))*(cj5));
IkReal x504=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x501;
evalcond[2]=x501;
evalcond[3]=new_r02;
evalcond[4]=x502;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x502;
evalcond[7]=((((cj5)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x504))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r20)*(x503)))+(((IkReal(-1.00000000000000))*(new_r10)*(x504))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x503)))+(((IkReal(-1.00000000000000))*(new_r11)*(x504))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x503)))+(((IkReal(-1.00000000000000))*(new_r12)*(x504))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst82;
gconst82=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x505=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x505;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x505;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x506=IKcos(j6);
IkReal x507=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x506)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x507)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x507)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x506))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x508=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x508;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x508;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x508;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x509=IKsin(j6);
IkReal x510=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x510))));
evalcond[1]=((x509)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x509))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x510))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x511=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x511;
evalcond[2]=x511;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x512=IKsin(j6);
IkReal x513=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x512)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x513))));
evalcond[2]=((x512)+(new_r11));
evalcond[3]=((new_r10)+(((IkReal(-1.00000000000000))*(x513))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x514=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x514;
evalcond[2]=x514;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x514;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x515=IKcos(j6);
IkReal x516=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x516))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x515)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((new_r11)+(((IkReal(-1.00000000000000))*(x516))));
evalcond[3]=((x515)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x517=IKsin(j6);
IkReal x518=IKcos(j6);
IkReal x519=((IkReal(1.00000000000000))*(sj5));
IkReal x520=((IkReal(1.00000000000000))*(x518));
evalcond[0]=((((sj5)*(x518)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x517)*(x519)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x517)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x520)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x517)))+(new_r11));
evalcond[5]=((new_r10)+(((IkReal(-1.00000000000000))*(cj5)*(x520))));
evalcond[6]=((((cj5)*(new_r11)))+(x517)+(((IkReal(-1.00000000000000))*(new_r21)*(x519))));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(x520)))+(((IkReal(-1.00000000000000))*(new_r20)*(x519))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
Atan2Value<IkReal> x521 = IKatan2WithCheck(((gconst82)*(new_r21)),((IkReal(-1.00000000000000))*(gconst82)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x521.valid ) {
    continue;
}
j6array[0]=x521.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x522=IKsin(j6);
IkReal x523=IKcos(j6);
IkReal x524=((IkReal(1.00000000000000))*(sj5));
IkReal x525=((IkReal(1.00000000000000))*(x523));
evalcond[0]=((((sj5)*(x523)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x522)*(x524)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x522)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x525)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x522)))+(new_r11));
evalcond[5]=((new_r10)+(((IkReal(-1.00000000000000))*(cj5)*(x525))));
evalcond[6]=((((cj5)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r21)*(x524)))+(x522));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x524)))+(((IkReal(-1.00000000000000))*(x525))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x526=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x527=((((IkReal(-1.00000000000000))*(sj5)))+(new_r12));
IkReal x528=((IkReal(1.00000000000000))*(cj5));
IkReal x529=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x526;
evalcond[2]=x526;
evalcond[3]=new_r02;
evalcond[4]=x527;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x527;
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r22)*(x529)))+(((cj5)*(new_r12))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r20)*(x528)))+(((IkReal(-1.00000000000000))*(new_r10)*(x529))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x529)))+(((IkReal(-1.00000000000000))*(new_r21)*(x528))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x528)))+(((IkReal(-1.00000000000000))*(new_r12)*(x529))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst83;
gconst83=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj5;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x530=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x530;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x530;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x531=IKcos(j6);
IkReal x532=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x531)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x532)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x532)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x531)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x533=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x533;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x533;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x533;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x534=IKsin(j6);
IkReal x535=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x535)))+(new_r20));
evalcond[1]=((x534)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x534)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x535)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x536=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x536;
evalcond[2]=x536;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x537=IKsin(j6);
IkReal x538=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x537)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x538)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x537)+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x538)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x539=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x539;
evalcond[2]=x539;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x539;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x540=IKcos(j6);
IkReal x541=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x541)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x540)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x541)))+(new_r11));
evalcond[3]=((x540)+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x542=IKsin(j6);
IkReal x543=IKcos(j6);
IkReal x544=((IkReal(1.00000000000000))*(sj5));
IkReal x545=((IkReal(1.00000000000000))*(x543));
evalcond[0]=((((sj5)*(x543)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x542)*(x544)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x542)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x545)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x542)))+(new_r11));
evalcond[5]=((new_r10)+(((IkReal(-1.00000000000000))*(cj5)*(x545))));
evalcond[6]=((((cj5)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r21)*(x544)))+(x542));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x544)))+(((IkReal(-1.00000000000000))*(x545))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
Atan2Value<IkReal> x546 = IKatan2WithCheck(((gconst83)*(new_r21)),((IkReal(-1.00000000000000))*(gconst83)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x546.valid ) {
    continue;
}
j6array[0]=x546.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x547=IKsin(j6);
IkReal x548=IKcos(j6);
IkReal x549=((IkReal(1.00000000000000))*(sj5));
IkReal x550=((IkReal(1.00000000000000))*(x548));
evalcond[0]=((((sj5)*(x548)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x547)*(x549)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x547)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x550)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((cj5)*(x547)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x550)))+(new_r10));
evalcond[6]=((((cj5)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r21)*(x549)))+(x547));
evalcond[7]=((((cj5)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x549)))+(((IkReal(-1.00000000000000))*(x550))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x551=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x552=((IkReal(1.00000000000000))*(cj5));
IkReal x553=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x551;
evalcond[2]=x551;
evalcond[3]=new_r02;
evalcond[4]=((sj5)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x553)))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x553)))+(((IkReal(-1.00000000000000))*(new_r12)*(x552))));
evalcond[9]=((((new_r10)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r20)*(x552))));
evalcond[10]=((((new_r11)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r21)*(x552))));
evalcond[11]=((IkReal(1.00000000000000))+(((new_r12)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r22)*(x552))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x554=IKsin(j6);
IkReal x555=IKcos(j6);
IkReal x556=((IkReal(1.00000000000000))*(sj5));
IkReal x557=((IkReal(1.00000000000000))*(new_r11));
IkReal x558=((IkReal(1.00000000000000))*(new_r10));
IkReal x559=((IkReal(1.00000000000000))*(x555));
evalcond[0]=((((sj5)*(x555)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x554)*(x556)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x554)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x559)))+(new_r01));
evalcond[4]=((((cj5)*(x554)))+(((IkReal(-1.00000000000000))*(x557))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x559)))+(((IkReal(-1.00000000000000))*(x558))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj5)*(x557)))+(((IkReal(-1.00000000000000))*(new_r21)*(x556)))+(x554));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj5)*(x558)))+(((IkReal(-1.00000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(new_r20)*(x556))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x560=((new_r22)+(((IkReal(-1.00000000000000))*(cj5))));
IkReal x561=((IkReal(1.00000000000000))*(cj5));
IkReal x562=((IkReal(1.00000000000000))*(sj5));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x560;
evalcond[2]=x560;
evalcond[3]=new_r02;
evalcond[4]=((sj5)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r12)))+(((IkReal(-1.00000000000000))*(x562))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x562)))+(((IkReal(-1.00000000000000))*(new_r12)*(x561))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r20)*(x561)))+(((new_r10)*(sj5))));
evalcond[10]=((((new_r11)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r21)*(x561))));
evalcond[11]=((IkReal(1.00000000000000))+(((new_r12)*(sj5)))+(((IkReal(-1.00000000000000))*(new_r22)*(x561))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x563=IKsin(j6);
IkReal x564=IKcos(j6);
IkReal x565=((IkReal(1.00000000000000))*(sj5));
IkReal x566=((IkReal(1.00000000000000))*(new_r11));
IkReal x567=((IkReal(1.00000000000000))*(new_r10));
IkReal x568=((IkReal(1.00000000000000))*(x564));
evalcond[0]=((new_r20)+(((sj5)*(x564))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x563)*(x565)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x563)))+(new_r00));
evalcond[3]=((new_r01)+(((IkReal(-1.00000000000000))*(x568))));
evalcond[4]=((((cj5)*(x563)))+(((IkReal(-1.00000000000000))*(x566))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x568)))+(((IkReal(-1.00000000000000))*(x567))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj5)*(x566)))+(x563)+(((IkReal(-1.00000000000000))*(new_r21)*(x565))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x565)))+(((IkReal(-1.00000000000000))*(cj5)*(x567)))+(((IkReal(-1.00000000000000))*(x568))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x569=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x569;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x569;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x570=IKcos(j6);
IkReal x571=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x570)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x571)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x571)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x570)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x572=IKcos(j6);
IkReal x573=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((x572)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x573)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x573)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x572)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x574=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x574;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x574;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x574;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x575=IKsin(j6);
IkReal x576=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x576)))+(new_r20));
evalcond[1]=((x575)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x575)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x576)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x577=IKsin(j6);
IkReal x578=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x578)))+(new_r20));
evalcond[1]=((x577)+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x577)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x578)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x579=((IkReal(2.00000000000000))*(atan(htj5)));
IkReal x580=IKcos(x579);
IkReal x581=IKsin(x579);
IkReal x582=((((IkReal(-1.00000000000000))*(x580)))+(new_r22));
IkReal x583=((((IkReal(-1.00000000000000))*(x581)))+(new_r02));
IkReal x584=((IkReal(1.00000000000000))*(x580));
IkReal x585=((IkReal(1.00000000000000))*(x581));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x579)))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x582;
evalcond[2]=x582;
evalcond[3]=x583;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x583;
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x585)))+(((new_r02)*(x580))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r20)*(x584)))+(((IkReal(-1.00000000000000))*(new_r00)*(x585))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r01)*(x585)))+(((IkReal(-1.00000000000000))*(new_r21)*(x584))));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x584)))+(((IkReal(-1.00000000000000))*(new_r02)*(x585))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x586=IKsin(j6);
IkReal x587=IKcos(j6);
IkReal x588=((IkReal(2.00000000000000))*(atan(htj5)));
IkReal x589=((IkReal(1.00000000000000))*(x587));
IkReal x590=IKsin(x588);
IkReal x591=IKcos(x588);
IkReal x592=((IkReal(1.00000000000000))*(x590));
evalcond[0]=((new_r20)+(((x587)*(x590))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x586)*(x592)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x586)))+(new_r10));
evalcond[3]=((new_r11)+(((IkReal(-1.00000000000000))*(x589))));
evalcond[4]=((new_r01)+(((x586)*(x591))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x589)*(x591)))+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x592)))+(((new_r01)*(x591)))+(x586));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x592)))+(((new_r00)*(x591)))+(((IkReal(-1.00000000000000))*(x589))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x593=((IkReal(2.00000000000000))*(atan(htj5)));
IkReal x594=IKsin(x593);
IkReal x595=IKcos(x593);
IkReal x596=((((IkReal(-1.00000000000000))*(x595)))+(new_r22));
IkReal x597=((IkReal(1.00000000000000))*(x595));
IkReal x598=((IkReal(1.00000000000000))*(x594));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x593)))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x596;
evalcond[2]=x596;
evalcond[3]=((x594)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x598)))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r02)*(x597)))+(((IkReal(-1.00000000000000))*(new_r22)*(x598))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r20)*(x597)))+(((new_r00)*(x594))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x597)))+(((new_r01)*(x594))));
evalcond[10]=((IkReal(1.00000000000000))+(((new_r02)*(x594)))+(((IkReal(-1.00000000000000))*(new_r22)*(x597))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r11)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x599=IKsin(j6);
IkReal x600=IKcos(j6);
IkReal x601=((IkReal(2.00000000000000))*(atan(htj5)));
IkReal x602=((IkReal(1.00000000000000))*(x600));
IkReal x603=IKsin(x601);
IkReal x604=IKcos(x601);
IkReal x605=((IkReal(1.00000000000000))*(x604));
IkReal x606=((IkReal(1.00000000000000))*(x603));
evalcond[0]=((((x600)*(x603)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x599)*(x606)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x599)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x602))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)))+(((x599)*(x604))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x602)*(x604)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[6]=((x599)+(((IkReal(-1.00000000000000))*(new_r01)*(x605)))+(((IkReal(-1.00000000000000))*(new_r21)*(x606))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x606)))+(((IkReal(-1.00000000000000))*(x602)))+(((IkReal(-1.00000000000000))*(new_r00)*(x605))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x607=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x607;
evalcond[2]=x607;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x608=IKsin(j6);
IkReal x609=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x608)))+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x609)))+(new_r11));
evalcond[2]=((x608)+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x609)))+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x610=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x610;
evalcond[2]=x610;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x611=IKsin(j6);
IkReal x612=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x611)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x612)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[2]=((x611)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x612)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x613=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959)))))));
evalcond[1]=x613;
evalcond[2]=x613;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x613;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x614=IKcos(j6);
IkReal x615=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x615)))+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x614)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x615)))+(new_r01));
evalcond[3]=((x614)+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x616=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=x616;
evalcond[2]=x616;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x616;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x617=IKcos(j6);
IkReal x618=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x618)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x617)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x618)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[3]=((x617)+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x619=((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30);
if( IKabs(((x619)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x619))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x619)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x619)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x619)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((new_r20)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj5)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x619)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x620=IKsin(j6);
IkReal x621=IKcos(j6);
IkReal x622=((IkReal(1.00000000000000))*(sj5));
IkReal x623=((IkReal(1.00000000000000))*(sj4));
IkReal x624=((cj5)*(sj4));
IkReal x625=((cj4)*(new_r01));
IkReal x626=((cj4)*(new_r00));
IkReal x627=((IkReal(1.00000000000000))*(x621));
IkReal x628=((cj5)*(x620));
IkReal x629=((IkReal(1.00000000000000))*(x620));
evalcond[0]=((((sj5)*(x621)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x620)*(x622)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x623)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x629))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x623)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x627))));
evalcond[4]=((((new_r11)*(sj4)))+(x625)+(x628));
evalcond[5]=((((sj4)*(x621)))+(((cj4)*(x628)))+(new_r01));
evalcond[6]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(cj5)*(x627)))+(x626));
evalcond[7]=((((sj4)*(x620)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x627)))+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj4)*(x627)))+(new_r11)+(((x620)*(x624))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj4)*(x629)))+(((IkReal(-1.00000000000000))*(cj5)*(x621)*(x623)))+(new_r10));
evalcond[10]=((((cj5)*(x625)))+(((IkReal(-1.00000000000000))*(new_r21)*(x622)))+(((new_r11)*(x624)))+(x620));
evalcond[11]=((((IkReal(-1.00000000000000))*(x627)))+(((cj5)*(x626)))+(((new_r10)*(x624)))+(((IkReal(-1.00000000000000))*(new_r20)*(x622))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x630=((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30);
if( IKabs(((x630)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x630))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x630)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x630)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x630)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(new_r00)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(new_r20)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x630)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x631=IKsin(j6);
IkReal x632=IKcos(j6);
IkReal x633=((IkReal(1.00000000000000))*(sj5));
IkReal x634=((IkReal(1.00000000000000))*(sj4));
IkReal x635=((cj5)*(sj4));
IkReal x636=((cj4)*(new_r01));
IkReal x637=((cj4)*(new_r00));
IkReal x638=((IkReal(1.00000000000000))*(x632));
IkReal x639=((cj5)*(x631));
IkReal x640=((IkReal(1.00000000000000))*(x631));
evalcond[0]=((((sj5)*(x632)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x631)*(x633)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x634)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x640))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x634)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x638))));
evalcond[4]=((((new_r11)*(sj4)))+(x636)+(x639));
evalcond[5]=((((sj4)*(x632)))+(((cj4)*(x639)))+(new_r01));
evalcond[6]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(cj5)*(x638)))+(x637));
evalcond[7]=((((sj4)*(x631)))+(new_r00)+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x638))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj4)*(x638)))+(new_r11)+(((x631)*(x635))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj5)*(x632)*(x634)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj4)*(x640))));
evalcond[10]=((((cj5)*(x636)))+(((IkReal(-1.00000000000000))*(new_r21)*(x633)))+(((new_r11)*(x635)))+(x631));
evalcond[11]=((((IkReal(-1.00000000000000))*(x638)))+(((cj5)*(x637)))+(((IkReal(-1.00000000000000))*(new_r20)*(x633)))+(((new_r10)*(x635))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
Atan2Value<IkReal> x641 = IKatan2WithCheck(((gconst81)*(new_r21)),((IkReal(-1.00000000000000))*(gconst81)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x641.valid ) {
    continue;
}
j6array[0]=x641.value;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x642=IKsin(j6);
IkReal x643=IKcos(j6);
IkReal x644=((IkReal(1.00000000000000))*(sj5));
IkReal x645=((IkReal(1.00000000000000))*(sj4));
IkReal x646=((cj5)*(sj4));
IkReal x647=((cj4)*(new_r01));
IkReal x648=((cj4)*(new_r00));
IkReal x649=((IkReal(1.00000000000000))*(x643));
IkReal x650=((cj5)*(x642));
IkReal x651=((IkReal(1.00000000000000))*(x642));
evalcond[0]=((((sj5)*(x643)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x642)*(x644)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x651)))+(((IkReal(-1.00000000000000))*(new_r00)*(x645))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x649)))+(((IkReal(-1.00000000000000))*(new_r01)*(x645))));
evalcond[4]=((((new_r11)*(sj4)))+(x647)+(x650));
evalcond[5]=((((cj4)*(x650)))+(((sj4)*(x643)))+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj5)*(x649)))+(((new_r10)*(sj4)))+(x648));
evalcond[7]=((((sj4)*(x642)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x649)))+(new_r00));
evalcond[8]=((new_r11)+(((x642)*(x646)))+(((IkReal(-1.00000000000000))*(cj4)*(x649))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj5)*(x643)*(x645)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj4)*(x651))));
evalcond[10]=((((cj5)*(x647)))+(((new_r11)*(x646)))+(((IkReal(-1.00000000000000))*(new_r21)*(x644)))+(x642));
evalcond[11]=((((cj5)*(x648)))+(((IkReal(-1.00000000000000))*(x649)))+(((new_r10)*(x646)))+(((IkReal(-1.00000000000000))*(new_r20)*(x644))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "2ac375a0aaf420715f482953e36187a5"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
