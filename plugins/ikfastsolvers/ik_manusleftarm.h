/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-06-09 23:26:01.849424
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j2, cj2, sj2,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    _r00, r00 = eerot[0*3+0],
    _r01, r01 = eerot[0*3+1],
    _r02, r02 = eerot[0*3+2],
    _r10, r10 = eerot[1*3+0],
    _r11, r11 = eerot[1*3+1],
    _r12, r12 = eerot[1*3+2],
    _r20, r20 = eerot[2*3+0],
    _r21, r21 = eerot[2*3+1],
    _r22, r22 = eerot[2*3+2],
    _px, _py, _pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    _r00=r00;
    _r01=((-1.00000000000000)*(r02));
    _r02=r01;
    _px=((-0.0454200000000000)+(px));
    _r10=r10;
    _r11=((-1.00000000000000)*(r12));
    _r12=r11;
    _py=((0.147590000000000)+(py));
    _r20=r20;
    _r21=((-1.00000000000000)*(r22));
    _r22=r21;
    _pz=((-0.467050000000000)+(pz));
    r00 = _r00; r01 = _r01; r02 = _r02; r10 = _r10; r11 = _r11; r12 = _r12; r20 = _r20; r21 = _r21; r22 = _r22; px = _px; py = _py; pz = _pz;
    {
        if( 1 ) {
        {
        IKReal j2array[2], cj2array[2], sj2array[2];
        bool j2valid[2]={false};
        cj2array[0]=((-0.302547545772541)+(((3.72981239046203)*((px)*(px))))+(((-3.35683115141001)*(py)))+(((3.72981239046203)*((py)*(py))))+(((3.72981239046203)*((pz)*(pz)))));
        if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
            j2valid[0] = j2valid[1] = true;
            j2array[0] = IKacos(cj2array[0]);
            sj2array[0] = IKsin(j2array[0]);
            cj2array[1] = cj2array[0];
            j2array[1] = -j2array[0];
            sj2array[1] = -sj2array[0];
        }
        else if( isnan(cj2array[0]) ) {
            // probably any value will work
            j2valid[0] = true;
            cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
        }
        if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
            j2valid[1]=false;
        for(int ij2 = 0; ij2 < 2; ++ij2) {
        if( !j2valid[ij2] )
            continue;
        j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
        
        {
            IKReal j0eval[1];
            j0eval[0]=(((px)*(px))+((pz)*(pz)));
            if( IKabs(j0eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x0=((-0.100150000000212)+(((-1.00000000000000)*(px))));
                        IKReal x1=((-0.100150000001122)+(((-1.00000000000000)*(px))));
                        j0eval[0]=x0;
                        j0eval[1]=x0;
                        j0eval[2]=x1;
                        j0eval[3]=x1;
                        j0eval[4]=x1;
                        j0eval[5]=x1;
                        j0eval[6]=x0;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x2=((0.450000000000728)+(((-1.00000000000000)*(py))));
                            IKReal x3=((0.330999999998312)*(cj2));
                            IKReal x4=((0.404999999998836)+(x3));
                            IKReal x5=(pz)*(pz);
                            IKReal x6=(x2)*(x2);
                            IKReal x7=((x6)+(x5));
                            IKReal x8=((-1.00000000000000)*(x7));
                            IKReal x9=((IKabs(x8) != 0)?((IKReal)1/(x8)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((x9)*(((((0.330999999998312)*(pz)*(sj2)))+(((x2)*(x4)))))), ((x9)*(((((-1.00000000000000)*(pz)*(x4)))+(((0.330999999998312)*(sj2)*(x2)))))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(cj1)*(cj2)*(r00)*(sj0)))+(((cj1)*(r10)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r20)))+(((r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1)*(sj2)))+(((cj2)*(r10)*(sj1))));
                            _r01=((((cj1)*(r11)*(sj2)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)*(sj2)))+(((cj2)*(r11)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r01)*(sj0)))+(((r01)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r21))));
                            _r02=((((cj1)*(r12)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r22)))+(((r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r02)*(sj0))));
                            _r10=((((r20)*(sj0)))+(((cj0)*(r00))));
                            _r11=((((r21)*(sj0)))+(((cj0)*(r01))));
                            _r12=((((cj0)*(r02)))+(((r22)*(sj0))));
                            _r20=((((cj1)*(cj2)*(r10)))+(((-1.00000000000000)*(cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj2)))+(((cj2)*(r00)*(sj0)*(sj1))));
                            _r21=((((-1.00000000000000)*(r11)*(sj1)*(sj2)))+(((cj2)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj2)))+(((cj1)*(r01)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r11)))+(((-1.00000000000000)*(cj0)*(cj2)*(r21)*(sj1))));
                            _r22=((((cj1)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj2)))+(((cj2)*(r02)*(sj0)*(sj1))));
                            {
                            IKReal j4eval;
                            j4eval=_r02;
                            if( j4eval >= -1.000010 && j4eval <= -0.999990 ) {
                                {
                                j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
                                IKReal j3mul = 1;
                                j3=0;
                                IKReal j5mul=1.00000000000000;
                                j5=((-1.00000000000000)*(IKatan2(_r20, _r21)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(6);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[3].fmul = j3mul;
                                solution.basesol[3].freeind = 0;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[5].fmul = j5mul;
                                solution.basesol[5].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 3;
                                }
                                }
                            else if( j4eval >= 0.999990 && j4eval <= 1.000010 ) {
                                {
                                j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
                                IKReal j3mul = 1;
                                j3=0;
                                IKReal j5mul=-1.00000000000000;
                                j5=((((-1.00000000000000)*(IKatan2(_r11, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(6);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[3].fmul = j3mul;
                                solution.basesol[3].freeind = 0;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[5].fmul = j5mul;
                                solution.basesol[5].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 3;
                                }
                                }
                            else {
                                {
                                IKReal j3array[2], cj3array[2], sj3array[2];
                                bool j3valid[2]={false};
                                j3array[0]=IKatan2(((-1.00000000000000)*(_r22)), _r12);
                                sj3array[0]=IKsin(j3array[0]);
                                cj3array[0]=IKcos(j3array[0]);
                                j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
                                sj3array[1] = -sj3array[0];
                                cj3array[1] = -cj3array[0];
                                if( j3array[0] > IKPI )
                                    j3array[0]-=IK2PI;
                                else if( j3array[0] < -IKPI )
                                    j3array[0]+=IK2PI;
                                j3valid[0] = true;
                                if( j3array[1] > IKPI )
                                    j3array[1]-=IK2PI;
                                else if( j3array[1] < -IKPI )
                                    j3array[1]+=IK2PI;
                                j3valid[1] = true;
                                if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                                    j3valid[1]=false;
                                for(int ij3 = 0; ij3 < 2; ++ij3) {
                                if( !j3valid[ij3] )
                                    continue;
                                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j3);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    IKReal x10=IKsin(j3);
                                    IKReal x11=((IKabs(x10) != 0)?((IKReal)1/(x10)):(IKReal)1.0e30);
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x11)), ((_r11)*(x11)));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r22)*(((IKabs(IKsin(j3)) != 0)?((IKReal)1/(IKsin(j3))):(IKReal)1.0e30))), _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    { int ij4 = 0;
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(6);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1]={false};
                                    j4array[0]=IKatan2(((_r12)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))), _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    { int ij4 = 0;
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        IKReal x12=IKcos(j4);
                                        IKReal x13=((IKabs(x12) != 0)?((IKReal)1/(x12)):(IKReal)1.0e30);
                                        IKReal x14=IKcos(j3);
                                        IKReal x15=IKsin(j3);
                                        j5array[0]=IKatan2(((((-1.00000000000000)*(_r21)*(x13)*(x15)))+(((_r11)*(x13)*(x14)))), ((((_r21)*(x14)))+(((_r11)*(x15)))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(6);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        IKReal x16=IKsin(j4);
                                        IKReal x17=((IKabs(x16) != 0)?((IKReal)1/(x16)):(IKReal)1.0e30);
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r01)*(x17)), ((-1.00000000000000)*(_r00)*(x17)));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(6);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[5];
                        IKReal x18=((0.330999999998312)*(sj2));
                        IKReal x19=((0.450000000000728)+(x18));
                        IKReal x20=((((-1.00000000000000)*(py)))+(x19));
                        j1eval[0]=x20;
                        j1eval[1]=x20;
                        j1eval[2]=x20;
                        j1eval[3]=x20;
                        j1eval[4]=x20;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x21=(px)*(px);
                            IKReal x22=(pz)*(pz);
                            IKReal x23=((x21)+(x22));
                            IKReal x24=((IKabs(x23) != 0)?((IKReal)1/(x23)):(IKReal)1.0e30);
                            IKReal x25=((0.330999999998312)*(cj2));
                            IKReal x26=((0.404999999998836)+(x25));
                            j0array[0]=IKatan2(((x24)*(((((-1.00000000000000)*(px)*(x26)))+(((-0.100150000000212)*(pz)))))), ((x24)*(((((-0.100150000000212)*(px)))+(((pz)*(x26)))))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((-1.00000000000000)*(cj1)*(cj2)*(r00)*(sj0)))+(((cj1)*(r10)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r20)))+(((r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1)*(sj2)))+(((cj2)*(r10)*(sj1))));
                            _r01=((((cj1)*(r11)*(sj2)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)*(sj2)))+(((cj2)*(r11)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r01)*(sj0)))+(((r01)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r21))));
                            _r02=((((cj1)*(r12)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r22)))+(((r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r02)*(sj0))));
                            _r10=((((r20)*(sj0)))+(((cj0)*(r00))));
                            _r11=((((r21)*(sj0)))+(((cj0)*(r01))));
                            _r12=((((cj0)*(r02)))+(((r22)*(sj0))));
                            _r20=((((cj1)*(cj2)*(r10)))+(((-1.00000000000000)*(cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj2)))+(((cj2)*(r00)*(sj0)*(sj1))));
                            _r21=((((-1.00000000000000)*(r11)*(sj1)*(sj2)))+(((cj2)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj2)))+(((cj1)*(r01)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r11)))+(((-1.00000000000000)*(cj0)*(cj2)*(r21)*(sj1))));
                            _r22=((((cj1)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj2)))+(((cj2)*(r02)*(sj0)*(sj1))));
                            {
                            IKReal j4eval;
                            j4eval=_r02;
                            if( j4eval >= -1.000010 && j4eval <= -0.999990 ) {
                                {
                                j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
                                IKReal j3mul = 1;
                                j3=0;
                                IKReal j5mul=1.00000000000000;
                                j5=((-1.00000000000000)*(IKatan2(_r20, _r21)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(6);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[3].fmul = j3mul;
                                solution.basesol[3].freeind = 0;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[5].fmul = j5mul;
                                solution.basesol[5].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 3;
                                }
                                }
                            else if( j4eval >= 0.999990 && j4eval <= 1.000010 ) {
                                {
                                j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
                                IKReal j3mul = 1;
                                j3=0;
                                IKReal j5mul=-1.00000000000000;
                                j5=((((-1.00000000000000)*(IKatan2(_r11, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(6);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[3].fmul = j3mul;
                                solution.basesol[3].freeind = 0;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[5].fmul = j5mul;
                                solution.basesol[5].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 3;
                                }
                                }
                            else {
                                {
                                IKReal j3array[2], cj3array[2], sj3array[2];
                                bool j3valid[2]={false};
                                j3array[0]=IKatan2(((-1.00000000000000)*(_r22)), _r12);
                                sj3array[0]=IKsin(j3array[0]);
                                cj3array[0]=IKcos(j3array[0]);
                                j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
                                sj3array[1] = -sj3array[0];
                                cj3array[1] = -cj3array[0];
                                if( j3array[0] > IKPI )
                                    j3array[0]-=IK2PI;
                                else if( j3array[0] < -IKPI )
                                    j3array[0]+=IK2PI;
                                j3valid[0] = true;
                                if( j3array[1] > IKPI )
                                    j3array[1]-=IK2PI;
                                else if( j3array[1] < -IKPI )
                                    j3array[1]+=IK2PI;
                                j3valid[1] = true;
                                if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                                    j3valid[1]=false;
                                for(int ij3 = 0; ij3 < 2; ++ij3) {
                                if( !j3valid[ij3] )
                                    continue;
                                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j3);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    IKReal x27=IKsin(j3);
                                    IKReal x28=((IKabs(x27) != 0)?((IKReal)1/(x27)):(IKReal)1.0e30);
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x28)), ((_r11)*(x28)));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r22)*(((IKabs(IKsin(j3)) != 0)?((IKReal)1/(IKsin(j3))):(IKReal)1.0e30))), _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    { int ij4 = 0;
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(6);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1]={false};
                                    j4array[0]=IKatan2(((_r12)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))), _r02);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    { int ij4 = 0;
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        IKReal x29=IKcos(j4);
                                        IKReal x30=((IKabs(x29) != 0)?((IKReal)1/(x29)):(IKReal)1.0e30);
                                        IKReal x31=IKcos(j3);
                                        IKReal x32=IKsin(j3);
                                        j5array[0]=IKatan2(((((-1.00000000000000)*(_r21)*(x30)*(x32)))+(((_r11)*(x30)*(x31)))), ((((_r11)*(x32)))+(((_r21)*(x31)))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(6);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        IKReal x33=IKsin(j4);
                                        IKReal x34=((IKabs(x33) != 0)?((IKReal)1/(x33)):(IKReal)1.0e30);
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r01)*(x34)), ((-1.00000000000000)*(_r00)*(x34)));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(6);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j0array[2], cj0array[2], sj0array[2];
                    bool j0valid[2]={false};
                    IKReal x35=((-1.00000000000000)*(px));
                    IKReal x36=((-1.00000000000000)*(pz));
                    IKReal x37=IKatan2(x35, x36);
                    IKReal x38=(px)*(px);
                    IKReal x39=(pz)*(pz);
                    IKReal x40=((x39)+(x38));
                    IKReal x41=((IKabs(x40) != 0)?(pow(x40,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x42=((0.100150000000212)*(x41));
                    if( (x42) < -1.0001 || (x42) > 1.0001 )
                        continue;
                    IKReal x43=IKasin(x42);
                    j0array[0]=((x43)+(((-1.00000000000000)*(x37))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x43)))+(((-1.00000000000000)*(x37))));
                    sj0array[1]=IKsin(j0array[1]);
                    cj0array[1]=IKcos(j0array[1]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    if( j0array[1] > IKPI )
                        j0array[1]-=IK2PI;
                    else if( j0array[1] < -IKPI )
                        j0array[1]+=IK2PI;
                    j0valid[1] = true;
                    if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                        j0valid[1]=false;
                    for(int ij0 = 0; ij0 < 2; ++ij0) {
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x44=((0.330999999998312)*(cj2));
                    IKReal x45=((0.404999999998836)+(x44));
                    IKReal x46=(x45)*(x45);
                    IKReal x47=(sj2)*(sj2);
                    IKReal x48=((0.109560999999303)*(x47));
                    IKReal x49=((x48)+(x46));
                    IKReal x50=((IKabs(x49) != 0)?((IKReal)1/(x49)):(IKReal)1.0e30);
                    IKReal x51=((0.450000000000728)+(((-1.00000000000000)*(py))));
                    IKReal x52=((px)*(sj0));
                    IKReal x53=((cj0)*(pz));
                    IKReal x54=((x52)+(((-1.00000000000000)*(x53))));
                    j1array[0]=IKatan2(((x50)*(((((-1.00000000000000)*(x45)*(x51)))+(((0.330999999998312)*(sj2)*(x54)))))), ((x50)*(((((-1.00000000000000)*(x54)*(((0.404999999998836)+(x44)))))+(((-0.330999999998312)*(sj2)*(x51)))))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((-1.00000000000000)*(cj1)*(cj2)*(r00)*(sj0)))+(((cj1)*(r10)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r20)))+(((r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1)*(sj2)))+(((cj2)*(r10)*(sj1))));
                    _r01=((((cj1)*(r11)*(sj2)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)*(sj2)))+(((cj2)*(r11)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r01)*(sj0)))+(((r01)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r21))));
                    _r02=((((cj1)*(r12)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r22)))+(((r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r02)*(sj0))));
                    _r10=((((r20)*(sj0)))+(((cj0)*(r00))));
                    _r11=((((r21)*(sj0)))+(((cj0)*(r01))));
                    _r12=((((cj0)*(r02)))+(((r22)*(sj0))));
                    _r20=((((cj1)*(cj2)*(r10)))+(((-1.00000000000000)*(cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj2)))+(((cj2)*(r00)*(sj0)*(sj1))));
                    _r21=((((-1.00000000000000)*(r11)*(sj1)*(sj2)))+(((cj2)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj2)))+(((cj1)*(r01)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r11)))+(((-1.00000000000000)*(cj0)*(cj2)*(r21)*(sj1))));
                    _r22=((((cj1)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj2)))+(((cj2)*(r02)*(sj0)*(sj1))));
                    {
                    IKReal j4eval;
                    j4eval=_r02;
                    if( j4eval >= -1.000010 && j4eval <= -0.999990 ) {
                        {
                        j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
                        IKReal j3mul = 1;
                        j3=0;
                        IKReal j5mul=1.00000000000000;
                        j5=((-1.00000000000000)*(IKatan2(_r20, _r21)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(6);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[3].fmul = j3mul;
                        solution.basesol[3].freeind = 0;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[5].fmul = j5mul;
                        solution.basesol[5].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 3;
                        }
                        }
                    else if( j4eval >= 0.999990 && j4eval <= 1.000010 ) {
                        {
                        j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
                        IKReal j3mul = 1;
                        j3=0;
                        IKReal j5mul=-1.00000000000000;
                        j5=((((-1.00000000000000)*(IKatan2(_r11, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(6);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[3].fmul = j3mul;
                        solution.basesol[3].freeind = 0;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[5].fmul = j5mul;
                        solution.basesol[5].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 3;
                        }
                        }
                    else {
                        {
                        IKReal j3array[2], cj3array[2], sj3array[2];
                        bool j3valid[2]={false};
                        j3array[0]=IKatan2(((-1.00000000000000)*(_r22)), _r12);
                        sj3array[0]=IKsin(j3array[0]);
                        cj3array[0]=IKcos(j3array[0]);
                        j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
                        sj3array[1] = -sj3array[0];
                        cj3array[1] = -cj3array[0];
                        if( j3array[0] > IKPI )
                            j3array[0]-=IK2PI;
                        else if( j3array[0] < -IKPI )
                            j3array[0]+=IK2PI;
                        j3valid[0] = true;
                        if( j3array[1] > IKPI )
                            j3array[1]-=IK2PI;
                        else if( j3array[1] < -IKPI )
                            j3array[1]+=IK2PI;
                        j3valid[1] = true;
                        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                            j3valid[1]=false;
                        for(int ij3 = 0; ij3 < 2; ++ij3) {
                        if( !j3valid[ij3] )
                            continue;
                        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKcos(j3);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            IKReal x55=IKsin(j3);
                            IKReal x56=((IKabs(x55) != 0)?((IKReal)1/(x55)):(IKReal)1.0e30);
                            j5array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x56)), ((_r11)*(x56)));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j4array[1], cj4array[1], sj4array[1];
                            bool j4valid[1]={false};
                            j4array[0]=IKatan2(((-1.00000000000000)*(_r22)*(((IKabs(IKsin(j3)) != 0)?((IKReal)1/(IKsin(j3))):(IKReal)1.0e30))), _r02);
                            sj4array[0]=IKsin(j4array[0]);
                            cj4array[0]=IKcos(j4array[0]);
                            if( j4array[0] > IKPI )
                                j4array[0]-=IK2PI;
                            else if( j4array[0] < -IKPI )
                                j4array[0]+=IK2PI;
                            j4valid[0] = true;
                            { int ij4 = 0;
                            if( !j4valid[ij4] )
                                continue;
                            j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(6);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j4array[1], cj4array[1], sj4array[1];
                            bool j4valid[1]={false};
                            j4array[0]=IKatan2(((_r12)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))), _r02);
                            sj4array[0]=IKsin(j4array[0]);
                            cj4array[0]=IKcos(j4array[0]);
                            if( j4array[0] > IKPI )
                                j4array[0]-=IK2PI;
                            else if( j4array[0] < -IKPI )
                                j4array[0]+=IK2PI;
                            j4valid[0] = true;
                            { int ij4 = 0;
                            if( !j4valid[ij4] )
                                continue;
                            j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                            
                            {
                            IKReal evalcond;
                                evalcond=IKsin(j4);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                IKReal x57=IKcos(j4);
                                IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
                                IKReal x59=IKcos(j3);
                                IKReal x60=IKsin(j3);
                                j5array[0]=IKatan2(((((_r11)*(x58)*(x59)))+(((-1.00000000000000)*(_r21)*(x58)*(x60)))), ((((_r21)*(x59)))+(((_r11)*(x60)))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(6);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                IKReal x61=IKsin(j4);
                                IKReal x62=((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30);
                                j5array[0]=IKatan2(((-1.00000000000000)*(_r01)*(x62)), ((-1.00000000000000)*(_r00)*(x62)));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(6);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x63=((-1.00000000000000)*(px));
                IKReal x64=((-1.00000000000000)*(pz));
                IKReal x65=IKatan2(x63, x64);
                IKReal x66=(px)*(px);
                IKReal x67=(pz)*(pz);
                IKReal x68=((x66)+(x67));
                IKReal x69=((IKabs(x68) != 0)?(pow(x68,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x70=((0.100150000000212)*(x69));
                if( (x70) < -1.0001 || (x70) > 1.0001 )
                    continue;
                IKReal x71=IKasin(x70);
                j0array[0]=((x71)+(((-1.00000000000000)*(x65))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x65)))+(((-1.00000000000000)*(x71))));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0) {
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x72=((0.330999999998312)*(cj2));
                IKReal x73=((0.404999999998836)+(x72));
                IKReal x74=(x73)*(x73);
                IKReal x75=(sj2)*(sj2);
                IKReal x76=((0.109560999999303)*(x75));
                IKReal x77=((x76)+(x74));
                IKReal x78=((IKabs(x77) != 0)?((IKReal)1/(x77)):(IKReal)1.0e30);
                IKReal x79=((0.450000000000728)+(((-1.00000000000000)*(py))));
                IKReal x80=((px)*(sj0));
                IKReal x81=((cj0)*(pz));
                IKReal x82=((((-1.00000000000000)*(x81)))+(x80));
                j1array[0]=IKatan2(((x78)*(((((0.330999999998312)*(sj2)*(x82)))+(((-1.00000000000000)*(x73)*(x79)))))), ((x78)*(((((-1.00000000000000)*(x82)*(((0.404999999998836)+(x72)))))+(((-0.330999999998312)*(sj2)*(x79)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((-1.00000000000000)*(cj1)*(cj2)*(r00)*(sj0)))+(((cj1)*(r10)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r20)))+(((r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1)*(sj2)))+(((cj2)*(r10)*(sj1))));
                _r01=((((cj1)*(r11)*(sj2)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)*(sj2)))+(((cj2)*(r11)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r01)*(sj0)))+(((r01)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r21))));
                _r02=((((cj1)*(r12)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r22)))+(((r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r02)*(sj0))));
                _r10=((((r20)*(sj0)))+(((cj0)*(r00))));
                _r11=((((r21)*(sj0)))+(((cj0)*(r01))));
                _r12=((((cj0)*(r02)))+(((r22)*(sj0))));
                _r20=((((cj1)*(cj2)*(r10)))+(((-1.00000000000000)*(cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj2)))+(((cj2)*(r00)*(sj0)*(sj1))));
                _r21=((((-1.00000000000000)*(r11)*(sj1)*(sj2)))+(((cj2)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj2)))+(((cj1)*(r01)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r11)))+(((-1.00000000000000)*(cj0)*(cj2)*(r21)*(sj1))));
                _r22=((((cj1)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj2)))+(((cj2)*(r02)*(sj0)*(sj1))));
                {
                IKReal j4eval;
                j4eval=_r02;
                if( j4eval >= -1.000010 && j4eval <= -0.999990 ) {
                    {
                    j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
                    IKReal j3mul = 1;
                    j3=0;
                    IKReal j5mul=1.00000000000000;
                    j5=((-1.00000000000000)*(IKatan2(_r20, _r21)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[3].fmul = j3mul;
                    solution.basesol[3].freeind = 0;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[5].fmul = j5mul;
                    solution.basesol[5].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 3;
                    }
                    }
                else if( j4eval >= 0.999990 && j4eval <= 1.000010 ) {
                    {
                    j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
                    IKReal j3mul = 1;
                    j3=0;
                    IKReal j5mul=-1.00000000000000;
                    j5=((((-1.00000000000000)*(IKatan2(_r11, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[3].fmul = j3mul;
                    solution.basesol[3].freeind = 0;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[5].fmul = j5mul;
                    solution.basesol[5].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 3;
                    }
                    }
                else {
                    {
                    IKReal j3array[2], cj3array[2], sj3array[2];
                    bool j3valid[2]={false};
                    j3array[0]=IKatan2(((-1.00000000000000)*(_r22)), _r12);
                    sj3array[0]=IKsin(j3array[0]);
                    cj3array[0]=IKcos(j3array[0]);
                    j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
                    sj3array[1] = -sj3array[0];
                    cj3array[1] = -cj3array[0];
                    if( j3array[0] > IKPI )
                        j3array[0]-=IK2PI;
                    else if( j3array[0] < -IKPI )
                        j3array[0]+=IK2PI;
                    j3valid[0] = true;
                    if( j3array[1] > IKPI )
                        j3array[1]-=IK2PI;
                    else if( j3array[1] < -IKPI )
                        j3array[1]+=IK2PI;
                    j3valid[1] = true;
                    if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                        j3valid[1]=false;
                    for(int ij3 = 0; ij3 < 2; ++ij3) {
                    if( !j3valid[ij3] )
                        continue;
                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKcos(j3);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        IKReal x83=IKsin(j3);
                        IKReal x84=((IKabs(x83) != 0)?((IKReal)1/(x83)):(IKReal)1.0e30);
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x84)), ((_r11)*(x84)));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1]={false};
                        j4array[0]=IKatan2(((-1.00000000000000)*(_r22)*(((IKabs(IKsin(j3)) != 0)?((IKReal)1/(IKsin(j3))):(IKReal)1.0e30))), _r02);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        { int ij4 = 0;
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(6);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1]={false};
                        j4array[0]=IKatan2(((_r12)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))), _r02);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        { int ij4 = 0;
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            IKReal x85=IKcos(j4);
                            IKReal x86=((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30);
                            IKReal x87=IKcos(j3);
                            IKReal x88=IKsin(j3);
                            j5array[0]=IKatan2(((((-1.00000000000000)*(_r21)*(x86)*(x88)))+(((_r11)*(x86)*(x87)))), ((((_r21)*(x87)))+(((_r11)*(x88)))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(6);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            IKReal x89=IKsin(j4);
                            IKReal x90=((IKabs(x89) != 0)?((IKReal)1/(x89)):(IKReal)1.0e30);
                            j5array[0]=IKatan2(((-1.00000000000000)*(_r01)*(x90)), ((-1.00000000000000)*(_r00)*(x90)));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(6);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
