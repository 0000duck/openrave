/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-11-18 15:36:01.923539
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;
x0=IKcos(j[5]);
x1=IKcos(j[0]);
x2=IKcos(j[1]);
x3=IKcos(j[3]);
x4=IKsin(j[0]);
x5=IKsin(j[5]);
x6=IKcos(j[4]);
x7=IKsin(j[2]);
x8=IKsin(j[3]);
x9=IKcos(j[2]);
x10=IKsin(j[1]);
x11=IKsin(j[4]);
eerot[0]=((((-1.00000000000000)*(x0)*(x10)*(x4)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x4)*(x7)))+(((x0)*(x1)*(x3)*(x6)))+(((-1.00000000000000)*(x1)*(x5)*(x8)))+(((-1.00000000000000)*(x2)*(x3)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x2)*(x4)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x3)*(x4)*(x5)*(x9)))+(((x0)*(x11)*(x2)*(x4)*(x9))));
eerot[1]=((((x10)*(x4)*(x6)*(x7)))+(((-1.00000000000000)*(x11)*(x2)*(x4)*(x7)*(x8)))+(((-1.00000000000000)*(x2)*(x4)*(x6)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x4)*(x8)*(x9)))+(((x1)*(x11)*(x3))));
eerot[2]=((((x10)*(x4)*(x5)*(x6)*(x8)*(x9)))+(((x10)*(x11)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x8)))+(((-1.00000000000000)*(x11)*(x2)*(x4)*(x5)*(x9)))+(((x2)*(x4)*(x5)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x2)*(x3)*(x4)*(x7)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x4)*(x9)))+(((-1.00000000000000)*(x1)*(x3)*(x5)*(x6))));
eetrans[0]=((0.0454200000000000)+(((-0.331000000000000)*(x2)*(x4)*(x9)))+(((-0.405000000000000)*(x2)*(x4)))+(((0.331000000000000)*(x10)*(x4)*(x7)))+(((-0.100150000000000)*(x1))));
eerot[3]=((((x0)*(x10)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x2)*(x3)*(x5)*(x9)))+(((-1.00000000000000)*(x0)*(x2)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x2)*(x7)))+(((x10)*(x3)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x9))));
eerot[4]=((((-1.00000000000000)*(x11)*(x2)*(x8)*(x9)))+(((x10)*(x11)*(x7)*(x8)))+(((x2)*(x6)*(x7)))+(((x10)*(x6)*(x9))));
eerot[5]=((((x10)*(x11)*(x5)*(x9)))+(((-1.00000000000000)*(x10)*(x5)*(x6)*(x7)*(x8)))+(((x0)*(x10)*(x3)*(x7)))+(((-1.00000000000000)*(x0)*(x2)*(x3)*(x9)))+(((x2)*(x5)*(x6)*(x8)*(x9)))+(((x11)*(x2)*(x5)*(x7))));
eetrans[1]=((0.302410000000000)+(((0.405000000000000)*(x10)))+(((0.331000000000000)*(x2)*(x7)))+(((0.331000000000000)*(x10)*(x9))));
eerot[6]=((((-1.00000000000000)*(x4)*(x5)*(x8)))+(((x0)*(x1)*(x10)*(x6)*(x8)*(x9)))+(((x1)*(x10)*(x3)*(x5)*(x9)))+(((x0)*(x3)*(x4)*(x6)))+(((x0)*(x1)*(x2)*(x6)*(x7)*(x8)))+(((x0)*(x1)*(x10)*(x11)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x2)*(x9)))+(((x1)*(x2)*(x3)*(x5)*(x7))));
eerot[7]=((((x1)*(x11)*(x2)*(x7)*(x8)))+(((x1)*(x2)*(x6)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x6)*(x7)))+(((x11)*(x3)*(x4)))+(((x1)*(x10)*(x11)*(x8)*(x9))));
eerot[8]=((((x0)*(x1)*(x2)*(x3)*(x7)))+(((-1.00000000000000)*(x0)*(x4)*(x8)))+(((-1.00000000000000)*(x1)*(x10)*(x11)*(x5)*(x7)))+(((x1)*(x11)*(x2)*(x5)*(x9)))+(((x0)*(x1)*(x10)*(x3)*(x9)))+(((-1.00000000000000)*(x1)*(x10)*(x5)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x3)*(x4)*(x5)*(x6)))+(((-1.00000000000000)*(x1)*(x2)*(x5)*(x6)*(x7)*(x8))));
eetrans[2]=((0.467050000000000)+(((0.405000000000000)*(x1)*(x2)))+(((0.331000000000000)*(x1)*(x2)*(x9)))+(((-0.100150000000000)*(x4)))+(((-0.331000000000000)*(x1)*(x10)*(x7))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j2, cj2, sj2,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.00000000000000)*(r02));
new_r02=r01;
new_px=((-0.0454200000000000)+(px));
new_r10=r10;
new_r11=((-1.00000000000000)*(r12));
new_r12=r11;
new_py=((-0.302410000000000)+(py));
new_r20=r20;
new_r21=((-1.00000000000000)*(r22));
new_r22=r21;
new_pz=((-0.467050000000000)+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
{
if( 1 )
{
{
IKReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
cj2array[0]=((-1.05783455484689)+(((3.72981239043676)*((px)*(px))))+(((3.72981239043676)*((pz)*(pz))))+(((3.72981239043676)*((py)*(py)))));
if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
    j2valid[1]=false;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] ) { continue; }
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
IKReal x0=(px)*(px);
IKReal x1=(pz)*(pz);
IKReal x2=((x1)+(x0));
if( (x2) < (IKReal)-0.00001 )
    continue;
IKReal x3=IKsqrt(x2);
IKReal x4=IKabs(x3);
IKReal x5=((IKabs(x4) != 0)?((IKReal)1/(x4)):(IKReal)1.0e30);
IKReal x6=((0.100150000000000)*(x5));
if( (x6) < -1.0001 || (x6) > 1.0001 )
    continue;
IKReal x7=IKasin(x6);
IKReal x8=((-1.00000000000000)*(px));
IKReal x9=((-1.00000000000000)*(pz));
IKReal x10=IKatan2(x8, x9);
j0array[0]=((((-1.00000000000000)*(x10)))+(x7));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x10)))+(((-1.00000000000000)*(x7))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
if( j0array[1] > IKPI )
    j0array[1]-=IK2PI;
else if( j0array[1] < -IKPI )
    j0array[1]+=IK2PI;
j0valid[1] = true;
if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
    j0valid[1]=false;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal j1eval[1];
j1eval[0]=((((0.331000000000000)*(px)*(sj0)*(sj2)))+(((-0.405000000000000)*(py)))+(((-0.331000000000000)*(cj2)*(py)))+(((-0.331000000000000)*(cj0)*(pz)*(sj2))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((0.164025000000000)+(((0.109561000000000)*((cj2)*(cj2))))+(((0.109561000000000)*((sj2)*(sj2))))+(((0.268110000000000)*(cj2))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal j1eval[1];
j1eval[0]=((((0.405000000000000)*(px)*(sj0)))+(((0.331000000000000)*(py)*(sj2)))+(((-0.331000000000000)*(cj0)*(cj2)*(pz)))+(((-0.405000000000000)*(cj0)*(pz)))+(((0.331000000000000)*(cj2)*(px)*(sj0))));
if( IKabs(j1eval[0]) < 0.000001  )
{
{
IKReal evalcond[3];
evalcond[0]=((IKabs(py))+(IKabs(((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((3.14159265358979)+(j2)), ((2.00000000000000)*(3.14159265358979))))))));
evalcond[1]=((-0.100150000000000)+(((-1.00000000000000)*(pz)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
evalcond[2]=((0.551726022500000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
cj1array[0]=((((1.35869565217391)*(cj0)*(pz)))+(((-1.35869565217391)*(px)*(sj0))));
if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
    j1valid[1]=false;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

} else
{
evalcond[0]=((IKabs(((IKfmod(j2, ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))))))+(IKabs(py)));
evalcond[1]=((-0.100150000000000)+(((-1.00000000000000)*(pz)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
evalcond[2]=((0.0155060225000000)+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  )
{
{
IKReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
cj1array[0]=((((13.5135135135135)*(cj0)*(pz)))+(((-13.5135135135135)*(px)*(sj0))));
if( cj1array[0] >= -1.0001 && cj1array[0] <= 1.0001 )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
    j1valid[1]=false;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x38=((0.331000000000000)*(cj2));
IKReal x39=((0.405000000000000)+(x38));
IKReal x40=((0.405000000000000)*(px)*(sj0));
IKReal x41=((0.331000000000000)*(py)*(sj2));
IKReal x42=((px)*(sj0)*(x38));
IKReal x43=((x42)+(x40)+(x41));
IKReal x44=((0.405000000000000)*(cj0)*(pz));
IKReal x45=((cj0)*(pz)*(x38));
IKReal x46=((x44)+(x45));
IKReal x47=((((-1.00000000000000)*(x46)))+(x43));
IKReal x48=((IKabs(x47) != 0)?((IKReal)1/(x47)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x48)*(((((py)*(((((-1.00000000000000)*(cj0)*(pz)))+(((px)*(sj0)))))))+(((0.331000000000000)*(sj2)*(x39)))))), ((x48)*(((((-1.00000000000000)*((x39)*(x39))))+((py)*(py))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x49=(cj2)*(cj2);
IKReal x50=((0.109561000000000)*(x49));
IKReal x51=(sj2)*(sj2);
IKReal x52=((0.109561000000000)*(x51));
IKReal x53=((0.268110000000000)*(cj2));
IKReal x54=((0.164025000000000)+(x50)+(x53)+(x52));
IKReal x55=((IKabs(x54) != 0)?((IKReal)1/(x54)):(IKReal)1.0e30);
IKReal x56=((px)*(sj0));
IKReal x57=((cj0)*(pz));
IKReal x58=((x56)+(((-1.00000000000000)*(x57))));
j1array[0]=IKatan2(((x55)*(((((0.331000000000000)*(sj2)*(x58)))+(((py)*(((0.405000000000000)+(((0.331000000000000)*(cj2)))))))))), ((x55)*(((((0.331000000000000)*(py)*(sj2)))+(((-1.00000000000000)*(x58)*(((0.405000000000000)+(((0.331000000000000)*(cj2)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}

} else
{
{
IKReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
IKReal x59=((0.331000000000000)*(px)*(sj0)*(sj2));
IKReal x60=((0.331000000000000)*(cj2)*(py));
IKReal x61=((0.405000000000000)*(py));
IKReal x62=((0.331000000000000)*(cj0)*(pz)*(sj2));
IKReal x63=((x60)+(x61)+(x62));
IKReal x64=((x59)+(((-1.00000000000000)*(x63))));
IKReal x65=((IKabs(x64) != 0)?((IKReal)1/(x64)):(IKReal)1.0e30);
j1array[0]=IKatan2(((x65)*(((((-1.00000000000000)*((py)*(py))))+(((0.109561000000000)*((sj2)*(sj2))))))), ((-1.00000000000000)*(x65)*(((((py)*(((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(pz)))))))+(((0.331000000000000)*(sj2)*(((0.405000000000000)+(((0.331000000000000)*(cj2)))))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
    j1array[0]-=IK2PI;
else if( j1array[0] < -IKPI )
    j1array[0]+=IK2PI;
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] ) { continue; }
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

rotationfunction0(vsolutions);
}
}

}

}
}
}
}
}

} else
{
}
}
}
return vsolutions.size()>0;
}
inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
IKReal x11=((cj2)*(sj1));
IKReal x12=((cj1)*(sj2));
IKReal x13=((x11)+(x12));
IKReal x14=((sj0)*(sj1)*(sj2));
IKReal x15=((cj1)*(cj2)*(sj0));
IKReal x16=((((-1.00000000000000)*(x15)))+(x14));
IKReal x17=((cj0)*(cj1)*(cj2));
IKReal x18=((cj0)*(sj1)*(sj2));
IKReal x19=((((-1.00000000000000)*(x18)))+(x17));
IKReal x20=((cj0)*(x11));
IKReal x21=((cj0)*(x12));
IKReal x22=((x20)+(x21));
IKReal x23=((-1.00000000000000)*(x22));
IKReal x24=((cj1)*(cj2));
IKReal x25=((sj1)*(sj2));
IKReal x26=((((-1.00000000000000)*(x25)))+(x24));
IKReal x27=((sj0)*(x12));
IKReal x28=((sj0)*(x11));
IKReal x29=((x27)+(x28));
new_r00=((((r10)*(x13)))+(((r20)*(x19)))+(((r00)*(x16))));
new_r01=((((r21)*(x19)))+(((r01)*(x16)))+(((r11)*(x13))));
new_r02=((((r22)*(x19)))+(((r02)*(x16)))+(((r12)*(x13))));
new_r10=((((r20)*(sj0)))+(((cj0)*(r00))));
new_r11=((((r21)*(sj0)))+(((cj0)*(r01))));
new_r12=((((r22)*(sj0)))+(((cj0)*(r02))));
new_r20=((((r10)*(x26)))+(((r20)*(x23)))+(((r00)*(x29))));
new_r21=((((r21)*(x23)))+(((r01)*(x29)))+(((r11)*(x26))));
new_r22=((((r22)*(x23)))+(((r02)*(x29)))+(((r12)*(x26))));
{
IKReal j4eval;
j4eval=new_r02;
if( j4eval >= -1.000010 && j4eval <= -0.999990 )
{
{
j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
IKReal j3mul = 1;
j3=0;
IKReal j5mul=1.00000000000000;
j5=((-1.00000000000000)*(IKatan2(new_r20, new_r21)));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[3].fmul = j3mul;
solution.basesol[3].freeind = 0;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[5].fmul = j5mul;
solution.basesol[5].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 3;
}

} else
if( j4eval >= 0.999990 && j4eval <= 1.000010 )
{
{
j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
IKReal j3mul = 1;
j3=0;
IKReal j5mul=-1.00000000000000;
j5=((((-1.00000000000000)*(IKatan2(new_r11, ((-1.00000000000000)*(new_r10))))))+(((-1.00000000000000)*(3.14159265358979))));
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[3].fmul = j3mul;
solution.basesol[3].freeind = 0;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.basesol[5].fmul = j5mul;
solution.basesol[5].freeind = 0;
solution.vfree.resize(1);
solution.vfree[0] = 3;
}

} else
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
j3array[0]=IKatan2(((-1.00000000000000)*(new_r22)), new_r12);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
sj3array[1] = -sj3array[0];
cj3array[1] = -cj3array[0];
if( j3array[0] > IKPI )
    j3array[0]-=IK2PI;
else if( j3array[0] < -IKPI )
    j3array[0]+=IK2PI;
j3valid[0] = true;
if( j3array[1] > IKPI )
    j3array[1]-=IK2PI;
else if( j3array[1] < -IKPI )
    j3array[1]+=IK2PI;
j3valid[1] = true;
if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
    j3valid[1]=false;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] ) { continue; }
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal evalcond[1];
evalcond[0]=IKcos(j3);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x30=IKsin(j3);
IKReal x31=((IKabs(x30) != 0)?((IKReal)1/(x30)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.00000000000000)*(new_r10)*(x31)), ((new_r11)*(x31)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((-1.00000000000000)*(new_r22)*(((IKabs(IKsin(j3)) != 0)?((IKReal)1/(IKsin(j3))):(IKReal)1.0e30))), new_r02);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}
}
}

} else
{
if( 1 )
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((new_r12)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))), new_r02);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal evalcond[1];
evalcond[0]=IKsin(j4);
if( IKabs(evalcond[0]) < 0.000010  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x32=IKcos(j4);
IKReal x33=((IKabs(x32) != 0)?((IKReal)1/(x32)):(IKReal)1.0e30);
IKReal x34=IKsin(j3);
IKReal x35=IKcos(j3);
j5array[0]=IKatan2(((((new_r11)*(x33)*(x35)))+(((-1.00000000000000)*(new_r21)*(x33)*(x34)))), ((((new_r21)*(x35)))+(((new_r11)*(x34)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

} else
{
if( 1 )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x36=IKsin(j4);
IKReal x37=((IKabs(x36) != 0)?((IKReal)1/(x36)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(x37)), ((-1.00000000000000)*(new_r00)*(x37)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

} else
{
}
}
}
}
}

} else
{
}
}
}
}
}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "7effe1522cf52f168c8de000042e2bcf"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
