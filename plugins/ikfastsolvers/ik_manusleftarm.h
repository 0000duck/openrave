/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-10-27 10:09:17.011697
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <cassert>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
    x0=IKcos(j[3]);
    x1=IKsin(j[5]);
    x2=IKcos(j[4]);
    x3=IKcos(j[5]);
    x4=IKsin(j[3]);
    x5=IKcos(j[2]);
    x6=IKsin(j[4]);
    x7=IKsin(j[2]);
    x8=((x0)*(x1));
    x9=((x2)*(x3)*(x4));
    x10=((x9)+(x8));
    x11=((-1.00000000000000)*(x10));
    x12=IKsin(j[0]);
    x13=IKcos(j[1]);
    x14=IKsin(j[1]);
    x15=IKcos(j[0]);
    x16=((x0)*(x3));
    x17=((x1)*(x2)*(x4));
    x18=((((-1.00000000000000)*(x17)))+(x16));
    x19=((x11)*(x5));
    x20=((x3)*(x5)*(x6));
    x21=((x4)*(x6)*(x7));
    x22=((x2)*(x5));
    x23=((x21)+(x22));
    x24=((x2)*(x7));
    x25=((x4)*(x5)*(x6));
    x26=((((-1.00000000000000)*(x25)))+(x24));
    x27=((x1)*(x5)*(x6));
    x28=((x18)*(x5));
    x29=((0.331000000000000)*(x5));
    x30=((0.405000000000000)+(x29));
    x31=((x16)*(x2));
    x32=((x1)*(x4));
    x33=((((-1.00000000000000)*(x32)))+(x31));
    x34=((x10)*(x7));
    x35=((((-1.00000000000000)*(x20)))+(x34));
    x36=((x3)*(x6)*(x7));
    x37=((((-1.00000000000000)*(x16)))+(x17));
    x38=((x37)*(x7));
    x39=((x1)*(x6)*(x7));
    x40=((x2)*(x8));
    x41=((x3)*(x4));
    x42=((x40)+(x41));
    x43=((x13)*(x30));
    x44=((0.331000000000000)*(x14)*(x7));
    eerot[0]=((((x12)*(((((x13)*(((((x11)*(x7)))+(x20)))))+(((x14)*(((((-1.00000000000000)*(x36)))+(x19)))))))))+(((x15)*(x33))));
    eerot[1]=((((x12)*(((((x14)*(x26)))+(((-1.00000000000000)*(x13)*(x23)))))))+(((x0)*(x15)*(x6))));
    eerot[2]=((((-1.00000000000000)*(x12)*(((((x14)*(((((-1.00000000000000)*(x39)))+(x28)))))+(((x13)*(((((x18)*(x7)))+(x27)))))))))+(((-1.00000000000000)*(x15)*(x42))));
    eetrans[0]=((0.0454200000000000)+(((x12)*(((((-1.00000000000000)*(x43)))+(x44)))))+(((-0.100150000000000)*(x15))));
    eerot[3]=((((x14)*(x35)))+(((x13)*(((((-1.00000000000000)*(x36)))+(x19))))));
    eerot[4]=((((x14)*(x23)))+(((x13)*(x26))));
    eerot[5]=((((-1.00000000000000)*(x13)*(((((-1.00000000000000)*(x39)))+(x28)))))+(((-1.00000000000000)*(x14)*(((((-1.00000000000000)*(x27)))+(x38))))));
    eetrans[1]=((0.302410000000000)+(((x14)*(x30)))+(((0.331000000000000)*(x13)*(x7))));
    eerot[6]=((((x12)*(x33)))+(((x15)*(((((x14)*(((x36)+(((x10)*(x5)))))))+(((x13)*(x35))))))));
    eerot[7]=((((x15)*(((((x14)*(((((-1.00000000000000)*(x24)))+(x25)))))+(((x13)*(x23)))))))+(((x0)*(x12)*(x6))));
    eerot[8]=((((-1.00000000000000)*(x15)*(((((x13)*(((((-1.00000000000000)*(x27)))+(x38)))))+(((x14)*(((x39)+(((x37)*(x5)))))))))))+(((-1.00000000000000)*(x12)*(x42))));
    eetrans[2]=((0.467050000000000)+(((x15)*(((((-1.00000000000000)*(x44)))+(x43)))))+(((-0.100150000000000)*(x12))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j2, cj2, sj2,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
new_px, new_py, new_pz, px, py, pz;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    r00 = eerot[0*3+0];
    r01 = eerot[0*3+1];
    r02 = eerot[0*3+2];
    r10 = eerot[1*3+0];
    r11 = eerot[1*3+1];
    r12 = eerot[1*3+2];
    r20 = eerot[2*3+0];
    r21 = eerot[2*3+1];
    r22 = eerot[2*3+2];
    px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
    
    new_r00=r00;
    new_r01=((-1.00000000000000)*(r02));
    new_r02=r01;
    new_px=((-0.0454200000000000)+(px));
    new_r10=r10;
    new_r11=((-1.00000000000000)*(r12));
    new_r12=r11;
    new_py=((-0.302410000000000)+(py));
    new_r20=r20;
    new_r21=((-1.00000000000000)*(r22));
    new_r22=r21;
    new_pz=((-0.467050000000000)+(pz));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        {
        IKReal j2array[2], cj2array[2], sj2array[2];
        bool j2valid[2]={false};
        cj2array[0]=((-1.05783455484689)+(((3.72981239043676)*((px)*(px))))+(((3.72981239043676)*((pz)*(pz))))+(((3.72981239043676)*((py)*(py)))));
        if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 )
        {
            j2valid[0] = j2valid[1] = true;
            j2array[0] = IKacos(cj2array[0]);
            sj2array[0] = IKsin(j2array[0]);
            cj2array[1] = cj2array[0];
            j2array[1] = -j2array[0];
            sj2array[1] = -sj2array[0];
        }
        else if( isnan(cj2array[0]) )
        {
            // probably any value will work
            j2valid[0] = true;
            cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
        }
        if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
            j2valid[1]=false;
        for(int ij2 = 0; ij2 < 2; ++ij2)
        {
        if( !j2valid[ij2] ) { continue; }
        j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
        
        {
            IKReal j0eval[1];
            if( ((((px)*(px))+((pz)*(pz)))) < (IKReal)-0.00001 )
                continue;
            j0eval[0]=IKabs(IKsqrt((((px)*(px))+((pz)*(pz)))));
            if( IKabs(j0eval[0]) < 0.000001  )
            {
                {
                    if( 1 )
                    {
                    {
                        IKReal j1eval[1];
                        if( ((((((0.405000000000000)+(((0.331000000000000)*(cj2)))))*(((0.405000000000000)+(((0.331000000000000)*(cj2))))))+(((0.109561000000000)*((sj2)*(sj2)))))) < (IKReal)-0.00001 )
                            continue;
                        j1eval[0]=IKabs(IKsqrt((((((0.405000000000000)+(((0.331000000000000)*(cj2)))))*(((0.405000000000000)+(((0.331000000000000)*(cj2))))))+(((0.109561000000000)*((sj2)*(sj2)))))));
                        if( IKabs(j1eval[0]) < 0.000001  )
                        {
                            {
                                if( 1 )
                                {
                                continue;
                            
                            } else
                            {
                            }
                            }
                        
                        } else
                        {
                            {
                            IKReal j1array[2], cj1array[2], sj1array[2];
                            bool j1valid[2]={false};
                            IKReal x0=((0.331000000000000)*(cj2));
                            IKReal x1=((0.405000000000000)+(x0));
                            IKReal x2=((0.331000000000000)*(sj2));
                            IKReal x3=IKatan2(x2, x1);
                            IKReal x4=(x1)*(x1);
                            IKReal x5=(sj2)*(sj2);
                            IKReal x6=((0.109561000000000)*(x5));
                            IKReal x7=((x6)+(x4));
                            if( (x7) < (IKReal)-0.00001 )
                                continue;
                            IKReal x8=IKsqrt(x7);
                            IKReal x9=IKabs(x8);
                            IKReal x10=((IKabs(x9) != 0)?((IKReal)1/(x9)):(IKReal)1.0e30);
                            IKReal x11=((py)*(x10));
                            if( (x11) < -1.0001 || (x11) > 1.0001 )
                                continue;
                            IKReal x12=IKasin(x11);
                            j1array[0]=((x12)+(((-1.00000000000000)*(x3))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            j1array[1]=((3.14159265358979)+(((-1.00000000000000)*(x12)))+(((-1.00000000000000)*(x3))));
                            sj1array[1]=IKsin(j1array[1]);
                            cj1array[1]=IKcos(j1array[1]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            if( j1array[1] > IKPI )
                                j1array[1]-=IK2PI;
                            else if( j1array[1] < -IKPI )
                                j1array[1]+=IK2PI;
                            j1valid[1] = true;
                            if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                                j1valid[1]=false;
                            for(int ij1 = 0; ij1 < 2; ++ij1)
                            {
                            if( !j1valid[ij1] ) { continue; }
                            j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                            
                            {
                                IKReal j0eval[1];
                                j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                if( IKabs(j0eval[0]) < 0.000001  )
                                {
                                    {
                                        if( 1 )
                                        {
                                        {
                                            IKReal j0eval[1];
                                            j0eval[0]=((((cj1)*((pz)*(pz))))+(((cj1)*((px)*(px)))));
                                            if( IKabs(j0eval[0]) < 0.000001  )
                                            {
                                                {
                                                IKReal evalcond[5];
                                                    IKReal x13=x0;
                                                    IKReal x14=((0.405000000000000)+(x13));
                                                    IKReal x15=((x14)+(((-1.00000000000000)*(py))));
                                                    IKReal x16=(px)*(px);
                                                    IKReal x17=(py)*(py);
                                                    IKReal x18=(pz)*(pz);
                                                    IKReal x19=((x17)+(x16)+(x18));
                                                    evalcond[0]=((((-1.00000000000000)*(3.14159265358979)))+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979)))));
                                                    evalcond[1]=((0.283616022500000)+(((0.268110000000000)*(cj2)))+(((-1.00000000000000)*(x19))));
                                                    evalcond[2]=x15;
                                                    evalcond[3]=x15;
                                                    evalcond[4]=((-0.0444339775000001)+(((-1.00000000000000)*(x19)))+(((0.810000000000000)*(py))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=((0.0100300225000000)+(((0.109561000000000)*((sj2)*(sj2)))));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((-0.331000000000000)*(pz)*(sj2)))+(((0.100150000000000)*(px))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x20=((0.100150000000000)*(px));
                                                                        IKReal x21=((0.331000000000000)*(pz)*(sj2));
                                                                        IKReal x22=((((-1.00000000000000)*(x21)))+(x20));
                                                                        IKReal x23=((IKabs(x22) != 0)?((IKReal)1/(x22)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x23)*(((((0.0331496500000000)*(sj2)))+(((-1.00000000000000)*(px)*(pz)))))), ((x23)*(((((-1.00000000000000)*((px)*(px))))+(((0.109561000000000)*((sj2)*(sj2))))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x51=x5;
                                                            IKReal x52=((0.109561000000000)*(x51));
                                                            IKReal x53=((0.0100300225000000)+(x52));
                                                            IKReal x54=((IKabs(x53) != 0)?((IKReal)1/(x53)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((-1.00000000000000)*(x54)*(((((0.100150000000000)*(pz)))+(((-0.331000000000000)*(px)*(sj2)))))), ((-1.00000000000000)*(x54)*(((((0.100150000000000)*(px)))+(((0.331000000000000)*(pz)*(sj2)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                    IKReal x55=x0;
                                                    IKReal x56=(px)*(px);
                                                    IKReal x57=(py)*(py);
                                                    IKReal x58=(pz)*(pz);
                                                    evalcond[0]=((IKfmod(((1.57079632679490)+(3.14159265358979)+(j1)), ((2.00000000000000)*(3.14159265358979))))+(((-1.00000000000000)*(3.14159265358979))));
                                                    evalcond[1]=((0.283616022500000)+(((0.268110000000000)*(cj2)))+(((-1.00000000000000)*(x58)))+(((-1.00000000000000)*(x56)))+(((-1.00000000000000)*(x57))));
                                                    evalcond[2]=((-0.405000000000000)+(((-1.00000000000000)*(x55)))+(((-1.00000000000000)*(py))));
                                                    evalcond[3]=((0.405000000000000)+(py)+(x55));
                                                    evalcond[4]=((-0.0444339775000001)+(((-0.810000000000000)*(py)))+(((-1.00000000000000)*(x58)))+(((-1.00000000000000)*(x56)))+(((-1.00000000000000)*(x57))));
                                                    if( IKabs(evalcond[0]) < 0.000010  && IKabs(evalcond[1]) < 0.000010  && IKabs(evalcond[2]) < 0.000010  && IKabs(evalcond[3]) < 0.000010  && IKabs(evalcond[4]) < 0.000010  )
                                                    {
                                                    {
                                                        IKReal j0eval[1];
                                                        j0eval[0]=(((px)*(px))+((pz)*(pz)));
                                                        if( IKabs(j0eval[0]) < 0.000001  )
                                                        {
                                                            {
                                                                if( 1 )
                                                                {
                                                                {
                                                                    IKReal j0eval[1];
                                                                    j0eval[0]=((((-0.331000000000000)*(pz)*(sj2)))+(((-0.100150000000000)*(px))));
                                                                    if( IKabs(j0eval[0]) < 0.000001  )
                                                                    {
                                                                        {
                                                                            if( 1 )
                                                                            {
                                                                            continue;
                                                                        
                                                                        } else
                                                                        {
                                                                        }
                                                                        }
                                                                    
                                                                    } else
                                                                    {
                                                                        {
                                                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                                                        bool j0valid[1]={false};
                                                                        IKReal x59=((0.100150000000000)*(px));
                                                                        IKReal x60=((0.331000000000000)*(pz)*(sj2));
                                                                        IKReal x61=((x59)+(x60));
                                                                        IKReal x62=((-1.00000000000000)*(x61));
                                                                        IKReal x63=((IKabs(x62) != 0)?((IKReal)1/(x62)):(IKReal)1.0e30);
                                                                        j0array[0]=IKatan2(((x63)*(((((0.0331496500000000)*(sj2)))+(((px)*(pz)))))), ((x63)*(((((-0.109561000000000)*((sj2)*(sj2))))+((px)*(px))))));
                                                                        sj0array[0]=IKsin(j0array[0]);
                                                                        cj0array[0]=IKcos(j0array[0]);
                                                                        if( j0array[0] > IKPI )
                                                                            j0array[0]-=IK2PI;
                                                                        else if( j0array[0] < -IKPI )
                                                                            j0array[0]+=IK2PI;
                                                                        j0valid[0] = true;
                                                                        for(int ij0 = 0; ij0 < 1; ++ij0)
                                                                        {
                                                                        if( !j0valid[ij0] ) { continue; }
                                                                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                                        
                                                                        rotationfunction0(vsolutions);
                                                                        }
                                                                        }
                                                                    
                                                                    }
                                                                
                                                                }
                                                            
                                                            } else
                                                            {
                                                            }
                                                            }
                                                        
                                                        } else
                                                        {
                                                            {
                                                            IKReal j0array[1], cj0array[1], sj0array[1];
                                                            bool j0valid[1]={false};
                                                            IKReal x64=x56;
                                                            IKReal x65=x58;
                                                            IKReal x66=((x64)+(x65));
                                                            IKReal x67=((IKabs(x66) != 0)?((IKReal)1/(x66)):(IKReal)1.0e30);
                                                            j0array[0]=IKatan2(((x67)*(((((-0.331000000000000)*(px)*(sj2)))+(((-0.100150000000000)*(pz)))))), ((x67)*(((((-0.100150000000000)*(px)))+(((0.331000000000000)*(pz)*(sj2)))))));
                                                            sj0array[0]=IKsin(j0array[0]);
                                                            cj0array[0]=IKcos(j0array[0]);
                                                            if( j0array[0] > IKPI )
                                                                j0array[0]-=IK2PI;
                                                            else if( j0array[0] < -IKPI )
                                                                j0array[0]+=IK2PI;
                                                            j0valid[0] = true;
                                                            for(int ij0 = 0; ij0 < 1; ++ij0)
                                                            {
                                                            if( !j0valid[ij0] ) { continue; }
                                                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                            
                                                            rotationfunction0(vsolutions);
                                                            }
                                                            }
                                                        
                                                        }
                                                    
                                                    }
                                                
                                                } else
                                                {
                                                    if( 1 )
                                                    {
                                                    continue;
                                                
                                                } else
                                                {
                                                }
                                                }
                                                }
                                                }
                                            
                                            } else
                                            {
                                                {
                                                IKReal j0array[1], cj0array[1], sj0array[1];
                                                bool j0valid[1]={false};
                                                IKReal x68=(pz)*(pz);
                                                IKReal x69=((cj1)*(x68));
                                                IKReal x70=(px)*(px);
                                                IKReal x71=((cj1)*(x70));
                                                IKReal x72=((x71)+(x69));
                                                IKReal x73=((IKabs(x72) != 0)?((IKReal)1/(x72)):(IKReal)1.0e30);
                                                IKReal x74=x0;
                                                IKReal x75=((0.405000000000000)+(x74));
                                                IKReal x76=((py)*(sj1));
                                                IKReal x77=((((-1.00000000000000)*(x76)))+(x75));
                                                j0array[0]=IKatan2(((x73)*(((((-1.00000000000000)*(px)*(x77)))+(((-0.100150000000000)*(cj1)*(pz)))))), ((x73)*(((((pz)*(x77)))+(((-0.100150000000000)*(cj1)*(px)))))));
                                                sj0array[0]=IKsin(j0array[0]);
                                                cj0array[0]=IKcos(j0array[0]);
                                                if( j0array[0] > IKPI )
                                                    j0array[0]-=IK2PI;
                                                else if( j0array[0] < -IKPI )
                                                    j0array[0]+=IK2PI;
                                                j0valid[0] = true;
                                                for(int ij0 = 0; ij0 < 1; ++ij0)
                                                {
                                                if( !j0valid[ij0] ) { continue; }
                                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                                
                                                rotationfunction0(vsolutions);
                                                }
                                                }
                                            
                                            }
                                        
                                        }
                                    
                                    } else
                                    {
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                    bool j0valid[1]={false};
                                    IKReal x78=(px)*(px);
                                    IKReal x79=(pz)*(pz);
                                    IKReal x80=((x79)+(x78));
                                    IKReal x81=((IKabs(x80) != 0)?((IKReal)1/(x80)):(IKReal)1.0e30);
                                    IKReal x82=((0.405000000000000)*(cj1));
                                    IKReal x83=((0.331000000000000)*(cj1)*(cj2));
                                    IKReal x84=((x82)+(x83));
                                    IKReal x85=((0.331000000000000)*(sj1)*(sj2));
                                    IKReal x86=((x84)+(((-1.00000000000000)*(x85))));
                                    j0array[0]=IKatan2(((x81)*(((((-0.100150000000000)*(pz)))+(((-1.00000000000000)*(px)*(x86)))))), ((x81)*(((((pz)*(x86)))+(((-0.100150000000000)*(px)))))));
                                    sj0array[0]=IKsin(j0array[0]);
                                    cj0array[0]=IKcos(j0array[0]);
                                    if( j0array[0] > IKPI )
                                        j0array[0]-=IK2PI;
                                    else if( j0array[0] < -IKPI )
                                        j0array[0]+=IK2PI;
                                    j0valid[0] = true;
                                    for(int ij0 = 0; ij0 < 1; ++ij0)
                                    {
                                    if( !j0valid[ij0] ) { continue; }
                                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                            }
                            }
                        
                        }
                    
                    }
                
                } else
                {
                }
                }
            
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x87=(px)*(px);
                IKReal x88=(pz)*(pz);
                IKReal x89=((x88)+(x87));
                if( (x89) < (IKReal)-0.00001 )
                    continue;
                IKReal x90=IKsqrt(x89);
                IKReal x91=IKabs(x90);
                IKReal x92=((IKabs(x91) != 0)?((IKReal)1/(x91)):(IKReal)1.0e30);
                IKReal x93=((0.100150000000000)*(x92));
                if( (x93) < -1.0001 || (x93) > 1.0001 )
                    continue;
                IKReal x94=IKasin(x93);
                IKReal x95=((-1.00000000000000)*(px));
                IKReal x96=((-1.00000000000000)*(pz));
                IKReal x97=IKatan2(x95, x96);
                j0array[0]=((x94)+(((-1.00000000000000)*(x97))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x94))));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0)
                {
                if( !j0valid[ij0] ) { continue; }
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                    IKReal j1eval[1];
                    j1eval[0]=(((((0.405000000000000)+(((0.331000000000000)*(cj2)))))*(((0.405000000000000)+(((0.331000000000000)*(cj2))))))+(((0.109561000000000)*((sj2)*(sj2)))));
                    if( IKabs(j1eval[0]) < 0.000001  )
                    {
                        {
                            if( 1 )
                            {
                            {
                                IKReal j1eval[1];
                                j1eval[0]=((((0.331000000000000)*(py)*(sj2)))+(((((0.405000000000000)+(((0.331000000000000)*(cj2)))))*(((((-1.00000000000000)*(cj0)*(pz)))+(((px)*(sj0))))))));
                                if( IKabs(j1eval[0]) < 0.000001  )
                                {
                                    {
                                        if( 1 )
                                        {
                                        continue;
                                    
                                    } else
                                    {
                                    }
                                    }
                                
                                } else
                                {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x98=((px)*(sj0));
                                    IKReal x99=((cj0)*(pz));
                                    IKReal x100=((x98)+(((-1.00000000000000)*(x99))));
                                    IKReal x101=((0.331000000000000)*(cj2));
                                    IKReal x102=((0.405000000000000)+(x101));
                                    IKReal x103=((0.331000000000000)*(py)*(sj2));
                                    IKReal x104=((x100)*(x102));
                                    IKReal x105=((x104)+(x103));
                                    IKReal x106=((IKabs(x105) != 0)?((IKReal)1/(x105)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((x106)*(((((py)*(x100)))+(((0.331000000000000)*(sj2)*(x102)))))), ((x106)*((((py)*(py))+(((-1.00000000000000)*((x102)*(x102))))))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    for(int ij1 = 0; ij1 < 1; ++ij1)
                                    {
                                    if( !j1valid[ij1] ) { continue; }
                                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                                    
                                    rotationfunction0(vsolutions);
                                    }
                                    }
                                
                                }
                            
                            }
                        
                        } else
                        {
                        }
                        }
                    
                    } else
                    {
                        {
                        IKReal j1array[1], cj1array[1], sj1array[1];
                        bool j1valid[1]={false};
                        IKReal x107=((0.331000000000000)*(cj2));
                        IKReal x108=((0.405000000000000)+(x107));
                        IKReal x109=(x108)*(x108);
                        IKReal x110=(sj2)*(sj2);
                        IKReal x111=((0.109561000000000)*(x110));
                        IKReal x112=((x111)+(x109));
                        IKReal x113=((IKabs(x112) != 0)?((IKReal)1/(x112)):(IKReal)1.0e30);
                        IKReal x114=((px)*(sj0));
                        IKReal x115=((cj0)*(pz));
                        IKReal x116=((((-1.00000000000000)*(x115)))+(x114));
                        j1array[0]=IKatan2(((x113)*(((((py)*(x108)))+(((0.331000000000000)*(sj2)*(x116)))))), ((x113)*(((((0.331000000000000)*(py)*(sj2)))+(((-1.00000000000000)*(x116)*(((0.405000000000000)+(((0.331000000000000)*(cj2)))))))))));
                        sj1array[0]=IKsin(j1array[0]);
                        cj1array[0]=IKcos(j1array[0]);
                        if( j1array[0] > IKPI )
                            j1array[0]-=IK2PI;
                        else if( j1array[0] < -IKPI )
                            j1array[0]+=IK2PI;
                        j1valid[0] = true;
                        for(int ij1 = 0; ij1 < 1; ++ij1)
                        {
                        if( !j1valid[ij1] ) { continue; }
                        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                        
                        rotationfunction0(vsolutions);
                        }
                        }
                    
                    }
                
                }
                }
                }
            
            }
        
        }
        }
        }
    
    } else
    {
    }
    }
}
return vsolutions.size()>0;
}
    void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        IKReal x24=((cj2)*(sj1));
        IKReal x25=((cj1)*(sj2));
        IKReal x26=((x24)+(x25));
        IKReal x27=((sj0)*(sj1)*(sj2));
        IKReal x28=((cj1)*(cj2)*(sj0));
        IKReal x29=((((-1.00000000000000)*(x28)))+(x27));
        IKReal x30=((cj0)*(cj1)*(cj2));
        IKReal x31=((cj0)*(sj1)*(sj2));
        IKReal x32=((((-1.00000000000000)*(x31)))+(x30));
        IKReal x33=((cj0)*(x24));
        IKReal x34=((cj0)*(x25));
        IKReal x35=((x33)+(x34));
        IKReal x36=((-1.00000000000000)*(x35));
        IKReal x37=((cj1)*(cj2));
        IKReal x38=((sj1)*(sj2));
        IKReal x39=((((-1.00000000000000)*(x38)))+(x37));
        IKReal x40=((sj0)*(x25));
        IKReal x41=((sj0)*(x24));
        IKReal x42=((x40)+(x41));
        new_r00=((((r20)*(x32)))+(((r10)*(x26)))+(((r00)*(x29))));
        new_r01=((((r01)*(x29)))+(((r11)*(x26)))+(((r21)*(x32))));
        new_r02=((((r02)*(x29)))+(((r22)*(x32)))+(((r12)*(x26))));
        new_r10=((((r20)*(sj0)))+(((cj0)*(r00))));
        new_r11=((((r21)*(sj0)))+(((cj0)*(r01))));
        new_r12=((((r22)*(sj0)))+(((cj0)*(r02))));
        new_r20=((((r20)*(x36)))+(((r00)*(x42)))+(((r10)*(x39))));
        new_r21=((((r01)*(x42)))+(((r11)*(x39)))+(((r21)*(x36))));
        new_r22=((((r22)*(x36)))+(((r02)*(x42)))+(((r12)*(x39))));
        {
        IKReal j4eval;
        j4eval=new_r02;
        if( j4eval >= -1.000010 && j4eval <= -0.999990 )
        {
            {
            j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=1.00000000000000;
            j5=((-1.00000000000000)*(IKatan2(new_r20, new_r21)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
        
        } else
        if( j4eval >= 0.999990 && j4eval <= 1.000010 )
        {
            {
            j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=-1.00000000000000;
            j5=((((-1.00000000000000)*(IKatan2(new_r11, ((-1.00000000000000)*(new_r10))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
        
        } else
        {
            {
            IKReal j3array[2], cj3array[2], sj3array[2];
            bool j3valid[2]={false};
            j3array[0]=IKatan2(((-1.00000000000000)*(new_r22)), new_r12);
            sj3array[0]=IKsin(j3array[0]);
            cj3array[0]=IKcos(j3array[0]);
            j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
            sj3array[1] = -sj3array[0];
            cj3array[1] = -cj3array[0];
            if( j3array[0] > IKPI )
                j3array[0]-=IK2PI;
            else if( j3array[0] < -IKPI )
                j3array[0]+=IK2PI;
            j3valid[0] = true;
            if( j3array[1] > IKPI )
                j3array[1]-=IK2PI;
            else if( j3array[1] < -IKPI )
                j3array[1]+=IK2PI;
            j3valid[1] = true;
            if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                j3valid[1]=false;
            for(int ij3 = 0; ij3 < 2; ++ij3)
            {
            if( !j3valid[ij3] ) { continue; }
            j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
            
            {
            IKReal evalcond[1];
                evalcond[0]=IKcos(j3);
                if( IKabs(evalcond[0]) < 0.000010  )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                IKReal x43=IKsin(j3);
                IKReal x44=((IKabs(x43) != 0)?((IKReal)1/(x43)):(IKReal)1.0e30);
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r10)*(x44)), ((new_r11)*(x44)));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((-1.00000000000000)*(new_r22)*(((IKabs(IKsin(j3)) != 0)?((IKReal)1/(IKsin(j3))):(IKReal)1.0e30))), new_r02);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(6);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.vfree.resize(0);
                }
                }
                }
                }
            
            } else
            {
                if( 1 )
                {
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((new_r12)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))), new_r02);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                {
                IKReal evalcond[1];
                    evalcond[0]=IKsin(j4);
                    if( IKabs(evalcond[0]) < 0.000010  )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x45=IKcos(j4);
                    IKReal x46=((IKabs(x45) != 0)?((IKReal)1/(x45)):(IKReal)1.0e30);
                    IKReal x47=IKsin(j3);
                    IKReal x48=IKcos(j3);
                    j5array[0]=IKatan2(((((new_r11)*(x46)*(x48)))+(((-1.00000000000000)*(new_r21)*(x46)*(x47)))), ((((new_r21)*(x48)))+(((new_r11)*(x47)))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x49=IKsin(j4);
                    IKReal x50=((IKabs(x49) != 0)?((IKReal)1/(x49)):(IKReal)1.0e30);
                    j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(x50)), ((-1.00000000000000)*(new_r00)*(x50)));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                
                } else
                {
                }
                }
                }
                }
                }
            
            } else
            {
            }
            }
            }
            }
            }
        
        }
        }
    }};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
