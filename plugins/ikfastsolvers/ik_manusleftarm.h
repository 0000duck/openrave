/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2010-07-14 14:25:51.877794
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11;
    x0=IKcos(j[5]);
    x1=IKcos(j[0]);
    x2=IKcos(j[2]);
    x3=IKcos(j[4]);
    x4=IKsin(j[0]);
    x5=IKsin(j[3]);
    x6=IKcos(j[3]);
    x7=IKsin(j[1]);
    x8=IKsin(j[5]);
    x9=IKcos(j[1]);
    x10=IKsin(j[2]);
    x11=IKsin(j[4]);
    eerot[0]=((((-1.00000000000000)*(x2)*(x4)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x10)*(x4)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x2)*(x3)*(x4)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x10)*(x3)*(x4)*(x5)*(x9)))+(((-1.00000000000000)*(x1)*(x5)*(x8)))+(((x0)*(x11)*(x2)*(x4)*(x9)))+(((x0)*(x1)*(x3)*(x6)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x4)*(x7))));
    eerot[1]=((((x10)*(x3)*(x4)*(x7)))+(((x1)*(x11)*(x6)))+(((-1.00000000000000)*(x2)*(x3)*(x4)*(x9)))+(((-1.00000000000000)*(x10)*(x11)*(x4)*(x5)*(x9)))+(((-1.00000000000000)*(x11)*(x2)*(x4)*(x5)*(x7))));
    eerot[2]=((((x2)*(x3)*(x4)*(x5)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x2)*(x4)*(x6)*(x7)))+(((x10)*(x3)*(x4)*(x5)*(x8)*(x9)))+(((x10)*(x11)*(x4)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x10)*(x4)*(x6)*(x9)))+(((-1.00000000000000)*(x11)*(x2)*(x4)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x1)*(x5)))+(((-1.00000000000000)*(x1)*(x3)*(x6)*(x8))));
    eetrans[0]=((0.0454200000000000)+(((-0.404999999998836)*(x4)*(x9)))+(((0.330999999998312)*(x10)*(x4)*(x7)))+(((-0.100150000000212)*(x1)))+(((-0.330999999998312)*(x2)*(x4)*(x9))));
    eerot[3]=((((-1.00000000000000)*(x0)*(x2)*(x3)*(x5)*(x9)))+(((-1.00000000000000)*(x2)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x11)*(x2)*(x7)))+(((x0)*(x10)*(x3)*(x5)*(x7)))+(((x10)*(x6)*(x7)*(x8)))+(((-1.00000000000000)*(x0)*(x10)*(x11)*(x9))));
    eerot[4]=((((x2)*(x3)*(x7)))+(((x10)*(x3)*(x9)))+(((x10)*(x11)*(x5)*(x7)))+(((-1.00000000000000)*(x11)*(x2)*(x5)*(x9))));
    eerot[5]=((((-1.00000000000000)*(x10)*(x3)*(x5)*(x7)*(x8)))+(((x0)*(x10)*(x6)*(x7)))+(((x11)*(x2)*(x7)*(x8)))+(((x2)*(x3)*(x5)*(x8)*(x9)))+(((x10)*(x11)*(x8)*(x9)))+(((-1.00000000000000)*(x0)*(x2)*(x6)*(x9))));
    eetrans[1]=((0.302410000000728)+(((0.330999999998312)*(x2)*(x7)))+(((0.330999999998312)*(x10)*(x9)))+(((0.404999999998836)*(x7))));
    eerot[6]=((((x0)*(x3)*(x4)*(x6)))+(((x0)*(x1)*(x10)*(x11)*(x7)))+(((x1)*(x10)*(x6)*(x8)*(x9)))+(((-1.00000000000000)*(x4)*(x5)*(x8)))+(((x1)*(x2)*(x6)*(x7)*(x8)))+(((x0)*(x1)*(x10)*(x3)*(x5)*(x9)))+(((x0)*(x1)*(x2)*(x3)*(x5)*(x7)))+(((-1.00000000000000)*(x0)*(x1)*(x11)*(x2)*(x9))));
    eerot[7]=((((x11)*(x4)*(x6)))+(((x1)*(x10)*(x11)*(x5)*(x9)))+(((x1)*(x11)*(x2)*(x5)*(x7)))+(((-1.00000000000000)*(x1)*(x10)*(x3)*(x7)))+(((x1)*(x2)*(x3)*(x9))));
    eerot[8]=((((-1.00000000000000)*(x1)*(x10)*(x11)*(x7)*(x8)))+(((x0)*(x1)*(x10)*(x6)*(x9)))+(((-1.00000000000000)*(x0)*(x4)*(x5)))+(((-1.00000000000000)*(x1)*(x10)*(x3)*(x5)*(x8)*(x9)))+(((-1.00000000000000)*(x1)*(x2)*(x3)*(x5)*(x7)*(x8)))+(((-1.00000000000000)*(x3)*(x4)*(x6)*(x8)))+(((x1)*(x11)*(x2)*(x8)*(x9)))+(((x0)*(x1)*(x2)*(x6)*(x7))));
    eetrans[2]=((0.467050000000000)+(((0.330999999998312)*(x1)*(x2)*(x9)))+(((0.404999999998836)*(x1)*(x9)))+(((-0.330999999998312)*(x1)*(x10)*(x7)))+(((-0.100150000000212)*(x4))));
    }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j2, cj2, sj2,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    new_r00, r00 = eerot[0*3+0],
    new_r01, r01 = eerot[0*3+1],
    new_r02, r02 = eerot[0*3+2],
    new_r10, r10 = eerot[1*3+0],
    new_r11, r11 = eerot[1*3+1],
    new_r12, r12 = eerot[1*3+2],
    new_r20, r20 = eerot[2*3+0],
    new_r21, r21 = eerot[2*3+1],
    new_r22, r22 = eerot[2*3+2],
    new_px, new_py, new_pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    new_r00=r00;
    new_r01=((-1.00000000000000)*(r02));
    new_r02=r01;
    new_px=((-0.0454200000000000)+(px));
    new_r10=r10;
    new_r11=((-1.00000000000000)*(r12));
    new_r12=r11;
    new_py=((0.147590000000000)+(py));
    new_r20=r20;
    new_r21=((-1.00000000000000)*(r22));
    new_r22=r21;
    new_pz=((-0.467050000000000)+(pz));
    r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
    {
        if( 1 )
        {
        {
        IKReal j2array[2], cj2array[2], sj2array[2];
        bool j2valid[2]={false};
        cj2array[0]=((-0.302547545772541)+(((3.72981239046203)*((px)*(px))))+(((-3.35683115141001)*(py)))+(((3.72981239046203)*((py)*(py))))+(((3.72981239046203)*((pz)*(pz)))));
        if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 )
        {
            j2valid[0] = j2valid[1] = true;
            j2array[0] = IKacos(cj2array[0]);
            sj2array[0] = IKsin(j2array[0]);
            cj2array[1] = cj2array[0];
            j2array[1] = -j2array[0];
            sj2array[1] = -sj2array[0];
        }
        else if( isnan(cj2array[0]) )
        {
            // probably any value will work
            j2valid[0] = true;
            cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
        }
        if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
            j2valid[1]=false;
        for(int ij2 = 0; ij2 < 2; ++ij2)
        {
        if( !j2valid[ij2] ) { continue; }
        j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
        
        {
        IKReal evalcond[3]; int numsolutionsj0 = 0;
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
            {
            evalcond[0]=(((px)*(px))+((pz)*(pz)));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x0=((-1.00000000000000)*(px));
                IKReal x1=((-1.00000000000000)*(pz));
                IKReal x2=IKatan2(x0, x1);
                IKReal x3=(px)*(px);
                IKReal x4=(pz)*(pz);
                IKReal x5=((x3)+(x4));
                IKReal x6=((IKabs(x5) != 0)?(pow(x5,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x7=((0.100150000000212)*(x6));
                if( (x7) < -1.0001 || (x7) > 1.0001 )
                    continue;
                IKReal x8=IKasin(x7);
                j0array[0]=((x8)+(((-1.00000000000000)*(x2))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x2)))+(((-1.00000000000000)*(x8))));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                numsolutionsj0 = 2;
                
            } else
            {
            IKReal x9=((-0.100150000000212)+(((-1.00000000000000)*(px))));
            evalcond[0]=x9;
            evalcond[1]=((0.0811160224966443)+(((0.900000000001455)*(py)))+(((0.268109999997250)*(cj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=x9;
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=0;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            IKReal x10=((-0.100150000000212)+(((-1.00000000000000)*(pz))));
            evalcond[0]=x10;
            evalcond[1]=((0.0811160224966443)+(((0.900000000001455)*(py)))+(((0.268109999997250)*(cj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=x10;
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=((0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((-0.100150000000212)+(px));
            evalcond[1]=((0.0811160224966443)+(((0.900000000001455)*(py)))+(((0.268109999997250)*(cj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=((0.100150000000212)+(((-1.00000000000000)*(px))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=3.14159265358979;
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
            evalcond[0]=((-0.100150000000212)+(pz));
            evalcond[1]=((0.0811160224966443)+(((0.900000000001455)*(py)))+(((0.268109999997250)*(cj2)))+(((-1.00000000000000)*((py)*(py))))+(((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((pz)*(pz)))));
            evalcond[2]=((0.100150000000212)+(((-1.00000000000000)*(pz))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  )
            {
                j0array[0]=((-0.500000000000000)*(3.14159265358979));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                numsolutionsj0 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            if( numsolutionsj0 == 0 ) { continue; }
            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < numsolutionsj0; ++ij0)
        {
        if( !j0valid[ij0] ) { continue; }
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal evalcond[12]; int numsolutionsj1 = 0;
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
            {
            evalcond[0]=(((((0.404999999998836)+(((0.330999999998312)*(cj2)))))*(((0.404999999998836)+(((0.330999999998312)*(cj2))))))+(((0.109560999999303)*((sj2)*(sj2)))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x11=((0.330999999998312)*(cj2));
                IKReal x12=((0.404999999998836)+(x11));
                IKReal x13=(x12)*(x12);
                IKReal x14=(sj2)*(sj2);
                IKReal x15=((0.109560999999303)*(x14));
                IKReal x16=((x13)+(x15));
                IKReal x17=((IKabs(x16) != 0)?((IKReal)1/(x16)):(IKReal)1.0e30);
                IKReal x18=((0.450000000000728)+(((-1.00000000000000)*(py))));
                IKReal x19=((px)*(sj0));
                IKReal x20=((cj0)*(pz));
                IKReal x21=((((-1.00000000000000)*(x20)))+(x19));
                j1array[0]=IKatan2(((x17)*(((((-1.00000000000000)*(x12)*(x18)))+(((0.330999999998312)*(sj2)*(x21)))))), ((x17)*(((((-1.00000000000000)*(x21)*(((0.404999999998836)+(x11)))))+(((-0.330999999998312)*(sj2)*(x18)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((-0.330999999998312)*(sj2)*(((((cj0)*(pz)))+(((-1.00000000000000)*(px)*(sj0)))))))+(((((0.404999999998836)+(((0.330999999998312)*(cj2)))))*(((0.450000000000728)+(((-1.00000000000000)*(py))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x22=((0.450000000000728)+(((-1.00000000000000)*(py))));
                IKReal x23=((cj0)*(pz));
                IKReal x24=((px)*(sj0));
                IKReal x25=((x23)+(((-1.00000000000000)*(x24))));
                IKReal x26=((0.330999999998312)*(cj2));
                IKReal x27=((0.404999999998836)+(x26));
                IKReal x28=((x22)*(x27));
                IKReal x29=((0.330999999998312)*(sj2)*(x25));
                IKReal x30=((x28)+(((-1.00000000000000)*(x29))));
                IKReal x31=((IKabs(x30) != 0)?((IKReal)1/(x30)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x31)*(((((-1.00000000000000)*((x22)*(x22))))+(((0.109560999999303)*((sj2)*(sj2))))))), ((x31)*(((((-0.330999999998312)*(sj2)*(x27)))+(((x22)*(x25)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((-0.330999999998312)*(sj2)*(((0.450000000000728)+(((-1.00000000000000)*(py)))))))+(((((0.404999999998836)+(((0.330999999998312)*(cj2)))))*(((((-1.00000000000000)*(cj0)*(pz)))+(((px)*(sj0))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x32=((0.330999999998312)*(cj2));
                IKReal x33=((0.404999999998836)+(x32));
                IKReal x34=((cj0)*(pz));
                IKReal x35=((0.450000000000728)+(((-1.00000000000000)*(py))));
                IKReal x36=((px)*(sj0));
                IKReal x37=((((-1.00000000000000)*(x34)))+(x36));
                IKReal x38=((x33)*(x37));
                IKReal x39=((0.330999999998312)*(sj2)*(x35));
                IKReal x40=((((-1.00000000000000)*(x39)))+(x38));
                IKReal x41=((IKabs(x40) != 0)?((IKReal)1/(x40)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x41)*(((((x35)*(((x34)+(((-1.00000000000000)*(x36)))))))+(((0.330999999998312)*(sj2)*(x33)))))), ((x41)*(((((-1.00000000000000)*((x33)*(x33))))+((x35)*(x35))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            evalcond[0]=((((-0.109560999998394)*(sj0)*((sj2)*(sj2))))+(((-1.00000000000000)*(((0.404999999998836)+(((0.330999999998312)*(cj2)))))*(((((0.404999999998836)*(sj0)))+(((0.330999999998312)*(cj2)*(sj0))))))));
            if( IKabs(evalcond[0]) > 0.000010  )
            {
                IKReal x42=((0.404999999998836)*(sj0));
                IKReal x43=((0.817283950615092)*(cj2)*(x42));
                IKReal x44=((x42)+(x43));
                IKReal x45=((-1.00000000000000)*(x44));
                IKReal x46=((0.100150000000212)*(cj0));
                IKReal x47=((x46)+(px));
                IKReal x48=((-1.00000000000000)*(x47));
                IKReal x49=((0.330999999998312)*(cj2));
                IKReal x50=((0.404999999998836)+(x49));
                IKReal x51=((x45)*(x50));
                IKReal x52=(sj2)*(sj2);
                IKReal x53=((0.270520987651253)*(x42)*(x52));
                IKReal x54=((x51)+(((-1.00000000000000)*(x53))));
                IKReal x55=((IKabs(x54) != 0)?((IKReal)1/(x54)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((x55)*(((((-1.00000000000000)*(x45)*(((0.450000000000728)+(((-1.00000000000000)*(py)))))))+(((0.330999999998312)*(sj2)*(x48)))))), ((x55)*(((((0.817283950615092)*(sj2)*(x42)*(((0.450000000000728)+(((-1.00000000000000)*(py)))))))+(((-1.00000000000000)*(x48)*(x50)))))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x56=((0.330999999998312)*(sj2));
            IKReal x57=((0.450000000000728)+(x56));
            IKReal x58=((x57)+(((-1.00000000000000)*(py))));
            IKReal x59=((0.330999999998312)*(cj2));
            IKReal x60=((px)*(sj0));
            IKReal x61=((0.404999999998836)+(x59)+(x60));
            IKReal x62=((cj0)*(pz));
            IKReal x63=((((-1.00000000000000)*(x62)))+(x61));
            IKReal x64=((0.809999999997672)*(x59));
            IKReal x65=(px)*(px);
            IKReal x66=(pz)*(pz);
            IKReal x67=(py)*(py);
            IKReal x68=((x65)+(x66)+(x67));
            IKReal x69=((0.900000000001455)*(py));
            evalcond[0]=((-0.100150000000212)+(((-1.00000000000000)*(pz)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
            evalcond[1]=((0.0811160224966443)+(x64)+(x69)+(((-1.00000000000000)*(x68))));
            evalcond[2]=x58;
            evalcond[3]=x63;
            evalcond[4]=x58;
            evalcond[5]=x63;
            evalcond[6]=((((-1.00000000000000)*(px)))+(((-0.100150000000212)*(cj0)))+(((-1.23456790123601)*(sj0)*(x64)))+(((-0.404999999998836)*(sj0))));
            evalcond[7]=((((-1.00000000000000)*(pz)))+(((1.23456790123601)*(cj0)*(x64)))+(((-0.100150000000212)*(sj0)))+(((0.404999999998836)*(cj0))));
            evalcond[8]=((0.486116022497299)+(x64)+(((0.899999999994179)*(x56)))+(((-1.00000000000000)*(x68))));
            evalcond[9]=((-0.246933977497974)+(((-0.809999999997672)*(x60)))+(x69)+(((0.809999999997672)*(x62)))+(((-1.00000000000000)*(x68))));
            evalcond[10]=((((3.02114803626318)*(x56)*(x62)))+(((-1.22356495467830)*(x56)))+(((1.67841557570500)*(x64)))+(((-4.14423598936992)*(x64)*(x69)))+(((-3.02114803626318)*(x56)*(x60))));
            evalcond[11]=((0.330999999998312)+(((-3.72981239046203)*(x62)*(x64)))+(((1.35951661631407)*(x56)))+(((3.72981239046203)*(x60)*(x64)))+(((1.51057401811704)*(x64)))+(((-3.35683115141001)*(x56)*(x69))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  )
            {
                j1array[0]=0;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x70=((0.330999999998312)*(sj2));
            IKReal x71=((cj0)*(pz));
            IKReal x72=((x71)+(x70));
            IKReal x73=((px)*(sj0));
            IKReal x74=((0.330999999998312)*(cj2));
            IKReal x75=((0.854999999995925)+(x74));
            IKReal x76=((((-1.00000000000000)*(py)))+(x75));
            IKReal x77=(px)*(px);
            IKReal x78=(pz)*(pz);
            IKReal x79=(py)*(py);
            IKReal x80=((x77)+(x79)+(x78));
            evalcond[0]=((-0.100150000000212)+(((-1.00000000000000)*(pz)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
            evalcond[1]=((0.0811160224966443)+(((0.809999999997672)*(x74)))+(((0.900000000001455)*(py)))+(((-1.00000000000000)*(x80))));
            evalcond[2]=x76;
            evalcond[3]=((x73)+(((-1.00000000000000)*(x72))));
            evalcond[4]=((x72)+(((-1.00000000000000)*(x73))));
            evalcond[5]=x76;
            evalcond[6]=((((-1.00000000000000)*(px)))+(((-0.100150000000212)*(cj0)))+(((sj0)*(x70))));
            evalcond[7]=((((-1.00000000000000)*(pz)))+(((-0.100150000000212)*(sj0)))+(((-1.00000000000000)*(cj0)*(x70))));
            evalcond[8]=((0.850616022493341)+(((1.70999999999185)*(x74)))+(((-1.00000000000000)*(x80))));
            evalcond[9]=((-0.611433977494016)+(((1.70999999999185)*(py)))+(((-1.00000000000000)*(x80))));
            evalcond[10]=((((3.02114803626318)*(x71)*(x74)))+(((3.02114803626318)*(py)*(x70)))+(((-2.58308157100691)*(x70)))+(((-3.02114803626318)*(x73)*(x74))));
            evalcond[11]=((0.330999999998312)+(((-3.02114803626318)*(py)*(x74)))+(((-3.02114803626318)*(x70)*(x73)))+(((3.02114803626318)*(x70)*(x71)))+(((2.58308157100691)*(x74))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  )
            {
                j1array[0]=((0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x81=((0.330999999998312)*(sj2));
            IKReal x82=((cj0)*(pz));
            IKReal x83=((0.330999999998312)*(cj2));
            IKReal x84=((px)*(sj0));
            IKReal x85=((0.809999999997672)*(x83));
            IKReal x86=(px)*(px);
            IKReal x87=(pz)*(pz);
            IKReal x88=(py)*(py);
            IKReal x89=((0.900000000001455)*(py));
            evalcond[0]=((-0.100150000000212)+(((-1.00000000000000)*(pz)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
            evalcond[1]=((0.0811160224966443)+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x88)))+(x89)+(x85)+(((-1.00000000000000)*(x87))));
            evalcond[2]=((0.450000000000728)+(((-1.00000000000000)*(py)))+(((-1.00000000000000)*(x81))));
            evalcond[3]=((-0.404999999998836)+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(x83)))+(x84));
            evalcond[4]=((-0.450000000000728)+(py)+(x81));
            evalcond[5]=((0.404999999998836)+(((-1.00000000000000)*(x84)))+(x82)+(x83));
            evalcond[6]=((((-1.00000000000000)*(px)))+(((-0.100150000000212)*(cj0)))+(((0.404999999998836)*(sj0)))+(((1.23456790123601)*(sj0)*(x85))));
            evalcond[7]=((((-1.00000000000000)*(pz)))+(((-1.23456790123601)*(cj0)*(x85)))+(((-0.404999999998836)*(cj0)))+(((-0.100150000000212)*(sj0))));
            evalcond[8]=((0.486116022497299)+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x88)))+(((-0.899999999994179)*(x81)))+(x85)+(((-1.00000000000000)*(x87))));
            evalcond[9]=((-0.246933977497974)+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x88)))+(((0.809999999997672)*(x84)))+(x89)+(((-0.809999999997672)*(x82)))+(((-1.00000000000000)*(x87))));
            evalcond[10]=((((-1.22356495467830)*(x81)))+(((-3.02114803626318)*(x81)*(x82)))+(((-1.67841557570500)*(x85)))+(((4.14423598936992)*(x85)*(x89)))+(((3.02114803626318)*(x81)*(x84))));
            evalcond[11]=((0.330999999998312)+(((-3.72981239046203)*(x84)*(x85)))+(((-1.35951661631407)*(x81)))+(((3.35683115141001)*(x81)*(x89)))+(((1.51057401811704)*(x85)))+(((3.72981239046203)*(x82)*(x85))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  )
            {
                j1array[0]=3.14159265358979;
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
            IKReal x90=((0.330999999998312)*(sj2));
            IKReal x91=((px)*(sj0));
            IKReal x92=((x91)+(x90));
            IKReal x93=((cj0)*(pz));
            IKReal x94=((((-1.00000000000000)*(x93)))+(x92));
            IKReal x95=((0.330999999998312)*(cj2));
            IKReal x96=(px)*(px);
            IKReal x97=(pz)*(pz);
            IKReal x98=(py)*(py);
            IKReal x99=((x98)+(x97)+(x96));
            evalcond[0]=((-0.100150000000212)+(((-1.00000000000000)*(pz)*(sj0)))+(((-1.00000000000000)*(cj0)*(px))));
            evalcond[1]=((0.0811160224966443)+(((0.900000000001455)*(py)))+(((-1.00000000000000)*(x99)))+(((0.809999999997672)*(x95))));
            evalcond[2]=((0.0450000000018917)+(((-1.00000000000000)*(py)))+(((-1.00000000000000)*(x95))));
            evalcond[3]=x94;
            evalcond[4]=x94;
            evalcond[5]=((-0.0450000000018917)+(py)+(x95));
            evalcond[6]=((((-1.00000000000000)*(px)))+(((-1.00000000000000)*(sj0)*(x90)))+(((-0.100150000000212)*(cj0))));
            evalcond[7]=((((-1.00000000000000)*(pz)))+(((cj0)*(x90)))+(((-0.100150000000212)*(sj0))));
            evalcond[8]=((0.121616022497619)+(((-0.0900000000019645)*(x95)))+(((-1.00000000000000)*(x99))));
            evalcond[9]=((0.117566022501705)+(((-1.00000000000000)*(x99)))+(((0.0900000000037835)*(py))));
            evalcond[10]=((((-3.02114803626318)*(x93)*(x95)))+(((0.135951661637591)*(x90)))+(((-3.02114803626318)*(py)*(x90)))+(((3.02114803626318)*(x91)*(x95))));
            evalcond[11]=((0.330999999998312)+(((-0.135951661637591)*(x95)))+(((3.02114803626318)*(py)*(x95)))+(((-3.02114803626318)*(x90)*(x93)))+(((3.02114803626318)*(x90)*(x91))));
            if( IKabs(evalcond[0]) <= 0.000010  && IKabs(evalcond[1]) <= 0.000010  && IKabs(evalcond[2]) <= 0.000010  && IKabs(evalcond[3]) <= 0.000010  && IKabs(evalcond[4]) <= 0.000010  && IKabs(evalcond[5]) <= 0.000010  && IKabs(evalcond[6]) <= 0.000010  && IKabs(evalcond[7]) <= 0.000010  && IKabs(evalcond[8]) <= 0.000010  && IKabs(evalcond[9]) <= 0.000010  && IKabs(evalcond[10]) <= 0.000010  && IKabs(evalcond[11]) <= 0.000010  )
            {
                j1array[0]=((-0.500000000000000)*(3.14159265358979));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                numsolutionsj1 = 1;
                
            } else
            {
                continue;
            }
            }
            }
            }
            }
            }
            }
            }
            }
            if( numsolutionsj1 == 0 ) { continue; }
            for(int ij1 = 0; ij1 < numsolutionsj1; ++ij1)
        {
        if( !j1valid[ij1] ) { continue; }
        j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
        
        new_r00=((((-1.00000000000000)*(cj1)*(cj2)*(r00)*(sj0)))+(((cj1)*(r10)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r20)))+(((r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1)*(sj2)))+(((cj2)*(r10)*(sj1))));
        new_r01=((((cj1)*(r11)*(sj2)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)*(sj2)))+(((cj2)*(r11)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r01)*(sj0)))+(((r01)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj1)*(cj2)*(r21))));
        new_r02=((((cj1)*(r12)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj0)*(cj1)*(cj2)*(r22)))+(((r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r02)*(sj0))));
        new_r10=((((r20)*(sj0)))+(((cj0)*(r00))));
        new_r11=((((r21)*(sj0)))+(((cj0)*(r01))));
        new_r12=((((cj0)*(r02)))+(((r22)*(sj0))));
        new_r20=((((cj1)*(cj2)*(r10)))+(((-1.00000000000000)*(cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj2)))+(((cj2)*(r00)*(sj0)*(sj1))));
        new_r21=((((-1.00000000000000)*(r11)*(sj1)*(sj2)))+(((cj2)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj2)))+(((cj1)*(r01)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r11)))+(((-1.00000000000000)*(cj0)*(cj2)*(r21)*(sj1))));
        new_r22=((((cj1)*(r02)*(sj0)*(sj2)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj2)))+(((cj2)*(r02)*(sj0)*(sj1))));
        {
        IKReal j4eval;
        j4eval=new_r02;
        if( j4eval >= -1.000010 && j4eval <= -0.999990 )
        {
            {
            j4 = 3.141593; sj4 = 0.000000; cj4 = -1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=1.00000000000000;
            j5=((-1.00000000000000)*(IKatan2(new_r20, new_r21)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
            
        } else
        if( j4eval >= 0.999990 && j4eval <= 1.000010 )
        {
            {
            j4 = 0.000000; sj4 = 0.000000; cj4 = 1.000000;
            IKReal j3mul = 1;
            j3=0;
            IKReal j5mul=-1.00000000000000;
            j5=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(new_r11, ((-1.00000000000000)*(new_r21)))))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(6);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[3].fmul = j3mul;
            solution.basesol[3].freeind = 0;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[5].fmul = j5mul;
            solution.basesol[5].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 3;
            }
            
        } else
        {
            {
            IKReal j3array[2], cj3array[2], sj3array[2];
            bool j3valid[2]={false};
            j3array[0]=IKatan2(((-1.00000000000000)*(new_r22)), new_r12);
            sj3array[0]=IKsin(j3array[0]);
            cj3array[0]=IKcos(j3array[0]);
            j3array[1] = j3array[0] > 0 ? j3array[0]-IKPI : j3array[0]+IKPI;
            sj3array[1] = -sj3array[0];
            cj3array[1] = -cj3array[0];
            if( j3array[0] > IKPI )
                j3array[0]-=IK2PI;
            else if( j3array[0] < -IKPI )
                j3array[0]+=IK2PI;
            j3valid[0] = true;
            if( j3array[1] > IKPI )
                j3array[1]-=IK2PI;
            else if( j3array[1] < -IKPI )
                j3array[1]+=IK2PI;
            j3valid[1] = true;
            if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                j3valid[1]=false;
            for(int ij3 = 0; ij3 < 2; ++ij3)
            {
            if( !j3valid[ij3] ) { continue; }
            j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
            
            {
            IKReal evalcond;
                evalcond=IKcos(j3);
                if( IKabs(evalcond) < 0.00001 )
                {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                IKReal x100=IKsin(j3);
                IKReal x101=((IKabs(x100) != 0)?((IKReal)1/(x100)):(IKReal)1.0e30);
                j5array[0]=IKatan2(((-1.00000000000000)*(new_r10)*(x101)), ((new_r11)*(x101)));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                for(int ij5 = 0; ij5 < 1; ++ij5)
                {
                if( !j5valid[ij5] ) { continue; }
                j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((-1.00000000000000)*(new_r22)*(((IKabs(IKsin(j3)) != 0)?((IKReal)1/(IKsin(j3))):(IKReal)1.0e30))), new_r02);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(6);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.vfree.resize(0);
                }
                }
                }
                }
                
            } else
            {
                if( 1 )
                {
                {
                IKReal j4array[1], cj4array[1], sj4array[1];
                bool j4valid[1]={false};
                j4array[0]=IKatan2(((new_r12)*(((IKabs(cj3) != 0)?((IKReal)1/(cj3)):(IKReal)1.0e30))), new_r02);
                sj4array[0]=IKsin(j4array[0]);
                cj4array[0]=IKcos(j4array[0]);
                if( j4array[0] > IKPI )
                    j4array[0]-=IK2PI;
                else if( j4array[0] < -IKPI )
                    j4array[0]+=IK2PI;
                j4valid[0] = true;
                for(int ij4 = 0; ij4 < 1; ++ij4)
                {
                if( !j4valid[ij4] ) { continue; }
                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                
                {
                IKReal evalcond;
                    evalcond=IKsin(j4);
                    if( IKabs(evalcond) < 0.00001 )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x102=IKcos(j4);
                    IKReal x103=((IKabs(x102) != 0)?((IKReal)1/(x102)):(IKReal)1.0e30);
                    IKReal x104=IKcos(j3);
                    IKReal x105=IKsin(j3);
                    j5array[0]=IKatan2(((((-1.00000000000000)*(new_r21)*(x103)*(x105)))+(((new_r11)*(x103)*(x104)))), ((((new_r11)*(x105)))+(((new_r21)*(x104)))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                    if( 1 )
                    {
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    IKReal x106=IKsin(j4);
                    IKReal x107=((IKabs(x106) != 0)?((IKReal)1/(x106)):(IKReal)1.0e30);
                    j5array[0]=IKatan2(((-1.00000000000000)*(new_r01)*(x107)), ((-1.00000000000000)*(new_r00)*(x107)));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    for(int ij5 = 0; ij5 < 1; ++ij5)
                    {
                    if( !j5valid[ij5] ) { continue; }
                    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(6);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.vfree.resize(0);
                    }
                    }
                    
                } else
                {
                }
                }
                }
                }
                }
                
            } else
            {
            }
            }
            }
            }
            }
            
        }
        }
        }
        }
        }
        }
        }
        }
        
    } else
    {
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
