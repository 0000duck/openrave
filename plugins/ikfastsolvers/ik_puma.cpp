#define IKFAST_NAMESPACE ik_puma
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2012-10-08 02:44:15.289590
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((IkReal(0.0203000000000000))*(x3));
x13=((IkReal(1.00000000000000))*(x11));
x14=((IkReal(0.433100000000000))*(x0));
x15=((IkReal(0.175000000000000))*(x2));
x16=((IkReal(1.00000000000000))*(x10));
x17=((IkReal(1.00000000000000))*(x7));
x18=((IkReal(0.175000000000000))*(x0));
x19=((IkReal(0.175000000000000))*(x7));
x20=((IkReal(1.00000000000000))*(x3));
x21=((IkReal(0.175000000000000))*(x6));
x22=((IkReal(1.00000000000000))*(x2));
x23=((IkReal(1.00000000000000))*(x0));
x24=((x1)*(x7));
x25=((x3)*(x4));
x26=((x0)*(x1));
x27=((x10)*(x6));
x28=((x2)*(x4));
x29=((x1)*(x3));
x30=((x1)*(x2));
x31=((x1)*(x20));
x32=((x0)*(x22)*(x4));
x33=((x17)*(x28));
x34=((((IkReal(-1.00000000000000))*(x31)))+(x28));
x35=((((x1)*(x22)))+(((x20)*(x4))));
x36=((IkReal(-1.00000000000000))*(x35));
x37=((((IkReal(-1.00000000000000))*(x32)))+(((x26)*(x3))));
x38=((((IkReal(-1.00000000000000))*(x33)))+(((x24)*(x3))));
x39=((x36)*(x6));
x40=((x35)*(x5));
x41=((((IkReal(-1.00000000000000))*(x0)*(x20)*(x4)))+(((IkReal(-1.00000000000000))*(x22)*(x26))));
x42=((((x22)*(x26)))+(((x0)*(x20)*(x4))));
x43=((x17)*(((((IkReal(-1.00000000000000))*(x30)))+(((IkReal(-1.00000000000000))*(x25))))));
x44=((x17)*(((x30)+(x25))));
x45=((x37)*(x6));
x46=((x38)*(x6));
x47=((x10)*(x41));
x48=((x10)*(x43));
x49=((((IkReal(-1.00000000000000))*(x17)*(x5)))+(x45));
x50=((((x0)*(x5)))+(x46));
x51=((((x5)*(((x32)+(((IkReal(-1.00000000000000))*(x20)*(x26)))))))+(((IkReal(-1.00000000000000))*(x17)*(x6))));
x52=((((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x29)))+(x33)))))+(((x0)*(x6))));
x53=((x11)*(x49));
eerot[0]=((((x8)*(((x47)+(x53)))))+(((x51)*(x9))));
eerot[1]=((((x51)*(x8)))+(((x9)*(((((IkReal(-1.00000000000000))*(x16)*(x41)))+(((IkReal(-1.00000000000000))*(x13)*(x49))))))));
eerot[2]=((((x10)*(x49)))+(((x11)*(x42))));
eetrans[0]=((((IkReal(0.431800000000000))*(x26)))+(((x11)*(((((x18)*(x25)))+(((x15)*(x26)))))))+(((IkReal(-1.00000000000000))*(x12)*(x26)))+(((x14)*(x25)))+(((IkReal(0.0203000000000000))*(x0)*(x28)))+(((x14)*(x30)))+(((IkReal(-0.150100000000000))*(x7)))+(((x10)*(((((IkReal(-1.00000000000000))*(x19)*(x5)))+(((x21)*(x37))))))));
eerot[3]=((((x8)*(((((x11)*(x50)))+(x48)))))+(((x52)*(x9))));
eerot[4]=((((x9)*(((((IkReal(-1.00000000000000))*(x16)*(x43)))+(((IkReal(-1.00000000000000))*(x13)*(x50)))))))+(((x52)*(x8))));
eerot[5]=((((x11)*(x44)))+(((x10)*(x50))));
eetrans[1]=((((IkReal(0.150100000000000))*(x0)))+(((IkReal(0.431800000000000))*(x24)))+(((IkReal(0.433100000000000))*(x25)*(x7)))+(((IkReal(-1.00000000000000))*(x12)*(x24)))+(((x10)*(((((x18)*(x5)))+(((x21)*(x38)))))))+(((x11)*(((((x19)*(x25)))+(((x15)*(x24)))))))+(((IkReal(0.433100000000000))*(x2)*(x24)))+(((IkReal(0.0203000000000000))*(x28)*(x7))));
eerot[6]=((((x8)*(((((x10)*(x34)))+(((x11)*(x39)))))))+(((x40)*(x9))));
eerot[7]=((((x9)*(((((IkReal(-1.00000000000000))*(x16)*(x34)))+(((IkReal(-1.00000000000000))*(x13)*(x39)))))))+(((x40)*(x8))));
eerot[8]=((((x27)*(x36)))+(((x11)*(((x31)+(((IkReal(-1.00000000000000))*(x22)*(x4))))))));
IkReal x54=((IkReal(1.00000000000000))*(x15));
eetrans[2]=((IkReal(1.37100000000000))+(((IkReal(-0.431800000000000))*(x4)))+(((IkReal(0.433100000000000))*(x29)))+(((x27)*(((((IkReal(-1.00000000000000))*(x1)*(x54)))+(((IkReal(-0.175000000000000))*(x25)))))))+(((IkReal(0.0203000000000000))*(x30)))+(((x11)*(((((IkReal(-1.00000000000000))*(x4)*(x54)))+(((IkReal(0.175000000000000))*(x29)))))))+(((x12)*(x4)))+(((IkReal(-0.433100000000000))*(x28))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((px)+(((IkReal(-0.175000000000000))*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((py)+(((IkReal(-0.175000000000000))*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-1.37100000000000))+(((IkReal(-0.175000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((IkReal(-1.06017897616850))+(((IkReal(2.67068488900329))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.06017897616850))+(((IkReal(2.67068488900329))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x55=IKasin(((IkReal(-1.06017897616850))+(((IkReal(2.67068488900329))*(pp)))));
j2array[0]=((IkReal(0.0468371131132389))+(((IkReal(1.00000000000000))*(x55))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.18842976670303))+(((IkReal(-1.00000000000000))*(x55))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(10.6354679802956))+(((IkReal(10.7231100422792))*((cj2)*(cj2))))+(((IkReal(-1.00000000000000))*(cj2)))+(((IkReal(21.3349753694581))*(sj2)))+(((IkReal(10.7231100422792))*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x56=((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-0.0203000000000000))*(sj2))));
IkReal x57=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
if( IKabs(x56) < IKFAST_ATAN2_MAGTHRESH && IKabs(x57) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x58=((IkReal(1.00000000000000))*(IKatan2(x56, x57)));
if( ((((x57)*(x57))+((x56)*(x56)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x57)*(x57))+((x56)*(x56)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x57)*(x57))+((x56)*(x56))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x57)*(x57))+((x56)*(x56)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x57)*(x57))+((x56)*(x56))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x59=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x57)*(x57))+((x56)*(x56)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x57)*(x57))+((x56)*(x56))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x58)))+(((IkReal(-1.00000000000000))*(x59))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(x59)+(((IkReal(-1.00000000000000))*(x58))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x60=((IkReal(21590000.0000000))*(cj1));
gconst1=IKsign(((((x60)*((px)*(px))))+(((x60)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x61=((IkReal(10000.0000000000))*(sj1));
gconst0=IKsign(((((x61)*((px)*(px))))+(((x61)*((py)*(py))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x62=((((IkReal(-0.433100000000000))*(cj2)))+(pz)+(((IkReal(-0.0203000000000000))*(sj2))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=x62;
evalcond[3]=x62;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(-21590000.0000000))*((px)*(px))))+(((IkReal(-21590000.0000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((IkReal(10000.0000000000))*((py)*(py))))+(((IkReal(10000.0000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x63=((IkReal(203.000000000000))*(cj2));
IkReal x64=((IkReal(4331.00000000000))*(sj2));
if( IKabs(((gconst3)*(((((IkReal(4318.00000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x63)))+(((py)*(x64)))+(((IkReal(-1501.00000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(1501.00000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x63)))+(((px)*(x64)))+(((IkReal(4318.00000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((IkReal(4318.00000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x63)))+(((py)*(x64)))+(((IkReal(-1501.00000000000))*(px)))))), ((gconst3)*(((((IkReal(1501.00000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x63)))+(((px)*(x64)))+(((IkReal(4318.00000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x65=IKsin(j0);
IkReal x66=IKcos(j0);
IkReal x67=((px)*(x66));
IkReal x68=((py)*(x65));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x65)))+(((IkReal(-1.00000000000000))*(py)*(x66))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.863600000000000))*(x68)))+(((IkReal(0.863600000000000))*(x67))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x67)))+(((IkReal(-1.00000000000000))*(x68))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x225=((IkReal(25000000.0000000))*(pp));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x225)))+(((IkReal(601661.750000000))*(py)))+(((IkReal(3240659.00000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-3240659.00000000))*(py)))+(((IkReal(601661.750000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x225))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x225)))+(((IkReal(601661.750000000))*(py)))+(((IkReal(3240659.00000000))*(px)))))), ((gconst2)*(((((IkReal(-3240659.00000000))*(py)))+(((IkReal(601661.750000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x225)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x226=IKsin(j0);
IkReal x227=IKcos(j0);
IkReal x228=((px)*(x227));
IkReal x229=((py)*(x226));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x226)))+(((IkReal(-1.00000000000000))*(py)*(x227))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(0.863600000000000))*(x228)))+(((IkReal(0.863600000000000))*(x229)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x229)))+(((IkReal(-1.00000000000000))*(x228))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x230=((IkReal(0.0203000000000000))*(sj2));
IkReal x231=((IkReal(0.433100000000000))*(cj2));
IkReal x232=((x230)+(x231));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x232))));
evalcond[3]=((x232)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(21590000.0000000))*((px)*(px))))+(((IkReal(21590000.0000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-10000.0000000000))*((py)*(py))))+(((IkReal(-10000.0000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x233=((IkReal(203.000000000000))*(cj2));
IkReal x234=((IkReal(4331.00000000000))*(sj2));
if( IKabs(((gconst5)*(((((IkReal(1501.00000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x233)))+(((py)*(x234)))+(((IkReal(4318.00000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(px)*(x233)))+(((px)*(x234)))+(((IkReal(4318.00000000000))*(px)))+(((IkReal(-1501.00000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst5)*(((((IkReal(1501.00000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x233)))+(((py)*(x234)))+(((IkReal(4318.00000000000))*(py)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(px)*(x233)))+(((px)*(x234)))+(((IkReal(4318.00000000000))*(px)))+(((IkReal(-1501.00000000000))*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x235=IKsin(j0);
IkReal x236=IKcos(j0);
IkReal x237=((px)*(x236));
IkReal x238=((py)*(x235));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(py)*(x236)))+(((px)*(x235))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x237)))+(((IkReal(-0.863600000000000))*(x238)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(x238)+(x237)+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x239=((IkReal(25000000.0000000))*(pp));
if( IKabs(((gconst4)*(((((IkReal(-3240659.00000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x239)))+(((IkReal(601661.750000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(px)*(x239)))+(((IkReal(601661.750000000))*(px)))+(((IkReal(3240659.00000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((((IkReal(-3240659.00000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x239)))+(((IkReal(601661.750000000))*(py)))))), ((gconst4)*(((((IkReal(-1.00000000000000))*(px)*(x239)))+(((IkReal(601661.750000000))*(px)))+(((IkReal(3240659.00000000))*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x240=IKsin(j0);
IkReal x241=IKcos(j0);
IkReal x242=((px)*(x241));
IkReal x243=((py)*(x240));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x240)))+(((IkReal(-1.00000000000000))*(py)*(x241))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x242)))+(((IkReal(-0.863600000000000))*(x243)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(x243)+(x242)+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x244=((IkReal(1.00000000000000))*(pp));
IkReal x245=((IkReal(0.431800000000000))+(pz)+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(0.374025160000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x244))));
evalcond[2]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x244))));
evalcond[3]=x245;
evalcond[4]=x245;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-10000.0000000000))*((py)*(py))))+(((IkReal(-10000.0000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x246=((IkReal(203.000000000000))*(sj2));
IkReal x247=((IkReal(4331.00000000000))*(cj2));
if( IKabs(((gconst6)*(((((IkReal(1501.00000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x247)))+(((IkReal(-1.00000000000000))*(py)*(x246))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(px)*(x246)))+(((IkReal(-1.00000000000000))*(px)*(x247)))+(((IkReal(-1501.00000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst6)*(((((IkReal(1501.00000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x247)))+(((IkReal(-1.00000000000000))*(py)*(x246)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(px)*(x246)))+(((IkReal(-1.00000000000000))*(px)*(x247)))+(((IkReal(-1501.00000000000))*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x248=IKsin(j0);
IkReal x249=IKcos(j0);
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x248)))+(((IkReal(-1.00000000000000))*(py)*(x249))));
evalcond[1]=((((px)*(x249)))+(((IkReal(-0.433100000000000))*(cj2)))+(((py)*(x248)))+(((IkReal(-0.0203000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x250=((IkReal(1.00000000000000))*(pp));
IkReal x251=((IkReal(0.0203000000000000))*(cj2));
IkReal x252=((IkReal(0.433100000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(0.374025160000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x250))));
evalcond[2]=((IkReal(0.0240664700000000))+(((IkReal(0.863600000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x250))));
evalcond[3]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x252)+(((IkReal(-1.00000000000000))*(x251))));
evalcond[4]=((IkReal(-0.431800000000000))+(x251)+(pz)+(((IkReal(-1.00000000000000))*(x252))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(10000.0000000000))*((py)*(py))))+(((IkReal(10000.0000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x253=((IkReal(203.000000000000))*(sj2));
IkReal x254=((IkReal(4331.00000000000))*(cj2));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(py)*(x254)))+(((IkReal(-1.00000000000000))*(py)*(x253)))+(((IkReal(-1501.00000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(1501.00000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x254)))+(((IkReal(-1.00000000000000))*(px)*(x253))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(py)*(x254)))+(((IkReal(-1.00000000000000))*(py)*(x253)))+(((IkReal(-1501.00000000000))*(px)))))), ((gconst7)*(((((IkReal(1501.00000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x254)))+(((IkReal(-1.00000000000000))*(px)*(x253)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x255=IKcos(j0);
IkReal x256=IKsin(j0);
IkReal x257=((IkReal(1.00000000000000))*(x255));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x256)))+(((IkReal(-1.00000000000000))*(py)*(x257))));
evalcond[1]=((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(x256)))+(((IkReal(-1.00000000000000))*(px)*(x257)))+(((IkReal(-0.0203000000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x258=((IkReal(203.000000000000))*(sj2));
IkReal x259=((IkReal(4331.00000000000))*(cj2));
IkReal x260=((IkReal(1501.00000000000))*(sj1));
IkReal x261=((IkReal(10000.0000000000))*(cj1)*(pz));
if( IKabs(((gconst0)*(((((py)*(x258)))+(((py)*(x259)))+(((IkReal(-1.00000000000000))*(px)*(x260)))+(((IkReal(-1.00000000000000))*(py)*(x261))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((px)*(x259)))+(((px)*(x258)))+(((IkReal(-1.00000000000000))*(px)*(x261)))+(((py)*(x260))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((py)*(x258)))+(((py)*(x259)))+(((IkReal(-1.00000000000000))*(px)*(x260)))+(((IkReal(-1.00000000000000))*(py)*(x261)))))), ((gconst0)*(((((px)*(x259)))+(((px)*(x258)))+(((IkReal(-1.00000000000000))*(px)*(x261)))+(((py)*(x260)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x262=IKsin(j0);
IkReal x263=IKcos(j0);
IkReal x264=((IkReal(0.433100000000000))*(sj2));
IkReal x265=((IkReal(0.433100000000000))*(cj2));
IkReal x266=((pz)*(sj1));
IkReal x267=((IkReal(0.0203000000000000))*(cj2));
IkReal x268=((IkReal(0.863600000000000))*(cj1));
IkReal x269=((IkReal(1.00000000000000))*(cj1));
IkReal x270=((IkReal(0.0203000000000000))*(sj2));
IkReal x271=((px)*(x263));
IkReal x272=((py)*(x262));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(py)*(x263)))+(((px)*(x262))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x266)))+(((IkReal(-1.00000000000000))*(pp)))+(((x268)*(x271)))+(((x268)*(x272))));
evalcond[2]=((((cj1)*(pz)))+(((IkReal(-1.00000000000000))*(x270)))+(((IkReal(-1.00000000000000))*(x265)))+(((sj1)*(x271)))+(((sj1)*(x272))));
evalcond[3]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x269)*(x271)))+(((IkReal(-1.00000000000000))*(x269)*(x272)))+(x264)+(x266)+(((IkReal(-1.00000000000000))*(x267))));
evalcond[4]=((((IkReal(0.431800000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x271)))+(((IkReal(-1.00000000000000))*(x272)))+(((IkReal(-1.00000000000000))*(cj1)*(x267)))+(((cj1)*(x264)))+(((sj1)*(x265)))+(((sj1)*(x270))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x273=((IkReal(25000000.0000000))*(pp));
IkReal x274=((IkReal(3240659.00000000))*(cj1));
IkReal x275=((IkReal(21590000.0000000))*(pz)*(sj1));
if( IKabs(((gconst1)*(((((IkReal(-601661.750000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x274)))+(((py)*(x275)))+(((py)*(x273))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((px)*(x273)))+(((px)*(x275)))+(((IkReal(-601661.750000000))*(px)))+(((py)*(x274))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((IkReal(-601661.750000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x274)))+(((py)*(x275)))+(((py)*(x273)))))), ((gconst1)*(((((px)*(x273)))+(((px)*(x275)))+(((IkReal(-601661.750000000))*(px)))+(((py)*(x274)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x276=IKsin(j0);
IkReal x277=IKcos(j0);
IkReal x278=((IkReal(0.433100000000000))*(sj2));
IkReal x279=((IkReal(0.433100000000000))*(cj2));
IkReal x280=((pz)*(sj1));
IkReal x281=((IkReal(0.0203000000000000))*(cj2));
IkReal x282=((IkReal(0.863600000000000))*(cj1));
IkReal x283=((IkReal(1.00000000000000))*(cj1));
IkReal x284=((IkReal(0.0203000000000000))*(sj2));
IkReal x285=((px)*(x277));
IkReal x286=((py)*(x276));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x276)))+(((IkReal(-1.00000000000000))*(py)*(x277))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.863600000000000))*(x280)))+(((x282)*(x286)))+(((x282)*(x285))));
evalcond[2]=((((cj1)*(pz)))+(((IkReal(-1.00000000000000))*(x279)))+(((IkReal(-1.00000000000000))*(x284)))+(((sj1)*(x285)))+(((sj1)*(x286))));
evalcond[3]=((IkReal(0.431800000000000))+(x278)+(x280)+(((IkReal(-1.00000000000000))*(x281)))+(((IkReal(-1.00000000000000))*(x283)*(x285)))+(((IkReal(-1.00000000000000))*(x283)*(x286))));
evalcond[4]=((((IkReal(0.431800000000000))*(cj1)))+(((cj1)*(x278)))+(((IkReal(-1.00000000000000))*(cj1)*(x281)))+(((IkReal(-1.00000000000000))*(x286)))+(((IkReal(-1.00000000000000))*(x285)))+(((sj1)*(x284)))+(((sj1)*(x279))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x287=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.150100000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.150100000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x288=IKasin(((IkReal(0.150100000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))));
j0array[0]=((((IkReal(-1.00000000000000))*(x288)))+(((IkReal(-1.00000000000000))*(x287))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x288)+(((IkReal(-1.00000000000000))*(x287))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst9;
IkReal x289=((cj0)*(px));
IkReal x290=((IkReal(0.433100000000000))*(cj2));
IkReal x291=((IkReal(0.0203000000000000))*(sj2));
IkReal x292=((py)*(sj0));
gconst9=IKsign(((((IkReal(-1.00000000000000))*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x290)*(x292)))+(((IkReal(-1.00000000000000))*(x289)*(x290)))+(((IkReal(-1.00000000000000))*(x289)*(x291)))+(((IkReal(0.0203000000000000))*(cj2)*(pz)))+(((IkReal(-0.433100000000000))*(pz)*(sj2)))+(((IkReal(-0.431800000000000))*(pz)))));
IkReal x293=((IkReal(21.3349753694581))*(cj2));
IkReal x294=((py)*(sj0));
IkReal x295=((cj0)*(px));
IkReal x296=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x293)*(x294)))+(((IkReal(-1.00000000000000))*(x293)*(x295)))+(((IkReal(-1.00000000000000))*(x295)*(x296)))+(((cj2)*(pz)))+(((IkReal(-1.00000000000000))*(x294)*(x296)))+(((IkReal(-21.2709359605911))*(pz)))+(((IkReal(-21.3349753694581))*(pz)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(2159.00000000000))*((pz)*(pz))))+(((IkReal(4318.00000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(2159.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2159.00000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x297=((cj0)*(px));
IkReal x298=((IkReal(43.8277000000000))*(sj2));
IkReal x299=((IkReal(2500.00000000000))*(pp));
IkReal x300=((IkReal(935.062900000000))*(cj2));
IkReal x301=((py)*(sj0));
if( IKabs(((gconst8)*(((((IkReal(60.1661750000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x299)))+(((x298)*(x301)))+(((x297)*(x300)))+(((x297)*(x298)))+(((x300)*(x301))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((pz)*(x298)))+(((IkReal(-60.1661750000000))*(x301)))+(((x299)*(x301)))+(((x297)*(x299)))+(((IkReal(-60.1661750000000))*(x297)))+(((pz)*(x300))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst8)*(((((IkReal(60.1661750000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x299)))+(((x298)*(x301)))+(((x297)*(x300)))+(((x297)*(x298)))+(((x300)*(x301)))))), ((gconst8)*(((((pz)*(x298)))+(((IkReal(-60.1661750000000))*(x301)))+(((x299)*(x301)))+(((x297)*(x299)))+(((IkReal(-60.1661750000000))*(x297)))+(((pz)*(x300)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x302=IKcos(j1);
IkReal x303=IKsin(j1);
IkReal x304=((IkReal(0.433100000000000))*(sj2));
IkReal x305=((cj0)*(px));
IkReal x306=((IkReal(0.433100000000000))*(cj2));
IkReal x307=((py)*(sj0));
IkReal x308=((IkReal(0.0203000000000000))*(cj2));
IkReal x309=((IkReal(0.0203000000000000))*(sj2));
IkReal x310=((IkReal(1.00000000000000))*(x302));
IkReal x311=((IkReal(0.0203000000000000))*(x303));
IkReal x312=((pz)*(x303));
IkReal x313=((IkReal(0.863600000000000))*(x302));
evalcond[0]=((IkReal(0.0240664700000000))+(((x305)*(x313)))+(((IkReal(-1.00000000000000))*(pp)))+(((x307)*(x313)))+(((IkReal(-0.863600000000000))*(x312))));
evalcond[1]=((((x303)*(x307)))+(((x303)*(x305)))+(((IkReal(-1.00000000000000))*(x306)))+(((IkReal(-1.00000000000000))*(x309)))+(((pz)*(x302))));
evalcond[2]=((IkReal(0.431800000000000))+(x304)+(x312)+(((IkReal(-1.00000000000000))*(x305)*(x310)))+(((IkReal(-1.00000000000000))*(x307)*(x310)))+(((IkReal(-1.00000000000000))*(x308))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x303)*(x308)))+(((x303)*(x304)))+(((IkReal(-1.00000000000000))*(x302)*(x309)))+(((IkReal(-1.00000000000000))*(x302)*(x306)))+(pz)+(((IkReal(0.431800000000000))*(x303))));
evalcond[4]=((((x303)*(x309)))+(((x303)*(x306)))+(((IkReal(-1.00000000000000))*(x302)*(x308)))+(((IkReal(-1.00000000000000))*(x307)))+(((IkReal(-1.00000000000000))*(x305)))+(((IkReal(0.431800000000000))*(x302)))+(((x302)*(x304))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x314=(cj2)*(cj2);
IkReal x315=(sj2)*(sj2);
IkReal x316=((cj2)*(sj2));
IkReal x317=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst9)*(((((IkReal(-0.0175838600000000))*(x316)))+(((IkReal(-0.187575610000000))*(x314)))+((pz)*(pz))+(((IkReal(-0.000412090000000000))*(x315))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(-0.187163520000000))*(x316)))+(((IkReal(-0.00876554000000000))*(sj2)))+(((IkReal(-0.187012580000000))*(cj2)))+(((IkReal(0.00879193000000000))*(x314)))+(((IkReal(-0.00879193000000000))*(x315)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x317)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x317))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst9)*(((((IkReal(-0.0175838600000000))*(x316)))+(((IkReal(-0.187575610000000))*(x314)))+((pz)*(pz))+(((IkReal(-0.000412090000000000))*(x315)))))), ((gconst9)*(((((IkReal(-0.187163520000000))*(x316)))+(((IkReal(-0.00876554000000000))*(sj2)))+(((IkReal(-0.187012580000000))*(cj2)))+(((IkReal(0.00879193000000000))*(x314)))+(((IkReal(-0.00879193000000000))*(x315)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x317)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x317)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x318=IKcos(j1);
IkReal x319=IKsin(j1);
IkReal x320=((IkReal(0.433100000000000))*(sj2));
IkReal x321=((cj0)*(px));
IkReal x322=((IkReal(0.433100000000000))*(cj2));
IkReal x323=((py)*(sj0));
IkReal x324=((IkReal(0.0203000000000000))*(cj2));
IkReal x325=((IkReal(0.0203000000000000))*(sj2));
IkReal x326=((IkReal(1.00000000000000))*(x318));
IkReal x327=((IkReal(0.0203000000000000))*(x319));
IkReal x328=((pz)*(x319));
IkReal x329=((IkReal(0.863600000000000))*(x318));
evalcond[0]=((IkReal(0.0240664700000000))+(((x323)*(x329)))+(((IkReal(-0.863600000000000))*(x328)))+(((IkReal(-1.00000000000000))*(pp)))+(((x321)*(x329))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x325)))+(((IkReal(-1.00000000000000))*(x322)))+(((pz)*(x318)))+(((x319)*(x321)))+(((x319)*(x323))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x321)*(x326)))+(((IkReal(-1.00000000000000))*(x324)))+(((IkReal(-1.00000000000000))*(x323)*(x326)))+(x320)+(x328));
evalcond[3]=((((IkReal(-1.00000000000000))*(x319)*(x324)))+(pz)+(((IkReal(-1.00000000000000))*(x318)*(x325)))+(((IkReal(-1.00000000000000))*(x318)*(x322)))+(((IkReal(0.431800000000000))*(x319)))+(((x319)*(x320))));
evalcond[4]=((((x318)*(x320)))+(((IkReal(-1.00000000000000))*(x321)))+(((IkReal(-1.00000000000000))*(x323)))+(((IkReal(-1.00000000000000))*(x318)*(x324)))+(((IkReal(0.431800000000000))*(x318)))+(((x319)*(x322)))+(((x319)*(x325))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x330=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.150100000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.150100000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x331=IKasin(((IkReal(0.150100000000000))*(((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))));
j0array[0]=((((IkReal(-1.00000000000000))*(x331)))+(((IkReal(-1.00000000000000))*(x330))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x331)+(((IkReal(-1.00000000000000))*(x330))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst9;
IkReal x332=((cj0)*(px));
IkReal x333=((IkReal(0.433100000000000))*(cj2));
IkReal x334=((IkReal(0.0203000000000000))*(sj2));
IkReal x335=((py)*(sj0));
gconst9=IKsign(((((IkReal(-1.00000000000000))*(x333)*(x335)))+(((IkReal(-1.00000000000000))*(x332)*(x334)))+(((IkReal(-1.00000000000000))*(x332)*(x333)))+(((IkReal(0.0203000000000000))*(cj2)*(pz)))+(((IkReal(-1.00000000000000))*(x334)*(x335)))+(((IkReal(-0.433100000000000))*(pz)*(sj2)))+(((IkReal(-0.431800000000000))*(pz)))));
IkReal x336=((IkReal(21.3349753694581))*(cj2));
IkReal x337=((py)*(sj0));
IkReal x338=((cj0)*(px));
IkReal x339=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x337)*(x339)))+(((IkReal(-1.00000000000000))*(x338)*(x339)))+(((cj2)*(pz)))+(((IkReal(-1.00000000000000))*(x336)*(x337)))+(((IkReal(-1.00000000000000))*(x336)*(x338)))+(((IkReal(-21.2709359605911))*(pz)))+(((IkReal(-21.3349753694581))*(pz)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(2159.00000000000))*((pz)*(pz))))+(((IkReal(4318.00000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(2159.00000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2159.00000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x340=((cj0)*(px));
IkReal x341=((IkReal(43.8277000000000))*(sj2));
IkReal x342=((IkReal(2500.00000000000))*(pp));
IkReal x343=((IkReal(935.062900000000))*(cj2));
IkReal x344=((py)*(sj0));
if( IKabs(((gconst8)*(((((IkReal(60.1661750000000))*(pz)))+(((x341)*(x344)))+(((x340)*(x341)))+(((x340)*(x343)))+(((x343)*(x344)))+(((IkReal(-1.00000000000000))*(pz)*(x342))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((pz)*(x341)))+(((pz)*(x343)))+(((IkReal(-60.1661750000000))*(x340)))+(((IkReal(-60.1661750000000))*(x344)))+(((x340)*(x342)))+(((x342)*(x344))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst8)*(((((IkReal(60.1661750000000))*(pz)))+(((x341)*(x344)))+(((x340)*(x341)))+(((x340)*(x343)))+(((x343)*(x344)))+(((IkReal(-1.00000000000000))*(pz)*(x342)))))), ((gconst8)*(((((pz)*(x341)))+(((pz)*(x343)))+(((IkReal(-60.1661750000000))*(x340)))+(((IkReal(-60.1661750000000))*(x344)))+(((x340)*(x342)))+(((x342)*(x344)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x345=IKcos(j1);
IkReal x346=IKsin(j1);
IkReal x347=((IkReal(0.433100000000000))*(sj2));
IkReal x348=((cj0)*(px));
IkReal x349=((IkReal(0.433100000000000))*(cj2));
IkReal x350=((py)*(sj0));
IkReal x351=((IkReal(0.0203000000000000))*(cj2));
IkReal x352=((IkReal(0.0203000000000000))*(sj2));
IkReal x353=((IkReal(1.00000000000000))*(x345));
IkReal x354=((IkReal(0.0203000000000000))*(x346));
IkReal x355=((pz)*(x346));
IkReal x356=((IkReal(0.863600000000000))*(x345));
evalcond[0]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x355)))+(((IkReal(-1.00000000000000))*(pp)))+(((x350)*(x356)))+(((x348)*(x356))));
evalcond[1]=((((pz)*(x345)))+(((IkReal(-1.00000000000000))*(x352)))+(((x346)*(x350)))+(((x346)*(x348)))+(((IkReal(-1.00000000000000))*(x349))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x348)*(x353)))+(((IkReal(-1.00000000000000))*(x351)))+(x355)+(x347)+(((IkReal(-1.00000000000000))*(x350)*(x353))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x345)*(x352)))+(((IkReal(0.431800000000000))*(x346)))+(((IkReal(-1.00000000000000))*(x346)*(x351)))+(pz)+(((IkReal(-1.00000000000000))*(x345)*(x349)))+(((x346)*(x347))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x345)*(x351)))+(((x346)*(x352)))+(((IkReal(0.431800000000000))*(x345)))+(((IkReal(-1.00000000000000))*(x350)))+(((x345)*(x347)))+(((x346)*(x349)))+(((IkReal(-1.00000000000000))*(x348))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x357=(cj2)*(cj2);
IkReal x358=(sj2)*(sj2);
IkReal x359=((cj2)*(sj2));
IkReal x360=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst9)*(((((IkReal(-0.187575610000000))*(x357)))+(((IkReal(-0.000412090000000000))*(x358)))+((pz)*(pz))+(((IkReal(-0.0175838600000000))*(x359))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(-0.00876554000000000))*(sj2)))+(((IkReal(-0.187012580000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x360)))+(((IkReal(-0.00879193000000000))*(x358)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x360)))+(((IkReal(0.00879193000000000))*(x357)))+(((IkReal(-0.187163520000000))*(x359))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst9)*(((((IkReal(-0.187575610000000))*(x357)))+(((IkReal(-0.000412090000000000))*(x358)))+((pz)*(pz))+(((IkReal(-0.0175838600000000))*(x359)))))), ((gconst9)*(((((IkReal(-0.00876554000000000))*(sj2)))+(((IkReal(-0.187012580000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x360)))+(((IkReal(-0.00879193000000000))*(x358)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x360)))+(((IkReal(0.00879193000000000))*(x357)))+(((IkReal(-0.187163520000000))*(x359)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x361=IKcos(j1);
IkReal x362=IKsin(j1);
IkReal x363=((IkReal(0.433100000000000))*(sj2));
IkReal x364=((cj0)*(px));
IkReal x365=((IkReal(0.433100000000000))*(cj2));
IkReal x366=((py)*(sj0));
IkReal x367=((IkReal(0.0203000000000000))*(cj2));
IkReal x368=((IkReal(0.0203000000000000))*(sj2));
IkReal x369=((IkReal(1.00000000000000))*(x361));
IkReal x370=((IkReal(0.0203000000000000))*(x362));
IkReal x371=((pz)*(x362));
IkReal x372=((IkReal(0.863600000000000))*(x361));
evalcond[0]=((IkReal(0.0240664700000000))+(((x364)*(x372)))+(((x366)*(x372)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.863600000000000))*(x371))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x365)))+(((IkReal(-1.00000000000000))*(x368)))+(((pz)*(x361)))+(((x362)*(x364)))+(((x362)*(x366))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x367)))+(x371)+(x363)+(((IkReal(-1.00000000000000))*(x366)*(x369)))+(((IkReal(-1.00000000000000))*(x364)*(x369))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x362)*(x367)))+(((IkReal(-1.00000000000000))*(x361)*(x368)))+(((IkReal(-1.00000000000000))*(x361)*(x365)))+(pz)+(((x362)*(x363)))+(((IkReal(0.431800000000000))*(x362))));
evalcond[4]=((((x361)*(x363)))+(((IkReal(-1.00000000000000))*(x364)))+(((IkReal(-1.00000000000000))*(x366)))+(((IkReal(-1.00000000000000))*(x361)*(x367)))+(((x362)*(x365)))+(((x362)*(x368)))+(((IkReal(0.431800000000000))*(x361))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x69=((cj0)*(r00));
IkReal x70=((cj0)*(r01));
IkReal x71=((IkReal(1.00000000000000))*(sj1));
IkReal x72=((IkReal(1.00000000000000))*(sj0));
IkReal x73=((r11)*(sj0));
IkReal x74=((cj1)*(sj2));
IkReal x75=((cj0)*(r02));
IkReal x76=((((IkReal(-1.00000000000000))*(sj2)*(x71)))+(((cj1)*(cj2))));
IkReal x77=((((cj2)*(sj1)))+(x74));
IkReal x78=((cj0)*(x76));
IkReal x79=((sj0)*(x76));
IkReal x80=((sj0)*(x77));
IkReal x81=((((IkReal(-1.00000000000000))*(x74)))+(((IkReal(-1.00000000000000))*(cj2)*(x71))));
new_r00=((((r10)*(x79)))+(((x69)*(x76)))+(((r20)*(x81))));
new_r01=((((r21)*(x81)))+(((x70)*(x76)))+(((x73)*(x76))));
new_r02=((((x75)*(x76)))+(((r22)*(x81)))+(((r12)*(x79))));
new_r10=((((IkReal(-1.00000000000000))*(r00)*(x72)))+(((cj0)*(r10))));
new_r11=((((IkReal(-1.00000000000000))*(r01)*(x72)))+(((cj0)*(r11))));
new_r12=((((IkReal(-1.00000000000000))*(r02)*(x72)))+(((cj0)*(r12))));
new_r20=((((r10)*(x80)))+(((x69)*(x77)))+(((r20)*(x76))));
new_r21=((((r21)*(x76)))+(((x70)*(x77)))+(((x73)*(x77))));
new_r22=((((r12)*(x80)))+(((r22)*(x76)))+(((x75)*(x77))));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((cj4)*((new_r12)*(new_r12))))+(((cj4)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj4)*((new_r12)*(new_r12))))+(((cj4)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j5))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst19)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst19)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst19)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst19)*(new_r10)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x82=IKsin(j3);
IkReal x83=IKcos(j3);
IkReal x84=((IkReal(1.00000000000000))*(x82));
evalcond[0]=((((new_r12)*(x83)))+(((IkReal(-1.00000000000000))*(new_r02)*(x84))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r12)*(x82)))+(((new_r02)*(x83))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(new_r00)*(x84)))+(((new_r10)*(x83))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x84)))+(((new_r11)*(x83)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[4]=((((new_r01)*(x83)))+(((new_r11)*(x82))));
evalcond[5]=((((new_r00)*(x83)))+(((new_r10)*(x82))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst18)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst18)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst18)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst18)*(new_r11)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x85=IKsin(j3);
IkReal x86=IKcos(j3);
IkReal x87=((IkReal(1.00000000000000))*(x85));
evalcond[0]=((((new_r12)*(x86)))+(((IkReal(-1.00000000000000))*(new_r02)*(x87))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r12)*(x85)))+(((new_r02)*(x86))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(new_r00)*(x87)))+(((new_r10)*(x86))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x87)))+(((new_r11)*(x86)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[4]=((((new_r01)*(x86)))+(((new_r11)*(x85))));
evalcond[5]=((((new_r00)*(x86)))+(((new_r10)*(x85))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(new_r20));
evalcond[1]=((IKsin(j5))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst23)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst23)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst23)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst23)*(new_r10)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x88=IKsin(j3);
IkReal x89=IKcos(j3);
IkReal x90=((IkReal(1.00000000000000))*(x88));
evalcond[0]=((((new_r12)*(x89)))+(((IkReal(-1.00000000000000))*(new_r02)*(x90))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r12)*(x88)))+(((new_r02)*(x89))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(new_r00)*(x90)))+(((new_r10)*(x89))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x90)))+(((new_r11)*(x89)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[4]=((((new_r01)*(x89)))+(((new_r11)*(x88))));
evalcond[5]=((((new_r00)*(x89)))+(((new_r10)*(x88))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst22)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst22)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst22)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst22)*(new_r11)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x91=IKsin(j3);
IkReal x92=IKcos(j3);
IkReal x93=((IkReal(1.00000000000000))*(x91));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x93)))+(((new_r12)*(x92))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x92)))+(((new_r12)*(x91))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(new_r00)*(x93)))+(((new_r10)*(x92))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x93)))+(((new_r11)*(x92)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[4]=((((new_r01)*(x92)))+(((new_r11)*(x91))));
evalcond[5]=((((new_r00)*(x92)))+(((new_r10)*(x91))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x94=IKatan2(new_r02, new_r12);
j3array[0]=((IkReal(-1.00000000000000))*(x94));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x94))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j3))))+(((new_r12)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x95=IKsin(j5);
IkReal x96=((IkReal(1.00000000000000))*(sj3));
IkReal x97=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x96)))+(((IkReal(-1.00000000000000))*(x95))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x96)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x97))));
evalcond[2]=((((new_r11)*(sj3)))+(x95)+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x97)))+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x98=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x98;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x98;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x99=IKatan2(new_r02, new_r12);
j3array[0]=((IkReal(-1.00000000000000))*(x99));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x99))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j3))))+(((new_r12)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x100=IKcos(j5);
IkReal x101=((IkReal(1.00000000000000))*(sj3));
IkReal x102=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x101)))+(((IkReal(-1.00000000000000))*(x102)))+(((cj3)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x101)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x100))));
evalcond[2]=((((new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x102)))+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(x100)+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x103=((gconst11)*(new_r22)*(sj4));
if( IKabs(((new_r12)*(x103))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x103))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r12)*(x103)), ((new_r02)*(x103)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x104=IKsin(j3);
IkReal x105=IKcos(j3);
IkReal x106=((IkReal(1.00000000000000))*(sj4));
IkReal x107=((IkReal(1.00000000000000))*(cj4));
IkReal x108=((new_r02)*(x105));
IkReal x109=((new_r12)*(x104));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x104)))+(((new_r12)*(x105))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x106)))+(x108)+(x109));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x106)))+(((cj4)*(x109)))+(((cj4)*(x108))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x107)))+(((IkReal(-1.00000000000000))*(new_r10)*(x104)*(x106)))+(((IkReal(-1.00000000000000))*(new_r00)*(x105)*(x106))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x105)*(x106)))+(((IkReal(-1.00000000000000))*(new_r11)*(x104)*(x106)))+(((IkReal(-1.00000000000000))*(new_r21)*(x107))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x106)*(x109)))+(((IkReal(-1.00000000000000))*(x106)*(x108)))+(((IkReal(-1.00000000000000))*(new_r22)*(x107))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x110=((((IkReal(-1.00000000000000))*(new_r02)*(sj3)))+(((cj3)*(new_r12))));
IkReal x111=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x110;
evalcond[5]=x110;
evalcond[6]=x111;
evalcond[7]=x111;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x112=IKsin(j5);
IkReal x113=((IkReal(1.00000000000000))*(sj3));
IkReal x114=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x113)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x112))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x113)))+(((IkReal(-1.00000000000000))*(x114)))+(((cj3)*(new_r11))));
evalcond[2]=((((new_r11)*(sj3)))+(x112)+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x114)))+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x115=((IkReal(1.00000000000000))+(new_r22));
IkReal x116=((new_r12)*(sj3));
IkReal x117=((IkReal(1.00000000000000))*(new_r02));
IkReal x118=((((cj3)*(new_r12)))+(((IkReal(-1.00000000000000))*(sj3)*(x117))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x115;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x118;
evalcond[5]=x118;
evalcond[6]=((x116)+(((cj3)*(new_r02))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj3)*(x117)))+(((IkReal(-1.00000000000000))*(x116))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x115;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x119=IKcos(j5);
IkReal x120=((IkReal(1.00000000000000))*(sj3));
IkReal x121=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x120)))+(((IkReal(-1.00000000000000))*(x121)))+(((cj3)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x120)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x119))));
evalcond[2]=((((new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x121)))+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(x119)+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x122=IKsin(j5);
IkReal x123=IKcos(j5);
IkReal x124=((IkReal(1.00000000000000))*(sj3));
IkReal x125=((new_r11)*(sj3));
IkReal x126=((new_r10)*(sj3));
IkReal x127=((cj3)*(cj4));
IkReal x128=((IkReal(1.00000000000000))*(sj4));
IkReal x129=((IkReal(1.00000000000000))*(x123));
IkReal x130=((IkReal(1.00000000000000))*(x122));
evalcond[0]=((((sj4)*(x123)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x122)*(x128))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x124)))+(((IkReal(-1.00000000000000))*(x130)))+(((cj3)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x124)))+(((IkReal(-1.00000000000000))*(x129)))+(((cj3)*(new_r11))));
evalcond[4]=((x125)+(((cj3)*(new_r01)))+(((cj4)*(x122))));
evalcond[5]=((x126)+(((IkReal(-1.00000000000000))*(cj4)*(x129)))+(((cj3)*(new_r00))));
evalcond[6]=((((new_r01)*(x127)))+(((IkReal(-1.00000000000000))*(new_r21)*(x128)))+(x122)+(((cj4)*(x125))));
evalcond[7]=((((new_r00)*(x127)))+(((IkReal(-1.00000000000000))*(x129)))+(((IkReal(-1.00000000000000))*(new_r20)*(x128)))+(((cj4)*(x126))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x131=IKsin(j5);
IkReal x132=IKcos(j5);
IkReal x133=((IkReal(1.00000000000000))*(sj3));
IkReal x134=((new_r11)*(sj3));
IkReal x135=((new_r10)*(sj3));
IkReal x136=((cj3)*(cj4));
IkReal x137=((IkReal(1.00000000000000))*(sj4));
IkReal x138=((IkReal(1.00000000000000))*(x132));
IkReal x139=((IkReal(1.00000000000000))*(x131));
evalcond[0]=((((sj4)*(x132)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x131)*(x137))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x133)))+(((IkReal(-1.00000000000000))*(x139)))+(((cj3)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x133)))+(((IkReal(-1.00000000000000))*(x138)))+(((cj3)*(new_r11))));
evalcond[4]=((x134)+(((cj3)*(new_r01)))+(((cj4)*(x131))));
evalcond[5]=((x135)+(((cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(cj4)*(x138))));
evalcond[6]=((((new_r01)*(x136)))+(x131)+(((IkReal(-1.00000000000000))*(new_r21)*(x137)))+(((cj4)*(x134))));
evalcond[7]=((((new_r00)*(x136)))+(((IkReal(-1.00000000000000))*(new_r20)*(x137)))+(((IkReal(-1.00000000000000))*(x138)))+(((cj4)*(x135))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst13)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst13)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst13)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst13)*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x140=IKsin(j5);
IkReal x141=IKcos(j5);
IkReal x142=((IkReal(1.00000000000000))*(sj3));
IkReal x143=((new_r11)*(sj3));
IkReal x144=((new_r10)*(sj3));
IkReal x145=((cj3)*(cj4));
IkReal x146=((IkReal(1.00000000000000))*(sj4));
IkReal x147=((IkReal(1.00000000000000))*(x141));
IkReal x148=((IkReal(1.00000000000000))*(x140));
evalcond[0]=((((sj4)*(x141)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x140)*(x146)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x148)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x142))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x142)))+(((IkReal(-1.00000000000000))*(x147)))+(((cj3)*(new_r11))));
evalcond[4]=((x143)+(((cj3)*(new_r01)))+(((cj4)*(x140))));
evalcond[5]=((x144)+(((cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(cj4)*(x147))));
evalcond[6]=((((new_r01)*(x145)))+(((IkReal(-1.00000000000000))*(new_r21)*(x146)))+(x140)+(((cj4)*(x143))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(new_r20)*(x146)))+(((new_r00)*(x145)))+(((cj4)*(x144))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x149=((gconst10)*(sj4));
if( IKabs(((new_r12)*(x149))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x149))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r12)*(x149)), ((new_r02)*(x149)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x150=IKsin(j3);
IkReal x151=IKcos(j3);
IkReal x152=((IkReal(1.00000000000000))*(sj4));
IkReal x153=((IkReal(1.00000000000000))*(cj4));
IkReal x154=((new_r02)*(x151));
IkReal x155=((new_r12)*(x150));
evalcond[0]=((((new_r12)*(x151)))+(((IkReal(-1.00000000000000))*(new_r02)*(x150))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x152)))+(x155)+(x154));
evalcond[2]=((((cj4)*(x154)))+(((cj4)*(x155)))+(((IkReal(-1.00000000000000))*(new_r22)*(x152))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x153)))+(((IkReal(-1.00000000000000))*(new_r00)*(x151)*(x152)))+(((IkReal(-1.00000000000000))*(new_r10)*(x150)*(x152))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x153)))+(((IkReal(-1.00000000000000))*(new_r11)*(x150)*(x152)))+(((IkReal(-1.00000000000000))*(new_r01)*(x151)*(x152))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x153)))+(((IkReal(-1.00000000000000))*(x152)*(x154)))+(((IkReal(-1.00000000000000))*(x152)*(x155))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x156=((((IkReal(-1.00000000000000))*(new_r02)*(sj3)))+(((cj3)*(new_r12))));
IkReal x157=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x156;
evalcond[5]=x156;
evalcond[6]=x157;
evalcond[7]=x157;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj3)))+(((cj3)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))))+IKsqr(((((new_r10)*(sj3)))+(((cj3)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)))), ((((new_r10)*(sj3)))+(((cj3)*(new_r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x158=IKsin(j5);
IkReal x159=((IkReal(1.00000000000000))*(sj3));
IkReal x160=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x158)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x159))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x160)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x159))));
evalcond[2]=((((new_r11)*(sj3)))+(x158)+(((cj3)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x160)))+(((new_r10)*(sj3)))+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x161=((IkReal(1.00000000000000))+(new_r22));
IkReal x162=((new_r12)*(sj3));
IkReal x163=((IkReal(1.00000000000000))*(new_r02));
IkReal x164=((((cj3)*(new_r12)))+(((IkReal(-1.00000000000000))*(sj3)*(x163))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x161;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x164;
evalcond[5]=x164;
evalcond[6]=((x162)+(((cj3)*(new_r02))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x162)))+(((IkReal(-1.00000000000000))*(cj3)*(x163))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x161;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((new_r11)*(sj3)))+(((cj3)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x165=IKcos(j5);
IkReal x166=((IkReal(1.00000000000000))*(sj3));
IkReal x167=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x166)))+(((IkReal(-1.00000000000000))*(x167)))+(((cj3)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x165)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x166))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x167)))+(((new_r11)*(sj3)))+(((cj3)*(new_r01))));
evalcond[3]=((((new_r10)*(sj3)))+(x165)+(((cj3)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj3)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x168=IKsin(j5);
IkReal x169=IKcos(j5);
IkReal x170=((IkReal(1.00000000000000))*(sj3));
IkReal x171=((new_r11)*(sj3));
IkReal x172=((new_r10)*(sj3));
IkReal x173=((cj3)*(cj4));
IkReal x174=((IkReal(1.00000000000000))*(sj4));
IkReal x175=((IkReal(1.00000000000000))*(x169));
IkReal x176=((IkReal(1.00000000000000))*(x168));
evalcond[0]=((((sj4)*(x169)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x168)*(x174)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x176)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x170))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x175)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x170))));
evalcond[4]=((((cj4)*(x168)))+(x171)+(((cj3)*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x175)))+(x172)+(((cj3)*(new_r00))));
evalcond[6]=((((new_r01)*(x173)))+(((IkReal(-1.00000000000000))*(new_r21)*(x174)))+(((cj4)*(x171)))+(x168));
evalcond[7]=((((new_r00)*(x173)))+(((cj4)*(x172)))+(((IkReal(-1.00000000000000))*(x175)))+(((IkReal(-1.00000000000000))*(new_r20)*(x174))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((new_r21)*(((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj3)))+(((cj3)*(new_r11)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x177=IKsin(j5);
IkReal x178=IKcos(j5);
IkReal x179=((IkReal(1.00000000000000))*(sj3));
IkReal x180=((new_r11)*(sj3));
IkReal x181=((new_r10)*(sj3));
IkReal x182=((cj3)*(cj4));
IkReal x183=((IkReal(1.00000000000000))*(sj4));
IkReal x184=((IkReal(1.00000000000000))*(x178));
IkReal x185=((IkReal(1.00000000000000))*(x177));
evalcond[0]=((((sj4)*(x178)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x177)*(x183)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x185)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x179))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x184)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x179))));
evalcond[4]=((((cj4)*(x177)))+(x180)+(((cj3)*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x184)))+(x181)+(((cj3)*(new_r00))));
evalcond[6]=((((new_r01)*(x182)))+(((IkReal(-1.00000000000000))*(new_r21)*(x183)))+(x177)+(((cj4)*(x180))));
evalcond[7]=((((new_r00)*(x182)))+(((IkReal(-1.00000000000000))*(x184)))+(((IkReal(-1.00000000000000))*(new_r20)*(x183)))+(((cj4)*(x181))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst13)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst13)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst13)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst13)*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x186=IKsin(j5);
IkReal x187=IKcos(j5);
IkReal x188=((IkReal(1.00000000000000))*(sj3));
IkReal x189=((new_r11)*(sj3));
IkReal x190=((new_r10)*(sj3));
IkReal x191=((cj3)*(cj4));
IkReal x192=((IkReal(1.00000000000000))*(sj4));
IkReal x193=((IkReal(1.00000000000000))*(x187));
IkReal x194=((IkReal(1.00000000000000))*(x186));
evalcond[0]=((((sj4)*(x187)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x186)*(x192)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x194)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x188))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x193)))+(((IkReal(-1.00000000000000))*(new_r01)*(x188)))+(((cj3)*(new_r11))));
evalcond[4]=((x189)+(((cj3)*(new_r01)))+(((cj4)*(x186))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x193)))+(x190)+(((cj3)*(new_r00))));
evalcond[6]=((((new_r01)*(x191)))+(((IkReal(-1.00000000000000))*(new_r21)*(x192)))+(x186)+(((cj4)*(x189))));
evalcond[7]=((((cj4)*(x190)))+(((new_r00)*(x191)))+(((IkReal(-1.00000000000000))*(x193)))+(((IkReal(-1.00000000000000))*(new_r20)*(x192))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((gconst12)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst12)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst12)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst12)*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((sj4)*(IKcos(j5))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj4)*(IKsin(j5))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x195=((cj4)*(gconst15)*(sj5));
if( IKabs(((new_r12)*(x195))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x195))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r12)*(x195)), ((new_r02)*(x195)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x196=IKsin(j3);
IkReal x197=IKcos(j3);
IkReal x198=((IkReal(1.00000000000000))*(cj5));
IkReal x199=((IkReal(1.00000000000000))*(cj4));
IkReal x200=((IkReal(1.00000000000000))*(sj4));
IkReal x201=((cj4)*(x197));
IkReal x202=((cj4)*(x196));
IkReal x203=((new_r00)*(x197));
IkReal x204=((new_r11)*(x196));
IkReal x205=((new_r02)*(x197));
IkReal x206=((new_r01)*(x197));
IkReal x207=((new_r12)*(x196));
IkReal x208=((IkReal(1.00000000000000))*(x196));
IkReal x209=((new_r10)*(x196));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x208)))+(((new_r12)*(x197))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x200)))+(x207)+(x205));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x208)))+(((new_r10)*(x197)))+(((IkReal(-1.00000000000000))*(sj5))));
evalcond[3]=((((new_r11)*(x197)))+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r01)*(x208))));
evalcond[4]=((((cj4)*(sj5)))+(x206)+(x204));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x198)))+(x203)+(x209));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x200)))+(((new_r02)*(x201)))+(((new_r12)*(x202))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x200)*(x203)))+(((IkReal(-1.00000000000000))*(x200)*(x209)))+(((IkReal(-1.00000000000000))*(new_r20)*(x199))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x200)*(x206)))+(((IkReal(-1.00000000000000))*(x200)*(x204)))+(((IkReal(-1.00000000000000))*(new_r21)*(x199))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x200)))+(sj5)+(((new_r11)*(x202)))+(((new_r01)*(x201))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x200)*(x205)))+(((IkReal(-1.00000000000000))*(x200)*(x207)))+(((IkReal(-1.00000000000000))*(new_r22)*(x199))));
evalcond[11]=((((new_r10)*(x202)))+(((new_r00)*(x201)))+(((IkReal(-1.00000000000000))*(new_r20)*(x200)))+(((IkReal(-1.00000000000000))*(x198))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x210=((gconst14)*(sj4));
if( IKabs(((new_r12)*(x210))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x210))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((new_r12)*(x210)), ((new_r02)*(x210)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x211=IKsin(j3);
IkReal x212=IKcos(j3);
IkReal x213=((IkReal(1.00000000000000))*(cj5));
IkReal x214=((IkReal(1.00000000000000))*(cj4));
IkReal x215=((IkReal(1.00000000000000))*(sj4));
IkReal x216=((cj4)*(x212));
IkReal x217=((cj4)*(x211));
IkReal x218=((new_r00)*(x212));
IkReal x219=((new_r11)*(x211));
IkReal x220=((new_r02)*(x212));
IkReal x221=((new_r01)*(x212));
IkReal x222=((new_r12)*(x211));
IkReal x223=((IkReal(1.00000000000000))*(x211));
IkReal x224=((new_r10)*(x211));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x223)))+(((new_r12)*(x212))));
evalcond[1]=((x220)+(x222)+(((IkReal(-1.00000000000000))*(x215))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)))+(((new_r10)*(x212)))+(((IkReal(-1.00000000000000))*(new_r00)*(x223))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x223)))+(((IkReal(-1.00000000000000))*(x213)))+(((new_r11)*(x212))));
evalcond[4]=((((cj4)*(sj5)))+(x219)+(x221));
evalcond[5]=((x218)+(x224)+(((IkReal(-1.00000000000000))*(cj4)*(x213))));
evalcond[6]=((((new_r02)*(x216)))+(((IkReal(-1.00000000000000))*(new_r22)*(x215)))+(((new_r12)*(x217))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x215)*(x224)))+(((IkReal(-1.00000000000000))*(new_r20)*(x214)))+(((IkReal(-1.00000000000000))*(x215)*(x218))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x215)*(x221)))+(((IkReal(-1.00000000000000))*(new_r21)*(x214)))+(((IkReal(-1.00000000000000))*(x215)*(x219))));
evalcond[9]=((sj5)+(((IkReal(-1.00000000000000))*(new_r21)*(x215)))+(((new_r01)*(x216)))+(((new_r11)*(x217))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x215)*(x220)))+(((IkReal(-1.00000000000000))*(x215)*(x222)))+(((IkReal(-1.00000000000000))*(new_r22)*(x214))));
evalcond[11]=((((new_r00)*(x216)))+(((IkReal(-1.00000000000000))*(new_r20)*(x215)))+(((IkReal(-1.00000000000000))*(x213)))+(((new_r10)*(x217))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "1212e32be9160d1dd10dda70c49c46d3"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
