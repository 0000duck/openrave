#define IKFAST_NAMESPACE ik_puma
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 65 generated on 2013-07-18 15:08:33.597750
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==65);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((IkReal(0.0203000000000000))*(x3));
x13=((IkReal(1.00000000000000))*(x11));
x14=((IkReal(0.433100000000000))*(x0));
x15=((IkReal(0.175000000000000))*(x2));
x16=((IkReal(1.00000000000000))*(x10));
x17=((IkReal(1.00000000000000))*(x7));
x18=((IkReal(0.175000000000000))*(x0));
x19=((IkReal(0.175000000000000))*(x7));
x20=((IkReal(1.00000000000000))*(x3));
x21=((IkReal(0.175000000000000))*(x6));
x22=((IkReal(1.00000000000000))*(x2));
x23=((IkReal(1.00000000000000))*(x0));
x24=((x1)*(x7));
x25=((x3)*(x4));
x26=((x0)*(x1));
x27=((x10)*(x6));
x28=((x2)*(x4));
x29=((x1)*(x3));
x30=((x1)*(x2));
x31=((x1)*(x20));
x32=((x0)*(x22)*(x4));
x33=((x17)*(x28));
x34=((((IkReal(-1.00000000000000))*(x31)))+(x28));
x35=((((x1)*(x22)))+(((x20)*(x4))));
x36=((IkReal(-1.00000000000000))*(x35));
x37=((((IkReal(-1.00000000000000))*(x32)))+(((x26)*(x3))));
x38=((((IkReal(-1.00000000000000))*(x33)))+(((x24)*(x3))));
x39=((x36)*(x6));
x40=((x35)*(x5));
x41=((((IkReal(-1.00000000000000))*(x0)*(x20)*(x4)))+(((IkReal(-1.00000000000000))*(x22)*(x26))));
x42=((((x22)*(x26)))+(((x0)*(x20)*(x4))));
x43=((x17)*(((((IkReal(-1.00000000000000))*(x30)))+(((IkReal(-1.00000000000000))*(x25))))));
x44=((x17)*(((x30)+(x25))));
x45=((x37)*(x6));
x46=((x38)*(x6));
x47=((x10)*(x41));
x48=((x10)*(x43));
x49=((((IkReal(-1.00000000000000))*(x17)*(x5)))+(x45));
x50=((((x0)*(x5)))+(x46));
x51=((((x5)*(((x32)+(((IkReal(-1.00000000000000))*(x20)*(x26)))))))+(((IkReal(-1.00000000000000))*(x17)*(x6))));
x52=((((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x29)))+(x33)))))+(((x0)*(x6))));
x53=((x11)*(x49));
eerot[0]=((((x8)*(((x47)+(x53)))))+(((x51)*(x9))));
eerot[1]=((((x51)*(x8)))+(((x9)*(((((IkReal(-1.00000000000000))*(x16)*(x41)))+(((IkReal(-1.00000000000000))*(x13)*(x49))))))));
eerot[2]=((((x10)*(x49)))+(((x11)*(x42))));
eetrans[0]=((((IkReal(0.431800000000000))*(x26)))+(((x11)*(((((x18)*(x25)))+(((x15)*(x26)))))))+(((IkReal(-1.00000000000000))*(x12)*(x26)))+(((x14)*(x25)))+(((IkReal(0.0203000000000000))*(x0)*(x28)))+(((x14)*(x30)))+(((IkReal(-0.150100000000000))*(x7)))+(((x10)*(((((IkReal(-1.00000000000000))*(x19)*(x5)))+(((x21)*(x37))))))));
eerot[3]=((((x8)*(((((x11)*(x50)))+(x48)))))+(((x52)*(x9))));
eerot[4]=((((x9)*(((((IkReal(-1.00000000000000))*(x16)*(x43)))+(((IkReal(-1.00000000000000))*(x13)*(x50)))))))+(((x52)*(x8))));
eerot[5]=((((x11)*(x44)))+(((x10)*(x50))));
eetrans[1]=((((IkReal(0.150100000000000))*(x0)))+(((IkReal(0.431800000000000))*(x24)))+(((IkReal(0.433100000000000))*(x25)*(x7)))+(((IkReal(-1.00000000000000))*(x12)*(x24)))+(((x10)*(((((x18)*(x5)))+(((x21)*(x38)))))))+(((x11)*(((((x19)*(x25)))+(((x15)*(x24)))))))+(((IkReal(0.433100000000000))*(x2)*(x24)))+(((IkReal(0.0203000000000000))*(x28)*(x7))));
eerot[6]=((((x8)*(((((x10)*(x34)))+(((x11)*(x39)))))))+(((x40)*(x9))));
eerot[7]=((((x9)*(((((IkReal(-1.00000000000000))*(x16)*(x34)))+(((IkReal(-1.00000000000000))*(x13)*(x39)))))))+(((x40)*(x8))));
eerot[8]=((((x27)*(x36)))+(((x11)*(((x31)+(((IkReal(-1.00000000000000))*(x22)*(x4))))))));
IkReal x54=((IkReal(1.00000000000000))*(x15));
eetrans[2]=((IkReal(1.37100000000000))+(((IkReal(-0.431800000000000))*(x4)))+(((IkReal(0.433100000000000))*(x29)))+(((x27)*(((((IkReal(-1.00000000000000))*(x1)*(x54)))+(((IkReal(-0.175000000000000))*(x25)))))))+(((IkReal(0.0203000000000000))*(x30)))+(((x11)*(((((IkReal(-1.00000000000000))*(x4)*(x54)))+(((IkReal(0.175000000000000))*(x29)))))))+(((x12)*(x4)))+(((IkReal(-0.433100000000000))*(x28))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((px)+(((IkReal(-0.175000000000000))*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((py)+(((IkReal(-0.175000000000000))*(r12))));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-1.37100000000000))+(((IkReal(-0.175000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
CheckValue<IkReal> x55 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x55.valid ) {
    continue;
}
CheckValue<IkReal> x56 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x56.valid ) {
    continue;
}
CheckValue<IkReal> x57 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x57.valid ) {
    continue;
}
pp=((x55.value)+(x56.value)+(x57.value));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((IkReal(-1.06017897616850))+(((IkReal(2.67068488900329))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.06017897616850))+(((IkReal(2.67068488900329))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x58=IKasin(((IkReal(-1.06017897616850))+(((IkReal(2.67068488900329))*(pp)))));
j2array[0]=((IkReal(0.0468371131132389))+(((IkReal(1.00000000000000))*(x58))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.18842976670303))+(((IkReal(-1.00000000000000))*(x58))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
CheckValue<IkReal> x59 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x59.valid ) {
    continue;
}
CheckValue<IkReal> x60 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x60.valid ) {
    continue;
}
dummyeval[0]=((x59.value)+(x60.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
CheckValue<IkReal> x61 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x61.valid ) {
    continue;
}
CheckValue<IkReal> x62 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x62.valid ) {
    continue;
}
dummyeval[0]=((x61.value)+(x62.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
CheckValue<IkReal> x63 = IKPowWithIntegerCheck(cj2,2.00000000000000);
if( !x63.valid ) {
    continue;
}
CheckValue<IkReal> x64 = IKPowWithIntegerCheck(sj2,2.00000000000000);
if( !x64.valid ) {
    continue;
}
dummyeval[0]=((IkReal(10.6354679802956))+(((IkReal(10.7231100422792))*(x63.value)))+(((IkReal(-1.00000000000000))*(cj2)))+(((IkReal(21.3349753694581))*(sj2)))+(((IkReal(10.7231100422792))*(x64.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x65=((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-0.0203000000000000))*(sj2))));
IkReal x66=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
CheckValue<IkReal> x69 = IKatan2WithCheck(x65,x66,IKFAST_ATAN2_MAGTHRESH);
if( !x69.valid ) {
    continue;
}
IkReal x67=((IkReal(1.00000000000000))*(x69.value));
CheckValue<IkReal> x71 = IKPowWithIntegerCheck(x66,2.00000000000000);
if( !x71.valid ) {
    continue;
}
CheckValue<IkReal> x72 = IKPowWithIntegerCheck(x65,2.00000000000000);
if( !x72.valid ) {
    continue;
}
if( (((x71.value)+(x72.value))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x70 = IKPowWithIntegerCheck(IKabs(IKsqrt(((x71.value)+(x72.value)))),-1.00000000000000);
if( !x70.valid ) {
    continue;
}
if( (((pz)*(x70.value))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(x70.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x68=IKasin(((pz)*(x70.value)));
j1array[0]=((((IkReal(-1.00000000000000))*(x67)))+(((IkReal(-1.00000000000000))*(x68))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(x68)+(((IkReal(-1.00000000000000))*(x67))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x73=((IkReal(21590000.0000000))*(cj1));
CheckValue<IkReal> x74 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x74.valid ) {
    continue;
}
CheckValue<IkReal> x75 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x75.valid ) {
    continue;
}
gconst1=IKsign(((((x73)*(x74.value)))+(((x73)*(x75.value)))));
CheckValue<IkReal> x76 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x76.valid ) {
    continue;
}
CheckValue<IkReal> x77 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x77.valid ) {
    continue;
}
dummyeval[0]=((((cj1)*(x76.value)))+(((cj1)*(x77.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x78=((IkReal(10000.0000000000))*(sj1));
CheckValue<IkReal> x79 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x79.valid ) {
    continue;
}
CheckValue<IkReal> x80 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x80.valid ) {
    continue;
}
gconst0=IKsign(((((x78)*(x79.value)))+(((x78)*(x80.value)))));
CheckValue<IkReal> x81 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x81.valid ) {
    continue;
}
CheckValue<IkReal> x82 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x82.valid ) {
    continue;
}
dummyeval[0]=((((sj1)*(x81.value)))+(((sj1)*(x82.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x83=((((IkReal(-0.433100000000000))*(cj2)))+(pz)+(((IkReal(-0.0203000000000000))*(sj2))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j1))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=x83;
evalcond[3]=x83;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst2;
CheckValue<IkReal> x84 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x84.valid ) {
    continue;
}
CheckValue<IkReal> x85 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x85.valid ) {
    continue;
}
gconst2=IKsign(((((IkReal(-21590000.0000000))*(x84.value)))+(((IkReal(-21590000.0000000))*(x85.value)))));
CheckValue<IkReal> x86 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x86.valid ) {
    continue;
}
CheckValue<IkReal> x87 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x87.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x86.value)))+(((IkReal(-1.00000000000000))*(x87.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
CheckValue<IkReal> x88 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x88.valid ) {
    continue;
}
CheckValue<IkReal> x89 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x89.valid ) {
    continue;
}
gconst3=IKsign(((((IkReal(10000.0000000000))*(x88.value)))+(((IkReal(10000.0000000000))*(x89.value)))));
CheckValue<IkReal> x90 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x90.valid ) {
    continue;
}
CheckValue<IkReal> x91 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x91.valid ) {
    continue;
}
dummyeval[0]=((x90.value)+(x91.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x92=((IkReal(203.000000000000))*(cj2));
IkReal x93=((IkReal(4331.00000000000))*(sj2));
CheckValue<IkReal> x94 = IKatan2WithCheck(((gconst3)*(((((py)*(x93)))+(((IkReal(4318.00000000000))*(py)))+(((IkReal(-1501.00000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x92)))))),((gconst3)*(((((IkReal(1501.00000000000))*(py)))+(((IkReal(4318.00000000000))*(px)))+(((px)*(x93)))+(((IkReal(-1.00000000000000))*(px)*(x92)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x94.valid ) {
    continue;
}
j0array[0]=x94.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x95=IKsin(j0);
IkReal x96=IKcos(j0);
IkReal x97=((px)*(x96));
IkReal x98=((py)*(x95));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(py)*(x96)))+(((px)*(x95))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(0.863600000000000))*(x97)))+(((IkReal(0.863600000000000))*(x98)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x98)))+(((IkReal(-1.00000000000000))*(x97))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x729=((IkReal(25000000.0000000))*(pp));
CheckValue<IkReal> x730 = IKatan2WithCheck(((gconst2)*(((((IkReal(601661.750000000))*(py)))+(((IkReal(3240659.00000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x729)))))),((gconst2)*(((((IkReal(-3240659.00000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x729)))+(((IkReal(601661.750000000))*(px)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x730.valid ) {
    continue;
}
j0array[0]=x730.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x731=IKsin(j0);
IkReal x732=IKcos(j0);
IkReal x733=((px)*(x732));
IkReal x734=((py)*(x731));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x731)))+(((IkReal(-1.00000000000000))*(py)*(x732))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.863600000000000))*(x733)))+(((IkReal(0.863600000000000))*(x734))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(x733)))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x735=((IkReal(0.0203000000000000))*(sj2));
IkReal x736=((IkReal(0.433100000000000))*(cj2));
IkReal x737=((x736)+(x735));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j1))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x737))));
evalcond[3]=((pz)+(x737));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst4;
CheckValue<IkReal> x738 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x738.valid ) {
    continue;
}
CheckValue<IkReal> x739 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x739.valid ) {
    continue;
}
gconst4=IKsign(((((IkReal(21590000.0000000))*(x738.value)))+(((IkReal(21590000.0000000))*(x739.value)))));
CheckValue<IkReal> x740 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x740.valid ) {
    continue;
}
CheckValue<IkReal> x741 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x741.valid ) {
    continue;
}
dummyeval[0]=((x740.value)+(x741.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
CheckValue<IkReal> x742 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x742.valid ) {
    continue;
}
CheckValue<IkReal> x743 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x743.valid ) {
    continue;
}
gconst5=IKsign(((((IkReal(-10000.0000000000))*(x742.value)))+(((IkReal(-10000.0000000000))*(x743.value)))));
CheckValue<IkReal> x744 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x744.valid ) {
    continue;
}
CheckValue<IkReal> x745 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x745.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x744.value)))+(((IkReal(-1.00000000000000))*(x745.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x746=((IkReal(203.000000000000))*(cj2));
IkReal x747=((IkReal(4331.00000000000))*(sj2));
CheckValue<IkReal> x748 = IKatan2WithCheck(((gconst5)*(((((py)*(x747)))+(((IkReal(1501.00000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x746)))+(((IkReal(4318.00000000000))*(py)))))),((gconst5)*(((((IkReal(-1.00000000000000))*(px)*(x746)))+(((px)*(x747)))+(((IkReal(4318.00000000000))*(px)))+(((IkReal(-1501.00000000000))*(py)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x748.valid ) {
    continue;
}
j0array[0]=x748.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x749=IKsin(j0);
IkReal x750=IKcos(j0);
IkReal x751=((px)*(x750));
IkReal x752=((py)*(x749));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x749)))+(((IkReal(-1.00000000000000))*(py)*(x750))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x751)))+(((IkReal(-0.863600000000000))*(x752)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(x751)+(x752));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x753=((IkReal(25000000.0000000))*(pp));
CheckValue<IkReal> x754 = IKatan2WithCheck(((gconst4)*(((((IkReal(-3240659.00000000))*(px)))+(((IkReal(601661.750000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x753)))))),((gconst4)*(((((IkReal(-1.00000000000000))*(px)*(x753)))+(((IkReal(601661.750000000))*(px)))+(((IkReal(3240659.00000000))*(py)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x754.valid ) {
    continue;
}
j0array[0]=x754.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x755=IKsin(j0);
IkReal x756=IKcos(j0);
IkReal x757=((px)*(x756));
IkReal x758=((py)*(x755));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x755)))+(((IkReal(-1.00000000000000))*(py)*(x756))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x757)))+(((IkReal(-0.863600000000000))*(x758)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(x757)+(x758));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x759=((IkReal(1.00000000000000))*(pp));
IkReal x760=((IkReal(0.431800000000000))+(pz)+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j1))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(0.374025160000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x759))));
evalcond[2]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x759))));
evalcond[3]=x760;
evalcond[4]=x760;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst6;
CheckValue<IkReal> x761 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x761.valid ) {
    continue;
}
CheckValue<IkReal> x762 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x762.valid ) {
    continue;
}
gconst6=IKsign(((((IkReal(-10000.0000000000))*(x761.value)))+(((IkReal(-10000.0000000000))*(x762.value)))));
CheckValue<IkReal> x763 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x763.valid ) {
    continue;
}
CheckValue<IkReal> x764 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x764.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x763.value)))+(((IkReal(-1.00000000000000))*(x764.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x765=((IkReal(203.000000000000))*(sj2));
IkReal x766=((IkReal(4331.00000000000))*(cj2));
CheckValue<IkReal> x767 = IKatan2WithCheck(((gconst6)*(((((IkReal(-1.00000000000000))*(py)*(x765)))+(((IkReal(-1.00000000000000))*(py)*(x766)))+(((IkReal(1501.00000000000))*(px)))))),((gconst6)*(((((IkReal(-1.00000000000000))*(px)*(x766)))+(((IkReal(-1.00000000000000))*(px)*(x765)))+(((IkReal(-1501.00000000000))*(py)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x767.valid ) {
    continue;
}
j0array[0]=x767.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x768=IKsin(j0);
IkReal x769=IKcos(j0);
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x768)))+(((IkReal(-1.00000000000000))*(py)*(x769))));
evalcond[1]=((((px)*(x769)))+(((IkReal(-0.433100000000000))*(cj2)))+(((py)*(x768)))+(((IkReal(-0.0203000000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x770=((IkReal(1.00000000000000))*(pp));
IkReal x771=((IkReal(0.0203000000000000))*(cj2));
IkReal x772=((IkReal(0.433100000000000))*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j1))))), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(0.374025160000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x770))));
evalcond[2]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(x770)))+(((IkReal(0.863600000000000))*(pz))));
evalcond[3]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x772)+(((IkReal(-1.00000000000000))*(x771))));
evalcond[4]=((IkReal(-0.431800000000000))+(pz)+(x771)+(((IkReal(-1.00000000000000))*(x772))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst7;
CheckValue<IkReal> x773 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x773.valid ) {
    continue;
}
CheckValue<IkReal> x774 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x774.valid ) {
    continue;
}
gconst7=IKsign(((((IkReal(10000.0000000000))*(x773.value)))+(((IkReal(10000.0000000000))*(x774.value)))));
CheckValue<IkReal> x775 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x775.valid ) {
    continue;
}
CheckValue<IkReal> x776 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x776.valid ) {
    continue;
}
dummyeval[0]=((x775.value)+(x776.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x777=((IkReal(203.000000000000))*(sj2));
IkReal x778=((IkReal(4331.00000000000))*(cj2));
CheckValue<IkReal> x779 = IKatan2WithCheck(((gconst7)*(((((IkReal(-1.00000000000000))*(py)*(x778)))+(((IkReal(-1.00000000000000))*(py)*(x777)))+(((IkReal(-1501.00000000000))*(px)))))),((gconst7)*(((((IkReal(1501.00000000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x778)))+(((IkReal(-1.00000000000000))*(px)*(x777)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x779.valid ) {
    continue;
}
j0array[0]=x779.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x780=IKcos(j0);
IkReal x781=IKsin(j0);
IkReal x782=((IkReal(1.00000000000000))*(x780));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(x781)))+(((IkReal(-1.00000000000000))*(py)*(x782))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x782)))+(((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(x781)))+(((IkReal(-0.0203000000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x783=((((IkReal(-0.433100000000000))*(cj2)))+(pz)+(((IkReal(-0.0203000000000000))*(sj2))));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=x783;
evalcond[3]=x783;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x785 = IKPowWithIntegerCheck(py,-1.00000000000000);
if( !x785.valid ) {
    continue;
}
IkReal x784=x785.value;
if( IKabs(((x784)*(((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.150100000000000))*(x784))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x784)*(((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))))))+IKsqr(((IkReal(0.150100000000000))*(x784)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x784)*(((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))))), ((IkReal(0.150100000000000))*(x784)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x786=IKsin(j0);
IkReal x787=((IkReal(1.00000000000000))*(py));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(x787)*(IKcos(j0)))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(0.863600000000000))*(py)*(x786)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x786)*(x787))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x789 = IKPowWithIntegerCheck(py,-1.00000000000000);
if( !x789.valid ) {
    continue;
}
IkReal x788=x789.value;
if( IKabs(((IkReal(0.000463177396943029))*(x788)*(((IkReal(-60.1661750000000))+(((IkReal(2500.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.150100000000000))*(x788))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.000463177396943029))*(x788)*(((IkReal(-60.1661750000000))+(((IkReal(2500.00000000000))*(pp)))))))+IKsqr(((IkReal(0.150100000000000))*(x788)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(0.000463177396943029))*(x788)*(((IkReal(-60.1661750000000))+(((IkReal(2500.00000000000))*(pp)))))), ((IkReal(0.150100000000000))*(x788)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x790=IKsin(j0);
IkReal x791=((IkReal(1.00000000000000))*(py));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(x791)*(IKcos(j0)))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(0.863600000000000))*(py)*(x790)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x790)*(x791)))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x792=((IkReal(0.0203000000000000))*(sj2));
IkReal x793=((IkReal(0.433100000000000))*(cj2));
IkReal x794=((x793)+(x792));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x794)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((pz)+(x794));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x796 = IKPowWithIntegerCheck(py,-1.00000000000000);
if( !x796.valid ) {
    continue;
}
IkReal x795=x796.value;
if( IKabs(((x795)*(((IkReal(-0.431800000000000))+(((IkReal(-0.433100000000000))*(sj2)))+(((IkReal(0.0203000000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.150100000000000))*(x795))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x795)*(((IkReal(-0.431800000000000))+(((IkReal(-0.433100000000000))*(sj2)))+(((IkReal(0.0203000000000000))*(cj2)))))))+IKsqr(((IkReal(0.150100000000000))*(x795)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x795)*(((IkReal(-0.431800000000000))+(((IkReal(-0.433100000000000))*(sj2)))+(((IkReal(0.0203000000000000))*(cj2)))))), ((IkReal(0.150100000000000))*(x795)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x797=IKsin(j0);
IkReal x798=((py)*(x797));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.863600000000000))*(x798))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(x798));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x800 = IKPowWithIntegerCheck(py,-1.00000000000000);
if( !x800.valid ) {
    continue;
}
IkReal x799=x800.value;
if( IKabs(((IkReal(0.000463177396943029))*(x799)*(((IkReal(60.1661750000000))+(((IkReal(-2500.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.150100000000000))*(x799))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.000463177396943029))*(x799)*(((IkReal(60.1661750000000))+(((IkReal(-2500.00000000000))*(pp)))))))+IKsqr(((IkReal(0.150100000000000))*(x799)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(0.000463177396943029))*(x799)*(((IkReal(60.1661750000000))+(((IkReal(-2500.00000000000))*(pp)))))), ((IkReal(0.150100000000000))*(x799)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x801=IKsin(j0);
IkReal x802=((py)*(x801));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x802)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(x802));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x803=((((IkReal(-0.433100000000000))*(cj2)))+(pz)+(((IkReal(-0.0203000000000000))*(sj2))));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=x803;
evalcond[3]=x803;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x805 = IKPowWithIntegerCheck(px,-1.00000000000000);
if( !x805.valid ) {
    continue;
}
IkReal x804=x805.value;
if( IKabs(((IkReal(-0.150100000000000))*(x804))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x804)*(((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.150100000000000))*(x804)))+IKsqr(((x804)*(((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-0.150100000000000))*(x804)), ((x804)*(((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x806=IKcos(j0);
IkReal x807=((px)*(x806));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(IKsin(j0)))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.863600000000000))*(x807))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x807)))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x809 = IKPowWithIntegerCheck(px,-1.00000000000000);
if( !x809.valid ) {
    continue;
}
IkReal x808=x809.value;
if( IKabs(((IkReal(-0.150100000000000))*(x808))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.000463177396943029))*(x808)*(((IkReal(-60.1661750000000))+(((IkReal(2500.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.150100000000000))*(x808)))+IKsqr(((IkReal(0.000463177396943029))*(x808)*(((IkReal(-60.1661750000000))+(((IkReal(2500.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-0.150100000000000))*(x808)), ((IkReal(0.000463177396943029))*(x808)*(((IkReal(-60.1661750000000))+(((IkReal(2500.00000000000))*(pp)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x810=IKcos(j0);
IkReal x811=((px)*(x810));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(IKsin(j0)))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(0.863600000000000))*(x811)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x811)))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x812=((IkReal(0.0203000000000000))*(sj2));
IkReal x813=((IkReal(0.433100000000000))*(cj2));
IkReal x814=((x812)+(x813));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x814)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((pz)+(x814));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x816 = IKPowWithIntegerCheck(px,-1.00000000000000);
if( !x816.valid ) {
    continue;
}
IkReal x815=x816.value;
if( IKabs(((IkReal(-0.150100000000000))*(x815))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x815)*(((IkReal(-0.431800000000000))+(((IkReal(-0.433100000000000))*(sj2)))+(((IkReal(0.0203000000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.150100000000000))*(x815)))+IKsqr(((x815)*(((IkReal(-0.431800000000000))+(((IkReal(-0.433100000000000))*(sj2)))+(((IkReal(0.0203000000000000))*(cj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-0.150100000000000))*(x815)), ((x815)*(((IkReal(-0.431800000000000))+(((IkReal(-0.433100000000000))*(sj2)))+(((IkReal(0.0203000000000000))*(cj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x817=IKcos(j0);
IkReal x818=((px)*(x817));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(IKsin(j0)))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x818)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(x818));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x820 = IKPowWithIntegerCheck(px,-1.00000000000000);
if( !x820.valid ) {
    continue;
}
IkReal x819=x820.value;
if( IKabs(((IkReal(-0.150100000000000))*(x819))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.000463177396943029))*(x819)*(((IkReal(60.1661750000000))+(((IkReal(-2500.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.150100000000000))*(x819)))+IKsqr(((IkReal(0.000463177396943029))*(x819)*(((IkReal(60.1661750000000))+(((IkReal(-2500.00000000000))*(pp)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-0.150100000000000))*(x819)), ((IkReal(0.000463177396943029))*(x819)*(((IkReal(60.1661750000000))+(((IkReal(-2500.00000000000))*(pp)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x821=IKcos(j0);
IkReal x822=((px)*(x821));
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(IKsin(j0)))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.863600000000000))*(x822))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2)))+(x822));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x823=((IkReal(1.00000000000000))*(pp));
IkReal x824=((IkReal(0.431800000000000))+(pz)+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x823)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(x823)))+(((IkReal(-0.863600000000000))*(pz))));
evalcond[3]=x824;
evalcond[4]=x824;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x826 = IKPowWithIntegerCheck(py,-1.00000000000000);
if( !x826.valid ) {
    continue;
}
IkReal x825=x826.value;
if( IKabs(((x825)*(((((IkReal(0.0203000000000000))*(sj2)))+(((IkReal(0.433100000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.150100000000000))*(x825))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x825)*(((((IkReal(0.0203000000000000))*(sj2)))+(((IkReal(0.433100000000000))*(cj2)))))))+IKsqr(((IkReal(0.150100000000000))*(x825)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x825)*(((((IkReal(0.0203000000000000))*(sj2)))+(((IkReal(0.433100000000000))*(cj2)))))), ((IkReal(0.150100000000000))*(x825)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(py)*(IKcos(j0)))));
evalcond[1]=((((IkReal(-0.433100000000000))*(cj2)))+(((py)*(IKsin(j0))))+(((IkReal(-0.0203000000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x827=((IkReal(1.00000000000000))*(pp));
IkReal x828=((IkReal(0.0203000000000000))*(cj2));
IkReal x829=((IkReal(0.433100000000000))*(sj2));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x827)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(x827)))+(((IkReal(0.863600000000000))*(pz))));
evalcond[3]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x828)))+(((IkReal(-1.00000000000000))*(pz)))+(x829));
evalcond[4]=((IkReal(-0.431800000000000))+(((IkReal(-1.00000000000000))*(x829)))+(pz)+(x828));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=py;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x831 = IKPowWithIntegerCheck(py,-1.00000000000000);
if( !x831.valid ) {
    continue;
}
IkReal x830=x831.value;
if( IKabs(((x830)*(((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-0.0203000000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.150100000000000))*(x830))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x830)*(((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-0.0203000000000000))*(sj2)))))))+IKsqr(((IkReal(0.150100000000000))*(x830)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x830)*(((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-0.0203000000000000))*(sj2)))))), ((IkReal(0.150100000000000))*(x830)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x832=((IkReal(1.00000000000000))*(py));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(x832)*(IKcos(j0)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x832)*(IKsin(j0))))+(((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-0.0203000000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x833=((IkReal(1.00000000000000))*(pp));
IkReal x834=((IkReal(0.431800000000000))+(pz)+(((IkReal(-0.0203000000000000))*(cj2)))+(((IkReal(0.433100000000000))*(sj2))));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x833)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x833))));
evalcond[3]=x834;
evalcond[4]=x834;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x836 = IKPowWithIntegerCheck(px,-1.00000000000000);
if( !x836.valid ) {
    continue;
}
IkReal x835=x836.value;
if( IKabs(((IkReal(-0.150100000000000))*(x835))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x835)*(((((IkReal(0.0203000000000000))*(sj2)))+(((IkReal(0.433100000000000))*(cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.150100000000000))*(x835)))+IKsqr(((x835)*(((((IkReal(0.0203000000000000))*(sj2)))+(((IkReal(0.433100000000000))*(cj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-0.150100000000000))*(x835)), ((x835)*(((((IkReal(0.0203000000000000))*(sj2)))+(((IkReal(0.433100000000000))*(cj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(IKsin(j0)))));
evalcond[1]=((((IkReal(-0.433100000000000))*(cj2)))+(((px)*(IKcos(j0))))+(((IkReal(-0.0203000000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x837=((IkReal(1.00000000000000))*(pp));
IkReal x838=((IkReal(0.0203000000000000))*(cj2));
IkReal x839=((IkReal(0.433100000000000))*(sj2));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.396968950000000))+(((IkReal(-0.0175310800000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x837)))+(((IkReal(0.374025160000000))*(sj2))));
evalcond[2]=((IkReal(0.0240664700000000))+(((IkReal(-1.00000000000000))*(x837)))+(((IkReal(0.863600000000000))*(pz))));
evalcond[3]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x838)))+(x839));
evalcond[4]=((IkReal(-0.431800000000000))+(pz)+(((IkReal(-1.00000000000000))*(x839)))+(x838));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
dummyeval[0]=px;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x841 = IKPowWithIntegerCheck(px,-1.00000000000000);
if( !x841.valid ) {
    continue;
}
IkReal x840=x841.value;
if( IKabs(((IkReal(-0.150100000000000))*(x840))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x840)*(((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-0.0203000000000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.150100000000000))*(x840)))+IKsqr(((x840)*(((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-0.0203000000000000))*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-0.150100000000000))*(x840)), ((x840)*(((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-0.0203000000000000))*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.150100000000000))+(((px)*(IKsin(j0)))));
evalcond[1]=((((IkReal(-0.433100000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(px)*(IKcos(j0))))+(((IkReal(-0.0203000000000000))*(sj2))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x842=((IkReal(203.000000000000))*(sj2));
IkReal x843=((IkReal(4331.00000000000))*(cj2));
IkReal x844=((IkReal(1501.00000000000))*(sj1));
IkReal x845=((IkReal(10000.0000000000))*(cj1)*(pz));
CheckValue<IkReal> x846 = IKatan2WithCheck(((gconst0)*(((((IkReal(-1.00000000000000))*(py)*(x845)))+(((IkReal(-1.00000000000000))*(px)*(x844)))+(((py)*(x842)))+(((py)*(x843)))))),((gconst0)*(((((IkReal(-1.00000000000000))*(px)*(x845)))+(((py)*(x844)))+(((px)*(x843)))+(((px)*(x842)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x846.valid ) {
    continue;
}
j0array[0]=x846.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x847=IKcos(j0);
IkReal x848=IKsin(j0);
IkReal x849=((IkReal(0.433100000000000))*(sj2));
IkReal x850=((IkReal(0.433100000000000))*(cj2));
IkReal x851=((pz)*(sj1));
IkReal x852=((IkReal(0.0203000000000000))*(cj2));
IkReal x853=((IkReal(0.863600000000000))*(cj1));
IkReal x854=((IkReal(1.00000000000000))*(cj1));
IkReal x855=((IkReal(0.0203000000000000))*(sj2));
IkReal x856=((px)*(x847));
IkReal x857=((py)*(x848));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(py)*(x847)))+(((px)*(x848))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x850)))+(((IkReal(-1.00000000000000))*(x855)))+(((sj1)*(x857)))+(((sj1)*(x856)))+(((cj1)*(pz))));
evalcond[2]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x851)))+(((IkReal(-1.00000000000000))*(pp)))+(((x853)*(x856)))+(((x853)*(x857))));
evalcond[3]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x852)))+(x851)+(x849)+(((IkReal(-1.00000000000000))*(x854)*(x856)))+(((IkReal(-1.00000000000000))*(x854)*(x857))));
evalcond[4]=((((cj1)*(x849)))+(((IkReal(0.431800000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x856)))+(((IkReal(-1.00000000000000))*(x857)))+(((sj1)*(x855)))+(((sj1)*(x850)))+(((IkReal(-1.00000000000000))*(cj1)*(x852))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x858=((IkReal(25000000.0000000))*(pp));
IkReal x859=((IkReal(3240659.00000000))*(cj1));
IkReal x860=((IkReal(21590000.0000000))*(pz)*(sj1));
CheckValue<IkReal> x861 = IKatan2WithCheck(((gconst1)*(((((IkReal(-601661.750000000))*(py)))+(((py)*(x860)))+(((py)*(x858)))+(((IkReal(-1.00000000000000))*(px)*(x859)))))),((gconst1)*(((((IkReal(-601661.750000000))*(px)))+(((px)*(x858)))+(((px)*(x860)))+(((py)*(x859)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x861.valid ) {
    continue;
}
j0array[0]=x861.value;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x862=IKcos(j0);
IkReal x863=IKsin(j0);
IkReal x864=((IkReal(0.433100000000000))*(sj2));
IkReal x865=((IkReal(0.433100000000000))*(cj2));
IkReal x866=((pz)*(sj1));
IkReal x867=((IkReal(0.0203000000000000))*(cj2));
IkReal x868=((IkReal(0.863600000000000))*(cj1));
IkReal x869=((IkReal(1.00000000000000))*(cj1));
IkReal x870=((IkReal(0.0203000000000000))*(sj2));
IkReal x871=((px)*(x862));
IkReal x872=((py)*(x863));
evalcond[0]=((IkReal(0.150100000000000))+(((IkReal(-1.00000000000000))*(py)*(x862)))+(((px)*(x863))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x865)))+(((cj1)*(pz)))+(((sj1)*(x872)))+(((sj1)*(x871)))+(((IkReal(-1.00000000000000))*(x870))));
evalcond[2]=((IkReal(0.0240664700000000))+(((x868)*(x871)))+(((x868)*(x872)))+(((IkReal(-0.863600000000000))*(x866)))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[3]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x867)))+(((IkReal(-1.00000000000000))*(x869)*(x871)))+(((IkReal(-1.00000000000000))*(x869)*(x872)))+(x866)+(x864));
evalcond[4]=((((IkReal(0.431800000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x871)))+(((IkReal(-1.00000000000000))*(x872)))+(((sj1)*(x865)))+(((cj1)*(x864)))+(((sj1)*(x870)))+(((IkReal(-1.00000000000000))*(cj1)*(x867))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x875 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(py)),px,IKFAST_ATAN2_MAGTHRESH);
if( !x875.valid ) {
    continue;
}
IkReal x873=((IkReal(1.00000000000000))*(x875.value));
CheckValue<IkReal> x877 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x877.valid ) {
    continue;
}
CheckValue<IkReal> x878 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x878.valid ) {
    continue;
}
if( (((x877.value)+(x878.value))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x876 = IKPowWithIntegerCheck(IKabs(IKsqrt(((x877.value)+(x878.value)))),-1.00000000000000);
if( !x876.valid ) {
    continue;
}
if( (((IkReal(0.150100000000000))*(x876.value))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.150100000000000))*(x876.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x874=IKasin(((IkReal(0.150100000000000))*(x876.value)));
j0array[0]=((((IkReal(-1.00000000000000))*(x874)))+(((IkReal(-1.00000000000000))*(x873))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x874)+(((IkReal(-1.00000000000000))*(x873))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst9;
IkReal x879=((cj0)*(px));
IkReal x880=((IkReal(0.433100000000000))*(cj2));
IkReal x881=((IkReal(0.0203000000000000))*(sj2));
IkReal x882=((py)*(sj0));
gconst9=IKsign(((((IkReal(-1.00000000000000))*(x879)*(x880)))+(((IkReal(-1.00000000000000))*(x879)*(x881)))+(((IkReal(-1.00000000000000))*(x881)*(x882)))+(((IkReal(0.0203000000000000))*(cj2)*(pz)))+(((IkReal(-0.433100000000000))*(pz)*(sj2)))+(((IkReal(-0.431800000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x880)*(x882)))));
IkReal x883=((IkReal(21.3349753694581))*(cj2));
IkReal x884=((py)*(sj0));
IkReal x885=((cj0)*(px));
IkReal x886=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x883)*(x884)))+(((IkReal(-1.00000000000000))*(x883)*(x885)))+(((cj2)*(pz)))+(((IkReal(-1.00000000000000))*(x885)*(x886)))+(((IkReal(-1.00000000000000))*(x884)*(x886)))+(((IkReal(-21.2709359605911))*(pz)))+(((IkReal(-21.3349753694581))*(pz)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
CheckValue<IkReal> x887 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x887.valid ) {
    continue;
}
CheckValue<IkReal> x888 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x888.valid ) {
    continue;
}
CheckValue<IkReal> x889 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x889.valid ) {
    continue;
}
CheckValue<IkReal> x890 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x890.valid ) {
    continue;
}
CheckValue<IkReal> x891 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x891.valid ) {
    continue;
}
gconst8=IKsign(((((IkReal(2159.00000000000))*(x887.value)))+(((IkReal(4318.00000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(2159.00000000000))*(x888.value)*(x889.value)))+(((IkReal(2159.00000000000))*(x890.value)*(x891.value)))));
CheckValue<IkReal> x892 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x892.valid ) {
    continue;
}
CheckValue<IkReal> x893 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x893.valid ) {
    continue;
}
CheckValue<IkReal> x894 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x894.valid ) {
    continue;
}
CheckValue<IkReal> x895 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x895.valid ) {
    continue;
}
CheckValue<IkReal> x896 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x896.valid ) {
    continue;
}
dummyeval[0]=((((x892.value)*(x893.value)))+(x894.value)+(((x895.value)*(x896.value)))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x897=((cj0)*(px));
IkReal x898=((IkReal(43.8277000000000))*(sj2));
IkReal x899=((IkReal(2500.00000000000))*(pp));
IkReal x900=((IkReal(935.062900000000))*(cj2));
IkReal x901=((py)*(sj0));
CheckValue<IkReal> x902 = IKatan2WithCheck(((gconst8)*(((((IkReal(60.1661750000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x899)))+(((x897)*(x900)))+(((x900)*(x901)))+(((x897)*(x898)))+(((x898)*(x901)))))),((gconst8)*(((((IkReal(-60.1661750000000))*(x901)))+(((pz)*(x898)))+(((IkReal(-60.1661750000000))*(x897)))+(((x897)*(x899)))+(((x899)*(x901)))+(((pz)*(x900)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x902.valid ) {
    continue;
}
j1array[0]=x902.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x903=IKsin(j1);
IkReal x904=IKcos(j1);
IkReal x905=((IkReal(0.433100000000000))*(sj2));
IkReal x906=((cj0)*(px));
IkReal x907=((IkReal(0.433100000000000))*(cj2));
IkReal x908=((py)*(sj0));
IkReal x909=((IkReal(0.0203000000000000))*(cj2));
IkReal x910=((IkReal(0.0203000000000000))*(sj2));
IkReal x911=((IkReal(1.00000000000000))*(x904));
IkReal x912=((IkReal(0.0203000000000000))*(x903));
IkReal x913=((pz)*(x903));
IkReal x914=((IkReal(0.863600000000000))*(x904));
evalcond[0]=((((x903)*(x906)))+(((x903)*(x908)))+(((IkReal(-1.00000000000000))*(x907)))+(((IkReal(-1.00000000000000))*(x910)))+(((pz)*(x904))));
evalcond[1]=((IkReal(0.0240664700000000))+(((IkReal(-0.863600000000000))*(x913)))+(((IkReal(-1.00000000000000))*(pp)))+(((x906)*(x914)))+(((x908)*(x914))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x906)*(x911)))+(((IkReal(-1.00000000000000))*(x908)*(x911)))+(((IkReal(-1.00000000000000))*(x909)))+(x913)+(x905));
evalcond[3]=((((IkReal(-1.00000000000000))*(x903)*(x909)))+(((x903)*(x905)))+(pz)+(((IkReal(0.431800000000000))*(x903)))+(((IkReal(-1.00000000000000))*(x904)*(x910)))+(((IkReal(-1.00000000000000))*(x904)*(x907))));
evalcond[4]=((((x903)*(x907)))+(((x903)*(x910)))+(((IkReal(0.431800000000000))*(x904)))+(((IkReal(-1.00000000000000))*(x908)))+(((IkReal(-1.00000000000000))*(x906)))+(((IkReal(-1.00000000000000))*(x904)*(x909)))+(((x904)*(x905))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x919 = IKPowWithIntegerCheck(cj2,2.00000000000000);
if( !x919.valid ) {
    continue;
}
IkReal x915=x919.value;
CheckValue<IkReal> x920 = IKPowWithIntegerCheck(sj2,2.00000000000000);
if( !x920.valid ) {
    continue;
}
IkReal x916=x920.value;
IkReal x917=((cj2)*(sj2));
IkReal x918=((IkReal(1.00000000000000))*(pz));
CheckValue<IkReal> x922 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x922.valid ) {
    continue;
}
CheckValue<IkReal> x921 = IKatan2WithCheck(((gconst9)*(((((IkReal(-0.000412090000000000))*(x916)))+(((IkReal(-0.0175838600000000))*(x917)))+(x922.value)+(((IkReal(-0.187575610000000))*(x915)))))),((gconst9)*(((((IkReal(-0.00876554000000000))*(sj2)))+(((IkReal(-0.187012580000000))*(cj2)))+(((IkReal(0.00879193000000000))*(x915)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x918)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x918)))+(((IkReal(-0.187163520000000))*(x917)))+(((IkReal(-0.00879193000000000))*(x916)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x921.valid ) {
    continue;
}
j1array[0]=x921.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x923=IKsin(j1);
IkReal x924=IKcos(j1);
IkReal x925=((IkReal(0.433100000000000))*(sj2));
IkReal x926=((cj0)*(px));
IkReal x927=((IkReal(0.433100000000000))*(cj2));
IkReal x928=((py)*(sj0));
IkReal x929=((IkReal(0.0203000000000000))*(cj2));
IkReal x930=((IkReal(0.0203000000000000))*(sj2));
IkReal x931=((IkReal(1.00000000000000))*(x924));
IkReal x932=((IkReal(0.0203000000000000))*(x923));
IkReal x933=((pz)*(x923));
IkReal x934=((IkReal(0.863600000000000))*(x924));
evalcond[0]=((((IkReal(-1.00000000000000))*(x927)))+(((pz)*(x924)))+(((x923)*(x926)))+(((x923)*(x928)))+(((IkReal(-1.00000000000000))*(x930))));
evalcond[1]=((IkReal(0.0240664700000000))+(((x928)*(x934)))+(((IkReal(-0.863600000000000))*(x933)))+(((IkReal(-1.00000000000000))*(pp)))+(((x926)*(x934))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x929)))+(((IkReal(-1.00000000000000))*(x928)*(x931)))+(((IkReal(-1.00000000000000))*(x926)*(x931)))+(x933)+(x925));
evalcond[3]=((((IkReal(-1.00000000000000))*(x924)*(x930)))+(((IkReal(-1.00000000000000))*(x924)*(x927)))+(pz)+(((x923)*(x925)))+(((IkReal(0.431800000000000))*(x923)))+(((IkReal(-1.00000000000000))*(x923)*(x929))));
evalcond[4]=((((x924)*(x925)))+(((IkReal(-1.00000000000000))*(x924)*(x929)))+(((IkReal(-1.00000000000000))*(x926)))+(((IkReal(-1.00000000000000))*(x928)))+(((x923)*(x927)))+(((x923)*(x930)))+(((IkReal(0.431800000000000))*(x924))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x937 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(py)),px,IKFAST_ATAN2_MAGTHRESH);
if( !x937.valid ) {
    continue;
}
IkReal x935=((IkReal(1.00000000000000))*(x937.value));
CheckValue<IkReal> x939 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x939.valid ) {
    continue;
}
CheckValue<IkReal> x940 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x940.valid ) {
    continue;
}
if( (((x939.value)+(x940.value))) < (IkReal)-0.00001 )
    continue;
CheckValue<IkReal> x938 = IKPowWithIntegerCheck(IKabs(IKsqrt(((x939.value)+(x940.value)))),-1.00000000000000);
if( !x938.valid ) {
    continue;
}
if( (((IkReal(0.150100000000000))*(x938.value))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.150100000000000))*(x938.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x936=IKasin(((IkReal(0.150100000000000))*(x938.value)));
j0array[0]=((((IkReal(-1.00000000000000))*(x936)))+(((IkReal(-1.00000000000000))*(x935))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x936)+(((IkReal(-1.00000000000000))*(x935))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst9;
IkReal x941=((cj0)*(px));
IkReal x942=((IkReal(0.433100000000000))*(cj2));
IkReal x943=((IkReal(0.0203000000000000))*(sj2));
IkReal x944=((py)*(sj0));
gconst9=IKsign(((((IkReal(-1.00000000000000))*(x942)*(x944)))+(((IkReal(-1.00000000000000))*(x941)*(x943)))+(((IkReal(-1.00000000000000))*(x941)*(x942)))+(((IkReal(-1.00000000000000))*(x943)*(x944)))+(((IkReal(0.0203000000000000))*(cj2)*(pz)))+(((IkReal(-0.433100000000000))*(pz)*(sj2)))+(((IkReal(-0.431800000000000))*(pz)))));
IkReal x945=((IkReal(21.3349753694581))*(cj2));
IkReal x946=((py)*(sj0));
IkReal x947=((cj0)*(px));
IkReal x948=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x945)*(x946)))+(((IkReal(-1.00000000000000))*(x945)*(x947)))+(((IkReal(-1.00000000000000))*(x947)*(x948)))+(((IkReal(-1.00000000000000))*(x946)*(x948)))+(((cj2)*(pz)))+(((IkReal(-21.2709359605911))*(pz)))+(((IkReal(-21.3349753694581))*(pz)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
CheckValue<IkReal> x949 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x949.valid ) {
    continue;
}
CheckValue<IkReal> x950 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x950.valid ) {
    continue;
}
CheckValue<IkReal> x951 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x951.valid ) {
    continue;
}
CheckValue<IkReal> x952 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x952.valid ) {
    continue;
}
CheckValue<IkReal> x953 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x953.valid ) {
    continue;
}
gconst8=IKsign(((((IkReal(2159.00000000000))*(x949.value)))+(((IkReal(4318.00000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(2159.00000000000))*(x950.value)*(x951.value)))+(((IkReal(2159.00000000000))*(x952.value)*(x953.value)))));
CheckValue<IkReal> x954 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x954.valid ) {
    continue;
}
CheckValue<IkReal> x955 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x955.valid ) {
    continue;
}
CheckValue<IkReal> x956 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x956.valid ) {
    continue;
}
CheckValue<IkReal> x957 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x957.valid ) {
    continue;
}
CheckValue<IkReal> x958 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x958.valid ) {
    continue;
}
dummyeval[0]=((((x954.value)*(x955.value)))+(x956.value)+(((x957.value)*(x958.value)))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x959=((cj0)*(px));
IkReal x960=((IkReal(43.8277000000000))*(sj2));
IkReal x961=((IkReal(2500.00000000000))*(pp));
IkReal x962=((IkReal(935.062900000000))*(cj2));
IkReal x963=((py)*(sj0));
CheckValue<IkReal> x964 = IKatan2WithCheck(((gconst8)*(((((IkReal(-1.00000000000000))*(pz)*(x961)))+(((IkReal(60.1661750000000))*(pz)))+(((x962)*(x963)))+(((x960)*(x963)))+(((x959)*(x962)))+(((x959)*(x960)))))),((gconst8)*(((((x961)*(x963)))+(((pz)*(x960)))+(((pz)*(x962)))+(((x959)*(x961)))+(((IkReal(-60.1661750000000))*(x959)))+(((IkReal(-60.1661750000000))*(x963)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x964.valid ) {
    continue;
}
j1array[0]=x964.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x965=IKsin(j1);
IkReal x966=IKcos(j1);
IkReal x967=((IkReal(0.433100000000000))*(sj2));
IkReal x968=((cj0)*(px));
IkReal x969=((IkReal(0.433100000000000))*(cj2));
IkReal x970=((py)*(sj0));
IkReal x971=((IkReal(0.0203000000000000))*(cj2));
IkReal x972=((IkReal(0.0203000000000000))*(sj2));
IkReal x973=((IkReal(1.00000000000000))*(x966));
IkReal x974=((IkReal(0.0203000000000000))*(x965));
IkReal x975=((pz)*(x965));
IkReal x976=((IkReal(0.863600000000000))*(x966));
evalcond[0]=((((x965)*(x970)))+(((pz)*(x966)))+(((x965)*(x968)))+(((IkReal(-1.00000000000000))*(x969)))+(((IkReal(-1.00000000000000))*(x972))));
evalcond[1]=((IkReal(0.0240664700000000))+(((x968)*(x976)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.863600000000000))*(x975)))+(((x970)*(x976))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x970)*(x973)))+(x975)+(x967)+(((IkReal(-1.00000000000000))*(x968)*(x973)))+(((IkReal(-1.00000000000000))*(x971))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x965)*(x971)))+(((IkReal(-1.00000000000000))*(x966)*(x972)))+(((IkReal(-1.00000000000000))*(x966)*(x969)))+(((x965)*(x967)))+(pz)+(((IkReal(0.431800000000000))*(x965))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x970)))+(((IkReal(-1.00000000000000))*(x968)))+(((IkReal(-1.00000000000000))*(x966)*(x971)))+(((x965)*(x972)))+(((x965)*(x969)))+(((x966)*(x967)))+(((IkReal(0.431800000000000))*(x966))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x981 = IKPowWithIntegerCheck(cj2,2.00000000000000);
if( !x981.valid ) {
    continue;
}
IkReal x977=x981.value;
CheckValue<IkReal> x982 = IKPowWithIntegerCheck(sj2,2.00000000000000);
if( !x982.valid ) {
    continue;
}
IkReal x978=x982.value;
IkReal x979=((cj2)*(sj2));
IkReal x980=((IkReal(1.00000000000000))*(pz));
CheckValue<IkReal> x984 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x984.valid ) {
    continue;
}
CheckValue<IkReal> x983 = IKatan2WithCheck(((gconst9)*(((((IkReal(-0.000412090000000000))*(x978)))+(x984.value)+(((IkReal(-0.187575610000000))*(x977)))+(((IkReal(-0.0175838600000000))*(x979)))))),((gconst9)*(((((IkReal(-0.00876554000000000))*(sj2)))+(((IkReal(-0.00879193000000000))*(x978)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x980)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x980)))+(((IkReal(-0.187012580000000))*(cj2)))+(((IkReal(0.00879193000000000))*(x977)))+(((IkReal(-0.187163520000000))*(x979)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x983.valid ) {
    continue;
}
j1array[0]=x983.value;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x985=IKsin(j1);
IkReal x986=IKcos(j1);
IkReal x987=((IkReal(0.433100000000000))*(sj2));
IkReal x988=((cj0)*(px));
IkReal x989=((IkReal(0.433100000000000))*(cj2));
IkReal x990=((py)*(sj0));
IkReal x991=((IkReal(0.0203000000000000))*(cj2));
IkReal x992=((IkReal(0.0203000000000000))*(sj2));
IkReal x993=((IkReal(1.00000000000000))*(x986));
IkReal x994=((IkReal(0.0203000000000000))*(x985));
IkReal x995=((pz)*(x985));
IkReal x996=((IkReal(0.863600000000000))*(x986));
evalcond[0]=((((IkReal(-1.00000000000000))*(x989)))+(((IkReal(-1.00000000000000))*(x992)))+(((pz)*(x986)))+(((x985)*(x988)))+(((x985)*(x990))));
evalcond[1]=((IkReal(0.0240664700000000))+(((x988)*(x996)))+(((x990)*(x996)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.863600000000000))*(x995))));
evalcond[2]=((IkReal(0.431800000000000))+(((IkReal(-1.00000000000000))*(x990)*(x993)))+(((IkReal(-1.00000000000000))*(x991)))+(x995)+(x987)+(((IkReal(-1.00000000000000))*(x988)*(x993))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x985)*(x991)))+(((IkReal(-1.00000000000000))*(x986)*(x989)))+(pz)+(((IkReal(0.431800000000000))*(x985)))+(((x985)*(x987)))+(((IkReal(-1.00000000000000))*(x986)*(x992))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x990)))+(((IkReal(-1.00000000000000))*(x988)))+(((x986)*(x987)))+(((IkReal(0.431800000000000))*(x986)))+(((x985)*(x989)))+(((IkReal(-1.00000000000000))*(x986)*(x991)))+(((x985)*(x992))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x99=((cj0)*(r00));
IkReal x100=((cj0)*(r01));
IkReal x101=((IkReal(1.00000000000000))*(sj1));
IkReal x102=((IkReal(1.00000000000000))*(sj0));
IkReal x103=((r11)*(sj0));
IkReal x104=((cj1)*(sj2));
IkReal x105=((cj0)*(r02));
IkReal x106=((((IkReal(-1.00000000000000))*(sj2)*(x101)))+(((cj1)*(cj2))));
IkReal x107=((((cj2)*(sj1)))+(x104));
IkReal x108=((cj0)*(x106));
IkReal x109=((sj0)*(x106));
IkReal x110=((sj0)*(x107));
IkReal x111=((((IkReal(-1.00000000000000))*(cj2)*(x101)))+(((IkReal(-1.00000000000000))*(x104))));
new_r00=((((r10)*(x109)))+(((x106)*(x99)))+(((r20)*(x111))));
new_r01=((((r21)*(x111)))+(((x103)*(x106)))+(((x100)*(x106))));
new_r02=((((r22)*(x111)))+(((r12)*(x109)))+(((x105)*(x106))));
new_r10=((((IkReal(-1.00000000000000))*(r00)*(x102)))+(((cj0)*(r10))));
new_r11=((((IkReal(-1.00000000000000))*(r01)*(x102)))+(((cj0)*(r11))));
new_r12=((((IkReal(-1.00000000000000))*(r02)*(x102)))+(((cj0)*(r12))));
new_r20=((((r10)*(x110)))+(((x107)*(x99)))+(((r20)*(x106))));
new_r21=((((r21)*(x106)))+(((x103)*(x107)))+(((x100)*(x107))));
new_r22=((((r22)*(x106)))+(((r12)*(x110)))+(((x105)*(x107))));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x112=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))));
evalcond[1]=x112;
evalcond[2]=x112;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal j5mul = 1;
j5=0;
IkReal j3mul=IkReal(-1.00000000000000);
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].fmul = j3mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x113=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=x113;
evalcond[2]=x113;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x113;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x115 = IKatan2WithCheck(new_r02,new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x115.valid ) {
    continue;
}
IkReal x114=x115.value;
j3array[0]=((IkReal(-1.00000000000000))*(x114));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x114))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j3))))+(((new_r12)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst49;
CheckValue<IkReal> x116 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x116.valid ) {
    continue;
}
CheckValue<IkReal> x117 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x117.valid ) {
    continue;
}
gconst49=IKsign(((x116.value)+(x117.value)));
CheckValue<IkReal> x118 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x118.valid ) {
    continue;
}
CheckValue<IkReal> x119 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x119.valid ) {
    continue;
}
dummyeval[0]=((x118.value)+(x119.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
CheckValue<IkReal> x120 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x120.valid ) {
    continue;
}
CheckValue<IkReal> x121 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x121.valid ) {
    continue;
}
gconst50=IKsign(((x120.value)+(x121.value)));
CheckValue<IkReal> x122 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x122.valid ) {
    continue;
}
CheckValue<IkReal> x123 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x123.valid ) {
    continue;
}
dummyeval[0]=((x122.value)+(x123.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x124=((IkReal(1.00000000000000))*(new_r00));
CheckValue<IkReal> x125 = IKatan2WithCheck(((gconst50)*(((((IkReal(-1.00000000000000))*(sj3)*(x124)))+(((cj3)*(new_r10)))))),((gconst50)*(((((IkReal(-1.00000000000000))*(cj3)*(x124)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x125.valid ) {
    continue;
}
j5array[0]=x125.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x126=IKsin(j5);
IkReal x127=IKcos(j5);
IkReal x128=((IkReal(1.00000000000000))*(sj3));
IkReal x129=((IkReal(1.00000000000000))*(x126));
IkReal x130=((sj3)*(x127));
IkReal x131=((IkReal(1.00000000000000))*(x127));
IkReal x132=((cj3)*(x129));
evalcond[0]=((((new_r10)*(sj3)))+(x127)+(((cj3)*(new_r00))));
evalcond[1]=((((new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x129)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(x127)))+(((sj3)*(x126)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x128)))+(((IkReal(-1.00000000000000))*(x129)))+(((cj3)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x128)))+(((IkReal(-1.00000000000000))*(x131)))+(((cj3)*(new_r11))));
evalcond[5]=((x130)+(((IkReal(-1.00000000000000))*(x132)))+(new_r01));
evalcond[6]=((x130)+(((IkReal(-1.00000000000000))*(x132)))+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x126)*(x128)))+(((IkReal(-1.00000000000000))*(cj3)*(x131)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x133=((IkReal(1.00000000000000))*(sj3));
CheckValue<IkReal> x134 = IKatan2WithCheck(((gconst49)*(((((IkReal(-1.00000000000000))*(new_r00)*(x133)))+(((cj3)*(new_r01)))))),((gconst49)*(((((IkReal(-1.00000000000000))*(new_r01)*(x133)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r00)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x134.valid ) {
    continue;
}
j5array[0]=x134.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x135=IKsin(j5);
IkReal x136=IKcos(j5);
IkReal x137=((IkReal(1.00000000000000))*(sj3));
IkReal x138=((IkReal(1.00000000000000))*(x135));
IkReal x139=((sj3)*(x136));
IkReal x140=((IkReal(1.00000000000000))*(x136));
IkReal x141=((cj3)*(x138));
evalcond[0]=((((new_r10)*(sj3)))+(x136)+(((cj3)*(new_r00))));
evalcond[1]=((((new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x138)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(x136)))+(((sj3)*(x135)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x137)))+(((IkReal(-1.00000000000000))*(x138)))+(((cj3)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(new_r01)*(x137)))+(((cj3)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x141)))+(x139)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x141)))+(x139)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x135)*(x137)))+(((IkReal(-1.00000000000000))*(cj3)*(x140)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x142 = IKatan2WithCheck(((gconst15)*(new_r21)),((IkReal(-1.00000000000000))*(gconst15)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x142.valid ) {
    continue;
}
j5array[0]=x142.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((sj4)*(IKcos(j5))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj4)*(IKsin(j5))))+(new_r21));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x143=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))));
evalcond[1]=x143;
evalcond[2]=x143;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(-1.00000000000000))*(cj5)*(new_r02)))+(((new_r12)*(sj5)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj5)*(new_r02)))+(((new_r12)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal gconst20;
CheckValue<IkReal> x144 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x144.valid ) {
    continue;
}
gconst20=((IkReal(-1.00000000000000))*(x144.value));
IkReal gconst21;
gconst21=IKsin(gconst20);
IkReal gconst22;
gconst22=IKcos(gconst20);
IkReal x145=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst20)))+(j5))))), IkReal(6.28318530717959))));
evalcond[1]=x145;
evalcond[2]=x145;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((gconst21)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst22)*(new_r02)))));
dummyeval[0]=((((gconst21)*(new_r12)))+(((IkReal(-1.00000000000000))*(gconst22)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x146=((gconst27)*(new_r01));
CheckValue<IkReal> x147 = IKatan2WithCheck(((new_r02)*(x146)),((IkReal(-1.00000000000000))*(new_r12)*(x146)),IKFAST_ATAN2_MAGTHRESH);
if( !x147.valid ) {
    continue;
}
j3array[0]=x147.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x148=IKcos(j3);
IkReal x149=IKsin(j3);
IkReal x150=((IkReal(1.00000000000000))*(gconst22));
IkReal x151=((gconst21)*(x149));
IkReal x152=((IkReal(1.00000000000000))*(x149));
IkReal x153=((gconst21)*(x148));
IkReal x154=((x148)*(x150));
evalcond[0]=((((new_r12)*(x149)))+(((new_r02)*(x148))));
evalcond[1]=((((new_r12)*(x148)))+(((IkReal(-1.00000000000000))*(new_r02)*(x152))));
evalcond[2]=((((new_r01)*(x148)))+(((new_r11)*(x149)))+(gconst21));
evalcond[3]=((x153)+(((gconst22)*(x149)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x154)))+(x151)+(new_r00));
evalcond[5]=((((IkReal(-1.00000000000000))*(x154)))+(x151)+(new_r11));
evalcond[6]=((((IkReal(-1.00000000000000))*(x150)))+(((new_r00)*(x148)))+(((new_r10)*(x149))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x153)))+(new_r10)+(((IkReal(-1.00000000000000))*(x149)*(x150))));
evalcond[8]=((((new_r10)*(x148)))+(((IkReal(-1.00000000000000))*(gconst21)))+(((IkReal(-1.00000000000000))*(new_r00)*(x152))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x150)))+(((new_r11)*(x148)))+(((IkReal(-1.00000000000000))*(new_r01)*(x152))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x155=((gconst21)*(gconst26));
CheckValue<IkReal> x156 = IKatan2WithCheck(((new_r02)*(x155)),((IkReal(-1.00000000000000))*(new_r12)*(x155)),IKFAST_ATAN2_MAGTHRESH);
if( !x156.valid ) {
    continue;
}
j3array[0]=x156.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x157=IKcos(j3);
IkReal x158=IKsin(j3);
IkReal x159=((IkReal(1.00000000000000))*(gconst22));
IkReal x160=((gconst21)*(x158));
IkReal x161=((IkReal(1.00000000000000))*(x158));
IkReal x162=((gconst21)*(x157));
IkReal x163=((x157)*(x159));
evalcond[0]=((((new_r12)*(x158)))+(((new_r02)*(x157))));
evalcond[1]=((((new_r12)*(x157)))+(((IkReal(-1.00000000000000))*(new_r02)*(x161))));
evalcond[2]=((((new_r01)*(x157)))+(gconst21)+(((new_r11)*(x158))));
evalcond[3]=((x162)+(((gconst22)*(x158)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x163)))+(x160)+(new_r00));
evalcond[5]=((((IkReal(-1.00000000000000))*(x163)))+(x160)+(new_r11));
evalcond[6]=((((IkReal(-1.00000000000000))*(x159)))+(((new_r00)*(x157)))+(((new_r10)*(x158))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x158)*(x159)))+(((IkReal(-1.00000000000000))*(x162)))+(new_r10));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x161)))+(((new_r10)*(x157)))+(((IkReal(-1.00000000000000))*(gconst21))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x159)))+(((new_r11)*(x157)))+(((IkReal(-1.00000000000000))*(new_r01)*(x161))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst23;
CheckValue<IkReal> x164 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if( !x164.valid ) {
    continue;
}
gconst23=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x164.value))));
IkReal gconst24;
gconst24=IKsin(gconst23);
IkReal gconst25;
gconst25=IKcos(gconst23);
IkReal x165=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst23)))+(j5))))), IkReal(6.28318530717959))));
evalcond[1]=x165;
evalcond[2]=x165;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((IkReal(-1.00000000000000))*(gconst25)*(new_r02)))+(((gconst24)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(gconst25)*(new_r02)))+(((gconst24)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x166=((gconst29)*(new_r01));
CheckValue<IkReal> x167 = IKatan2WithCheck(((new_r02)*(x166)),((IkReal(-1.00000000000000))*(new_r12)*(x166)),IKFAST_ATAN2_MAGTHRESH);
if( !x167.valid ) {
    continue;
}
j3array[0]=x167.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x168=IKcos(j3);
IkReal x169=IKsin(j3);
IkReal x170=((IkReal(1.00000000000000))*(gconst25));
IkReal x171=((IkReal(1.00000000000000))*(gconst24));
IkReal x172=((gconst24)*(x169));
IkReal x173=((gconst25)*(x169));
IkReal x174=((IkReal(1.00000000000000))*(x169));
IkReal x175=((x168)*(x170));
evalcond[0]=((((new_r12)*(x169)))+(((new_r02)*(x168))));
evalcond[1]=((((new_r12)*(x168)))+(((IkReal(-1.00000000000000))*(new_r02)*(x174))));
evalcond[2]=((((new_r01)*(x168)))+(((new_r11)*(x169)))+(gconst24));
evalcond[3]=((x173)+(((gconst24)*(x168)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x175)))+(x172)+(new_r00));
evalcond[5]=((((IkReal(-1.00000000000000))*(x175)))+(x172)+(new_r11));
evalcond[6]=((((new_r00)*(x168)))+(((new_r10)*(x169)))+(((IkReal(-1.00000000000000))*(x170))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x168)*(x171)))+(new_r10)+(((IkReal(-1.00000000000000))*(x169)*(x170))));
evalcond[8]=((((new_r10)*(x168)))+(((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r00)*(x174))));
evalcond[9]=((((new_r11)*(x168)))+(((IkReal(-1.00000000000000))*(x170)))+(((IkReal(-1.00000000000000))*(new_r01)*(x174))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x176=((gconst24)*(gconst28));
CheckValue<IkReal> x177 = IKatan2WithCheck(((new_r02)*(x176)),((IkReal(-1.00000000000000))*(new_r12)*(x176)),IKFAST_ATAN2_MAGTHRESH);
if( !x177.valid ) {
    continue;
}
j3array[0]=x177.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x178=IKcos(j3);
IkReal x179=IKsin(j3);
IkReal x180=((IkReal(1.00000000000000))*(gconst25));
IkReal x181=((IkReal(1.00000000000000))*(gconst24));
IkReal x182=((gconst24)*(x179));
IkReal x183=((gconst25)*(x179));
IkReal x184=((IkReal(1.00000000000000))*(x179));
IkReal x185=((x178)*(x180));
evalcond[0]=((((new_r02)*(x178)))+(((new_r12)*(x179))));
evalcond[1]=((((new_r12)*(x178)))+(((IkReal(-1.00000000000000))*(new_r02)*(x184))));
evalcond[2]=((((new_r01)*(x178)))+(((new_r11)*(x179)))+(gconst24));
evalcond[3]=((x183)+(((gconst24)*(x178)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x185)))+(x182)+(new_r00));
evalcond[5]=((((IkReal(-1.00000000000000))*(x185)))+(x182)+(new_r11));
evalcond[6]=((((new_r00)*(x178)))+(((new_r10)*(x179)))+(((IkReal(-1.00000000000000))*(x180))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x178)*(x181)))+(new_r10)+(((IkReal(-1.00000000000000))*(x179)*(x180))));
evalcond[8]=((((new_r10)*(x178)))+(((IkReal(-1.00000000000000))*(x181)))+(((IkReal(-1.00000000000000))*(new_r00)*(x184))));
evalcond[9]=((((new_r11)*(x178)))+(((IkReal(-1.00000000000000))*(x180)))+(((IkReal(-1.00000000000000))*(new_r01)*(x184))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x186=((gconst19)*(new_r01));
CheckValue<IkReal> x187 = IKatan2WithCheck(((new_r02)*(x186)),((IkReal(-1.00000000000000))*(new_r12)*(x186)),IKFAST_ATAN2_MAGTHRESH);
if( !x187.valid ) {
    continue;
}
j3array[0]=x187.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x188=IKcos(j3);
IkReal x189=IKsin(j3);
IkReal x190=((IkReal(1.00000000000000))*(cj5));
IkReal x191=((sj5)*(x189));
IkReal x192=((cj5)*(x189));
IkReal x193=((sj5)*(x188));
IkReal x194=((IkReal(1.00000000000000))*(x189));
IkReal x195=((x188)*(x190));
evalcond[0]=((((new_r02)*(x188)))+(((new_r12)*(x189))));
evalcond[1]=((((new_r12)*(x188)))+(((IkReal(-1.00000000000000))*(new_r02)*(x194))));
evalcond[2]=((((new_r11)*(x189)))+(sj5)+(((new_r01)*(x188))));
evalcond[3]=((x193)+(x192)+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x195)))+(x191)+(new_r00));
evalcond[5]=((((IkReal(-1.00000000000000))*(x195)))+(x191)+(new_r11));
evalcond[6]=((((new_r10)*(x189)))+(((new_r00)*(x188)))+(((IkReal(-1.00000000000000))*(x190))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x189)*(x190)))+(((IkReal(-1.00000000000000))*(x193)))+(new_r10));
evalcond[8]=((((new_r10)*(x188)))+(((IkReal(-1.00000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(new_r00)*(x194))));
evalcond[9]=((((new_r11)*(x188)))+(((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r01)*(x194))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x196=((gconst18)*(sj5));
CheckValue<IkReal> x197 = IKatan2WithCheck(((new_r02)*(x196)),((IkReal(-1.00000000000000))*(new_r12)*(x196)),IKFAST_ATAN2_MAGTHRESH);
if( !x197.valid ) {
    continue;
}
j3array[0]=x197.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x198=IKcos(j3);
IkReal x199=IKsin(j3);
IkReal x200=((IkReal(1.00000000000000))*(cj5));
IkReal x201=((sj5)*(x199));
IkReal x202=((cj5)*(x199));
IkReal x203=((sj5)*(x198));
IkReal x204=((IkReal(1.00000000000000))*(x199));
IkReal x205=((x198)*(x200));
evalcond[0]=((((new_r02)*(x198)))+(((new_r12)*(x199))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x204)))+(((new_r12)*(x198))));
evalcond[2]=((((new_r11)*(x199)))+(((new_r01)*(x198)))+(sj5));
evalcond[3]=((x203)+(x202)+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x205)))+(x201)+(new_r00));
evalcond[5]=((((IkReal(-1.00000000000000))*(x205)))+(x201)+(new_r11));
evalcond[6]=((((new_r10)*(x199)))+(((new_r00)*(x198)))+(((IkReal(-1.00000000000000))*(x200))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x199)*(x200)))+(new_r10)+(((IkReal(-1.00000000000000))*(x203))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x204)))+(((new_r10)*(x198)))+(((IkReal(-1.00000000000000))*(sj5))));
evalcond[9]=((((new_r11)*(x198)))+(((IkReal(-1.00000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(new_r01)*(x204))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x206=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=x206;
evalcond[2]=x206;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x206;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(-1.00000000000000))*(new_r02)*(sj5)))+(((cj5)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r02)*(sj5)))+(((cj5)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal gconst32;
CheckValue<IkReal> x207 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x207.valid ) {
    continue;
}
gconst32=((IkReal(-1.00000000000000))*(x207.value));
IkReal gconst33;
gconst33=IKsin(gconst32);
IkReal gconst34;
gconst34=IKcos(gconst32);
IkReal x208=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst32)))+(j5))))), IkReal(6.28318530717959))));
evalcond[1]=x208;
evalcond[2]=x208;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x208;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(((((IkReal(-1.00000000000000))*(gconst33)*(new_r02)))+(((gconst34)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(gconst33)*(new_r02)))+(((gconst34)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x209=((gconst39)*(new_r00));
CheckValue<IkReal> x210 = IKatan2WithCheck(((new_r02)*(x209)),((IkReal(-1.00000000000000))*(new_r12)*(x209)),IKFAST_ATAN2_MAGTHRESH);
if( !x210.valid ) {
    continue;
}
j3array[0]=x210.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x211=IKcos(j3);
IkReal x212=IKsin(j3);
IkReal x213=((IkReal(1.00000000000000))*(gconst33));
IkReal x214=((IkReal(1.00000000000000))*(gconst34));
IkReal x215=((gconst34)*(x212));
IkReal x216=((IkReal(1.00000000000000))*(x212));
IkReal x217=((x211)*(x213));
evalcond[0]=((((new_r02)*(x211)))+(((new_r12)*(x212))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x216)))+(((new_r12)*(x211))));
evalcond[2]=((gconst34)+(((new_r00)*(x211)))+(((new_r10)*(x212))));
evalcond[3]=((((gconst34)*(x211)))+(((gconst33)*(x212)))+(new_r00));
evalcond[4]=((x215)+(new_r01)+(((IkReal(-1.00000000000000))*(x217))));
evalcond[5]=((x215)+(new_r10)+(((IkReal(-1.00000000000000))*(x217))));
evalcond[6]=((((new_r01)*(x211)))+(((IkReal(-1.00000000000000))*(x213)))+(((new_r11)*(x212))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x211)*(x214)))+(new_r11)+(((IkReal(-1.00000000000000))*(x212)*(x213))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x213)))+(((IkReal(-1.00000000000000))*(new_r00)*(x216)))+(((new_r10)*(x211))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x216)))+(((IkReal(-1.00000000000000))*(x214)))+(((new_r11)*(x211))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x218=((gconst34)*(gconst38));
CheckValue<IkReal> x219 = IKatan2WithCheck(((new_r02)*(x218)),((IkReal(-1.00000000000000))*(new_r12)*(x218)),IKFAST_ATAN2_MAGTHRESH);
if( !x219.valid ) {
    continue;
}
j3array[0]=x219.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x220=IKcos(j3);
IkReal x221=IKsin(j3);
IkReal x222=((IkReal(1.00000000000000))*(gconst33));
IkReal x223=((IkReal(1.00000000000000))*(gconst34));
IkReal x224=((gconst34)*(x221));
IkReal x225=((IkReal(1.00000000000000))*(x221));
IkReal x226=((x220)*(x222));
evalcond[0]=((((new_r02)*(x220)))+(((new_r12)*(x221))));
evalcond[1]=((((new_r12)*(x220)))+(((IkReal(-1.00000000000000))*(new_r02)*(x225))));
evalcond[2]=((((new_r00)*(x220)))+(gconst34)+(((new_r10)*(x221))));
evalcond[3]=((((gconst34)*(x220)))+(new_r00)+(((gconst33)*(x221))));
evalcond[4]=((x224)+(new_r01)+(((IkReal(-1.00000000000000))*(x226))));
evalcond[5]=((x224)+(new_r10)+(((IkReal(-1.00000000000000))*(x226))));
evalcond[6]=((((new_r01)*(x220)))+(((new_r11)*(x221)))+(((IkReal(-1.00000000000000))*(x222))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x220)*(x223)))+(((IkReal(-1.00000000000000))*(x221)*(x222)))+(new_r11));
evalcond[8]=((((new_r10)*(x220)))+(((IkReal(-1.00000000000000))*(x222)))+(((IkReal(-1.00000000000000))*(new_r00)*(x225))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x225)))+(((new_r11)*(x220)))+(((IkReal(-1.00000000000000))*(x223))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst35;
CheckValue<IkReal> x227 = IKatan2WithCheck(new_r12,((IkReal(-1.00000000000000))*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x227.valid ) {
    continue;
}
gconst35=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x227.value))));
IkReal gconst36;
gconst36=IKsin(gconst35);
IkReal gconst37;
gconst37=IKcos(gconst35);
IkReal x228=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((((IkReal(-1.00000000000000))*(gconst35)))+(j5))))), IkReal(6.28318530717959))));
evalcond[1]=x228;
evalcond[2]=x228;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x228;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(((((IkReal(-1.00000000000000))*(gconst36)*(new_r02)))+(((gconst37)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(gconst36)*(new_r02)))+(((gconst37)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x229=((gconst41)*(new_r00));
CheckValue<IkReal> x230 = IKatan2WithCheck(((new_r02)*(x229)),((IkReal(-1.00000000000000))*(new_r12)*(x229)),IKFAST_ATAN2_MAGTHRESH);
if( !x230.valid ) {
    continue;
}
j3array[0]=x230.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x231=IKcos(j3);
IkReal x232=IKsin(j3);
IkReal x233=((IkReal(1.00000000000000))*(gconst36));
IkReal x234=((gconst37)*(x232));
IkReal x235=((gconst36)*(x232));
IkReal x236=((gconst37)*(x231));
IkReal x237=((IkReal(1.00000000000000))*(x232));
IkReal x238=((x231)*(x233));
evalcond[0]=((((new_r02)*(x231)))+(((new_r12)*(x232))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r02)*(x237)))+(((new_r12)*(x231))));
evalcond[2]=((((new_r10)*(x232)))+(gconst37)+(((new_r00)*(x231))));
evalcond[3]=((x236)+(x235)+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(x238)))+(x234)+(new_r01));
evalcond[5]=((((IkReal(-1.00000000000000))*(x238)))+(x234)+(new_r10));
evalcond[6]=((((new_r11)*(x232)))+(((new_r01)*(x231)))+(((IkReal(-1.00000000000000))*(x233))));
evalcond[7]=((new_r11)+(((IkReal(-1.00000000000000))*(x236)))+(((IkReal(-1.00000000000000))*(x232)*(x233))));
evalcond[8]=((((new_r10)*(x231)))+(((IkReal(-1.00000000000000))*(x233)))+(((IkReal(-1.00000000000000))*(new_r00)*(x237))));
evalcond[9]=((((new_r11)*(x231)))+(((IkReal(-1.00000000000000))*(new_r01)*(x237)))+(((IkReal(-1.00000000000000))*(gconst37))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x239=((gconst37)*(gconst40));
CheckValue<IkReal> x240 = IKatan2WithCheck(((new_r02)*(x239)),((IkReal(-1.00000000000000))*(new_r12)*(x239)),IKFAST_ATAN2_MAGTHRESH);
if( !x240.valid ) {
    continue;
}
j3array[0]=x240.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x241=IKcos(j3);
IkReal x242=IKsin(j3);
IkReal x243=((IkReal(1.00000000000000))*(gconst36));
IkReal x244=((gconst37)*(x242));
IkReal x245=((gconst36)*(x242));
IkReal x246=((gconst37)*(x241));
IkReal x247=((IkReal(1.00000000000000))*(x242));
IkReal x248=((x241)*(x243));
evalcond[0]=((((new_r12)*(x242)))+(((new_r02)*(x241))));
evalcond[1]=((((new_r12)*(x241)))+(((IkReal(-1.00000000000000))*(new_r02)*(x247))));
evalcond[2]=((gconst37)+(((new_r00)*(x241)))+(((new_r10)*(x242))));
evalcond[3]=((x246)+(x245)+(new_r00));
evalcond[4]=((x244)+(((IkReal(-1.00000000000000))*(x248)))+(new_r01));
evalcond[5]=((x244)+(((IkReal(-1.00000000000000))*(x248)))+(new_r10));
evalcond[6]=((((new_r01)*(x241)))+(((IkReal(-1.00000000000000))*(x243)))+(((new_r11)*(x242))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x242)*(x243)))+(((IkReal(-1.00000000000000))*(x246)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x247)))+(((IkReal(-1.00000000000000))*(x243)))+(((new_r10)*(x241))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x247)))+(((new_r11)*(x241)))+(((IkReal(-1.00000000000000))*(gconst37))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x249=((gconst31)*(new_r00));
CheckValue<IkReal> x250 = IKatan2WithCheck(((new_r02)*(x249)),((IkReal(-1.00000000000000))*(new_r12)*(x249)),IKFAST_ATAN2_MAGTHRESH);
if( !x250.valid ) {
    continue;
}
j3array[0]=x250.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x251=IKcos(j3);
IkReal x252=IKsin(j3);
IkReal x253=((IkReal(1.00000000000000))*(sj5));
IkReal x254=((IkReal(1.00000000000000))*(cj5));
IkReal x255=((cj5)*(x252));
IkReal x256=((IkReal(1.00000000000000))*(x252));
IkReal x257=((x251)*(x253));
evalcond[0]=((((new_r02)*(x251)))+(((new_r12)*(x252))));
evalcond[1]=((((new_r12)*(x251)))+(((IkReal(-1.00000000000000))*(new_r02)*(x256))));
evalcond[2]=((((new_r00)*(x251)))+(cj5)+(((new_r10)*(x252))));
evalcond[3]=((((cj5)*(x251)))+(((sj5)*(x252)))+(new_r00));
evalcond[4]=((x255)+(new_r01)+(((IkReal(-1.00000000000000))*(x257))));
evalcond[5]=((x255)+(new_r10)+(((IkReal(-1.00000000000000))*(x257))));
evalcond[6]=((((new_r01)*(x251)))+(((new_r11)*(x252)))+(((IkReal(-1.00000000000000))*(x253))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x252)*(x253)))+(((IkReal(-1.00000000000000))*(x251)*(x254)))+(new_r11));
evalcond[8]=((((new_r10)*(x251)))+(((IkReal(-1.00000000000000))*(new_r00)*(x256)))+(((IkReal(-1.00000000000000))*(x253))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x256)))+(((new_r11)*(x251)))+(((IkReal(-1.00000000000000))*(x254))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x258=((cj5)*(gconst30));
CheckValue<IkReal> x259 = IKatan2WithCheck(((new_r02)*(x258)),((IkReal(-1.00000000000000))*(new_r12)*(x258)),IKFAST_ATAN2_MAGTHRESH);
if( !x259.valid ) {
    continue;
}
j3array[0]=x259.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x260=IKcos(j3);
IkReal x261=IKsin(j3);
IkReal x262=((IkReal(1.00000000000000))*(sj5));
IkReal x263=((IkReal(1.00000000000000))*(cj5));
IkReal x264=((cj5)*(x261));
IkReal x265=((IkReal(1.00000000000000))*(x261));
IkReal x266=((x260)*(x262));
evalcond[0]=((((new_r12)*(x261)))+(((new_r02)*(x260))));
evalcond[1]=((((new_r12)*(x260)))+(((IkReal(-1.00000000000000))*(new_r02)*(x265))));
evalcond[2]=((cj5)+(((new_r00)*(x260)))+(((new_r10)*(x261))));
evalcond[3]=((((cj5)*(x260)))+(((sj5)*(x261)))+(new_r00));
evalcond[4]=((x264)+(new_r01)+(((IkReal(-1.00000000000000))*(x266))));
evalcond[5]=((x264)+(new_r10)+(((IkReal(-1.00000000000000))*(x266))));
evalcond[6]=((((new_r01)*(x260)))+(((IkReal(-1.00000000000000))*(x262)))+(((new_r11)*(x261))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x261)*(x262)))+(new_r11)+(((IkReal(-1.00000000000000))*(x260)*(x263))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x265)))+(((IkReal(-1.00000000000000))*(x262)))+(((new_r10)*(x260))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x265)))+(((IkReal(-1.00000000000000))*(x263)))+(((new_r11)*(x260))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x267 = IKatan2WithCheck(((gconst17)*(new_r12)),((gconst17)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x267.valid ) {
    continue;
}
j3array[0]=x267.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x268=IKcos(j3);
IkReal x269=IKsin(j3);
IkReal x270=((IkReal(1.00000000000000))*(cj5));
IkReal x271=((IkReal(1.00000000000000))*(cj4));
IkReal x272=((IkReal(1.00000000000000))*(sj4));
IkReal x273=((IkReal(1.00000000000000))*(sj5));
IkReal x274=((cj4)*(x268));
IkReal x275=((cj4)*(x269));
IkReal x276=((cj5)*(x269));
IkReal x277=((new_r11)*(x269));
IkReal x278=((new_r02)*(x268));
IkReal x279=((new_r01)*(x268));
IkReal x280=((new_r12)*(x269));
IkReal x281=((new_r00)*(x268));
IkReal x282=((IkReal(1.00000000000000))*(x269));
IkReal x283=((new_r10)*(x269));
evalcond[0]=((((IkReal(-1.00000000000000))*(x268)*(x272)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x269)*(x272)))+(new_r12));
evalcond[2]=((((new_r12)*(x268)))+(((IkReal(-1.00000000000000))*(new_r02)*(x282))));
evalcond[3]=((((sj5)*(x274)))+(x276)+(new_r01));
evalcond[4]=((x278)+(x280)+(((IkReal(-1.00000000000000))*(x272))));
evalcond[5]=((((cj4)*(sj5)))+(x277)+(x279));
evalcond[6]=((((sj5)*(x269)))+(((IkReal(-1.00000000000000))*(x270)*(x274)))+(new_r00));
evalcond[7]=((((sj5)*(x275)))+(((IkReal(-1.00000000000000))*(x268)*(x270)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r00)*(x282)))+(((IkReal(-1.00000000000000))*(x273)))+(((new_r10)*(x268))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x282)))+(((IkReal(-1.00000000000000))*(x270)))+(((new_r11)*(x268))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj4)*(x270)))+(x283)+(x281));
evalcond[11]=((((IkReal(-1.00000000000000))*(x268)*(x273)))+(((IkReal(-1.00000000000000))*(x270)*(x275)))+(new_r10));
evalcond[12]=((((IkReal(-1.00000000000000))*(new_r22)*(x272)))+(((new_r02)*(x274)))+(((new_r12)*(x275))));
evalcond[13]=((sj5)+(((IkReal(-1.00000000000000))*(new_r21)*(x272)))+(((new_r01)*(x274)))+(((new_r11)*(x275))));
evalcond[14]=((((IkReal(-1.00000000000000))*(new_r20)*(x271)))+(((IkReal(-1.00000000000000))*(x272)*(x281)))+(((IkReal(-1.00000000000000))*(x272)*(x283))));
evalcond[15]=((((IkReal(-1.00000000000000))*(x272)*(x279)))+(((IkReal(-1.00000000000000))*(x272)*(x277)))+(((IkReal(-1.00000000000000))*(new_r21)*(x271))));
evalcond[16]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x272)*(x278)))+(((IkReal(-1.00000000000000))*(new_r22)*(x271)))+(((IkReal(-1.00000000000000))*(x272)*(x280))));
evalcond[17]=((((new_r00)*(x274)))+(((IkReal(-1.00000000000000))*(new_r20)*(x272)))+(((IkReal(-1.00000000000000))*(x270)))+(((new_r10)*(x275))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x284 = IKatan2WithCheck(((gconst16)*(new_r12)),((gconst16)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x284.valid ) {
    continue;
}
j3array[0]=x284.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x285=IKcos(j3);
IkReal x286=IKsin(j3);
IkReal x287=((IkReal(1.00000000000000))*(cj5));
IkReal x288=((IkReal(1.00000000000000))*(cj4));
IkReal x289=((IkReal(1.00000000000000))*(sj4));
IkReal x290=((IkReal(1.00000000000000))*(sj5));
IkReal x291=((cj4)*(x285));
IkReal x292=((cj4)*(x286));
IkReal x293=((cj5)*(x286));
IkReal x294=((new_r11)*(x286));
IkReal x295=((new_r02)*(x285));
IkReal x296=((new_r01)*(x285));
IkReal x297=((new_r12)*(x286));
IkReal x298=((new_r00)*(x285));
IkReal x299=((IkReal(1.00000000000000))*(x286));
IkReal x300=((new_r10)*(x286));
evalcond[0]=((((IkReal(-1.00000000000000))*(x285)*(x289)))+(new_r02));
evalcond[1]=((new_r12)+(((IkReal(-1.00000000000000))*(x286)*(x289))));
evalcond[2]=((((new_r12)*(x285)))+(((IkReal(-1.00000000000000))*(new_r02)*(x299))));
evalcond[3]=((((sj5)*(x291)))+(x293)+(new_r01));
evalcond[4]=((x295)+(x297)+(((IkReal(-1.00000000000000))*(x289))));
evalcond[5]=((((cj4)*(sj5)))+(x294)+(x296));
evalcond[6]=((((sj5)*(x286)))+(((IkReal(-1.00000000000000))*(x287)*(x291)))+(new_r00));
evalcond[7]=((((sj5)*(x292)))+(((IkReal(-1.00000000000000))*(x285)*(x287)))+(new_r11));
evalcond[8]=((((IkReal(-1.00000000000000))*(x290)))+(((IkReal(-1.00000000000000))*(new_r00)*(x299)))+(((new_r10)*(x285))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r01)*(x299)))+(((IkReal(-1.00000000000000))*(x287)))+(((new_r11)*(x285))));
evalcond[10]=((x300)+(x298)+(((IkReal(-1.00000000000000))*(cj4)*(x287))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x285)*(x290)))+(((IkReal(-1.00000000000000))*(x287)*(x292)))+(new_r10));
evalcond[12]=((((new_r02)*(x291)))+(((new_r12)*(x292)))+(((IkReal(-1.00000000000000))*(new_r22)*(x289))));
evalcond[13]=((sj5)+(((new_r11)*(x292)))+(((new_r01)*(x291)))+(((IkReal(-1.00000000000000))*(new_r21)*(x289))));
evalcond[14]=((((IkReal(-1.00000000000000))*(x289)*(x298)))+(((IkReal(-1.00000000000000))*(new_r20)*(x288)))+(((IkReal(-1.00000000000000))*(x289)*(x300))));
evalcond[15]=((((IkReal(-1.00000000000000))*(x289)*(x294)))+(((IkReal(-1.00000000000000))*(x289)*(x296)))+(((IkReal(-1.00000000000000))*(new_r21)*(x288))));
evalcond[16]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x289)*(x295)))+(((IkReal(-1.00000000000000))*(x289)*(x297)))+(((IkReal(-1.00000000000000))*(new_r22)*(x288))));
evalcond[17]=((((new_r10)*(x292)))+(((new_r00)*(x291)))+(((IkReal(-1.00000000000000))*(x287)))+(((IkReal(-1.00000000000000))*(new_r20)*(x289))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x301 = IKatan2WithCheck(((gconst14)*(new_r12)),((gconst14)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x301.valid ) {
    continue;
}
j3array[0]=x301.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x302=IKcos(j3);
IkReal x303=IKsin(j3);
IkReal x304=((IkReal(1.00000000000000))*(sj4));
IkReal x305=((IkReal(1.00000000000000))*(cj4));
IkReal x306=((new_r02)*(x302));
IkReal x307=((new_r12)*(x303));
evalcond[0]=((((IkReal(-1.00000000000000))*(x302)*(x304)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x303)*(x304)))+(new_r12));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r02)*(x303)))+(((new_r12)*(x302))));
evalcond[3]=((x306)+(x307)+(((IkReal(-1.00000000000000))*(x304))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r22)*(x304)))+(((cj4)*(x307)))+(((cj4)*(x306))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r10)*(x303)*(x304)))+(((IkReal(-1.00000000000000))*(new_r00)*(x302)*(x304)))+(((IkReal(-1.00000000000000))*(new_r20)*(x305))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r01)*(x302)*(x304)))+(((IkReal(-1.00000000000000))*(new_r21)*(x305)))+(((IkReal(-1.00000000000000))*(new_r11)*(x303)*(x304))));
evalcond[7]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x305)))+(((IkReal(-1.00000000000000))*(x304)*(x307)))+(((IkReal(-1.00000000000000))*(x304)*(x306))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj3;
dummyeval[1]=cj4;
dummyeval[2]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x308=((new_r22)+(((IkReal(-1.00000000000000))*(cj4))));
IkReal x309=((((IkReal(-1.00000000000000))*(sj4)))+(new_r12));
IkReal x310=((IkReal(1.00000000000000))*(cj4));
IkReal x311=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j3))))), IkReal(6.28318530717959))));
evalcond[1]=x308;
evalcond[2]=x308;
evalcond[3]=new_r02;
evalcond[4]=x309;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x309;
evalcond[7]=((((cj4)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r22)*(x311))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r20)*(x310)))+(((IkReal(-1.00000000000000))*(new_r10)*(x311))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x310)))+(((IkReal(-1.00000000000000))*(new_r11)*(x311))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x310)))+(((IkReal(-1.00000000000000))*(new_r12)*(x311))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj4;
dummyeval[1]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
bool bgotonextstatement = true;
do
{
IkReal x312=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x312;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x312;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x313=IKcos(j5);
IkReal x314=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x313)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x314)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x314)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x313)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x315=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x315;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x315;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x315;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x316=IKsin(j5);
IkReal x317=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x316)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x317)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x316)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x317)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x318=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))));
evalcond[1]=x318;
evalcond[2]=x318;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x319=IKsin(j5);
IkReal x320=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x319)+(new_r11));
evalcond[1]=((((IkReal(-1.00000000000000))*(x320)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x319)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x320)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x321=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=x321;
evalcond[2]=x321;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x321;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x322=IKcos(j5);
IkReal x323=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x322)+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x323)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x323)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x322)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x324 = IKPowWithIntegerCheck(cj4,-1.00000000000000);
if( !x324.valid ) {
    continue;
}
CheckValue<IkReal> x325 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x325.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(x324.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x325.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(x324.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x325.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(x324.value)), ((IkReal(-1.00000000000000))*(new_r20)*(x325.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x326=IKsin(j5);
IkReal x327=IKcos(j5);
IkReal x328=((IkReal(1.00000000000000))*(sj4));
IkReal x329=((IkReal(1.00000000000000))*(x327));
IkReal x330=((IkReal(1.00000000000000))*(x326));
evalcond[0]=((((sj4)*(x327)))+(new_r20));
evalcond[1]=((((cj4)*(x326)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x326)*(x328)))+(new_r21));
evalcond[3]=((new_r10)+(((IkReal(-1.00000000000000))*(cj4)*(x329))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x330)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x329)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((cj4)*(new_r11)))+(x326)+(((IkReal(-1.00000000000000))*(new_r21)*(x328))));
evalcond[7]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x329)))+(((IkReal(-1.00000000000000))*(new_r20)*(x328))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x331 = IKatan2WithCheck(((gconst43)*(new_r21)),((IkReal(-1.00000000000000))*(gconst43)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x331.valid ) {
    continue;
}
j5array[0]=x331.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x332=IKsin(j5);
IkReal x333=IKcos(j5);
IkReal x334=((IkReal(1.00000000000000))*(sj4));
IkReal x335=((IkReal(1.00000000000000))*(x333));
IkReal x336=((IkReal(1.00000000000000))*(x332));
evalcond[0]=((((sj4)*(x333)))+(new_r20));
evalcond[1]=((((cj4)*(x332)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x332)*(x334)))+(new_r21));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(x335)))+(new_r10));
evalcond[4]=((((IkReal(-1.00000000000000))*(x336)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x335)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r21)*(x334)))+(x332));
evalcond[7]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x334)))+(((IkReal(-1.00000000000000))*(x335))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x337=((new_r22)+(((IkReal(-1.00000000000000))*(cj4))));
IkReal x338=((IkReal(1.00000000000000))*(cj4));
IkReal x339=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j3))))), IkReal(6.28318530717959))));
evalcond[1]=x337;
evalcond[2]=x337;
evalcond[3]=new_r02;
evalcond[4]=((sj4)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r12)))+(((IkReal(-1.00000000000000))*(x339))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x339)))+(((IkReal(-1.00000000000000))*(new_r12)*(x338))));
evalcond[9]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r20)*(x338))));
evalcond[10]=((((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r21)*(x338))));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x338)))+(((new_r12)*(sj4))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x340=IKcos(j5);
IkReal x341=IKsin(j5);
IkReal x342=((IkReal(1.00000000000000))*(cj4));
IkReal x343=((IkReal(1.00000000000000))*(sj4));
IkReal x344=((IkReal(1.00000000000000))*(x340));
IkReal x345=((IkReal(1.00000000000000))*(x341));
evalcond[0]=((((sj4)*(x340)))+(new_r20));
evalcond[1]=((new_r00)+(((IkReal(-1.00000000000000))*(x345))));
evalcond[2]=((new_r01)+(((IkReal(-1.00000000000000))*(x344))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x341)*(x343)))+(new_r21));
evalcond[4]=((((cj4)*(x341)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x340)*(x342)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r11)*(x342)))+(x341)+(((IkReal(-1.00000000000000))*(new_r21)*(x343))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x342)))+(((IkReal(-1.00000000000000))*(new_r20)*(x343)))+(((IkReal(-1.00000000000000))*(x344))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x346=((IkReal(1.00000000000000))*(cj3));
IkReal x347=((new_r12)*(sj3));
IkReal x348=((new_r11)*(sj3));
IkReal x349=((IkReal(1.00000000000000))*(sj3));
IkReal x350=((((IkReal(-1.00000000000000))*(new_r02)*(x349)))+(((cj3)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((new_r02)+(((IkReal(-1.00000000000000))*(x346))));
evalcond[4]=((new_r12)+(((IkReal(-1.00000000000000))*(x349))));
evalcond[5]=x350;
evalcond[6]=x350;
evalcond[7]=((IkReal(-1.00000000000000))+(x347)+(((cj3)*(new_r02))));
evalcond[8]=((x348)+(((cj3)*(new_r01))));
evalcond[9]=((((new_r10)*(sj3)))+(((cj3)*(new_r00))));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r10)*(x349)))+(((IkReal(-1.00000000000000))*(new_r00)*(x346))));
evalcond[12]=((((IkReal(-1.00000000000000))*(new_r01)*(x346)))+(((IkReal(-1.00000000000000))*(x348))));
evalcond[13]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x346)))+(((IkReal(-1.00000000000000))*(x347))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x351=IKcos(j5);
IkReal x352=IKsin(j5);
IkReal x353=((IkReal(1.00000000000000))*(sj3));
IkReal x354=((IkReal(1.00000000000000))*(x352));
IkReal x355=((IkReal(1.00000000000000))*(x351));
evalcond[0]=((x351)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x354)))+(new_r21));
evalcond[2]=((((sj3)*(x351)))+(new_r01));
evalcond[3]=((((sj3)*(x352)))+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj3)*(x355)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj3)*(x354)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(x354)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x353))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x355)))+(((IkReal(-1.00000000000000))*(new_r01)*(x353)))+(((cj3)*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x356=((((IkReal(-1.00000000000000))*(new_r02)*(sj3)))+(((cj3)*(new_r12))));
IkReal x357=((((new_r10)*(sj3)))+(((cj3)*(new_r00))));
IkReal x358=((((new_r11)*(sj3)))+(((cj3)*(new_r01))));
IkReal x359=((IkReal(1.00000000000000))+(((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((cj3)+(new_r02));
evalcond[4]=((sj3)+(new_r12));
evalcond[5]=x356;
evalcond[6]=x356;
evalcond[7]=x359;
evalcond[8]=x358;
evalcond[9]=x357;
evalcond[10]=new_r22;
evalcond[11]=x357;
evalcond[12]=x358;
evalcond[13]=x359;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x360=IKcos(j5);
IkReal x361=IKsin(j5);
IkReal x362=((IkReal(1.00000000000000))*(sj3));
IkReal x363=((IkReal(1.00000000000000))*(x360));
IkReal x364=((IkReal(1.00000000000000))*(x361));
evalcond[0]=((x361)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x363)))+(new_r20));
evalcond[2]=((((sj3)*(x360)))+(new_r01));
evalcond[3]=((((sj3)*(x361)))+(new_r00));
evalcond[4]=((new_r11)+(((IkReal(-1.00000000000000))*(cj3)*(x363))));
evalcond[5]=((new_r10)+(((IkReal(-1.00000000000000))*(cj3)*(x364))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r00)*(x362)))+(((IkReal(-1.00000000000000))*(x364)))+(((cj3)*(new_r10))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x363)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x362))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x365=((IkReal(-1.00000000000000))+(new_r22));
IkReal x366=((((IkReal(-1.00000000000000))*(new_r02)*(sj3)))+(((cj3)*(new_r12))));
IkReal x367=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))));
evalcond[1]=x365;
evalcond[2]=x365;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x366;
evalcond[10]=x366;
evalcond[11]=x367;
evalcond[12]=x367;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst44;
CheckValue<IkReal> x368 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x368.valid ) {
    continue;
}
CheckValue<IkReal> x369 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x369.valid ) {
    continue;
}
gconst44=IKsign(((((IkReal(-1.00000000000000))*(x368.value)))+(((IkReal(-1.00000000000000))*(x369.value)))));
CheckValue<IkReal> x370 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x370.valid ) {
    continue;
}
CheckValue<IkReal> x371 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x371.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x370.value)))+(((IkReal(-1.00000000000000))*(x371.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
CheckValue<IkReal> x372 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x372.valid ) {
    continue;
}
CheckValue<IkReal> x373 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x373.valid ) {
    continue;
}
gconst45=IKsign(((((IkReal(-1.00000000000000))*(x372.value)))+(((IkReal(-1.00000000000000))*(x373.value)))));
CheckValue<IkReal> x374 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x374.valid ) {
    continue;
}
CheckValue<IkReal> x375 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x375.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x374.value)))+(((IkReal(-1.00000000000000))*(x375.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x376 = IKatan2WithCheck(((gconst45)*(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))))),((gconst45)*(((((new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x376.valid ) {
    continue;
}
j5array[0]=x376.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x377=IKsin(j5);
IkReal x378=IKcos(j5);
IkReal x379=((IkReal(1.00000000000000))*(sj3));
IkReal x380=((IkReal(1.00000000000000))*(x378));
IkReal x381=((sj3)*(x377));
IkReal x382=((IkReal(1.00000000000000))*(x377));
IkReal x383=((cj3)*(x380));
evalcond[0]=((((new_r11)*(sj3)))+(x377)+(((cj3)*(new_r01))));
evalcond[1]=((((sj3)*(x378)))+(new_r01)+(((cj3)*(x377))));
evalcond[2]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x380)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x379)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x382))));
evalcond[4]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x380)))+(((IkReal(-1.00000000000000))*(new_r01)*(x379))));
evalcond[5]=((x381)+(((IkReal(-1.00000000000000))*(x383)))+(new_r00));
evalcond[6]=((x381)+(((IkReal(-1.00000000000000))*(x383)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x378)*(x379)))+(new_r10)+(((IkReal(-1.00000000000000))*(cj3)*(x382))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x384 = IKatan2WithCheck(((gconst44)*(((((new_r00)*(sj3)))+(((cj3)*(new_r01)))))),((gconst44)*(((((new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r00)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x384.valid ) {
    continue;
}
j5array[0]=x384.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x385=IKsin(j5);
IkReal x386=IKcos(j5);
IkReal x387=((IkReal(1.00000000000000))*(sj3));
IkReal x388=((IkReal(1.00000000000000))*(x386));
IkReal x389=((sj3)*(x385));
IkReal x390=((IkReal(1.00000000000000))*(x385));
IkReal x391=((cj3)*(x388));
evalcond[0]=((((new_r11)*(sj3)))+(x385)+(((cj3)*(new_r01))));
evalcond[1]=((((cj3)*(x385)))+(new_r01)+(((sj3)*(x386))));
evalcond[2]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x388)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x390)))+(((IkReal(-1.00000000000000))*(new_r00)*(x387)))+(((cj3)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x387)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x388))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x391)))+(x389)+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x391)))+(x389)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj3)*(x390)))+(((IkReal(-1.00000000000000))*(x386)*(x387)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x392=((IkReal(1.00000000000000))+(new_r22));
IkReal x393=((new_r12)*(sj3));
IkReal x394=((IkReal(1.00000000000000))*(new_r02));
IkReal x395=((((IkReal(-1.00000000000000))*(sj3)*(x394)))+(((cj3)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=x392;
evalcond[2]=x392;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x395;
evalcond[10]=x395;
evalcond[11]=((x393)+(((cj3)*(new_r02))));
evalcond[12]=((((IkReal(-1.00000000000000))*(x393)))+(((IkReal(-1.00000000000000))*(cj3)*(x394))));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x392;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst46;
CheckValue<IkReal> x396 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x396.valid ) {
    continue;
}
CheckValue<IkReal> x397 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x397.valid ) {
    continue;
}
gconst46=IKsign(((x396.value)+(x397.value)));
CheckValue<IkReal> x398 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x398.valid ) {
    continue;
}
CheckValue<IkReal> x399 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x399.valid ) {
    continue;
}
dummyeval[0]=((x398.value)+(x399.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst47;
CheckValue<IkReal> x400 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x400.valid ) {
    continue;
}
CheckValue<IkReal> x401 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x401.valid ) {
    continue;
}
gconst47=IKsign(((x400.value)+(x401.value)));
CheckValue<IkReal> x402 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x402.valid ) {
    continue;
}
CheckValue<IkReal> x403 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x403.valid ) {
    continue;
}
dummyeval[0]=((x402.value)+(x403.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x404=((IkReal(1.00000000000000))*(new_r00));
CheckValue<IkReal> x405 = IKatan2WithCheck(((gconst47)*(((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(sj3)*(x404)))))),((gconst47)*(((((IkReal(-1.00000000000000))*(cj3)*(x404)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x405.valid ) {
    continue;
}
j5array[0]=x405.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x406=IKsin(j5);
IkReal x407=IKcos(j5);
IkReal x408=((IkReal(1.00000000000000))*(sj3));
IkReal x409=((IkReal(1.00000000000000))*(x406));
IkReal x410=((sj3)*(x407));
IkReal x411=((IkReal(1.00000000000000))*(x407));
IkReal x412=((cj3)*(x409));
evalcond[0]=((((new_r10)*(sj3)))+(x407)+(((cj3)*(new_r00))));
evalcond[1]=((((new_r11)*(sj3)))+(((cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(x409))));
evalcond[2]=((((sj3)*(x406)))+(new_r00)+(((cj3)*(x407))));
evalcond[3]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x408)))+(((IkReal(-1.00000000000000))*(x409))));
evalcond[4]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x411)))+(((IkReal(-1.00000000000000))*(new_r01)*(x408))));
evalcond[5]=((x410)+(new_r01)+(((IkReal(-1.00000000000000))*(x412))));
evalcond[6]=((x410)+(new_r10)+(((IkReal(-1.00000000000000))*(x412))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x406)*(x408)))+(((IkReal(-1.00000000000000))*(cj3)*(x411)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x413=((IkReal(1.00000000000000))*(sj3));
CheckValue<IkReal> x414 = IKatan2WithCheck(((gconst46)*(((((cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r00)*(x413)))))),((gconst46)*(((((IkReal(-1.00000000000000))*(cj3)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(x413)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x414.valid ) {
    continue;
}
j5array[0]=x414.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x415=IKsin(j5);
IkReal x416=IKcos(j5);
IkReal x417=((IkReal(1.00000000000000))*(sj3));
IkReal x418=((IkReal(1.00000000000000))*(x415));
IkReal x419=((sj3)*(x416));
IkReal x420=((IkReal(1.00000000000000))*(x416));
IkReal x421=((cj3)*(x418));
evalcond[0]=((((new_r10)*(sj3)))+(x416)+(((cj3)*(new_r00))));
evalcond[1]=((((new_r11)*(sj3)))+(((cj3)*(new_r01)))+(((IkReal(-1.00000000000000))*(x418))));
evalcond[2]=((((sj3)*(x415)))+(new_r00)+(((cj3)*(x416))));
evalcond[3]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x417)))+(((IkReal(-1.00000000000000))*(x418))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x420)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x417))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x421)))+(x419)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x421)))+(x419)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj3)*(x420)))+(((IkReal(-1.00000000000000))*(x415)*(x417)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x422=((new_r22)+(((IkReal(-1.00000000000000))*(cj4))));
IkReal x423=((((IkReal(-1.00000000000000))*(sj4)))+(new_r02));
IkReal x424=((IkReal(1.00000000000000))*(cj4));
IkReal x425=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959))));
evalcond[1]=x422;
evalcond[2]=x422;
evalcond[3]=x423;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x423;
evalcond[8]=((((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r22)*(x425))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r00)*(x425)))+(((IkReal(-1.00000000000000))*(new_r20)*(x424))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x424)))+(((IkReal(-1.00000000000000))*(new_r01)*(x425))));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x424)))+(((IkReal(-1.00000000000000))*(new_r02)*(x425))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x426=IKcos(j5);
IkReal x427=IKsin(j5);
IkReal x428=((IkReal(1.00000000000000))*(sj4));
IkReal x429=((IkReal(1.00000000000000))*(x426));
IkReal x430=((IkReal(1.00000000000000))*(x427));
evalcond[0]=((((sj4)*(x426)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x430)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x429)))+(new_r11));
evalcond[3]=((((cj4)*(x427)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x427)*(x428)))+(new_r21));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj4)*(x429)))+(new_r00));
evalcond[6]=((((cj4)*(new_r01)))+(x427)+(((IkReal(-1.00000000000000))*(new_r21)*(x428))));
evalcond[7]=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(x429)))+(((IkReal(-1.00000000000000))*(new_r20)*(x428))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x431=((new_r22)+(((IkReal(-1.00000000000000))*(cj4))));
IkReal x432=((IkReal(1.00000000000000))*(cj4));
IkReal x433=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j3))))), IkReal(6.28318530717959))));
evalcond[1]=x431;
evalcond[2]=x431;
evalcond[3]=((sj4)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x433)))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r02)*(x432)))+(((IkReal(-1.00000000000000))*(new_r22)*(x433))));
evalcond[8]=((((new_r00)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r20)*(x432))));
evalcond[9]=((((new_r01)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r21)*(x432))));
evalcond[10]=((IkReal(1.00000000000000))+(((new_r02)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r22)*(x432))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[14];
bool bgotonextstatement = true;
do
{
IkReal x434=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))));
evalcond[1]=x434;
evalcond[2]=x434;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x435=IKsin(j5);
IkReal x436=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x435)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x435)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x436)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x436)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x437=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=x437;
evalcond[2]=x437;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x437;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x438=IKcos(j5);
IkReal x439=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x438)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x439)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x438)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x439)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x440 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x440.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x440.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x440.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r20)*(x440.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x441=IKsin(j5);
IkReal x442=IKcos(j5);
IkReal x443=((IkReal(1.00000000000000))*(cj4));
IkReal x444=((IkReal(1.00000000000000))*(sj4));
IkReal x445=((IkReal(1.00000000000000))*(x442));
IkReal x446=((IkReal(1.00000000000000))*(x441));
evalcond[0]=((((sj4)*(x442)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x441)*(x444))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x446)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj4)*(x441)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x442)*(x443))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r01)*(x443)))+(x441)+(((IkReal(-1.00000000000000))*(new_r21)*(x444))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(new_r00)*(x443)))+(((IkReal(-1.00000000000000))*(new_r20)*(x444))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x447 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x447.valid ) {
    continue;
}
if( IKabs(((new_r21)*(x447.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(x447.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((new_r21)*(x447.value)), ((IkReal(-1.00000000000000))*(new_r11)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x448=IKsin(j5);
IkReal x449=IKcos(j5);
IkReal x450=((IkReal(1.00000000000000))*(cj4));
IkReal x451=((IkReal(1.00000000000000))*(sj4));
IkReal x452=((IkReal(1.00000000000000))*(x449));
IkReal x453=((IkReal(1.00000000000000))*(x448));
evalcond[0]=((((sj4)*(x449)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x448)*(x451))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x453)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x452)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj4)*(x448)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r00)))+(((IkReal(-1.00000000000000))*(x449)*(x450))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x451)))+(((IkReal(-1.00000000000000))*(new_r01)*(x450)))+(x448));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x451)))+(((IkReal(-1.00000000000000))*(new_r00)*(x450)))+(((IkReal(-1.00000000000000))*(x452))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x454 = IKatan2WithCheck(((gconst48)*(new_r21)),((IkReal(-1.00000000000000))*(gconst48)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x454.valid ) {
    continue;
}
j5array[0]=x454.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x455=IKsin(j5);
IkReal x456=IKcos(j5);
IkReal x457=((IkReal(1.00000000000000))*(cj4));
IkReal x458=((IkReal(1.00000000000000))*(sj4));
IkReal x459=((IkReal(1.00000000000000))*(x456));
IkReal x460=((IkReal(1.00000000000000))*(x455));
evalcond[0]=((((sj4)*(x456)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x455)*(x458)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x459)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj4)*(x455)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x456)*(x457)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x458)))+(((IkReal(-1.00000000000000))*(new_r01)*(x457)))+(x455));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x458)))+(((IkReal(-1.00000000000000))*(new_r00)*(x457)))+(((IkReal(-1.00000000000000))*(x459))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x461=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x461;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x461;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x462=IKcos(j5);
IkReal x463=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x462)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x463)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x463)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x462)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j3))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x464=IKcos(j5);
IkReal x465=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x464)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x465)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x465)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x464)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x466=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x466;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x466;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x466;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x467=IKsin(j5);
IkReal x468=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x467)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x468)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x467)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x468)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j3))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x469=IKsin(j5);
IkReal x470=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x469)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x470)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x469)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x470)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x471=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959)))))));
evalcond[1]=x471;
evalcond[2]=x471;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x472=IKsin(j5);
IkReal x473=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x472)+(new_r01));
evalcond[1]=((((IkReal(-1.00000000000000))*(x472)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x473)))+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x473)))+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x474=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959)))))));
evalcond[1]=x474;
evalcond[2]=x474;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x474;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x475=IKcos(j5);
IkReal x476=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x475)+(new_r00));
evalcond[1]=((((IkReal(-1.00000000000000))*(x476)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x475)))+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x476)))+(new_r01));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x478 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x478.valid ) {
    continue;
}
IkReal x477=x478.value;
CheckValue<IkReal> x479 = IKPowWithIntegerCheck(cj3,-1.00000000000000);
if( !x479.valid ) {
    continue;
}
CheckValue<IkReal> x480 = IKPowWithIntegerCheck(cj4,-1.00000000000000);
if( !x480.valid ) {
    continue;
}
if( IKabs(((x477)*(x479.value)*(x480.value)*(((((new_r20)*(sj3)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x477))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x477)*(x479.value)*(x480.value)*(((((new_r20)*(sj3)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x477)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x477)*(x479.value)*(x480.value)*(((((new_r20)*(sj3)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x477)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x481=IKsin(j5);
IkReal x482=IKcos(j5);
IkReal x483=((cj3)*(new_r00));
IkReal x484=((cj3)*(cj4));
IkReal x485=((cj4)*(sj3));
IkReal x486=((IkReal(1.00000000000000))*(sj3));
IkReal x487=((IkReal(1.00000000000000))*(sj4));
IkReal x488=((IkReal(1.00000000000000))*(x482));
IkReal x489=((sj3)*(x481));
IkReal x490=((IkReal(1.00000000000000))*(x481));
evalcond[0]=((((sj4)*(x482)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x481)*(x487)))+(new_r21));
evalcond[2]=((((new_r11)*(sj3)))+(((cj4)*(x481)))+(((cj3)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x490)))+(((IkReal(-1.00000000000000))*(new_r00)*(x486)))+(((cj3)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x486)))+(((IkReal(-1.00000000000000))*(x488)))+(((cj3)*(new_r11))));
evalcond[5]=((((x481)*(x484)))+(new_r01)+(((sj3)*(x482))));
evalcond[6]=((((new_r10)*(sj3)))+(x483)+(((IkReal(-1.00000000000000))*(cj4)*(x488))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x484)*(x488)))+(x489)+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj3)*(x488)))+(((x481)*(x485)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj3)*(x490)))+(new_r10)+(((IkReal(-1.00000000000000))*(x485)*(x488))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x487)))+(((new_r11)*(x485)))+(x481)+(((new_r01)*(x484))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x488)))+(((IkReal(-1.00000000000000))*(new_r20)*(x487)))+(((new_r10)*(x485)))+(((cj4)*(x483))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x492 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x492.valid ) {
    continue;
}
IkReal x491=x492.value;
CheckValue<IkReal> x493 = IKPowWithIntegerCheck(sj3,-1.00000000000000);
if( !x493.valid ) {
    continue;
}
if( IKabs(((x491)*(x493.value)*(((((IkReal(-1.00000000000000))*(cj3)*(cj4)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x491))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x491)*(x493.value)*(((((IkReal(-1.00000000000000))*(cj3)*(cj4)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x491)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x491)*(x493.value)*(((((IkReal(-1.00000000000000))*(cj3)*(cj4)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x491)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x494=IKsin(j5);
IkReal x495=IKcos(j5);
IkReal x496=((cj3)*(new_r00));
IkReal x497=((cj3)*(cj4));
IkReal x498=((cj4)*(sj3));
IkReal x499=((IkReal(1.00000000000000))*(sj3));
IkReal x500=((IkReal(1.00000000000000))*(sj4));
IkReal x501=((IkReal(1.00000000000000))*(x495));
IkReal x502=((sj3)*(x494));
IkReal x503=((IkReal(1.00000000000000))*(x494));
evalcond[0]=((((sj4)*(x495)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x494)*(x500)))+(new_r21));
evalcond[2]=((((new_r11)*(sj3)))+(((cj4)*(x494)))+(((cj3)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x499)))+(((IkReal(-1.00000000000000))*(x503)))+(((cj3)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x499)))+(((IkReal(-1.00000000000000))*(x501)))+(((cj3)*(new_r11))));
evalcond[5]=((((x494)*(x497)))+(((sj3)*(x495)))+(new_r01));
evalcond[6]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(cj4)*(x501)))+(x496));
evalcond[7]=((((IkReal(-1.00000000000000))*(x497)*(x501)))+(x502)+(new_r00));
evalcond[8]=((((x494)*(x498)))+(((IkReal(-1.00000000000000))*(cj3)*(x501)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj3)*(x503)))+(new_r10)+(((IkReal(-1.00000000000000))*(x498)*(x501))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x500)))+(((new_r11)*(x498)))+(x494)+(((new_r01)*(x497))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x500)))+(((IkReal(-1.00000000000000))*(x501)))+(((cj4)*(x496)))+(((new_r10)*(x498))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x504 = IKatan2WithCheck(((gconst42)*(new_r21)),((IkReal(-1.00000000000000))*(gconst42)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x504.valid ) {
    continue;
}
j5array[0]=x504.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x505=IKsin(j5);
IkReal x506=IKcos(j5);
IkReal x507=((cj3)*(new_r00));
IkReal x508=((cj3)*(cj4));
IkReal x509=((cj4)*(sj3));
IkReal x510=((IkReal(1.00000000000000))*(sj3));
IkReal x511=((IkReal(1.00000000000000))*(sj4));
IkReal x512=((IkReal(1.00000000000000))*(x506));
IkReal x513=((sj3)*(x505));
IkReal x514=((IkReal(1.00000000000000))*(x505));
evalcond[0]=((((sj4)*(x506)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x505)*(x511)))+(new_r21));
evalcond[2]=((((new_r11)*(sj3)))+(((cj4)*(x505)))+(((cj3)*(new_r01))));
evalcond[3]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x510)))+(((IkReal(-1.00000000000000))*(x514))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x510)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x512))));
evalcond[5]=((((sj3)*(x506)))+(((x505)*(x508)))+(new_r01));
evalcond[6]=((((new_r10)*(sj3)))+(x507)+(((IkReal(-1.00000000000000))*(cj4)*(x512))));
evalcond[7]=((x513)+(new_r00)+(((IkReal(-1.00000000000000))*(x508)*(x512))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj3)*(x512)))+(((x505)*(x509)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj3)*(x514)))+(new_r10)+(((IkReal(-1.00000000000000))*(x509)*(x512))));
evalcond[10]=((((new_r11)*(x509)))+(x505)+(((new_r01)*(x508)))+(((IkReal(-1.00000000000000))*(new_r21)*(x511))));
evalcond[11]=((((cj4)*(x507)))+(((new_r10)*(x509)))+(((IkReal(-1.00000000000000))*(new_r20)*(x511)))+(((IkReal(-1.00000000000000))*(x512))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x515 = IKatan2WithCheck(((gconst13)*(new_r12)),((gconst13)*(new_r02)),IKFAST_ATAN2_MAGTHRESH);
if( !x515.valid ) {
    continue;
}
j3array[0]=x515.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x516=IKcos(j3);
IkReal x517=IKsin(j3);
IkReal x518=((IkReal(1.00000000000000))*(sj4));
IkReal x519=((IkReal(1.00000000000000))*(cj4));
IkReal x520=((new_r02)*(x516));
IkReal x521=((new_r12)*(x517));
evalcond[0]=((((IkReal(-1.00000000000000))*(x516)*(x518)))+(new_r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(x517)*(x518)))+(new_r12));
evalcond[2]=((((new_r12)*(x516)))+(((IkReal(-1.00000000000000))*(new_r02)*(x517))));
evalcond[3]=((x520)+(x521)+(((IkReal(-1.00000000000000))*(x518))));
evalcond[4]=((((cj4)*(x521)))+(((cj4)*(x520)))+(((IkReal(-1.00000000000000))*(new_r22)*(x518))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r10)*(x517)*(x518)))+(((IkReal(-1.00000000000000))*(new_r00)*(x516)*(x518)))+(((IkReal(-1.00000000000000))*(new_r20)*(x519))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r11)*(x517)*(x518)))+(((IkReal(-1.00000000000000))*(new_r21)*(x519)))+(((IkReal(-1.00000000000000))*(new_r01)*(x516)*(x518))));
evalcond[7]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x519)))+(((IkReal(-1.00000000000000))*(x518)*(x520)))+(((IkReal(-1.00000000000000))*(x518)*(x521))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=cj3;
dummyeval[1]=cj4;
dummyeval[2]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
bool bgotonextstatement = true;
do
{
IkReal x522=((new_r22)+(((IkReal(-1.00000000000000))*(cj4))));
IkReal x523=((((IkReal(-1.00000000000000))*(sj4)))+(new_r12));
IkReal x524=((IkReal(1.00000000000000))*(cj4));
IkReal x525=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j3))))), IkReal(6.28318530717959))));
evalcond[1]=x522;
evalcond[2]=x522;
evalcond[3]=new_r02;
evalcond[4]=x523;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x523;
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r22)*(x525)))+(((cj4)*(new_r12))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r20)*(x524)))+(((IkReal(-1.00000000000000))*(new_r10)*(x525))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r11)*(x525)))+(((IkReal(-1.00000000000000))*(new_r21)*(x524))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x524)))+(((IkReal(-1.00000000000000))*(new_r12)*(x525))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj4;
dummyeval[1]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
bool bgotonextstatement = true;
do
{
IkReal x526=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x526;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x526;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x527=IKcos(j5);
IkReal x528=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x527)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x528)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x528)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x527)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x529=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=new_r02;
evalcond[4]=x529;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x529;
evalcond[7]=new_r11;
evalcond[8]=new_r10;
evalcond[9]=new_r11;
evalcond[10]=new_r10;
evalcond[11]=new_r22;
evalcond[12]=new_r10;
evalcond[13]=new_r11;
evalcond[14]=x529;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x530=IKsin(j5);
IkReal x531=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x530)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x531)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(x530)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x531)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x532=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))));
evalcond[1]=x532;
evalcond[2]=x532;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r12;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x533=IKsin(j5);
IkReal x534=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x533)+(new_r11));
evalcond[1]=((((IkReal(-1.00000000000000))*(x534)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x533)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x534)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x535=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=x535;
evalcond[2]=x535;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=x535;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r11, ((IkReal(-1.00000000000000))*(new_r10)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x536=IKcos(j5);
IkReal x537=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x536)+(new_r10));
evalcond[1]=((((IkReal(-1.00000000000000))*(x537)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x537)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x536)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x538 = IKPowWithIntegerCheck(cj4,-1.00000000000000);
if( !x538.valid ) {
    continue;
}
CheckValue<IkReal> x539 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x539.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r11)*(x538.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x539.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r11)*(x538.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x539.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r11)*(x538.value)), ((IkReal(-1.00000000000000))*(new_r20)*(x539.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x540=IKsin(j5);
IkReal x541=IKcos(j5);
IkReal x542=((IkReal(1.00000000000000))*(sj4));
IkReal x543=((IkReal(1.00000000000000))*(x541));
IkReal x544=((IkReal(1.00000000000000))*(x540));
evalcond[0]=((new_r20)+(((sj4)*(x541))));
evalcond[1]=((((cj4)*(x540)))+(new_r11));
evalcond[2]=((((IkReal(-1.00000000000000))*(x540)*(x542)))+(new_r21));
evalcond[3]=((new_r10)+(((IkReal(-1.00000000000000))*(cj4)*(x543))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x544)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x543)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r21)*(x542)))+(x540));
evalcond[7]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x542)))+(((IkReal(-1.00000000000000))*(x543))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x545 = IKatan2WithCheck(((gconst43)*(new_r21)),((IkReal(-1.00000000000000))*(gconst43)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x545.valid ) {
    continue;
}
j5array[0]=x545.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x546=IKsin(j5);
IkReal x547=IKcos(j5);
IkReal x548=((IkReal(1.00000000000000))*(sj4));
IkReal x549=((IkReal(1.00000000000000))*(x547));
IkReal x550=((IkReal(1.00000000000000))*(x546));
evalcond[0]=((new_r20)+(((sj4)*(x547))));
evalcond[1]=((((cj4)*(x546)))+(new_r11));
evalcond[2]=((new_r21)+(((IkReal(-1.00000000000000))*(x546)*(x548))));
evalcond[3]=((new_r10)+(((IkReal(-1.00000000000000))*(cj4)*(x549))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x550)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x549)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[6]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r21)*(x548)))+(x546));
evalcond[7]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r20)*(x548)))+(((IkReal(-1.00000000000000))*(x549))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x551=((new_r22)+(((IkReal(-1.00000000000000))*(cj4))));
IkReal x552=((IkReal(1.00000000000000))*(cj4));
IkReal x553=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j3))))), IkReal(6.28318530717959))));
evalcond[1]=x551;
evalcond[2]=x551;
evalcond[3]=new_r02;
evalcond[4]=((sj4)+(new_r12));
evalcond[5]=new_r02;
evalcond[6]=new_r02;
evalcond[7]=((((IkReal(-1.00000000000000))*(x553)))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x553)))+(((IkReal(-1.00000000000000))*(new_r12)*(x552))));
evalcond[9]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r20)*(x552))));
evalcond[10]=((((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r21)*(x552))));
evalcond[11]=((IkReal(1.00000000000000))+(((new_r12)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r22)*(x552))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x554=IKcos(j5);
IkReal x555=IKsin(j5);
IkReal x556=((IkReal(1.00000000000000))*(cj4));
IkReal x557=((IkReal(1.00000000000000))*(sj4));
IkReal x558=((IkReal(1.00000000000000))*(x554));
IkReal x559=((IkReal(1.00000000000000))*(x555));
evalcond[0]=((((sj4)*(x554)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x559)))+(new_r00));
evalcond[2]=((((IkReal(-1.00000000000000))*(x558)))+(new_r01));
evalcond[3]=((((IkReal(-1.00000000000000))*(x555)*(x557)))+(new_r21));
evalcond[4]=((((cj4)*(x555)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x554)*(x556)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x557)))+(((IkReal(-1.00000000000000))*(new_r11)*(x556)))+(x555));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x556)))+(((IkReal(-1.00000000000000))*(x558)))+(((IkReal(-1.00000000000000))*(new_r20)*(x557))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x560=((IkReal(1.00000000000000))*(cj3));
IkReal x561=((new_r12)*(sj3));
IkReal x562=((new_r11)*(sj3));
IkReal x563=((IkReal(1.00000000000000))*(sj3));
IkReal x564=((((IkReal(-1.00000000000000))*(new_r02)*(x563)))+(((cj3)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((new_r02)+(((IkReal(-1.00000000000000))*(x560))));
evalcond[4]=((new_r12)+(((IkReal(-1.00000000000000))*(x563))));
evalcond[5]=x564;
evalcond[6]=x564;
evalcond[7]=((IkReal(-1.00000000000000))+(x561)+(((cj3)*(new_r02))));
evalcond[8]=((x562)+(((cj3)*(new_r01))));
evalcond[9]=((((new_r10)*(sj3)))+(((cj3)*(new_r00))));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r00)*(x560)))+(((IkReal(-1.00000000000000))*(new_r10)*(x563))));
evalcond[12]=((((IkReal(-1.00000000000000))*(x562)))+(((IkReal(-1.00000000000000))*(new_r01)*(x560))));
evalcond[13]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x560)))+(((IkReal(-1.00000000000000))*(x561))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x565=IKcos(j5);
IkReal x566=IKsin(j5);
IkReal x567=((IkReal(1.00000000000000))*(sj3));
IkReal x568=((IkReal(1.00000000000000))*(x566));
IkReal x569=((IkReal(1.00000000000000))*(x565));
evalcond[0]=((x565)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x568))));
evalcond[2]=((((sj3)*(x565)))+(new_r01));
evalcond[3]=((((sj3)*(x566)))+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj3)*(x569)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj3)*(x568)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r00)*(x567)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x568))));
evalcond[7]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x569)))+(((IkReal(-1.00000000000000))*(new_r01)*(x567))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x570=((((IkReal(-1.00000000000000))*(new_r02)*(sj3)))+(((cj3)*(new_r12))));
IkReal x571=((((new_r10)*(sj3)))+(((cj3)*(new_r00))));
IkReal x572=((((new_r11)*(sj3)))+(((cj3)*(new_r01))));
IkReal x573=((IkReal(1.00000000000000))+(((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((cj3)+(new_r02));
evalcond[4]=((sj3)+(new_r12));
evalcond[5]=x570;
evalcond[6]=x570;
evalcond[7]=x573;
evalcond[8]=x572;
evalcond[9]=x571;
evalcond[10]=new_r22;
evalcond[11]=x571;
evalcond[12]=x572;
evalcond[13]=x573;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x574=IKcos(j5);
IkReal x575=IKsin(j5);
IkReal x576=((IkReal(1.00000000000000))*(sj3));
IkReal x577=((IkReal(1.00000000000000))*(x574));
IkReal x578=((IkReal(1.00000000000000))*(x575));
evalcond[0]=((x575)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x577)))+(new_r20));
evalcond[2]=((((sj3)*(x574)))+(new_r01));
evalcond[3]=((((sj3)*(x575)))+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj3)*(x577)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj3)*(x578)))+(new_r10));
evalcond[6]=((((IkReal(-1.00000000000000))*(x578)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x576))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x577)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x576))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x579=((IkReal(-1.00000000000000))+(new_r22));
IkReal x580=((((IkReal(-1.00000000000000))*(new_r02)*(sj3)))+(((cj3)*(new_r12))));
IkReal x581=((((new_r12)*(sj3)))+(((cj3)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))));
evalcond[1]=x579;
evalcond[2]=x579;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x580;
evalcond[10]=x580;
evalcond[11]=x581;
evalcond[12]=x581;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst44;
CheckValue<IkReal> x582 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x582.valid ) {
    continue;
}
CheckValue<IkReal> x583 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x583.valid ) {
    continue;
}
gconst44=IKsign(((((IkReal(-1.00000000000000))*(x582.value)))+(((IkReal(-1.00000000000000))*(x583.value)))));
CheckValue<IkReal> x584 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x584.valid ) {
    continue;
}
CheckValue<IkReal> x585 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x585.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x584.value)))+(((IkReal(-1.00000000000000))*(x585.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
CheckValue<IkReal> x586 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x586.valid ) {
    continue;
}
CheckValue<IkReal> x587 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x587.valid ) {
    continue;
}
gconst45=IKsign(((((IkReal(-1.00000000000000))*(x586.value)))+(((IkReal(-1.00000000000000))*(x587.value)))));
CheckValue<IkReal> x588 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x588.valid ) {
    continue;
}
CheckValue<IkReal> x589 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x589.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x588.value)))+(((IkReal(-1.00000000000000))*(x589.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x590 = IKatan2WithCheck(((gconst45)*(((((new_r11)*(sj3)))+(((cj3)*(new_r01)))))),((gconst45)*(((((new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r11)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x590.valid ) {
    continue;
}
j5array[0]=x590.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x591=IKsin(j5);
IkReal x592=IKcos(j5);
IkReal x593=((IkReal(1.00000000000000))*(sj3));
IkReal x594=((IkReal(1.00000000000000))*(x592));
IkReal x595=((sj3)*(x591));
IkReal x596=((IkReal(1.00000000000000))*(x591));
IkReal x597=((cj3)*(x594));
evalcond[0]=((((new_r11)*(sj3)))+(x591)+(((cj3)*(new_r01))));
evalcond[1]=((((cj3)*(x591)))+(new_r01)+(((sj3)*(x592))));
evalcond[2]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x594)))+(((cj3)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x593)))+(((IkReal(-1.00000000000000))*(x596)))+(((cj3)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x593)))+(((IkReal(-1.00000000000000))*(x594)))+(((cj3)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x597)))+(x595)+(new_r00));
evalcond[6]=((((IkReal(-1.00000000000000))*(x597)))+(x595)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x592)*(x593)))+(((IkReal(-1.00000000000000))*(cj3)*(x596)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x598 = IKatan2WithCheck(((gconst44)*(((((new_r00)*(sj3)))+(((cj3)*(new_r01)))))),((gconst44)*(((((new_r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r00)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x598.valid ) {
    continue;
}
j5array[0]=x598.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x599=IKsin(j5);
IkReal x600=IKcos(j5);
IkReal x601=((IkReal(1.00000000000000))*(sj3));
IkReal x602=((IkReal(1.00000000000000))*(x600));
IkReal x603=((sj3)*(x599));
IkReal x604=((IkReal(1.00000000000000))*(x599));
IkReal x605=((cj3)*(x602));
evalcond[0]=((((new_r11)*(sj3)))+(x599)+(((cj3)*(new_r01))));
evalcond[1]=((((cj3)*(x599)))+(new_r01)+(((sj3)*(x600))));
evalcond[2]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x602)))+(((cj3)*(new_r00))));
evalcond[3]=((((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(x604)))+(((IkReal(-1.00000000000000))*(new_r00)*(x601))));
evalcond[4]=((((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(x602)))+(((IkReal(-1.00000000000000))*(new_r01)*(x601))));
evalcond[5]=((x603)+(((IkReal(-1.00000000000000))*(x605)))+(new_r00));
evalcond[6]=((x603)+(((IkReal(-1.00000000000000))*(x605)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj3)*(x604)))+(((IkReal(-1.00000000000000))*(x600)*(x601)))+(new_r10));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x606=((IkReal(1.00000000000000))+(new_r22));
IkReal x607=((new_r12)*(sj3));
IkReal x608=((IkReal(1.00000000000000))*(new_r02));
IkReal x609=((((IkReal(-1.00000000000000))*(sj3)*(x608)))+(((cj3)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=x606;
evalcond[2]=x606;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=x609;
evalcond[10]=x609;
evalcond[11]=((x607)+(((cj3)*(new_r02))));
evalcond[12]=((((IkReal(-1.00000000000000))*(cj3)*(x608)))+(((IkReal(-1.00000000000000))*(x607))));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x606;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst46;
CheckValue<IkReal> x610 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x610.valid ) {
    continue;
}
CheckValue<IkReal> x611 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x611.valid ) {
    continue;
}
gconst46=IKsign(((x610.value)+(x611.value)));
CheckValue<IkReal> x612 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x612.valid ) {
    continue;
}
CheckValue<IkReal> x613 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x613.valid ) {
    continue;
}
dummyeval[0]=((x612.value)+(x613.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst47;
CheckValue<IkReal> x614 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x614.valid ) {
    continue;
}
CheckValue<IkReal> x615 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x615.valid ) {
    continue;
}
gconst47=IKsign(((x614.value)+(x615.value)));
CheckValue<IkReal> x616 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x616.valid ) {
    continue;
}
CheckValue<IkReal> x617 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x617.valid ) {
    continue;
}
dummyeval[0]=((x616.value)+(x617.value));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x618=((IkReal(1.00000000000000))*(new_r00));
CheckValue<IkReal> x619 = IKatan2WithCheck(((gconst47)*(((((IkReal(-1.00000000000000))*(sj3)*(x618)))+(((cj3)*(new_r10)))))),((gconst47)*(((((IkReal(-1.00000000000000))*(cj3)*(x618)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x619.valid ) {
    continue;
}
j5array[0]=x619.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x620=IKsin(j5);
IkReal x621=IKcos(j5);
IkReal x622=((IkReal(1.00000000000000))*(sj3));
IkReal x623=((IkReal(1.00000000000000))*(x620));
IkReal x624=((sj3)*(x621));
IkReal x625=((IkReal(1.00000000000000))*(x621));
IkReal x626=((cj3)*(x623));
evalcond[0]=((((new_r10)*(sj3)))+(x621)+(((cj3)*(new_r00))));
evalcond[1]=((((new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x623)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(x621)))+(((sj3)*(x620)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x622)))+(((IkReal(-1.00000000000000))*(x623)))+(((cj3)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x622)))+(((IkReal(-1.00000000000000))*(x625)))+(((cj3)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x626)))+(x624)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x626)))+(x624)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x620)*(x622)))+(new_r11)+(((IkReal(-1.00000000000000))*(cj3)*(x625))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x627=((IkReal(1.00000000000000))*(sj3));
CheckValue<IkReal> x628 = IKatan2WithCheck(((gconst46)*(((((IkReal(-1.00000000000000))*(new_r00)*(x627)))+(((cj3)*(new_r01)))))),((gconst46)*(((((IkReal(-1.00000000000000))*(new_r01)*(x627)))+(((IkReal(-1.00000000000000))*(cj3)*(new_r00)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x628.valid ) {
    continue;
}
j5array[0]=x628.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x629=IKsin(j5);
IkReal x630=IKcos(j5);
IkReal x631=((IkReal(1.00000000000000))*(sj3));
IkReal x632=((IkReal(1.00000000000000))*(x629));
IkReal x633=((sj3)*(x630));
IkReal x634=((IkReal(1.00000000000000))*(x630));
IkReal x635=((cj3)*(x632));
evalcond[0]=((((new_r10)*(sj3)))+(x630)+(((cj3)*(new_r00))));
evalcond[1]=((((new_r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x632)))+(((cj3)*(new_r01))));
evalcond[2]=((((cj3)*(x630)))+(((sj3)*(x629)))+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x631)))+(((IkReal(-1.00000000000000))*(x632)))+(((cj3)*(new_r10))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x631)))+(((IkReal(-1.00000000000000))*(x634)))+(((cj3)*(new_r11))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x635)))+(x633)+(new_r01));
evalcond[6]=((((IkReal(-1.00000000000000))*(x635)))+(x633)+(new_r10));
evalcond[7]=((((IkReal(-1.00000000000000))*(x629)*(x631)))+(new_r11)+(((IkReal(-1.00000000000000))*(cj3)*(x634))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x636=((new_r22)+(((IkReal(-1.00000000000000))*(cj4))));
IkReal x637=((((IkReal(-1.00000000000000))*(sj4)))+(new_r02));
IkReal x638=((IkReal(1.00000000000000))*(cj4));
IkReal x639=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959))));
evalcond[1]=x636;
evalcond[2]=x636;
evalcond[3]=x637;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x637;
evalcond[8]=((((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r22)*(x639))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r00)*(x639)))+(((IkReal(-1.00000000000000))*(new_r20)*(x638))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r01)*(x639)))+(((IkReal(-1.00000000000000))*(new_r21)*(x638))));
evalcond[11]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02)*(x639)))+(((IkReal(-1.00000000000000))*(new_r22)*(x638))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x640=IKcos(j5);
IkReal x641=IKsin(j5);
IkReal x642=((IkReal(1.00000000000000))*(sj4));
IkReal x643=((IkReal(1.00000000000000))*(x640));
IkReal x644=((IkReal(1.00000000000000))*(x641));
evalcond[0]=((((sj4)*(x640)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x644)))+(new_r10));
evalcond[2]=((((IkReal(-1.00000000000000))*(x643)))+(new_r11));
evalcond[3]=((((cj4)*(x641)))+(new_r01));
evalcond[4]=((((IkReal(-1.00000000000000))*(x641)*(x642)))+(new_r21));
evalcond[5]=((new_r00)+(((IkReal(-1.00000000000000))*(cj4)*(x643))));
evalcond[6]=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r21)*(x642)))+(x641));
evalcond[7]=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(x643)))+(((IkReal(-1.00000000000000))*(new_r20)*(x642))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x645=((new_r22)+(((IkReal(-1.00000000000000))*(cj4))));
IkReal x646=((IkReal(1.00000000000000))*(cj4));
IkReal x647=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j3))))), IkReal(6.28318530717959))));
evalcond[1]=x645;
evalcond[2]=x645;
evalcond[3]=((sj4)+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((((IkReal(-1.00000000000000))*(x647)))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r02)*(x646)))+(((IkReal(-1.00000000000000))*(new_r22)*(x647))));
evalcond[8]=((((new_r00)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r20)*(x646))));
evalcond[9]=((((new_r01)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r21)*(x646))));
evalcond[10]=((IkReal(1.00000000000000))+(((new_r02)*(sj4)))+(((IkReal(-1.00000000000000))*(new_r22)*(x646))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(sj4);
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[14];
bool bgotonextstatement = true;
do
{
IkReal x648=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))));
evalcond[1]=x648;
evalcond[2]=x648;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r01, ((IkReal(-1.00000000000000))*(new_r11)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x649=IKsin(j5);
IkReal x650=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x649)+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x649)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x650)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x650)))+(((IkReal(-1.00000000000000))*(new_r00))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x651=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=x651;
evalcond[2]=x651;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=x651;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x652=IKcos(j5);
IkReal x653=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x652)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x653)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x652)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x653)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x654 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x654.valid ) {
    continue;
}
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x654.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x654.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), ((IkReal(-1.00000000000000))*(new_r20)*(x654.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x655=IKsin(j5);
IkReal x656=IKcos(j5);
IkReal x657=((IkReal(1.00000000000000))*(cj4));
IkReal x658=((IkReal(1.00000000000000))*(sj4));
IkReal x659=((IkReal(1.00000000000000))*(x656));
IkReal x660=((IkReal(1.00000000000000))*(x655));
evalcond[0]=((((sj4)*(x656)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x655)*(x658)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x660)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((cj4)*(x655)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x656)*(x657)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r01)*(x657)))+(x655)+(((IkReal(-1.00000000000000))*(new_r21)*(x658))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r00)*(x657)))+(((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(new_r20)*(x658))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x661 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x661.valid ) {
    continue;
}
if( IKabs(((new_r21)*(x661.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r11))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(x661.value)))+IKsqr(((IkReal(-1.00000000000000))*(new_r11)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((new_r21)*(x661.value)), ((IkReal(-1.00000000000000))*(new_r11)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x662=IKsin(j5);
IkReal x663=IKcos(j5);
IkReal x664=((IkReal(1.00000000000000))*(cj4));
IkReal x665=((IkReal(1.00000000000000))*(sj4));
IkReal x666=((IkReal(1.00000000000000))*(x663));
IkReal x667=((IkReal(1.00000000000000))*(x662));
evalcond[0]=((((sj4)*(x663)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x662)*(x665)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x667)))+(((IkReal(-1.00000000000000))*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x666)))+(((IkReal(-1.00000000000000))*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)))+(((cj4)*(x662))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x663)*(x664)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x665)))+(x662)+(((IkReal(-1.00000000000000))*(new_r01)*(x664))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x666)))+(((IkReal(-1.00000000000000))*(new_r00)*(x664)))+(((IkReal(-1.00000000000000))*(new_r20)*(x665))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x668 = IKatan2WithCheck(((gconst48)*(new_r21)),((IkReal(-1.00000000000000))*(gconst48)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x668.valid ) {
    continue;
}
j5array[0]=x668.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x669=IKsin(j5);
IkReal x670=IKcos(j5);
IkReal x671=((IkReal(1.00000000000000))*(cj4));
IkReal x672=((IkReal(1.00000000000000))*(sj4));
IkReal x673=((IkReal(1.00000000000000))*(x670));
IkReal x674=((IkReal(1.00000000000000))*(x669));
evalcond[0]=((((sj4)*(x670)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x669)*(x672)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x674))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)))+(((IkReal(-1.00000000000000))*(x673))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)))+(((cj4)*(x669))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x670)*(x671)))+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r01)*(x671)))+(((IkReal(-1.00000000000000))*(new_r21)*(x672)))+(x669));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r00)*(x671)))+(((IkReal(-1.00000000000000))*(new_r20)*(x672)))+(((IkReal(-1.00000000000000))*(x673))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x675=((IkReal(-1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x675;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x675;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x676=IKcos(j5);
IkReal x677=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x676)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x677))));
evalcond[2]=((new_r10)+(((IkReal(-1.00000000000000))*(x677))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x676)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j3))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x678=IKcos(j5);
IkReal x679=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x678)+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x679))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x679))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x678)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x680=((IkReal(1.00000000000000))+(new_r02));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x680;
evalcond[4]=new_r12;
evalcond[5]=new_r12;
evalcond[6]=new_r12;
evalcond[7]=x680;
evalcond[8]=new_r01;
evalcond[9]=new_r01;
evalcond[10]=new_r00;
evalcond[11]=new_r00;
evalcond[12]=new_r22;
evalcond[13]=new_r00;
evalcond[14]=new_r01;
evalcond[15]=x680;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x681=IKsin(j5);
IkReal x682=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x681)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x682)))+(new_r20));
evalcond[2]=((new_r10)+(((IkReal(-1.00000000000000))*(x681))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x682)))+(new_r11));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j3))))), IkReal(6.28318530717959)))))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=((IkReal(-1.00000000000000))+(new_r02));
evalcond[4]=new_r12;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r02))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r01));
evalcond[8]=new_r01;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r00));
evalcond[10]=new_r00;
evalcond[11]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x683=IKsin(j5);
IkReal x684=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x683)+(new_r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(x684)))+(new_r20));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)))+(((IkReal(-1.00000000000000))*(x683))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x684)))+(((IkReal(-1.00000000000000))*(new_r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x685=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j4))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959)))))));
evalcond[1]=x685;
evalcond[2]=x685;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=new_r02;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[14]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[15]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r01)))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r01)), new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x686=IKsin(j5);
IkReal x687=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((x686)+(new_r01));
evalcond[1]=((new_r10)+(((IkReal(-1.00000000000000))*(x686))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x687)))+(new_r11));
evalcond[3]=((((IkReal(-1.00000000000000))*(x687)))+(new_r00));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x688=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-3.14159265358979))+(j4))))), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(j3))), IkReal(6.28318530717959)))))));
evalcond[1]=x688;
evalcond[2]=x688;
evalcond[3]=new_r20;
evalcond[4]=new_r20;
evalcond[5]=new_r02;
evalcond[6]=new_r12;
evalcond[7]=new_r21;
evalcond[8]=new_r21;
evalcond[9]=new_r12;
evalcond[10]=new_r12;
evalcond[11]=new_r02;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[13]=new_r20;
evalcond[14]=new_r21;
evalcond[15]=x688;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((IkReal(-1.00000000000000))*(new_r00)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, ((IkReal(-1.00000000000000))*(new_r00)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x689=IKcos(j5);
IkReal x690=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((x689)+(new_r00));
evalcond[1]=((((IkReal(-1.00000000000000))*(x690)))+(new_r10));
evalcond[2]=((new_r11)+(((IkReal(-1.00000000000000))*(x689))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x690)))+(new_r01));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x692 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x692.valid ) {
    continue;
}
IkReal x691=x692.value;
CheckValue<IkReal> x693 = IKPowWithIntegerCheck(cj3,-1.00000000000000);
if( !x693.valid ) {
    continue;
}
CheckValue<IkReal> x694 = IKPowWithIntegerCheck(cj4,-1.00000000000000);
if( !x694.valid ) {
    continue;
}
if( IKabs(((x691)*(x693.value)*(x694.value)*(((((new_r20)*(sj3)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x691))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x691)*(x693.value)*(x694.value)*(((((new_r20)*(sj3)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x691)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x691)*(x693.value)*(x694.value)*(((((new_r20)*(sj3)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x691)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x695=IKsin(j5);
IkReal x696=IKcos(j5);
IkReal x697=((cj3)*(new_r00));
IkReal x698=((cj3)*(cj4));
IkReal x699=((cj4)*(sj3));
IkReal x700=((IkReal(1.00000000000000))*(sj3));
IkReal x701=((IkReal(1.00000000000000))*(sj4));
IkReal x702=((IkReal(1.00000000000000))*(x696));
IkReal x703=((sj3)*(x695));
IkReal x704=((IkReal(1.00000000000000))*(x695));
evalcond[0]=((((sj4)*(x696)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x695)*(x701)))+(new_r21));
evalcond[2]=((((cj4)*(x695)))+(((new_r11)*(sj3)))+(((cj3)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x704)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x700))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x702)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x700))));
evalcond[5]=((((x695)*(x698)))+(((sj3)*(x696)))+(new_r01));
evalcond[6]=((((new_r10)*(sj3)))+(x697)+(((IkReal(-1.00000000000000))*(cj4)*(x702))));
evalcond[7]=((x703)+(((IkReal(-1.00000000000000))*(x698)*(x702)))+(new_r00));
evalcond[8]=((((x695)*(x699)))+(((IkReal(-1.00000000000000))*(cj3)*(x702)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj3)*(x704)))+(((IkReal(-1.00000000000000))*(x699)*(x702)))+(new_r10));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x701)))+(((new_r11)*(x699)))+(x695)+(((new_r01)*(x698))));
evalcond[11]=((((cj4)*(x697)))+(((IkReal(-1.00000000000000))*(new_r20)*(x701)))+(((new_r10)*(x699)))+(((IkReal(-1.00000000000000))*(x702))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x706 = IKPowWithIntegerCheck(sj4,-1.00000000000000);
if( !x706.valid ) {
    continue;
}
IkReal x705=x706.value;
CheckValue<IkReal> x707 = IKPowWithIntegerCheck(sj3,-1.00000000000000);
if( !x707.valid ) {
    continue;
}
if( IKabs(((x705)*(x707.value)*(((((IkReal(-1.00000000000000))*(cj3)*(cj4)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x705))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x705)*(x707.value)*(((((IkReal(-1.00000000000000))*(cj3)*(cj4)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x705)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x705)*(x707.value)*(((((IkReal(-1.00000000000000))*(cj3)*(cj4)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x705)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x708=IKsin(j5);
IkReal x709=IKcos(j5);
IkReal x710=((cj3)*(new_r00));
IkReal x711=((cj3)*(cj4));
IkReal x712=((cj4)*(sj3));
IkReal x713=((IkReal(1.00000000000000))*(sj3));
IkReal x714=((IkReal(1.00000000000000))*(sj4));
IkReal x715=((IkReal(1.00000000000000))*(x709));
IkReal x716=((sj3)*(x708));
IkReal x717=((IkReal(1.00000000000000))*(x708));
evalcond[0]=((new_r20)+(((sj4)*(x709))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x708)*(x714)))+(new_r21));
evalcond[2]=((((cj4)*(x708)))+(((new_r11)*(sj3)))+(((cj3)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x717)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x713))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x715)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x713))));
evalcond[5]=((((sj3)*(x709)))+(new_r01)+(((x708)*(x711))));
evalcond[6]=((((new_r10)*(sj3)))+(x710)+(((IkReal(-1.00000000000000))*(cj4)*(x715))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x711)*(x715)))+(x716)+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj3)*(x715)))+(new_r11)+(((x708)*(x712))));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj3)*(x717)))+(((IkReal(-1.00000000000000))*(x712)*(x715)))+(new_r10));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x714)))+(((new_r01)*(x711)))+(((new_r11)*(x712)))+(x708));
evalcond[11]=((((cj4)*(x710)))+(((IkReal(-1.00000000000000))*(new_r20)*(x714)))+(((IkReal(-1.00000000000000))*(x715)))+(((new_r10)*(x712))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x718 = IKatan2WithCheck(((gconst42)*(new_r21)),((IkReal(-1.00000000000000))*(gconst42)*(new_r20)),IKFAST_ATAN2_MAGTHRESH);
if( !x718.valid ) {
    continue;
}
j5array[0]=x718.value;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x719=IKsin(j5);
IkReal x720=IKcos(j5);
IkReal x721=((cj3)*(new_r00));
IkReal x722=((cj3)*(cj4));
IkReal x723=((cj4)*(sj3));
IkReal x724=((IkReal(1.00000000000000))*(sj3));
IkReal x725=((IkReal(1.00000000000000))*(sj4));
IkReal x726=((IkReal(1.00000000000000))*(x720));
IkReal x727=((sj3)*(x719));
IkReal x728=((IkReal(1.00000000000000))*(x719));
evalcond[0]=((new_r20)+(((sj4)*(x720))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x719)*(x725))));
evalcond[2]=((((cj4)*(x719)))+(((new_r11)*(sj3)))+(((cj3)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x728)))+(((cj3)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x724))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x726)))+(((cj3)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x724))));
evalcond[5]=((((sj3)*(x720)))+(((x719)*(x722)))+(new_r01));
evalcond[6]=((((new_r10)*(sj3)))+(((IkReal(-1.00000000000000))*(cj4)*(x726)))+(x721));
evalcond[7]=((((IkReal(-1.00000000000000))*(x722)*(x726)))+(x727)+(new_r00));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj3)*(x726)))+(((x719)*(x723)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(x723)*(x726)))+(((IkReal(-1.00000000000000))*(cj3)*(x728)))+(new_r10));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r21)*(x725)))+(((new_r01)*(x722)))+(x719)+(((new_r11)*(x723))));
evalcond[11]=((((cj4)*(x721)))+(((IkReal(-1.00000000000000))*(new_r20)*(x725)))+(((IkReal(-1.00000000000000))*(x726)))+(((new_r10)*(x723))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "1212e32be9160d1dd10dda70c49c46d3"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
