/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

// define when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
extern "C"
{
    bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions);
    int getNumFreeParameters();
    int* getFreeParameters();
    int getNumJoints();
    int getIKRealSize();
}
#endif

int getNumFreeParameters() { return 1; }
int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
int getNumJoints() { return 7; }

int getIKRealSize() { return sizeof(IKReal); }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j1, cj1, sj1,
    j2, cj2, sj2,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    j6, cj6, sj6,
    j0=pfree[0], cj0=cos(pfree[0]), sj0=sin(pfree[0]),
    _r00, r00 = eerot[0*3+0],
    _r01, r01 = eerot[0*3+1],
    _r02, r02 = eerot[0*3+2],
    _r10, r10 = eerot[1*3+0],
    _r11, r11 = eerot[1*3+1],
    _r12, r12 = eerot[1*3+2],
    _r20, r20 = eerot[2*3+0],
    _r21, r21 = eerot[2*3+1],
    _r22, r22 = eerot[2*3+2],
    _px, _py, _pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    _r00=r00;
    _r01=r01;
    _r02=r02;
    _px=((0.174400000000000)+(px));
    _r10=r10;
    _r11=r11;
    _r12=r12;
    _py=py;
    _r20=r20;
    _r21=r21;
    _r22=r22;
    _pz=pz;
    r00 = _r00; r01 = _r01; r02 = _r02; r10 = _r10; r11 = _r11; r12 = _r12; r20 = _r20; r21 = _r21; r22 = _r22; px = _px; py = _py; pz = _pz;
    {
    IKReal evalcond;
        evalcond=j0;
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j2eval[1];
            j2eval[0]=IKsin(j3);
            if( IKabs(j2eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=IKsin(j3);
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j1eval[7];
                        IKReal x0=((0.261699999999109)*(cj3));
                        IKReal x1=((x0)+(py));
                        IKReal x2=((-0.310199999999895)+(((-1.00000000000000)*(x1))));
                        j1eval[0]=x2;
                        j1eval[1]=x2;
                        j1eval[2]=x2;
                        j1eval[3]=x2;
                        j1eval[4]=x2;
                        j1eval[5]=x2;
                        j1eval[6]=x2;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  && IKabs(j1eval[6]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal evalcond;
                                evalcond=j3;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j2array[2], cj2array[2], sj2array[2];
                                bool j2valid[2]={false};
                                IKReal x3=((-1.00000000000000)*(px));
                                IKReal x4=((-1.00000000000000)*(pz));
                                IKReal x5=IKatan2(x3, x4);
                                j2array[0]=((-1.00000000000000)*(x5));
                                sj2array[0]=IKsin(j2array[0]);
                                cj2array[0]=IKcos(j2array[0]);
                                j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x5))));
                                sj2array[1]=IKsin(j2array[1]);
                                cj2array[1]=IKcos(j2array[1]);
                                if( j2array[0] > IKPI )
                                    j2array[0]-=IK2PI;
                                else if( j2array[0] < -IKPI )
                                    j2array[0]+=IK2PI;
                                j2valid[0] = true;
                                if( j2array[1] > IKPI )
                                    j2array[1]-=IK2PI;
                                else if( j2array[1] < -IKPI )
                                    j2array[1]+=IK2PI;
                                j2valid[1] = true;
                                if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                                    j2valid[1]=false;
                                for(int ij2 = 0; ij2 < 2; ++ij2) {
                                if( !j2valid[ij2] )
                                    continue;
                                j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                                
                                _r00=((((r20)*(sj2)))+(((cj1)*(cj2)*(r00)))+(((cj2)*(r10)*(sj1))));
                                _r01=((((cj2)*(r11)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((r21)*(sj2))));
                                _r02=((((r22)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj1)*(cj2)*(r02))));
                                _r10=((((cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r20)*(sj3))));
                                _r11=((((cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r11)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((cj2)*(r21)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r12))));
                                _r20=((((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r20))));
                                _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2))));
                                _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r12)*(sj3)))+(((cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r12;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r02, _r22);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x6=IKcos(j4);
                                        IKReal x7=((IKabs(x6) != 0)?((IKReal)1/(x6)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r01)*(x7)), ((_r00)*(x7)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x8=IKcos(j4);
                                            IKReal x9=((IKabs(x8) != 0)?((IKReal)1/(x8)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r01)*(x9)), ((_r00)*(x9)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            evalcond=IKsin(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x10=IKcos(j5);
                                                IKReal x11=((IKabs(x10) != 0)?((IKReal)1/(x10)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x11)), ((_r11)*(x11)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x12=IKcos(j4);
                                                IKReal x13=((IKabs(x12) != 0)?((IKReal)1/(x12)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r01)*(x13)), ((_r00)*(x13)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x14=IKsin(j4);
                                            IKReal x15=((IKabs(x14) != 0)?(pow(x14,-2.00000000000000)):(IKReal)1.0e30);
                                            IKReal x16=IKsin(j5);
                                            IKReal x17=((IKabs(x16) != 0)?(pow(x16,-2.00000000000000)):(IKReal)1.0e30);
                                            IKReal x18=IKcos(j4);
                                            IKReal x19=(x18)*(x18);
                                            IKReal x20=((x15)*(x17)*(x19));
                                            IKReal x21=((1.00000000000000)+(x20));
                                            IKReal x22=((IKabs(x21) != 0)?((IKReal)1/(x21)):(IKReal)1.0e30);
                                            IKReal x23=((IKabs(x14) != 0)?((IKReal)1/(x14)):(IKReal)1.0e30);
                                            IKReal x24=((IKabs(x16) != 0)?((IKReal)1/(x16)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((((_r01)*(x15)*(x17)*(x18)*(x22)))+(((_r00)*(x22)*(x23)*(x24)))), ((((_r00)*(x15)*(x17)*(x18)*(x22)))+(((-1.00000000000000)*(_r01)*(x22)*(x23)*(x24)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j2array[1], cj2array[1], sj2array[1];
                                bool j2valid[1]={false};
                                IKReal x25=((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30);
                                j2array[0]=IKatan2(((3.82116927779862)*(px)*(x25)), ((-3.82116927779862)*(pz)*(x25)));
                                sj2array[0]=IKsin(j2array[0]);
                                cj2array[0]=IKcos(j2array[0]);
                                if( j2array[0] > IKPI )
                                    j2array[0]-=IK2PI;
                                else if( j2array[0] < -IKPI )
                                    j2array[0]+=IK2PI;
                                j2valid[0] = true;
                                { int ij2 = 0;
                                if( !j2valid[ij2] )
                                    continue;
                                j2 = j2array[0]; cj2 = cj2array[0]; sj2 = sj2array[0];
                                
                                _r00=((((r20)*(sj2)))+(((cj1)*(cj2)*(r00)))+(((cj2)*(r10)*(sj1))));
                                _r01=((((cj2)*(r11)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((r21)*(sj2))));
                                _r02=((((r22)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj1)*(cj2)*(r02))));
                                _r10=((((cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r20)*(sj3))));
                                _r11=((((cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r11)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((cj2)*(r21)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r12))));
                                _r20=((((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r20))));
                                _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2))));
                                _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r12)*(sj3)))+(((cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r12;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r02, _r22);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x26=IKcos(j4);
                                        IKReal x27=((IKabs(x26) != 0)?((IKReal)1/(x26)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r01)*(x27)), ((_r00)*(x27)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x28=IKcos(j4);
                                            IKReal x29=((IKabs(x28) != 0)?((IKReal)1/(x28)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r01)*(x29)), ((_r00)*(x29)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            evalcond=IKsin(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x30=IKcos(j5);
                                                IKReal x31=((IKabs(x30) != 0)?((IKReal)1/(x30)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x31)), ((_r11)*(x31)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x32=IKcos(j4);
                                                IKReal x33=((IKabs(x32) != 0)?((IKReal)1/(x32)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r01)*(x33)), ((_r00)*(x33)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x34=IKsin(j4);
                                            IKReal x35=((IKabs(x34) != 0)?(pow(x34,-2.00000000000000)):(IKReal)1.0e30);
                                            IKReal x36=IKsin(j5);
                                            IKReal x37=((IKabs(x36) != 0)?(pow(x36,-2.00000000000000)):(IKReal)1.0e30);
                                            IKReal x38=IKcos(j4);
                                            IKReal x39=(x38)*(x38);
                                            IKReal x40=((x35)*(x37)*(x39));
                                            IKReal x41=((1.00000000000000)+(x40));
                                            IKReal x42=((IKabs(x41) != 0)?((IKReal)1/(x41)):(IKReal)1.0e30);
                                            IKReal x43=((IKabs(x34) != 0)?((IKReal)1/(x34)):(IKReal)1.0e30);
                                            IKReal x44=((IKabs(x36) != 0)?((IKReal)1/(x36)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((((_r01)*(x35)*(x37)*(x38)*(x42)))+(((_r00)*(x42)*(x43)*(x44)))), ((((-1.00000000000000)*(_r01)*(x42)*(x43)*(x44)))+(((_r00)*(x35)*(x37)*(x38)*(x42)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j2eval[7];
                        IKReal x45=((0.261699999999109)*(sj3));
                        IKReal x46=((x45)+(pz));
                        IKReal x47=((-1.00000000000000)*(x46));
                        j2eval[0]=x47;
                        j2eval[1]=x47;
                        j2eval[2]=x47;
                        j2eval[3]=x47;
                        j2eval[4]=x47;
                        j2eval[5]=x47;
                        j2eval[6]=x47;
                        if( IKabs(j2eval[0]) < 0.000100  && IKabs(j2eval[1]) < 0.000100  && IKabs(j2eval[2]) < 0.000100  && IKabs(j2eval[3]) < 0.000100  && IKabs(j2eval[4]) < 0.000100  && IKabs(j2eval[5]) < 0.000100  && IKabs(j2eval[6]) < 0.000100  ) {
                            {
                            j2 = 0.000000; sj2 = 0.000000; cj2 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x48=((0.261699999999109)*(cj3));
                            IKReal x49=((0.310199999999895)+(x48));
                            IKReal x50=((IKabs(x49) != 0)?((IKReal)1/(x49)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((px)*(x50)), ((-1.00000000000000)*(py)*(x50)));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((r20)*(sj2)))+(((cj1)*(cj2)*(r00)))+(((cj2)*(r10)*(sj1))));
                            _r01=((((cj2)*(r11)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((r21)*(sj2))));
                            _r02=((((r22)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj1)*(cj2)*(r02))));
                            _r10=((((cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r20)*(sj3))));
                            _r11=((((cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r11)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((cj2)*(r21)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r12))));
                            _r20=((((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r20))));
                            _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2))));
                            _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r12)*(sj3)))+(((cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(_r02, _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x51=IKcos(j4);
                                    IKReal x52=((IKabs(x51) != 0)?((IKReal)1/(x51)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r01)*(x52)), ((_r00)*(x52)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x53=IKcos(j4);
                                        IKReal x54=((IKabs(x53) != 0)?((IKReal)1/(x53)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r01)*(x54)), ((_r00)*(x54)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        evalcond=IKsin(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x55=IKcos(j5);
                                            IKReal x56=((IKabs(x55) != 0)?((IKReal)1/(x55)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x56)), ((_r11)*(x56)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x57=IKcos(j4);
                                            IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r01)*(x58)), ((_r00)*(x58)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x59=IKsin(j4);
                                        IKReal x60=((IKabs(x59) != 0)?(pow(x59,-2.00000000000000)):(IKReal)1.0e30);
                                        IKReal x61=IKsin(j5);
                                        IKReal x62=((IKabs(x61) != 0)?(pow(x61,-2.00000000000000)):(IKReal)1.0e30);
                                        IKReal x63=IKcos(j4);
                                        IKReal x64=(x63)*(x63);
                                        IKReal x65=((x60)*(x62)*(x64));
                                        IKReal x66=((1.00000000000000)+(x65));
                                        IKReal x67=((IKabs(x66) != 0)?((IKReal)1/(x66)):(IKReal)1.0e30);
                                        IKReal x68=((IKabs(x59) != 0)?((IKReal)1/(x59)):(IKReal)1.0e30);
                                        IKReal x69=((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((((_r01)*(x60)*(x62)*(x63)*(x67)))+(((_r00)*(x67)*(x68)*(x69)))), ((((-1.00000000000000)*(_r01)*(x67)*(x68)*(x69)))+(((_r00)*(x60)*(x62)*(x63)*(x67)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j2array[2], cj2array[2], sj2array[2];
                    bool j2valid[2]={false};
                    cj2array[0]=((-3.82116927779862)*(pz)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30)));
                    if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                        j2valid[0] = j2valid[1] = true;
                        j2array[0] = IKacos(cj2array[0]);
                        sj2array[0] = IKsin(j2array[0]);
                        cj2array[1] = cj2array[0];
                        j2array[1] = -j2array[0];
                        sj2array[1] = -sj2array[0];
                    }
                    else if( isnan(cj2array[0]) ) {
                        // probably any value will work
                        j2valid[0] = true;
                        cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                    }
                    if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                        j2valid[1]=false;
                    for(int ij2 = 0; ij2 < 2; ++ij2) {
                    if( !j2valid[ij2] )
                        continue;
                    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x70=(px)*(px);
                    IKReal x71=(py)*(py);
                    IKReal x72=((x71)+(x70));
                    IKReal x73=((IKabs(x72) != 0)?((IKReal)1/(x72)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((0.310199999999895)*(px)*(x73)))+(((0.261699999999109)*(cj3)*(px)*(x73)))+(((0.261699999999109)*(py)*(sj2)*(sj3)*(x73)))), ((((-0.310199999999895)*(py)*(x73)))+(((-0.261699999999109)*(cj3)*(py)*(x73)))+(((0.261699999999109)*(px)*(sj2)*(sj3)*(x73)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((r20)*(sj2)))+(((cj1)*(cj2)*(r00)))+(((cj2)*(r10)*(sj1))));
                    _r01=((((cj2)*(r11)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((r21)*(sj2))));
                    _r02=((((r22)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj1)*(cj2)*(r02))));
                    _r10=((((cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r20)*(sj3))));
                    _r11=((((cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r11)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((cj2)*(r21)*(sj3))));
                    _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r12))));
                    _r20=((((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r20))));
                    _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2))));
                    _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r12)*(sj3)))+(((cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                    {
                    IKReal j5eval;
                    j5eval=_r12;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(_r02, _r22);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x74=IKcos(j4);
                            IKReal x75=((IKabs(x74) != 0)?((IKReal)1/(x74)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r01)*(x75)), ((_r00)*(x75)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal evalcond;
                                evalcond=IKsin(j4);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x76=IKcos(j4);
                                IKReal x77=((IKabs(x76) != 0)?((IKReal)1/(x76)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r01)*(x77)), ((_r00)*(x77)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                evalcond=IKsin(j5);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x78=IKcos(j5);
                                    IKReal x79=((IKabs(x78) != 0)?((IKReal)1/(x78)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x79)), ((_r11)*(x79)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x80=IKcos(j4);
                                    IKReal x81=((IKabs(x80) != 0)?((IKReal)1/(x80)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r01)*(x81)), ((_r00)*(x81)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x82=IKsin(j4);
                                IKReal x83=((IKabs(x82) != 0)?(pow(x82,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x84=IKsin(j5);
                                IKReal x85=((IKabs(x84) != 0)?(pow(x84,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x86=IKcos(j4);
                                IKReal x87=(x86)*(x86);
                                IKReal x88=((x83)*(x85)*(x87));
                                IKReal x89=((1.00000000000000)+(x88));
                                IKReal x90=((IKabs(x89) != 0)?((IKReal)1/(x89)):(IKReal)1.0e30);
                                IKReal x91=((IKabs(x82) != 0)?((IKReal)1/(x82)):(IKReal)1.0e30);
                                IKReal x92=((IKabs(x84) != 0)?((IKReal)1/(x84)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((_r00)*(x90)*(x91)*(x92)))+(((_r01)*(x83)*(x85)*(x86)*(x90)))), ((((-1.00000000000000)*(_r01)*(x90)*(x91)*(x92)))+(((_r00)*(x83)*(x85)*(x86)*(x90)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j2array[2], cj2array[2], sj2array[2];
                bool j2valid[2]={false};
                cj2array[0]=((-3.82116927779862)*(pz)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30)));
                if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                    j2valid[0] = j2valid[1] = true;
                    j2array[0] = IKacos(cj2array[0]);
                    sj2array[0] = IKsin(j2array[0]);
                    cj2array[1] = cj2array[0];
                    j2array[1] = -j2array[0];
                    sj2array[1] = -sj2array[0];
                }
                else if( isnan(cj2array[0]) ) {
                    // probably any value will work
                    j2valid[0] = true;
                    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                }
                if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                    j2valid[1]=false;
                for(int ij2 = 0; ij2 < 2; ++ij2) {
                if( !j2valid[ij2] )
                    continue;
                j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x93=(px)*(px);
                IKReal x94=(py)*(py);
                IKReal x95=((x93)+(x94));
                IKReal x96=((IKabs(x95) != 0)?((IKReal)1/(x95)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((0.310199999999895)*(px)*(x96)))+(((0.261699999999109)*(py)*(sj2)*(sj3)*(x96)))+(((0.261699999999109)*(cj3)*(px)*(x96)))), ((((0.261699999999109)*(px)*(sj2)*(sj3)*(x96)))+(((-0.310199999999895)*(py)*(x96)))+(((-0.261699999999109)*(cj3)*(py)*(x96)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((r20)*(sj2)))+(((cj1)*(cj2)*(r00)))+(((cj2)*(r10)*(sj1))));
                _r01=((((cj2)*(r11)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((r21)*(sj2))));
                _r02=((((r22)*(sj2)))+(((cj2)*(r12)*(sj1)))+(((cj1)*(cj2)*(r02))));
                _r10=((((cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(r10)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r20)*(sj3))));
                _r11=((((cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r11)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((cj2)*(r21)*(sj3))));
                _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r12))));
                _r20=((((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r20))));
                _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2))));
                _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r12)*(sj3)))+(((cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                {
                IKReal j5eval;
                j5eval=_r12;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(_r02, _r22);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKsin(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x97=IKcos(j4);
                        IKReal x98=((IKabs(x97) != 0)?((IKReal)1/(x97)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r01)*(x98)), ((_r00)*(x98)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x99=IKcos(j4);
                            IKReal x100=((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r01)*(x100)), ((_r00)*(x100)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                            evalcond=IKsin(j5);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal evalcond;
                                evalcond=IKcos(j4);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x101=IKcos(j5);
                                IKReal x102=((IKabs(x101) != 0)?((IKReal)1/(x101)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x102)), ((_r11)*(x102)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x103=IKcos(j4);
                                IKReal x104=((IKabs(x103) != 0)?((IKReal)1/(x103)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r01)*(x104)), ((_r00)*(x104)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x105=IKsin(j4);
                            IKReal x106=((IKabs(x105) != 0)?(pow(x105,-2.00000000000000)):(IKReal)1.0e30);
                            IKReal x107=IKsin(j5);
                            IKReal x108=((IKabs(x107) != 0)?(pow(x107,-2.00000000000000)):(IKReal)1.0e30);
                            IKReal x109=IKcos(j4);
                            IKReal x110=(x109)*(x109);
                            IKReal x111=((x106)*(x108)*(x110));
                            IKReal x112=((1.00000000000000)+(x111));
                            IKReal x113=((IKabs(x112) != 0)?((IKReal)1/(x112)):(IKReal)1.0e30);
                            IKReal x114=((IKabs(x105) != 0)?((IKReal)1/(x105)):(IKReal)1.0e30);
                            IKReal x115=((IKabs(x107) != 0)?((IKReal)1/(x107)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((((_r01)*(x106)*(x108)*(x109)*(x113)))+(((_r00)*(x113)*(x114)*(x115)))), ((((-1.00000000000000)*(_r01)*(x113)*(x114)*(x115)))+(((_r00)*(x106)*(x108)*(x109)*(x113)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((((-0.500000000000000)*(3.14159265358979)))+(j0));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j2eval[1];
            j2eval[0]=IKsin(j3);
            if( IKabs(j2eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=IKsin(j3);
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j1eval[7];
                        IKReal x116=((0.261699999999109)*(cj3));
                        IKReal x117=((pz)+(x116));
                        IKReal x118=((-0.310199999999895)+(((-1.00000000000000)*(x117))));
                        j1eval[0]=x118;
                        j1eval[1]=x118;
                        j1eval[2]=x118;
                        j1eval[3]=x118;
                        j1eval[4]=x118;
                        j1eval[5]=x118;
                        j1eval[6]=x118;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  && IKabs(j1eval[6]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j2array[1], cj2array[1], sj2array[1];
                            bool j2valid[1]={false};
                            IKReal x119=(px)*(px);
                            IKReal x120=(py)*(py);
                            IKReal x121=((x120)+(x119));
                            IKReal x122=((IKabs(x121) != 0)?((IKReal)1/(x121)):(IKReal)1.0e30);
                            j2array[0]=IKatan2(((0.261699999999109)*(px)*(sj3)*(x122)), ((0.261699999999109)*(py)*(sj3)*(x122)));
                            sj2array[0]=IKsin(j2array[0]);
                            cj2array[0]=IKcos(j2array[0]);
                            if( j2array[0] > IKPI )
                                j2array[0]-=IK2PI;
                            else if( j2array[0] < -IKPI )
                                j2array[0]+=IK2PI;
                            j2valid[0] = true;
                            { int ij2 = 0;
                            if( !j2valid[ij2] )
                                continue;
                            j2 = j2array[0]; cj2 = cj2array[0]; sj2 = sj2array[0];
                            
                            _r00=((((cj2)*(r20)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((-1.00000000000000)*(r10)*(sj2))));
                            _r01=((((-1.00000000000000)*(r11)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((cj2)*(r21)*(sj1))));
                            _r02=((((-1.00000000000000)*(r12)*(sj2)))+(((cj1)*(cj2)*(r02)))+(((cj2)*(r22)*(sj1))));
                            _r10=((((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r10)*(sj3)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)*(sj3))));
                            _r11=((((cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj2)*(r12)*(sj3)))+(((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)*(sj3))));
                            _r20=((((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((-1.00000000000000)*(cj3)*(r20)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10))));
                            _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11))));
                            _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(_r02, _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x123=IKcos(j4);
                                    IKReal x124=((IKabs(x123) != 0)?((IKReal)1/(x123)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r01)*(x124)), ((_r00)*(x124)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x125=IKcos(j4);
                                        IKReal x126=((IKabs(x125) != 0)?((IKReal)1/(x125)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r01)*(x126)), ((_r00)*(x126)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        evalcond=IKsin(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x127=IKcos(j5);
                                            IKReal x128=((IKabs(x127) != 0)?((IKReal)1/(x127)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x128)), ((_r11)*(x128)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x129=IKcos(j4);
                                            IKReal x130=((IKabs(x129) != 0)?((IKReal)1/(x129)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r01)*(x130)), ((_r00)*(x130)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x131=IKsin(j4);
                                        IKReal x132=((IKabs(x131) != 0)?(pow(x131,-2.00000000000000)):(IKReal)1.0e30);
                                        IKReal x133=IKsin(j5);
                                        IKReal x134=((IKabs(x133) != 0)?(pow(x133,-2.00000000000000)):(IKReal)1.0e30);
                                        IKReal x135=IKcos(j4);
                                        IKReal x136=(x135)*(x135);
                                        IKReal x137=((x132)*(x134)*(x136));
                                        IKReal x138=((1.00000000000000)+(x137));
                                        IKReal x139=((IKabs(x138) != 0)?((IKReal)1/(x138)):(IKReal)1.0e30);
                                        IKReal x140=((IKabs(x131) != 0)?((IKReal)1/(x131)):(IKReal)1.0e30);
                                        IKReal x141=((IKabs(x133) != 0)?((IKReal)1/(x133)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((((_r01)*(x132)*(x134)*(x135)*(x139)))+(((_r00)*(x139)*(x140)*(x141)))), ((((-1.00000000000000)*(_r01)*(x139)*(x140)*(x141)))+(((_r00)*(x132)*(x134)*(x135)*(x139)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j2eval[7];
                        IKReal x142=((0.261699999999109)*(sj3));
                        IKReal x143=((((-1.00000000000000)*(x142)))+(py));
                        j2eval[0]=((((-1.00000000000000)*(py)))+(x142));
                        j2eval[1]=x143;
                        j2eval[2]=x143;
                        j2eval[3]=x143;
                        j2eval[4]=x143;
                        j2eval[5]=x143;
                        j2eval[6]=x143;
                        if( IKabs(j2eval[0]) < 0.000100  && IKabs(j2eval[1]) < 0.000100  && IKabs(j2eval[2]) < 0.000100  && IKabs(j2eval[3]) < 0.000100  && IKabs(j2eval[4]) < 0.000100  && IKabs(j2eval[5]) < 0.000100  && IKabs(j2eval[6]) < 0.000100  ) {
                            {
                            j2 = 0.000000; sj2 = 0.000000; cj2 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x144=((0.261699999999109)*(cj3));
                            IKReal x145=((0.310199999999895)+(x144));
                            IKReal x146=((IKabs(x145) != 0)?((IKReal)1/(x145)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((px)*(x146)), ((-1.00000000000000)*(pz)*(x146)));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((cj2)*(r20)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((-1.00000000000000)*(r10)*(sj2))));
                            _r01=((((-1.00000000000000)*(r11)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((cj2)*(r21)*(sj1))));
                            _r02=((((-1.00000000000000)*(r12)*(sj2)))+(((cj1)*(cj2)*(r02)))+(((cj2)*(r22)*(sj1))));
                            _r10=((((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r10)*(sj3)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)*(sj3))));
                            _r11=((((cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj2)*(r12)*(sj3)))+(((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)*(sj3))));
                            _r20=((((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((-1.00000000000000)*(cj3)*(r20)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10))));
                            _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11))));
                            _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(_r02, _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x147=IKcos(j4);
                                    IKReal x148=((IKabs(x147) != 0)?((IKReal)1/(x147)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r01)*(x148)), ((_r00)*(x148)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x149=IKcos(j4);
                                        IKReal x150=((IKabs(x149) != 0)?((IKReal)1/(x149)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r01)*(x150)), ((_r00)*(x150)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        evalcond=IKsin(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x151=IKcos(j5);
                                            IKReal x152=((IKabs(x151) != 0)?((IKReal)1/(x151)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x152)), ((_r11)*(x152)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x153=IKcos(j4);
                                            IKReal x154=((IKabs(x153) != 0)?((IKReal)1/(x153)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r01)*(x154)), ((_r00)*(x154)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x155=IKsin(j4);
                                        IKReal x156=((IKabs(x155) != 0)?(pow(x155,-2.00000000000000)):(IKReal)1.0e30);
                                        IKReal x157=IKsin(j5);
                                        IKReal x158=((IKabs(x157) != 0)?(pow(x157,-2.00000000000000)):(IKReal)1.0e30);
                                        IKReal x159=IKcos(j4);
                                        IKReal x160=(x159)*(x159);
                                        IKReal x161=((x156)*(x158)*(x160));
                                        IKReal x162=((1.00000000000000)+(x161));
                                        IKReal x163=((IKabs(x162) != 0)?((IKReal)1/(x162)):(IKReal)1.0e30);
                                        IKReal x164=((IKabs(x155) != 0)?((IKReal)1/(x155)):(IKReal)1.0e30);
                                        IKReal x165=((IKabs(x157) != 0)?((IKReal)1/(x157)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((((_r01)*(x156)*(x158)*(x159)*(x163)))+(((_r00)*(x163)*(x164)*(x165)))), ((((-1.00000000000000)*(_r01)*(x163)*(x164)*(x165)))+(((_r00)*(x156)*(x158)*(x159)*(x163)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j2array[2], cj2array[2], sj2array[2];
                    bool j2valid[2]={false};
                    cj2array[0]=((3.82116927779862)*(py)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30)));
                    if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                        j2valid[0] = j2valid[1] = true;
                        j2array[0] = IKacos(cj2array[0]);
                        sj2array[0] = IKsin(j2array[0]);
                        cj2array[1] = cj2array[0];
                        j2array[1] = -j2array[0];
                        sj2array[1] = -sj2array[0];
                    }
                    else if( isnan(cj2array[0]) ) {
                        // probably any value will work
                        j2valid[0] = true;
                        cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                    }
                    if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                        j2valid[1]=false;
                    for(int ij2 = 0; ij2 < 2; ++ij2) {
                    if( !j2valid[ij2] )
                        continue;
                    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x166=(px)*(px);
                    IKReal x167=(pz)*(pz);
                    IKReal x168=((x166)+(x167));
                    IKReal x169=((IKabs(x168) != 0)?((IKReal)1/(x168)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((0.261699999999109)*(cj3)*(px)*(x169)))+(((0.310199999999895)*(px)*(x169)))+(((0.261699999999109)*(pz)*(sj2)*(sj3)*(x169)))), ((((-0.310199999999895)*(pz)*(x169)))+(((-0.261699999999109)*(cj3)*(pz)*(x169)))+(((0.261699999999109)*(px)*(sj2)*(sj3)*(x169)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((cj2)*(r20)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((-1.00000000000000)*(r10)*(sj2))));
                    _r01=((((-1.00000000000000)*(r11)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((cj2)*(r21)*(sj1))));
                    _r02=((((-1.00000000000000)*(r12)*(sj2)))+(((cj1)*(cj2)*(r02)))+(((cj2)*(r22)*(sj1))));
                    _r10=((((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r10)*(sj3)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)*(sj3))));
                    _r11=((((cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                    _r12=((((-1.00000000000000)*(cj2)*(r12)*(sj3)))+(((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)*(sj3))));
                    _r20=((((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((-1.00000000000000)*(cj3)*(r20)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10))));
                    _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11))));
                    _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                    {
                    IKReal j5eval;
                    j5eval=_r12;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(_r02, _r22);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x170=IKcos(j4);
                            IKReal x171=((IKabs(x170) != 0)?((IKReal)1/(x170)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r01)*(x171)), ((_r00)*(x171)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal evalcond;
                                evalcond=IKsin(j4);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x172=IKcos(j4);
                                IKReal x173=((IKabs(x172) != 0)?((IKReal)1/(x172)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r01)*(x173)), ((_r00)*(x173)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                evalcond=IKsin(j5);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x174=IKcos(j5);
                                    IKReal x175=((IKabs(x174) != 0)?((IKReal)1/(x174)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x175)), ((_r11)*(x175)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x176=IKcos(j4);
                                    IKReal x177=((IKabs(x176) != 0)?((IKReal)1/(x176)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r01)*(x177)), ((_r00)*(x177)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x178=IKsin(j4);
                                IKReal x179=((IKabs(x178) != 0)?(pow(x178,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x180=IKsin(j5);
                                IKReal x181=((IKabs(x180) != 0)?(pow(x180,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x182=IKcos(j4);
                                IKReal x183=(x182)*(x182);
                                IKReal x184=((x179)*(x181)*(x183));
                                IKReal x185=((1.00000000000000)+(x184));
                                IKReal x186=((IKabs(x185) != 0)?((IKReal)1/(x185)):(IKReal)1.0e30);
                                IKReal x187=((IKabs(x178) != 0)?((IKReal)1/(x178)):(IKReal)1.0e30);
                                IKReal x188=((IKabs(x180) != 0)?((IKReal)1/(x180)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((_r01)*(x179)*(x181)*(x182)*(x186)))+(((_r00)*(x186)*(x187)*(x188)))), ((((_r00)*(x179)*(x181)*(x182)*(x186)))+(((-1.00000000000000)*(_r01)*(x186)*(x187)*(x188)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j2array[2], cj2array[2], sj2array[2];
                bool j2valid[2]={false};
                cj2array[0]=((3.82116927779862)*(py)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30)));
                if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                    j2valid[0] = j2valid[1] = true;
                    j2array[0] = IKacos(cj2array[0]);
                    sj2array[0] = IKsin(j2array[0]);
                    cj2array[1] = cj2array[0];
                    j2array[1] = -j2array[0];
                    sj2array[1] = -sj2array[0];
                }
                else if( isnan(cj2array[0]) ) {
                    // probably any value will work
                    j2valid[0] = true;
                    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                }
                if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                    j2valid[1]=false;
                for(int ij2 = 0; ij2 < 2; ++ij2) {
                if( !j2valid[ij2] )
                    continue;
                j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x189=(px)*(px);
                IKReal x190=(pz)*(pz);
                IKReal x191=((x190)+(x189));
                IKReal x192=((IKabs(x191) != 0)?((IKReal)1/(x191)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((0.261699999999109)*(pz)*(sj2)*(sj3)*(x192)))+(((0.261699999999109)*(cj3)*(px)*(x192)))+(((0.310199999999895)*(px)*(x192)))), ((((0.261699999999109)*(px)*(sj2)*(sj3)*(x192)))+(((-0.310199999999895)*(pz)*(x192)))+(((-0.261699999999109)*(cj3)*(pz)*(x192)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((cj2)*(r20)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((-1.00000000000000)*(r10)*(sj2))));
                _r01=((((-1.00000000000000)*(r11)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((cj2)*(r21)*(sj1))));
                _r02=((((-1.00000000000000)*(r12)*(sj2)))+(((cj1)*(cj2)*(r02)))+(((cj2)*(r22)*(sj1))));
                _r10=((((cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r10)*(sj3)))+(((-1.00000000000000)*(r20)*(sj1)*(sj2)*(sj3))));
                _r11=((((cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                _r12=((((-1.00000000000000)*(cj2)*(r12)*(sj3)))+(((cj1)*(cj3)*(r22)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(r22)*(sj1)*(sj2)*(sj3))));
                _r20=((((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(r20)*(sj3)))+(((-1.00000000000000)*(cj3)*(r20)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10))));
                _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11))));
                _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)))+(((-1.00000000000000)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                {
                IKReal j5eval;
                j5eval=_r12;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(_r02, _r22);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKsin(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x193=IKcos(j4);
                        IKReal x194=((IKabs(x193) != 0)?((IKReal)1/(x193)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r01)*(x194)), ((_r00)*(x194)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x195=IKcos(j4);
                            IKReal x196=((IKabs(x195) != 0)?((IKReal)1/(x195)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r01)*(x196)), ((_r00)*(x196)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                            evalcond=IKsin(j5);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal evalcond;
                                evalcond=IKcos(j4);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x197=IKcos(j5);
                                IKReal x198=((IKabs(x197) != 0)?((IKReal)1/(x197)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x198)), ((_r11)*(x198)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x199=IKcos(j4);
                                IKReal x200=((IKabs(x199) != 0)?((IKReal)1/(x199)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r01)*(x200)), ((_r00)*(x200)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x201=IKsin(j4);
                            IKReal x202=((IKabs(x201) != 0)?(pow(x201,-2.00000000000000)):(IKReal)1.0e30);
                            IKReal x203=IKsin(j5);
                            IKReal x204=((IKabs(x203) != 0)?(pow(x203,-2.00000000000000)):(IKReal)1.0e30);
                            IKReal x205=IKcos(j4);
                            IKReal x206=(x205)*(x205);
                            IKReal x207=((x202)*(x204)*(x206));
                            IKReal x208=((1.00000000000000)+(x207));
                            IKReal x209=((IKabs(x208) != 0)?((IKReal)1/(x208)):(IKReal)1.0e30);
                            IKReal x210=((IKabs(x201) != 0)?((IKReal)1/(x201)):(IKReal)1.0e30);
                            IKReal x211=((IKabs(x203) != 0)?((IKReal)1/(x203)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((((_r00)*(x209)*(x210)*(x211)))+(((_r01)*(x202)*(x204)*(x205)*(x209)))), ((((-1.00000000000000)*(_r01)*(x209)*(x210)*(x211)))+(((_r00)*(x202)*(x204)*(x205)*(x209)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((j0)+(((-1.00000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j2eval[1];
            j2eval[0]=IKsin(j3);
            if( IKabs(j2eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=IKsin(j3);
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j1eval[7];
                        IKReal x212=((0.261699999999109)*(cj3));
                        IKReal x213=((-0.310199999999895)+(py));
                        IKReal x214=((((-1.00000000000000)*(x212)))+(x213));
                        j1eval[0]=((0.310199999999895)+(((-1.00000000000000)*(py)))+(x212));
                        j1eval[1]=x214;
                        j1eval[2]=x214;
                        j1eval[3]=x214;
                        j1eval[4]=x214;
                        j1eval[5]=x214;
                        j1eval[6]=x214;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  && IKabs(j1eval[6]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j2array[1], cj2array[1], sj2array[1];
                            bool j2valid[1]={false};
                            IKReal x215=(px)*(px);
                            IKReal x216=(pz)*(pz);
                            IKReal x217=((x215)+(x216));
                            IKReal x218=((IKabs(x217) != 0)?((IKReal)1/(x217)):(IKReal)1.0e30);
                            j2array[0]=IKatan2(((0.261699999999109)*(px)*(sj3)*(x218)), ((0.261699999999109)*(pz)*(sj3)*(x218)));
                            sj2array[0]=IKsin(j2array[0]);
                            cj2array[0]=IKcos(j2array[0]);
                            if( j2array[0] > IKPI )
                                j2array[0]-=IK2PI;
                            else if( j2array[0] < -IKPI )
                                j2array[0]+=IK2PI;
                            j2valid[0] = true;
                            { int ij2 = 0;
                            if( !j2valid[ij2] )
                                continue;
                            j2 = j2array[0]; cj2 = cj2array[0]; sj2 = sj2array[0];
                            
                            _r00=((((-1.00000000000000)*(r20)*(sj2)))+(((-1.00000000000000)*(cj2)*(r10)*(sj1)))+(((cj1)*(cj2)*(r00))));
                            _r01=((((-1.00000000000000)*(r21)*(sj2)))+(((-1.00000000000000)*(cj2)*(r11)*(sj1)))+(((cj1)*(cj2)*(r01))));
                            _r02=((((-1.00000000000000)*(r22)*(sj2)))+(((cj1)*(cj2)*(r02)))+(((-1.00000000000000)*(cj2)*(r12)*(sj1))));
                            _r10=((((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r10)))+(((r10)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r20)*(sj3))));
                            _r11=((((r11)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj2)*(r22)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r12)))+(((r12)*(sj1)*(sj2)*(sj3))));
                            _r20=((((cj3)*(r10)*(sj1)*(sj2)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)))+(((cj1)*(r10)*(sj3))));
                            _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)))+(((cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((cj1)*(r11)*(sj3))));
                            _r22=((((r02)*(sj1)*(sj3)))+(((cj1)*(r12)*(sj3)))+(((cj3)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r22))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(_r02, _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x219=(cj4)*(cj4);
                                IKReal x220=(sj4)*(sj4);
                                IKReal x221=(sj5)*(sj5);
                                IKReal x222=((x220)*(x221));
                                IKReal x223=((x219)+(x222));
                                IKReal x224=((-1.00000000000000)*(x223));
                                IKReal x225=((IKabs(x224) != 0)?((IKReal)1/(x224)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((-1.00000000000000)*(_r01)*(cj4)*(x225)))+(((-1.00000000000000)*(_r00)*(sj4)*(sj5)*(x225)))), ((((_r01)*(sj4)*(sj5)*(x225)))+(((-1.00000000000000)*(_r00)*(cj4)*(x225)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j2eval[7];
                        IKReal x226=((0.261699999999109)*(sj3));
                        IKReal x227=((pz)+(((-1.00000000000000)*(x226))));
                        j2eval[0]=((((-1.00000000000000)*(pz)))+(x226));
                        j2eval[1]=x227;
                        j2eval[2]=x227;
                        j2eval[3]=x227;
                        j2eval[4]=x227;
                        j2eval[5]=x227;
                        j2eval[6]=x227;
                        if( IKabs(j2eval[0]) < 0.000100  && IKabs(j2eval[1]) < 0.000100  && IKabs(j2eval[2]) < 0.000100  && IKabs(j2eval[3]) < 0.000100  && IKabs(j2eval[4]) < 0.000100  && IKabs(j2eval[5]) < 0.000100  && IKabs(j2eval[6]) < 0.000100  ) {
                            {
                            j2 = 0.000000; sj2 = 0.000000; cj2 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x228=(px)*(px);
                            IKReal x229=(py)*(py);
                            IKReal x230=((x229)+(x228));
                            IKReal x231=((IKabs(x230) != 0)?((IKReal)1/(x230)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((0.261699999999109)*(cj3)*(px)*(x231)))+(((0.310199999999895)*(px)*(x231)))), ((((0.310199999999895)*(py)*(x231)))+(((0.261699999999109)*(cj3)*(py)*(x231)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(r20)*(sj2)))+(((-1.00000000000000)*(cj2)*(r10)*(sj1)))+(((cj1)*(cj2)*(r00))));
                            _r01=((((-1.00000000000000)*(r21)*(sj2)))+(((-1.00000000000000)*(cj2)*(r11)*(sj1)))+(((cj1)*(cj2)*(r01))));
                            _r02=((((-1.00000000000000)*(r22)*(sj2)))+(((cj1)*(cj2)*(r02)))+(((-1.00000000000000)*(cj2)*(r12)*(sj1))));
                            _r10=((((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r10)))+(((r10)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r20)*(sj3))));
                            _r11=((((r11)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj2)*(r22)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r12)))+(((r12)*(sj1)*(sj2)*(sj3))));
                            _r20=((((cj3)*(r10)*(sj1)*(sj2)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)))+(((cj1)*(r10)*(sj3))));
                            _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)))+(((cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((cj1)*(r11)*(sj3))));
                            _r22=((((r02)*(sj1)*(sj3)))+(((cj1)*(r12)*(sj3)))+(((cj3)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r22))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(_r02, _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x232=(cj4)*(cj4);
                                IKReal x233=(sj4)*(sj4);
                                IKReal x234=(sj5)*(sj5);
                                IKReal x235=((x233)*(x234));
                                IKReal x236=((x232)+(x235));
                                IKReal x237=((-1.00000000000000)*(x236));
                                IKReal x238=((IKabs(x237) != 0)?((IKReal)1/(x237)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(sj4)*(sj5)*(x238)))+(((-1.00000000000000)*(_r01)*(cj4)*(x238)))), ((((_r01)*(sj4)*(sj5)*(x238)))+(((-1.00000000000000)*(_r00)*(cj4)*(x238)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j2array[2], cj2array[2], sj2array[2];
                    bool j2valid[2]={false};
                    cj2array[0]=((3.82116927779862)*(pz)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30)));
                    if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                        j2valid[0] = j2valid[1] = true;
                        j2array[0] = IKacos(cj2array[0]);
                        sj2array[0] = IKsin(j2array[0]);
                        cj2array[1] = cj2array[0];
                        j2array[1] = -j2array[0];
                        sj2array[1] = -sj2array[0];
                    }
                    else if( isnan(cj2array[0]) ) {
                        // probably any value will work
                        j2valid[0] = true;
                        cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                    }
                    if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                        j2valid[1]=false;
                    for(int ij2 = 0; ij2 < 2; ++ij2) {
                    if( !j2valid[ij2] )
                        continue;
                    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x239=(px)*(px);
                    IKReal x240=(py)*(py);
                    IKReal x241=((x239)+(x240));
                    IKReal x242=((IKabs(x241) != 0)?((IKReal)1/(x241)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((0.310199999999895)*(px)*(x242)))+(((-0.261699999999109)*(py)*(sj2)*(sj3)*(x242)))+(((0.261699999999109)*(cj3)*(px)*(x242)))), ((((0.261699999999109)*(cj3)*(py)*(x242)))+(((0.310199999999895)*(py)*(x242)))+(((0.261699999999109)*(px)*(sj2)*(sj3)*(x242)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((-1.00000000000000)*(r20)*(sj2)))+(((-1.00000000000000)*(cj2)*(r10)*(sj1)))+(((cj1)*(cj2)*(r00))));
                    _r01=((((-1.00000000000000)*(r21)*(sj2)))+(((-1.00000000000000)*(cj2)*(r11)*(sj1)))+(((cj1)*(cj2)*(r01))));
                    _r02=((((-1.00000000000000)*(r22)*(sj2)))+(((cj1)*(cj2)*(r02)))+(((-1.00000000000000)*(cj2)*(r12)*(sj1))));
                    _r10=((((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r10)))+(((r10)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r20)*(sj3))));
                    _r11=((((r11)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                    _r12=((((-1.00000000000000)*(cj2)*(r22)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r12)))+(((r12)*(sj1)*(sj2)*(sj3))));
                    _r20=((((cj3)*(r10)*(sj1)*(sj2)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)))+(((cj1)*(r10)*(sj3))));
                    _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)))+(((cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((cj1)*(r11)*(sj3))));
                    _r22=((((r02)*(sj1)*(sj3)))+(((cj1)*(r12)*(sj3)))+(((cj3)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r22))));
                    {
                    IKReal j5eval;
                    j5eval=_r12;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(_r02, _r22);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x243=(cj4)*(cj4);
                        IKReal x244=(sj4)*(sj4);
                        IKReal x245=(sj5)*(sj5);
                        IKReal x246=((x244)*(x245));
                        IKReal x247=((x243)+(x246));
                        IKReal x248=((-1.00000000000000)*(x247));
                        IKReal x249=((IKabs(x248) != 0)?((IKReal)1/(x248)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((((-1.00000000000000)*(_r01)*(cj4)*(x249)))+(((-1.00000000000000)*(_r00)*(sj4)*(sj5)*(x249)))), ((((_r01)*(sj4)*(sj5)*(x249)))+(((-1.00000000000000)*(_r00)*(cj4)*(x249)))));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j2array[2], cj2array[2], sj2array[2];
                bool j2valid[2]={false};
                cj2array[0]=((3.82116927779862)*(pz)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30)));
                if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                    j2valid[0] = j2valid[1] = true;
                    j2array[0] = IKacos(cj2array[0]);
                    sj2array[0] = IKsin(j2array[0]);
                    cj2array[1] = cj2array[0];
                    j2array[1] = -j2array[0];
                    sj2array[1] = -sj2array[0];
                }
                else if( isnan(cj2array[0]) ) {
                    // probably any value will work
                    j2valid[0] = true;
                    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                }
                if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                    j2valid[1]=false;
                for(int ij2 = 0; ij2 < 2; ++ij2) {
                if( !j2valid[ij2] )
                    continue;
                j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x250=(px)*(px);
                IKReal x251=(py)*(py);
                IKReal x252=((x250)+(x251));
                IKReal x253=((IKabs(x252) != 0)?((IKReal)1/(x252)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((0.310199999999895)*(px)*(x253)))+(((0.261699999999109)*(cj3)*(px)*(x253)))+(((-0.261699999999109)*(py)*(sj2)*(sj3)*(x253)))), ((((0.261699999999109)*(px)*(sj2)*(sj3)*(x253)))+(((0.310199999999895)*(py)*(x253)))+(((0.261699999999109)*(cj3)*(py)*(x253)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((-1.00000000000000)*(r20)*(sj2)))+(((-1.00000000000000)*(cj2)*(r10)*(sj1)))+(((cj1)*(cj2)*(r00))));
                _r01=((((-1.00000000000000)*(r21)*(sj2)))+(((-1.00000000000000)*(cj2)*(r11)*(sj1)))+(((cj1)*(cj2)*(r01))));
                _r02=((((-1.00000000000000)*(r22)*(sj2)))+(((cj1)*(cj2)*(r02)))+(((-1.00000000000000)*(cj2)*(r12)*(sj1))));
                _r10=((((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r10)))+(((r10)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj2)*(r20)*(sj3))));
                _r11=((((r11)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                _r12=((((-1.00000000000000)*(cj2)*(r22)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r12)))+(((r12)*(sj1)*(sj2)*(sj3))));
                _r20=((((cj3)*(r10)*(sj1)*(sj2)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)))+(((cj1)*(r10)*(sj3))));
                _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)))+(((cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((cj1)*(r11)*(sj3))));
                _r22=((((r02)*(sj1)*(sj3)))+(((cj1)*(r12)*(sj3)))+(((cj3)*(r12)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r22))));
                {
                IKReal j5eval;
                j5eval=_r12;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(_r02, _r22);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    { int ij5 = 0;
                    if( !j5valid[ij5] )
                        continue;
                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                    
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x254=(cj4)*(cj4);
                    IKReal x255=(sj4)*(sj4);
                    IKReal x256=(sj5)*(sj5);
                    IKReal x257=((x255)*(x256));
                    IKReal x258=((x254)+(x257));
                    IKReal x259=((-1.00000000000000)*(x258));
                    IKReal x260=((IKabs(x259) != 0)?((IKReal)1/(x259)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((((-1.00000000000000)*(_r01)*(cj4)*(x260)))+(((-1.00000000000000)*(_r00)*(sj4)*(sj5)*(x260)))), ((((_r01)*(sj4)*(sj5)*(x260)))+(((-1.00000000000000)*(_r00)*(cj4)*(x260)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((j0)+(((0.500000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j2eval[1];
            j2eval[0]=IKsin(j3);
            if( IKabs(j2eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=IKsin(j3);
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j1eval[7];
                        IKReal x261=((0.261699999999109)*(cj3));
                        IKReal x262=((-0.310199999999895)+(pz));
                        IKReal x263=((((-1.00000000000000)*(x261)))+(x262));
                        j1eval[0]=((0.310199999999895)+(((-1.00000000000000)*(pz)))+(x261));
                        j1eval[1]=x263;
                        j1eval[2]=x263;
                        j1eval[3]=x263;
                        j1eval[4]=x263;
                        j1eval[5]=x263;
                        j1eval[6]=x263;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  && IKabs(j1eval[6]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal evalcond;
                                evalcond=j3;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j2array[2], cj2array[2], sj2array[2];
                                bool j2valid[2]={false};
                                IKReal x264=((-1.00000000000000)*(px));
                                IKReal x265=((-1.00000000000000)*(py));
                                IKReal x266=IKatan2(x264, x265);
                                j2array[0]=((-1.00000000000000)*(x266));
                                sj2array[0]=IKsin(j2array[0]);
                                cj2array[0]=IKcos(j2array[0]);
                                j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x266))));
                                sj2array[1]=IKsin(j2array[1]);
                                cj2array[1]=IKcos(j2array[1]);
                                if( j2array[0] > IKPI )
                                    j2array[0]-=IK2PI;
                                else if( j2array[0] < -IKPI )
                                    j2array[0]+=IK2PI;
                                j2valid[0] = true;
                                if( j2array[1] > IKPI )
                                    j2array[1]-=IK2PI;
                                else if( j2array[1] < -IKPI )
                                    j2array[1]+=IK2PI;
                                j2valid[1] = true;
                                if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                                    j2valid[1]=false;
                                for(int ij2 = 0; ij2 < 2; ++ij2) {
                                if( !j2valid[ij2] )
                                    continue;
                                j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                                
                                _r00=((((-1.00000000000000)*(cj2)*(r20)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((r10)*(sj2))));
                                _r01=((((-1.00000000000000)*(cj2)*(r21)*(sj1)))+(((r11)*(sj2)))+(((cj1)*(cj2)*(r01))));
                                _r02=((((-1.00000000000000)*(cj2)*(r22)*(sj1)))+(((r12)*(sj2)))+(((cj1)*(cj2)*(r02))));
                                _r10=((((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r10)*(sj3))));
                                _r11=((((cj2)*(r11)*(sj3)))+(((r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
                                _r12=((((cj2)*(r12)*(sj3)))+(((r22)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22))));
                                _r20=((((cj1)*(r20)*(sj3)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((cj2)*(cj3)*(r10)))+(((cj3)*(r20)*(sj1)*(sj2))));
                                _r21=((((cj3)*(r21)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r11)))+(((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((cj1)*(r21)*(sj3))));
                                _r22=((((r02)*(sj1)*(sj3)))+(((cj2)*(cj3)*(r12)))+(((cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r12;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r02, _r22);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x267=(cj4)*(cj4);
                                    IKReal x268=(sj4)*(sj4);
                                    IKReal x269=(sj5)*(sj5);
                                    IKReal x270=((x268)*(x269));
                                    IKReal x271=((x270)+(x267));
                                    IKReal x272=((-1.00000000000000)*(x271));
                                    IKReal x273=((IKabs(x272) != 0)?((IKReal)1/(x272)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((((-1.00000000000000)*(_r01)*(cj4)*(x273)))+(((-1.00000000000000)*(_r00)*(sj4)*(sj5)*(x273)))), ((((_r01)*(sj4)*(sj5)*(x273)))+(((-1.00000000000000)*(_r00)*(cj4)*(x273)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j2array[1], cj2array[1], sj2array[1];
                                bool j2valid[1]={false};
                                IKReal x274=((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30);
                                j2array[0]=IKatan2(((3.82116927779862)*(px)*(x274)), ((-3.82116927779862)*(py)*(x274)));
                                sj2array[0]=IKsin(j2array[0]);
                                cj2array[0]=IKcos(j2array[0]);
                                if( j2array[0] > IKPI )
                                    j2array[0]-=IK2PI;
                                else if( j2array[0] < -IKPI )
                                    j2array[0]+=IK2PI;
                                j2valid[0] = true;
                                { int ij2 = 0;
                                if( !j2valid[ij2] )
                                    continue;
                                j2 = j2array[0]; cj2 = cj2array[0]; sj2 = sj2array[0];
                                
                                _r00=((((-1.00000000000000)*(cj2)*(r20)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((r10)*(sj2))));
                                _r01=((((-1.00000000000000)*(cj2)*(r21)*(sj1)))+(((r11)*(sj2)))+(((cj1)*(cj2)*(r01))));
                                _r02=((((-1.00000000000000)*(cj2)*(r22)*(sj1)))+(((r12)*(sj2)))+(((cj1)*(cj2)*(r02))));
                                _r10=((((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r10)*(sj3))));
                                _r11=((((cj2)*(r11)*(sj3)))+(((r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
                                _r12=((((cj2)*(r12)*(sj3)))+(((r22)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22))));
                                _r20=((((cj1)*(r20)*(sj3)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((cj2)*(cj3)*(r10)))+(((cj3)*(r20)*(sj1)*(sj2))));
                                _r21=((((cj3)*(r21)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r11)))+(((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((cj1)*(r21)*(sj3))));
                                _r22=((((r02)*(sj1)*(sj3)))+(((cj2)*(cj3)*(r12)))+(((cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r12;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r02, _r22);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x275=(cj4)*(cj4);
                                    IKReal x276=(sj4)*(sj4);
                                    IKReal x277=(sj5)*(sj5);
                                    IKReal x278=((x276)*(x277));
                                    IKReal x279=((x275)+(x278));
                                    IKReal x280=((-1.00000000000000)*(x279));
                                    IKReal x281=((IKabs(x280) != 0)?((IKReal)1/(x280)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(sj4)*(sj5)*(x281)))+(((-1.00000000000000)*(_r01)*(cj4)*(x281)))), ((((_r01)*(sj4)*(sj5)*(x281)))+(((-1.00000000000000)*(_r00)*(cj4)*(x281)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j2eval[7];
                        IKReal x282=((0.261699999999109)*(sj3));
                        IKReal x283=((x282)+(py));
                        IKReal x284=((-1.00000000000000)*(x283));
                        j2eval[0]=x284;
                        j2eval[1]=x284;
                        j2eval[2]=x284;
                        j2eval[3]=x284;
                        j2eval[4]=x284;
                        j2eval[5]=x284;
                        j2eval[6]=x284;
                        if( IKabs(j2eval[0]) < 0.000100  && IKabs(j2eval[1]) < 0.000100  && IKabs(j2eval[2]) < 0.000100  && IKabs(j2eval[3]) < 0.000100  && IKabs(j2eval[4]) < 0.000100  && IKabs(j2eval[5]) < 0.000100  && IKabs(j2eval[6]) < 0.000100  ) {
                            {
                            j2 = 0.000000; sj2 = 0.000000; cj2 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x285=(px)*(px);
                            IKReal x286=(pz)*(pz);
                            IKReal x287=((x286)+(x285));
                            IKReal x288=((IKabs(x287) != 0)?((IKReal)1/(x287)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((0.310199999999895)*(px)*(x288)))+(((0.261699999999109)*(cj3)*(px)*(x288)))), ((((0.310199999999895)*(pz)*(x288)))+(((0.261699999999109)*(cj3)*(pz)*(x288)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(cj2)*(r20)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((r10)*(sj2))));
                            _r01=((((-1.00000000000000)*(cj2)*(r21)*(sj1)))+(((r11)*(sj2)))+(((cj1)*(cj2)*(r01))));
                            _r02=((((-1.00000000000000)*(cj2)*(r22)*(sj1)))+(((r12)*(sj2)))+(((cj1)*(cj2)*(r02))));
                            _r10=((((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r10)*(sj3))));
                            _r11=((((cj2)*(r11)*(sj3)))+(((r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
                            _r12=((((cj2)*(r12)*(sj3)))+(((r22)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22))));
                            _r20=((((cj1)*(r20)*(sj3)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((cj2)*(cj3)*(r10)))+(((cj3)*(r20)*(sj1)*(sj2))));
                            _r21=((((cj3)*(r21)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r11)))+(((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((cj1)*(r21)*(sj3))));
                            _r22=((((r02)*(sj1)*(sj3)))+(((cj2)*(cj3)*(r12)))+(((cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(_r02, _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x289=(cj4)*(cj4);
                                IKReal x290=(sj4)*(sj4);
                                IKReal x291=(sj5)*(sj5);
                                IKReal x292=((x290)*(x291));
                                IKReal x293=((x289)+(x292));
                                IKReal x294=((-1.00000000000000)*(x293));
                                IKReal x295=((IKabs(x294) != 0)?((IKReal)1/(x294)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(sj4)*(sj5)*(x295)))+(((-1.00000000000000)*(_r01)*(cj4)*(x295)))), ((((_r01)*(sj4)*(sj5)*(x295)))+(((-1.00000000000000)*(_r00)*(cj4)*(x295)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j2array[2], cj2array[2], sj2array[2];
                    bool j2valid[2]={false};
                    cj2array[0]=((-3.82116927779862)*(py)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30)));
                    if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                        j2valid[0] = j2valid[1] = true;
                        j2array[0] = IKacos(cj2array[0]);
                        sj2array[0] = IKsin(j2array[0]);
                        cj2array[1] = cj2array[0];
                        j2array[1] = -j2array[0];
                        sj2array[1] = -sj2array[0];
                    }
                    else if( isnan(cj2array[0]) ) {
                        // probably any value will work
                        j2valid[0] = true;
                        cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                    }
                    if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                        j2valid[1]=false;
                    for(int ij2 = 0; ij2 < 2; ++ij2) {
                    if( !j2valid[ij2] )
                        continue;
                    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x296=(px)*(px);
                    IKReal x297=(pz)*(pz);
                    IKReal x298=((x296)+(x297));
                    IKReal x299=((IKabs(x298) != 0)?((IKReal)1/(x298)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((0.261699999999109)*(cj3)*(px)*(x299)))+(((0.310199999999895)*(px)*(x299)))+(((-0.261699999999109)*(pz)*(sj2)*(sj3)*(x299)))), ((((0.261699999999109)*(px)*(sj2)*(sj3)*(x299)))+(((0.261699999999109)*(cj3)*(pz)*(x299)))+(((0.310199999999895)*(pz)*(x299)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((-1.00000000000000)*(cj2)*(r20)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((r10)*(sj2))));
                    _r01=((((-1.00000000000000)*(cj2)*(r21)*(sj1)))+(((r11)*(sj2)))+(((cj1)*(cj2)*(r01))));
                    _r02=((((-1.00000000000000)*(cj2)*(r22)*(sj1)))+(((r12)*(sj2)))+(((cj1)*(cj2)*(r02))));
                    _r10=((((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r10)*(sj3))));
                    _r11=((((cj2)*(r11)*(sj3)))+(((r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
                    _r12=((((cj2)*(r12)*(sj3)))+(((r22)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22))));
                    _r20=((((cj1)*(r20)*(sj3)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((cj2)*(cj3)*(r10)))+(((cj3)*(r20)*(sj1)*(sj2))));
                    _r21=((((cj3)*(r21)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r11)))+(((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((cj1)*(r21)*(sj3))));
                    _r22=((((r02)*(sj1)*(sj3)))+(((cj2)*(cj3)*(r12)))+(((cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                    {
                    IKReal j5eval;
                    j5eval=_r12;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(_r02, _r22);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x300=(cj4)*(cj4);
                        IKReal x301=(sj4)*(sj4);
                        IKReal x302=(sj5)*(sj5);
                        IKReal x303=((x301)*(x302));
                        IKReal x304=((x303)+(x300));
                        IKReal x305=((-1.00000000000000)*(x304));
                        IKReal x306=((IKabs(x305) != 0)?((IKReal)1/(x305)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((((-1.00000000000000)*(_r00)*(sj4)*(sj5)*(x306)))+(((-1.00000000000000)*(_r01)*(cj4)*(x306)))), ((((-1.00000000000000)*(_r00)*(cj4)*(x306)))+(((_r01)*(sj4)*(sj5)*(x306)))));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j2array[2], cj2array[2], sj2array[2];
                bool j2valid[2]={false};
                cj2array[0]=((-3.82116927779862)*(py)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30)));
                if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                    j2valid[0] = j2valid[1] = true;
                    j2array[0] = IKacos(cj2array[0]);
                    sj2array[0] = IKsin(j2array[0]);
                    cj2array[1] = cj2array[0];
                    j2array[1] = -j2array[0];
                    sj2array[1] = -sj2array[0];
                }
                else if( isnan(cj2array[0]) ) {
                    // probably any value will work
                    j2valid[0] = true;
                    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                }
                if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                    j2valid[1]=false;
                for(int ij2 = 0; ij2 < 2; ++ij2) {
                if( !j2valid[ij2] )
                    continue;
                j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x307=(px)*(px);
                IKReal x308=(pz)*(pz);
                IKReal x309=((x308)+(x307));
                IKReal x310=((IKabs(x309) != 0)?((IKReal)1/(x309)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((0.310199999999895)*(px)*(x310)))+(((-0.261699999999109)*(pz)*(sj2)*(sj3)*(x310)))+(((0.261699999999109)*(cj3)*(px)*(x310)))), ((((0.261699999999109)*(cj3)*(pz)*(x310)))+(((0.310199999999895)*(pz)*(x310)))+(((0.261699999999109)*(px)*(sj2)*(sj3)*(x310)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((-1.00000000000000)*(cj2)*(r20)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((r10)*(sj2))));
                _r01=((((-1.00000000000000)*(cj2)*(r21)*(sj1)))+(((r11)*(sj2)))+(((cj1)*(cj2)*(r01))));
                _r02=((((-1.00000000000000)*(cj2)*(r22)*(sj1)))+(((r12)*(sj2)))+(((cj1)*(cj2)*(r02))));
                _r10=((((-1.00000000000000)*(cj1)*(cj3)*(r20)))+(((r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((cj2)*(r10)*(sj3))));
                _r11=((((cj2)*(r11)*(sj3)))+(((r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r21))));
                _r12=((((cj2)*(r12)*(sj3)))+(((r22)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r22))));
                _r20=((((cj1)*(r20)*(sj3)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((cj2)*(cj3)*(r10)))+(((cj3)*(r20)*(sj1)*(sj2))));
                _r21=((((cj3)*(r21)*(sj1)*(sj2)))+(((cj2)*(cj3)*(r11)))+(((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((cj1)*(r21)*(sj3))));
                _r22=((((r02)*(sj1)*(sj3)))+(((cj2)*(cj3)*(r12)))+(((cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                {
                IKReal j5eval;
                j5eval=_r12;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(_r02, _r22);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    { int ij5 = 0;
                    if( !j5valid[ij5] )
                        continue;
                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                    
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x311=(cj4)*(cj4);
                    IKReal x312=(sj4)*(sj4);
                    IKReal x313=(sj5)*(sj5);
                    IKReal x314=((x312)*(x313));
                    IKReal x315=((x314)+(x311));
                    IKReal x316=((-1.00000000000000)*(x315));
                    IKReal x317=((IKabs(x316) != 0)?((IKReal)1/(x316)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((((-1.00000000000000)*(_r01)*(cj4)*(x317)))+(((-1.00000000000000)*(_r00)*(sj4)*(sj5)*(x317)))), ((((-1.00000000000000)*(_r00)*(cj4)*(x317)))+(((_r01)*(sj4)*(sj5)*(x317)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        if( 1 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j2eval[1];
            j2eval[0]=IKsin(j3);
            if( IKabs(j2eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=IKsin(j3);
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j1eval[6];
                        IKReal x318=((0.261699999999109)*(cj3));
                        IKReal x319=((pz)*(sj0));
                        IKReal x320=((cj0)*(py));
                        IKReal x321=((x320)+(x319)+(x318));
                        IKReal x322=((-0.310199999999895)+(((-1.00000000000000)*(x321))));
                        j1eval[0]=x322;
                        j1eval[1]=x322;
                        j1eval[2]=x322;
                        j1eval[3]=x322;
                        j1eval[4]=x322;
                        j1eval[5]=x322;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal evalcond;
                                evalcond=j3;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j2array[2], cj2array[2], sj2array[2];
                                bool j2valid[2]={false};
                                IKReal x323=((-1.00000000000000)*(px));
                                IKReal x324=((py)*(sj0));
                                IKReal x325=((cj0)*(pz));
                                IKReal x326=((((-1.00000000000000)*(x325)))+(x324));
                                IKReal x327=IKatan2(x323, x326);
                                j2array[0]=((-1.00000000000000)*(x327));
                                sj2array[0]=IKsin(j2array[0]);
                                cj2array[0]=IKcos(j2array[0]);
                                j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x327))));
                                sj2array[1]=IKsin(j2array[1]);
                                cj2array[1]=IKcos(j2array[1]);
                                if( j2array[0] > IKPI )
                                    j2array[0]-=IK2PI;
                                else if( j2array[0] < -IKPI )
                                    j2array[0]+=IK2PI;
                                j2valid[0] = true;
                                if( j2array[1] > IKPI )
                                    j2array[1]-=IK2PI;
                                else if( j2array[1] < -IKPI )
                                    j2array[1]+=IK2PI;
                                j2valid[1] = true;
                                if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                                    j2valid[1]=false;
                                for(int ij2 = 0; ij2 < 2; ++ij2) {
                                if( !j2valid[ij2] )
                                    continue;
                                j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                                
                                _r00=((((cj2)*(r20)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((cj0)*(cj2)*(r10)*(sj1)))+(((cj0)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj2))));
                                _r01=((((cj0)*(cj2)*(r11)*(sj1)))+(((cj0)*(r21)*(sj2)))+(((cj2)*(r21)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((-1.00000000000000)*(r11)*(sj0)*(sj2))));
                                _r02=((((cj0)*(cj2)*(r12)*(sj1)))+(((-1.00000000000000)*(r12)*(sj0)*(sj2)))+(((cj2)*(r22)*(sj0)*(sj1)))+(((cj0)*(r22)*(sj2)))+(((cj1)*(cj2)*(r02))));
                                _r10=((((-1.00000000000000)*(cj2)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj0)*(cj2)*(r20)*(sj3)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj2)*(sj3))));
                                _r11=((((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r11)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj2)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r22)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj2)*(sj3))));
                                _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1)*(sj2)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj0)))+(((cj0)*(cj2)*(cj3)*(r20))));
                                _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11)*(sj0))));
                                _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r12;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r02, _r22);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x328=IKcos(j4);
                                        IKReal x329=((IKabs(x328) != 0)?((IKReal)1/(x328)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r01)*(x329)), ((_r00)*(x329)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x330=IKcos(j4);
                                            IKReal x331=((IKabs(x330) != 0)?((IKReal)1/(x330)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r01)*(x331)), ((_r00)*(x331)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            evalcond=IKsin(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x332=IKcos(j5);
                                                IKReal x333=((IKabs(x332) != 0)?((IKReal)1/(x332)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x333)), ((_r11)*(x333)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x334=IKcos(j4);
                                                IKReal x335=((IKabs(x334) != 0)?((IKReal)1/(x334)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r01)*(x335)), ((_r00)*(x335)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x336=IKsin(j4);
                                            IKReal x337=((IKabs(x336) != 0)?(pow(x336,-2.00000000000000)):(IKReal)1.0e30);
                                            IKReal x338=IKsin(j5);
                                            IKReal x339=((IKabs(x338) != 0)?(pow(x338,-2.00000000000000)):(IKReal)1.0e30);
                                            IKReal x340=IKcos(j4);
                                            IKReal x341=(x340)*(x340);
                                            IKReal x342=((x337)*(x339)*(x341));
                                            IKReal x343=((1.00000000000000)+(x342));
                                            IKReal x344=((IKabs(x343) != 0)?((IKReal)1/(x343)):(IKReal)1.0e30);
                                            IKReal x345=((IKabs(x336) != 0)?((IKReal)1/(x336)):(IKReal)1.0e30);
                                            IKReal x346=((IKabs(x338) != 0)?((IKReal)1/(x338)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((((_r00)*(x344)*(x345)*(x346)))+(((_r01)*(x337)*(x339)*(x340)*(x344)))), ((((-1.00000000000000)*(_r01)*(x344)*(x345)*(x346)))+(((_r00)*(x337)*(x339)*(x340)*(x344)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j2array[1], cj2array[1], sj2array[1];
                                bool j2valid[1]={false};
                                IKReal x347=((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30);
                                j2array[0]=IKatan2(((3.82116927779862)*(px)*(x347)), ((((3.82116927779862)*(py)*(sj0)*(x347)))+(((-3.82116927779862)*(cj0)*(pz)*(x347)))));
                                sj2array[0]=IKsin(j2array[0]);
                                cj2array[0]=IKcos(j2array[0]);
                                if( j2array[0] > IKPI )
                                    j2array[0]-=IK2PI;
                                else if( j2array[0] < -IKPI )
                                    j2array[0]+=IK2PI;
                                j2valid[0] = true;
                                { int ij2 = 0;
                                if( !j2valid[ij2] )
                                    continue;
                                j2 = j2array[0]; cj2 = cj2array[0]; sj2 = sj2array[0];
                                
                                _r00=((((cj2)*(r20)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((cj0)*(cj2)*(r10)*(sj1)))+(((cj0)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj2))));
                                _r01=((((cj0)*(cj2)*(r11)*(sj1)))+(((cj0)*(r21)*(sj2)))+(((cj2)*(r21)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((-1.00000000000000)*(r11)*(sj0)*(sj2))));
                                _r02=((((cj0)*(cj2)*(r12)*(sj1)))+(((-1.00000000000000)*(r12)*(sj0)*(sj2)))+(((cj2)*(r22)*(sj0)*(sj1)))+(((cj0)*(r22)*(sj2)))+(((cj1)*(cj2)*(r02))));
                                _r10=((((-1.00000000000000)*(cj2)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj0)*(cj2)*(r20)*(sj3)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj2)*(sj3))));
                                _r11=((((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r11)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj2)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r22)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj2)*(sj3))));
                                _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1)*(sj2)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj0)))+(((cj0)*(cj2)*(cj3)*(r20))));
                                _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11)*(sj0))));
                                _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r12;
                                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(_r02, _r22);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x348=IKcos(j4);
                                        IKReal x349=((IKabs(x348) != 0)?((IKReal)1/(x348)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r01)*(x349)), ((_r00)*(x349)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x350=IKcos(j4);
                                            IKReal x351=((IKabs(x350) != 0)?((IKReal)1/(x350)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r01)*(x351)), ((_r00)*(x351)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            evalcond=IKsin(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x352=IKcos(j5);
                                                IKReal x353=((IKabs(x352) != 0)?((IKReal)1/(x352)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x353)), ((_r11)*(x353)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x354=IKcos(j4);
                                                IKReal x355=((IKabs(x354) != 0)?((IKReal)1/(x354)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r01)*(x355)), ((_r00)*(x355)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x356=IKsin(j4);
                                            IKReal x357=((IKabs(x356) != 0)?(pow(x356,-2.00000000000000)):(IKReal)1.0e30);
                                            IKReal x358=IKsin(j5);
                                            IKReal x359=((IKabs(x358) != 0)?(pow(x358,-2.00000000000000)):(IKReal)1.0e30);
                                            IKReal x360=IKcos(j4);
                                            IKReal x361=(x360)*(x360);
                                            IKReal x362=((x357)*(x359)*(x361));
                                            IKReal x363=((1.00000000000000)+(x362));
                                            IKReal x364=((IKabs(x363) != 0)?((IKReal)1/(x363)):(IKReal)1.0e30);
                                            IKReal x365=((IKabs(x356) != 0)?((IKReal)1/(x356)):(IKReal)1.0e30);
                                            IKReal x366=((IKabs(x358) != 0)?((IKReal)1/(x358)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((((_r00)*(x364)*(x365)*(x366)))+(((_r01)*(x357)*(x359)*(x360)*(x364)))), ((((_r00)*(x357)*(x359)*(x360)*(x364)))+(((-1.00000000000000)*(_r01)*(x364)*(x365)*(x366)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j2eval[6];
                        IKReal x367=((py)*(sj0));
                        IKReal x368=((cj0)*(pz));
                        IKReal x369=((0.261699999999109)*(sj3));
                        IKReal x370=((x368)+(x369));
                        IKReal x371=((((-1.00000000000000)*(x370)))+(x367));
                        j2eval[0]=x371;
                        j2eval[1]=x371;
                        j2eval[2]=x371;
                        j2eval[3]=x371;
                        j2eval[4]=x371;
                        j2eval[5]=x371;
                        if( IKabs(j2eval[0]) < 0.000100  && IKabs(j2eval[1]) < 0.000100  && IKabs(j2eval[2]) < 0.000100  && IKabs(j2eval[3]) < 0.000100  && IKabs(j2eval[4]) < 0.000100  && IKabs(j2eval[5]) < 0.000100  ) {
                            {
                            j2 = 0.000000; sj2 = 0.000000; cj2 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x372=((0.261699999999109)*(cj3));
                            IKReal x373=((0.310199999999895)+(x372));
                            IKReal x374=((IKabs(x373) != 0)?((IKReal)1/(x373)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((px)*(x374)), ((((-1.00000000000000)*(pz)*(sj0)*(x374)))+(((-1.00000000000000)*(cj0)*(py)*(x374)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((cj2)*(r20)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((cj0)*(cj2)*(r10)*(sj1)))+(((cj0)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj2))));
                            _r01=((((cj0)*(cj2)*(r11)*(sj1)))+(((cj0)*(r21)*(sj2)))+(((cj2)*(r21)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((-1.00000000000000)*(r11)*(sj0)*(sj2))));
                            _r02=((((cj0)*(cj2)*(r12)*(sj1)))+(((-1.00000000000000)*(r12)*(sj0)*(sj2)))+(((cj2)*(r22)*(sj0)*(sj1)))+(((cj0)*(r22)*(sj2)))+(((cj1)*(cj2)*(r02))));
                            _r10=((((-1.00000000000000)*(cj2)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj0)*(cj2)*(r20)*(sj3)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj2)*(sj3))));
                            _r11=((((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r11)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj2)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r22)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj2)*(sj3))));
                            _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1)*(sj2)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj0)))+(((cj0)*(cj2)*(cj3)*(r20))));
                            _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11)*(sj0))));
                            _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(_r02, _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x375=IKcos(j4);
                                    IKReal x376=((IKabs(x375) != 0)?((IKReal)1/(x375)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r01)*(x376)), ((_r00)*(x376)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x377=IKcos(j4);
                                        IKReal x378=((IKabs(x377) != 0)?((IKReal)1/(x377)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r01)*(x378)), ((_r00)*(x378)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        evalcond=IKsin(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x379=IKcos(j5);
                                            IKReal x380=((IKabs(x379) != 0)?((IKReal)1/(x379)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x380)), ((_r11)*(x380)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x381=IKcos(j4);
                                            IKReal x382=((IKabs(x381) != 0)?((IKReal)1/(x381)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r01)*(x382)), ((_r00)*(x382)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x383=IKsin(j4);
                                        IKReal x384=((IKabs(x383) != 0)?(pow(x383,-2.00000000000000)):(IKReal)1.0e30);
                                        IKReal x385=IKsin(j5);
                                        IKReal x386=((IKabs(x385) != 0)?(pow(x385,-2.00000000000000)):(IKReal)1.0e30);
                                        IKReal x387=IKcos(j4);
                                        IKReal x388=(x387)*(x387);
                                        IKReal x389=((x384)*(x386)*(x388));
                                        IKReal x390=((1.00000000000000)+(x389));
                                        IKReal x391=((IKabs(x390) != 0)?((IKReal)1/(x390)):(IKReal)1.0e30);
                                        IKReal x392=((IKabs(x383) != 0)?((IKReal)1/(x383)):(IKReal)1.0e30);
                                        IKReal x393=((IKabs(x385) != 0)?((IKReal)1/(x385)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((((_r01)*(x384)*(x386)*(x387)*(x391)))+(((_r00)*(x391)*(x392)*(x393)))), ((((-1.00000000000000)*(_r01)*(x391)*(x392)*(x393)))+(((_r00)*(x384)*(x386)*(x387)*(x391)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j2array[2], cj2array[2], sj2array[2];
                    bool j2valid[2]={false};
                    cj2array[0]=((3.82116927779862)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))*(((((py)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz))))));
                    if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                        j2valid[0] = j2valid[1] = true;
                        j2array[0] = IKacos(cj2array[0]);
                        sj2array[0] = IKsin(j2array[0]);
                        cj2array[1] = cj2array[0];
                        j2array[1] = -j2array[0];
                        sj2array[1] = -sj2array[0];
                    }
                    else if( isnan(cj2array[0]) ) {
                        // probably any value will work
                        j2valid[0] = true;
                        cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                    }
                    if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                        j2valid[1]=false;
                    for(int ij2 = 0; ij2 < 2; ++ij2) {
                    if( !j2valid[ij2] )
                        continue;
                    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x394=(px)*(px);
                    IKReal x395=((2.00000000000000)*(cj0)*(py)*(pz)*(sj0));
                    IKReal x396=(pz)*(pz);
                    IKReal x397=(sj0)*(sj0);
                    IKReal x398=((x396)*(x397));
                    IKReal x399=(cj0)*(cj0);
                    IKReal x400=(py)*(py);
                    IKReal x401=((x399)*(x400));
                    IKReal x402=((x401)+(x395)+(x394)+(x398));
                    IKReal x403=((IKabs(x402) != 0)?((IKReal)1/(x402)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((0.261699999999109)*(pz)*(sj0)*(sj2)*(sj3)*(x403)))+(((0.261699999999109)*(cj3)*(px)*(x403)))+(((0.261699999999109)*(cj0)*(py)*(sj2)*(sj3)*(x403)))+(((0.310199999999895)*(px)*(x403)))), ((((-0.310199999999895)*(pz)*(sj0)*(x403)))+(((-0.310199999999895)*(cj0)*(py)*(x403)))+(((0.261699999999109)*(px)*(sj2)*(sj3)*(x403)))+(((-0.261699999999109)*(cj0)*(cj3)*(py)*(x403)))+(((-0.261699999999109)*(cj3)*(pz)*(sj0)*(x403)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((cj2)*(r20)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((cj0)*(cj2)*(r10)*(sj1)))+(((cj0)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj2))));
                    _r01=((((cj0)*(cj2)*(r11)*(sj1)))+(((cj0)*(r21)*(sj2)))+(((cj2)*(r21)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((-1.00000000000000)*(r11)*(sj0)*(sj2))));
                    _r02=((((cj0)*(cj2)*(r12)*(sj1)))+(((-1.00000000000000)*(r12)*(sj0)*(sj2)))+(((cj2)*(r22)*(sj0)*(sj1)))+(((cj0)*(r22)*(sj2)))+(((cj1)*(cj2)*(r02))));
                    _r10=((((-1.00000000000000)*(cj2)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj0)*(cj2)*(r20)*(sj3)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj2)*(sj3))));
                    _r11=((((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r11)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                    _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj2)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r22)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj2)*(sj3))));
                    _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1)*(sj2)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj0)))+(((cj0)*(cj2)*(cj3)*(r20))));
                    _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11)*(sj0))));
                    _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                    {
                    IKReal j5eval;
                    j5eval=_r12;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(_r02, _r22);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x404=IKcos(j4);
                            IKReal x405=((IKabs(x404) != 0)?((IKReal)1/(x404)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r01)*(x405)), ((_r00)*(x405)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal evalcond;
                                evalcond=IKsin(j4);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x406=IKcos(j4);
                                IKReal x407=((IKabs(x406) != 0)?((IKReal)1/(x406)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r01)*(x407)), ((_r00)*(x407)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                evalcond=IKsin(j5);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x408=IKcos(j5);
                                    IKReal x409=((IKabs(x408) != 0)?((IKReal)1/(x408)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x409)), ((_r11)*(x409)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x410=IKcos(j4);
                                    IKReal x411=((IKabs(x410) != 0)?((IKReal)1/(x410)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r01)*(x411)), ((_r00)*(x411)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x412=IKsin(j4);
                                IKReal x413=((IKabs(x412) != 0)?(pow(x412,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x414=IKsin(j5);
                                IKReal x415=((IKabs(x414) != 0)?(pow(x414,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x416=IKcos(j4);
                                IKReal x417=(x416)*(x416);
                                IKReal x418=((x413)*(x415)*(x417));
                                IKReal x419=((1.00000000000000)+(x418));
                                IKReal x420=((IKabs(x419) != 0)?((IKReal)1/(x419)):(IKReal)1.0e30);
                                IKReal x421=((IKabs(x412) != 0)?((IKReal)1/(x412)):(IKReal)1.0e30);
                                IKReal x422=((IKabs(x414) != 0)?((IKReal)1/(x414)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((_r00)*(x420)*(x421)*(x422)))+(((_r01)*(x413)*(x415)*(x416)*(x420)))), ((((-1.00000000000000)*(_r01)*(x420)*(x421)*(x422)))+(((_r00)*(x413)*(x415)*(x416)*(x420)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j2array[2], cj2array[2], sj2array[2];
                bool j2valid[2]={false};
                cj2array[0]=((3.82116927779862)*(((IKabs(sj3) != 0)?((IKReal)1/(sj3)):(IKReal)1.0e30))*(((((py)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz))))));
                if( cj2array[0] >= -1.0001 && cj2array[0] <= 1.0001 ) {
                    j2valid[0] = j2valid[1] = true;
                    j2array[0] = IKacos(cj2array[0]);
                    sj2array[0] = IKsin(j2array[0]);
                    cj2array[1] = cj2array[0];
                    j2array[1] = -j2array[0];
                    sj2array[1] = -sj2array[0];
                }
                else if( isnan(cj2array[0]) ) {
                    // probably any value will work
                    j2valid[0] = true;
                    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
                }
                if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                    j2valid[1]=false;
                for(int ij2 = 0; ij2 < 2; ++ij2) {
                if( !j2valid[ij2] )
                    continue;
                j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x423=(px)*(px);
                IKReal x424=((2.00000000000000)*(cj0)*(py)*(pz)*(sj0));
                IKReal x425=(pz)*(pz);
                IKReal x426=(sj0)*(sj0);
                IKReal x427=((x425)*(x426));
                IKReal x428=(cj0)*(cj0);
                IKReal x429=(py)*(py);
                IKReal x430=((x428)*(x429));
                IKReal x431=((x430)+(x427)+(x424)+(x423));
                IKReal x432=((IKabs(x431) != 0)?((IKReal)1/(x431)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((0.261699999999109)*(cj0)*(py)*(sj2)*(sj3)*(x432)))+(((0.261699999999109)*(pz)*(sj0)*(sj2)*(sj3)*(x432)))+(((0.310199999999895)*(px)*(x432)))+(((0.261699999999109)*(cj3)*(px)*(x432)))), ((((-0.310199999999895)*(cj0)*(py)*(x432)))+(((-0.261699999999109)*(cj0)*(cj3)*(py)*(x432)))+(((-0.310199999999895)*(pz)*(sj0)*(x432)))+(((0.261699999999109)*(px)*(sj2)*(sj3)*(x432)))+(((-0.261699999999109)*(cj3)*(pz)*(sj0)*(x432)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((cj2)*(r20)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((cj0)*(cj2)*(r10)*(sj1)))+(((cj0)*(r20)*(sj2)))+(((-1.00000000000000)*(r10)*(sj0)*(sj2))));
                _r01=((((cj0)*(cj2)*(r11)*(sj1)))+(((cj0)*(r21)*(sj2)))+(((cj2)*(r21)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r01)))+(((-1.00000000000000)*(r11)*(sj0)*(sj2))));
                _r02=((((cj0)*(cj2)*(r12)*(sj1)))+(((-1.00000000000000)*(r12)*(sj0)*(sj2)))+(((cj2)*(r22)*(sj0)*(sj1)))+(((cj0)*(r22)*(sj2)))+(((cj1)*(cj2)*(r02))));
                _r10=((((-1.00000000000000)*(cj2)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj0)*(cj2)*(r20)*(sj3)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj2)*(sj3))));
                _r11=((((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r11)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj2)*(sj3))));
                _r12=((((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj2)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r02)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r22)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj2)*(sj3))));
                _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1)*(sj2)))+(((r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj0)))+(((cj0)*(cj2)*(cj3)*(r20))));
                _r21=((((r01)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11)*(sj0))));
                _r22=((((r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r02)*(sj2))));
                {
                IKReal j5eval;
                j5eval=_r12;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r01, ((-1.00000000000000)*(_r00))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(((-1.00000000000000)*(_r01)), _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(_r02, _r22);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKsin(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x433=IKcos(j4);
                        IKReal x434=((IKabs(x433) != 0)?((IKReal)1/(x433)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r01)*(x434)), ((_r00)*(x434)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r02)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x435=IKcos(j4);
                            IKReal x436=((IKabs(x435) != 0)?((IKReal)1/(x435)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r01)*(x436)), ((_r00)*(x436)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                            evalcond=IKsin(j5);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal evalcond;
                                evalcond=IKcos(j4);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x437=IKcos(j5);
                                IKReal x438=((IKabs(x437) != 0)?((IKReal)1/(x437)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((-1.00000000000000)*(_r10)*(x438)), ((_r11)*(x438)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x439=IKcos(j4);
                                IKReal x440=((IKabs(x439) != 0)?((IKReal)1/(x439)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r01)*(x440)), ((_r00)*(x440)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x441=IKsin(j4);
                            IKReal x442=((IKabs(x441) != 0)?(pow(x441,-2.00000000000000)):(IKReal)1.0e30);
                            IKReal x443=IKsin(j5);
                            IKReal x444=((IKabs(x443) != 0)?(pow(x443,-2.00000000000000)):(IKReal)1.0e30);
                            IKReal x445=IKcos(j4);
                            IKReal x446=(x445)*(x445);
                            IKReal x447=((x442)*(x444)*(x446));
                            IKReal x448=((1.00000000000000)+(x447));
                            IKReal x449=((IKabs(x448) != 0)?((IKReal)1/(x448)):(IKReal)1.0e30);
                            IKReal x450=((IKabs(x441) != 0)?((IKReal)1/(x441)):(IKReal)1.0e30);
                            IKReal x451=((IKabs(x443) != 0)?((IKReal)1/(x443)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((((_r01)*(x442)*(x444)*(x445)*(x449)))+(((_r00)*(x449)*(x450)*(x451)))), ((((-1.00000000000000)*(_r01)*(x449)*(x450)*(x451)))+(((_r00)*(x442)*(x444)*(x445)*(x449)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
    }
    }
    }
    }
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
