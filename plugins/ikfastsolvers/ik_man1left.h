/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    j6, cj6, sj6,
    j2=pfree[0], cj2=cos(pfree[0]), sj2=sin(pfree[0]),
    _r00, r00 = eerot[0*3+0],
    _r01, r01 = eerot[0*3+1],
    _r02, r02 = eerot[0*3+2],
    _r10, r10 = eerot[1*3+0],
    _r11, r11 = eerot[1*3+1],
    _r12, r12 = eerot[1*3+2],
    _r20, r20 = eerot[2*3+0],
    _r21, r21 = eerot[2*3+1],
    _r22, r22 = eerot[2*3+2],
    _px, _py, _pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    _r00=r00;
    _r01=r01;
    _r02=r02;
    _px=((-0.174400000000000)+(px));
    _r10=r10;
    _r11=r11;
    _r12=r12;
    _py=py;
    _r20=r20;
    _r21=r21;
    _r22=r22;
    _pz=pz;
    r00 = _r00; r01 = _r01; r02 = _r02; r10 = _r10; r11 = _r11; r12 = _r12; r20 = _r20; r21 = _r21; r22 = _r22; px = _px; py = _py; pz = _pz;
    {
    IKReal evalcond;
        evalcond=j2;
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j1eval[1];
            j1eval[0]=((0.310199999999895)+(((0.261699999999109)*(IKcos(j3)))));
            if( IKabs(j1eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=((0.310199999999895)+(((0.261699999999109)*(IKcos(j3)))));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x0=((0.261699999999109)*(sj3));
                        IKReal x1=((x0)+(pz));
                        IKReal x2=((-1.00000000000000)*(x1));
                        j0eval[0]=x2;
                        j0eval[1]=x2;
                        j0eval[2]=x2;
                        j0eval[3]=x2;
                        j0eval[4]=x2;
                        j0eval[5]=x2;
                        j0eval[6]=x2;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x3=((0.261699999999109)*(cj3));
                            IKReal x4=((0.310199999999895)+(x3));
                            IKReal x5=((IKabs(x4) != 0)?((IKReal)1/(x4)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((-1.00000000000000)*(px)*(x5)), ((-1.00000000000000)*(py)*(x5)));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(r20)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)))+(((cj1)*(r00))));
                            _r01=((((-1.00000000000000)*(r21)*(sj0)*(sj1)))+(((cj1)*(r01)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1))));
                            _r02=((((-1.00000000000000)*(r22)*(sj0)*(sj1)))+(((cj1)*(r02)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1))));
                            _r10=((((cj0)*(r20)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(r10)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj1))));
                            _r11=((((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((cj0)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(r12)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1)))+(((cj0)*(r22)*(sj3))));
                            _r20=((((cj0)*(cj3)*(r20)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3))));
                            _r21=((((cj0)*(cj3)*(r21)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                            _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r22)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((-1.00000000000000)*(_r02)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x6=IKsin(j4);
                                    IKReal x7=((IKabs(x6) != 0)?((IKReal)1/(x6)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((-1.00000000000000)*(_r21)*(x7)), ((_r20)*(x7)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x8=IKsin(j5);
                                        IKReal x9=((IKabs(x8) != 0)?((IKReal)1/(x8)):(IKReal)1.0e30);
                                        IKReal x10=IKsin(j4);
                                        IKReal x11=IKcos(j4);
                                        j6array[0]=IKatan2(((((-1.00000000000000)*(_r20)*(x11)*(x9)))+(((_r00)*(x10)*(x9)))), ((((_r00)*(x11)))+(((_r20)*(x10)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x12=IKcos(j5);
                                        IKReal x13=((IKabs(x12) != 0)?((IKReal)1/(x12)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r10)*(x13)), ((_r11)*(x13)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[9];
                        IKReal x14=((-1.00000000000000)*(px));
                        j1eval[0]=x14;
                        j1eval[1]=x14;
                        j1eval[2]=x14;
                        j1eval[3]=x14;
                        j1eval[4]=x14;
                        j1eval[5]=x14;
                        j1eval[6]=x14;
                        j1eval[7]=x14;
                        j1eval[8]=x14;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  && IKabs(j1eval[6]) < 0.000100  && IKabs(j1eval[7]) < 0.000100  && IKabs(j1eval[8]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x15=(pz)*(pz);
                            IKReal x16=(py)*(py);
                            IKReal x17=((x15)+(x16));
                            IKReal x18=((IKabs(x17) != 0)?((IKReal)1/(x17)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((((-0.310199999999895)*(pz)*(x18)))+(((-0.261699999999109)*(cj3)*(pz)*(x18)))+(((0.261699999999109)*(py)*(sj3)*(x18)))), ((((-0.310199999999895)*(py)*(x18)))+(((-0.261699999999109)*(pz)*(sj3)*(x18)))+(((-0.261699999999109)*(cj3)*(py)*(x18)))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((-1.00000000000000)*(r20)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)))+(((cj1)*(r00))));
                            _r01=((((-1.00000000000000)*(r21)*(sj0)*(sj1)))+(((cj1)*(r01)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1))));
                            _r02=((((-1.00000000000000)*(r22)*(sj0)*(sj1)))+(((cj1)*(r02)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1))));
                            _r10=((((cj0)*(r20)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(r10)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj1))));
                            _r11=((((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((cj0)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(r12)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1)))+(((cj0)*(r22)*(sj3))));
                            _r20=((((cj0)*(cj3)*(r20)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3))));
                            _r21=((((cj0)*(cj3)*(r21)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                            _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r22)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((-1.00000000000000)*(_r02)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x19=IKsin(j4);
                                    IKReal x20=((IKabs(x19) != 0)?((IKReal)1/(x19)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((-1.00000000000000)*(_r21)*(x20)), ((_r20)*(x20)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x21=IKsin(j5);
                                        IKReal x22=((IKabs(x21) != 0)?((IKReal)1/(x21)):(IKReal)1.0e30);
                                        IKReal x23=IKsin(j4);
                                        IKReal x24=IKcos(j4);
                                        j6array[0]=IKatan2(((((_r00)*(x22)*(x23)))+(((-1.00000000000000)*(_r20)*(x22)*(x24)))), ((((_r20)*(x23)))+(((_r00)*(x24)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x25=IKcos(j5);
                                        IKReal x26=((IKabs(x25) != 0)?((IKReal)1/(x25)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r10)*(x26)), ((_r11)*(x26)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j1array[2], cj1array[2], sj1array[2];
                    bool j1valid[2]={false};
                    sj1array[0]=((-1.00000000000000)*(px)*(((IKabs(((0.310199999999895)+(((0.261699999999109)*(cj3))))) != 0)?((IKReal)1/(((0.310199999999895)+(((0.261699999999109)*(cj3)))))):(IKReal)1.0e30)));
                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 ) {
                        j1valid[0] = j1valid[1] = true;
                        j1array[0] = IKasin(sj1array[0]);
                        cj1array[0] = IKcos(j1array[0]);
                        sj1array[1] = sj1array[0];
                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                        cj1array[1] = -cj1array[0];
                    }
                    else if( isnan(sj1array[0]) ) {
                        // probably any value will work
                        j1valid[0] = true;
                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                    }
                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                        j1valid[1]=false;
                    for(int ij1 = 0; ij1 < 2; ++ij1) {
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                    
                    {
                    IKReal j0array[1], cj0array[1], sj0array[1];
                    bool j0valid[1]={false};
                    IKReal x27=(pz)*(pz);
                    IKReal x28=(py)*(py);
                    IKReal x29=((x27)+(x28));
                    IKReal x30=((IKabs(x29) != 0)?((IKReal)1/(x29)):(IKReal)1.0e30);
                    j0array[0]=IKatan2(((((0.261699999999109)*(py)*(sj3)*(x30)))+(((-0.261699999999109)*(cj1)*(cj3)*(pz)*(x30)))+(((-0.310199999999895)*(cj1)*(pz)*(x30)))), ((((-0.261699999999109)*(pz)*(sj3)*(x30)))+(((-0.261699999999109)*(cj1)*(cj3)*(py)*(x30)))+(((-0.310199999999895)*(cj1)*(py)*(x30)))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    { int ij0 = 0;
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                    
                    _r00=((((-1.00000000000000)*(r20)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)))+(((cj1)*(r00))));
                    _r01=((((-1.00000000000000)*(r21)*(sj0)*(sj1)))+(((cj1)*(r01)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1))));
                    _r02=((((-1.00000000000000)*(r22)*(sj0)*(sj1)))+(((cj1)*(r02)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1))));
                    _r10=((((cj0)*(r20)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(r10)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj1))));
                    _r11=((((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((cj0)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj0)*(sj3))));
                    _r12=((((-1.00000000000000)*(r12)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1)))+(((cj0)*(r22)*(sj3))));
                    _r20=((((cj0)*(cj3)*(r20)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3))));
                    _r21=((((cj0)*(cj3)*(r21)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                    _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r22)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                    {
                    IKReal j5eval;
                    j5eval=_r12;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1]={false};
                        j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        { int ij4 = 0;
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKcos(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((-1.00000000000000)*(_r02)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x31=IKsin(j4);
                            IKReal x32=((IKabs(x31) != 0)?((IKReal)1/(x31)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((-1.00000000000000)*(_r21)*(x32)), ((_r20)*(x32)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal evalcond;
                                evalcond=IKcos(j5);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x33=IKsin(j5);
                                IKReal x34=((IKabs(x33) != 0)?((IKReal)1/(x33)):(IKReal)1.0e30);
                                IKReal x35=IKsin(j4);
                                IKReal x36=IKcos(j4);
                                j6array[0]=IKatan2(((((-1.00000000000000)*(_r20)*(x34)*(x36)))+(((_r00)*(x34)*(x35)))), ((((_r00)*(x36)))+(((_r20)*(x35)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x37=IKcos(j5);
                                IKReal x38=((IKabs(x37) != 0)?((IKReal)1/(x37)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r10)*(x38)), ((_r11)*(x38)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j1array[2], cj1array[2], sj1array[2];
                bool j1valid[2]={false};
                sj1array[0]=((-1.00000000000000)*(px)*(((IKabs(((0.310199999999895)+(((0.261699999999109)*(cj3))))) != 0)?((IKReal)1/(((0.310199999999895)+(((0.261699999999109)*(cj3)))))):(IKReal)1.0e30)));
                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 ) {
                    j1valid[0] = j1valid[1] = true;
                    j1array[0] = IKasin(sj1array[0]);
                    cj1array[0] = IKcos(j1array[0]);
                    sj1array[1] = sj1array[0];
                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                    cj1array[1] = -cj1array[0];
                }
                else if( isnan(sj1array[0]) ) {
                    // probably any value will work
                    j1valid[0] = true;
                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                }
                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                    j1valid[1]=false;
                for(int ij1 = 0; ij1 < 2; ++ij1) {
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                
                {
                IKReal j0array[1], cj0array[1], sj0array[1];
                bool j0valid[1]={false};
                IKReal x39=(pz)*(pz);
                IKReal x40=(py)*(py);
                IKReal x41=((x40)+(x39));
                IKReal x42=((IKabs(x41) != 0)?((IKReal)1/(x41)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((((0.261699999999109)*(py)*(sj3)*(x42)))+(((-0.310199999999895)*(cj1)*(pz)*(x42)))+(((-0.261699999999109)*(cj1)*(cj3)*(pz)*(x42)))), ((((-0.261699999999109)*(pz)*(sj3)*(x42)))+(((-0.310199999999895)*(cj1)*(py)*(x42)))+(((-0.261699999999109)*(cj1)*(cj3)*(py)*(x42)))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                { int ij0 = 0;
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                
                _r00=((((-1.00000000000000)*(r20)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)))+(((cj1)*(r00))));
                _r01=((((-1.00000000000000)*(r21)*(sj0)*(sj1)))+(((cj1)*(r01)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1))));
                _r02=((((-1.00000000000000)*(r22)*(sj0)*(sj1)))+(((cj1)*(r02)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1))));
                _r10=((((cj0)*(r20)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(r10)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj1))));
                _r11=((((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((cj0)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj0)*(sj3))));
                _r12=((((-1.00000000000000)*(r12)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1)))+(((cj0)*(r22)*(sj3))));
                _r20=((((cj0)*(cj3)*(r20)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3))));
                _r21=((((cj0)*(cj3)*(r21)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r22)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                {
                IKReal j5eval;
                j5eval=_r12;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[1], cj4array[1], sj4array[1];
                    bool j4valid[1]={false};
                    j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    { int ij4 = 0;
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKcos(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((-1.00000000000000)*(_r02)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x43=IKsin(j4);
                        IKReal x44=((IKabs(x43) != 0)?((IKReal)1/(x43)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((-1.00000000000000)*(_r21)*(x44)), ((_r20)*(x44)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKcos(j5);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x45=IKsin(j5);
                            IKReal x46=((IKabs(x45) != 0)?((IKReal)1/(x45)):(IKReal)1.0e30);
                            IKReal x47=IKsin(j4);
                            IKReal x48=IKcos(j4);
                            j6array[0]=IKatan2(((((_r00)*(x46)*(x47)))+(((-1.00000000000000)*(_r20)*(x46)*(x48)))), ((((_r20)*(x47)))+(((_r00)*(x48)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x49=IKcos(j5);
                            IKReal x50=((IKabs(x49) != 0)?((IKReal)1/(x49)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r10)*(x50)), ((_r11)*(x50)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((((-0.500000000000000)*(3.14159265358979)))+(j2));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x51=((-1.00000000000000)*(pz));
        IKReal x52=IKatan2(x51, py);
        j0array[0]=((-1.00000000000000)*(x52));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x52))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x53=((0.261699999999109)*(cj3)*(px));
        IKReal x54=((0.310199999999895)*(px));
        IKReal x55=((0.261699999999109)*(pz)*(sj0)*(sj3));
        IKReal x56=((0.261699999999109)*(cj0)*(py)*(sj3));
        IKReal x57=((x55)+(x54)+(x56)+(x53));
        IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((((-1.00000000000000)*(x58)*((px)*(px))))+(((0.0684868899998037)*(x58)*((sj3)*(sj3))))), ((((-3.22372662796988)*(pz)*(sj0)*(x54)*(x58)))+(((-3.22372662796988)*(cj0)*(py)*(x54)*(x58)))+(((-0.0811793399998351)*(sj3)*(x58)))+(((-0.0684868899998037)*(cj3)*(sj3)*(x58)))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(r20))));
        _r01=((((-1.00000000000000)*(cj0)*(r21)))+(((r11)*(sj0))));
        _r02=((((r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(r22))));
        _r10=((((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj3)))+(((cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj3))));
        _r11=((((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj3)))+(((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj3))));
        _r12=((((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj3)))+(((cj1)*(r02)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1))));
        _r20=((((cj1)*(cj3)*(r00)))+(((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1))));
        _r21=((((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)))+(((cj1)*(cj3)*(r01)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
        _r22=((((cj1)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)))+(((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
        {
        IKReal j5eval;
        j5eval=_r12;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[1], cj4array[1], sj4array[1];
            bool j4valid[1]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            { int ij4 = 0;
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
            
            {
            IKReal evalcond;
                evalcond=IKcos(j4);
                if( IKabs(evalcond) < 0.00001 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(_r12, ((-1.00000000000000)*(_r02)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x59=IKsin(j4);
                IKReal x60=((IKabs(x59) != 0)?((IKReal)1/(x59)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((-1.00000000000000)*(_r21)*(x60)), ((_r20)*(x60)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                { int ij6 = 0;
                if( !j6valid[ij6] )
                    continue;
                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                } else {
                if( 1 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal evalcond;
                    evalcond=IKcos(j5);
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x61=IKsin(j5);
                    IKReal x62=((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30);
                    IKReal x63=IKsin(j4);
                    IKReal x64=IKcos(j4);
                    j6array[0]=IKatan2(((((_r00)*(x62)*(x63)))+(((-1.00000000000000)*(_r20)*(x62)*(x64)))), ((((_r00)*(x64)))+(((_r20)*(x63)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x65=IKcos(j5);
                    IKReal x66=((IKabs(x65) != 0)?((IKReal)1/(x65)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((_r10)*(x66)), ((_r11)*(x66)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    } else {
                }
                }
                }
                }
                }
                } else {
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        evalcond=((j2)+(((-1.00000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j1eval[1];
            j1eval[0]=((0.310199999999895)+(((0.261699999999109)*(IKcos(j3)))));
            if( IKabs(j1eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=((0.310199999999895)+(((0.261699999999109)*(IKcos(j3)))));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x67=((0.261699999999109)*(sj3));
                        IKReal x68=((((-1.00000000000000)*(pz)))+(x67));
                        IKReal x69=((((-1.00000000000000)*(x67)))+(pz));
                        j0eval[0]=x68;
                        j0eval[1]=x68;
                        j0eval[2]=x68;
                        j0eval[3]=x68;
                        j0eval[4]=x68;
                        j0eval[5]=x69;
                        j0eval[6]=x69;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x70=((0.261699999999109)*(cj3));
                            IKReal x71=((0.310199999999895)+(x70));
                            IKReal x72=((IKabs(x71) != 0)?((IKReal)1/(x71)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((-1.00000000000000)*(px)*(x72)), ((-1.00000000000000)*(py)*(x72)));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((r20)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)))+(((cj0)*(r10)*(sj1))));
                            _r01=((((-1.00000000000000)*(cj1)*(r01)))+(((r21)*(sj0)*(sj1)))+(((cj0)*(r11)*(sj1))));
                            _r02=((((r22)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02))));
                            _r10=((((r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r20)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj1))));
                            _r11=((((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r21)*(sj3)))+(((r11)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(r22)*(sj3)))+(((r12)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r20)))+(((cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3))));
                            _r21=((((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)))+(((cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                            _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)))+(((cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x73=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r10)*(x73)), ((_r11)*(x73)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[6];
                        IKReal x74=((-1.00000000000000)*(px));
                        j1eval[0]=x74;
                        j1eval[1]=x74;
                        j1eval[2]=x74;
                        j1eval[3]=x74;
                        j1eval[4]=x74;
                        j1eval[5]=px;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  && IKabs(j1eval[5]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x75=(pz)*(pz);
                            IKReal x76=(py)*(py);
                            IKReal x77=((x76)+(x75));
                            IKReal x78=((IKabs(x77) != 0)?((IKReal)1/(x77)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((((-0.261699999999109)*(cj3)*(pz)*(x78)))+(((-0.261699999999109)*(py)*(sj3)*(x78)))+(((-0.310199999999895)*(pz)*(x78)))), ((((-0.310199999999895)*(py)*(x78)))+(((-0.261699999999109)*(cj3)*(py)*(x78)))+(((0.261699999999109)*(pz)*(sj3)*(x78)))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((r20)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)))+(((cj0)*(r10)*(sj1))));
                            _r01=((((-1.00000000000000)*(cj1)*(r01)))+(((r21)*(sj0)*(sj1)))+(((cj0)*(r11)*(sj1))));
                            _r02=((((r22)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02))));
                            _r10=((((r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r20)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj1))));
                            _r11=((((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r21)*(sj3)))+(((r11)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(r22)*(sj3)))+(((r12)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r20)))+(((cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3))));
                            _r21=((((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)))+(((cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                            _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)))+(((cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x79=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r10)*(x79)), ((_r11)*(x79)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j1array[2], cj1array[2], sj1array[2];
                    bool j1valid[2]={false};
                    sj1array[0]=((-1.00000000000000)*(px)*(((IKabs(((0.310199999999895)+(((0.261699999999109)*(cj3))))) != 0)?((IKReal)1/(((0.310199999999895)+(((0.261699999999109)*(cj3)))))):(IKReal)1.0e30)));
                    if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 ) {
                        j1valid[0] = j1valid[1] = true;
                        j1array[0] = IKasin(sj1array[0]);
                        cj1array[0] = IKcos(j1array[0]);
                        sj1array[1] = sj1array[0];
                        j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                        cj1array[1] = -cj1array[0];
                    }
                    else if( isnan(sj1array[0]) ) {
                        // probably any value will work
                        j1valid[0] = true;
                        cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                    }
                    if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                        j1valid[1]=false;
                    for(int ij1 = 0; ij1 < 2; ++ij1) {
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                    
                    {
                    IKReal j0array[1], cj0array[1], sj0array[1];
                    bool j0valid[1]={false};
                    IKReal x80=(pz)*(pz);
                    IKReal x81=(py)*(py);
                    IKReal x82=((x80)+(x81));
                    IKReal x83=((IKabs(x82) != 0)?((IKReal)1/(x82)):(IKReal)1.0e30);
                    j0array[0]=IKatan2(((((-0.261699999999109)*(py)*(sj3)*(x83)))+(((-0.261699999999109)*(cj1)*(cj3)*(pz)*(x83)))+(((-0.310199999999895)*(cj1)*(pz)*(x83)))), ((((-0.261699999999109)*(cj1)*(cj3)*(py)*(x83)))+(((0.261699999999109)*(pz)*(sj3)*(x83)))+(((-0.310199999999895)*(cj1)*(py)*(x83)))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    { int ij0 = 0;
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                    
                    _r00=((((r20)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)))+(((cj0)*(r10)*(sj1))));
                    _r01=((((-1.00000000000000)*(cj1)*(r01)))+(((r21)*(sj0)*(sj1)))+(((cj0)*(r11)*(sj1))));
                    _r02=((((r22)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02))));
                    _r10=((((r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r20)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj1))));
                    _r11=((((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r21)*(sj3)))+(((r11)*(sj0)*(sj3))));
                    _r12=((((-1.00000000000000)*(cj0)*(r22)*(sj3)))+(((r12)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1))));
                    _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r20)))+(((cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3))));
                    _r21=((((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)))+(((cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                    _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)))+(((cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                    {
                    IKReal j5eval;
                    j5eval=_r12;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1]={false};
                        j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        { int ij4 = 0;
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                        
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x84=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r10)*(x84)), ((_r11)*(x84)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j1array[2], cj1array[2], sj1array[2];
                bool j1valid[2]={false};
                sj1array[0]=((-1.00000000000000)*(px)*(((IKabs(((0.310199999999895)+(((0.261699999999109)*(cj3))))) != 0)?((IKReal)1/(((0.310199999999895)+(((0.261699999999109)*(cj3)))))):(IKReal)1.0e30)));
                if( sj1array[0] >= -1.0001 && sj1array[0] <= 1.0001 ) {
                    j1valid[0] = j1valid[1] = true;
                    j1array[0] = IKasin(sj1array[0]);
                    cj1array[0] = IKcos(j1array[0]);
                    sj1array[1] = sj1array[0];
                    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
                    cj1array[1] = -cj1array[0];
                }
                else if( isnan(sj1array[0]) ) {
                    // probably any value will work
                    j1valid[0] = true;
                    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
                }
                if( j1valid[0] && j1valid[1] && IKabs(cj1array[0]-cj1array[1]) < 0.0001 && IKabs(sj1array[0]-sj1array[1]) < 0.0001 )
                    j1valid[1]=false;
                for(int ij1 = 0; ij1 < 2; ++ij1) {
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
                
                {
                IKReal j0array[1], cj0array[1], sj0array[1];
                bool j0valid[1]={false};
                IKReal x85=(pz)*(pz);
                IKReal x86=(py)*(py);
                IKReal x87=((x86)+(x85));
                IKReal x88=((IKabs(x87) != 0)?((IKReal)1/(x87)):(IKReal)1.0e30);
                j0array[0]=IKatan2(((((-0.261699999999109)*(py)*(sj3)*(x88)))+(((-0.310199999999895)*(cj1)*(pz)*(x88)))+(((-0.261699999999109)*(cj1)*(cj3)*(pz)*(x88)))), ((((0.261699999999109)*(pz)*(sj3)*(x88)))+(((-0.310199999999895)*(cj1)*(py)*(x88)))+(((-0.261699999999109)*(cj1)*(cj3)*(py)*(x88)))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                { int ij0 = 0;
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                
                _r00=((((r20)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r00)))+(((cj0)*(r10)*(sj1))));
                _r01=((((-1.00000000000000)*(cj1)*(r01)))+(((r21)*(sj0)*(sj1)))+(((cj0)*(r11)*(sj1))));
                _r02=((((r22)*(sj0)*(sj1)))+(((cj0)*(r12)*(sj1)))+(((-1.00000000000000)*(cj1)*(r02))));
                _r10=((((r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj0)*(r20)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj1))));
                _r11=((((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(r21)*(sj3)))+(((r11)*(sj0)*(sj3))));
                _r12=((((-1.00000000000000)*(cj0)*(r22)*(sj3)))+(((r12)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1))));
                _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r20)))+(((cj3)*(r10)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3))));
                _r21=((((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)))+(((cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)))+(((cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                {
                IKReal j5eval;
                j5eval=_r12;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[1], cj4array[1], sj4array[1];
                    bool j4valid[1]={false};
                    j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    { int ij4 = 0;
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                    
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    { int ij5 = 0;
                    if( !j5valid[ij5] )
                        continue;
                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                    
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x89=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((_r10)*(x89)), ((_r11)*(x89)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((j2)+(((0.500000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x90=((-1.00000000000000)*(pz));
        IKReal x91=IKatan2(x90, py);
        j0array[0]=((-1.00000000000000)*(x91));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x91))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x92=((0.261699999999109)*(cj3)*(px));
        IKReal x93=((0.310199999999895)*(px));
        IKReal x94=((x93)+(x92));
        IKReal x95=((0.261699999999109)*(pz)*(sj0)*(sj3));
        IKReal x96=((0.261699999999109)*(cj0)*(py)*(sj3));
        IKReal x97=((x95)+(x96));
        IKReal x98=((((-1.00000000000000)*(x97)))+(x94));
        IKReal x99=((IKabs(x98) != 0)?((IKReal)1/(x98)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((((0.0684868899998037)*(x99)*((sj3)*(sj3))))+(((-1.00000000000000)*(x99)*((px)*(px))))), ((((0.0811793399998351)*(sj3)*(x99)))+(((-3.22372662796988)*(cj0)*(py)*(x93)*(x99)))+(((0.0684868899998037)*(cj3)*(sj3)*(x99)))+(((-3.22372662796988)*(pz)*(sj0)*(x93)*(x99)))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((-1.00000000000000)*(r10)*(sj0)))+(((cj0)*(r20))));
        _r01=((((-1.00000000000000)*(r11)*(sj0)))+(((cj0)*(r21))));
        _r02=((((cj0)*(r22)))+(((-1.00000000000000)*(r12)*(sj0))));
        _r10=((((r20)*(sj0)*(sj1)*(sj3)))+(((cj0)*(r10)*(sj1)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((-1.00000000000000)*(cj1)*(r00)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj1))));
        _r11=((((cj0)*(r11)*(sj1)*(sj3)))+(((cj3)*(r01)*(sj1)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((r21)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11))));
        _r12=((((r22)*(sj0)*(sj1)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1)))+(((cj0)*(r12)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r02)*(sj3))));
        _r20=((((cj0)*(cj3)*(r10)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((cj3)*(r20)*(sj0)*(sj1)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r00))));
        _r21=((((cj0)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((cj3)*(r21)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r01)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
        _r22=((((-1.00000000000000)*(cj1)*(cj3)*(r02)))+(((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3)))+(((cj3)*(r22)*(sj0)*(sj1))));
        {
        IKReal j5eval;
        j5eval=_r12;
        if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[1], cj4array[1], sj4array[1];
            bool j4valid[1]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            { int ij4 = 0;
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
            
            {
            IKReal j5array[1], cj5array[1], sj5array[1];
            bool j5valid[1]={false};
            j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
            sj5array[0]=IKsin(j5array[0]);
            cj5array[0]=IKcos(j5array[0]);
            if( j5array[0] > IKPI )
                j5array[0]-=IK2PI;
            else if( j5array[0] < -IKPI )
                j5array[0]+=IK2PI;
            j5valid[0] = true;
            { int ij5 = 0;
            if( !j5valid[ij5] )
                continue;
            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
            
            {
            IKReal j6array[1], cj6array[1], sj6array[1];
            bool j6valid[1]={false};
            IKReal x100=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
            j6array[0]=IKatan2(((_r10)*(x100)), ((_r11)*(x100)));
            sj6array[0]=IKsin(j6array[0]);
            cj6array[0]=IKcos(j6array[0]);
            if( j6array[0] > IKPI )
                j6array[0]-=IK2PI;
            else if( j6array[0] < -IKPI )
                j6array[0]+=IK2PI;
            j6valid[0] = true;
            { int ij6 = 0;
            if( !j6valid[ij6] )
                continue;
            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
            
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.vfree.resize(0);
            }
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        if( 1 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        cj3array[0]=((-1.01448798425554)+(((6.15920257545076)*((px)*(px))))+(((6.15920257545076)*((pz)*(pz))))+(((6.15920257545076)*((py)*(py)))));
        if( cj3array[0] >= -1.0001 && cj3array[0] <= 1.0001 ) {
            j3valid[0] = j3valid[1] = true;
            j3array[0] = IKacos(cj3array[0]);
            sj3array[0] = IKsin(j3array[0]);
            cj3array[1] = cj3array[0];
            j3array[1] = -j3array[0];
            sj3array[1] = -sj3array[0];
        }
        else if( isnan(cj3array[0]) ) {
            // probably any value will work
            j3valid[0] = true;
            cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
        }
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            j0eval[0]=(((pz)*(pz))+((py)*(py)));
            if( IKabs(j0eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=(((pz)*(pz))+((py)*(py)));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[5];
                        IKReal x101=((0.261699999999109)*(cj2)*(sj3));
                        IKReal x102=((pz)+(x101));
                        IKReal x103=((-1.00000000000000)*(x102));
                        j0eval[0]=x103;
                        j0eval[1]=x103;
                        j0eval[2]=x103;
                        j0eval[3]=x103;
                        j0eval[4]=x103;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x104=(px)*(px);
                            IKReal x105=(py)*(py);
                            IKReal x106=((x104)+(x105));
                            IKReal x107=((-1.00000000000000)*(x106));
                            IKReal x108=((IKabs(x107) != 0)?((IKReal)1/(x107)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((0.310199999999895)*(px)*(x108)))+(((0.261699999999109)*(cj3)*(px)*(x108)))+(((-0.261699999999109)*(py)*(sj2)*(sj3)*(x108)))), ((((0.310199999999895)*(py)*(x108)))+(((0.261699999999109)*(px)*(sj2)*(sj3)*(x108)))+(((0.261699999999109)*(cj3)*(py)*(x108)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(cj0)*(cj2)*(r10)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((r10)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(r20)*(sj2)))+(((-1.00000000000000)*(cj2)*(r20)*(sj0)*(sj1))));
                            _r01=((((-1.00000000000000)*(cj0)*(r21)*(sj2)))+(((-1.00000000000000)*(cj2)*(r21)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj2)*(r11)*(sj1)))+(((r11)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r01))));
                            _r02=((((-1.00000000000000)*(cj0)*(r22)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(r12)*(sj1)))+(((r12)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj2)*(r22)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r02))));
                            _r10=((((-1.00000000000000)*(cj2)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj0)*(cj2)*(r20)*(sj3)))+(((cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj2)*(sj3))));
                            _r11=((((cj1)*(r01)*(sj2)*(sj3)))+(((cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r11)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj2)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj2)*(sj3)))+(((cj1)*(r02)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r22)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj2)*(sj3))));
                            _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj0)))+(((cj1)*(cj3)*(r00)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r20))));
                            _r21=((((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                            _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj2)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((-1.00000000000000)*(_r02)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x109=IKsin(j4);
                                    IKReal x110=((IKabs(x109) != 0)?((IKReal)1/(x109)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((-1.00000000000000)*(_r21)*(x110)), ((_r20)*(x110)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x111=IKsin(j5);
                                        IKReal x112=((IKabs(x111) != 0)?((IKReal)1/(x111)):(IKReal)1.0e30);
                                        IKReal x113=IKsin(j4);
                                        IKReal x114=IKcos(j4);
                                        j6array[0]=IKatan2(((((_r00)*(x112)*(x113)))+(((-1.00000000000000)*(_r20)*(x112)*(x114)))), ((((_r00)*(x114)))+(((_r20)*(x113)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x115=IKcos(j5);
                                        IKReal x116=((IKabs(x115) != 0)?((IKReal)1/(x115)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r10)*(x116)), ((_r11)*(x116)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[5];
                        IKReal x117=((0.261699999999109)*(sj2)*(sj3));
                        IKReal x118=((px)+(x117));
                        IKReal x119=((-1.00000000000000)*(x118));
                        j1eval[0]=x119;
                        j1eval[1]=x119;
                        j1eval[2]=x119;
                        j1eval[3]=x119;
                        j1eval[4]=x119;
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x120=(pz)*(pz);
                            IKReal x121=(py)*(py);
                            IKReal x122=((x120)+(x121));
                            IKReal x123=((IKabs(x122) != 0)?((IKReal)1/(x122)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((((-0.261699999999109)*(cj3)*(pz)*(x123)))+(((0.261699999999109)*(cj2)*(py)*(sj3)*(x123)))+(((-0.310199999999895)*(pz)*(x123)))), ((((-0.261699999999109)*(cj3)*(py)*(x123)))+(((-0.261699999999109)*(cj2)*(pz)*(sj3)*(x123)))+(((-0.310199999999895)*(py)*(x123)))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((-1.00000000000000)*(cj0)*(cj2)*(r10)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((r10)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(r20)*(sj2)))+(((-1.00000000000000)*(cj2)*(r20)*(sj0)*(sj1))));
                            _r01=((((-1.00000000000000)*(cj0)*(r21)*(sj2)))+(((-1.00000000000000)*(cj2)*(r21)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj2)*(r11)*(sj1)))+(((r11)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r01))));
                            _r02=((((-1.00000000000000)*(cj0)*(r22)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(r12)*(sj1)))+(((r12)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj2)*(r22)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r02))));
                            _r10=((((-1.00000000000000)*(cj2)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj0)*(cj2)*(r20)*(sj3)))+(((cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj2)*(sj3))));
                            _r11=((((cj1)*(r01)*(sj2)*(sj3)))+(((cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r11)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj2)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj2)*(sj3)))+(((cj1)*(r02)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r22)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj2)*(sj3))));
                            _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj0)))+(((cj1)*(cj3)*(r00)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r20))));
                            _r21=((((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                            _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj2)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                            {
                            IKReal j5eval;
                            j5eval=_r12;
                            if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((-1.00000000000000)*(_r02)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x124=IKsin(j4);
                                    IKReal x125=((IKabs(x124) != 0)?((IKReal)1/(x124)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((-1.00000000000000)*(_r21)*(x125)), ((_r20)*(x125)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x126=IKsin(j5);
                                        IKReal x127=((IKabs(x126) != 0)?((IKReal)1/(x126)):(IKReal)1.0e30);
                                        IKReal x128=IKsin(j4);
                                        IKReal x129=IKcos(j4);
                                        j6array[0]=IKatan2(((((-1.00000000000000)*(_r20)*(x127)*(x129)))+(((_r00)*(x127)*(x128)))), ((((_r00)*(x129)))+(((_r20)*(x128)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x130=IKcos(j5);
                                        IKReal x131=((IKabs(x130) != 0)?((IKReal)1/(x130)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r10)*(x131)), ((_r11)*(x131)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j0array[2], cj0array[2], sj0array[2];
                    bool j0valid[2]={false};
                    IKReal x132=((-1.00000000000000)*(pz));
                    IKReal x133=IKatan2(x132, py);
                    IKReal x134=(pz)*(pz);
                    IKReal x135=(py)*(py);
                    IKReal x136=((x135)+(x134));
                    IKReal x137=((IKabs(x136) != 0)?(pow(x136,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x138=((0.261699999999109)*(cj2)*(sj3)*(x137));
                    if( (x138) < -1.0001 || (x138) > 1.0001 )
                        continue;
                    IKReal x139=IKasin(x138);
                    j0array[0]=((x139)+(((-1.00000000000000)*(x133))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x139)))+(((-1.00000000000000)*(x133))));
                    sj0array[1]=IKsin(j0array[1]);
                    cj0array[1]=IKcos(j0array[1]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    if( j0array[1] > IKPI )
                        j0array[1]-=IK2PI;
                    else if( j0array[1] < -IKPI )
                        j0array[1]+=IK2PI;
                    j0valid[1] = true;
                    if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                        j0valid[1]=false;
                    for(int ij0 = 0; ij0 < 2; ++ij0) {
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x140=(sj2)*(sj2);
                    IKReal x141=((0.261699999999109)*(cj3)*(px));
                    IKReal x142=((0.261699999999109)*(pz)*(sj0)*(sj2)*(sj3));
                    IKReal x143=((0.261699999999109)*(cj0)*(py)*(sj2)*(sj3));
                    IKReal x144=((0.310199999999895)*(px));
                    IKReal x145=((x141)+(x142)+(x143)+(x144));
                    IKReal x146=((IKabs(x145) != 0)?((IKReal)1/(x145)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((-1.00000000000000)*(x146)*((px)*(px))))+(((-0.0684868899998037)*(x140)*(x146)*((cj3)*(cj3))))+(((0.0684868899998037)*(x140)*(x146)))), ((((-0.0811793399998351)*(sj2)*(sj3)*(x146)))+(((-3.22372662796988)*(cj0)*(py)*(x144)*(x146)))+(((-3.22372662796988)*(pz)*(sj0)*(x144)*(x146)))+(((-0.0684868899998037)*(cj3)*(sj2)*(sj3)*(x146)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((-1.00000000000000)*(cj0)*(cj2)*(r10)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((r10)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(r20)*(sj2)))+(((-1.00000000000000)*(cj2)*(r20)*(sj0)*(sj1))));
                    _r01=((((-1.00000000000000)*(cj0)*(r21)*(sj2)))+(((-1.00000000000000)*(cj2)*(r21)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj2)*(r11)*(sj1)))+(((r11)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r01))));
                    _r02=((((-1.00000000000000)*(cj0)*(r22)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(r12)*(sj1)))+(((r12)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj2)*(r22)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r02))));
                    _r10=((((-1.00000000000000)*(cj2)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj0)*(cj2)*(r20)*(sj3)))+(((cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj2)*(sj3))));
                    _r11=((((cj1)*(r01)*(sj2)*(sj3)))+(((cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r11)*(sj0)*(sj3))));
                    _r12=((((-1.00000000000000)*(cj2)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj2)*(sj3)))+(((cj1)*(r02)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r22)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj2)*(sj3))));
                    _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj0)))+(((cj1)*(cj3)*(r00)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r20))));
                    _r21=((((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                    _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj2)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                    {
                    IKReal j5eval;
                    j5eval=_r12;
                    if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1]={false};
                        j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        { int ij4 = 0;
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKcos(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((-1.00000000000000)*(_r02)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x147=IKsin(j4);
                            IKReal x148=((IKabs(x147) != 0)?((IKReal)1/(x147)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((-1.00000000000000)*(_r21)*(x148)), ((_r20)*(x148)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal evalcond;
                                evalcond=IKcos(j5);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x149=IKsin(j5);
                                IKReal x150=((IKabs(x149) != 0)?((IKReal)1/(x149)):(IKReal)1.0e30);
                                IKReal x151=IKsin(j4);
                                IKReal x152=IKcos(j4);
                                j6array[0]=IKatan2(((((_r00)*(x150)*(x151)))+(((-1.00000000000000)*(_r20)*(x150)*(x152)))), ((((_r20)*(x151)))+(((_r00)*(x152)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x153=IKcos(j5);
                                IKReal x154=((IKabs(x153) != 0)?((IKReal)1/(x153)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((_r10)*(x154)), ((_r11)*(x154)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x155=((-1.00000000000000)*(pz));
                IKReal x156=IKatan2(x155, py);
                IKReal x157=(pz)*(pz);
                IKReal x158=(py)*(py);
                IKReal x159=((x157)+(x158));
                IKReal x160=((IKabs(x159) != 0)?(pow(x159,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x161=((0.261699999999109)*(cj2)*(sj3)*(x160));
                if( (x161) < -1.0001 || (x161) > 1.0001 )
                    continue;
                IKReal x162=IKasin(x161);
                j0array[0]=((((-1.00000000000000)*(x156)))+(x162));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x156)))+(((-1.00000000000000)*(x162))));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0) {
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x163=(sj2)*(sj2);
                IKReal x164=((0.261699999999109)*(cj3)*(px));
                IKReal x165=((0.261699999999109)*(pz)*(sj0)*(sj2)*(sj3));
                IKReal x166=((0.261699999999109)*(cj0)*(py)*(sj2)*(sj3));
                IKReal x167=((0.310199999999895)*(px));
                IKReal x168=((x166)+(x167)+(x164)+(x165));
                IKReal x169=((IKabs(x168) != 0)?((IKReal)1/(x168)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((-0.0684868899998037)*(x163)*(x169)*((cj3)*(cj3))))+(((0.0684868899998037)*(x163)*(x169)))+(((-1.00000000000000)*(x169)*((px)*(px))))), ((((-3.22372662796988)*(pz)*(sj0)*(x167)*(x169)))+(((-0.0811793399998351)*(sj2)*(sj3)*(x169)))+(((-3.22372662796988)*(cj0)*(py)*(x167)*(x169)))+(((-0.0684868899998037)*(cj3)*(sj2)*(sj3)*(x169)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((-1.00000000000000)*(cj0)*(cj2)*(r10)*(sj1)))+(((cj1)*(cj2)*(r00)))+(((r10)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(r20)*(sj2)))+(((-1.00000000000000)*(cj2)*(r20)*(sj0)*(sj1))));
                _r01=((((-1.00000000000000)*(cj0)*(r21)*(sj2)))+(((-1.00000000000000)*(cj2)*(r21)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj2)*(r11)*(sj1)))+(((r11)*(sj0)*(sj2)))+(((cj1)*(cj2)*(r01))));
                _r02=((((-1.00000000000000)*(cj0)*(r22)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(r12)*(sj1)))+(((r12)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj2)*(r22)*(sj0)*(sj1)))+(((cj1)*(cj2)*(r02))));
                _r10=((((-1.00000000000000)*(cj2)*(r10)*(sj0)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r10)))+(((cj1)*(r00)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(r10)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r20)*(sj0)))+(((cj0)*(cj2)*(r20)*(sj3)))+(((cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj1)*(sj2)*(sj3))));
                _r11=((((cj1)*(r01)*(sj2)*(sj3)))+(((cj3)*(r01)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r21)*(sj0)))+(((cj0)*(cj2)*(r21)*(sj3)))+(((-1.00000000000000)*(cj0)*(r11)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj2)*(r11)*(sj0)*(sj3))));
                _r12=((((-1.00000000000000)*(cj2)*(r12)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(r12)*(sj1)*(sj2)*(sj3)))+(((cj1)*(r02)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r22)*(sj3)))+(((cj0)*(cj1)*(cj3)*(r12)))+(((cj1)*(cj3)*(r22)*(sj0)))+(((cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(r22)*(sj0)*(sj1)*(sj2)*(sj3))));
                _r20=((((-1.00000000000000)*(cj0)*(cj3)*(r10)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj0)))+(((cj1)*(cj3)*(r00)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r20))));
                _r21=((((-1.00000000000000)*(cj0)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(cj1)*(r21)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj3)*(r11)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r21)))+(((-1.00000000000000)*(cj2)*(cj3)*(r11)*(sj0)))+(((-1.00000000000000)*(r01)*(sj1)*(sj3))));
                _r22=((((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj2)))+(((-1.00000000000000)*(cj1)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r12)*(sj1)*(sj2)))+(((cj0)*(cj2)*(cj3)*(r22)))+(((-1.00000000000000)*(cj0)*(cj1)*(r12)*(sj3))));
                {
                IKReal j5eval;
                j5eval=_r12;
                if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r20, ((-1.00000000000000)*(_r21))))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(_r20, _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[1], cj4array[1], sj4array[1];
                    bool j4valid[1]={false};
                    j4array[0]=IKatan2(((-1.00000000000000)*(_r02)), _r22);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    { int ij4 = 0;
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKcos(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((-1.00000000000000)*(_r02)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x170=IKsin(j4);
                        IKReal x171=((IKabs(x170) != 0)?((IKReal)1/(x170)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((-1.00000000000000)*(_r21)*(x171)), ((_r20)*(x171)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(_r12, ((_r22)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKcos(j5);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x172=IKsin(j5);
                            IKReal x173=((IKabs(x172) != 0)?((IKReal)1/(x172)):(IKReal)1.0e30);
                            IKReal x174=IKsin(j4);
                            IKReal x175=IKcos(j4);
                            j6array[0]=IKatan2(((((_r00)*(x173)*(x174)))+(((-1.00000000000000)*(_r20)*(x173)*(x175)))), ((((_r00)*(x175)))+(((_r20)*(x174)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x176=IKcos(j5);
                            IKReal x177=((IKabs(x176) != 0)?((IKReal)1/(x176)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r10)*(x177)), ((_r11)*(x177)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
    }
    }
    }
    }
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
