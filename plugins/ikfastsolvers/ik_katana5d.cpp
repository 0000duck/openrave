#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 55 generated on 2012-02-02 15:12:18.799344
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return 1.0f;
    }
    else if( f < 0 ) {
        return -1.0f;
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
eetrans[0]=((((0.190000000000000)*(x0)*(x1)))+(((x7)*(((((0.273000000000000)*(x0)*(x1)*(x4)))+(((0.273000000000000)*(x0)*(x2)*(x3)))))))+(((x5)*(((((0.273000000000000)*(x0)*(x1)*(x2)))+(((-0.273000000000000)*(x0)*(x3)*(x4)))))))+(((0.139000000000000)*(x0)*(x2)*(x3)))+(((0.139000000000000)*(x0)*(x1)*(x4))));
eetrans[1]=((((x5)*(((((-0.273000000000000)*(x1)*(x2)*(x6)))+(((0.273000000000000)*(x3)*(x4)*(x6)))))))+(((x7)*(((((-0.273000000000000)*(x1)*(x4)*(x6)))+(((-0.273000000000000)*(x2)*(x3)*(x6)))))))+(((-0.139000000000000)*(x2)*(x3)*(x6)))+(((-0.139000000000000)*(x1)*(x4)*(x6)))+(((-0.190000000000000)*(x1)*(x6))));
eetrans[2]=((0.201500000000000)+(((x7)*(((((-0.273000000000000)*(x1)*(x2)))+(((0.273000000000000)*(x3)*(x4)))))))+(((0.190000000000000)*(x3)))+(((x5)*(((((0.273000000000000)*(x2)*(x3)))+(((0.273000000000000)*(x1)*(x4)))))))+(((0.139000000000000)*(x3)*(x4)))+(((-0.139000000000000)*(x1)*(x2))));
eerot[0]=((((x6)*(x8)))+(((x9)*(((((x5)*(((((x0)*(x2)*(x3)))+(((x0)*(x1)*(x4)))))))+(((x7)*(((((x0)*(x3)*(x4)))+(((-1.00000000000000)*(x0)*(x1)*(x2))))))))))));
eerot[1]=((((x0)*(x8)))+(((-1.00000000000000)*(x9)*(((((x5)*(((((x1)*(x4)*(x6)))+(((x2)*(x3)*(x6)))))))+(((x7)*(((((-1.00000000000000)*(x1)*(x2)*(x6)))+(((x3)*(x4)*(x6))))))))))));
eerot[2]=((-1.00000000000000)*(x9)*(((((x5)*(((((x1)*(x2)))+(((-1.00000000000000)*(x3)*(x4)))))))+(((x7)*(((((x1)*(x4)))+(((x2)*(x3))))))))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 5; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x56000007; }

class IKSolver {
public:
IKReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j0=numeric_limits<IKReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IKReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IKReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IKReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IKReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.00000000000000)*(r01));
new_py=((-1.00000000000000)*(py));
new_r02=((-1.00000000000000)*(r02));
new_pz=((0.201500000000000)+(((-1.00000000000000)*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IKReal x10=((-1.00000000000000)*(py));
if( IKabs(x10) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x11=IKatan2(x10, px);
j0array[0]=((-1.00000000000000)*(x11));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x11))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IKReal op[4+1], zeror[4];
int numroots;
IKReal x12=(pz)*(pz);
IKReal x13=(r00)*(r00);
IKReal x14=(px)*(px);
IKReal x15=(r01)*(r01);
IKReal x16=(pz)*(pz)*(pz);
IKReal x17=(r02)*(r02);
IKReal x18=(py)*(py);
IKReal x19=((0.0430479504000000)*(r01)*(r02)*(sj0));
IKReal x20=((0.577600000000000)*(cj0)*(px)*(pz)*(x17));
IKReal x21=((0.138788160000000)*(cj0)*(py)*(r00)*(r01));
IKReal x22=((3.04000000000000)*(cj0)*(px)*(x12)*(x13));
IKReal x23=((3.04000000000000)*(py)*(sj0)*(x12)*(x15));
IKReal x24=((3.04000000000000)*(py)*(sj0)*(x13)*(x14));
IKReal x25=((3.04000000000000)*(cj0)*(pz)*(r00)*(r02)*(x14));
IKReal x26=((3.04000000000000)*(cj0)*(px)*(x15)*(x18));
IKReal x27=((0.577600000000000)*(r01)*(r02)*(sj0)*(x12));
IKReal x28=((6.08000000000000)*(cj0)*(py)*(r00)*(r01)*(x14));
IKReal x29=((3.04000000000000)*(cj0)*(py)*(r00)*(r01)*(x12));
IKReal x30=((3.04000000000000)*(px)*(py)*(pz)*(r00)*(r02)*(sj0));
IKReal x31=((0.577600000000000)*(px)*(py)*(r00)*(r02)*(sj0));
IKReal x32=((0.577600000000000)*(cj0)*(px)*(py)*(r01)*(r02));
IKReal x33=((0.138788160000000)*(px)*(r00)*(r01)*(sj0));
IKReal x34=(px)*(px)*(px);
IKReal x35=((3.04000000000000)*(cj0)*(px)*(x13)*(x14));
IKReal x36=((0.577600000000000)*(cj0)*(r00)*(r02)*(x14));
IKReal x37=((3.04000000000000)*(pz)*(r01)*(r02)*(sj0)*(x12));
IKReal x38=((0.577600000000000)*(cj0)*(r00)*(r02)*(x12));
IKReal x39=((0.0430479504000000)*(cj0)*(r00)*(r02));
IKReal x40=((0.138788160000000)*(py)*(sj0)*(x15));
IKReal x41=((0.577600000000000)*(py)*(pz)*(sj0)*(x15));
IKReal x42=((0.577600000000000)*(r01)*(r02)*(sj0)*(x18));
IKReal x43=((3.04000000000000)*(cj0)*(pz)*(r00)*(r02)*(x12));
IKReal x44=((1.52000000000000)*(cj0)*(pp)*(px)*(x17));
IKReal x45=((3.04000000000000)*(px)*(r00)*(r01)*(sj0)*(x12));
IKReal x46=((0.226568160000000)*(pz)*(r01)*(r02)*(sj0));
IKReal x47=((1.52000000000000)*(pp)*(py)*(sj0)*(x17));
IKReal x48=((0.138788160000000)*(cj0)*(px)*(x13));
IKReal x49=((0.577600000000000)*(cj0)*(py)*(pz)*(r00)*(r01));
IKReal x50=((6.08000000000000)*(px)*(r00)*(r01)*(sj0)*(x18));
IKReal x51=((3.04000000000000)*(pz)*(r01)*(r02)*(sj0)*(x18));
IKReal x52=((0.577600000000000)*(py)*(pz)*(sj0)*(x17));
IKReal x53=((3.04000000000000)*(cj0)*(px)*(py)*(pz)*(r01)*(r02));
IKReal x54=((0.577600000000000)*(px)*(pz)*(r00)*(r01)*(sj0));
IKReal x55=((0.577600000000000)*(cj0)*(px)*(pz)*(x13));
IKReal x56=((0.226568160000000)*(cj0)*(pz)*(r00)*(r02));
IKReal x57=(py)*(py)*(py);
IKReal x58=((3.04000000000000)*(py)*(sj0)*(x15)*(x18));
IKReal x59=((3.04000000000000)*(pp)*(pz)*(r01)*(r02)*(sj0));
IKReal x60=((0.0877800000000000)*(py)*(sj0)*(x17));
IKReal x61=((1.52000000000000)*(cj0)*(pp)*(py)*(r00)*(r01));
IKReal x62=((1.52000000000000)*(cj0)*(pp)*(px)*(x13));
IKReal x63=((0.0877800000000000)*(cj0)*(px)*(x17));
IKReal x64=((1.52000000000000)*(pp)*(py)*(sj0)*(x15));
IKReal x65=((1.52000000000000)*(pp)*(px)*(r00)*(r01)*(sj0));
IKReal x66=((3.04000000000000)*(cj0)*(pp)*(pz)*(r00)*(r02));
IKReal x67=((0.577600000000000)*(cj0)*(pp)*(r00)*(r02));
IKReal x68=((0.577600000000000)*(pp)*(r01)*(r02)*(sj0));
op[0]=((((1.52000000000000)*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((1.52000000000000)*(pz)*((py)*(py))*((r01)*(r01))))+(((-0.0438900000000000)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0764320000000000)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((0.0438900000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((-4.00000000000000)*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((-0.134232000000000)*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((1.52000000000000)*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((3.04000000000000)*(px)*(py)*(pz)*(r00)*(r01)))+(((-0.0764320000000000)*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((-1.52000000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-1.52000000000000)*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((-1.52000000000000)*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((-8.00000000000000)*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-0.760000000000000)*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((-4.00000000000000)*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((1.52000000000000)*(pz)*((px)*(px))*((r00)*(r00))))+(((-8.00000000000000)*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((3.04000000000000)*(px)*(r00)*(r02)*((pz)*(pz))))+(((-8.00000000000000)*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((0.0438900000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((-0.00833715086400000)*((r02)*(r02))))+(((-2.00000000000000)*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((-0.760000000000000)*(pp)*(pz)*((r02)*(r02))))+(((-1.52000000000000)*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((-1.52000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((-0.0671160000000000)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((-0.760000000000000)*(pp)*(px)*(r00)*(r02)))+(((1.52000000000000)*((pz)*(pz)*(pz))*((r02)*(r02))))+(((-0.760000000000000)*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((-1.00000000000000)*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((0.0578000000000000)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((-1.52000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((0.00242483673600000)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.144400000000000)*((py)*(py))*((r01)*(r01))))+(((0.00484967347200000)*(cj0)*(r00)*(r01)*(sj0)))+(((-1.00000000000000)*((pp)*(pp))*((r02)*(r02))))+(((-8.00000000000000)*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((0.760000000000000)*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((-8.00000000000000)*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((-0.0764320000000000)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((4.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((4.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-0.0671160000000000)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((0.0578000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-0.0764320000000000)*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((1.52000000000000)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-16.0000000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((1.52000000000000)*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((-0.0764320000000000)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.134232000000000)*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((0.0693940800000000)*(pz)*((r02)*(r02))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((0.00242483673600000)*((cj0)*(cj0))*((r00)*(r00))))+(((-0.760000000000000)*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((-8.00000000000000)*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-0.0671160000000000)*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((-8.00000000000000)*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((4.00000000000000)*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((0.0382160000000000)*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((0.760000000000000)*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((-0.0764320000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((4.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((-0.509632000000000)*((pz)*(pz))*((r02)*(r02))))+(((1.52000000000000)*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((-0.760000000000000)*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((-0.144400000000000)*((px)*(px))*((r00)*(r00))))+(((3.04000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((-1.52000000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((4.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((-4.00000000000000)*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((0.0578000000000000)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((-4.00000000000000)*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((0.182616000000000)*(pp)*((r02)*(r02))))+(((-8.00000000000000)*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((4.00000000000000)*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-8.00000000000000)*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((-16.0000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((4.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((-0.0438900000000000)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((0.0578000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-4.00000000000000)*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((-0.288800000000000)*(px)*(py)*(r00)*(r01)))+(((-1.52000000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((0.0693940800000000)*(px)*(r00)*(r02)))+(((-1.52000000000000)*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-1.00000000000000)*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((1.52000000000000)*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((-8.00000000000000)*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((0.0438900000000000)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((0.0693940800000000)*(py)*(r01)*(r02)))+(((-0.760000000000000)*(pp)*(py)*(r01)*(r02)))+(((1.52000000000000)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((3.04000000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((-4.00000000000000)*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((0.0438900000000000)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((4.00000000000000)*(pp)*((pz)*(pz))*((r02)*(r02))))+(((3.04000000000000)*(py)*(r01)*(r02)*((pz)*(pz))))+(((-0.0671160000000000)*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0764320000000000)*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((4.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)))+(((-0.0877800000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((3.04000000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((-0.0764320000000000)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-0.654032000000000)*(py)*(pz)*(r01)*(r02)))+(((-8.00000000000000)*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((4.00000000000000)*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((4.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-8.00000000000000)*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-16.0000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((0.0764320000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((-1.52000000000000)*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((-0.654032000000000)*(px)*(pz)*(r00)*(r02)))+(((-1.52000000000000)*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((4.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)))+(((-1.52000000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((0.0382160000000000)*(pp)*((cj0)*(cj0))*((r00)*(r00)))));
op[1]=((((-1.00000000000000)*(x19)))+(((-1.00000000000000)*(x20)))+(((-1.00000000000000)*(x27)))+(((-1.00000000000000)*(x42)))+(((-1.00000000000000)*(x49)))+(((-1.00000000000000)*(x41)))+(((-1.00000000000000)*(x38)))+(((-1.00000000000000)*(x39)))+(((-1.00000000000000)*(x36)))+(((-1.00000000000000)*(x31)))+(((-1.00000000000000)*(x32)))+(x33)+(x30)+(x37)+(x35)+(x48)+(x46)+(x47)+(x44)+(x45)+(x43)+(x40)+(x58)+(x56)+(x51)+(x50)+(x53)+(x67)+(x68)+(x24)+(x25)+(x26)+(x21)+(x22)+(x23)+(x28)+(x29)+(((-1.00000000000000)*(x63)))+(((-1.00000000000000)*(x62)))+(((-1.00000000000000)*(x61)))+(((-1.00000000000000)*(x60)))+(((-1.00000000000000)*(x66)))+(((-1.00000000000000)*(x65)))+(((-1.00000000000000)*(x64)))+(((-1.00000000000000)*(x59)))+(((-1.00000000000000)*(x54)))+(((-1.00000000000000)*(x55)))+(((-1.00000000000000)*(x52))));
op[2]=((((-1.03960000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-0.212368000000000)*(pp)*((r02)*(r02))))+(((-1.30806400000000)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((-16.0000000000000)*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((-1.30806400000000)*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((8.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-16.0000000000000)*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((-0.0381982769280000)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.134232000000000)*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((-8.00000000000000)*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((-8.00000000000000)*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((-8.00000000000000)*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((1.30806400000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((-2.00000000000000)*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((-0.268464000000000)*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((-16.0000000000000)*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-16.0000000000000)*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((-1.30806400000000)*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((-8.00000000000000)*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((-16.0000000000000)*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((-32.0000000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((-1.30806400000000)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((0.654032000000000)*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.577600000000000)*(px)*(py)*(r00)*(r01)))+(((0.0263736486720000)*((r02)*(r02))))+(((-0.152864000000000)*(py)*(pz)*(r01)*(r02)))+(((8.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((8.00000000000000)*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-16.0000000000000)*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((-8.00000000000000)*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((-0.288800000000000)*((py)*(py))*((r01)*(r01))))+(((-16.0000000000000)*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((-0.134232000000000)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((-1.30806400000000)*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-8.00000000000000)*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-8.00000000000000)*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((8.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((-0.152864000000000)*(px)*(pz)*(r00)*(r02)))+(((-0.0763965538560000)*(cj0)*(r00)*(r01)*(sj0)))+(((8.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((8.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)))+(((8.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((8.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((-32.0000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((8.00000000000000)*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((8.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((-0.288800000000000)*((px)*(px))*((r00)*(r00))))+(((-0.268464000000000)*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((-16.0000000000000)*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((0.654032000000000)*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((-0.134232000000000)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((-1.30806400000000)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-16.0000000000000)*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-1.03960000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((8.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)))+(((-16.0000000000000)*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((-2.00000000000000)*((pp)*(pp))*((r02)*(r02))))+(((-2.00000000000000)*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((-1.03960000000000)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((-16.0000000000000)*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-8.00000000000000)*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((8.00000000000000)*(pp)*((pz)*(pz))*((r02)*(r02))))+(((-0.0381982769280000)*((cj0)*(cj0))*((r00)*(r00))))+(((8.00000000000000)*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((8.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((-0.134232000000000)*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((8.00000000000000)*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-1.30806400000000)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-8.00000000000000)*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((-1.30806400000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-4.00000000000000)*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((-16.0000000000000)*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((0.135936000000000)*((pz)*(pz))*((r02)*(r02))))+(((-1.03960000000000)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((-32.0000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py)))));
op[3]=((x39)+(x38)+(x33)+(x32)+(x31)+(x30)+(x37)+(x36)+(x35)+(x48)+(x49)+(x46)+(x47)+(x44)+(x45)+(x42)+(x43)+(x40)+(x41)+(x58)+(x55)+(x54)+(x56)+(x51)+(x50)+(x53)+(x52)+(x19)+(x24)+(x25)+(x26)+(x27)+(x20)+(x21)+(x22)+(x23)+(x28)+(x29)+(((-1.00000000000000)*(x63)))+(((-1.00000000000000)*(x62)))+(((-1.00000000000000)*(x61)))+(((-1.00000000000000)*(x60)))+(((-1.00000000000000)*(x68)))+(((-1.00000000000000)*(x67)))+(((-1.00000000000000)*(x66)))+(((-1.00000000000000)*(x65)))+(((-1.00000000000000)*(x64)))+(((-1.00000000000000)*(x59))));
op[4]=((((-0.760000000000000)*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((-0.0764320000000000)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((-4.00000000000000)*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((-3.04000000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((-0.134232000000000)*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((-1.52000000000000)*(pz)*((px)*(px))*((r00)*(r00))))+(((-0.0764320000000000)*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((-3.04000000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((-8.00000000000000)*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-1.52000000000000)*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((-4.00000000000000)*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((1.52000000000000)*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((-8.00000000000000)*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((-8.00000000000000)*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((-0.00833715086400000)*((r02)*(r02))))+(((-2.00000000000000)*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((0.760000000000000)*(pp)*(pz)*((r02)*(r02))))+(((1.52000000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((-0.0671160000000000)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((1.52000000000000)*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((-1.00000000000000)*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((0.0438900000000000)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((0.0578000000000000)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((0.00242483673600000)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.144400000000000)*((py)*(py))*((r01)*(r01))))+(((0.760000000000000)*(pp)*(py)*(r01)*(r02)))+(((0.00484967347200000)*(cj0)*(r00)*(r01)*(sj0)))+(((-1.00000000000000)*((pp)*(pp))*((r02)*(r02))))+(((-8.00000000000000)*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((-8.00000000000000)*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((-0.0693940800000000)*(px)*(r00)*(r02)))+(((-0.0764320000000000)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((1.52000000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((1.52000000000000)*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((4.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((4.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-0.0671160000000000)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((0.760000000000000)*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((0.0578000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-0.0764320000000000)*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-16.0000000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((1.52000000000000)*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-3.04000000000000)*(px)*(py)*(pz)*(r00)*(r01)))+(((-0.0764320000000000)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.134232000000000)*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((-1.52000000000000)*((pz)*(pz)*(pz))*((r02)*(r02))))+(((0.760000000000000)*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((1.52000000000000)*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((1.52000000000000)*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((-0.0438900000000000)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((1.52000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((-3.04000000000000)*(py)*(r01)*(r02)*((pz)*(pz))))+(((0.00242483673600000)*((cj0)*(cj0))*((r00)*(r00))))+(((0.760000000000000)*(pp)*(px)*(r00)*(r02)))+(((-8.00000000000000)*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-0.0671160000000000)*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((-8.00000000000000)*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((4.00000000000000)*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((0.0382160000000000)*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0693940800000000)*(pz)*((r02)*(r02))))+(((-0.0438900000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((-0.0764320000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((4.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((-1.52000000000000)*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((-0.509632000000000)*((pz)*(pz))*((r02)*(r02))))+(((-1.52000000000000)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((1.52000000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-3.04000000000000)*(px)*(r00)*(r02)*((pz)*(pz))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((-0.144400000000000)*((px)*(px))*((r00)*(r00))))+(((0.0438900000000000)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0438900000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((4.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((-4.00000000000000)*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((0.760000000000000)*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((0.0578000000000000)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((-4.00000000000000)*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((0.182616000000000)*(pp)*((r02)*(r02))))+(((-8.00000000000000)*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((4.00000000000000)*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-8.00000000000000)*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((-16.0000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((4.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((0.0578000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-4.00000000000000)*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((-0.288800000000000)*(px)*(py)*(r00)*(r01)))+(((-1.52000000000000)*(pz)*((py)*(py))*((r01)*(r01))))+(((-0.0438900000000000)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((-1.52000000000000)*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((-1.00000000000000)*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((-8.00000000000000)*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((-1.52000000000000)*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((-0.0693940800000000)*(py)*(r01)*(r02)))+(((-4.00000000000000)*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((-1.52000000000000)*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((4.00000000000000)*(pp)*((pz)*(pz))*((r02)*(r02))))+(((-1.52000000000000)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-0.760000000000000)*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0671160000000000)*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0764320000000000)*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((4.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)))+(((-0.0764320000000000)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((0.760000000000000)*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((1.52000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-0.654032000000000)*(py)*(pz)*(r01)*(r02)))+(((-8.00000000000000)*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((4.00000000000000)*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((4.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-8.00000000000000)*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-16.0000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((0.0764320000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((0.0877800000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((-0.654032000000000)*(px)*(pz)*(r00)*(r02)))+(((4.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)))+(((1.52000000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((-3.04000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((0.0382160000000000)*(pp)*((cj0)*(cj0))*((r00)*(r00)))));
polyroots4(op,zeror,numroots);
IKReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IKReal htj1 = zeror[ij1];
tempj1array[0]=((2.00000000000000)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
IKReal x69=(py)*(py);
IKReal x70=(px)*(px);
IKReal x71=(pz)*(pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((-1.00000000000000)*(cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
evalcond[4]=((((-1.00000000000000)*(cj0)*(cj1)*(r00)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(r02)*(sj1))));
evalcond[5]=((((-1.00000000000000)*(px)*(r00)))+(((0.190000000000000)*(cj0)*(r00)*(sj1)))+(((-1.00000000000000)*(pz)*(r02)))+(((-1.00000000000000)*(py)*(r01)))+(((0.190000000000000)*(r01)*(sj0)*(sj1)))+(((-0.190000000000000)*(cj1)*(r02))));
evalcond[6]=((((-0.190000000000000)*(cj0)*(cj1)*(r00)))+(((py)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(r00)))+(((-0.190000000000000)*(cj1)*(r01)*(sj0)))+(((cj0)*(px)*(r02)))+(((-0.190000000000000)*(r02)*(sj1)))+(((-1.00000000000000)*(pz)*(r01)*(sj0))));
evalcond[7]=((((0.380000000000000)*(py)*(r01)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r01)*(sj1)))+(((0.380000000000000)*(pz)*(r02)))+(((-2.00000000000000)*(py)*(pz)*(r02)*(sj0)*(sj1)))+(((cj0)*(pp)*(r00)*(sj1)))+(((0.0361000000000000)*(cj1)*(r02)))+(((0.380000000000000)*(px)*(r00)))+(((-2.00000000000000)*(r01)*(sj0)*(sj1)*(x69)))+(((-2.00000000000000)*(cj0)*(px)*(pz)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(px)*(pz)*(r00)))+(((-0.0361000000000000)*(r01)*(sj0)*(sj1)))+(((pp)*(r01)*(sj0)*(sj1)))+(((-0.0361000000000000)*(cj0)*(r00)*(sj1)))+(((-2.00000000000000)*(px)*(py)*(r00)*(sj0)*(sj1)))+(((2.00000000000000)*(cj1)*(r02)*(x71)))+(((-1.00000000000000)*(cj1)*(pp)*(r02)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r01)))+(((-2.00000000000000)*(cj0)*(r00)*(sj1)*(x70))));
evalcond[8]=((((2.00000000000000)*(cj0)*(cj1)*(px)*(pz)*(r02)))+(((2.00000000000000)*(cj1)*(px)*(py)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(pz)*(r00)))+(((2.00000000000000)*(cj0)*(cj1)*(r00)*(x70)))+(((0.380000000000000)*(py)*(r02)*(sj0)))+(((2.00000000000000)*(py)*(pz)*(r01)*(sj1)))+(((2.00000000000000)*(cj1)*(r01)*(sj0)*(x69)))+(((-1.00000000000000)*(cj0)*(cj1)*(pp)*(r00)))+(((-1.00000000000000)*(cj1)*(pp)*(r01)*(sj0)))+(((-0.0361000000000000)*(cj0)*(cj1)*(r00)))+(((0.380000000000000)*(cj0)*(px)*(r02)))+(((-0.0361000000000000)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r02)*(sj0)))+(((2.00000000000000)*(r02)*(sj1)*(x71)))+(((2.00000000000000)*(px)*(pz)*(r00)*(sj1)))+(((-0.0361000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(pp)*(r02)*(sj1)))+(((-0.380000000000000)*(pz)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(py)*(r01))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((5.00698342424961)*(cj1)*(pz)))+(((-5.00698342424961)*(cj0)*(px)*(sj1)))+(((-5.00698342424961)*(py)*(sj0)*(sj1))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[1];
evalcond[0]=((0.0938500000000000)+(((-0.380000000000000)*(cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(pp)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(cj1)*(py)*(r02)))+(((cj0)*(pp)*(r01)))+(((-0.380000000000000)*(px)*(r01)*(sj1)))+(((-0.0361000000000000)*(r00)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r02)*(sj0)))+(((0.380000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.380000000000000)*(py)*(r00)*(sj1)))+(((0.0361000000000000)*(cj0)*(r01)))+(((2.00000000000000)*(r00)*(sj0)*((px)*(px))))+(((0.0758940000000000)*(IKcos(j3))))+(((0.380000000000000)*(cj1)*(px)*(r02)*(sj0)))+(((-2.00000000000000)*(cj0)*(r01)*((py)*(py))))+(((-2.00000000000000)*(cj0)*(py)*(pz)*(r02)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r00)))+(((2.00000000000000)*(px)*(py)*(r01)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.85740903679934)*((cj3)*(cj3))))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.92805755395683)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst4)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3)))))), ((gconst4)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x72=IKcos(j2);
IKReal x73=IKsin(j2);
IKReal x74=((0.273000000000000)*(cj3)*(x73));
IKReal x75=((0.139000000000000)*(x73));
IKReal x76=((0.273000000000000)*(sj3)*(x72));
IKReal x77=((0.273000000000000)*(cj3)*(x72));
IKReal x78=((0.139000000000000)*(x72));
IKReal x79=((0.273000000000000)*(sj3)*(x73));
evalcond[0]=((-0.190000000000000)+(((-1.00000000000000)*(x77)))+(((-1.00000000000000)*(x78)))+(((-1.00000000000000)*(x79)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
evalcond[1]=((((-1.00000000000000)*(x76)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))+(x75)+(x74));
evalcond[2]=((((-1.00000000000000)*(cj1)*(py)*(r00)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(sj1)))+(((-1.00000000000000)*(x76)))+(((px)*(r02)*(sj0)*(sj1)))+(((cj0)*(pz)*(r01)*(sj1)))+(x75)+(x74)+(((-1.00000000000000)*(pz)*(r00)*(sj0)*(sj1)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((cj0)*(cj1)*(py)*(r02)))+(((px)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.190000000000000)*(r00)*(sj0)))+(x77)+(x79)+(x78)+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(py)*(r00)*(sj1)))+(((cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(px)*(r02)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
IKReal x80=(py)*(py);
IKReal x81=(px)*(px);
IKReal x82=(pz)*(pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((-1.00000000000000)*(cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
evalcond[4]=((((-1.00000000000000)*(cj0)*(cj1)*(r00)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(r02)*(sj1))));
evalcond[5]=((((-1.00000000000000)*(px)*(r00)))+(((0.190000000000000)*(cj0)*(r00)*(sj1)))+(((-1.00000000000000)*(pz)*(r02)))+(((-1.00000000000000)*(py)*(r01)))+(((0.190000000000000)*(r01)*(sj0)*(sj1)))+(((-0.190000000000000)*(cj1)*(r02))));
evalcond[6]=((((-0.190000000000000)*(cj0)*(cj1)*(r00)))+(((py)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(r00)))+(((-0.190000000000000)*(cj1)*(r01)*(sj0)))+(((cj0)*(px)*(r02)))+(((-0.190000000000000)*(r02)*(sj1)))+(((-1.00000000000000)*(pz)*(r01)*(sj0))));
evalcond[7]=((((2.00000000000000)*(cj1)*(r02)*(x82)))+(((0.380000000000000)*(py)*(r01)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r01)*(sj1)))+(((0.380000000000000)*(pz)*(r02)))+(((-2.00000000000000)*(py)*(pz)*(r02)*(sj0)*(sj1)))+(((cj0)*(pp)*(r00)*(sj1)))+(((0.0361000000000000)*(cj1)*(r02)))+(((0.380000000000000)*(px)*(r00)))+(((-2.00000000000000)*(cj0)*(px)*(pz)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(px)*(pz)*(r00)))+(((-0.0361000000000000)*(r01)*(sj0)*(sj1)))+(((pp)*(r01)*(sj0)*(sj1)))+(((-0.0361000000000000)*(cj0)*(r00)*(sj1)))+(((-2.00000000000000)*(cj0)*(r00)*(sj1)*(x81)))+(((-2.00000000000000)*(px)*(py)*(r00)*(sj0)*(sj1)))+(((-2.00000000000000)*(r01)*(sj0)*(sj1)*(x80)))+(((-1.00000000000000)*(cj1)*(pp)*(r02)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r01))));
evalcond[8]=((((2.00000000000000)*(cj0)*(cj1)*(px)*(pz)*(r02)))+(((2.00000000000000)*(cj1)*(px)*(py)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(pz)*(r00)))+(((0.380000000000000)*(py)*(r02)*(sj0)))+(((2.00000000000000)*(cj1)*(r01)*(sj0)*(x80)))+(((2.00000000000000)*(py)*(pz)*(r01)*(sj1)))+(((2.00000000000000)*(r02)*(sj1)*(x82)))+(((-1.00000000000000)*(cj0)*(cj1)*(pp)*(r00)))+(((-1.00000000000000)*(cj1)*(pp)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(r00)*(x81)))+(((-0.0361000000000000)*(cj0)*(cj1)*(r00)))+(((0.380000000000000)*(cj0)*(px)*(r02)))+(((-0.0361000000000000)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r02)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r00)*(sj1)))+(((-0.0361000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(pp)*(r02)*(sj1)))+(((-0.380000000000000)*(pz)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(py)*(r01))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((5.00698342424961)*(cj1)*(pz)))+(((-5.00698342424961)*(cj0)*(px)*(sj1)))+(((-5.00698342424961)*(py)*(sj0)*(sj1))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[1];
evalcond[0]=((-0.0938500000000000)+(((-0.380000000000000)*(cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(pp)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(cj1)*(py)*(r02)))+(((cj0)*(pp)*(r01)))+(((-0.380000000000000)*(px)*(r01)*(sj1)))+(((-0.0361000000000000)*(r00)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r02)*(sj0)))+(((0.380000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.380000000000000)*(py)*(r00)*(sj1)))+(((0.0361000000000000)*(cj0)*(r01)))+(((2.00000000000000)*(r00)*(sj0)*((px)*(px))))+(((0.380000000000000)*(cj1)*(px)*(r02)*(sj0)))+(((-0.0758940000000000)*(IKcos(j3))))+(((-2.00000000000000)*(cj0)*(r01)*((py)*(py))))+(((-2.00000000000000)*(cj0)*(py)*(pz)*(r02)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r00)))+(((2.00000000000000)*(px)*(py)*(r01)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.85740903679934)*((cj3)*(cj3))))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.92805755395683)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst5)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3)))))), ((gconst5)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x83=IKcos(j2);
IKReal x84=IKsin(j2);
IKReal x85=((0.273000000000000)*(sj3)*(x83));
IKReal x86=((0.273000000000000)*(cj3)*(x84));
IKReal x87=((0.139000000000000)*(x84));
IKReal x88=((0.273000000000000)*(cj3)*(x83));
IKReal x89=((0.139000000000000)*(x83));
IKReal x90=((0.273000000000000)*(sj3)*(x84));
evalcond[0]=((-0.190000000000000)+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((-1.00000000000000)*(x90)))+(((-1.00000000000000)*(x89)))+(((-1.00000000000000)*(x88)))+(((py)*(sj0)*(sj1))));
evalcond[1]=((((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))+(x86)+(x87)+(((-1.00000000000000)*(x85))));
evalcond[2]=((((-1.00000000000000)*(cj1)*(py)*(r00)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(sj1)))+(((px)*(r02)*(sj0)*(sj1)))+(((cj0)*(pz)*(r01)*(sj1)))+(x85)+(((-1.00000000000000)*(pz)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(x87)))+(((-1.00000000000000)*(x86)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((cj0)*(cj1)*(py)*(r02)))+(((px)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.190000000000000)*(r00)*(sj0)))+(((-1.00000000000000)*(x90)))+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(x89)))+(((-1.00000000000000)*(x88)))+(((-1.00000000000000)*(py)*(r00)*(sj1)))+(((cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(px)*(r02)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((0.00719424460431655)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))*(((((-190.000000000000)*(cj0)*(r00)*(sj1)))+(((1000.00000000000)*(px)*(r00)))+(((1000.00000000000)*(pz)*(r02)))+(((190.000000000000)*(cj1)*(r02)))+(((-190.000000000000)*(r01)*(sj0)*(sj1)))+(((1000.00000000000)*(py)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((5.00698342424961)*(cj1)*(pz)))+(((-5.00698342424961)*(cj0)*(px)*(sj1)))+(((-5.00698342424961)*(py)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))*(((((-190.000000000000)*(cj0)*(r00)*(sj1)))+(((1000.00000000000)*(px)*(r00)))+(((1000.00000000000)*(pz)*(r02)))+(((190.000000000000)*(cj1)*(r02)))+(((-190.000000000000)*(r01)*(sj0)*(sj1)))+(((1000.00000000000)*(py)*(r01)))))))+IKsqr(((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((5.00698342424961)*(cj1)*(pz)))+(((-5.00698342424961)*(cj0)*(px)*(sj1)))+(((-5.00698342424961)*(py)*(sj0)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))*(((((-190.000000000000)*(cj0)*(r00)*(sj1)))+(((1000.00000000000)*(px)*(r00)))+(((1000.00000000000)*(pz)*(r02)))+(((190.000000000000)*(cj1)*(r02)))+(((-190.000000000000)*(r01)*(sj0)*(sj1)))+(((1000.00000000000)*(py)*(r01)))))), ((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((5.00698342424961)*(cj1)*(pz)))+(((-5.00698342424961)*(cj0)*(px)*(sj1)))+(((-5.00698342424961)*(py)*(sj0)*(sj1)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x91=IKcos(j3);
evalcond[0]=((0.0577500000000000)+(((-0.380000000000000)*(cj1)*(pz)))+(((0.380000000000000)*(py)*(sj0)*(sj1)))+(((0.380000000000000)*(cj0)*(px)*(sj1)))+(((0.0758940000000000)*(x91)))+(((-1.00000000000000)*(pp))));
evalcond[1]=((((-1.00000000000000)*(px)*(r00)))+(((0.190000000000000)*(cj0)*(r00)*(sj1)))+(((0.139000000000000)*(cj4)*(IKsin(j3))))+(((-1.00000000000000)*(pz)*(r02)))+(((-1.00000000000000)*(py)*(r01)))+(((0.190000000000000)*(r01)*(sj0)*(sj1)))+(((-0.190000000000000)*(cj1)*(r02))));
evalcond[2]=((((-0.190000000000000)*(cj0)*(cj1)*(r00)))+(((py)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(r00)))+(((-0.139000000000000)*(cj4)*(x91)))+(((-0.190000000000000)*(cj1)*(r01)*(sj0)))+(((cj0)*(px)*(r02)))+(((-0.190000000000000)*(r02)*(sj1)))+(((-0.273000000000000)*(cj4)))+(((-1.00000000000000)*(pz)*(r01)*(sj0))));
evalcond[3]=((((-0.380000000000000)*(cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(pp)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(cj1)*(py)*(r02)))+(((cj0)*(pp)*(r01)))+(((-0.380000000000000)*(px)*(r01)*(sj1)))+(((-0.0361000000000000)*(r00)*(sj0)))+(((0.0938500000000000)*(sj4)))+(((2.00000000000000)*(px)*(pz)*(r02)*(sj0)))+(((0.380000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.380000000000000)*(py)*(r00)*(sj1)))+(((0.0361000000000000)*(cj0)*(r01)))+(((2.00000000000000)*(r00)*(sj0)*((px)*(px))))+(((0.0758940000000000)*(sj4)*(x91)))+(((0.380000000000000)*(cj1)*(px)*(r02)*(sj0)))+(((-2.00000000000000)*(cj0)*(r01)*((py)*(py))))+(((-2.00000000000000)*(cj0)*(py)*(pz)*(r02)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r00)))+(((2.00000000000000)*(px)*(py)*(r01)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign(((((-1.00000000000000)*(cj4)*((cj3)*(cj3))))+(((-1.00000000000000)*(cj4)*((sj3)*(sj3))))));
dummyeval[0]=((((-1.00000000000000)*(cj4)*((cj3)*(cj3))))+(((-1.00000000000000)*(cj4)*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x92=((0.0758940000000000)*(cj3));
IKReal x93=(px)*(px);
IKReal x94=(py)*(py);
IKReal x95=(pz)*(pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((0.0577500000000000)+(((-0.380000000000000)*(cj1)*(pz)))+(((0.380000000000000)*(py)*(sj0)*(sj1)))+(x92)+(((0.380000000000000)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((((-1.00000000000000)*(cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
evalcond[5]=((((-1.00000000000000)*(cj0)*(cj1)*(r00)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(r02)*(sj1))));
evalcond[6]=((((-1.00000000000000)*(px)*(r00)))+(((0.190000000000000)*(cj0)*(r00)*(sj1)))+(((-1.00000000000000)*(pz)*(r02)))+(((-1.00000000000000)*(py)*(r01)))+(((0.190000000000000)*(r01)*(sj0)*(sj1)))+(((-0.190000000000000)*(cj1)*(r02))));
evalcond[7]=((((-0.190000000000000)*(cj0)*(cj1)*(r00)))+(((py)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(r00)))+(((-0.190000000000000)*(cj1)*(r01)*(sj0)))+(((cj0)*(px)*(r02)))+(((-0.190000000000000)*(r02)*(sj1)))+(((-1.00000000000000)*(pz)*(r01)*(sj0))));
evalcond[8]=((0.0938500000000000)+(((-0.380000000000000)*(cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(pp)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(cj1)*(py)*(r02)))+(((cj0)*(pp)*(r01)))+(((-0.380000000000000)*(px)*(r01)*(sj1)))+(((-0.0361000000000000)*(r00)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r02)*(sj0)))+(((0.380000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.380000000000000)*(py)*(r00)*(sj1)))+(((0.0361000000000000)*(cj0)*(r01)))+(((-2.00000000000000)*(cj0)*(r01)*(x94)))+(x92)+(((2.00000000000000)*(r00)*(sj0)*(x93)))+(((0.380000000000000)*(cj1)*(px)*(r02)*(sj0)))+(((-2.00000000000000)*(cj0)*(py)*(pz)*(r02)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r00)))+(((2.00000000000000)*(px)*(py)*(r01)*(sj0))));
evalcond[9]=((((0.380000000000000)*(py)*(r01)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r01)*(sj1)))+(((0.380000000000000)*(pz)*(r02)))+(((-2.00000000000000)*(py)*(pz)*(r02)*(sj0)*(sj1)))+(((cj0)*(pp)*(r00)*(sj1)))+(((0.0361000000000000)*(cj1)*(r02)))+(((0.380000000000000)*(px)*(r00)))+(((-2.00000000000000)*(cj0)*(px)*(pz)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(px)*(pz)*(r00)))+(((-0.0361000000000000)*(r01)*(sj0)*(sj1)))+(((pp)*(r01)*(sj0)*(sj1)))+(((-2.00000000000000)*(cj0)*(r00)*(sj1)*(x93)))+(((-0.0361000000000000)*(cj0)*(r00)*(sj1)))+(((-2.00000000000000)*(r01)*(sj0)*(sj1)*(x94)))+(((-2.00000000000000)*(px)*(py)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(pp)*(r02)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r01)))+(((2.00000000000000)*(cj1)*(r02)*(x95))));
evalcond[10]=((((2.00000000000000)*(cj0)*(cj1)*(px)*(pz)*(r02)))+(((2.00000000000000)*(cj1)*(px)*(py)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(pz)*(r00)))+(((2.00000000000000)*(r02)*(sj1)*(x95)))+(((0.380000000000000)*(py)*(r02)*(sj0)))+(((2.00000000000000)*(py)*(pz)*(r01)*(sj1)))+(((2.00000000000000)*(cj0)*(cj1)*(r00)*(x93)))+(((-1.00000000000000)*(cj0)*(cj1)*(pp)*(r00)))+(((2.00000000000000)*(cj1)*(r01)*(sj0)*(x94)))+(((-1.00000000000000)*(cj1)*(pp)*(r01)*(sj0)))+(((-0.0361000000000000)*(cj0)*(cj1)*(r00)))+(((0.380000000000000)*(cj0)*(px)*(r02)))+(((-0.0361000000000000)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r02)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r00)*(sj1)))+(((-0.0361000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(pp)*(r02)*(sj1)))+(((-0.380000000000000)*(pz)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(py)*(r01))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.85740903679934)*((cj3)*(cj3))))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.92805755395683)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst2)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3)))))), ((gconst2)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x96=IKcos(j2);
IKReal x97=IKsin(j2);
IKReal x98=((0.273000000000000)*(cj3)*(x97));
IKReal x99=((0.139000000000000)*(x97));
IKReal x100=((0.273000000000000)*(sj3)*(x96));
IKReal x101=((0.273000000000000)*(cj3)*(x96));
IKReal x102=((0.139000000000000)*(x96));
IKReal x103=((0.273000000000000)*(sj3)*(x97));
evalcond[0]=((-0.190000000000000)+(((-1.00000000000000)*(cj1)*(pz)))+(((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x103)))+(((-1.00000000000000)*(x102)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
evalcond[1]=((((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))+(x99)+(x98));
evalcond[2]=((((-1.00000000000000)*(cj1)*(py)*(r00)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(sj1)))+(((-1.00000000000000)*(x100)))+(((px)*(r02)*(sj0)*(sj1)))+(((cj0)*(pz)*(r01)*(sj1)))+(x99)+(x98)+(((-1.00000000000000)*(pz)*(r00)*(sj0)*(sj1)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((cj0)*(cj1)*(py)*(r02)))+(((px)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(x101)+(x102)+(x103)+(((0.190000000000000)*(r00)*(sj0)))+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(py)*(r00)*(sj1)))+(((cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(px)*(r02)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
IKReal x104=((0.0758940000000000)*(cj3));
IKReal x105=(px)*(px);
IKReal x106=(py)*(py);
IKReal x107=(pz)*(pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((0.0577500000000000)+(((-0.380000000000000)*(cj1)*(pz)))+(((0.380000000000000)*(py)*(sj0)*(sj1)))+(x104)+(((0.380000000000000)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((((-1.00000000000000)*(cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
evalcond[5]=((((-1.00000000000000)*(cj0)*(cj1)*(r00)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(r02)*(sj1))));
evalcond[6]=((((-1.00000000000000)*(px)*(r00)))+(((0.190000000000000)*(cj0)*(r00)*(sj1)))+(((-1.00000000000000)*(pz)*(r02)))+(((-1.00000000000000)*(py)*(r01)))+(((0.190000000000000)*(r01)*(sj0)*(sj1)))+(((-0.190000000000000)*(cj1)*(r02))));
evalcond[7]=((((-0.190000000000000)*(cj0)*(cj1)*(r00)))+(((py)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(r00)))+(((-0.190000000000000)*(cj1)*(r01)*(sj0)))+(((cj0)*(px)*(r02)))+(((-0.190000000000000)*(r02)*(sj1)))+(((-1.00000000000000)*(pz)*(r01)*(sj0))));
evalcond[8]=((-0.0938500000000000)+(((-0.380000000000000)*(cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(pp)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(cj1)*(py)*(r02)))+(((cj0)*(pp)*(r01)))+(((-0.380000000000000)*(px)*(r01)*(sj1)))+(((-0.0361000000000000)*(r00)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r02)*(sj0)))+(((-2.00000000000000)*(cj0)*(r01)*(x106)))+(((0.380000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((-1.00000000000000)*(x104)))+(((0.380000000000000)*(py)*(r00)*(sj1)))+(((0.0361000000000000)*(cj0)*(r01)))+(((0.380000000000000)*(cj1)*(px)*(r02)*(sj0)))+(((-2.00000000000000)*(cj0)*(py)*(pz)*(r02)))+(((2.00000000000000)*(r00)*(sj0)*(x105)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r00)))+(((2.00000000000000)*(px)*(py)*(r01)*(sj0))));
evalcond[9]=((((0.380000000000000)*(py)*(r01)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r01)*(sj1)))+(((0.380000000000000)*(pz)*(r02)))+(((-2.00000000000000)*(r01)*(sj0)*(sj1)*(x106)))+(((-2.00000000000000)*(py)*(pz)*(r02)*(sj0)*(sj1)))+(((cj0)*(pp)*(r00)*(sj1)))+(((0.0361000000000000)*(cj1)*(r02)))+(((0.380000000000000)*(px)*(r00)))+(((-2.00000000000000)*(cj0)*(px)*(pz)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(px)*(pz)*(r00)))+(((-0.0361000000000000)*(r01)*(sj0)*(sj1)))+(((pp)*(r01)*(sj0)*(sj1)))+(((-0.0361000000000000)*(cj0)*(r00)*(sj1)))+(((-2.00000000000000)*(cj0)*(r00)*(sj1)*(x105)))+(((-2.00000000000000)*(px)*(py)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(pp)*(r02)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r01)))+(((2.00000000000000)*(cj1)*(r02)*(x107))));
evalcond[10]=((((2.00000000000000)*(cj0)*(cj1)*(r00)*(x105)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(pz)*(r02)))+(((2.00000000000000)*(cj1)*(px)*(py)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(pz)*(r00)))+(((0.380000000000000)*(py)*(r02)*(sj0)))+(((2.00000000000000)*(py)*(pz)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pp)*(r00)))+(((2.00000000000000)*(cj1)*(r01)*(sj0)*(x106)))+(((-1.00000000000000)*(cj1)*(pp)*(r01)*(sj0)))+(((-0.0361000000000000)*(cj0)*(cj1)*(r00)))+(((0.380000000000000)*(cj0)*(px)*(r02)))+(((-0.0361000000000000)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r02)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r00)*(sj1)))+(((2.00000000000000)*(r02)*(sj1)*(x107)))+(((-0.0361000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(pp)*(r02)*(sj1)))+(((-0.380000000000000)*(pz)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(py)*(r01))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.85740903679934)*((cj3)*(cj3))))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.92805755395683)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst3)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3)))))), ((gconst3)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x108=IKcos(j2);
IKReal x109=IKsin(j2);
IKReal x110=((0.273000000000000)*(sj3)*(x108));
IKReal x111=((0.273000000000000)*(cj3)*(x109));
IKReal x112=((0.139000000000000)*(x109));
IKReal x113=((0.273000000000000)*(cj3)*(x108));
IKReal x114=((0.139000000000000)*(x108));
IKReal x115=((0.273000000000000)*(sj3)*(x109));
evalcond[0]=((-0.190000000000000)+(((-1.00000000000000)*(cj1)*(pz)))+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
evalcond[1]=((((-1.00000000000000)*(x110)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(x112)+(x111)+(((-1.00000000000000)*(cj1)*(py)*(sj0))));
evalcond[2]=((((-1.00000000000000)*(cj1)*(py)*(r00)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(sj1)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x112)))+(x110)+(((px)*(r02)*(sj0)*(sj1)))+(((cj0)*(pz)*(r01)*(sj1)))+(((-1.00000000000000)*(pz)*(r00)*(sj0)*(sj1)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((cj0)*(cj1)*(py)*(r02)))+(((px)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((0.190000000000000)*(r00)*(sj0)))+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(py)*(r00)*(sj1)))+(((cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(px)*(r02)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst1)*(((((-1.00000000000000)*(cj1)*(cj3)*(r02)))+(((cj3)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r00)))+(((cj1)*(r02)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((-1.00000000000000)*(cj1)*(cj3)*(r02)))+(((cj3)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj3)))))), ((gconst1)*(((((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r00)))+(((cj1)*(r02)*(sj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[8];
IKReal x116=IKcos(j2);
IKReal x117=IKsin(j2);
IKReal x118=(py)*(py);
IKReal x119=(px)*(px);
IKReal x120=(pz)*(pz);
evalcond[0]=((((cj3)*(cj4)*(x117)))+(((-1.00000000000000)*(cj1)*(r02)))+(((-1.00000000000000)*(cj4)*(sj3)*(x116)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
evalcond[1]=((((cj3)*(cj4)*(x116)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)))+(((cj4)*(sj3)*(x117)))+(((-1.00000000000000)*(r02)*(sj1))));
evalcond[2]=((-0.190000000000000)+(((-0.273000000000000)*(cj3)*(x116)))+(((-0.273000000000000)*(sj3)*(x117)))+(((-1.00000000000000)*(cj1)*(pz)))+(((-0.139000000000000)*(x116)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
evalcond[3]=((((-0.273000000000000)*(sj3)*(x116)))+(((0.139000000000000)*(x117)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))+(((0.273000000000000)*(cj3)*(x117))));
evalcond[4]=((((-1.00000000000000)*(cj1)*(py)*(r00)))+(((-0.273000000000000)*(sj3)*(sj4)*(x116)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(sj1)))+(((0.273000000000000)*(cj3)*(sj4)*(x117)))+(((px)*(r02)*(sj0)*(sj1)))+(((cj0)*(pz)*(r01)*(sj1)))+(((0.139000000000000)*(sj4)*(x117)))+(((-1.00000000000000)*(pz)*(r00)*(sj0)*(sj1)))+(((cj1)*(px)*(r01))));
evalcond[5]=((((0.273000000000000)*(cj3)*(sj4)*(x116)))+(((cj0)*(cj1)*(py)*(r02)))+(((px)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.190000000000000)*(r00)*(sj0)))+(((0.139000000000000)*(sj4)*(x116)))+(((0.273000000000000)*(sj3)*(sj4)*(x117)))+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(py)*(r00)*(sj1)))+(((cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(px)*(r02)*(sj0))));
evalcond[6]=((((0.0938500000000000)*(cj3)*(cj4)*(x117)))+(((0.380000000000000)*(py)*(r01)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r01)*(sj1)))+(((0.380000000000000)*(pz)*(r02)))+(((-2.00000000000000)*(py)*(pz)*(r02)*(sj0)*(sj1)))+(((-2.00000000000000)*(r01)*(sj0)*(sj1)*(x118)))+(((cj0)*(pp)*(r00)*(sj1)))+(((0.0361000000000000)*(cj1)*(r02)))+(((0.380000000000000)*(px)*(r00)))+(((-2.00000000000000)*(cj0)*(px)*(pz)*(r02)*(sj1)))+(((-0.0552080000000000)*(cj4)*(sj3)*(x116)))+(((2.00000000000000)*(cj1)*(px)*(pz)*(r00)))+(((-0.0361000000000000)*(r01)*(sj0)*(sj1)))+(((pp)*(r01)*(sj0)*(sj1)))+(((0.0758940000000000)*(cj4)*(x117)))+(((-0.0361000000000000)*(cj0)*(r00)*(sj1)))+(((-2.00000000000000)*(cj0)*(r00)*(sj1)*(x119)))+(((-2.00000000000000)*(px)*(py)*(r00)*(sj0)*(sj1)))+(((2.00000000000000)*(cj1)*(r02)*(x120)))+(((-1.00000000000000)*(cj1)*(pp)*(r02)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r01))));
evalcond[7]=((((0.0938500000000000)*(cj3)*(cj4)*(x116)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(pz)*(r02)))+(((2.00000000000000)*(cj1)*(px)*(py)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(pz)*(r00)))+(((2.00000000000000)*(cj0)*(cj1)*(r00)*(x119)))+(((0.380000000000000)*(py)*(r02)*(sj0)))+(((2.00000000000000)*(py)*(pz)*(r01)*(sj1)))+(((2.00000000000000)*(cj1)*(r01)*(sj0)*(x118)))+(((-1.00000000000000)*(cj0)*(cj1)*(pp)*(r00)))+(((-1.00000000000000)*(cj1)*(pp)*(r01)*(sj0)))+(((0.0552080000000000)*(cj4)*(sj3)*(x117)))+(((-0.0361000000000000)*(cj0)*(cj1)*(r00)))+(((0.0758940000000000)*(cj4)*(x116)))+(((0.380000000000000)*(cj0)*(px)*(r02)))+(((-0.0361000000000000)*(r02)*(sj1)))+(((2.00000000000000)*(r02)*(sj1)*(x120)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r02)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r00)*(sj1)))+(((-0.0361000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(pp)*(r02)*(sj1)))+(((-0.380000000000000)*(pz)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(py)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst0)*(((((-190.000000000000)*(cj0)*(r00)*(sj1)))+(((1000.00000000000)*(px)*(r00)))+(((1000.00000000000)*(pz)*(r02)))+(((190.000000000000)*(cj1)*(r02)))+(((-190.000000000000)*(r01)*(sj0)*(sj1)))+(((1000.00000000000)*(py)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((-1000.00000000000)*(pz)*(r01)*(sj0)))+(((-190.000000000000)*(cj0)*(cj1)*(r00)))+(((-190.000000000000)*(cj1)*(r01)*(sj0)))+(((-1000.00000000000)*(cj0)*(pz)*(r00)))+(((-273.000000000000)*(cj4)))+(((1000.00000000000)*(py)*(r02)*(sj0)))+(((-190.000000000000)*(r02)*(sj1)))+(((1000.00000000000)*(cj0)*(px)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((-190.000000000000)*(cj0)*(r00)*(sj1)))+(((1000.00000000000)*(px)*(r00)))+(((1000.00000000000)*(pz)*(r02)))+(((190.000000000000)*(cj1)*(r02)))+(((-190.000000000000)*(r01)*(sj0)*(sj1)))+(((1000.00000000000)*(py)*(r01)))))), ((gconst0)*(((((-1000.00000000000)*(pz)*(r01)*(sj0)))+(((-190.000000000000)*(cj0)*(cj1)*(r00)))+(((-190.000000000000)*(cj1)*(r01)*(sj0)))+(((-1000.00000000000)*(cj0)*(pz)*(r00)))+(((-273.000000000000)*(cj4)))+(((1000.00000000000)*(py)*(r02)*(sj0)))+(((-190.000000000000)*(r02)*(sj1)))+(((1000.00000000000)*(cj0)*(px)*(r02)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x121=IKcos(j3);
evalcond[0]=((0.0577500000000000)+(((-0.380000000000000)*(cj1)*(pz)))+(((0.0758940000000000)*(x121)))+(((0.380000000000000)*(py)*(sj0)*(sj1)))+(((0.380000000000000)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(pp))));
evalcond[1]=((((-1.00000000000000)*(px)*(r00)))+(((0.190000000000000)*(cj0)*(r00)*(sj1)))+(((0.139000000000000)*(cj4)*(IKsin(j3))))+(((-1.00000000000000)*(pz)*(r02)))+(((-1.00000000000000)*(py)*(r01)))+(((0.190000000000000)*(r01)*(sj0)*(sj1)))+(((-0.190000000000000)*(cj1)*(r02))));
evalcond[2]=((((-0.190000000000000)*(cj0)*(cj1)*(r00)))+(((py)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(r00)))+(((-0.190000000000000)*(cj1)*(r01)*(sj0)))+(((cj0)*(px)*(r02)))+(((-0.139000000000000)*(cj4)*(x121)))+(((-0.190000000000000)*(r02)*(sj1)))+(((-0.273000000000000)*(cj4)))+(((-1.00000000000000)*(pz)*(r01)*(sj0))));
evalcond[3]=((((-0.380000000000000)*(cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(pp)*(r00)*(sj0)))+(((0.0758940000000000)*(sj4)*(x121)))+(((-0.380000000000000)*(cj0)*(cj1)*(py)*(r02)))+(((cj0)*(pp)*(r01)))+(((-0.380000000000000)*(px)*(r01)*(sj1)))+(((-0.0361000000000000)*(r00)*(sj0)))+(((0.0938500000000000)*(sj4)))+(((2.00000000000000)*(px)*(pz)*(r02)*(sj0)))+(((0.380000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.380000000000000)*(py)*(r00)*(sj1)))+(((0.0361000000000000)*(cj0)*(r01)))+(((2.00000000000000)*(r00)*(sj0)*((px)*(px))))+(((0.380000000000000)*(cj1)*(px)*(r02)*(sj0)))+(((-2.00000000000000)*(cj0)*(r01)*((py)*(py))))+(((-2.00000000000000)*(cj0)*(py)*(pz)*(r02)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r00)))+(((2.00000000000000)*(px)*(py)*(r01)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign(((((-1.00000000000000)*(cj4)*((cj3)*(cj3))))+(((-1.00000000000000)*(cj4)*((sj3)*(sj3))))));
dummyeval[0]=((((-1.00000000000000)*(cj4)*((cj3)*(cj3))))+(((-1.00000000000000)*(cj4)*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x122=((0.0758940000000000)*(cj3));
IKReal x123=(px)*(px);
IKReal x124=(py)*(py);
IKReal x125=(pz)*(pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((0.0577500000000000)+(((-0.380000000000000)*(cj1)*(pz)))+(((0.380000000000000)*(py)*(sj0)*(sj1)))+(x122)+(((0.380000000000000)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((((-1.00000000000000)*(cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
evalcond[5]=((((-1.00000000000000)*(cj0)*(cj1)*(r00)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(r02)*(sj1))));
evalcond[6]=((((-1.00000000000000)*(px)*(r00)))+(((0.190000000000000)*(cj0)*(r00)*(sj1)))+(((-1.00000000000000)*(pz)*(r02)))+(((-1.00000000000000)*(py)*(r01)))+(((0.190000000000000)*(r01)*(sj0)*(sj1)))+(((-0.190000000000000)*(cj1)*(r02))));
evalcond[7]=((((-0.190000000000000)*(cj0)*(cj1)*(r00)))+(((py)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(r00)))+(((-0.190000000000000)*(cj1)*(r01)*(sj0)))+(((cj0)*(px)*(r02)))+(((-0.190000000000000)*(r02)*(sj1)))+(((-1.00000000000000)*(pz)*(r01)*(sj0))));
evalcond[8]=((0.0938500000000000)+(((-0.380000000000000)*(cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(pp)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(cj1)*(py)*(r02)))+(((cj0)*(pp)*(r01)))+(((-0.380000000000000)*(px)*(r01)*(sj1)))+(((-0.0361000000000000)*(r00)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r02)*(sj0)))+(((0.380000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.380000000000000)*(py)*(r00)*(sj1)))+(((-2.00000000000000)*(cj0)*(r01)*(x124)))+(x122)+(((0.0361000000000000)*(cj0)*(r01)))+(((0.380000000000000)*(cj1)*(px)*(r02)*(sj0)))+(((2.00000000000000)*(r00)*(sj0)*(x123)))+(((-2.00000000000000)*(cj0)*(py)*(pz)*(r02)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r00)))+(((2.00000000000000)*(px)*(py)*(r01)*(sj0))));
evalcond[9]=((((0.380000000000000)*(py)*(r01)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r01)*(sj1)))+(((0.380000000000000)*(pz)*(r02)))+(((-2.00000000000000)*(py)*(pz)*(r02)*(sj0)*(sj1)))+(((cj0)*(pp)*(r00)*(sj1)))+(((0.0361000000000000)*(cj1)*(r02)))+(((0.380000000000000)*(px)*(r00)))+(((-2.00000000000000)*(r01)*(sj0)*(sj1)*(x124)))+(((-2.00000000000000)*(cj0)*(px)*(pz)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(px)*(pz)*(r00)))+(((-0.0361000000000000)*(r01)*(sj0)*(sj1)))+(((pp)*(r01)*(sj0)*(sj1)))+(((-0.0361000000000000)*(cj0)*(r00)*(sj1)))+(((-2.00000000000000)*(px)*(py)*(r00)*(sj0)*(sj1)))+(((-2.00000000000000)*(cj0)*(r00)*(sj1)*(x123)))+(((2.00000000000000)*(cj1)*(r02)*(x125)))+(((-1.00000000000000)*(cj1)*(pp)*(r02)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r01))));
evalcond[10]=((((2.00000000000000)*(cj0)*(cj1)*(px)*(pz)*(r02)))+(((2.00000000000000)*(cj1)*(px)*(py)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(pz)*(r00)))+(((2.00000000000000)*(cj1)*(r01)*(sj0)*(x124)))+(((0.380000000000000)*(py)*(r02)*(sj0)))+(((2.00000000000000)*(py)*(pz)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pp)*(r00)))+(((-1.00000000000000)*(cj1)*(pp)*(r01)*(sj0)))+(((-0.0361000000000000)*(cj0)*(cj1)*(r00)))+(((0.380000000000000)*(cj0)*(px)*(r02)))+(((-0.0361000000000000)*(r02)*(sj1)))+(((2.00000000000000)*(r02)*(sj1)*(x125)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r02)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r00)*(sj1)))+(((-0.0361000000000000)*(cj1)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(r00)*(x123)))+(((-1.00000000000000)*(pp)*(r02)*(sj1)))+(((-0.380000000000000)*(pz)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(py)*(r01))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.85740903679934)*((cj3)*(cj3))))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.92805755395683)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst2)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3)))))), ((gconst2)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x126=IKcos(j2);
IKReal x127=IKsin(j2);
IKReal x128=((0.273000000000000)*(cj3)*(x127));
IKReal x129=((0.139000000000000)*(x127));
IKReal x130=((0.273000000000000)*(sj3)*(x126));
IKReal x131=((0.273000000000000)*(cj3)*(x126));
IKReal x132=((0.139000000000000)*(x126));
IKReal x133=((0.273000000000000)*(sj3)*(x127));
evalcond[0]=((-0.190000000000000)+(((-1.00000000000000)*(cj1)*(pz)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x131)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
evalcond[1]=((((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(x128)+(x129)+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(cj1)*(py)*(sj0))));
evalcond[2]=((((-1.00000000000000)*(cj1)*(py)*(r00)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(sj1)))+(x128)+(x129)+(((px)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(x130)))+(((cj0)*(pz)*(r01)*(sj1)))+(((-1.00000000000000)*(pz)*(r00)*(sj0)*(sj1)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((cj0)*(cj1)*(py)*(r02)))+(((px)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(x131)+(x133)+(x132)+(((0.190000000000000)*(r00)*(sj0)))+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(py)*(r00)*(sj1)))+(((cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(px)*(r02)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
IKReal x134=((0.0758940000000000)*(cj3));
IKReal x135=(px)*(px);
IKReal x136=(py)*(py);
IKReal x137=(pz)*(pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((0.0577500000000000)+(((-0.380000000000000)*(cj1)*(pz)))+(((0.380000000000000)*(py)*(sj0)*(sj1)))+(x134)+(((0.380000000000000)*(cj0)*(px)*(sj1)))+(((-1.00000000000000)*(pp))));
evalcond[4]=((((-1.00000000000000)*(cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
evalcond[5]=((((-1.00000000000000)*(cj0)*(cj1)*(r00)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(r02)*(sj1))));
evalcond[6]=((((-1.00000000000000)*(px)*(r00)))+(((0.190000000000000)*(cj0)*(r00)*(sj1)))+(((-1.00000000000000)*(pz)*(r02)))+(((-1.00000000000000)*(py)*(r01)))+(((0.190000000000000)*(r01)*(sj0)*(sj1)))+(((-0.190000000000000)*(cj1)*(r02))));
evalcond[7]=((((-0.190000000000000)*(cj0)*(cj1)*(r00)))+(((py)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(pz)*(r00)))+(((-0.190000000000000)*(cj1)*(r01)*(sj0)))+(((cj0)*(px)*(r02)))+(((-0.190000000000000)*(r02)*(sj1)))+(((-1.00000000000000)*(pz)*(r01)*(sj0))));
evalcond[8]=((-0.0938500000000000)+(((-0.380000000000000)*(cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(pp)*(r00)*(sj0)))+(((-0.380000000000000)*(cj0)*(cj1)*(py)*(r02)))+(((cj0)*(pp)*(r01)))+(((-0.380000000000000)*(px)*(r01)*(sj1)))+(((-0.0361000000000000)*(r00)*(sj0)))+(((2.00000000000000)*(px)*(pz)*(r02)*(sj0)))+(((0.380000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((-2.00000000000000)*(cj0)*(r01)*(x136)))+(((0.380000000000000)*(py)*(r00)*(sj1)))+(((-1.00000000000000)*(x134)))+(((0.0361000000000000)*(cj0)*(r01)))+(((2.00000000000000)*(r00)*(sj0)*(x135)))+(((0.380000000000000)*(cj1)*(px)*(r02)*(sj0)))+(((-2.00000000000000)*(cj0)*(py)*(pz)*(r02)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r00)))+(((2.00000000000000)*(px)*(py)*(r01)*(sj0))));
evalcond[9]=((((0.380000000000000)*(py)*(r01)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r01)*(sj1)))+(((0.380000000000000)*(pz)*(r02)))+(((-2.00000000000000)*(py)*(pz)*(r02)*(sj0)*(sj1)))+(((cj0)*(pp)*(r00)*(sj1)))+(((0.0361000000000000)*(cj1)*(r02)))+(((0.380000000000000)*(px)*(r00)))+(((-2.00000000000000)*(cj0)*(px)*(pz)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(px)*(pz)*(r00)))+(((-2.00000000000000)*(r01)*(sj0)*(sj1)*(x136)))+(((-0.0361000000000000)*(r01)*(sj0)*(sj1)))+(((pp)*(r01)*(sj0)*(sj1)))+(((-0.0361000000000000)*(cj0)*(r00)*(sj1)))+(((-2.00000000000000)*(px)*(py)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(pp)*(r02)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r01)))+(((-2.00000000000000)*(cj0)*(r00)*(sj1)*(x135)))+(((2.00000000000000)*(cj1)*(r02)*(x137))));
evalcond[10]=((((2.00000000000000)*(cj0)*(cj1)*(px)*(pz)*(r02)))+(((2.00000000000000)*(cj1)*(px)*(py)*(r00)*(sj0)))+(((2.00000000000000)*(cj1)*(r01)*(sj0)*(x136)))+(((-0.380000000000000)*(cj0)*(pz)*(r00)))+(((0.380000000000000)*(py)*(r02)*(sj0)))+(((2.00000000000000)*(py)*(pz)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pp)*(r00)))+(((-1.00000000000000)*(cj1)*(pp)*(r01)*(sj0)))+(((-0.0361000000000000)*(cj0)*(cj1)*(r00)))+(((0.380000000000000)*(cj0)*(px)*(r02)))+(((-0.0361000000000000)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r02)*(sj0)))+(((2.00000000000000)*(r02)*(sj1)*(x137)))+(((2.00000000000000)*(px)*(pz)*(r00)*(sj1)))+(((-0.0361000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(pp)*(r02)*(sj1)))+(((2.00000000000000)*(cj0)*(cj1)*(r00)*(x135)))+(((-0.380000000000000)*(pz)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(py)*(r01))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.85740903679934)*((cj3)*(cj3))))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.92805755395683)*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst3)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((-273000.000000000)*(cj3)*(pz)*(sj1)))+(((-139000.000000000)*(pz)*(sj1)))+(((-273000.000000000)*(cj0)*(px)*(sj1)*(sj3)))+(((-139000.000000000)*(cj1)*(py)*(sj0)))+(((51870.0000000000)*(sj3)))+(((-273000.000000000)*(py)*(sj0)*(sj1)*(sj3)))+(((-273000.000000000)*(cj0)*(cj1)*(cj3)*(px)))+(((-139000.000000000)*(cj0)*(cj1)*(px)))+(((-273000.000000000)*(cj1)*(cj3)*(py)*(sj0)))+(((273000.000000000)*(cj1)*(pz)*(sj3)))))), ((gconst3)*(((26410.0000000000)+(((273000.000000000)*(cj0)*(cj1)*(px)*(sj3)))+(((-139000.000000000)*(cj0)*(px)*(sj1)))+(((273000.000000000)*(cj1)*(py)*(sj0)*(sj3)))+(((-273000.000000000)*(cj0)*(cj3)*(px)*(sj1)))+(((-273000.000000000)*(cj3)*(py)*(sj0)*(sj1)))+(((139000.000000000)*(cj1)*(pz)))+(((273000.000000000)*(cj1)*(cj3)*(pz)))+(((51870.0000000000)*(cj3)))+(((273000.000000000)*(pz)*(sj1)*(sj3)))+(((-139000.000000000)*(py)*(sj0)*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x138=IKcos(j2);
IKReal x139=IKsin(j2);
IKReal x140=((0.273000000000000)*(sj3)*(x138));
IKReal x141=((0.273000000000000)*(cj3)*(x139));
IKReal x142=((0.139000000000000)*(x139));
IKReal x143=((0.273000000000000)*(cj3)*(x138));
IKReal x144=((0.139000000000000)*(x138));
IKReal x145=((0.273000000000000)*(sj3)*(x139));
evalcond[0]=((-0.190000000000000)+(((-1.00000000000000)*(x144)))+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x145)))+(((-1.00000000000000)*(cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
evalcond[1]=((((-1.00000000000000)*(x140)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(x141)+(x142)+(((-1.00000000000000)*(cj1)*(py)*(sj0))));
evalcond[2]=((((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(cj1)*(py)*(r00)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(sj1)))+(x140)+(((px)*(r02)*(sj0)*(sj1)))+(((cj0)*(pz)*(r01)*(sj1)))+(((-1.00000000000000)*(pz)*(r00)*(sj0)*(sj1)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((-1.00000000000000)*(x144)))+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x145)))+(((cj0)*(cj1)*(py)*(r02)))+(((px)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.190000000000000)*(r00)*(sj0)))+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(py)*(r00)*(sj1)))+(((cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(px)*(r02)*(sj0))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst1)*(((((-1.00000000000000)*(cj1)*(cj3)*(r02)))+(((cj3)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r00)))+(((cj1)*(r02)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((-1.00000000000000)*(cj1)*(cj3)*(r02)))+(((cj3)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj3)*(r00)*(sj1)))+(((-1.00000000000000)*(r02)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r00)*(sj3)))))), ((gconst1)*(((((-1.00000000000000)*(cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(r00)*(sj1)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r00)))+(((cj1)*(r02)*(sj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[8];
IKReal x146=IKcos(j2);
IKReal x147=IKsin(j2);
IKReal x148=(py)*(py);
IKReal x149=(px)*(px);
IKReal x150=(pz)*(pz);
evalcond[0]=((((-1.00000000000000)*(cj1)*(r02)))+(((cj3)*(cj4)*(x147)))+(((-1.00000000000000)*(cj4)*(sj3)*(x146)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
evalcond[1]=((((-1.00000000000000)*(cj0)*(cj1)*(r00)))+(((cj3)*(cj4)*(x146)))+(((-1.00000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(r02)*(sj1)))+(((cj4)*(sj3)*(x147))));
evalcond[2]=((-0.190000000000000)+(((-1.00000000000000)*(cj1)*(pz)))+(((-0.273000000000000)*(cj3)*(x146)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1)))+(((-0.139000000000000)*(x146)))+(((-0.273000000000000)*(sj3)*(x147))));
evalcond[3]=((((0.139000000000000)*(x147)))+(((0.273000000000000)*(cj3)*(x147)))+(((-1.00000000000000)*(pz)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(px)))+(((-1.00000000000000)*(cj1)*(py)*(sj0)))+(((-0.273000000000000)*(sj3)*(x146))));
evalcond[4]=((((-1.00000000000000)*(cj1)*(py)*(r00)))+(((0.139000000000000)*(sj4)*(x147)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(sj1)))+(((px)*(r02)*(sj0)*(sj1)))+(((cj0)*(pz)*(r01)*(sj1)))+(((-0.273000000000000)*(sj3)*(sj4)*(x146)))+(((0.273000000000000)*(cj3)*(sj4)*(x147)))+(((-1.00000000000000)*(pz)*(r00)*(sj0)*(sj1)))+(((cj1)*(px)*(r01))));
evalcond[5]=((((0.139000000000000)*(sj4)*(x146)))+(((0.273000000000000)*(sj3)*(sj4)*(x147)))+(((cj0)*(cj1)*(py)*(r02)))+(((px)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pz)*(r01)))+(((0.190000000000000)*(r00)*(sj0)))+(((0.273000000000000)*(cj3)*(sj4)*(x146)))+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(py)*(r00)*(sj1)))+(((cj1)*(pz)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(px)*(r02)*(sj0))));
evalcond[6]=((((0.380000000000000)*(py)*(r01)))+(((-2.00000000000000)*(cj0)*(px)*(py)*(r01)*(sj1)))+(((0.380000000000000)*(pz)*(r02)))+(((-2.00000000000000)*(py)*(pz)*(r02)*(sj0)*(sj1)))+(((cj0)*(pp)*(r00)*(sj1)))+(((0.0361000000000000)*(cj1)*(r02)))+(((-2.00000000000000)*(cj0)*(r00)*(sj1)*(x149)))+(((0.380000000000000)*(px)*(r00)))+(((-2.00000000000000)*(cj0)*(px)*(pz)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(px)*(pz)*(r00)))+(((-0.0361000000000000)*(r01)*(sj0)*(sj1)))+(((pp)*(r01)*(sj0)*(sj1)))+(((-2.00000000000000)*(r01)*(sj0)*(sj1)*(x148)))+(((-0.0361000000000000)*(cj0)*(r00)*(sj1)))+(((0.0938500000000000)*(cj3)*(cj4)*(x147)))+(((0.0758940000000000)*(cj4)*(x147)))+(((2.00000000000000)*(cj1)*(r02)*(x150)))+(((-2.00000000000000)*(px)*(py)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(pp)*(r02)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r01)))+(((-0.0552080000000000)*(cj4)*(sj3)*(x146))));
evalcond[7]=((((2.00000000000000)*(cj1)*(r01)*(sj0)*(x148)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(pz)*(r02)))+(((2.00000000000000)*(cj1)*(px)*(py)*(r00)*(sj0)))+(((2.00000000000000)*(r02)*(sj1)*(x150)))+(((-0.380000000000000)*(cj0)*(pz)*(r00)))+(((0.0552080000000000)*(cj4)*(sj3)*(x147)))+(((0.380000000000000)*(py)*(r02)*(sj0)))+(((2.00000000000000)*(py)*(pz)*(r01)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(pp)*(r00)))+(((2.00000000000000)*(cj0)*(cj1)*(r00)*(x149)))+(((-1.00000000000000)*(cj1)*(pp)*(r01)*(sj0)))+(((-0.0361000000000000)*(cj0)*(cj1)*(r00)))+(((0.380000000000000)*(cj0)*(px)*(r02)))+(((-0.0361000000000000)*(r02)*(sj1)))+(((2.00000000000000)*(cj1)*(py)*(pz)*(r02)*(sj0)))+(((0.0938500000000000)*(cj3)*(cj4)*(x146)))+(((0.0758940000000000)*(cj4)*(x146)))+(((2.00000000000000)*(px)*(pz)*(r00)*(sj1)))+(((-0.0361000000000000)*(cj1)*(r01)*(sj0)))+(((-1.00000000000000)*(pp)*(r02)*(sj1)))+(((-0.380000000000000)*(pz)*(r01)*(sj0)))+(((2.00000000000000)*(cj0)*(cj1)*(px)*(py)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return vsolutions.size()>0;
}
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    const IKReal tolsqrt = 8*sqrt(std::numeric_limits<IKReal>::epsilon());
    complex<IKReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IKReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < sqrt(std::numeric_limits<IKReal>::epsilon()) ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* getIKFastVersion() { return "55"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "ikbase.h"
namespace IKFAST_NAMESPACE {
#ifdef RAVE_REGISTER_BOOST
#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()
BOOST_TYPEOF_REGISTER_TYPE(IKSolution)
#endif
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, const std::vector<dReal>& vfreeinc) {
    std::vector<int> vfree(getNumFreeParameters());
    for(size_t i = 0; i < vfree.size(); ++i) {
        vfree[i] = getFreeParameters()[i];
    }
    return IkSolverBasePtr(new IkFastSolver<IKReal,IKSolution>(ik,vfree,vfreeinc,getNumJoints(),static_cast<IkParameterizationType>(getIKType()), boost::shared_ptr<void>(), getKinematicsHash(), penv));
}
} // end namespace
