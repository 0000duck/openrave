#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 59 generated on 2012-06-21 00:11:07.881474
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.139000000000000)*(x3));
x11=((0.273000000000000)*(x0));
x12=((0.273000000000000)*(x6));
x13=((1.00000000000000)*(x5));
x14=((1.00000000000000)*(x7));
x15=((0.190000000000000)*(x1));
x16=((x0)*(x2));
x17=((x1)*(x3));
x18=((x2)*(x4));
x19=((x1)*(x4));
x20=((x2)*(x3));
eetrans[0]=((((0.139000000000000)*(x0)*(x19)))+(((x0)*(x15)))+(((x7)*(((((x11)*(x20)))+(((x11)*(x19)))))))+(((x5)*(((((-1.00000000000000)*(x11)*(x18)))+(((x11)*(x17)))))))+(((x10)*(x16))));
IKReal x21=((1.00000000000000)*(x6));
IKReal x22=((1.00000000000000)*(x12));
eetrans[1]=((((x5)*(((((-1.00000000000000)*(x17)*(x22)))+(((x12)*(x18)))))))+(((-0.139000000000000)*(x19)*(x6)))+(((-1.00000000000000)*(x10)*(x2)*(x21)))+(((x7)*(((((-1.00000000000000)*(x19)*(x22)))+(((-1.00000000000000)*(x20)*(x22)))))))+(((-1.00000000000000)*(x15)*(x21))));
eetrans[2]=((0.201500000000000)+(((x7)*(((((-0.273000000000000)*(x17)))+(((0.273000000000000)*(x18)))))))+(((-1.00000000000000)*(x1)*(x10)))+(((0.190000000000000)*(x2)))+(((0.139000000000000)*(x18)))+(((x5)*(((((0.273000000000000)*(x20)))+(((0.273000000000000)*(x19))))))));
eerot[0]=((((x9)*(((((x7)*(((((-1.00000000000000)*(x0)*(x17)))+(((x16)*(x4)))))))+(((x5)*(((((x0)*(x19)))+(((x16)*(x3)))))))))))+(((x6)*(x8))));
eerot[1]=((((x0)*(x8)))+(((-1.00000000000000)*(x9)*(((((x14)*(((((x18)*(x6)))+(((-1.00000000000000)*(x17)*(x6)))))))+(((x13)*(((((x19)*(x6)))+(((x20)*(x6))))))))))));
eerot[2]=((-1.00000000000000)*(x9)*(((((x13)*(((((-1.00000000000000)*(x18)))+(x17)))))+(((x14)*(((x19)+(x20))))))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 5; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x56000007; }

class IKSolver {
public:
IKReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j0=numeric_limits<IKReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IKReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IKReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IKReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IKReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.00000000000000)*(r01));
new_py=((-1.00000000000000)*(py));
new_r02=((-1.00000000000000)*(r02));
new_pz=((0.201500000000000)+(((-1.00000000000000)*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IKReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((-1.00000000000000)*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IKReal x23=IKatan2(((-1.00000000000000)*(py)), px);
j0array[0]=((-1.00000000000000)*(x23));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x23))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IKReal op[4+1], zeror[4];
int numroots;
IKReal x24=(r00)*(r00);
IKReal x25=(pz)*(pz);
IKReal x26=(r01)*(r01);
IKReal x27=(r02)*(r02);
IKReal x28=(py)*(py);
IKReal x29=(px)*(px);
IKReal x30=(pz)*(pz)*(pz);
IKReal x31=((r02)*(sj0));
IKReal x32=((3.04000000000000)*(cj0));
IKReal x33=((0.577600000000000)*(py));
IKReal x34=((px)*(r00));
IKReal x35=((pz)*(r00));
IKReal x36=((3.04000000000000)*(py));
IKReal x37=((pz)*(r01));
IKReal x38=((cj0)*(r01));
IKReal x39=((pp)*(r01));
IKReal x40=((0.577600000000000)*(cj0));
IKReal x41=((1.52000000000000)*(sj0));
IKReal x42=((py)*(r00));
IKReal x43=((r01)*(sj0));
IKReal x44=((pp)*(py));
IKReal x45=((1.52000000000000)*(pp));
IKReal x46=((r00)*(r02));
IKReal x47=((px)*(r02));
IKReal x48=((px)*(x24));
IKReal x49=((r02)*(x29));
IKReal x50=((sj0)*(x26));
IKReal x51=((r01)*(x25));
IKReal x52=((sj0)*(x27));
IKReal x53=((0.0430479504000000)*(cj0)*(x46));
IKReal x54=((0.0430479504000000)*(r01)*(x31));
IKReal x55=((x40)*(x46));
IKReal x56=((cj0)*(px)*(x27));
IKReal x57=((0.138788160000000)*(py)*(x50));
IKReal x58=((0.226568160000000)*(cj0)*(r02)*(x35));
IKReal x59=((0.226568160000000)*(x31)*(x37));
IKReal x60=((0.138788160000000)*(x34)*(x43));
IKReal x61=((0.138788160000000)*(cj0)*(x48));
IKReal x62=((0.138788160000000)*(x38)*(x42));
IKReal x63=((0.0877800000000000)*(x56));
IKReal x64=((0.0877800000000000)*(py)*(x52));
IKReal x65=((0.577600000000000)*(x31)*(x39));
IKReal x66=((pp)*(x55));
IKReal x67=((px)*(pz)*(x27)*(x40));
IKReal x68=((0.577600000000000)*(x31)*(x51));
IKReal x69=((x45)*(x56));
IKReal x70=((x32)*(x48)*((px)*(px)));
IKReal x71=((pz)*(x33)*(x52));
IKReal x72=((x33)*(x35)*(x38));
IKReal x73=((x29)*(x55));
IKReal x74=((pz)*(x40)*(x48));
IKReal x75=((0.577600000000000)*(r01)*(x28)*(x31));
IKReal x76=((pz)*(x33)*(x50));
IKReal x77=((x27)*(x41)*(x44));
IKReal x78=((x25)*(x55));
IKReal x79=((x33)*(x38)*(x47));
IKReal x80=((x36)*(x50)*((py)*(py)));
IKReal x81=((3.04000000000000)*(r01)*(x30)*(x31));
IKReal x82=((x31)*(x33)*(x34));
IKReal x83=((0.577600000000000)*(sj0)*(x34)*(x37));
IKReal x84=((x30)*(x32)*(x46));
IKReal x85=((cj0)*(x45)*(x48));
IKReal x86=((3.04000000000000)*(pp)*(x31)*(x37));
IKReal x87=((x26)*(x41)*(x44));
IKReal x88=((pp)*(r02)*(x32)*(x35));
IKReal x89=((x34)*(x39)*(x41));
IKReal x90=((x38)*(x42)*(x45));
IKReal x91=((3.04000000000000)*(x28)*(x31)*(x37));
IKReal x92=((pz)*(x31)*(x34)*(x36));
IKReal x93=((x25)*(x32)*(x48));
IKReal x94=((py)*(x32)*(x37)*(x47));
IKReal x95=((3.04000000000000)*(x25)*(x34)*(x43));
IKReal x96=((x32)*(x42)*(x51));
IKReal x97=((x32)*(x35)*(x49));
IKReal x98=((x25)*(x36)*(x50));
IKReal x99=((px)*(x26)*(x28)*(x32));
IKReal x100=((sj0)*(x24)*(x29)*(x36));
IKReal x101=((6.08000000000000)*(x29)*(x38)*(x42));
IKReal x102=((6.08000000000000)*(x28)*(x34)*(x43));
IKReal x103=((x65)+(x66));
IKReal x104=((x63)+(x64)+(x88)+(x89)+(x86)+(x87)+(x85)+(x90));
IKReal x105=((x76)+(x75)+(x74)+(x73)+(x72)+(x71)+(x79)+(x78)+(x54)+(x53)+(x67)+(x68)+(x82)+(x83));
IKReal x106=((x100)+(x101)+(x102)+(x77)+(x70)+(x59)+(x58)+(x57)+(x60)+(x61)+(x62)+(x69)+(x80)+(x81)+(x84)+(x99)+(x98)+(x91)+(x93)+(x92)+(x95)+(x94)+(x97)+(x96));
op[0]=((((-0.0877800000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((-0.0764320000000000)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((-8.00000000000000)*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((0.0764320000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((4.00000000000000)*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-1.52000000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-0.134232000000000)*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((-0.00833715086400000)*((r02)*(r02))))+(((-4.00000000000000)*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((-0.144400000000000)*((py)*(py))*((r01)*(r01))))+(((-0.0764320000000000)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-1.00000000000000)*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((1.52000000000000)*(pz)*((px)*(px))*((r00)*(r00))))+(((-0.760000000000000)*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((3.04000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((-1.52000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((0.0438900000000000)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((-0.0764320000000000)*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((1.52000000000000)*(pz)*((py)*(py))*((r01)*(r01))))+(((-0.0764320000000000)*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((-8.00000000000000)*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((1.52000000000000)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((4.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((1.52000000000000)*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((3.04000000000000)*(px)*(r00)*(r02)*((pz)*(pz))))+(((0.00242483673600000)*((r01)*(r01))*((sj0)*(sj0))))+(((0.0438900000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((0.182616000000000)*(pp)*((r02)*(r02))))+(((-8.00000000000000)*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((3.04000000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((4.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)))+(((-8.00000000000000)*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((-0.654032000000000)*(px)*(pz)*(r00)*(r02)))+(((4.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-1.52000000000000)*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-0.760000000000000)*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((-1.52000000000000)*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((0.0382160000000000)*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((-1.00000000000000)*((pp)*(pp))*((r02)*(r02))))+(((-8.00000000000000)*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-1.52000000000000)*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((4.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)))+(((3.04000000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((4.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((1.52000000000000)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-8.00000000000000)*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((-0.0764320000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-0.0764320000000000)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((-0.760000000000000)*(pp)*(py)*(r01)*(r02)))+(((-0.134232000000000)*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((-0.0671160000000000)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((-1.52000000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((-1.52000000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-8.00000000000000)*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((-4.00000000000000)*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((3.04000000000000)*(py)*(r01)*(r02)*((pz)*(pz))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((0.0578000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-1.00000000000000)*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((-2.00000000000000)*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((-1.52000000000000)*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((-0.760000000000000)*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((0.00242483673600000)*((cj0)*(cj0))*((r00)*(r00))))+(((-16.0000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((0.0578000000000000)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((-8.00000000000000)*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((-4.00000000000000)*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((1.52000000000000)*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((4.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((-1.52000000000000)*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((-0.144400000000000)*((px)*(px))*((r00)*(r00))))+(((-8.00000000000000)*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((4.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-1.52000000000000)*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((0.0693940800000000)*(pz)*((r02)*(r02))))+(((-0.0764320000000000)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-0.654032000000000)*(py)*(pz)*(r01)*(r02)))+(((1.52000000000000)*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((0.0438900000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((-0.0438900000000000)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((1.52000000000000)*((pz)*(pz)*(pz))*((r02)*(r02))))+(((1.52000000000000)*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((4.00000000000000)*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0671160000000000)*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0671160000000000)*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((0.0578000000000000)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((-4.00000000000000)*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((-0.0438900000000000)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((0.760000000000000)*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0764320000000000)*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((0.0438900000000000)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((3.04000000000000)*(px)*(py)*(pz)*(r00)*(r01)))+(((-1.52000000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((0.0693940800000000)*(px)*(r00)*(r02)))+(((-0.760000000000000)*(pp)*(pz)*((r02)*(r02))))+(((-0.0671160000000000)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((4.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((-0.760000000000000)*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((0.760000000000000)*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((4.00000000000000)*(pp)*((pz)*(pz))*((r02)*(r02))))+(((-4.00000000000000)*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((-16.0000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((-0.760000000000000)*(pp)*(px)*(r00)*(r02)))+(((-1.52000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((-4.00000000000000)*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.288800000000000)*(px)*(py)*(r00)*(r01)))+(((-8.00000000000000)*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((0.0578000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((4.00000000000000)*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((1.52000000000000)*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((0.00484967347200000)*(cj0)*(r00)*(r01)*(sj0)))+(((-8.00000000000000)*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-0.509632000000000)*((pz)*(pz))*((r02)*(r02))))+(((-8.00000000000000)*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((0.0382160000000000)*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((-16.0000000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((0.0693940800000000)*(py)*(r01)*(r02))));
op[1]=((((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x104)))+(x106)+(x103));
op[2]=((((8.00000000000000)*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-1.30806400000000)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((8.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((8.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((-0.212368000000000)*(pp)*((r02)*(r02))))+(((-0.268464000000000)*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((-0.134232000000000)*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((-32.0000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((0.654032000000000)*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((-16.0000000000000)*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-8.00000000000000)*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((-8.00000000000000)*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-16.0000000000000)*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-0.0381982769280000)*((r01)*(r01))*((sj0)*(sj0))))+(((-2.00000000000000)*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((-1.30806400000000)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-0.288800000000000)*((px)*(px))*((r00)*(r00))))+(((-2.00000000000000)*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((8.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-0.134232000000000)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((0.0263736486720000)*((r02)*(r02))))+(((8.00000000000000)*(pp)*((pz)*(pz))*((r02)*(r02))))+(((-1.03960000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-1.30806400000000)*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((-16.0000000000000)*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((-8.00000000000000)*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((-8.00000000000000)*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((-0.134232000000000)*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((-16.0000000000000)*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((8.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-16.0000000000000)*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((-1.03960000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-16.0000000000000)*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((-0.152864000000000)*(px)*(pz)*(r00)*(r02)))+(((-2.00000000000000)*((pp)*(pp))*((r02)*(r02))))+(((-1.30806400000000)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((0.135936000000000)*((pz)*(pz))*((r02)*(r02))))+(((-0.152864000000000)*(py)*(pz)*(r01)*(r02)))+(((-0.0381982769280000)*((cj0)*(cj0))*((r00)*(r00))))+(((8.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)))+(((-1.30806400000000)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((8.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((8.00000000000000)*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-4.00000000000000)*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((-8.00000000000000)*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((-32.0000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((8.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((-8.00000000000000)*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((-0.0763965538560000)*(cj0)*(r00)*(r01)*(sj0)))+(((-32.0000000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((1.30806400000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((-16.0000000000000)*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((-16.0000000000000)*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-0.288800000000000)*((py)*(py))*((r01)*(r01))))+(((8.00000000000000)*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-16.0000000000000)*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((-0.577600000000000)*(px)*(py)*(r00)*(r01)))+(((-1.30806400000000)*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((8.00000000000000)*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-16.0000000000000)*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((0.654032000000000)*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((-1.30806400000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-1.03960000000000)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((8.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((-0.134232000000000)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((-16.0000000000000)*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-8.00000000000000)*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((-0.268464000000000)*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((-8.00000000000000)*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((-1.03960000000000)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((-8.00000000000000)*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((8.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((-1.30806400000000)*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((-16.0000000000000)*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((8.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02))));
op[3]=((((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x103)))+(x105)+(x106));
op[4]=((((-0.0438900000000000)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((1.52000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((-0.0764320000000000)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((-8.00000000000000)*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((1.52000000000000)*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((0.0764320000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((4.00000000000000)*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-0.134232000000000)*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((-0.00833715086400000)*((r02)*(r02))))+(((-1.52000000000000)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-0.0438900000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((-4.00000000000000)*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((-0.144400000000000)*((py)*(py))*((r01)*(r01))))+(((-0.0693940800000000)*(pz)*((r02)*(r02))))+(((-0.0764320000000000)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-1.00000000000000)*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((0.760000000000000)*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((1.52000000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-0.0764320000000000)*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-0.0764320000000000)*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((-8.00000000000000)*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((4.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((-3.04000000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((0.00242483673600000)*((r01)*(r01))*((sj0)*(sj0))))+(((0.182616000000000)*(pp)*((r02)*(r02))))+(((0.760000000000000)*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((-8.00000000000000)*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((-3.04000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((4.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)))+(((-8.00000000000000)*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((-0.654032000000000)*(px)*(pz)*(r00)*(r02)))+(((4.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-1.52000000000000)*(pz)*((px)*(px))*((r00)*(r00))))+(((-0.760000000000000)*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((0.0382160000000000)*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((-1.00000000000000)*((pp)*(pp))*((r02)*(r02))))+(((-8.00000000000000)*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-1.52000000000000)*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((4.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)))+(((1.52000000000000)*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((4.00000000000000)*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((-8.00000000000000)*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((0.760000000000000)*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((-1.52000000000000)*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((-0.0764320000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-0.0764320000000000)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((1.52000000000000)*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((0.0438900000000000)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.134232000000000)*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((-0.0671160000000000)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((0.760000000000000)*(pp)*(px)*(r00)*(r02)))+(((4.00000000000000)*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((-8.00000000000000)*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((-1.52000000000000)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((-4.00000000000000)*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((-0.0438900000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((-1.52000000000000)*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((-1.52000000000000)*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((0.0578000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((-1.00000000000000)*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((-2.00000000000000)*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((0.00242483673600000)*((cj0)*(cj0))*((r00)*(r00))))+(((0.760000000000000)*(pp)*(py)*(r01)*(r02)))+(((-16.0000000000000)*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((0.0578000000000000)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((-8.00000000000000)*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((-4.00000000000000)*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((4.00000000000000)*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((1.52000000000000)*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((-0.144400000000000)*((px)*(px))*((r00)*(r00))))+(((-0.0693940800000000)*(px)*(r00)*(r02)))+(((-8.00000000000000)*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((4.00000000000000)*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((-0.760000000000000)*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0764320000000000)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-0.654032000000000)*(py)*(pz)*(r01)*(r02)))+(((0.760000000000000)*(pp)*(pz)*((r02)*(r02))))+(((-4.00000000000000)*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((-3.04000000000000)*(px)*(py)*(pz)*(r00)*(r01)))+(((-1.52000000000000)*(pz)*((py)*(py))*((r01)*(r01))))+(((-0.0693940800000000)*(py)*(r01)*(r02)))+(((4.00000000000000)*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0671160000000000)*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.0671160000000000)*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((-3.04000000000000)*(py)*(r01)*(r02)*((pz)*(pz))))+(((0.0578000000000000)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((0.0877800000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((-0.0438900000000000)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((-4.00000000000000)*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((1.52000000000000)*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((-0.0764320000000000)*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((0.0438900000000000)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((1.52000000000000)*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((-1.52000000000000)*((pz)*(pz)*(pz))*((r02)*(r02))))+(((1.52000000000000)*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((-0.0671160000000000)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((1.52000000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((-1.52000000000000)*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((4.00000000000000)*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((0.760000000000000)*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((4.00000000000000)*(pp)*((pz)*(pz))*((r02)*(r02))))+(((1.52000000000000)*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((-4.00000000000000)*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((-16.0000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((-4.00000000000000)*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((-0.288800000000000)*(px)*(py)*(r00)*(r01)))+(((-3.04000000000000)*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((-8.00000000000000)*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((0.0578000000000000)*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((4.00000000000000)*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((0.00484967347200000)*(cj0)*(r00)*(r01)*(sj0)))+(((-3.04000000000000)*(px)*(r00)*(r02)*((pz)*(pz))))+(((1.52000000000000)*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((-8.00000000000000)*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((-0.509632000000000)*((pz)*(pz))*((r02)*(r02))))+(((-8.00000000000000)*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((0.0382160000000000)*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((4.00000000000000)*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((-16.0000000000000)*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py)))));
polyroots4(op,zeror,numroots);
IKReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IKReal htj1 = zeror[ij1];
tempj1array[0]=((2.00000000000000)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IKReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
IKReal x107=(pz)*(pz);
IKReal x108=(py)*(py);
IKReal x109=(px)*(px);
IKReal x110=((r01)*(sj0));
IKReal x111=((0.190000000000000)*(cj1));
IKReal x112=((pp)*(sj1));
IKReal x113=((1.00000000000000)*(r02));
IKReal x114=((0.380000000000000)*(pz));
IKReal x115=((1.00000000000000)*(pz));
IKReal x116=((py)*(r01));
IKReal x117=((px)*(sj0));
IKReal x118=((cj0)*(r00));
IKReal x119=((1.00000000000000)*(cj1));
IKReal x120=((0.0361000000000000)*(sj1));
IKReal x121=((2.00000000000000)*(sj1));
IKReal x122=((0.0361000000000000)*(cj1));
IKReal x123=((2.00000000000000)*(cj1));
IKReal x124=((py)*(r00));
IKReal x125=((0.190000000000000)*(sj1));
IKReal x126=((cj0)*(px));
IKReal x127=((px)*(r00));
IKReal x128=((py)*(r02)*(sj0));
IKReal x129=((pz)*(x123));
IKReal x130=((r02)*(x126));
IKReal x131=((pz)*(x121));
IKReal x132=((r02)*(x107));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x117)))+(((cj0)*(py))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x110)))+(((sj1)*(x118)))+(((-1.00000000000000)*(cj1)*(x113))));
evalcond[4]=((((-1.00000000000000)*(sj1)*(x113)))+(((-1.00000000000000)*(x118)*(x119)))+(((-1.00000000000000)*(x110)*(x119))));
evalcond[5]=((((-1.00000000000000)*(r02)*(x111)))+(((-1.00000000000000)*(x127)))+(((-1.00000000000000)*(x116)))+(((x118)*(x125)))+(((x110)*(x125)))+(((-1.00000000000000)*(pz)*(x113))));
evalcond[6]=((((-1.00000000000000)*(x111)*(x118)))+(((-1.00000000000000)*(x115)*(x118)))+(((-1.00000000000000)*(x110)*(x115)))+(((-1.00000000000000)*(x110)*(x111)))+(x130)+(x128)+(((-1.00000000000000)*(r02)*(x125))));
evalcond[7]=((((-1.00000000000000)*(x118)*(x120)))+(((x110)*(x112)))+(((r02)*(x114)))+(((-1.00000000000000)*(x117)*(x121)*(x124)))+(((x112)*(x118)))+(((-1.00000000000000)*(x110)*(x120)))+(((-1.00000000000000)*(cj1)*(pp)*(x113)))+(((r02)*(x122)))+(((-1.00000000000000)*(x128)*(x131)))+(((x123)*(x132)))+(((-1.00000000000000)*(x108)*(x110)*(x121)))+(((x116)*(x129)))+(((-1.00000000000000)*(x116)*(x121)*(x126)))+(((-1.00000000000000)*(x109)*(x118)*(x121)))+(((0.380000000000000)*(x116)))+(((-1.00000000000000)*(x130)*(x131)))+(((x127)*(x129)))+(((0.380000000000000)*(x127))));
evalcond[8]=((((-1.00000000000000)*(pp)*(x110)*(x119)))+(((x127)*(x131)))+(((0.380000000000000)*(x130)))+(((-1.00000000000000)*(x118)*(x122)))+(((x121)*(x132)))+(((-1.00000000000000)*(x112)*(x113)))+(((-1.00000000000000)*(pp)*(x118)*(x119)))+(((x116)*(x123)*(x126)))+(((-1.00000000000000)*(x110)*(x122)))+(((x129)*(x130)))+(((x117)*(x123)*(x124)))+(((x108)*(x110)*(x123)))+(((x109)*(x118)*(x123)))+(((-1.00000000000000)*(x110)*(x114)))+(((-1.00000000000000)*(r02)*(x120)))+(((-1.00000000000000)*(x114)*(x118)))+(((x116)*(x131)))+(((x128)*(x129)))+(((0.380000000000000)*(x128))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IKReal x133=((5.00698342424961)*(sj1));
cj3array[0]=((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((-1.00000000000000)*(py)*(sj0)*(x133)))+(((5.00698342424961)*(cj1)*(pz)))+(((-1.00000000000000)*(cj0)*(px)*(x133))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[1];
IKReal x134=((px)*(sj0));
IKReal x135=((2.00000000000000)*(py));
IKReal x136=((0.380000000000000)*(cj1));
IKReal x137=((cj0)*(r01));
IKReal x138=((pz)*(r02));
IKReal x139=((r00)*(sj0));
IKReal x140=((0.380000000000000)*(sj1));
evalcond[0]=((0.0938500000000000)+(((0.0361000000000000)*(x137)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(x136)))+(((-0.0361000000000000)*(x139)))+(((-1.00000000000000)*(py)*(x135)*(x137)))+(((2.00000000000000)*(px)*(r00)*(x134)))+(((r01)*(x134)*(x135)))+(((pp)*(x137)))+(((2.00000000000000)*(x134)*(x138)))+(((r02)*(x134)*(x136)))+(((pz)*(x136)*(x137)))+(((py)*(r00)*(x140)))+(((-1.00000000000000)*(cj0)*(px)*(r00)*(x135)))+(((-1.00000000000000)*(pp)*(x139)))+(((-1.00000000000000)*(cj0)*(x135)*(x138)))+(((0.0758940000000000)*(IKcos(j3))))+(((-1.00000000000000)*(px)*(r01)*(x140)))+(((-1.00000000000000)*(pz)*(x136)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.92805755395683)*(cj3)))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.85740903679934)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IKReal x141=((cj1)*(sj3));
IKReal x142=((cj3)*(sj1));
IKReal x143=((273000.000000000)*(pz));
IKReal x144=((cj1)*(cj3));
IKReal x145=((139000.000000000)*(cj1));
IKReal x146=((cj0)*(px));
IKReal x147=((sj1)*(sj3));
IKReal x148=((139000.000000000)*(sj1));
IKReal x149=((139000.000000000)*(py)*(sj0));
IKReal x150=((273000.000000000)*(x146));
IKReal x151=((273000.000000000)*(py)*(sj0));
if( IKabs(((gconst4)*(((((-1.00000000000000)*(x142)*(x143)))+(((-1.00000000000000)*(pz)*(x148)))+(((-1.00000000000000)*(x144)*(x150)))+(((-1.00000000000000)*(x144)*(x151)))+(((51870.0000000000)*(sj3)))+(((x141)*(x143)))+(((-1.00000000000000)*(x147)*(x151)))+(((-1.00000000000000)*(x147)*(x150)))+(((-1.00000000000000)*(py)*(sj0)*(x145)))+(((-1.00000000000000)*(x145)*(x146))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((26410.0000000000)+(((pz)*(x145)))+(((-1.00000000000000)*(x142)*(x151)))+(((-1.00000000000000)*(x142)*(x150)))+(((x141)*(x150)))+(((x141)*(x151)))+(((51870.0000000000)*(cj3)))+(((-1.00000000000000)*(x146)*(x148)))+(((-1.00000000000000)*(py)*(sj0)*(x148)))+(((x143)*(x144)))+(((x143)*(x147))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(x142)*(x143)))+(((-1.00000000000000)*(pz)*(x148)))+(((-1.00000000000000)*(x144)*(x150)))+(((-1.00000000000000)*(x144)*(x151)))+(((51870.0000000000)*(sj3)))+(((x141)*(x143)))+(((-1.00000000000000)*(x147)*(x151)))+(((-1.00000000000000)*(x147)*(x150)))+(((-1.00000000000000)*(py)*(sj0)*(x145)))+(((-1.00000000000000)*(x145)*(x146)))))), ((gconst4)*(((26410.0000000000)+(((pz)*(x145)))+(((-1.00000000000000)*(x142)*(x151)))+(((-1.00000000000000)*(x142)*(x150)))+(((x141)*(x150)))+(((x141)*(x151)))+(((51870.0000000000)*(cj3)))+(((-1.00000000000000)*(x146)*(x148)))+(((-1.00000000000000)*(py)*(sj0)*(x148)))+(((x143)*(x144)))+(((x143)*(x147)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x152=IKcos(j2);
IKReal x153=IKsin(j2);
IKReal x154=((px)*(sj1));
IKReal x155=((0.273000000000000)*(cj3));
IKReal x156=((py)*(sj1));
IKReal x157=((1.00000000000000)*(r00));
IKReal x158=((cj1)*(sj0));
IKReal x159=((1.00000000000000)*(px));
IKReal x160=((1.00000000000000)*(pz));
IKReal x161=((cj0)*(r01));
IKReal x162=((pz)*(sj1));
IKReal x163=((0.273000000000000)*(sj3));
IKReal x164=((cj0)*(cj1));
IKReal x165=((0.139000000000000)*(x153));
IKReal x166=((0.139000000000000)*(x152));
IKReal x167=((x153)*(x155));
IKReal x168=((x152)*(x163));
IKReal x169=((x153)*(x163));
IKReal x170=((x152)*(x155));
IKReal x171=((x167)+(x165));
IKReal x172=((x170)+(x169)+(x166));
evalcond[0]=((-0.190000000000000)+(((cj0)*(x154)))+(((-1.00000000000000)*(x172)))+(((sj0)*(x156)))+(((-1.00000000000000)*(cj1)*(x160))));
evalcond[1]=((((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x159)*(x164)))+(x171)+(((-1.00000000000000)*(py)*(x158)))+(((-1.00000000000000)*(sj1)*(x160))));
evalcond[2]=((((x161)*(x162)))+(((-1.00000000000000)*(cj1)*(py)*(x157)))+(((-1.00000000000000)*(x168)))+(x171)+(((-1.00000000000000)*(cj0)*(r02)*(x156)))+(((r02)*(sj0)*(x154)))+(((-1.00000000000000)*(sj0)*(x157)*(x162)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((-1.00000000000000)*(r02)*(x158)*(x159)))+(((r01)*(x154)))+(((-0.190000000000000)*(x161)))+(((pz)*(r00)*(x158)))+(x172)+(((py)*(r02)*(x164)))+(((-1.00000000000000)*(x156)*(x157)))+(((0.190000000000000)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(x160)*(x161))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
IKReal x173=(pz)*(pz);
IKReal x174=(py)*(py);
IKReal x175=(px)*(px);
IKReal x176=((r01)*(sj0));
IKReal x177=((0.190000000000000)*(cj1));
IKReal x178=((pp)*(sj1));
IKReal x179=((1.00000000000000)*(r02));
IKReal x180=((0.380000000000000)*(pz));
IKReal x181=((1.00000000000000)*(pz));
IKReal x182=((py)*(r01));
IKReal x183=((px)*(sj0));
IKReal x184=((cj0)*(r00));
IKReal x185=((1.00000000000000)*(cj1));
IKReal x186=((0.0361000000000000)*(sj1));
IKReal x187=((2.00000000000000)*(sj1));
IKReal x188=((0.0361000000000000)*(cj1));
IKReal x189=((2.00000000000000)*(cj1));
IKReal x190=((py)*(r00));
IKReal x191=((0.190000000000000)*(sj1));
IKReal x192=((cj0)*(px));
IKReal x193=((px)*(r00));
IKReal x194=((py)*(r02)*(sj0));
IKReal x195=((pz)*(x189));
IKReal x196=((r02)*(x192));
IKReal x197=((pz)*(x187));
IKReal x198=((r02)*(x173));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(x183)))+(((cj0)*(py))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x176)))+(((sj1)*(x184)))+(((-1.00000000000000)*(cj1)*(x179))));
evalcond[4]=((((-1.00000000000000)*(x184)*(x185)))+(((-1.00000000000000)*(x176)*(x185)))+(((-1.00000000000000)*(sj1)*(x179))));
evalcond[5]=((((x176)*(x191)))+(((-1.00000000000000)*(r02)*(x177)))+(((-1.00000000000000)*(x193)))+(((-1.00000000000000)*(pz)*(x179)))+(((x184)*(x191)))+(((-1.00000000000000)*(x182))));
evalcond[6]=((x196)+(x194)+(((-1.00000000000000)*(r02)*(x191)))+(((-1.00000000000000)*(x176)*(x181)))+(((-1.00000000000000)*(x177)*(x184)))+(((-1.00000000000000)*(x176)*(x177)))+(((-1.00000000000000)*(x181)*(x184))));
evalcond[7]=((((-1.00000000000000)*(x196)*(x197)))+(((x193)*(x195)))+(((-1.00000000000000)*(x194)*(x197)))+(((x178)*(x184)))+(((x176)*(x178)))+(((0.380000000000000)*(x182)))+(((-1.00000000000000)*(cj1)*(pp)*(x179)))+(((x189)*(x198)))+(((0.380000000000000)*(x193)))+(((-1.00000000000000)*(x184)*(x186)))+(((-1.00000000000000)*(x176)*(x186)))+(((-1.00000000000000)*(x175)*(x184)*(x187)))+(((-1.00000000000000)*(x182)*(x187)*(x192)))+(((r02)*(x180)))+(((r02)*(x188)))+(((-1.00000000000000)*(x183)*(x187)*(x190)))+(((x182)*(x195)))+(((-1.00000000000000)*(x174)*(x176)*(x187))));
evalcond[8]=((((x182)*(x189)*(x192)))+(((x193)*(x197)))+(((x183)*(x189)*(x190)))+(((x187)*(x198)))+(((-1.00000000000000)*(r02)*(x186)))+(((0.380000000000000)*(x194)))+(((0.380000000000000)*(x196)))+(((-1.00000000000000)*(x180)*(x184)))+(((-1.00000000000000)*(x184)*(x188)))+(((-1.00000000000000)*(x176)*(x180)))+(((-1.00000000000000)*(x176)*(x188)))+(((x195)*(x196)))+(((x194)*(x195)))+(((x175)*(x184)*(x189)))+(((x174)*(x176)*(x189)))+(((-1.00000000000000)*(x178)*(x179)))+(((x182)*(x197)))+(((-1.00000000000000)*(pp)*(x176)*(x185)))+(((-1.00000000000000)*(pp)*(x184)*(x185))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IKReal x199=((5.00698342424961)*(sj1));
cj3array[0]=((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((-1.00000000000000)*(cj0)*(px)*(x199)))+(((5.00698342424961)*(cj1)*(pz)))+(((-1.00000000000000)*(py)*(sj0)*(x199))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[1];
IKReal x200=((px)*(sj0));
IKReal x201=((2.00000000000000)*(py));
IKReal x202=((0.380000000000000)*(cj1));
IKReal x203=((cj0)*(r01));
IKReal x204=((pz)*(r02));
IKReal x205=((r00)*(sj0));
IKReal x206=((0.380000000000000)*(sj1));
evalcond[0]=((-0.0938500000000000)+(((-1.00000000000000)*(cj0)*(x201)*(x204)))+(((2.00000000000000)*(px)*(r00)*(x200)))+(((py)*(r00)*(x206)))+(((pp)*(x203)))+(((r01)*(x200)*(x201)))+(((-1.00000000000000)*(px)*(r01)*(x206)))+(((-0.0361000000000000)*(x205)))+(((pz)*(x202)*(x203)))+(((0.0361000000000000)*(x203)))+(((-1.00000000000000)*(cj0)*(px)*(r00)*(x201)))+(((-1.00000000000000)*(cj0)*(py)*(r02)*(x202)))+(((2.00000000000000)*(x200)*(x204)))+(((r02)*(x200)*(x202)))+(((-0.0758940000000000)*(IKcos(j3))))+(((-1.00000000000000)*(pp)*(x205)))+(((-1.00000000000000)*(pz)*(x202)*(x205)))+(((-1.00000000000000)*(py)*(x201)*(x203))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.92805755395683)*(cj3)))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.85740903679934)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IKReal x207=((139000.000000000)*(cj1));
IKReal x208=((py)*(sj0));
IKReal x209=((cj0)*(px));
IKReal x210=((273000.000000000)*(cj3));
IKReal x211=((139000.000000000)*(sj1));
IKReal x212=((273000.000000000)*(cj1)*(sj3));
IKReal x213=((273000.000000000)*(sj1)*(sj3));
if( IKabs(((gconst5)*(((((-1.00000000000000)*(pz)*(x211)))+(((pz)*(x212)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(x207)*(x209)))+(((-1.00000000000000)*(x207)*(x208)))+(((-1.00000000000000)*(cj1)*(x209)*(x210)))+(((-1.00000000000000)*(pz)*(sj1)*(x210)))+(((-1.00000000000000)*(cj1)*(x208)*(x210)))+(((-1.00000000000000)*(x208)*(x213)))+(((-1.00000000000000)*(x209)*(x213))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((26410.0000000000)+(((-1.00000000000000)*(sj1)*(x208)*(x210)))+(((pz)*(x213)))+(((x208)*(x212)))+(((x209)*(x212)))+(((pz)*(x207)))+(((51870.0000000000)*(cj3)))+(((-1.00000000000000)*(x208)*(x211)))+(((-1.00000000000000)*(x209)*(x211)))+(((cj1)*(pz)*(x210)))+(((-1.00000000000000)*(sj1)*(x209)*(x210))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((-1.00000000000000)*(pz)*(x211)))+(((pz)*(x212)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(x207)*(x209)))+(((-1.00000000000000)*(x207)*(x208)))+(((-1.00000000000000)*(cj1)*(x209)*(x210)))+(((-1.00000000000000)*(pz)*(sj1)*(x210)))+(((-1.00000000000000)*(cj1)*(x208)*(x210)))+(((-1.00000000000000)*(x208)*(x213)))+(((-1.00000000000000)*(x209)*(x213)))))), ((gconst5)*(((26410.0000000000)+(((-1.00000000000000)*(sj1)*(x208)*(x210)))+(((pz)*(x213)))+(((x208)*(x212)))+(((x209)*(x212)))+(((pz)*(x207)))+(((51870.0000000000)*(cj3)))+(((-1.00000000000000)*(x208)*(x211)))+(((-1.00000000000000)*(x209)*(x211)))+(((cj1)*(pz)*(x210)))+(((-1.00000000000000)*(sj1)*(x209)*(x210)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x214=IKcos(j2);
IKReal x215=IKsin(j2);
IKReal x216=((px)*(sj1));
IKReal x217=((0.273000000000000)*(cj3));
IKReal x218=((py)*(sj1));
IKReal x219=((1.00000000000000)*(r00));
IKReal x220=((cj1)*(sj0));
IKReal x221=((1.00000000000000)*(px));
IKReal x222=((1.00000000000000)*(pz));
IKReal x223=((cj0)*(r01));
IKReal x224=((pz)*(sj1));
IKReal x225=((0.273000000000000)*(sj3));
IKReal x226=((cj0)*(cj1));
IKReal x227=((0.139000000000000)*(x215));
IKReal x228=((0.139000000000000)*(x214));
IKReal x229=((x214)*(x225));
IKReal x230=((x215)*(x217));
IKReal x231=((x215)*(x225));
IKReal x232=((x214)*(x217));
IKReal x233=((x227)+(x230));
IKReal x234=((x228)+(x232)+(x231));
evalcond[0]=((-0.190000000000000)+(((cj0)*(x216)))+(((-1.00000000000000)*(x234)))+(((sj0)*(x218)))+(((-1.00000000000000)*(cj1)*(x222))));
evalcond[1]=((x233)+(((-1.00000000000000)*(sj1)*(x222)))+(((-1.00000000000000)*(py)*(x220)))+(((-1.00000000000000)*(x221)*(x226)))+(((-1.00000000000000)*(x229))));
evalcond[2]=((((r02)*(sj0)*(x216)))+(((-1.00000000000000)*(cj0)*(r02)*(x218)))+(((x223)*(x224)))+(((-1.00000000000000)*(x233)))+(x229)+(((-1.00000000000000)*(sj0)*(x219)*(x224)))+(((-1.00000000000000)*(cj1)*(py)*(x219)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((-0.190000000000000)*(x223)))+(((-1.00000000000000)*(x218)*(x219)))+(((-1.00000000000000)*(x234)))+(((py)*(r02)*(x226)))+(((0.190000000000000)*(r00)*(sj0)))+(((pz)*(r00)*(x220)))+(((r01)*(x216)))+(((-1.00000000000000)*(cj1)*(x222)*(x223)))+(((-1.00000000000000)*(r02)*(x220)*(x221))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x235=((sj0)*(sj1));
IKReal x236=((cj0)*(sj1));
if( IKabs(((0.00719424460431655)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))*(((((1000.00000000000)*(pz)*(r02)))+(((1000.00000000000)*(py)*(r01)))+(((-190.000000000000)*(r01)*(x235)))+(((190.000000000000)*(cj1)*(r02)))+(((-190.000000000000)*(r00)*(x236)))+(((1000.00000000000)*(px)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((-5.00698342424961)*(py)*(x235)))+(((5.00698342424961)*(cj1)*(pz)))+(((-5.00698342424961)*(px)*(x236))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))*(((((1000.00000000000)*(pz)*(r02)))+(((1000.00000000000)*(py)*(r01)))+(((-190.000000000000)*(r01)*(x235)))+(((190.000000000000)*(cj1)*(r02)))+(((-190.000000000000)*(r00)*(x236)))+(((1000.00000000000)*(px)*(r00)))))))+IKsqr(((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((-5.00698342424961)*(py)*(x235)))+(((5.00698342424961)*(cj1)*(pz)))+(((-5.00698342424961)*(px)*(x236)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))*(((((1000.00000000000)*(pz)*(r02)))+(((1000.00000000000)*(py)*(r01)))+(((-190.000000000000)*(r01)*(x235)))+(((190.000000000000)*(cj1)*(r02)))+(((-190.000000000000)*(r00)*(x236)))+(((1000.00000000000)*(px)*(r00)))))), ((-0.760929717764250)+(((13.1762721690779)*(pp)))+(((-5.00698342424961)*(py)*(x235)))+(((5.00698342424961)*(cj1)*(pz)))+(((-5.00698342424961)*(px)*(x236)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x237=IKcos(j3);
IKReal x238=((r01)*(sj0));
IKReal x239=((0.190000000000000)*(cj1));
IKReal x240=((py)*(r02));
IKReal x241=((0.380000000000000)*(cj1));
IKReal x242=((r00)*(sj0));
IKReal x243=((cj0)*(r01));
IKReal x244=((1.00000000000000)*(pz));
IKReal x245=((1.00000000000000)*(pp));
IKReal x246=((cj0)*(r00));
IKReal x247=((0.190000000000000)*(sj1));
IKReal x248=((0.139000000000000)*(cj4));
IKReal x249=((2.00000000000000)*(pz));
IKReal x250=((px)*(r02));
IKReal x251=((2.00000000000000)*(px)*(py));
IKReal x252=((0.380000000000000)*(py)*(sj1));
IKReal x253=((0.0758940000000000)*(x237));
IKReal x254=((0.380000000000000)*(px)*(sj1));
evalcond[0]=((0.0577500000000000)+(((-1.00000000000000)*(pz)*(x241)))+(((sj0)*(x252)))+(x253)+(((cj0)*(x254)))+(((-1.00000000000000)*(x245))));
evalcond[1]=((((-1.00000000000000)*(px)*(r00)))+(((x238)*(x247)))+(((-1.00000000000000)*(r02)*(x239)))+(((-1.00000000000000)*(r02)*(x244)))+(((-1.00000000000000)*(py)*(r01)))+(((x248)*(IKsin(j3))))+(((x246)*(x247))));
evalcond[2]=((((-1.00000000000000)*(x237)*(x248)))+(((-1.00000000000000)*(x238)*(x239)))+(((cj0)*(x250)))+(((-1.00000000000000)*(x238)*(x244)))+(((-1.00000000000000)*(r02)*(x247)))+(((-0.273000000000000)*(cj4)))+(((-1.00000000000000)*(x239)*(x246)))+(((sj0)*(x240)))+(((-1.00000000000000)*(x244)*(x246))));
evalcond[3]=((((sj4)*(x253)))+(((-1.00000000000000)*(x242)*(x245)))+(((sj0)*(x249)*(x250)))+(((x238)*(x251)))+(((r00)*(x252)))+(((0.0938500000000000)*(sj4)))+(((-2.00000000000000)*(x243)*((py)*(py))))+(((-1.00000000000000)*(pz)*(x241)*(x242)))+(((-1.00000000000000)*(x246)*(x251)))+(((-1.00000000000000)*(cj0)*(x240)*(x249)))+(((-1.00000000000000)*(cj0)*(x240)*(x241)))+(((sj0)*(x241)*(x250)))+(((-1.00000000000000)*(r01)*(x254)))+(((0.0361000000000000)*(x243)))+(((-0.0361000000000000)*(x242)))+(((pz)*(x241)*(x243)))+(((2.00000000000000)*(x242)*((px)*(px))))+(((pp)*(x243))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x255=((0.0758940000000000)*(cj3));
IKReal x256=(py)*(py);
IKReal x257=(px)*(px);
IKReal x258=(pz)*(pz);
IKReal x259=((r01)*(sj0));
IKReal x260=((2.00000000000000)*(px));
IKReal x261=((0.190000000000000)*(cj1));
IKReal x262=((r00)*(sj1));
IKReal x263=((0.0361000000000000)*(cj0));
IKReal x264=((py)*(r02));
IKReal x265=((cj0)*(cj1));
IKReal x266=((0.380000000000000)*(pz));
IKReal x267=((pz)*(r02));
IKReal x268=((2.00000000000000)*(sj0));
IKReal x269=((cj0)*(r01));
IKReal x270=((0.380000000000000)*(py));
IKReal x271=((pz)*(sj1));
IKReal x272=((1.00000000000000)*(sj0));
IKReal x273=((pp)*(r00));
IKReal x274=((0.190000000000000)*(sj1));
IKReal x275=((0.0361000000000000)*(sj1));
IKReal x276=((2.00000000000000)*(cj0));
IKReal x277=((r00)*(sj0));
IKReal x278=((1.00000000000000)*(r00));
IKReal x279=((cj1)*(r00));
IKReal x280=((cj1)*(r02));
IKReal x281=((cj0)*(r00));
IKReal x282=((cj0)*(sj1));
IKReal x283=((0.380000000000000)*(px));
IKReal x284=((cj1)*(pz));
IKReal x285=((1.00000000000000)*(pp));
IKReal x286=((cj0)*(r02));
IKReal x287=((py)*(r01));
IKReal x288=((1.00000000000000)*(r02)*(sj1));
IKReal x289=((r00)*(x257));
IKReal x290=((2.00000000000000)*(x287));
IKReal x291=((2.00000000000000)*(x256));
IKReal x292=((2.00000000000000)*(x258));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(x272)))+(((cj0)*(py))));
evalcond[2]=((1.00000000000000)+(x269)+(((-1.00000000000000)*(r00)*(x272))));
evalcond[3]=((0.0577500000000000)+(((-1.00000000000000)*(cj1)*(x266)))+(((sj0)*(sj1)*(x270)))+(x255)+(((-1.00000000000000)*(x285)))+(((x282)*(x283))));
evalcond[4]=((((cj0)*(x262)))+(((sj1)*(x259)))+(((-1.00000000000000)*(x280))));
evalcond[5]=((((-1.00000000000000)*(cj1)*(x259)))+(((-1.00000000000000)*(x265)*(x278)))+(((-1.00000000000000)*(x288))));
evalcond[6]=((((-1.00000000000000)*(x267)))+(((x259)*(x274)))+(((0.190000000000000)*(cj0)*(x262)))+(((-1.00000000000000)*(x287)))+(((-1.00000000000000)*(r02)*(x261)))+(((-1.00000000000000)*(px)*(x278))));
evalcond[7]=((((-1.00000000000000)*(x259)*(x261)))+(((-1.00000000000000)*(cj0)*(pz)*(x278)))+(((-1.00000000000000)*(pz)*(x259)))+(((-1.00000000000000)*(r02)*(x274)))+(((-1.00000000000000)*(x261)*(x281)))+(((sj0)*(x264)))+(((px)*(x286))));
evalcond[8]=((0.0938500000000000)+(((x268)*(x289)))+(((-1.00000000000000)*(x272)*(x273)))+(((sj0)*(x280)*(x283)))+(((-1.00000000000000)*(py)*(x260)*(x281)))+(((-1.00000000000000)*(pz)*(x264)*(x276)))+(((-1.00000000000000)*(x269)*(x291)))+(((x262)*(x270)))+(((py)*(x259)*(x260)))+(x255)+(((-1.00000000000000)*(r01)*(sj1)*(x283)))+(((-0.380000000000000)*(x264)*(x265)))+(((-0.0361000000000000)*(x277)))+(((pp)*(x269)))+(((r01)*(x263)))+(((-1.00000000000000)*(cj1)*(x266)*(x277)))+(((sj0)*(x260)*(x267)))+(((r01)*(x265)*(x266))));
evalcond[9]=((((-1.00000000000000)*(x262)*(x263)))+(((0.0361000000000000)*(x280)))+(((-1.00000000000000)*(x260)*(x267)*(x282)))+(((r00)*(x283)))+(((-1.00000000000000)*(x257)*(x262)*(x276)))+(((pp)*(sj1)*(x259)))+(((-1.00000000000000)*(sj1)*(x259)*(x291)))+(((-1.00000000000000)*(x259)*(x275)))+(((x280)*(x292)))+(((pz)*(x260)*(x279)))+(((r02)*(x266)))+(((-1.00000000000000)*(x280)*(x285)))+(((-1.00000000000000)*(py)*(sj0)*(x260)*(x262)))+(((x284)*(x290)))+(((-1.00000000000000)*(py)*(sj1)*(x260)*(x269)))+(((-1.00000000000000)*(x264)*(x268)*(x271)))+(((r01)*(x270)))+(((cj0)*(pp)*(x262))));
evalcond[10]=((((x271)*(x290)))+(((0.380000000000000)*(sj0)*(x264)))+(((cj1)*(py)*(x260)*(x277)))+(((-1.00000000000000)*(x263)*(x279)))+(((cj1)*(x259)*(x291)))+(((x264)*(x268)*(x284)))+(((x260)*(x265)*(x287)))+(((-1.00000000000000)*(x265)*(x273)))+(((-1.00000000000000)*(x259)*(x266)))+(((2.00000000000000)*(x265)*(x289)))+(((pz)*(x260)*(x262)))+(((x260)*(x265)*(x267)))+(((-1.00000000000000)*(x266)*(x281)))+(((-1.00000000000000)*(cj1)*(x259)*(x285)))+(((-1.00000000000000)*(r02)*(x275)))+(((r02)*(sj1)*(x292)))+(((-1.00000000000000)*(r02)*(sj1)*(x285)))+(((x283)*(x286)))+(((-0.0361000000000000)*(cj1)*(x259))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.92805755395683)*(cj3)))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.85740903679934)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IKReal x293=((139000.000000000)*(cj1));
IKReal x294=((py)*(sj0));
IKReal x295=((cj0)*(px));
IKReal x296=((273000.000000000)*(cj3));
IKReal x297=((139000.000000000)*(sj1));
IKReal x298=((273000.000000000)*(cj1)*(sj3));
IKReal x299=((273000.000000000)*(sj1)*(sj3));
if( IKabs(((gconst2)*(((((-1.00000000000000)*(cj1)*(x295)*(x296)))+(((-1.00000000000000)*(cj1)*(x294)*(x296)))+(((-1.00000000000000)*(pz)*(x297)))+(((pz)*(x298)))+(((-1.00000000000000)*(x293)*(x294)))+(((-1.00000000000000)*(x293)*(x295)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(pz)*(sj1)*(x296)))+(((-1.00000000000000)*(x295)*(x299)))+(((-1.00000000000000)*(x294)*(x299))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((26410.0000000000)+(((-1.00000000000000)*(sj1)*(x295)*(x296)))+(((pz)*(x299)))+(((pz)*(x293)))+(((51870.0000000000)*(cj3)))+(((x295)*(x298)))+(((-1.00000000000000)*(sj1)*(x294)*(x296)))+(((-1.00000000000000)*(x295)*(x297)))+(((x294)*(x298)))+(((-1.00000000000000)*(x294)*(x297)))+(((cj1)*(pz)*(x296))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((-1.00000000000000)*(cj1)*(x295)*(x296)))+(((-1.00000000000000)*(cj1)*(x294)*(x296)))+(((-1.00000000000000)*(pz)*(x297)))+(((pz)*(x298)))+(((-1.00000000000000)*(x293)*(x294)))+(((-1.00000000000000)*(x293)*(x295)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(pz)*(sj1)*(x296)))+(((-1.00000000000000)*(x295)*(x299)))+(((-1.00000000000000)*(x294)*(x299)))))), ((gconst2)*(((26410.0000000000)+(((-1.00000000000000)*(sj1)*(x295)*(x296)))+(((pz)*(x299)))+(((pz)*(x293)))+(((51870.0000000000)*(cj3)))+(((x295)*(x298)))+(((-1.00000000000000)*(sj1)*(x294)*(x296)))+(((-1.00000000000000)*(x295)*(x297)))+(((x294)*(x298)))+(((-1.00000000000000)*(x294)*(x297)))+(((cj1)*(pz)*(x296)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x300=IKcos(j2);
IKReal x301=IKsin(j2);
IKReal x302=((px)*(sj1));
IKReal x303=((0.273000000000000)*(cj3));
IKReal x304=((py)*(sj1));
IKReal x305=((1.00000000000000)*(r00));
IKReal x306=((cj1)*(sj0));
IKReal x307=((1.00000000000000)*(px));
IKReal x308=((1.00000000000000)*(pz));
IKReal x309=((cj0)*(r01));
IKReal x310=((pz)*(sj1));
IKReal x311=((0.273000000000000)*(sj3));
IKReal x312=((cj0)*(cj1));
IKReal x313=((0.139000000000000)*(x301));
IKReal x314=((0.139000000000000)*(x300));
IKReal x315=((x301)*(x303));
IKReal x316=((x300)*(x311));
IKReal x317=((x301)*(x311));
IKReal x318=((x300)*(x303));
IKReal x319=((x315)+(x313));
IKReal x320=((x318)+(x314)+(x317));
evalcond[0]=((-0.190000000000000)+(((-1.00000000000000)*(x320)))+(((cj0)*(x302)))+(((-1.00000000000000)*(cj1)*(x308)))+(((sj0)*(x304))));
evalcond[1]=((((-1.00000000000000)*(sj1)*(x308)))+(((-1.00000000000000)*(py)*(x306)))+(x319)+(((-1.00000000000000)*(x316)))+(((-1.00000000000000)*(x307)*(x312))));
evalcond[2]=((((-1.00000000000000)*(sj0)*(x305)*(x310)))+(x319)+(((x309)*(x310)))+(((-1.00000000000000)*(cj0)*(r02)*(x304)))+(((-1.00000000000000)*(x316)))+(((r02)*(sj0)*(x302)))+(((cj1)*(px)*(r01)))+(((-1.00000000000000)*(cj1)*(py)*(x305))));
evalcond[3]=((((-0.190000000000000)*(x309)))+(x320)+(((py)*(r02)*(x312)))+(((0.190000000000000)*(r00)*(sj0)))+(((-1.00000000000000)*(r02)*(x306)*(x307)))+(((-1.00000000000000)*(x304)*(x305)))+(((r01)*(x302)))+(((pz)*(r00)*(x306)))+(((-1.00000000000000)*(cj1)*(x308)*(x309))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
IKReal x321=((0.0758940000000000)*(cj3));
IKReal x322=(py)*(py);
IKReal x323=(px)*(px);
IKReal x324=(pz)*(pz);
IKReal x325=((r01)*(sj0));
IKReal x326=((2.00000000000000)*(px));
IKReal x327=((0.190000000000000)*(cj1));
IKReal x328=((r00)*(sj1));
IKReal x329=((0.0361000000000000)*(cj0));
IKReal x330=((py)*(r02));
IKReal x331=((cj0)*(cj1));
IKReal x332=((0.380000000000000)*(pz));
IKReal x333=((pz)*(r02));
IKReal x334=((2.00000000000000)*(sj0));
IKReal x335=((cj0)*(r01));
IKReal x336=((0.380000000000000)*(py));
IKReal x337=((pz)*(sj1));
IKReal x338=((1.00000000000000)*(sj0));
IKReal x339=((pp)*(r00));
IKReal x340=((0.190000000000000)*(sj1));
IKReal x341=((0.0361000000000000)*(sj1));
IKReal x342=((2.00000000000000)*(cj0));
IKReal x343=((r00)*(sj0));
IKReal x344=((1.00000000000000)*(r00));
IKReal x345=((cj1)*(r00));
IKReal x346=((cj1)*(r02));
IKReal x347=((cj0)*(r00));
IKReal x348=((cj0)*(sj1));
IKReal x349=((0.380000000000000)*(px));
IKReal x350=((cj1)*(pz));
IKReal x351=((1.00000000000000)*(pp));
IKReal x352=((cj0)*(r02));
IKReal x353=((py)*(r01));
IKReal x354=((1.00000000000000)*(r02)*(sj1));
IKReal x355=((r00)*(x323));
IKReal x356=((2.00000000000000)*(x353));
IKReal x357=((2.00000000000000)*(x322));
IKReal x358=((2.00000000000000)*(x324));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(x338)))+(((cj0)*(py))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(x338)))+(x335));
evalcond[3]=((0.0577500000000000)+(((x348)*(x349)))+(((-1.00000000000000)*(x351)))+(((sj0)*(sj1)*(x336)))+(x321)+(((-1.00000000000000)*(cj1)*(x332))));
evalcond[4]=((((cj0)*(x328)))+(((sj1)*(x325)))+(((-1.00000000000000)*(x346))));
evalcond[5]=((((-1.00000000000000)*(cj1)*(x325)))+(((-1.00000000000000)*(x331)*(x344)))+(((-1.00000000000000)*(x354))));
evalcond[6]=((((-1.00000000000000)*(px)*(x344)))+(((x325)*(x340)))+(((-1.00000000000000)*(x353)))+(((-1.00000000000000)*(x333)))+(((0.190000000000000)*(cj0)*(x328)))+(((-1.00000000000000)*(r02)*(x327))));
evalcond[7]=((((px)*(x352)))+(((-1.00000000000000)*(r02)*(x340)))+(((-1.00000000000000)*(pz)*(x325)))+(((-1.00000000000000)*(x325)*(x327)))+(((-1.00000000000000)*(x327)*(x347)))+(((-1.00000000000000)*(cj0)*(pz)*(x344)))+(((sj0)*(x330))));
evalcond[8]=((-0.0938500000000000)+(((-1.00000000000000)*(py)*(x326)*(x347)))+(((-1.00000000000000)*(x338)*(x339)))+(((pp)*(x335)))+(((x334)*(x355)))+(((-1.00000000000000)*(x321)))+(((-0.0361000000000000)*(x343)))+(((r01)*(x329)))+(((py)*(x325)*(x326)))+(((-0.380000000000000)*(x330)*(x331)))+(((sj0)*(x326)*(x333)))+(((-1.00000000000000)*(cj1)*(x332)*(x343)))+(((-1.00000000000000)*(r01)*(sj1)*(x349)))+(((x328)*(x336)))+(((sj0)*(x346)*(x349)))+(((r01)*(x331)*(x332)))+(((-1.00000000000000)*(pz)*(x330)*(x342)))+(((-1.00000000000000)*(x335)*(x357))));
evalcond[9]=((((r01)*(x336)))+(((r00)*(x349)))+(((-1.00000000000000)*(sj1)*(x325)*(x357)))+(((-1.00000000000000)*(py)*(sj1)*(x326)*(x335)))+(((-1.00000000000000)*(x330)*(x334)*(x337)))+(((pp)*(sj1)*(x325)))+(((-1.00000000000000)*(py)*(sj0)*(x326)*(x328)))+(((-1.00000000000000)*(x326)*(x333)*(x348)))+(((x346)*(x358)))+(((r02)*(x332)))+(((-1.00000000000000)*(x346)*(x351)))+(((-1.00000000000000)*(x325)*(x341)))+(((pz)*(x326)*(x345)))+(((-1.00000000000000)*(x323)*(x328)*(x342)))+(((x350)*(x356)))+(((-1.00000000000000)*(x328)*(x329)))+(((0.0361000000000000)*(x346)))+(((cj0)*(pp)*(x328))));
evalcond[10]=((((-1.00000000000000)*(r02)*(x341)))+(((2.00000000000000)*(x331)*(x355)))+(((cj1)*(py)*(x326)*(x343)))+(((pz)*(x326)*(x328)))+(((x337)*(x356)))+(((cj1)*(x325)*(x357)))+(((-0.0361000000000000)*(cj1)*(x325)))+(((r02)*(sj1)*(x358)))+(((-1.00000000000000)*(x332)*(x347)))+(((x326)*(x331)*(x353)))+(((-1.00000000000000)*(cj1)*(x325)*(x351)))+(((0.380000000000000)*(sj0)*(x330)))+(((x349)*(x352)))+(((-1.00000000000000)*(x329)*(x345)))+(((-1.00000000000000)*(x325)*(x332)))+(((x330)*(x334)*(x350)))+(((x326)*(x331)*(x333)))+(((-1.00000000000000)*(x331)*(x339)))+(((-1.00000000000000)*(r02)*(sj1)*(x351))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.92805755395683)*(cj3)))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.85740903679934)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IKReal x359=((139000.000000000)*(cj1));
IKReal x360=((py)*(sj0));
IKReal x361=((cj0)*(px));
IKReal x362=((273000.000000000)*(cj3));
IKReal x363=((139000.000000000)*(sj1));
IKReal x364=((273000.000000000)*(cj1)*(sj3));
IKReal x365=((273000.000000000)*(sj1)*(sj3));
if( IKabs(((gconst3)*(((((-1.00000000000000)*(x361)*(x365)))+(((-1.00000000000000)*(x360)*(x365)))+(((-1.00000000000000)*(cj1)*(x360)*(x362)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(cj1)*(x361)*(x362)))+(((-1.00000000000000)*(pz)*(sj1)*(x362)))+(((pz)*(x364)))+(((-1.00000000000000)*(x359)*(x361)))+(((-1.00000000000000)*(x359)*(x360)))+(((-1.00000000000000)*(pz)*(x363))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((26410.0000000000)+(((x361)*(x364)))+(((-1.00000000000000)*(sj1)*(x360)*(x362)))+(((-1.00000000000000)*(x361)*(x363)))+(((-1.00000000000000)*(x360)*(x363)))+(((cj1)*(pz)*(x362)))+(((pz)*(x359)))+(((51870.0000000000)*(cj3)))+(((-1.00000000000000)*(sj1)*(x361)*(x362)))+(((pz)*(x365)))+(((x360)*(x364))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((-1.00000000000000)*(x361)*(x365)))+(((-1.00000000000000)*(x360)*(x365)))+(((-1.00000000000000)*(cj1)*(x360)*(x362)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(cj1)*(x361)*(x362)))+(((-1.00000000000000)*(pz)*(sj1)*(x362)))+(((pz)*(x364)))+(((-1.00000000000000)*(x359)*(x361)))+(((-1.00000000000000)*(x359)*(x360)))+(((-1.00000000000000)*(pz)*(x363)))))), ((gconst3)*(((26410.0000000000)+(((x361)*(x364)))+(((-1.00000000000000)*(sj1)*(x360)*(x362)))+(((-1.00000000000000)*(x361)*(x363)))+(((-1.00000000000000)*(x360)*(x363)))+(((cj1)*(pz)*(x362)))+(((pz)*(x359)))+(((51870.0000000000)*(cj3)))+(((-1.00000000000000)*(sj1)*(x361)*(x362)))+(((pz)*(x365)))+(((x360)*(x364)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x366=IKcos(j2);
IKReal x367=IKsin(j2);
IKReal x368=((px)*(sj1));
IKReal x369=((0.273000000000000)*(cj3));
IKReal x370=((py)*(sj1));
IKReal x371=((1.00000000000000)*(r00));
IKReal x372=((cj1)*(sj0));
IKReal x373=((1.00000000000000)*(px));
IKReal x374=((1.00000000000000)*(pz));
IKReal x375=((cj0)*(r01));
IKReal x376=((pz)*(sj1));
IKReal x377=((0.273000000000000)*(sj3));
IKReal x378=((cj0)*(cj1));
IKReal x379=((0.139000000000000)*(x367));
IKReal x380=((0.139000000000000)*(x366));
IKReal x381=((x366)*(x377));
IKReal x382=((x367)*(x369));
IKReal x383=((x367)*(x377));
IKReal x384=((x366)*(x369));
IKReal x385=((x382)+(x379));
IKReal x386=((x384)+(x383)+(x380));
evalcond[0]=((-0.190000000000000)+(((-1.00000000000000)*(cj1)*(x374)))+(((sj0)*(x370)))+(((-1.00000000000000)*(x386)))+(((cj0)*(x368))));
evalcond[1]=((((-1.00000000000000)*(py)*(x372)))+(((-1.00000000000000)*(sj1)*(x374)))+(x385)+(((-1.00000000000000)*(x373)*(x378)))+(((-1.00000000000000)*(x381))));
evalcond[2]=((((x375)*(x376)))+(((-1.00000000000000)*(sj0)*(x371)*(x376)))+(x381)+(((-1.00000000000000)*(cj0)*(r02)*(x370)))+(((-1.00000000000000)*(cj1)*(py)*(x371)))+(((r02)*(sj0)*(x368)))+(((-1.00000000000000)*(x385)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((pz)*(r00)*(x372)))+(((-1.00000000000000)*(r02)*(x372)*(x373)))+(((-1.00000000000000)*(x370)*(x371)))+(((r01)*(x368)))+(((-0.190000000000000)*(x375)))+(((-1.00000000000000)*(x386)))+(((0.190000000000000)*(r00)*(sj0)))+(((py)*(r02)*(x378)))+(((-1.00000000000000)*(cj1)*(x374)*(x375))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IKReal x387=((1.00000000000000)*(sj1));
IKReal x388=((cj1)*(sj3));
IKReal x389=((cj0)*(r00));
IKReal x390=((cj3)*(r02));
IKReal x391=((r01)*(sj0));
IKReal x392=((sj1)*(sj3));
IKReal x393=((cj3)*(x391));
if( IKabs(((gconst1)*(((((-1.00000000000000)*(x387)*(x393)))+(((-1.00000000000000)*(cj3)*(x387)*(x389)))+(((x388)*(x389)))+(((cj1)*(x390)))+(((x388)*(x391)))+(((r02)*(x392))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((sj1)*(x390)))+(((-1.00000000000000)*(r02)*(x388)))+(((cj1)*(cj3)*(x389)))+(((x391)*(x392)))+(((cj1)*(x393)))+(((x389)*(x392))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((-1.00000000000000)*(x387)*(x393)))+(((-1.00000000000000)*(cj3)*(x387)*(x389)))+(((x388)*(x389)))+(((cj1)*(x390)))+(((x388)*(x391)))+(((r02)*(x392)))))), ((gconst1)*(((((sj1)*(x390)))+(((-1.00000000000000)*(r02)*(x388)))+(((cj1)*(cj3)*(x389)))+(((x391)*(x392)))+(((cj1)*(x393)))+(((x389)*(x392)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[8];
IKReal x394=IKcos(j2);
IKReal x395=IKsin(j2);
IKReal x396=(pz)*(pz);
IKReal x397=(py)*(py);
IKReal x398=(px)*(px);
IKReal x399=((px)*(sj1));
IKReal x400=((sj0)*(sj1));
IKReal x401=((0.0552080000000000)*(sj3));
IKReal x402=((pp)*(r01));
IKReal x403=((cj1)*(sj0));
IKReal x404=((pz)*(r01));
IKReal x405=((0.380000000000000)*(sj0));
IKReal x406=((1.00000000000000)*(sj1));
IKReal x407=((py)*(r00));
IKReal x408=((pz)*(r02));
IKReal x409=((2.00000000000000)*(cj0));
IKReal x410=((2.00000000000000)*(py));
IKReal x411=((pz)*(r00));
IKReal x412=((pp)*(r02));
IKReal x413=((1.00000000000000)*(cj1));
IKReal x414=((cj0)*(r00));
IKReal x415=((0.0361000000000000)*(cj1));
IKReal x416=((py)*(r02));
IKReal x417=((0.0361000000000000)*(r01));
IKReal x418=((0.0361000000000000)*(sj1));
IKReal x419=((py)*(r01));
IKReal x420=((2.00000000000000)*(px));
IKReal x421=((cj1)*(px));
IKReal x422=((0.0938500000000000)*(cj3));
IKReal x423=((0.380000000000000)*(cj0));
IKReal x424=((px)*(r02));
IKReal x425=((cj4)*(x395));
IKReal x426=((cj4)*(x394));
IKReal x427=((0.273000000000000)*(sj3)*(sj4));
IKReal x428=((0.139000000000000)*(x395));
IKReal x429=((0.139000000000000)*(x394));
IKReal x430=((r00)*(x398));
IKReal x431=((0.273000000000000)*(x394));
IKReal x432=((0.273000000000000)*(cj3)*(x395));
IKReal x433=((x408)*(x410));
IKReal x434=((2.00000000000000)*(r01)*(x397));
IKReal x435=((2.00000000000000)*(r02)*(x396));
evalcond[0]=((((sj1)*(x414)))+(((-1.00000000000000)*(r02)*(x413)))+(((r01)*(x400)))+(((-1.00000000000000)*(sj3)*(x426)))+(((cj3)*(x425))));
evalcond[1]=((((-1.00000000000000)*(r01)*(x403)))+(((-1.00000000000000)*(r02)*(x406)))+(((sj3)*(x425)))+(((cj3)*(x426)))+(((-1.00000000000000)*(x413)*(x414))));
evalcond[2]=((-0.190000000000000)+(((-1.00000000000000)*(cj3)*(x431)))+(((py)*(x400)))+(((cj0)*(x399)))+(((-1.00000000000000)*(x429)))+(((-0.273000000000000)*(sj3)*(x395)))+(((-1.00000000000000)*(pz)*(x413))));
evalcond[3]=((((-1.00000000000000)*(sj3)*(x431)))+(((-1.00000000000000)*(cj0)*(px)*(x413)))+(((-1.00000000000000)*(py)*(x403)))+(x428)+(x432)+(((-1.00000000000000)*(pz)*(x406))));
evalcond[4]=((((sj4)*(x432)))+(((sj4)*(x428)))+(((-1.00000000000000)*(x394)*(x427)))+(((-1.00000000000000)*(cj0)*(x406)*(x416)))+(((r01)*(x421)))+(((cj0)*(sj1)*(x404)))+(((-1.00000000000000)*(x407)*(x413)))+(((-1.00000000000000)*(x400)*(x411)))+(((r02)*(sj0)*(x399))));
evalcond[5]=((((sj4)*(x429)))+(((-1.00000000000000)*(x406)*(x407)))+(((x395)*(x427)))+(((-1.00000000000000)*(x403)*(x424)))+(((r01)*(x399)))+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(cj0)*(x404)*(x413)))+(((0.190000000000000)*(r00)*(sj0)))+(((cj3)*(sj4)*(x431)))+(((x403)*(x411)))+(((cj0)*(cj1)*(x416))));
evalcond[6]=((((pp)*(sj1)*(x414)))+(((-1.00000000000000)*(x399)*(x408)*(x409)))+(((-1.00000000000000)*(sj1)*(x409)*(x430)))+(((cj1)*(x435)))+(((-1.00000000000000)*(x412)*(x413)))+(((0.380000000000000)*(x419)))+(((0.380000000000000)*(x408)))+(((-1.00000000000000)*(x400)*(x417)))+(((0.380000000000000)*(px)*(r00)))+(((0.0758940000000000)*(x425)))+(((cj1)*(x411)*(x420)))+(((-1.00000000000000)*(x400)*(x433)))+(((-1.00000000000000)*(x400)*(x434)))+(((-1.00000000000000)*(x401)*(x426)))+(((x400)*(x402)))+(((-1.00000000000000)*(x414)*(x418)))+(((-2.00000000000000)*(sj0)*(x399)*(x407)))+(((r02)*(x415)))+(((x422)*(x425)))+(((cj1)*(x404)*(x410)))+(((-1.00000000000000)*(x399)*(x409)*(x419))));
evalcond[7]=((((-1.00000000000000)*(x402)*(x403)))+(((x408)*(x409)*(x421)))+(((-1.00000000000000)*(x406)*(x412)))+(((x405)*(x416)))+(((x403)*(x433)))+(((x403)*(x434)))+(((-1.00000000000000)*(r02)*(x418)))+(((x403)*(x407)*(x420)))+(((-1.00000000000000)*(x403)*(x417)))+(((sj1)*(x404)*(x410)))+(((x409)*(x419)*(x421)))+(((0.0758940000000000)*(x426)))+(((-1.00000000000000)*(x404)*(x405)))+(((2.00000000000000)*(x399)*(x411)))+(((x423)*(x424)))+(((x401)*(x425)))+(((-1.00000000000000)*(x414)*(x415)))+(((-1.00000000000000)*(x411)*(x423)))+(((cj1)*(x409)*(x430)))+(((x422)*(x426)))+(((-1.00000000000000)*(pp)*(x413)*(x414)))+(((sj1)*(x435))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x436=((1000.00000000000)*(r02));
IKReal x437=((1000.00000000000)*(r00));
IKReal x438=((1000.00000000000)*(r01));
IKReal x439=((190.000000000000)*(r02));
IKReal x440=((190.000000000000)*(r01)*(sj0));
IKReal x441=((190.000000000000)*(cj0)*(r00));
if( IKabs(((gconst0)*(((((px)*(x437)))+(((cj1)*(x439)))+(((pz)*(x436)))+(((py)*(x438)))+(((-1.00000000000000)*(sj1)*(x441)))+(((-1.00000000000000)*(sj1)*(x440))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((py)*(sj0)*(x436)))+(((-1.00000000000000)*(sj1)*(x439)))+(((-1.00000000000000)*(pz)*(sj0)*(x438)))+(((-1.00000000000000)*(cj1)*(x440)))+(((-1.00000000000000)*(cj1)*(x441)))+(((cj0)*(px)*(x436)))+(((-1.00000000000000)*(cj0)*(pz)*(x437)))+(((-273.000000000000)*(cj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((px)*(x437)))+(((cj1)*(x439)))+(((pz)*(x436)))+(((py)*(x438)))+(((-1.00000000000000)*(sj1)*(x441)))+(((-1.00000000000000)*(sj1)*(x440)))))), ((gconst0)*(((((py)*(sj0)*(x436)))+(((-1.00000000000000)*(sj1)*(x439)))+(((-1.00000000000000)*(pz)*(sj0)*(x438)))+(((-1.00000000000000)*(cj1)*(x440)))+(((-1.00000000000000)*(cj1)*(x441)))+(((cj0)*(px)*(x436)))+(((-1.00000000000000)*(cj0)*(pz)*(x437)))+(((-273.000000000000)*(cj4)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x442=IKcos(j3);
IKReal x443=((r01)*(sj0));
IKReal x444=((0.190000000000000)*(cj1));
IKReal x445=((py)*(r02));
IKReal x446=((0.380000000000000)*(cj1));
IKReal x447=((r00)*(sj0));
IKReal x448=((cj0)*(r01));
IKReal x449=((1.00000000000000)*(pz));
IKReal x450=((1.00000000000000)*(pp));
IKReal x451=((cj0)*(r00));
IKReal x452=((0.190000000000000)*(sj1));
IKReal x453=((0.139000000000000)*(cj4));
IKReal x454=((2.00000000000000)*(pz));
IKReal x455=((px)*(r02));
IKReal x456=((2.00000000000000)*(px)*(py));
IKReal x457=((0.380000000000000)*(py)*(sj1));
IKReal x458=((0.0758940000000000)*(x442));
IKReal x459=((0.380000000000000)*(px)*(sj1));
evalcond[0]=((0.0577500000000000)+(((-1.00000000000000)*(x450)))+(x458)+(((sj0)*(x457)))+(((cj0)*(x459)))+(((-1.00000000000000)*(pz)*(x446))));
evalcond[1]=((((-1.00000000000000)*(px)*(r00)))+(((-1.00000000000000)*(r02)*(x444)))+(((-1.00000000000000)*(r02)*(x449)))+(((x443)*(x452)))+(((-1.00000000000000)*(py)*(r01)))+(((x451)*(x452)))+(((x453)*(IKsin(j3)))));
evalcond[2]=((((sj0)*(x445)))+(((-1.00000000000000)*(x443)*(x449)))+(((-1.00000000000000)*(x443)*(x444)))+(((-1.00000000000000)*(x442)*(x453)))+(((cj0)*(x455)))+(((-1.00000000000000)*(r02)*(x452)))+(((-0.273000000000000)*(cj4)))+(((-1.00000000000000)*(x444)*(x451)))+(((-1.00000000000000)*(x449)*(x451))));
evalcond[3]=((((-0.0361000000000000)*(x447)))+(((-1.00000000000000)*(pz)*(x446)*(x447)))+(((2.00000000000000)*(x447)*((px)*(px))))+(((-1.00000000000000)*(cj0)*(x445)*(x446)))+(((sj0)*(x454)*(x455)))+(((-1.00000000000000)*(r01)*(x459)))+(((pz)*(x446)*(x448)))+(((0.0938500000000000)*(sj4)))+(((0.0361000000000000)*(x448)))+(((pp)*(x448)))+(((sj4)*(x458)))+(((-1.00000000000000)*(x447)*(x450)))+(((x443)*(x456)))+(((-2.00000000000000)*(x448)*((py)*(py))))+(((-1.00000000000000)*(cj0)*(x445)*(x454)))+(((sj0)*(x446)*(x455)))+(((-1.00000000000000)*(x451)*(x456)))+(((r00)*(x457))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[11];
IKReal x460=((0.0758940000000000)*(cj3));
IKReal x461=(py)*(py);
IKReal x462=(px)*(px);
IKReal x463=(pz)*(pz);
IKReal x464=((r01)*(sj0));
IKReal x465=((2.00000000000000)*(px));
IKReal x466=((0.190000000000000)*(cj1));
IKReal x467=((r00)*(sj1));
IKReal x468=((0.0361000000000000)*(cj0));
IKReal x469=((py)*(r02));
IKReal x470=((cj0)*(cj1));
IKReal x471=((0.380000000000000)*(pz));
IKReal x472=((pz)*(r02));
IKReal x473=((2.00000000000000)*(sj0));
IKReal x474=((cj0)*(r01));
IKReal x475=((0.380000000000000)*(py));
IKReal x476=((pz)*(sj1));
IKReal x477=((1.00000000000000)*(sj0));
IKReal x478=((pp)*(r00));
IKReal x479=((0.190000000000000)*(sj1));
IKReal x480=((0.0361000000000000)*(sj1));
IKReal x481=((2.00000000000000)*(cj0));
IKReal x482=((r00)*(sj0));
IKReal x483=((1.00000000000000)*(r00));
IKReal x484=((cj1)*(r00));
IKReal x485=((cj1)*(r02));
IKReal x486=((cj0)*(r00));
IKReal x487=((cj0)*(sj1));
IKReal x488=((0.380000000000000)*(px));
IKReal x489=((cj1)*(pz));
IKReal x490=((1.00000000000000)*(pp));
IKReal x491=((cj0)*(r02));
IKReal x492=((py)*(r01));
IKReal x493=((1.00000000000000)*(r02)*(sj1));
IKReal x494=((r00)*(x462));
IKReal x495=((2.00000000000000)*(x492));
IKReal x496=((2.00000000000000)*(x461));
IKReal x497=((2.00000000000000)*(x463));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(x477)))+(((cj0)*(py))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(r00)*(x477)))+(x474));
evalcond[3]=((0.0577500000000000)+(((-1.00000000000000)*(x490)))+(((sj0)*(sj1)*(x475)))+(((-1.00000000000000)*(cj1)*(x471)))+(x460)+(((x487)*(x488))));
evalcond[4]=((((-1.00000000000000)*(x485)))+(((cj0)*(x467)))+(((sj1)*(x464))));
evalcond[5]=((((-1.00000000000000)*(x493)))+(((-1.00000000000000)*(x470)*(x483)))+(((-1.00000000000000)*(cj1)*(x464))));
evalcond[6]=((((-1.00000000000000)*(x472)))+(((-1.00000000000000)*(x492)))+(((-1.00000000000000)*(px)*(x483)))+(((x464)*(x479)))+(((0.190000000000000)*(cj0)*(x467)))+(((-1.00000000000000)*(r02)*(x466))));
evalcond[7]=((((-1.00000000000000)*(cj0)*(pz)*(x483)))+(((-1.00000000000000)*(x466)*(x486)))+(((-1.00000000000000)*(x464)*(x466)))+(((-1.00000000000000)*(pz)*(x464)))+(((px)*(x491)))+(((sj0)*(x469)))+(((-1.00000000000000)*(r02)*(x479))));
evalcond[8]=((0.0938500000000000)+(((-0.0361000000000000)*(x482)))+(((pp)*(x474)))+(((sj0)*(x465)*(x472)))+(((-1.00000000000000)*(x477)*(x478)))+(((x473)*(x494)))+(((-1.00000000000000)*(py)*(x465)*(x486)))+(((py)*(x464)*(x465)))+(((r01)*(x470)*(x471)))+(((-1.00000000000000)*(pz)*(x469)*(x481)))+(((-0.380000000000000)*(x469)*(x470)))+(((x467)*(x475)))+(x460)+(((-1.00000000000000)*(x474)*(x496)))+(((sj0)*(x485)*(x488)))+(((-1.00000000000000)*(r01)*(sj1)*(x488)))+(((r01)*(x468)))+(((-1.00000000000000)*(cj1)*(x471)*(x482))));
evalcond[9]=((((-1.00000000000000)*(py)*(sj1)*(x465)*(x474)))+(((-1.00000000000000)*(x465)*(x472)*(x487)))+(((x489)*(x495)))+(((-1.00000000000000)*(x464)*(x480)))+(((-1.00000000000000)*(py)*(sj0)*(x465)*(x467)))+(((r02)*(x471)))+(((pp)*(sj1)*(x464)))+(((r00)*(x488)))+(((-1.00000000000000)*(x462)*(x467)*(x481)))+(((0.0361000000000000)*(x485)))+(((-1.00000000000000)*(x485)*(x490)))+(((x485)*(x497)))+(((-1.00000000000000)*(sj1)*(x464)*(x496)))+(((-1.00000000000000)*(x467)*(x468)))+(((pz)*(x465)*(x484)))+(((-1.00000000000000)*(x469)*(x473)*(x476)))+(((cj0)*(pp)*(x467)))+(((r01)*(x475))));
evalcond[10]=((((x488)*(x491)))+(((0.380000000000000)*(sj0)*(x469)))+(((x476)*(x495)))+(((-1.00000000000000)*(cj1)*(x464)*(x490)))+(((cj1)*(py)*(x465)*(x482)))+(((x465)*(x470)*(x472)))+(((pz)*(x465)*(x467)))+(((2.00000000000000)*(x470)*(x494)))+(((-1.00000000000000)*(x464)*(x471)))+(((-1.00000000000000)*(x470)*(x478)))+(((-0.0361000000000000)*(cj1)*(x464)))+(((-1.00000000000000)*(x468)*(x484)))+(((x469)*(x473)*(x489)))+(((-1.00000000000000)*(x471)*(x486)))+(((r02)*(sj1)*(x497)))+(((-1.00000000000000)*(r02)*(sj1)*(x490)))+(((cj1)*(x464)*(x496)))+(((x465)*(x470)*(x492)))+(((-1.00000000000000)*(r02)*(x480))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.92805755395683)*(cj3)))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.85740903679934)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IKReal x498=((139000.000000000)*(cj1));
IKReal x499=((py)*(sj0));
IKReal x500=((cj0)*(px));
IKReal x501=((273000.000000000)*(cj3));
IKReal x502=((139000.000000000)*(sj1));
IKReal x503=((273000.000000000)*(cj1)*(sj3));
IKReal x504=((273000.000000000)*(sj1)*(sj3));
if( IKabs(((gconst2)*(((((-1.00000000000000)*(cj1)*(x499)*(x501)))+(((-1.00000000000000)*(x499)*(x504)))+(((-1.00000000000000)*(pz)*(x502)))+(((-1.00000000000000)*(x498)*(x499)))+(((-1.00000000000000)*(cj1)*(x500)*(x501)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(pz)*(sj1)*(x501)))+(((-1.00000000000000)*(x498)*(x500)))+(((pz)*(x503)))+(((-1.00000000000000)*(x500)*(x504))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((26410.0000000000)+(((pz)*(x498)))+(((x500)*(x503)))+(((-1.00000000000000)*(x499)*(x502)))+(((-1.00000000000000)*(sj1)*(x500)*(x501)))+(((51870.0000000000)*(cj3)))+(((cj1)*(pz)*(x501)))+(((x499)*(x503)))+(((pz)*(x504)))+(((-1.00000000000000)*(sj1)*(x499)*(x501)))+(((-1.00000000000000)*(x500)*(x502))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((-1.00000000000000)*(cj1)*(x499)*(x501)))+(((-1.00000000000000)*(x499)*(x504)))+(((-1.00000000000000)*(pz)*(x502)))+(((-1.00000000000000)*(x498)*(x499)))+(((-1.00000000000000)*(cj1)*(x500)*(x501)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(pz)*(sj1)*(x501)))+(((-1.00000000000000)*(x498)*(x500)))+(((pz)*(x503)))+(((-1.00000000000000)*(x500)*(x504)))))), ((gconst2)*(((26410.0000000000)+(((pz)*(x498)))+(((x500)*(x503)))+(((-1.00000000000000)*(x499)*(x502)))+(((-1.00000000000000)*(sj1)*(x500)*(x501)))+(((51870.0000000000)*(cj3)))+(((cj1)*(pz)*(x501)))+(((x499)*(x503)))+(((pz)*(x504)))+(((-1.00000000000000)*(sj1)*(x499)*(x501)))+(((-1.00000000000000)*(x500)*(x502)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x505=IKcos(j2);
IKReal x506=IKsin(j2);
IKReal x507=((px)*(sj1));
IKReal x508=((0.273000000000000)*(cj3));
IKReal x509=((py)*(sj1));
IKReal x510=((1.00000000000000)*(r00));
IKReal x511=((cj1)*(sj0));
IKReal x512=((1.00000000000000)*(px));
IKReal x513=((1.00000000000000)*(pz));
IKReal x514=((cj0)*(r01));
IKReal x515=((pz)*(sj1));
IKReal x516=((0.273000000000000)*(sj3));
IKReal x517=((cj0)*(cj1));
IKReal x518=((0.139000000000000)*(x506));
IKReal x519=((0.139000000000000)*(x505));
IKReal x520=((x506)*(x508));
IKReal x521=((x505)*(x516));
IKReal x522=((x506)*(x516));
IKReal x523=((x505)*(x508));
IKReal x524=((x520)+(x518));
IKReal x525=((x522)+(x523)+(x519));
evalcond[0]=((-0.190000000000000)+(((-1.00000000000000)*(cj1)*(x513)))+(((sj0)*(x509)))+(((-1.00000000000000)*(x525)))+(((cj0)*(x507))));
evalcond[1]=((((-1.00000000000000)*(py)*(x511)))+(((-1.00000000000000)*(x521)))+(((-1.00000000000000)*(sj1)*(x513)))+(((-1.00000000000000)*(x512)*(x517)))+(x524));
evalcond[2]=((((-1.00000000000000)*(sj0)*(x510)*(x515)))+(((x514)*(x515)))+(((-1.00000000000000)*(x521)))+(((-1.00000000000000)*(cj1)*(py)*(x510)))+(x524)+(((r02)*(sj0)*(x507)))+(((-1.00000000000000)*(cj0)*(r02)*(x509)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((-0.190000000000000)*(x514)))+(((-1.00000000000000)*(cj1)*(x513)*(x514)))+(((-1.00000000000000)*(r02)*(x511)*(x512)))+(((py)*(r02)*(x517)))+(((r01)*(x507)))+(x525)+(((0.190000000000000)*(r00)*(sj0)))+(((-1.00000000000000)*(x509)*(x510)))+(((pz)*(r00)*(x511))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
IKReal x526=((0.0758940000000000)*(cj3));
IKReal x527=(py)*(py);
IKReal x528=(px)*(px);
IKReal x529=(pz)*(pz);
IKReal x530=((r01)*(sj0));
IKReal x531=((2.00000000000000)*(px));
IKReal x532=((0.190000000000000)*(cj1));
IKReal x533=((r00)*(sj1));
IKReal x534=((0.0361000000000000)*(cj0));
IKReal x535=((py)*(r02));
IKReal x536=((cj0)*(cj1));
IKReal x537=((0.380000000000000)*(pz));
IKReal x538=((pz)*(r02));
IKReal x539=((2.00000000000000)*(sj0));
IKReal x540=((cj0)*(r01));
IKReal x541=((0.380000000000000)*(py));
IKReal x542=((pz)*(sj1));
IKReal x543=((1.00000000000000)*(sj0));
IKReal x544=((pp)*(r00));
IKReal x545=((0.190000000000000)*(sj1));
IKReal x546=((0.0361000000000000)*(sj1));
IKReal x547=((2.00000000000000)*(cj0));
IKReal x548=((r00)*(sj0));
IKReal x549=((1.00000000000000)*(r00));
IKReal x550=((cj1)*(r00));
IKReal x551=((cj1)*(r02));
IKReal x552=((cj0)*(r00));
IKReal x553=((cj0)*(sj1));
IKReal x554=((0.380000000000000)*(px));
IKReal x555=((cj1)*(pz));
IKReal x556=((1.00000000000000)*(pp));
IKReal x557=((cj0)*(r02));
IKReal x558=((py)*(r01));
IKReal x559=((1.00000000000000)*(r02)*(sj1));
IKReal x560=((r00)*(x528));
IKReal x561=((2.00000000000000)*(x558));
IKReal x562=((2.00000000000000)*(x527));
IKReal x563=((2.00000000000000)*(x529));
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j4)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(px)*(x543)))+(((cj0)*(py))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(x543)))+(x540));
evalcond[3]=((0.0577500000000000)+(((-1.00000000000000)*(cj1)*(x537)))+(((-1.00000000000000)*(x556)))+(x526)+(((x553)*(x554)))+(((sj0)*(sj1)*(x541))));
evalcond[4]=((((-1.00000000000000)*(x551)))+(((cj0)*(x533)))+(((sj1)*(x530))));
evalcond[5]=((((-1.00000000000000)*(x559)))+(((-1.00000000000000)*(cj1)*(x530)))+(((-1.00000000000000)*(x536)*(x549))));
evalcond[6]=((((-1.00000000000000)*(x558)))+(((-1.00000000000000)*(x538)))+(((-1.00000000000000)*(r02)*(x532)))+(((-1.00000000000000)*(px)*(x549)))+(((0.190000000000000)*(cj0)*(x533)))+(((x530)*(x545))));
evalcond[7]=((((sj0)*(x535)))+(((-1.00000000000000)*(x532)*(x552)))+(((-1.00000000000000)*(x530)*(x532)))+(((-1.00000000000000)*(pz)*(x530)))+(((px)*(x557)))+(((-1.00000000000000)*(r02)*(x545)))+(((-1.00000000000000)*(cj0)*(pz)*(x549))));
evalcond[8]=((-0.0938500000000000)+(((-1.00000000000000)*(py)*(x531)*(x552)))+(((pp)*(x540)))+(((-1.00000000000000)*(r01)*(sj1)*(x554)))+(((x539)*(x560)))+(((-1.00000000000000)*(pz)*(x535)*(x547)))+(((-1.00000000000000)*(cj1)*(x537)*(x548)))+(((-1.00000000000000)*(x526)))+(((sj0)*(x551)*(x554)))+(((x533)*(x541)))+(((r01)*(x536)*(x537)))+(((-0.380000000000000)*(x535)*(x536)))+(((py)*(x530)*(x531)))+(((-0.0361000000000000)*(x548)))+(((-1.00000000000000)*(x540)*(x562)))+(((-1.00000000000000)*(x543)*(x544)))+(((r01)*(x534)))+(((sj0)*(x531)*(x538))));
evalcond[9]=((((r02)*(x537)))+(((pp)*(sj1)*(x530)))+(((x551)*(x563)))+(((-1.00000000000000)*(x533)*(x534)))+(((-1.00000000000000)*(x530)*(x546)))+(((-1.00000000000000)*(x528)*(x533)*(x547)))+(((-1.00000000000000)*(py)*(sj0)*(x531)*(x533)))+(((-1.00000000000000)*(x535)*(x539)*(x542)))+(((-1.00000000000000)*(sj1)*(x530)*(x562)))+(((-1.00000000000000)*(x551)*(x556)))+(((0.0361000000000000)*(x551)))+(((pz)*(x531)*(x550)))+(((r00)*(x554)))+(((-1.00000000000000)*(x531)*(x538)*(x553)))+(((x555)*(x561)))+(((-1.00000000000000)*(py)*(sj1)*(x531)*(x540)))+(((cj0)*(pp)*(x533)))+(((r01)*(x541))));
evalcond[10]=((((-1.00000000000000)*(x536)*(x544)))+(((-0.0361000000000000)*(cj1)*(x530)))+(((-1.00000000000000)*(x530)*(x537)))+(((x535)*(x539)*(x555)))+(((cj1)*(x530)*(x562)))+(((-1.00000000000000)*(x534)*(x550)))+(((x554)*(x557)))+(((x542)*(x561)))+(((-1.00000000000000)*(r02)*(x546)))+(((0.380000000000000)*(sj0)*(x535)))+(((2.00000000000000)*(x536)*(x560)))+(((x531)*(x536)*(x558)))+(((-1.00000000000000)*(r02)*(sj1)*(x556)))+(((x531)*(x536)*(x538)))+(((r02)*(sj1)*(x563)))+(((cj1)*(py)*(x531)*(x548)))+(((-1.00000000000000)*(cj1)*(x530)*(x556)))+(((pz)*(x531)*(x533)))+(((-1.00000000000000)*(x537)*(x552))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((-19321.0000000000)+(((-74529.0000000000)*((cj3)*(cj3))))+(((-74529.0000000000)*((sj3)*(sj3))))+(((-75894.0000000000)*(cj3)))));
dummyeval[0]=((-1.00000000000000)+(((-3.92805755395683)*(cj3)))+(((-3.85740903679934)*((sj3)*(sj3))))+(((-3.85740903679934)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IKReal x564=((139000.000000000)*(cj1));
IKReal x565=((py)*(sj0));
IKReal x566=((cj0)*(px));
IKReal x567=((273000.000000000)*(cj3));
IKReal x568=((139000.000000000)*(sj1));
IKReal x569=((273000.000000000)*(cj1)*(sj3));
IKReal x570=((273000.000000000)*(sj1)*(sj3));
if( IKabs(((gconst3)*(((((-1.00000000000000)*(x564)*(x565)))+(((-1.00000000000000)*(x564)*(x566)))+(((-1.00000000000000)*(x566)*(x570)))+(((-1.00000000000000)*(pz)*(sj1)*(x567)))+(((-1.00000000000000)*(pz)*(x568)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(cj1)*(x565)*(x567)))+(((-1.00000000000000)*(x565)*(x570)))+(((-1.00000000000000)*(cj1)*(x566)*(x567)))+(((pz)*(x569))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((26410.0000000000)+(((x566)*(x569)))+(((x565)*(x569)))+(((-1.00000000000000)*(x566)*(x568)))+(((cj1)*(pz)*(x567)))+(((pz)*(x570)))+(((51870.0000000000)*(cj3)))+(((-1.00000000000000)*(sj1)*(x565)*(x567)))+(((pz)*(x564)))+(((-1.00000000000000)*(sj1)*(x566)*(x567)))+(((-1.00000000000000)*(x565)*(x568))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((-1.00000000000000)*(x564)*(x565)))+(((-1.00000000000000)*(x564)*(x566)))+(((-1.00000000000000)*(x566)*(x570)))+(((-1.00000000000000)*(pz)*(sj1)*(x567)))+(((-1.00000000000000)*(pz)*(x568)))+(((51870.0000000000)*(sj3)))+(((-1.00000000000000)*(cj1)*(x565)*(x567)))+(((-1.00000000000000)*(x565)*(x570)))+(((-1.00000000000000)*(cj1)*(x566)*(x567)))+(((pz)*(x569)))))), ((gconst3)*(((26410.0000000000)+(((x566)*(x569)))+(((x565)*(x569)))+(((-1.00000000000000)*(x566)*(x568)))+(((cj1)*(pz)*(x567)))+(((pz)*(x570)))+(((51870.0000000000)*(cj3)))+(((-1.00000000000000)*(sj1)*(x565)*(x567)))+(((pz)*(x564)))+(((-1.00000000000000)*(sj1)*(x566)*(x567)))+(((-1.00000000000000)*(x565)*(x568)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[4];
IKReal x571=IKcos(j2);
IKReal x572=IKsin(j2);
IKReal x573=((px)*(sj1));
IKReal x574=((0.273000000000000)*(cj3));
IKReal x575=((py)*(sj1));
IKReal x576=((1.00000000000000)*(r00));
IKReal x577=((cj1)*(sj0));
IKReal x578=((1.00000000000000)*(px));
IKReal x579=((1.00000000000000)*(pz));
IKReal x580=((cj0)*(r01));
IKReal x581=((pz)*(sj1));
IKReal x582=((0.273000000000000)*(sj3));
IKReal x583=((cj0)*(cj1));
IKReal x584=((0.139000000000000)*(x572));
IKReal x585=((0.139000000000000)*(x571));
IKReal x586=((x571)*(x582));
IKReal x587=((x572)*(x574));
IKReal x588=((x572)*(x582));
IKReal x589=((x571)*(x574));
IKReal x590=((x584)+(x587));
IKReal x591=((x585)+(x588)+(x589));
evalcond[0]=((-0.190000000000000)+(((cj0)*(x573)))+(((-1.00000000000000)*(cj1)*(x579)))+(((-1.00000000000000)*(x591)))+(((sj0)*(x575))));
evalcond[1]=((((-1.00000000000000)*(x578)*(x583)))+(((-1.00000000000000)*(sj1)*(x579)))+(((-1.00000000000000)*(py)*(x577)))+(x590)+(((-1.00000000000000)*(x586))));
evalcond[2]=((((-1.00000000000000)*(sj0)*(x576)*(x581)))+(((-1.00000000000000)*(cj0)*(r02)*(x575)))+(((x580)*(x581)))+(((r02)*(sj0)*(x573)))+(((-1.00000000000000)*(cj1)*(py)*(x576)))+(((-1.00000000000000)*(x590)))+(x586)+(((cj1)*(px)*(r01))));
evalcond[3]=((((py)*(r02)*(x583)))+(((r01)*(x573)))+(((-1.00000000000000)*(r02)*(x577)*(x578)))+(((-1.00000000000000)*(x591)))+(((-1.00000000000000)*(x575)*(x576)))+(((0.190000000000000)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(x579)*(x580)))+(((-0.190000000000000)*(x580)))+(((pz)*(r00)*(x577))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IKReal x592=((1.00000000000000)*(sj1));
IKReal x593=((cj1)*(sj3));
IKReal x594=((cj0)*(r00));
IKReal x595=((cj3)*(r02));
IKReal x596=((r01)*(sj0));
IKReal x597=((sj1)*(sj3));
IKReal x598=((cj3)*(x596));
if( IKabs(((gconst1)*(((((-1.00000000000000)*(cj3)*(x592)*(x594)))+(((cj1)*(x595)))+(((-1.00000000000000)*(x592)*(x598)))+(((r02)*(x597)))+(((x593)*(x596)))+(((x593)*(x594))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x594)*(x597)))+(((cj1)*(x598)))+(((cj1)*(cj3)*(x594)))+(((x596)*(x597)))+(((-1.00000000000000)*(r02)*(x593)))+(((sj1)*(x595))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((-1.00000000000000)*(cj3)*(x592)*(x594)))+(((cj1)*(x595)))+(((-1.00000000000000)*(x592)*(x598)))+(((r02)*(x597)))+(((x593)*(x596)))+(((x593)*(x594)))))), ((gconst1)*(((((x594)*(x597)))+(((cj1)*(x598)))+(((cj1)*(cj3)*(x594)))+(((x596)*(x597)))+(((-1.00000000000000)*(r02)*(x593)))+(((sj1)*(x595)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[8];
IKReal x599=IKcos(j2);
IKReal x600=IKsin(j2);
IKReal x601=(pz)*(pz);
IKReal x602=(py)*(py);
IKReal x603=(px)*(px);
IKReal x604=((px)*(sj1));
IKReal x605=((sj0)*(sj1));
IKReal x606=((0.0552080000000000)*(sj3));
IKReal x607=((pp)*(r01));
IKReal x608=((cj1)*(sj0));
IKReal x609=((pz)*(r01));
IKReal x610=((0.380000000000000)*(sj0));
IKReal x611=((1.00000000000000)*(sj1));
IKReal x612=((py)*(r00));
IKReal x613=((pz)*(r02));
IKReal x614=((2.00000000000000)*(cj0));
IKReal x615=((2.00000000000000)*(py));
IKReal x616=((pz)*(r00));
IKReal x617=((pp)*(r02));
IKReal x618=((1.00000000000000)*(cj1));
IKReal x619=((cj0)*(r00));
IKReal x620=((0.0361000000000000)*(cj1));
IKReal x621=((py)*(r02));
IKReal x622=((0.0361000000000000)*(r01));
IKReal x623=((0.0361000000000000)*(sj1));
IKReal x624=((py)*(r01));
IKReal x625=((2.00000000000000)*(px));
IKReal x626=((cj1)*(px));
IKReal x627=((0.0938500000000000)*(cj3));
IKReal x628=((0.380000000000000)*(cj0));
IKReal x629=((px)*(r02));
IKReal x630=((cj4)*(x600));
IKReal x631=((cj4)*(x599));
IKReal x632=((0.273000000000000)*(sj3)*(sj4));
IKReal x633=((0.139000000000000)*(x600));
IKReal x634=((0.139000000000000)*(x599));
IKReal x635=((r00)*(x603));
IKReal x636=((0.273000000000000)*(x599));
IKReal x637=((0.273000000000000)*(cj3)*(x600));
IKReal x638=((x613)*(x615));
IKReal x639=((2.00000000000000)*(r01)*(x602));
IKReal x640=((2.00000000000000)*(r02)*(x601));
evalcond[0]=((((cj3)*(x630)))+(((sj1)*(x619)))+(((-1.00000000000000)*(sj3)*(x631)))+(((r01)*(x605)))+(((-1.00000000000000)*(r02)*(x618))));
evalcond[1]=((((cj3)*(x631)))+(((-1.00000000000000)*(x618)*(x619)))+(((sj3)*(x630)))+(((-1.00000000000000)*(r02)*(x611)))+(((-1.00000000000000)*(r01)*(x608))));
evalcond[2]=((-0.190000000000000)+(((-1.00000000000000)*(x634)))+(((-0.273000000000000)*(sj3)*(x600)))+(((-1.00000000000000)*(pz)*(x618)))+(((py)*(x605)))+(((cj0)*(x604)))+(((-1.00000000000000)*(cj3)*(x636))));
evalcond[3]=((((-1.00000000000000)*(py)*(x608)))+(((-1.00000000000000)*(cj0)*(px)*(x618)))+(((-1.00000000000000)*(pz)*(x611)))+(x637)+(x633)+(((-1.00000000000000)*(sj3)*(x636))));
evalcond[4]=((((-1.00000000000000)*(x612)*(x618)))+(((-1.00000000000000)*(x605)*(x616)))+(((sj4)*(x633)))+(((sj4)*(x637)))+(((-1.00000000000000)*(cj0)*(x611)*(x621)))+(((r01)*(x626)))+(((cj0)*(sj1)*(x609)))+(((-1.00000000000000)*(x599)*(x632)))+(((r02)*(sj0)*(x604))));
evalcond[5]=((((sj4)*(x634)))+(((x608)*(x616)))+(((-1.00000000000000)*(x611)*(x612)))+(((cj3)*(sj4)*(x636)))+(((cj0)*(cj1)*(x621)))+(((-0.190000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(x608)*(x629)))+(((0.190000000000000)*(r00)*(sj0)))+(((x600)*(x632)))+(((-1.00000000000000)*(cj0)*(x609)*(x618)))+(((r01)*(x604))));
evalcond[6]=((((x605)*(x607)))+(((r02)*(x620)))+(((-1.00000000000000)*(x605)*(x622)))+(((-1.00000000000000)*(x605)*(x639)))+(((-1.00000000000000)*(x605)*(x638)))+(((pp)*(sj1)*(x619)))+(((cj1)*(x616)*(x625)))+(((0.380000000000000)*(x624)))+(((0.0758940000000000)*(x630)))+(((-1.00000000000000)*(x604)*(x614)*(x624)))+(((cj1)*(x640)))+(((-1.00000000000000)*(x606)*(x631)))+(((0.380000000000000)*(px)*(r00)))+(((-1.00000000000000)*(x604)*(x613)*(x614)))+(((-1.00000000000000)*(x617)*(x618)))+(((cj1)*(x609)*(x615)))+(((0.380000000000000)*(x613)))+(((-1.00000000000000)*(x619)*(x623)))+(((-1.00000000000000)*(sj1)*(x614)*(x635)))+(((x627)*(x630)))+(((-2.00000000000000)*(sj0)*(x604)*(x612))));
evalcond[7]=((((-1.00000000000000)*(x607)*(x608)))+(((-1.00000000000000)*(x609)*(x610)))+(((-1.00000000000000)*(x611)*(x617)))+(((x628)*(x629)))+(((sj1)*(x640)))+(((-1.00000000000000)*(r02)*(x623)))+(((x614)*(x624)*(x626)))+(((0.0758940000000000)*(x631)))+(((x613)*(x614)*(x626)))+(((cj1)*(x614)*(x635)))+(((x608)*(x612)*(x625)))+(((x608)*(x638)))+(((x608)*(x639)))+(((-1.00000000000000)*(x619)*(x620)))+(((x610)*(x621)))+(((-1.00000000000000)*(pp)*(x618)*(x619)))+(((-1.00000000000000)*(x616)*(x628)))+(((x627)*(x631)))+(((sj1)*(x609)*(x615)))+(((x606)*(x630)))+(((2.00000000000000)*(x604)*(x616)))+(((-1.00000000000000)*(x608)*(x622))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(5);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return vsolutions.size()>0;
}
static inline void polyroots4(IKReal rawcoeffs[4+1], IKReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    const IKReal tolsqrt = sqrt(std::numeric_limits<IKReal>::epsilon());
    complex<IKReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IKReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IKReal> roots[4];
    IKReal err[4];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IKReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IKReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* getIKFastVersion() { return "59"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "ikbase.h"
namespace IKFAST_NAMESPACE {
#ifdef RAVE_REGISTER_BOOST
#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()
BOOST_TYPEOF_REGISTER_TYPE(IKSolution)
#endif
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, const std::vector<dReal>& vfreeinc) {
    std::vector<int> vfree(getNumFreeParameters());
    for(size_t i = 0; i < vfree.size(); ++i) {
        vfree[i] = getFreeParameters()[i];
    }
    return IkSolverBasePtr(new IkFastSolver<IKReal,IKSolution>(ik,vfree,vfreeinc,getNumJoints(),static_cast<IkParameterizationType>(getIKType()), boost::shared_ptr<void>(), getKinematicsHash(), penv));
}
} // end namespace
