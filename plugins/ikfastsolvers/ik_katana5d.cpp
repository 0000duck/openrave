#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 66 generated on 2013-07-25 00:08:02.077404
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==66);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.139)*x3);
x11=((0.273)*x0);
x12=((0.273)*x6);
x13=((1.0)*x5);
x14=((1.0)*x7);
x15=((0.19)*x1);
x16=(x0*x2);
x17=(x1*x3);
x18=(x2*x4);
x19=(x1*x4);
x20=(x2*x3);
eetrans[0]=((((0.139)*x0*x19))+((x0*x15))+((x7*((((x11*x20))+((x11*x19))))))+((x5*(((((-1.0)*x11*x18))+((x11*x17))))))+((x10*x16)));
IkReal x21=((1.0)*x6);
IkReal x22=((1.0)*x12);
eetrans[1]=(((x5*(((((-1.0)*x17*x22))+((x12*x18))))))+(((-0.139)*x19*x6))+(((-1.0)*x10*x2*x21))+((x7*(((((-1.0)*x19*x22))+(((-1.0)*x20*x22))))))+(((-1.0)*x15*x21)));
eetrans[2]=((0.2015)+((x7*(((((-0.273)*x17))+(((0.273)*x18))))))+(((-1.0)*x1*x10))+(((0.19)*x2))+(((0.139)*x18))+((x5*(((((0.273)*x20))+(((0.273)*x19)))))));
eerot[0]=(((x9*((((x7*(((((-1.0)*x0*x17))+((x16*x4))))))+((x5*((((x0*x19))+((x16*x3))))))))))+((x6*x8)));
eerot[1]=(((x0*x8))+(((-1.0)*x9*((((x14*((((x18*x6))+(((-1.0)*x17*x6))))))+((x13*((((x19*x6))+((x20*x6)))))))))));
eerot[2]=((-1.0)*x9*((((x13*(((((-1.0)*x18))+x17))))+((x14*((x19+x20)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((-1.0)*r01);
new_py=((-1.0)*py);
new_r02=((-1.0)*r02);
new_pz=((0.2015)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x24 = IKatan2WithCheck(((-1.0)*py),px,IKFAST_ATAN2_MAGTHRESH);
if(!x24.valid){
continue;
}
IkReal x23=x24.value;
j0array[0]=((-1.0)*x23);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x23)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x25=r00*r00;
IkReal x26=py*py;
IkReal x27=pz*pz;
IkReal x28=r01*r01;
IkReal x29=pz*pz*pz;
IkReal x30=px*px;
IkReal x31=r02*r02;
IkReal x32=(py*sj0);
IkReal x33=((9.63538693604066)*pp);
IkReal x34=(px*r00);
IkReal x35=((3.66144703569545)*r02);
IkReal x36=(r01*sj0);
IkReal x37=((19.2707738720813)*r02);
IkReal x38=(cj0*px);
IkReal x39=((3.66144703569545)*pz);
IkReal x40=(cj0*r00);
IkReal x41=((0.272883986123346)*r02);
IkReal x42=(pp*pz);
IkReal x43=(py*r01);
IkReal x44=((0.556443595556348)*x31);
IkReal x45=((19.2707738720813)*x28);
IkReal x46=((1.43623150591235)*pz*r02);
IkReal x47=((19.2707738720813)*x25);
IkReal x48=((19.2707738720813)*x27);
IkReal x49=(x36*x41);
IkReal x50=(x40*x41);
IkReal x51=(x40*x43);
IkReal x52=((0.879787910356)*x28*x32);
IkReal x53=(x40*x46);
IkReal x54=(x36*x46);
IkReal x55=((0.879787910356)*x25*x38);
IkReal x56=((0.879787910356)*x34*x36);
IkReal x57=((0.879787910356)*x51);
IkReal x58=(x38*x44);
IkReal x59=(pp*x35*x36);
IkReal x60=(pp*x35*x40);
IkReal x61=(x32*x44);
IkReal x62=(x27*x35*x40);
IkReal x63=(x25*x38*x39);
IkReal x64=(x38*x47*(px*px));
IkReal x65=(x35*x38*x43);
IkReal x66=(x31*x38*x39);
IkReal x67=(x30*x35*x40);
IkReal x68=(x34*x36*x39);
IkReal x69=(x32*x34*x35);
IkReal x70=(x27*x35*x36);
IkReal x71=(x39*x51);
IkReal x72=(x31*x32*x33);
IkReal x73=(x29*x36*x37);
IkReal x74=(x29*x37*x40);
IkReal x75=(x31*x32*x39);
IkReal x76=(x32*x45*(py*py));
IkReal x77=(x26*x35*x36);
IkReal x78=(x31*x33*x38);
IkReal x79=(x28*x32*x39);
IkReal x80=(x36*x37*x42);
IkReal x81=(x28*x32*x33);
IkReal x82=(x37*x40*x42);
IkReal x83=(x33*x51);
IkReal x84=(x25*x33*x38);
IkReal x85=(x33*x34*x36);
IkReal x86=(x27*x38*x47);
IkReal x87=(pz*x26*x36*x37);
IkReal x88=((38.5415477441626)*x26*x34*x36);
IkReal x89=(pz*x32*x34*x37);
IkReal x90=(x30*x32*x47);
IkReal x91=(x34*x36*x48);
IkReal x92=(x27*x32*x45);
IkReal x93=((38.5415477441626)*x30*x51);
IkReal x94=(x48*x51);
IkReal x95=(pz*x37*x38*x43);
IkReal x96=(pz*x30*x37*x40);
IkReal x97=(x26*x38*x45);
IkReal x98=(x59+x60);
IkReal x99=(x58+x61+x82+x83+x80+x81+x84+x85);
IkReal x100=(x77+x75+x71+x70+x79+x49+x50+x62+x63+x65+x66+x67+x68+x69);
IkReal x101=(x76+x74+x73+x72+x78+x55+x54+x57+x56+x53+x52+x64+x88+x89+x86+x87+x91+x90+x93+x92+x95+x94+x97+x96);
op[0]=((((9.63538693604066)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-50.7125628212666)*py*r01*r02*(pz*pz*pz)))+(((0.484507825194381)*cj0*pp*r00*r01*sj0))+(((9.63538693604066)*r00*r02*(cj0*cj0)*(px*px*px)))+(((25.3562814106333)*cj0*pp*py*pz*r00*r02*sj0))+(((0.366398266383651)*cj0*px*pz*r01*r02*sj0))+(((9.63538693604066)*(pz*pz*pz)*(r02*r02)))+(((-50.7125628212666)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((25.3562814106333)*pp*(cj0*cj0)*(px*px)*(r00*r00)))+(((-1.83072351784773)*px*py*r00*r01))+(((-6.33907035265833)*(pp*pp)*(r02*r02)))+(((-0.850906091578033)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.484507825194381)*px*py*r00*r01*(sj0*sj0)))+(((-25.3562814106333)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-6.33907035265833)*(cj0*cj0)*(pp*pp)*(r00*r00)))+(((-9.63538693604066)*px*py*pz*r00*r01*(sj0*sj0)))+(((-25.3562814106333)*(py*py)*(pz*pz)*(r01*r01)))+(((9.63538693604066)*cj0*pp*pz*r00*r01*sj0))+(((-9.63538693604066)*px*py*pz*r00*r01*(cj0*cj0)))+(((-9.63538693604066)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-9.63538693604066)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.366398266383651)*px*pz*r00*r02*(cj0*cj0)))+(((-9.63538693604066)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-9.63538693604066)*cj0*pz*r00*r01*sj0*(py*py)))+(((-101.425125642533)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-25.3562814106333)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-9.63538693604066)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-25.3562814106333)*(pz*pz*pz*pz)*(r02*r02)))+(((25.3562814106333)*pp*px*py*r00*r01*(sj0*sj0)))+(((0.366398266383651)*py*pz*r01*r02*(sj0*sj0)))+(((-9.63538693604066)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.484507825194381)*(py*py)*(r01*r01)*(sj0*sj0)))+(((25.3562814106333)*cj0*pp*r00*r01*sj0*(py*py)))+(((-4.81769346802033)*pp*px*r00*r02*(cj0*cj0)))+(((25.3562814106333)*cj0*pp*px*pz*r01*r02*sj0))+(((0.439893955178)*pz*(r02*r02)))+(((-6.33907035265833)*(pp*pp)*(r01*r01)*(sj0*sj0)))+(((-9.63538693604066)*cj0*pz*r00*r01*sj0*(px*px)))+(((4.81769346802033)*pp*pz*(cj0*cj0)*(r00*r00)))+(((-0.425453045789016)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-25.3562814106333)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-101.425125642533)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((25.3562814106333)*pp*py*pz*r01*r02*(sj0*sj0)))+(((25.3562814106333)*cj0*pp*px*py*sj0*(r00*r00)))+(((-4.81769346802033)*pp*pz*(r02*r02)))+(((-0.278221797778174)*pz*(r01*r01)*(sj0*sj0)))+(((0.278221797778174)*py*r01*r02*(sj0*sj0)))+(((-50.7125628212666)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-0.556443595556348)*cj0*pz*r00*r01*sj0))+(((25.3562814106333)*pp*(pz*pz)*(r02*r02)))+(((-0.850906091578033)*cj0*px*py*sj0*(r02*r02)))+(((-0.425453045789016)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-50.7125628212666)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-9.63538693604066)*cj0*px*py*pz*sj0*(r00*r00)))+(((-0.278221797778174)*pz*(cj0*cj0)*(r00*r00)))+(((25.3562814106333)*pp*px*py*r00*r01*(cj0*cj0)))+(((-0.0528497858676222)*(r02*r02)))+(((-12.6781407053167)*cj0*r00*r01*sj0*(pp*pp)))+(((-50.7125628212666)*px*py*r00*r01*(pz*pz)))+(((9.63538693604066)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.484507825194381)*cj0*r00*r01*sj0*(py*py)))+(((9.63538693604066)*pz*(py*py)*(r01*r01)))+(((0.439893955178)*px*r00*r02))+(((-3.23059310196597)*(pz*pz)*(r02*r02)))+(((-4.81769346802033)*cj0*pp*py*r00*r02*sj0))+(((-4.81769346802033)*pp*px*r00*r02))+(((-0.915361758923863)*(py*py)*(r01*r01)))+(((-25.3562814106333)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((1.15761567152105)*pp*(r02*r02)))+(((9.63538693604066)*py*r01*r02*(cj0*cj0)*(px*px)))+(((19.2707738720813)*cj0*py*r00*r02*sj0*(px*px)))+(((25.3562814106333)*pp*px*pz*r00*r02))+(((19.2707738720813)*px*py*pz*r00*r01))+(((19.2707738720813)*cj0*px*r01*r02*sj0*(py*py)))+(((25.3562814106333)*pp*px*pz*r00*r02*(cj0*cj0)))+(((4.81769346802033)*pp*pz*(r01*r01)*(sj0*sj0)))+(((0.0153712106632144)*(r01*r01)*(sj0*sj0)))+(((25.3562814106333)*cj0*pp*r00*r01*sj0*(px*px)))+(((-50.7125628212666)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.0153712106632144)*(cj0*cj0)*(r00*r00)))+(((0.242253912597191)*pp*(r01*r01)*(sj0*sj0)))+(((0.0307424213264288)*cj0*r00*r01*sj0))+(((-50.7125628212666)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((25.3562814106333)*pp*(py*py)*(r01*r01)*(sj0*sj0)))+(((25.3562814106333)*pp*py*pz*r01*r02))+(((-4.81769346802033)*pp*py*r01*r02))+(((0.366398266383651)*cj0*py*pz*r00*r02*sj0))+(((-9.63538693604066)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-4.14595486088983)*py*pz*r01*r02))+(((-25.3562814106333)*(px*px)*(pz*pz)*(r00*r00)))+(((0.278221797778174)*cj0*px*r01*r02*sj0))+(((-0.425453045789016)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-4.14595486088983)*px*pz*r00*r02))+(((-50.7125628212666)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-50.7125628212666)*px*r00*r02*(pz*pz*pz)))+(((9.63538693604066)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((19.2707738720813)*py*r01*r02*(pz*pz)))+(((-25.3562814106333)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-4.81769346802033)*pp*py*r01*r02*(sj0*sj0)))+(((-0.484507825194381)*px*py*r00*r01*(cj0*cj0)))+(((-101.425125642533)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-50.7125628212666)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-50.7125628212666)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((0.278221797778174)*cj0*py*r00*r02*sj0))+(((-4.81769346802033)*cj0*pp*px*r01*r02*sj0))+(((0.278221797778174)*px*r00*r02*(cj0*cj0)))+(((9.63538693604066)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((19.2707738720813)*cj0*px*py*pz*sj0*(r02*r02)))+(((-0.915361758923863)*(px*px)*(r00*r00)))+(((-0.484507825194381)*cj0*r00*r01*sj0*(px*px)))+(((-0.484507825194381)*cj0*px*py*sj0*(r00*r00)))+(((19.2707738720813)*px*r00*r02*(pz*pz)))+(((0.242253912597191)*pp*(cj0*cj0)*(r00*r00)))+(((-50.7125628212666)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-25.3562814106333)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-9.63538693604066)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.425453045789016)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((25.3562814106333)*cj0*pp*px*py*sj0*(r01*r01)))+(((-0.484507825194381)*cj0*px*py*sj0*(r01*r01)))+(((9.63538693604066)*pz*(px*px)*(r00*r00)))+(((0.439893955178)*py*r01*r02))+(((-0.484507825194381)*(cj0*cj0)*(px*px)*(r00*r00))));
op[1]=((((-1.0)*x100))+x101+x98+(((-1.0)*x99)));
op[2]=((((-8.29190972177966)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-50.7125628212666)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-50.7125628212666)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((50.7125628212666)*cj0*pp*px*py*sj0*(r00*r00)))+(((-6.5900975386236)*cj0*px*pz*r01*r02*sj0))+(((-1.83072351784773)*(py*py)*(r01*r01)))+(((-101.425125642533)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((8.29190972177966)*cj0*pp*r00*r01*sj0))+(((-50.7125628212666)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-101.425125642533)*py*r01*r02*(pz*pz*pz)))+(((-0.242141564796917)*(cj0*cj0)*(r00*r00)))+(((-12.6781407053167)*(pp*pp)*(r01*r01)*(sj0*sj0)))+(((-50.7125628212666)*(pz*pz*pz*pz)*(r02*r02)))+(((4.14595486088983)*pp*(cj0*cj0)*(r00*r00)))+(((4.14595486088983)*pp*(r01*r01)*(sj0*sj0)))+(((-0.850906091578033)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-202.850251285066)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-101.425125642533)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-0.969015650388763)*py*pz*r01*r02))+(((-202.850251285066)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-101.425125642533)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((50.7125628212666)*pp*(py*py)*(r01*r01)*(sj0*sj0)))+(((-101.425125642533)*px*py*r00*r01*(pz*pz)))+(((-101.425125642533)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-202.850251285066)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-3.66144703569545)*px*py*r00*r01))+(((-0.484283129593835)*cj0*r00*r01*sj0))+(((-50.7125628212666)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.242141564796917)*(r01*r01)*(sj0*sj0)))+(((50.7125628212666)*pp*px*pz*r00*r02*(cj0*cj0)))+(((-1.70181218315607)*cj0*px*py*sj0*(r02*r02)))+(((50.7125628212666)*cj0*pp*r00*r01*sj0*(py*py)))+(((50.7125628212666)*pp*px*py*r00*r01*(sj0*sj0)))+(((-0.850906091578033)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((50.7125628212666)*pp*py*pz*r01*r02))+(((-25.3562814106333)*cj0*r00*r01*sj0*(pp*pp)))+(((-50.7125628212666)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-8.29190972177966)*cj0*r00*r01*sj0*(py*py)))+(((50.7125628212666)*pp*(pz*pz)*(r02*r02)))+(((-8.29190972177966)*cj0*r00*r01*sj0*(px*px)))+(((0.167184414388102)*(r02*r02)))+(((-50.7125628212666)*(py*py)*(pz*pz)*(r01*r01)))+(((-101.425125642533)*px*r00*r02*(pz*pz*pz)))+(((-50.7125628212666)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-8.29190972177966)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-8.29190972177966)*px*py*r00*r01*(sj0*sj0)))+(((-1.34621569265334)*pp*(r02*r02)))+(((-1.83072351784773)*(px*px)*(r00*r00)))+(((-8.29190972177966)*cj0*px*py*sj0*(r01*r01)))+(((50.7125628212666)*cj0*pp*r00*r01*sj0*(px*px)))+(((50.7125628212666)*pp*px*py*r00*r01*(cj0*cj0)))+(((-6.5900975386236)*py*pz*r01*r02*(sj0*sj0)))+(((-50.7125628212666)*(px*px)*(pz*pz)*(r00*r00)))+(((-6.5900975386236)*px*pz*r00*r02*(cj0*cj0)))+(((-8.29190972177966)*cj0*px*py*sj0*(r00*r00)))+(((50.7125628212666)*pp*py*pz*r01*r02*(sj0*sj0)))+(((-0.969015650388763)*px*pz*r00*r02))+(((50.7125628212666)*pp*px*pz*r00*r02))+(((-101.425125642533)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-101.425125642533)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-8.29190972177966)*px*py*r00*r01*(cj0*cj0)))+(((-6.5900975386236)*cj0*py*pz*r00*r02*sj0))+(((-101.425125642533)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((50.7125628212666)*cj0*pp*px*pz*r01*r02*sj0))+(((-0.850906091578033)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-101.425125642533)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-0.850906091578033)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-12.6781407053167)*(pp*pp)*(r02*r02)))+(((0.861707867458962)*(pz*pz)*(r02*r02)))+(((50.7125628212666)*pp*(cj0*cj0)*(px*px)*(r00*r00)))+(((-1.70181218315607)*cj0*r00*r01*sj0*(pz*pz)))+(((-12.6781407053167)*(cj0*cj0)*(pp*pp)*(r00*r00)))+(((-101.425125642533)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((50.7125628212666)*cj0*pp*py*pz*r00*r02*sj0))+(((50.7125628212666)*cj0*pp*px*py*sj0*(r01*r01))));
op[3]=(x100+x101+(((-1.0)*x98))+(((-1.0)*x99)));
op[4]=((((-9.63538693604066)*pz*(px*px)*(r00*r00)))+(((-50.7125628212666)*py*r01*r02*(pz*pz*pz)))+(((0.484507825194381)*cj0*pp*r00*r01*sj0))+(((25.3562814106333)*cj0*pp*py*pz*r00*r02*sj0))+(((0.366398266383651)*cj0*px*pz*r01*r02*sj0))+(((-19.2707738720813)*cj0*py*r00*r02*sj0*(px*px)))+(((-50.7125628212666)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((25.3562814106333)*pp*(cj0*cj0)*(px*px)*(r00*r00)))+(((-1.83072351784773)*px*py*r00*r01))+(((-9.63538693604066)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-6.33907035265833)*(pp*pp)*(r02*r02)))+(((-0.850906091578033)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.484507825194381)*px*py*r00*r01*(sj0*sj0)))+(((-25.3562814106333)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((-6.33907035265833)*(cj0*cj0)*(pp*pp)*(r00*r00)))+(((-25.3562814106333)*(py*py)*(pz*pz)*(r01*r01)))+(((0.278221797778174)*pz*(r01*r01)*(sj0*sj0)))+(((-9.63538693604066)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-9.63538693604066)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.366398266383651)*px*pz*r00*r02*(cj0*cj0)))+(((-4.81769346802033)*pp*pz*(r01*r01)*(sj0*sj0)))+(((-101.425125642533)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-25.3562814106333)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-25.3562814106333)*(pz*pz*pz*pz)*(r02*r02)))+(((25.3562814106333)*pp*px*py*r00*r01*(sj0*sj0)))+(((0.366398266383651)*py*pz*r01*r02*(sj0*sj0)))+(((9.63538693604066)*cj0*py*r00*r02*sj0*(pz*pz)))+(((9.63538693604066)*cj0*px*py*pz*sj0*(r00*r00)))+(((-0.484507825194381)*(py*py)*(r01*r01)*(sj0*sj0)))+(((25.3562814106333)*cj0*pp*r00*r01*sj0*(py*py)))+(((-0.278221797778174)*cj0*px*r01*r02*sj0))+(((-0.439893955178)*pz*(r02*r02)))+(((25.3562814106333)*cj0*pp*px*pz*r01*r02*sj0))+(((9.63538693604066)*cj0*pz*r00*r01*sj0*(px*px)))+(((-6.33907035265833)*(pp*pp)*(r01*r01)*(sj0*sj0)))+(((-9.63538693604066)*(pz*pz*pz)*(r02*r02)))+(((-0.425453045789016)*(cj0*cj0)*(px*px)*(r02*r02)))+(((-19.2707738720813)*cj0*px*r01*r02*sj0*(py*py)))+(((-9.63538693604066)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-25.3562814106333)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-101.425125642533)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((25.3562814106333)*pp*py*pz*r01*r02*(sj0*sj0)))+(((25.3562814106333)*cj0*pp*px*py*sj0*(r00*r00)))+(((-19.2707738720813)*py*r01*r02*(pz*pz)))+(((-50.7125628212666)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((25.3562814106333)*pp*(pz*pz)*(r02*r02)))+(((-0.850906091578033)*cj0*px*py*sj0*(r02*r02)))+(((-0.425453045789016)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-9.63538693604066)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.278221797778174)*px*r00*r02*(cj0*cj0)))+(((4.81769346802033)*cj0*pp*px*r01*r02*sj0))+(((-19.2707738720813)*px*py*pz*r00*r01))+(((4.81769346802033)*pp*px*r00*r02*(cj0*cj0)))+(((-50.7125628212666)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((4.81769346802033)*cj0*pp*py*r00*r02*sj0))+(((25.3562814106333)*pp*px*py*r00*r01*(cj0*cj0)))+(((-0.0528497858676222)*(r02*r02)))+(((9.63538693604066)*cj0*px*py*pz*sj0*(r01*r01)))+(((-12.6781407053167)*cj0*r00*r01*sj0*(pp*pp)))+(((-50.7125628212666)*px*py*r00*r01*(pz*pz)))+(((9.63538693604066)*px*py*pz*r00*r01*(cj0*cj0)))+(((9.63538693604066)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.484507825194381)*cj0*r00*r01*sj0*(py*py)))+(((4.81769346802033)*pp*py*r01*r02))+(((-0.439893955178)*py*r01*r02))+(((-19.2707738720813)*cj0*px*py*pz*sj0*(r02*r02)))+(((-3.23059310196597)*(pz*pz)*(r02*r02)))+(((9.63538693604066)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-0.915361758923863)*(py*py)*(r01*r01)))+(((-25.3562814106333)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((-0.439893955178)*px*r00*r02))+(((1.15761567152105)*pp*(r02*r02)))+(((25.3562814106333)*pp*px*pz*r00*r02))+(((-9.63538693604066)*pz*(py*py)*(r01*r01)))+(((0.278221797778174)*pz*(cj0*cj0)*(r00*r00)))+(((9.63538693604066)*px*py*pz*r00*r01*(sj0*sj0)))+(((25.3562814106333)*pp*px*pz*r00*r02*(cj0*cj0)))+(((-19.2707738720813)*px*r00*r02*(pz*pz)))+(((0.0153712106632144)*(r01*r01)*(sj0*sj0)))+(((9.63538693604066)*cj0*px*r01*r02*sj0*(pz*pz)))+(((25.3562814106333)*cj0*pp*r00*r01*sj0*(px*px)))+(((-50.7125628212666)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((0.0153712106632144)*(cj0*cj0)*(r00*r00)))+(((0.242253912597191)*pp*(r01*r01)*(sj0*sj0)))+(((0.0307424213264288)*cj0*r00*r01*sj0))+(((-50.7125628212666)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((25.3562814106333)*pp*(py*py)*(r01*r01)*(sj0*sj0)))+(((25.3562814106333)*pp*py*pz*r01*r02))+(((4.81769346802033)*pp*pz*(r02*r02)))+(((0.366398266383651)*cj0*py*pz*r00*r02*sj0))+(((-4.14595486088983)*py*pz*r01*r02))+(((-25.3562814106333)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.425453045789016)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-4.14595486088983)*px*pz*r00*r02))+(((-50.7125628212666)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-50.7125628212666)*px*r00*r02*(pz*pz*pz)))+(((-25.3562814106333)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-4.81769346802033)*pp*pz*(cj0*cj0)*(r00*r00)))+(((-0.484507825194381)*px*py*r00*r01*(cj0*cj0)))+(((-101.425125642533)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((9.63538693604066)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.556443595556348)*cj0*pz*r00*r01*sj0))+(((-0.278221797778174)*py*r01*r02*(sj0*sj0)))+(((-50.7125628212666)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-50.7125628212666)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-9.63538693604066)*cj0*pp*pz*r00*r01*sj0))+(((-0.278221797778174)*cj0*py*r00*r02*sj0))+(((-9.63538693604066)*py*r01*r02*(cj0*cj0)*(px*px)))+(((9.63538693604066)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.915361758923863)*(px*px)*(r00*r00)))+(((4.81769346802033)*pp*py*r01*r02*(sj0*sj0)))+(((-0.484507825194381)*cj0*r00*r01*sj0*(px*px)))+(((-0.484507825194381)*cj0*px*py*sj0*(r00*r00)))+(((0.242253912597191)*pp*(cj0*cj0)*(r00*r00)))+(((-50.7125628212666)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-25.3562814106333)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((9.63538693604066)*cj0*pz*r00*r01*sj0*(py*py)))+(((-0.425453045789016)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((25.3562814106333)*cj0*pp*px*py*sj0*(r01*r01)))+(((4.81769346802033)*pp*px*r00*r02))+(((-0.484507825194381)*cj0*px*py*sj0*(r01*r01)))+(((-0.484507825194381)*(cj0*cj0)*(px*px)*(r00*r00))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x102=pz*pz;
IkReal x103=py*py;
IkReal x104=px*px;
IkReal x105=(r01*sj0);
IkReal x106=((0.19)*cj1);
IkReal x107=(pp*sj1);
IkReal x108=((1.0)*r02);
IkReal x109=((0.38)*pz);
IkReal x110=((1.0)*pz);
IkReal x111=(py*r01);
IkReal x112=(px*sj0);
IkReal x113=(cj0*r00);
IkReal x114=((1.0)*cj1);
IkReal x115=((0.0361)*sj1);
IkReal x116=((2.0)*sj1);
IkReal x117=((0.0361)*cj1);
IkReal x118=((2.0)*cj1);
IkReal x119=(py*r00);
IkReal x120=((0.19)*sj1);
IkReal x121=(cj0*px);
IkReal x122=(px*r00);
IkReal x123=(py*r02*sj0);
IkReal x124=(pz*x118);
IkReal x125=(r02*x121);
IkReal x126=(pz*x116);
IkReal x127=(r02*x102);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x112))+((cj0*py)));
evalcond[2]=((1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=(((sj1*x113))+((sj1*x105))+(((-1.0)*cj1*x108)));
evalcond[4]=((((-1.0)*x113*x114))+(((-1.0)*x105*x114))+(((-1.0)*sj1*x108)));
evalcond[5]=((((-1.0)*pz*x108))+((x113*x120))+((x105*x120))+(((-1.0)*r02*x106))+(((-1.0)*x122))+(((-1.0)*x111)));
evalcond[6]=((((-1.0)*x110*x113))+x125+x123+(((-1.0)*r02*x120))+(((-1.0)*x106*x113))+(((-1.0)*x105*x110))+(((-1.0)*x105*x106)));
evalcond[7]=((((-1.0)*x104*x113*x116))+((r02*x109))+(((-1.0)*x123*x126))+((x111*x124))+((r02*x117))+(((-1.0)*x111*x116*x121))+(((-1.0)*cj1*pp*x108))+(((-1.0)*x113*x115))+(((-1.0)*x103*x105*x116))+((x122*x124))+(((-1.0)*x112*x116*x119))+(((-1.0)*x125*x126))+((x105*x107))+(((-1.0)*x105*x115))+((x118*x127))+(((0.38)*x111))+(((0.38)*x122))+((x107*x113)));
evalcond[8]=(((x104*x113*x118))+((x111*x126))+((x112*x118*x119))+((x103*x105*x118))+(((-1.0)*x113*x117))+(((-1.0)*x107*x108))+(((-1.0)*pp*x113*x114))+((x122*x126))+(((-1.0)*pp*x105*x114))+(((-1.0)*x109*x113))+((x123*x124))+((x124*x125))+((x116*x127))+(((-1.0)*r02*x115))+(((-1.0)*x105*x117))+(((-1.0)*x105*x109))+(((0.38)*x125))+(((0.38)*x123))+((x111*x118*x121)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x128=((5.00698342424961)*sj1);
cj3array[0]=((-0.76092971776425)+(((13.1762721690779)*pp))+(((-1.0)*py*sj0*x128))+(((5.00698342424961)*cj1*pz))+(((-1.0)*cj0*px*x128)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x129=(px*sj0);
IkReal x130=((2.0)*py);
IkReal x131=((0.38)*cj1);
IkReal x132=(cj0*r01);
IkReal x133=(pz*r02);
IkReal x134=(r00*sj0);
IkReal x135=((0.38)*sj1);
evalcond[0]=((0.09385)+((py*r00*x135))+(((0.0361)*x132))+(((-1.0)*pz*x131*x134))+(((-1.0)*px*r01*x135))+(((-1.0)*cj0*py*r02*x131))+(((-1.0)*cj0*x130*x133))+((pz*x131*x132))+(((-0.0361)*x134))+(((-1.0)*py*x130*x132))+(((2.0)*px*r00*x129))+((pp*x132))+(((2.0)*x129*x133))+(((-1.0)*cj0*px*r00*x130))+(((-1.0)*pp*x134))+(((0.075894)*(IKcos(j3))))+((r02*x129*x131))+((r01*x129*x130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((-19321.0)+(((-74529.0)*(cj3*cj3)))+(((-74529.0)*(sj3*sj3)))+(((-75894.0)*cj3))));
dummyeval[0]=((-1.0)+(((-3.92805755395683)*cj3))+(((-3.85740903679934)*(sj3*sj3)))+(((-3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((19321.0)+(((75894.0)*cj3))+(((74529.0)*(sj3*sj3)))+(((74529.0)*(cj3*cj3)))));
dummyeval[0]=((1.0)+(((3.92805755395683)*cj3))+(((3.85740903679934)*(sj3*sj3)))+(((3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x136=(cj1*py);
IkReal x137=(pz*sj1);
IkReal x138=((139000.0)*sj0);
IkReal x139=((273000.0)*cj3);
IkReal x140=(py*sj1);
IkReal x141=((273000.0)*sj3);
IkReal x142=(cj1*pz);
IkReal x143=((139000.0)*r01);
IkReal x144=(cj0*r02);
IkReal x145=(cj1*px);
IkReal x146=(r00*x141);
IkReal x147=((273000.0)*cj0*r01);
IkReal x148=(px*r02*sj1);
IkReal x149=((273000.0)*cj0*px*sj1);
CheckValue<IkReal> x150 = IKatan2WithCheck((gconst8*(((((-1.0)*cj0*r01*x137*x139))+(((-1.0)*x138*x148))+(((-1.0)*cj0*x137*x143))+(((-1.0)*x143*x145))+(((-1.0)*sj0*x139*x148))+((r00*x137*x138))+((r00*x136*x139))+((sj0*x140*x141))+((r00*sj0*x137*x139))+((x139*x140*x144))+(((-51870.0)*sj3))+(((139000.0)*x140*x144))+((cj0*px*sj1*x141))+(((-1.0)*x141*x142))+(((139000.0)*r00*x136))+(((-1.0)*r01*x139*x145))))),(gconst8*(((-26410.0)+(((-1.0)*x140*x141*x144))+((sj0*x141*x148))+((x138*x140))+(((-1.0)*x139*x142))+(((139000.0)*cj0*px*sj1))+((cj0*r01*x137*x141))+((cj0*px*sj1*x139))+(((-139000.0)*x142))+(((-1.0)*sj0*x137*x146))+((r01*x141*x145))+((sj0*x139*x140))+(((-51870.0)*cj3))+(((-1.0)*x136*x146))))),IKFAST_ATAN2_MAGTHRESH);
if(!x150.valid){
continue;
}
j2array[0]=x150.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x151=IKcos(j2);
IkReal x152=IKsin(j2);
IkReal x153=(px*sj1);
IkReal x154=((0.273)*cj3);
IkReal x155=(py*sj1);
IkReal x156=((1.0)*r00);
IkReal x157=(cj1*sj0);
IkReal x158=((1.0)*px);
IkReal x159=((1.0)*pz);
IkReal x160=(cj0*r01);
IkReal x161=(pz*sj1);
IkReal x162=((0.273)*sj3);
IkReal x163=(cj0*cj1);
IkReal x164=((0.139)*x152);
IkReal x165=((0.139)*x151);
IkReal x166=(x152*x154);
IkReal x167=(x151*x162);
IkReal x168=(x152*x162);
IkReal x169=(x151*x154);
IkReal x170=(x166+x164);
IkReal x171=(x168+x169+x165);
evalcond[0]=((-0.19)+((cj0*x153))+(((-1.0)*x171))+((sj0*x155))+(((-1.0)*cj1*x159)));
evalcond[1]=((((-1.0)*x158*x163))+(((-1.0)*x167))+x170+(((-1.0)*py*x157))+(((-1.0)*sj1*x159)));
evalcond[2]=((((-1.0)*cj1*py*x156))+(((-1.0)*x167))+x170+(((-1.0)*cj0*r02*x155))+((r02*sj0*x153))+(((-1.0)*sj0*x156*x161))+((cj1*px*r01))+((x160*x161)));
evalcond[3]=((((-1.0)*cj1*x159*x160))+((r01*x153))+(((-0.19)*x160))+((pz*r00*x157))+x171+((py*r02*x163))+(((0.19)*r00*sj0))+(((-1.0)*x155*x156))+(((-1.0)*r02*x157*x158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x172=((139000.0)*cj1);
IkReal x173=(py*sj0);
IkReal x174=(cj0*px);
IkReal x175=((273000.0)*cj3);
IkReal x176=((139000.0)*sj1);
IkReal x177=((273000.0)*cj1*sj3);
IkReal x178=((273000.0)*sj1*sj3);
CheckValue<IkReal> x179 = IKatan2WithCheck((gconst7*(((((-1.0)*pz*sj1*x175))+((pz*x177))+(((-1.0)*x174*x178))+(((-1.0)*pz*x176))+(((51870.0)*sj3))+(((-1.0)*cj1*x173*x175))+(((-1.0)*cj1*x174*x175))+(((-1.0)*x172*x173))+(((-1.0)*x172*x174))+(((-1.0)*x173*x178))))),(gconst7*(((26410.0)+((pz*x172))+((pz*x178))+(((-1.0)*sj1*x174*x175))+(((-1.0)*x174*x176))+((x173*x177))+((cj1*pz*x175))+((x174*x177))+(((51870.0)*cj3))+(((-1.0)*sj1*x173*x175))+(((-1.0)*x173*x176))))),IKFAST_ATAN2_MAGTHRESH);
if(!x179.valid){
continue;
}
j2array[0]=x179.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x180=IKcos(j2);
IkReal x181=IKsin(j2);
IkReal x182=(px*sj1);
IkReal x183=((0.273)*cj3);
IkReal x184=(py*sj1);
IkReal x185=((1.0)*r00);
IkReal x186=(cj1*sj0);
IkReal x187=((1.0)*px);
IkReal x188=((1.0)*pz);
IkReal x189=(cj0*r01);
IkReal x190=(pz*sj1);
IkReal x191=((0.273)*sj3);
IkReal x192=(cj0*cj1);
IkReal x193=((0.139)*x181);
IkReal x194=((0.139)*x180);
IkReal x195=(x181*x183);
IkReal x196=(x180*x191);
IkReal x197=(x181*x191);
IkReal x198=(x180*x183);
IkReal x199=(x193+x195);
IkReal x200=(x198+x197+x194);
evalcond[0]=((-0.19)+((cj0*x182))+((sj0*x184))+(((-1.0)*x200))+(((-1.0)*cj1*x188)));
evalcond[1]=((((-1.0)*x196))+x199+(((-1.0)*x187*x192))+(((-1.0)*py*x186))+(((-1.0)*sj1*x188)));
evalcond[2]=((((-1.0)*cj1*py*x185))+(((-1.0)*x196))+((x189*x190))+x199+((r02*sj0*x182))+(((-1.0)*cj0*r02*x184))+((cj1*px*r01))+(((-1.0)*sj0*x185*x190)));
evalcond[3]=(((r01*x182))+(((-0.19)*x189))+(((-1.0)*x184*x185))+x200+(((0.19)*r00*sj0))+((py*r02*x192))+(((-1.0)*r02*x186*x187))+((pz*r00*x186))+(((-1.0)*cj1*x188*x189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x201=pz*pz;
IkReal x202=py*py;
IkReal x203=px*px;
IkReal x204=(r01*sj0);
IkReal x205=((0.19)*cj1);
IkReal x206=(pp*sj1);
IkReal x207=((1.0)*r02);
IkReal x208=((0.38)*pz);
IkReal x209=((1.0)*pz);
IkReal x210=(py*r01);
IkReal x211=(px*sj0);
IkReal x212=(cj0*r00);
IkReal x213=((1.0)*cj1);
IkReal x214=((0.0361)*sj1);
IkReal x215=((2.0)*sj1);
IkReal x216=((0.0361)*cj1);
IkReal x217=((2.0)*cj1);
IkReal x218=(py*r00);
IkReal x219=((0.19)*sj1);
IkReal x220=(cj0*px);
IkReal x221=(px*r00);
IkReal x222=(py*r02*sj0);
IkReal x223=(pz*x217);
IkReal x224=(r02*x220);
IkReal x225=(pz*x215);
IkReal x226=(r02*x201);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x211))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[3]=((((-1.0)*cj1*x207))+((sj1*x204))+((sj1*x212)));
evalcond[4]=((((-1.0)*x204*x213))+(((-1.0)*sj1*x207))+(((-1.0)*x212*x213)));
evalcond[5]=(((x204*x219))+(((-1.0)*pz*x207))+(((-1.0)*r02*x205))+((x212*x219))+(((-1.0)*x210))+(((-1.0)*x221)));
evalcond[6]=((((-1.0)*x204*x205))+(((-1.0)*x204*x209))+(((-1.0)*x205*x212))+x222+x224+(((-1.0)*r02*x219))+(((-1.0)*x209*x212)));
evalcond[7]=(((x210*x223))+(((-1.0)*x211*x215*x218))+(((-1.0)*x224*x225))+((x206*x212))+(((-1.0)*x204*x214))+(((0.38)*x221))+(((-1.0)*x222*x225))+((x204*x206))+((r02*x216))+(((-1.0)*x210*x215*x220))+((x217*x226))+((x221*x223))+(((-1.0)*x212*x214))+(((-1.0)*x203*x212*x215))+(((-1.0)*x202*x204*x215))+(((0.38)*x210))+(((-1.0)*cj1*pp*x207))+((r02*x208)));
evalcond[8]=((((-1.0)*x204*x208))+((x210*x225))+((x202*x204*x217))+((x203*x212*x217))+((x222*x223))+((x215*x226))+((x211*x217*x218))+(((-1.0)*x204*x216))+(((0.38)*x224))+(((0.38)*x222))+(((-1.0)*x206*x207))+((x223*x224))+((x210*x217*x220))+(((-1.0)*pp*x204*x213))+((x221*x225))+(((-1.0)*r02*x214))+(((-1.0)*x212*x216))+(((-1.0)*x208*x212))+(((-1.0)*pp*x212*x213)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x227=((5.00698342424961)*sj1);
cj3array[0]=((-0.76092971776425)+(((13.1762721690779)*pp))+(((5.00698342424961)*cj1*pz))+(((-1.0)*py*sj0*x227))+(((-1.0)*cj0*px*x227)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x228=(px*sj0);
IkReal x229=((2.0)*py);
IkReal x230=((0.38)*cj1);
IkReal x231=(cj0*r01);
IkReal x232=(pz*r02);
IkReal x233=(r00*sj0);
IkReal x234=((0.38)*sj1);
evalcond[0]=((-0.09385)+(((-1.0)*cj0*px*r00*x229))+(((2.0)*x228*x232))+((py*r00*x234))+((r01*x228*x229))+((pp*x231))+(((-1.0)*py*x229*x231))+(((-1.0)*cj0*x229*x232))+(((2.0)*px*r00*x228))+(((-0.0361)*x233))+(((0.0361)*x231))+(((-1.0)*px*r01*x234))+((pz*x230*x231))+((r02*x228*x230))+(((-1.0)*cj0*py*r02*x230))+(((-1.0)*pp*x233))+(((-1.0)*pz*x230*x233))+(((-0.075894)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((-19321.0)+(((-74529.0)*(cj3*cj3)))+(((-74529.0)*(sj3*sj3)))+(((-75894.0)*cj3))));
dummyeval[0]=((-1.0)+(((-3.92805755395683)*cj3))+(((-3.85740903679934)*(sj3*sj3)))+(((-3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((19321.0)+(((75894.0)*cj3))+(((74529.0)*(sj3*sj3)))+(((74529.0)*(cj3*cj3)))));
dummyeval[0]=((1.0)+(((3.92805755395683)*cj3))+(((3.85740903679934)*(sj3*sj3)))+(((3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x235=((273000.0)*sj3);
IkReal x236=((273000.0)*cj3);
IkReal x237=(pz*r00);
IkReal x238=(px*r02);
IkReal x239=(sj0*sj1);
IkReal x240=(cj1*pz);
IkReal x241=(cj1*py*r00);
IkReal x242=((139000.0)*x239);
IkReal x243=(cj0*px*sj1);
IkReal x244=(cj1*px*r01);
IkReal x245=(cj0*pz*r01*sj1);
IkReal x246=(cj0*py*r02*sj1);
CheckValue<IkReal> x247 = IKatan2WithCheck((gconst10*((((x238*x242))+((x236*x245))+((x236*x244))+(((-139000.0)*x246))+(((-139000.0)*x241))+((py*x235*x239))+(((-1.0)*x237*x242))+(((139000.0)*x244))+(((139000.0)*x245))+(((-1.0)*x236*x246))+(((-1.0)*x236*x241))+(((-51870.0)*sj3))+(((-1.0)*x236*x237*x239))+((x236*x238*x239))+(((-1.0)*x235*x240))+((x235*x243))))),(gconst10*(((-26410.0)+(((-1.0)*x235*x238*x239))+((x236*x243))+(((-139000.0)*x240))+(((139000.0)*x243))+((x235*x237*x239))+(((-1.0)*x236*x240))+((py*x236*x239))+(((-1.0)*x235*x244))+(((-1.0)*x235*x245))+((py*x242))+((x235*x241))+((x235*x246))+(((-51870.0)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x247.valid){
continue;
}
j2array[0]=x247.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x248=IKcos(j2);
IkReal x249=IKsin(j2);
IkReal x250=(px*sj1);
IkReal x251=((0.273)*cj3);
IkReal x252=(py*sj1);
IkReal x253=((1.0)*r00);
IkReal x254=(cj1*sj0);
IkReal x255=((1.0)*px);
IkReal x256=((1.0)*pz);
IkReal x257=(cj0*r01);
IkReal x258=(pz*sj1);
IkReal x259=((0.273)*sj3);
IkReal x260=(cj0*cj1);
IkReal x261=((0.139)*x249);
IkReal x262=((0.139)*x248);
IkReal x263=(x248*x259);
IkReal x264=(x249*x251);
IkReal x265=(x249*x259);
IkReal x266=(x248*x251);
IkReal x267=(x264+x261);
IkReal x268=(x265+x266+x262);
evalcond[0]=((-0.19)+((sj0*x252))+((cj0*x250))+(((-1.0)*cj1*x256))+(((-1.0)*x268)));
evalcond[1]=((((-1.0)*x255*x260))+x267+(((-1.0)*sj1*x256))+(((-1.0)*py*x254))+(((-1.0)*x263)));
evalcond[2]=((((-1.0)*sj0*x253*x258))+((x257*x258))+x263+((r02*sj0*x250))+(((-1.0)*cj1*py*x253))+(((-1.0)*x267))+((cj1*px*r01))+(((-1.0)*cj0*r02*x252)));
evalcond[3]=((((-1.0)*x252*x253))+(((-0.19)*x257))+((r01*x250))+((py*r02*x260))+(((-1.0)*r02*x254*x255))+(((0.19)*r00*sj0))+(((-1.0)*x268))+((pz*r00*x254))+(((-1.0)*cj1*x256*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x269=((139000.0)*cj1);
IkReal x270=(py*sj0);
IkReal x271=(cj0*px);
IkReal x272=((273000.0)*cj3);
IkReal x273=((139000.0)*sj1);
IkReal x274=((273000.0)*cj1*sj3);
IkReal x275=((273000.0)*sj1*sj3);
CheckValue<IkReal> x276 = IKatan2WithCheck((gconst9*(((((-1.0)*pz*x273))+(((-1.0)*x271*x275))+(((51870.0)*sj3))+(((-1.0)*x269*x271))+(((-1.0)*x269*x270))+(((-1.0)*x270*x275))+(((-1.0)*cj1*x271*x272))+((pz*x274))+(((-1.0)*cj1*x270*x272))+(((-1.0)*pz*sj1*x272))))),(gconst9*(((26410.0)+(((-1.0)*sj1*x270*x272))+((cj1*pz*x272))+((x271*x274))+(((-1.0)*sj1*x271*x272))+(((-1.0)*x271*x273))+((x270*x274))+(((51870.0)*cj3))+((pz*x269))+(((-1.0)*x270*x273))+((pz*x275))))),IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
j2array[0]=x276.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x277=IKcos(j2);
IkReal x278=IKsin(j2);
IkReal x279=(px*sj1);
IkReal x280=((0.273)*cj3);
IkReal x281=(py*sj1);
IkReal x282=((1.0)*r00);
IkReal x283=(cj1*sj0);
IkReal x284=((1.0)*px);
IkReal x285=((1.0)*pz);
IkReal x286=(cj0*r01);
IkReal x287=(pz*sj1);
IkReal x288=((0.273)*sj3);
IkReal x289=(cj0*cj1);
IkReal x290=((0.139)*x278);
IkReal x291=((0.139)*x277);
IkReal x292=(x277*x288);
IkReal x293=(x278*x280);
IkReal x294=(x278*x288);
IkReal x295=(x277*x280);
IkReal x296=(x290+x293);
IkReal x297=(x291+x294+x295);
evalcond[0]=((-0.19)+(((-1.0)*x297))+(((-1.0)*cj1*x285))+((sj0*x281))+((cj0*x279)));
evalcond[1]=((((-1.0)*sj1*x285))+(((-1.0)*x292))+(((-1.0)*py*x283))+x296+(((-1.0)*x284*x289)));
evalcond[2]=(((r02*sj0*x279))+((x286*x287))+(((-1.0)*cj1*py*x282))+(((-1.0)*sj0*x282*x287))+(((-1.0)*x296))+x292+((cj1*px*r01))+(((-1.0)*cj0*r02*x281)));
evalcond[3]=(((py*r02*x289))+(((-1.0)*cj1*x285*x286))+(((-1.0)*x297))+(((-1.0)*x281*x282))+(((-1.0)*r02*x283*x284))+(((0.19)*r00*sj0))+((r01*x279))+((pz*r00*x283))+(((-0.19)*x286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x298=(sj0*sj1);
IkReal x299=(cj0*sj1);
CheckValue<IkReal> x300=IKPowWithIntegerCheck(cj4,-1);
if(!x300.valid){
continue;
}
if( IKabs(((0.00719424460431655)*(x300.value)*(((((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((-190.0)*r00*x299))+(((-190.0)*r01*x298))+(((190.0)*cj1*r02))+(((1000.0)*px*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.76092971776425)+(((13.1762721690779)*pp))+(((-5.00698342424961)*py*x298))+(((-5.00698342424961)*px*x299))+(((5.00698342424961)*cj1*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00719424460431655)*(x300.value)*(((((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((-190.0)*r00*x299))+(((-190.0)*r01*x298))+(((190.0)*cj1*r02))+(((1000.0)*px*r00))))))+IKsqr(((-0.76092971776425)+(((13.1762721690779)*pp))+(((-5.00698342424961)*py*x298))+(((-5.00698342424961)*px*x299))+(((5.00698342424961)*cj1*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00719424460431655)*(x300.value)*(((((1000.0)*pz*r02))+(((1000.0)*py*r01))+(((-190.0)*r00*x299))+(((-190.0)*r01*x298))+(((190.0)*cj1*r02))+(((1000.0)*px*r00))))), ((-0.76092971776425)+(((13.1762721690779)*pp))+(((-5.00698342424961)*py*x298))+(((-5.00698342424961)*px*x299))+(((5.00698342424961)*cj1*pz))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x301=IKcos(j3);
IkReal x302=(r01*sj0);
IkReal x303=((0.19)*cj1);
IkReal x304=(py*r02);
IkReal x305=((0.38)*cj1);
IkReal x306=(r00*sj0);
IkReal x307=(cj0*r01);
IkReal x308=((1.0)*pz);
IkReal x309=((1.0)*pp);
IkReal x310=(cj0*r00);
IkReal x311=((0.19)*sj1);
IkReal x312=((0.139)*cj4);
IkReal x313=((2.0)*pz);
IkReal x314=(px*r02);
IkReal x315=((2.0)*px*py);
IkReal x316=((0.38)*py*sj1);
IkReal x317=((0.075894)*x301);
IkReal x318=((0.38)*px*sj1);
evalcond[0]=((0.05775)+((sj0*x316))+x317+(((-1.0)*pz*x305))+((cj0*x318))+(((-1.0)*x309)));
evalcond[1]=(((x302*x311))+((x310*x311))+(((-1.0)*px*r00))+((x312*(IKsin(j3))))+(((-1.0)*r02*x308))+(((-1.0)*r02*x303))+(((-1.0)*py*r01)));
evalcond[2]=((((-1.0)*r02*x311))+(((-1.0)*x303*x310))+(((-1.0)*x302*x303))+(((-1.0)*x302*x308))+(((-1.0)*x308*x310))+((cj0*x314))+((sj0*x304))+(((-0.273)*cj4))+(((-1.0)*x301*x312)));
evalcond[3]=(((x302*x315))+(((-1.0)*x310*x315))+((pp*x307))+((sj0*x305*x314))+(((-1.0)*r01*x318))+(((0.09385)*sj4))+(((-1.0)*cj0*x304*x313))+((sj4*x317))+(((-2.0)*x307*(py*py)))+((pz*x305*x307))+(((0.0361)*x307))+(((-1.0)*x306*x309))+((r00*x316))+(((-0.0361)*x306))+((sj0*x313*x314))+(((2.0)*x306*(px*px)))+(((-1.0)*cj0*x304*x305))+(((-1.0)*pz*x305*x306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((cj4*(sj3*sj3)))+((cj4*(cj3*cj3)))));
dummyeval[0]=(((cj4*(sj3*sj3)))+((cj4*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x319=((273.0)*cj4);
gconst2=IKsign(((((-1.0)*x319*(sj3*sj3)))+(((-1.0)*x319*(cj3*cj3)))+(((-139.0)*cj3*cj4))));
IkReal x320=((1.96402877697842)*cj4);
dummyeval[0]=((((-1.0)*x320*(sj3*sj3)))+(((-1.0)*cj3*cj4))+(((-1.0)*x320*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x321=((0.075894)*cj3);
IkReal x322=py*py;
IkReal x323=px*px;
IkReal x324=pz*pz;
IkReal x325=(r01*sj0);
IkReal x326=((2.0)*px);
IkReal x327=((0.19)*cj1);
IkReal x328=(r00*sj1);
IkReal x329=((0.0361)*cj0);
IkReal x330=(py*r02);
IkReal x331=(cj0*cj1);
IkReal x332=((0.38)*pz);
IkReal x333=(pz*r02);
IkReal x334=((2.0)*sj0);
IkReal x335=(cj0*r01);
IkReal x336=((0.38)*py);
IkReal x337=(pz*sj1);
IkReal x338=((1.0)*sj0);
IkReal x339=(pp*r00);
IkReal x340=((0.19)*sj1);
IkReal x341=((0.0361)*sj1);
IkReal x342=((2.0)*cj0);
IkReal x343=(r00*sj0);
IkReal x344=((1.0)*r00);
IkReal x345=(cj1*r00);
IkReal x346=(cj1*r02);
IkReal x347=(cj0*r00);
IkReal x348=(cj0*sj1);
IkReal x349=((0.38)*px);
IkReal x350=(cj1*pz);
IkReal x351=((1.0)*pp);
IkReal x352=(cj0*r02);
IkReal x353=(py*r01);
IkReal x354=((1.0)*r02*sj1);
IkReal x355=(r00*x323);
IkReal x356=((2.0)*x353);
IkReal x357=((2.0)*x322);
IkReal x358=((2.0)*x324);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x338))+((cj0*py)));
evalcond[2]=((1.0)+(((-1.0)*r00*x338))+x335);
evalcond[3]=((0.05775)+((x348*x349))+(((-1.0)*x351))+((sj0*sj1*x336))+x321+(((-1.0)*cj1*x332)));
evalcond[4]=(((cj0*x328))+((sj1*x325))+(((-1.0)*x346)));
evalcond[5]=((((-1.0)*cj1*x325))+(((-1.0)*x331*x344))+(((-1.0)*x354)));
evalcond[6]=((((-1.0)*px*x344))+((x325*x340))+(((-1.0)*x353))+(((-1.0)*x333))+(((0.19)*cj0*x328))+(((-1.0)*r02*x327)));
evalcond[7]=(((px*x352))+(((-1.0)*r02*x340))+(((-1.0)*pz*x325))+(((-1.0)*x325*x327))+(((-1.0)*x327*x347))+(((-1.0)*cj0*pz*x344))+((sj0*x330)));
evalcond[8]=((0.09385)+(((-1.0)*py*x326*x347))+(((-1.0)*x338*x339))+((pp*x335))+((x334*x355))+(((-0.0361)*x343))+((r01*x329))+((py*x325*x326))+(((-0.38)*x330*x331))+x321+((sj0*x326*x333))+(((-1.0)*cj1*x332*x343))+(((-1.0)*r01*sj1*x349))+((x328*x336))+((sj0*x346*x349))+((r01*x331*x332))+(((-1.0)*pz*x330*x342))+(((-1.0)*x335*x357)));
evalcond[9]=(((r01*x336))+((r00*x349))+(((-1.0)*sj1*x325*x357))+(((-1.0)*py*sj1*x326*x335))+(((-1.0)*x330*x334*x337))+((pp*sj1*x325))+(((-1.0)*py*sj0*x326*x328))+(((-1.0)*x326*x333*x348))+((x346*x358))+((r02*x332))+(((-1.0)*x346*x351))+(((-1.0)*x325*x341))+((pz*x326*x345))+(((-1.0)*x323*x328*x342))+((x350*x356))+(((-1.0)*x328*x329))+(((0.0361)*x346))+((cj0*pp*x328)));
evalcond[10]=((((-1.0)*r02*x341))+(((2.0)*x331*x355))+((cj1*py*x326*x343))+((pz*x326*x328))+((x337*x356))+((cj1*x325*x357))+(((-0.0361)*cj1*x325))+((r02*sj1*x358))+(((-1.0)*x332*x347))+((x326*x331*x353))+(((-1.0)*cj1*x325*x351))+(((0.38)*sj0*x330))+((x349*x352))+(((-1.0)*x329*x345))+(((-1.0)*x325*x332))+((x330*x334*x350))+((x326*x331*x333))+(((-1.0)*x331*x339))+(((-1.0)*r02*sj1*x351)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((-19321.0)+(((-74529.0)*(cj3*cj3)))+(((-74529.0)*(sj3*sj3)))+(((-75894.0)*cj3))));
dummyeval[0]=((-1.0)+(((-3.92805755395683)*cj3))+(((-3.85740903679934)*(sj3*sj3)))+(((-3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((19321.0)+(((75894.0)*cj3))+(((74529.0)*(sj3*sj3)))+(((74529.0)*(cj3*cj3)))));
dummyeval[0]=((1.0)+(((3.92805755395683)*cj3))+(((3.85740903679934)*(sj3*sj3)))+(((3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x359=(cj1*py);
IkReal x360=(pz*sj1);
IkReal x361=((139000.0)*sj0);
IkReal x362=((273000.0)*cj3);
IkReal x363=(py*sj1);
IkReal x364=((273000.0)*sj3);
IkReal x365=(cj1*pz);
IkReal x366=((139000.0)*cj0);
IkReal x367=(cj0*r02);
IkReal x368=(r00*x364);
IkReal x369=((273000.0)*cj0*r01);
IkReal x370=(px*r02*sj1);
IkReal x371=(cj1*px*r01);
IkReal x372=((273000.0)*cj0*px*sj1);
CheckValue<IkReal> x373 = IKatan2WithCheck((gconst4*(((((-1.0)*x362*x371))+(((-1.0)*r01*x360*x366))+(((-1.0)*x361*x370))+(((-139000.0)*x371))+(((-1.0)*sj0*x362*x370))+((r00*x360*x361))+(((-51870.0)*sj3))+((r00*x359*x362))+((x362*x363*x367))+((cj0*px*sj1*x364))+(((139000.0)*r00*x359))+((r00*sj0*x360*x362))+((sj0*x363*x364))+(((-1.0)*x364*x365))+(((-1.0)*cj0*r01*x360*x362))+((r02*x363*x366))))),(gconst4*(((-26410.0)+((sj0*x364*x370))+((x361*x363))+((cj0*r01*x360*x364))+(((-1.0)*x362*x365))+(((-1.0)*sj0*x360*x368))+((x364*x371))+((sj0*x362*x363))+(((-139000.0)*x365))+((cj0*px*sj1*x362))+(((-1.0)*x359*x368))+((px*sj1*x366))+(((-1.0)*x363*x364*x367))+(((-51870.0)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x373.valid){
continue;
}
j2array[0]=x373.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x374=IKcos(j2);
IkReal x375=IKsin(j2);
IkReal x376=(px*sj1);
IkReal x377=((0.273)*cj3);
IkReal x378=(py*sj1);
IkReal x379=((1.0)*r00);
IkReal x380=(cj1*sj0);
IkReal x381=((1.0)*px);
IkReal x382=((1.0)*pz);
IkReal x383=(cj0*r01);
IkReal x384=(pz*sj1);
IkReal x385=((0.273)*sj3);
IkReal x386=(cj0*cj1);
IkReal x387=((0.139)*x375);
IkReal x388=((0.139)*x374);
IkReal x389=(x375*x377);
IkReal x390=(x374*x385);
IkReal x391=(x375*x385);
IkReal x392=(x374*x377);
IkReal x393=(x387+x389);
IkReal x394=(x388+x391+x392);
evalcond[0]=((-0.19)+(((-1.0)*cj1*x382))+(((-1.0)*x394))+((sj0*x378))+((cj0*x376)));
evalcond[1]=((((-1.0)*x390))+(((-1.0)*x381*x386))+x393+(((-1.0)*py*x380))+(((-1.0)*sj1*x382)));
evalcond[2]=((((-1.0)*x390))+((x383*x384))+x393+(((-1.0)*cj0*r02*x378))+(((-1.0)*cj1*py*x379))+(((-1.0)*sj0*x379*x384))+((r02*sj0*x376))+((cj1*px*r01)));
evalcond[3]=(((py*r02*x386))+(((-1.0)*cj1*x382*x383))+((r01*x376))+(((-1.0)*x378*x379))+x394+((pz*r00*x380))+(((0.19)*r00*sj0))+(((-0.19)*x383))+(((-1.0)*r02*x380*x381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x395=((139000.0)*cj1);
IkReal x396=(py*sj0);
IkReal x397=(cj0*px);
IkReal x398=((273000.0)*cj3);
IkReal x399=((139000.0)*sj1);
IkReal x400=((273000.0)*cj1*sj3);
IkReal x401=((273000.0)*sj1*sj3);
CheckValue<IkReal> x402 = IKatan2WithCheck((gconst3*(((((-1.0)*cj1*x396*x398))+((pz*x400))+(((-1.0)*x395*x396))+(((-1.0)*x395*x397))+(((-1.0)*pz*sj1*x398))+(((51870.0)*sj3))+(((-1.0)*pz*x399))+(((-1.0)*x397*x401))+(((-1.0)*x396*x401))+(((-1.0)*cj1*x397*x398))))),(gconst3*(((26410.0)+((x397*x400))+((pz*x401))+(((-1.0)*sj1*x397*x398))+((pz*x395))+(((51870.0)*cj3))+((cj1*pz*x398))+(((-1.0)*x397*x399))+(((-1.0)*x396*x399))+(((-1.0)*sj1*x396*x398))+((x396*x400))))),IKFAST_ATAN2_MAGTHRESH);
if(!x402.valid){
continue;
}
j2array[0]=x402.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x403=IKcos(j2);
IkReal x404=IKsin(j2);
IkReal x405=(px*sj1);
IkReal x406=((0.273)*cj3);
IkReal x407=(py*sj1);
IkReal x408=((1.0)*r00);
IkReal x409=(cj1*sj0);
IkReal x410=((1.0)*px);
IkReal x411=((1.0)*pz);
IkReal x412=(cj0*r01);
IkReal x413=(pz*sj1);
IkReal x414=((0.273)*sj3);
IkReal x415=(cj0*cj1);
IkReal x416=((0.139)*x404);
IkReal x417=((0.139)*x403);
IkReal x418=(x404*x406);
IkReal x419=(x403*x414);
IkReal x420=(x404*x414);
IkReal x421=(x403*x406);
IkReal x422=(x416+x418);
IkReal x423=(x417+x421+x420);
evalcond[0]=((-0.19)+(((-1.0)*cj1*x411))+(((-1.0)*x423))+((sj0*x407))+((cj0*x405)));
evalcond[1]=((((-1.0)*py*x409))+x422+(((-1.0)*x410*x415))+(((-1.0)*x419))+(((-1.0)*sj1*x411)));
evalcond[2]=((((-1.0)*cj0*r02*x407))+((r02*sj0*x405))+x422+((x412*x413))+((cj1*px*r01))+(((-1.0)*x419))+(((-1.0)*sj0*x408*x413))+(((-1.0)*cj1*py*x408)));
evalcond[3]=(((py*r02*x415))+(((-1.0)*r02*x409*x410))+(((-1.0)*cj1*x411*x412))+((pz*r00*x409))+((r01*x405))+x423+(((-0.19)*x412))+(((-1.0)*x407*x408))+(((0.19)*r00*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x424=((0.075894)*cj3);
IkReal x425=py*py;
IkReal x426=px*px;
IkReal x427=pz*pz;
IkReal x428=(r01*sj0);
IkReal x429=((2.0)*px);
IkReal x430=((0.19)*cj1);
IkReal x431=(r00*sj1);
IkReal x432=((0.0361)*cj0);
IkReal x433=(py*r02);
IkReal x434=(cj0*cj1);
IkReal x435=((0.38)*pz);
IkReal x436=(pz*r02);
IkReal x437=((2.0)*sj0);
IkReal x438=(cj0*r01);
IkReal x439=((0.38)*py);
IkReal x440=(pz*sj1);
IkReal x441=((1.0)*sj0);
IkReal x442=(pp*r00);
IkReal x443=((0.19)*sj1);
IkReal x444=((0.0361)*sj1);
IkReal x445=((2.0)*cj0);
IkReal x446=(r00*sj0);
IkReal x447=((1.0)*r00);
IkReal x448=(cj1*r00);
IkReal x449=(cj1*r02);
IkReal x450=(cj0*r00);
IkReal x451=(cj0*sj1);
IkReal x452=((0.38)*px);
IkReal x453=(cj1*pz);
IkReal x454=((1.0)*pp);
IkReal x455=(cj0*r02);
IkReal x456=(py*r01);
IkReal x457=((1.0)*r02*sj1);
IkReal x458=(r00*x426);
IkReal x459=((2.0)*x456);
IkReal x460=((2.0)*x425);
IkReal x461=((2.0)*x427);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(((cj0*py))+(((-1.0)*px*x441)));
evalcond[2]=((-1.0)+x438+(((-1.0)*r00*x441)));
evalcond[3]=((0.05775)+(((-1.0)*cj1*x435))+(((-1.0)*x454))+((sj0*sj1*x439))+x424+((x451*x452)));
evalcond[4]=((((-1.0)*x449))+((cj0*x431))+((sj1*x428)));
evalcond[5]=((((-1.0)*x434*x447))+(((-1.0)*x457))+(((-1.0)*cj1*x428)));
evalcond[6]=((((-1.0)*x436))+(((0.19)*cj0*x431))+(((-1.0)*x456))+((x428*x443))+(((-1.0)*r02*x430))+(((-1.0)*px*x447)));
evalcond[7]=(((sj0*x433))+(((-1.0)*pz*x428))+(((-1.0)*r02*x443))+(((-1.0)*cj0*pz*x447))+((px*x455))+(((-1.0)*x428*x430))+(((-1.0)*x430*x450)));
evalcond[8]=((-0.09385)+(((-0.0361)*x446))+(((-1.0)*x424))+((py*x428*x429))+((pp*x438))+(((-0.38)*x433*x434))+(((-1.0)*py*x429*x450))+(((-1.0)*cj1*x435*x446))+(((-1.0)*r01*sj1*x452))+((sj0*x429*x436))+(((-1.0)*x438*x460))+((r01*x434*x435))+((x431*x439))+((sj0*x449*x452))+((r01*x432))+(((-1.0)*pz*x433*x445))+(((-1.0)*x441*x442))+((x437*x458)));
evalcond[9]=(((cj0*pp*x431))+(((-1.0)*x426*x431*x445))+(((-1.0)*x433*x437*x440))+(((-1.0)*x429*x436*x451))+(((-1.0)*x431*x432))+((x453*x459))+((r02*x435))+(((0.0361)*x449))+(((-1.0)*py*sj1*x429*x438))+(((-1.0)*sj1*x428*x460))+((x449*x461))+((pz*x429*x448))+((r01*x439))+(((-1.0)*py*sj0*x429*x431))+((r00*x452))+(((-1.0)*x428*x444))+(((-1.0)*x449*x454))+((pp*sj1*x428)));
evalcond[10]=((((-1.0)*x435*x450))+(((2.0)*x434*x458))+(((-1.0)*cj1*x428*x454))+((x440*x459))+((x429*x434*x456))+((x452*x455))+((x433*x437*x453))+((r02*sj1*x461))+(((-1.0)*x432*x448))+(((-1.0)*x434*x442))+(((-1.0)*r02*sj1*x454))+((x429*x434*x436))+(((-1.0)*r02*x444))+(((0.38)*sj0*x433))+((pz*x429*x431))+(((-1.0)*x428*x435))+((cj1*x428*x460))+((cj1*py*x429*x446))+(((-0.0361)*cj1*x428)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((-19321.0)+(((-74529.0)*(cj3*cj3)))+(((-74529.0)*(sj3*sj3)))+(((-75894.0)*cj3))));
dummyeval[0]=((-1.0)+(((-3.92805755395683)*cj3))+(((-3.85740903679934)*(sj3*sj3)))+(((-3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((19321.0)+(((75894.0)*cj3))+(((74529.0)*(sj3*sj3)))+(((74529.0)*(cj3*cj3)))));
dummyeval[0]=((1.0)+(((3.92805755395683)*cj3))+(((3.85740903679934)*(sj3*sj3)))+(((3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x462=((273000.0)*sj3);
IkReal x463=(pz*sj1);
IkReal x464=((139000.0)*sj0);
IkReal x465=(px*sj1);
IkReal x466=(r02*sj0);
IkReal x467=((273000.0)*cj3);
IkReal x468=(py*sj1);
IkReal x469=(cj1*pz);
IkReal x470=((139000.0)*cj0);
IkReal x471=(r00*sj0);
IkReal x472=(cj1*py*r00);
IkReal x473=(cj0*x467);
IkReal x474=(cj1*px*r01);
CheckValue<IkReal> x475 = IKatan2WithCheck((gconst6*(((((-1.0)*x463*x467*x471))+(((-1.0)*x462*x469))+(((-1.0)*x467*x472))+(((139000.0)*x474))+((x465*x466*x467))+((sj0*x462*x468))+(((-1.0)*r00*x463*x464))+(((-51870.0)*sj3))+(((-1.0)*r02*x468*x470))+(((-1.0)*r02*x468*x473))+((x467*x474))+((cj0*x462*x465))+((r02*x464*x465))+((r01*x463*x473))+((r01*x463*x470))+(((-139000.0)*x472))))),(gconst6*(((-26410.0)+(((-1.0)*x462*x474))+((x462*x472))+((x462*x463*x471))+((x465*x473))+((x465*x470))+(((-1.0)*cj0*r01*x462*x463))+((cj0*r02*x462*x468))+((sj0*x467*x468))+(((-139000.0)*x469))+(((-1.0)*x467*x469))+((x464*x468))+(((-51870.0)*cj3))+(((-1.0)*x462*x465*x466))))),IKFAST_ATAN2_MAGTHRESH);
if(!x475.valid){
continue;
}
j2array[0]=x475.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x476=IKcos(j2);
IkReal x477=IKsin(j2);
IkReal x478=(px*sj1);
IkReal x479=((0.273)*cj3);
IkReal x480=(py*sj1);
IkReal x481=((1.0)*r00);
IkReal x482=(cj1*sj0);
IkReal x483=((1.0)*px);
IkReal x484=((1.0)*pz);
IkReal x485=(cj0*r01);
IkReal x486=(pz*sj1);
IkReal x487=((0.273)*sj3);
IkReal x488=(cj0*cj1);
IkReal x489=((0.139)*x477);
IkReal x490=((0.139)*x476);
IkReal x491=(x476*x487);
IkReal x492=(x477*x479);
IkReal x493=(x477*x487);
IkReal x494=(x476*x479);
IkReal x495=(x489+x492);
IkReal x496=(x493+x490+x494);
evalcond[0]=((-0.19)+(((-1.0)*cj1*x484))+(((-1.0)*x496))+((sj0*x480))+((cj0*x478)));
evalcond[1]=((((-1.0)*x491))+(((-1.0)*x483*x488))+(((-1.0)*sj1*x484))+(((-1.0)*py*x482))+x495);
evalcond[2]=(((x485*x486))+(((-1.0)*x495))+((r02*sj0*x478))+(((-1.0)*sj0*x481*x486))+(((-1.0)*cj0*r02*x480))+x491+(((-1.0)*cj1*py*x481))+((cj1*px*r01)));
evalcond[3]=((((-1.0)*x496))+((pz*r00*x482))+(((-1.0)*r02*x482*x483))+(((-1.0)*x480*x481))+(((-0.19)*x485))+(((0.19)*r00*sj0))+(((-1.0)*cj1*x484*x485))+((py*r02*x488))+((r01*x478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x497=((139000.0)*cj1);
IkReal x498=(py*sj0);
IkReal x499=(cj0*px);
IkReal x500=((273000.0)*cj3);
IkReal x501=((139000.0)*sj1);
IkReal x502=((273000.0)*cj1*sj3);
IkReal x503=((273000.0)*sj1*sj3);
CheckValue<IkReal> x504 = IKatan2WithCheck((gconst5*(((((-1.0)*cj1*x499*x500))+(((-1.0)*cj1*x498*x500))+(((-1.0)*x499*x503))+(((-1.0)*pz*x501))+(((-1.0)*x497*x498))+(((-1.0)*x497*x499))+(((51870.0)*sj3))+(((-1.0)*pz*sj1*x500))+(((-1.0)*x498*x503))+((pz*x502))))),(gconst5*(((26410.0)+((pz*x497))+(((-1.0)*x499*x501))+(((-1.0)*sj1*x498*x500))+(((51870.0)*cj3))+((cj1*pz*x500))+((x498*x502))+((x499*x502))+(((-1.0)*x498*x501))+((pz*x503))+(((-1.0)*sj1*x499*x500))))),IKFAST_ATAN2_MAGTHRESH);
if(!x504.valid){
continue;
}
j2array[0]=x504.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x505=IKcos(j2);
IkReal x506=IKsin(j2);
IkReal x507=(px*sj1);
IkReal x508=((0.273)*cj3);
IkReal x509=(py*sj1);
IkReal x510=((1.0)*r00);
IkReal x511=(cj1*sj0);
IkReal x512=((1.0)*px);
IkReal x513=((1.0)*pz);
IkReal x514=(cj0*r01);
IkReal x515=(pz*sj1);
IkReal x516=((0.273)*sj3);
IkReal x517=(cj0*cj1);
IkReal x518=((0.139)*x506);
IkReal x519=((0.139)*x505);
IkReal x520=(x505*x516);
IkReal x521=(x506*x508);
IkReal x522=(x506*x516);
IkReal x523=(x505*x508);
IkReal x524=(x521+x518);
IkReal x525=(x522+x523+x519);
evalcond[0]=((-0.19)+(((-1.0)*cj1*x513))+((sj0*x509))+(((-1.0)*x525))+((cj0*x507)));
evalcond[1]=((((-1.0)*py*x511))+(((-1.0)*x520))+(((-1.0)*sj1*x513))+(((-1.0)*x512*x517))+x524);
evalcond[2]=((((-1.0)*sj0*x510*x515))+((x514*x515))+(((-1.0)*x524))+(((-1.0)*cj1*py*x510))+x520+((r02*sj0*x507))+(((-1.0)*cj0*r02*x509))+((cj1*px*r01)));
evalcond[3]=((((-0.19)*x514))+(((-1.0)*cj1*x513*x514))+(((-1.0)*x525))+(((-1.0)*r02*x511*x512))+((py*r02*x517))+((r01*x507))+(((0.19)*r00*sj0))+(((-1.0)*x509*x510))+((pz*r00*x511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x526=((139.0)*sj1);
IkReal x527=(cj0*r00);
IkReal x528=((1000.0)*cj4);
IkReal x529=(cj1*cj3);
IkReal x530=((273.0)*r02);
IkReal x531=(cj1*sj3);
IkReal x532=((190.0)*cj4);
IkReal x533=((273.0)*r01);
IkReal x534=(cj3*sj1);
IkReal x535=(cj0*px);
IkReal x536=(sj1*sj3);
IkReal x537=(sj0*x536);
CheckValue<IkReal> x538 = IKatan2WithCheck((gconst2*(((((-1.0)*py*x528*x537))+((pz*x528*x531))+(((-1.0)*x528*x535*x536))+(((273.0)*x527*x534))+((sj0*x533*x534))+(((-1.0)*x529*x530))+((sj3*x532))+((x526*x527))+((r01*sj0*x526))+(((-139.0)*cj1*r02))))),(gconst2*(((((-1.0)*x533*x537))+((pz*x528*x529))+(((-273.0)*x527*x536))+(((-1.0)*x528*x534*x535))+(((-1.0)*py*sj0*x528*x534))+((cj3*x532))+((x530*x531))))),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
j2array[0]=x538.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x539=IKcos(j2);
IkReal x540=IKsin(j2);
IkReal x541=pz*pz;
IkReal x542=py*py;
IkReal x543=px*px;
IkReal x544=(px*sj1);
IkReal x545=(sj0*sj1);
IkReal x546=((0.055208)*sj3);
IkReal x547=(pp*r01);
IkReal x548=(cj1*sj0);
IkReal x549=(pz*r01);
IkReal x550=((0.38)*sj0);
IkReal x551=((1.0)*sj1);
IkReal x552=(py*r00);
IkReal x553=(pz*r02);
IkReal x554=((2.0)*cj0);
IkReal x555=((2.0)*py);
IkReal x556=(pz*r00);
IkReal x557=(pp*r02);
IkReal x558=((1.0)*cj1);
IkReal x559=(cj0*r00);
IkReal x560=((0.0361)*cj1);
IkReal x561=(py*r02);
IkReal x562=((0.0361)*r01);
IkReal x563=((0.0361)*sj1);
IkReal x564=(py*r01);
IkReal x565=((2.0)*px);
IkReal x566=(cj1*px);
IkReal x567=((0.09385)*cj3);
IkReal x568=((0.38)*cj0);
IkReal x569=(px*r02);
IkReal x570=(cj4*x540);
IkReal x571=(cj4*x539);
IkReal x572=((0.273)*sj3*sj4);
IkReal x573=((0.139)*x540);
IkReal x574=((0.139)*x539);
IkReal x575=(r00*x543);
IkReal x576=((0.273)*x539);
IkReal x577=((0.273)*cj3*x540);
IkReal x578=(x553*x555);
IkReal x579=((2.0)*r01*x542);
IkReal x580=((2.0)*r02*x541);
evalcond[0]=(((sj1*x559))+(((-1.0)*sj3*x571))+(((-1.0)*r02*x558))+((cj3*x570))+((r01*x545)));
evalcond[1]=((((-1.0)*r02*x551))+((cj3*x571))+((sj3*x570))+(((-1.0)*x558*x559))+(((-1.0)*r01*x548)));
evalcond[2]=((-0.19)+((py*x545))+(((-0.273)*sj3*x540))+(((-1.0)*cj3*x576))+((cj0*x544))+(((-1.0)*x574))+(((-1.0)*pz*x558)));
evalcond[3]=((((-1.0)*sj3*x576))+(((-1.0)*py*x548))+x577+x573+(((-1.0)*pz*x551))+(((-1.0)*cj0*px*x558)));
evalcond[4]=(((sj4*x577))+((sj4*x573))+((r02*sj0*x544))+(((-1.0)*x545*x556))+((r01*x566))+(((-1.0)*x539*x572))+(((-1.0)*cj0*x551*x561))+(((-1.0)*x552*x558))+((cj0*sj1*x549)));
evalcond[5]=(((x548*x556))+((sj4*x574))+((cj0*cj1*x561))+(((-1.0)*x551*x552))+((cj3*sj4*x576))+((x540*x572))+(((-1.0)*cj0*x549*x558))+(((-0.19)*cj0*r01))+(((0.19)*r00*sj0))+(((-1.0)*x548*x569))+((r01*x544)));
evalcond[6]=((((-1.0)*sj1*x554*x575))+((x567*x570))+((cj1*x556*x565))+((pp*sj1*x559))+(((-1.0)*x545*x579))+(((-1.0)*x545*x578))+((cj1*x549*x555))+(((-2.0)*sj0*x544*x552))+(((0.38)*x564))+(((0.38)*px*r00))+(((-1.0)*x544*x554*x564))+(((-1.0)*x559*x563))+(((-1.0)*x544*x553*x554))+(((0.075894)*x570))+((r02*x560))+(((-1.0)*x545*x562))+(((-1.0)*x546*x571))+(((-1.0)*x557*x558))+((x545*x547))+(((0.38)*x553))+((cj1*x580)));
evalcond[7]=((((-1.0)*x547*x548))+((x553*x554*x566))+((x550*x561))+((x554*x564*x566))+((x567*x571))+((x548*x578))+((x548*x579))+((x546*x570))+((sj1*x580))+(((-1.0)*x551*x557))+(((-1.0)*x556*x568))+(((-1.0)*x559*x560))+(((-1.0)*x549*x550))+((sj1*x549*x555))+(((0.075894)*x571))+((x548*x552*x565))+(((2.0)*x544*x556))+(((-1.0)*x548*x562))+(((-1.0)*r02*x563))+(((-1.0)*pp*x558*x559))+((cj1*x554*x575))+((x568*x569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x581=((1.0)*sj1);
IkReal x582=(cj1*sj3);
IkReal x583=(cj0*r00);
IkReal x584=(cj3*r02);
IkReal x585=(r01*sj0);
IkReal x586=(sj1*sj3);
IkReal x587=(cj3*x585);
CheckValue<IkReal> x588 = IKatan2WithCheck((gconst1*((((x582*x585))+((x582*x583))+((r02*x586))+(((-1.0)*cj3*x581*x583))+(((-1.0)*x581*x587))+((cj1*x584))))),(gconst1*((((x583*x586))+((sj1*x584))+((x585*x586))+(((-1.0)*r02*x582))+((cj1*cj3*x583))+((cj1*x587))))),IKFAST_ATAN2_MAGTHRESH);
if(!x588.valid){
continue;
}
j2array[0]=x588.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x589=IKcos(j2);
IkReal x590=IKsin(j2);
IkReal x591=pz*pz;
IkReal x592=py*py;
IkReal x593=px*px;
IkReal x594=(px*sj1);
IkReal x595=(sj0*sj1);
IkReal x596=((0.055208)*sj3);
IkReal x597=(pp*r01);
IkReal x598=(cj1*sj0);
IkReal x599=(pz*r01);
IkReal x600=((0.38)*sj0);
IkReal x601=((1.0)*sj1);
IkReal x602=(py*r00);
IkReal x603=(pz*r02);
IkReal x604=((2.0)*cj0);
IkReal x605=((2.0)*py);
IkReal x606=(pz*r00);
IkReal x607=(pp*r02);
IkReal x608=((1.0)*cj1);
IkReal x609=(cj0*r00);
IkReal x610=((0.0361)*cj1);
IkReal x611=(py*r02);
IkReal x612=((0.0361)*r01);
IkReal x613=((0.0361)*sj1);
IkReal x614=(py*r01);
IkReal x615=((2.0)*px);
IkReal x616=(cj1*px);
IkReal x617=((0.09385)*cj3);
IkReal x618=((0.38)*cj0);
IkReal x619=(px*r02);
IkReal x620=(cj4*x590);
IkReal x621=(cj4*x589);
IkReal x622=((0.273)*sj3*sj4);
IkReal x623=((0.139)*x590);
IkReal x624=((0.139)*x589);
IkReal x625=(r00*x593);
IkReal x626=((0.273)*x589);
IkReal x627=((0.273)*cj3*x590);
IkReal x628=(x603*x605);
IkReal x629=((2.0)*r01*x592);
IkReal x630=((2.0)*r02*x591);
evalcond[0]=(((cj3*x620))+((sj1*x609))+((r01*x595))+(((-1.0)*sj3*x621))+(((-1.0)*r02*x608)));
evalcond[1]=(((cj3*x621))+(((-1.0)*x608*x609))+((sj3*x620))+(((-1.0)*r01*x598))+(((-1.0)*r02*x601)));
evalcond[2]=((-0.19)+((py*x595))+(((-1.0)*x624))+(((-1.0)*pz*x608))+(((-0.273)*sj3*x590))+(((-1.0)*cj3*x626))+((cj0*x594)));
evalcond[3]=((((-1.0)*cj0*px*x608))+x627+x623+(((-1.0)*pz*x601))+(((-1.0)*sj3*x626))+(((-1.0)*py*x598)));
evalcond[4]=((((-1.0)*x602*x608))+((sj4*x627))+((sj4*x623))+((cj0*sj1*x599))+((r01*x616))+(((-1.0)*x595*x606))+(((-1.0)*x589*x622))+((r02*sj0*x594))+(((-1.0)*cj0*x601*x611)));
evalcond[5]=(((sj4*x624))+((x590*x622))+((r01*x594))+((cj3*sj4*x626))+((cj0*cj1*x611))+(((-0.19)*cj0*r01))+(((-1.0)*cj0*x599*x608))+(((0.19)*r00*sj0))+(((-1.0)*x598*x619))+((x598*x606))+(((-1.0)*x601*x602)));
evalcond[6]=((((-1.0)*x594*x603*x604))+(((-1.0)*x595*x612))+(((-1.0)*x596*x621))+((x617*x620))+((x595*x597))+(((-1.0)*x609*x613))+(((-1.0)*sj1*x604*x625))+(((0.075894)*x620))+((pp*sj1*x609))+((cj1*x599*x605))+(((0.38)*px*r00))+(((-1.0)*x595*x628))+(((-1.0)*x595*x629))+(((-1.0)*x594*x604*x614))+((cj1*x606*x615))+((r02*x610))+(((0.38)*x614))+(((0.38)*x603))+(((-2.0)*sj0*x594*x602))+(((-1.0)*x607*x608))+((cj1*x630)));
evalcond[7]=(((x596*x620))+((x617*x621))+((x600*x611))+((x598*x602*x615))+(((-1.0)*x609*x610))+(((0.075894)*x621))+(((2.0)*x594*x606))+((sj1*x599*x605))+(((-1.0)*x599*x600))+(((-1.0)*x597*x598))+((cj1*x604*x625))+((x598*x629))+((x598*x628))+(((-1.0)*x598*x612))+(((-1.0)*x606*x618))+((sj1*x630))+((x603*x604*x616))+((x604*x614*x616))+(((-1.0)*pp*x608*x609))+((x618*x619))+(((-1.0)*r02*x613))+(((-1.0)*x601*x607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x631=((1000.0)*r02);
IkReal x632=((1000.0)*r00);
IkReal x633=((1000.0)*r01);
IkReal x634=((190.0)*r02);
IkReal x635=((190.0)*r01*sj0);
IkReal x636=((190.0)*cj0*r00);
CheckValue<IkReal> x637 = IKatan2WithCheck((gconst0*((((py*x633))+((pz*x631))+(((-1.0)*sj1*x635))+(((-1.0)*sj1*x636))+((cj1*x634))+((px*x632))))),(gconst0*(((((-1.0)*cj0*pz*x632))+(((-1.0)*cj1*x635))+(((-1.0)*cj1*x636))+((cj0*px*x631))+((py*sj0*x631))+(((-1.0)*sj1*x634))+(((-273.0)*cj4))+(((-1.0)*pz*sj0*x633))))),IKFAST_ATAN2_MAGTHRESH);
if(!x637.valid){
continue;
}
j3array[0]=x637.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x638=IKcos(j3);
IkReal x639=(r01*sj0);
IkReal x640=((0.19)*cj1);
IkReal x641=(py*r02);
IkReal x642=((0.38)*cj1);
IkReal x643=(r00*sj0);
IkReal x644=(cj0*r01);
IkReal x645=((1.0)*pz);
IkReal x646=((1.0)*pp);
IkReal x647=(cj0*r00);
IkReal x648=((0.19)*sj1);
IkReal x649=((0.139)*cj4);
IkReal x650=((2.0)*pz);
IkReal x651=(px*r02);
IkReal x652=((2.0)*px*py);
IkReal x653=((0.38)*py*sj1);
IkReal x654=((0.075894)*x638);
IkReal x655=((0.38)*px*sj1);
evalcond[0]=((0.05775)+((sj0*x653))+(((-1.0)*x646))+x654+((cj0*x655))+(((-1.0)*pz*x642)));
evalcond[1]=((((-1.0)*px*r00))+((x639*x648))+(((-1.0)*r02*x640))+(((-1.0)*r02*x645))+((x649*(IKsin(j3))))+(((-1.0)*py*r01))+((x647*x648)));
evalcond[2]=(((sj0*x641))+(((-1.0)*x640*x647))+(((-1.0)*x639*x645))+(((-1.0)*x639*x640))+(((-1.0)*r02*x648))+(((-1.0)*x645*x647))+(((-0.273)*cj4))+((cj0*x651))+(((-1.0)*x638*x649)));
evalcond[3]=(((sj4*x654))+((pp*x644))+(((2.0)*x643*(px*px)))+(((-1.0)*cj0*x641*x642))+((x639*x652))+((pz*x642*x644))+(((0.09385)*sj4))+(((-1.0)*r01*x655))+(((-1.0)*x647*x652))+(((-1.0)*cj0*x641*x650))+(((-2.0)*x644*(py*py)))+(((-0.0361)*x643))+(((-1.0)*pz*x642*x643))+(((-1.0)*x643*x646))+(((0.0361)*x644))+((sj0*x642*x651))+((sj0*x650*x651))+((r00*x653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((cj4*(sj3*sj3)))+((cj4*(cj3*cj3)))));
dummyeval[0]=(((cj4*(sj3*sj3)))+((cj4*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x656=((273.0)*cj4);
gconst2=IKsign(((((-1.0)*x656*(sj3*sj3)))+(((-139.0)*cj3*cj4))+(((-1.0)*x656*(cj3*cj3)))));
IkReal x657=((1.96402877697842)*cj4);
dummyeval[0]=((((-1.0)*cj3*cj4))+(((-1.0)*x657*(cj3*cj3)))+(((-1.0)*x657*(sj3*sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x658=((0.075894)*cj3);
IkReal x659=py*py;
IkReal x660=px*px;
IkReal x661=pz*pz;
IkReal x662=(r01*sj0);
IkReal x663=((2.0)*px);
IkReal x664=((0.19)*cj1);
IkReal x665=(r00*sj1);
IkReal x666=((0.0361)*cj0);
IkReal x667=(py*r02);
IkReal x668=(cj0*cj1);
IkReal x669=((0.38)*pz);
IkReal x670=(pz*r02);
IkReal x671=((2.0)*sj0);
IkReal x672=(cj0*r01);
IkReal x673=((0.38)*py);
IkReal x674=(pz*sj1);
IkReal x675=((1.0)*sj0);
IkReal x676=(pp*r00);
IkReal x677=((0.19)*sj1);
IkReal x678=((0.0361)*sj1);
IkReal x679=((2.0)*cj0);
IkReal x680=(r00*sj0);
IkReal x681=((1.0)*r00);
IkReal x682=(cj1*r00);
IkReal x683=(cj1*r02);
IkReal x684=(cj0*r00);
IkReal x685=(cj0*sj1);
IkReal x686=((0.38)*px);
IkReal x687=(cj1*pz);
IkReal x688=((1.0)*pp);
IkReal x689=(cj0*r02);
IkReal x690=(py*r01);
IkReal x691=((1.0)*r02*sj1);
IkReal x692=(r00*x660);
IkReal x693=((2.0)*x690);
IkReal x694=((2.0)*x659);
IkReal x695=((2.0)*x661);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x675))+((cj0*py)));
evalcond[2]=((1.0)+x672+(((-1.0)*r00*x675)));
evalcond[3]=((0.05775)+(((-1.0)*x688))+((x685*x686))+(((-1.0)*cj1*x669))+x658+((sj0*sj1*x673)));
evalcond[4]=(((cj0*x665))+((sj1*x662))+(((-1.0)*x683)));
evalcond[5]=((((-1.0)*x668*x681))+(((-1.0)*cj1*x662))+(((-1.0)*x691)));
evalcond[6]=(((x662*x677))+(((-1.0)*px*x681))+(((-1.0)*x670))+(((0.19)*cj0*x665))+(((-1.0)*r02*x664))+(((-1.0)*x690)));
evalcond[7]=((((-1.0)*r02*x677))+((px*x689))+(((-1.0)*x662*x664))+((sj0*x667))+(((-1.0)*cj0*pz*x681))+(((-1.0)*x664*x684))+(((-1.0)*pz*x662)));
evalcond[8]=((0.09385)+(((-1.0)*x672*x694))+((r01*x666))+((x665*x673))+(((-1.0)*x675*x676))+(((-0.0361)*x680))+((sj0*x683*x686))+((py*x662*x663))+(((-0.38)*x667*x668))+((r01*x668*x669))+(((-1.0)*r01*sj1*x686))+x658+((x671*x692))+(((-1.0)*cj1*x669*x680))+((pp*x672))+(((-1.0)*py*x663*x684))+(((-1.0)*pz*x667*x679))+((sj0*x663*x670)));
evalcond[9]=(((pz*x663*x682))+(((-1.0)*x665*x666))+((r01*x673))+((pp*sj1*x662))+((x687*x693))+(((-1.0)*x662*x678))+(((0.0361)*x683))+(((-1.0)*x660*x665*x679))+(((-1.0)*py*sj1*x663*x672))+((r02*x669))+(((-1.0)*x663*x670*x685))+(((-1.0)*sj1*x662*x694))+(((-1.0)*x667*x671*x674))+((r00*x686))+(((-1.0)*x683*x688))+(((-1.0)*py*sj0*x663*x665))+((cj0*pp*x665))+((x683*x695)));
evalcond[10]=((((-1.0)*r02*x678))+((r02*sj1*x695))+((x686*x689))+(((-1.0)*x662*x669))+(((-1.0)*x666*x682))+(((-1.0)*cj1*x662*x688))+((cj1*x662*x694))+((x663*x668*x690))+(((0.38)*sj0*x667))+(((-0.0361)*cj1*x662))+(((-1.0)*x668*x676))+((x667*x671*x687))+((pz*x663*x665))+((x674*x693))+(((2.0)*x668*x692))+((x663*x668*x670))+((cj1*py*x663*x680))+(((-1.0)*x669*x684))+(((-1.0)*r02*sj1*x688)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((-19321.0)+(((-74529.0)*(cj3*cj3)))+(((-74529.0)*(sj3*sj3)))+(((-75894.0)*cj3))));
dummyeval[0]=((-1.0)+(((-3.92805755395683)*cj3))+(((-3.85740903679934)*(sj3*sj3)))+(((-3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((19321.0)+(((75894.0)*cj3))+(((74529.0)*(sj3*sj3)))+(((74529.0)*(cj3*cj3)))));
dummyeval[0]=((1.0)+(((3.92805755395683)*cj3))+(((3.85740903679934)*(sj3*sj3)))+(((3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x696=(cj1*py);
IkReal x697=(pz*sj1);
IkReal x698=((139000.0)*sj0);
IkReal x699=((273000.0)*cj3);
IkReal x700=(py*sj1);
IkReal x701=((273000.0)*sj3);
IkReal x702=(cj1*pz);
IkReal x703=((139000.0)*cj0);
IkReal x704=(cj0*r02);
IkReal x705=(r00*x701);
IkReal x706=((273000.0)*cj0*r01);
IkReal x707=(px*r02*sj1);
IkReal x708=(cj1*px*r01);
IkReal x709=((273000.0)*cj0*px*sj1);
CheckValue<IkReal> x710 = IKatan2WithCheck((gconst4*((((x699*x700*x704))+((r00*x696*x699))+((sj0*x700*x701))+((r02*x700*x703))+(((-1.0)*r01*x697*x703))+((cj0*px*sj1*x701))+(((-51870.0)*sj3))+(((-139000.0)*x708))+(((-1.0)*x699*x708))+(((-1.0)*cj0*r01*x697*x699))+(((-1.0)*x698*x707))+((r00*x697*x698))+((r00*sj0*x697*x699))+(((139000.0)*r00*x696))+(((-1.0)*x701*x702))+(((-1.0)*sj0*x699*x707))))),(gconst4*(((-26410.0)+((cj0*r01*x697*x701))+((px*sj1*x703))+((x701*x708))+((cj0*px*sj1*x699))+((sj0*x701*x707))+(((-139000.0)*x702))+(((-1.0)*x696*x705))+(((-1.0)*x699*x702))+(((-1.0)*x700*x701*x704))+((x698*x700))+(((-1.0)*sj0*x697*x705))+((sj0*x699*x700))+(((-51870.0)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
j2array[0]=x710.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x711=IKcos(j2);
IkReal x712=IKsin(j2);
IkReal x713=(px*sj1);
IkReal x714=((0.273)*cj3);
IkReal x715=(py*sj1);
IkReal x716=((1.0)*r00);
IkReal x717=(cj1*sj0);
IkReal x718=((1.0)*px);
IkReal x719=((1.0)*pz);
IkReal x720=(cj0*r01);
IkReal x721=(pz*sj1);
IkReal x722=((0.273)*sj3);
IkReal x723=(cj0*cj1);
IkReal x724=((0.139)*x712);
IkReal x725=((0.139)*x711);
IkReal x726=(x712*x714);
IkReal x727=(x711*x722);
IkReal x728=(x712*x722);
IkReal x729=(x711*x714);
IkReal x730=(x724+x726);
IkReal x731=(x725+x728+x729);
evalcond[0]=((-0.19)+((cj0*x713))+(((-1.0)*cj1*x719))+(((-1.0)*x731))+((sj0*x715)));
evalcond[1]=((((-1.0)*x727))+(((-1.0)*py*x717))+x730+(((-1.0)*sj1*x719))+(((-1.0)*x718*x723)));
evalcond[2]=(((x720*x721))+(((-1.0)*cj1*py*x716))+((r02*sj0*x713))+(((-1.0)*x727))+(((-1.0)*cj0*r02*x715))+x730+(((-1.0)*sj0*x716*x721))+((cj1*px*r01)));
evalcond[3]=(((r01*x713))+((py*r02*x723))+(((-1.0)*r02*x717*x718))+((pz*r00*x717))+(((-1.0)*cj1*x719*x720))+(((0.19)*r00*sj0))+x731+(((-0.19)*x720))+(((-1.0)*x715*x716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x732=((139000.0)*cj1);
IkReal x733=(py*sj0);
IkReal x734=(cj0*px);
IkReal x735=((273000.0)*cj3);
IkReal x736=((139000.0)*sj1);
IkReal x737=((273000.0)*cj1*sj3);
IkReal x738=((273000.0)*sj1*sj3);
CheckValue<IkReal> x739 = IKatan2WithCheck((gconst3*(((((-1.0)*x732*x733))+(((-1.0)*x732*x734))+(((-1.0)*cj1*x734*x735))+(((-1.0)*pz*sj1*x735))+(((-1.0)*cj1*x733*x735))+(((-1.0)*x734*x738))+(((-1.0)*x733*x738))+(((51870.0)*sj3))+((pz*x737))+(((-1.0)*pz*x736))))),(gconst3*(((26410.0)+((cj1*pz*x735))+((x734*x737))+(((-1.0)*x734*x736))+(((-1.0)*x733*x736))+(((-1.0)*sj1*x733*x735))+(((51870.0)*cj3))+((x733*x737))+(((-1.0)*sj1*x734*x735))+((pz*x738))+((pz*x732))))),IKFAST_ATAN2_MAGTHRESH);
if(!x739.valid){
continue;
}
j2array[0]=x739.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x740=IKcos(j2);
IkReal x741=IKsin(j2);
IkReal x742=(px*sj1);
IkReal x743=((0.273)*cj3);
IkReal x744=(py*sj1);
IkReal x745=((1.0)*r00);
IkReal x746=(cj1*sj0);
IkReal x747=((1.0)*px);
IkReal x748=((1.0)*pz);
IkReal x749=(cj0*r01);
IkReal x750=(pz*sj1);
IkReal x751=((0.273)*sj3);
IkReal x752=(cj0*cj1);
IkReal x753=((0.139)*x741);
IkReal x754=((0.139)*x740);
IkReal x755=(x741*x743);
IkReal x756=(x740*x751);
IkReal x757=(x741*x751);
IkReal x758=(x740*x743);
IkReal x759=(x755+x753);
IkReal x760=(x754+x757+x758);
evalcond[0]=((-0.19)+(((-1.0)*x760))+((sj0*x744))+(((-1.0)*cj1*x748))+((cj0*x742)));
evalcond[1]=((((-1.0)*sj1*x748))+(((-1.0)*py*x746))+(((-1.0)*x747*x752))+x759+(((-1.0)*x756)));
evalcond[2]=((((-1.0)*cj0*r02*x744))+(((-1.0)*sj0*x745*x750))+(((-1.0)*cj1*py*x745))+x759+((r02*sj0*x742))+((x749*x750))+((cj1*px*r01))+(((-1.0)*x756)));
evalcond[3]=((((-1.0)*r02*x746*x747))+((py*r02*x752))+(((-1.0)*cj1*x748*x749))+(((-0.19)*x749))+((pz*r00*x746))+(((-1.0)*x744*x745))+(((0.19)*r00*sj0))+((r01*x742))+x760);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x761=((0.075894)*cj3);
IkReal x762=py*py;
IkReal x763=px*px;
IkReal x764=pz*pz;
IkReal x765=(r01*sj0);
IkReal x766=((2.0)*px);
IkReal x767=((0.19)*cj1);
IkReal x768=(r00*sj1);
IkReal x769=((0.0361)*cj0);
IkReal x770=(py*r02);
IkReal x771=(cj0*cj1);
IkReal x772=((0.38)*pz);
IkReal x773=(pz*r02);
IkReal x774=((2.0)*sj0);
IkReal x775=(cj0*r01);
IkReal x776=((0.38)*py);
IkReal x777=(pz*sj1);
IkReal x778=((1.0)*sj0);
IkReal x779=(pp*r00);
IkReal x780=((0.19)*sj1);
IkReal x781=((0.0361)*sj1);
IkReal x782=((2.0)*cj0);
IkReal x783=(r00*sj0);
IkReal x784=((1.0)*r00);
IkReal x785=(cj1*r00);
IkReal x786=(cj1*r02);
IkReal x787=(cj0*r00);
IkReal x788=(cj0*sj1);
IkReal x789=((0.38)*px);
IkReal x790=(cj1*pz);
IkReal x791=((1.0)*pp);
IkReal x792=(cj0*r02);
IkReal x793=(py*r01);
IkReal x794=((1.0)*r02*sj1);
IkReal x795=(r00*x763);
IkReal x796=((2.0)*x793);
IkReal x797=((2.0)*x762);
IkReal x798=((2.0)*x764);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*px*x778))+((cj0*py)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x778))+x775);
evalcond[3]=((0.05775)+(((-1.0)*x791))+((x788*x789))+((sj0*sj1*x776))+x761+(((-1.0)*cj1*x772)));
evalcond[4]=(((sj1*x765))+((cj0*x768))+(((-1.0)*x786)));
evalcond[5]=((((-1.0)*x794))+(((-1.0)*x771*x784))+(((-1.0)*cj1*x765)));
evalcond[6]=((((-1.0)*px*x784))+((x765*x780))+(((0.19)*cj0*x768))+(((-1.0)*r02*x767))+(((-1.0)*x793))+(((-1.0)*x773)));
evalcond[7]=((((-1.0)*x765*x767))+(((-1.0)*cj0*pz*x784))+((px*x792))+(((-1.0)*x767*x787))+((sj0*x770))+(((-1.0)*pz*x765))+(((-1.0)*r02*x780)));
evalcond[8]=((-0.09385)+(((-1.0)*py*x766*x787))+(((-0.38)*x770*x771))+(((-1.0)*x778*x779))+(((-1.0)*cj1*x772*x783))+((x774*x795))+((sj0*x766*x773))+(((-1.0)*x775*x797))+((py*x765*x766))+(((-1.0)*x761))+((sj0*x786*x789))+((pp*x775))+((r01*x771*x772))+(((-1.0)*pz*x770*x782))+(((-1.0)*r01*sj1*x789))+(((-0.0361)*x783))+((x768*x776))+((r01*x769)));
evalcond[9]=((((-1.0)*x765*x781))+((r00*x789))+((x786*x798))+(((-1.0)*x770*x774*x777))+((pz*x766*x785))+((x790*x796))+(((0.0361)*x786))+(((-1.0)*x763*x768*x782))+(((-1.0)*py*sj1*x766*x775))+((r01*x776))+((cj0*pp*x768))+(((-1.0)*x786*x791))+(((-1.0)*x768*x769))+((pp*sj1*x765))+(((-1.0)*x766*x773*x788))+((r02*x772))+(((-1.0)*py*sj0*x766*x768))+(((-1.0)*sj1*x765*x797)));
evalcond[10]=((((2.0)*x771*x795))+((pz*x766*x768))+((cj1*x765*x797))+((cj1*py*x766*x783))+(((-1.0)*x771*x779))+((x766*x771*x793))+(((-1.0)*x769*x785))+(((-0.0361)*cj1*x765))+(((-1.0)*r02*sj1*x791))+(((-1.0)*cj1*x765*x791))+(((-1.0)*x772*x787))+((x770*x774*x790))+(((-1.0)*x765*x772))+(((0.38)*sj0*x770))+((x777*x796))+(((-1.0)*r02*x781))+((x766*x771*x773))+((x789*x792))+((r02*sj1*x798)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((-19321.0)+(((-74529.0)*(cj3*cj3)))+(((-74529.0)*(sj3*sj3)))+(((-75894.0)*cj3))));
dummyeval[0]=((-1.0)+(((-3.92805755395683)*cj3))+(((-3.85740903679934)*(sj3*sj3)))+(((-3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((19321.0)+(((75894.0)*cj3))+(((74529.0)*(sj3*sj3)))+(((74529.0)*(cj3*cj3)))));
dummyeval[0]=((1.0)+(((3.92805755395683)*cj3))+(((3.85740903679934)*(sj3*sj3)))+(((3.85740903679934)*(cj3*cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x799=((273000.0)*sj3);
IkReal x800=(pz*sj1);
IkReal x801=((139000.0)*sj0);
IkReal x802=(px*sj1);
IkReal x803=(r02*sj0);
IkReal x804=((273000.0)*cj3);
IkReal x805=(py*sj1);
IkReal x806=(cj1*pz);
IkReal x807=((139000.0)*cj0);
IkReal x808=(r00*sj0);
IkReal x809=(cj1*py*r00);
IkReal x810=(cj0*x804);
IkReal x811=(cj1*px*r01);
CheckValue<IkReal> x812 = IKatan2WithCheck((gconst6*((((r01*x800*x810))+(((-1.0)*x804*x809))+((sj0*x799*x805))+(((-1.0)*r02*x805*x810))+(((-1.0)*x799*x806))+((r01*x800*x807))+((cj0*x799*x802))+((x802*x803*x804))+(((-1.0)*r00*x800*x801))+(((-51870.0)*sj3))+((r02*x801*x802))+((x804*x811))+(((-1.0)*x800*x804*x808))+(((139000.0)*x811))+(((-139000.0)*x809))+(((-1.0)*r02*x805*x807))))),(gconst6*(((-26410.0)+(((-1.0)*cj0*r01*x799*x800))+((cj0*r02*x799*x805))+(((-1.0)*x804*x806))+((x802*x810))+((x799*x800*x808))+((sj0*x804*x805))+((x799*x809))+((x801*x805))+(((-1.0)*x799*x811))+(((-139000.0)*x806))+((x802*x807))+(((-1.0)*x799*x802*x803))+(((-51870.0)*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
j2array[0]=x812.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x813=IKcos(j2);
IkReal x814=IKsin(j2);
IkReal x815=(px*sj1);
IkReal x816=((0.273)*cj3);
IkReal x817=(py*sj1);
IkReal x818=((1.0)*r00);
IkReal x819=(cj1*sj0);
IkReal x820=((1.0)*px);
IkReal x821=((1.0)*pz);
IkReal x822=(cj0*r01);
IkReal x823=(pz*sj1);
IkReal x824=((0.273)*sj3);
IkReal x825=(cj0*cj1);
IkReal x826=((0.139)*x814);
IkReal x827=((0.139)*x813);
IkReal x828=(x813*x824);
IkReal x829=(x814*x816);
IkReal x830=(x814*x824);
IkReal x831=(x813*x816);
IkReal x832=(x829+x826);
IkReal x833=(x827+x830+x831);
evalcond[0]=((-0.19)+((sj0*x817))+((cj0*x815))+(((-1.0)*x833))+(((-1.0)*cj1*x821)));
evalcond[1]=((((-1.0)*x828))+(((-1.0)*x820*x825))+(((-1.0)*py*x819))+(((-1.0)*sj1*x821))+x832);
evalcond[2]=((((-1.0)*cj0*r02*x817))+(((-1.0)*sj0*x818*x823))+(((-1.0)*cj1*py*x818))+(((-1.0)*x832))+((x822*x823))+x828+((cj1*px*r01))+((r02*sj0*x815)));
evalcond[3]=(((py*r02*x825))+((r01*x815))+(((-1.0)*x817*x818))+(((-1.0)*cj1*x821*x822))+(((-0.19)*x822))+(((-1.0)*x833))+(((-1.0)*r02*x819*x820))+(((0.19)*r00*sj0))+((pz*r00*x819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x834=((139000.0)*cj1);
IkReal x835=(py*sj0);
IkReal x836=(cj0*px);
IkReal x837=((273000.0)*cj3);
IkReal x838=((139000.0)*sj1);
IkReal x839=((273000.0)*cj1*sj3);
IkReal x840=((273000.0)*sj1*sj3);
CheckValue<IkReal> x841 = IKatan2WithCheck((gconst5*(((((-1.0)*x835*x840))+(((-1.0)*pz*x838))+(((-1.0)*x836*x840))+((pz*x839))+(((51870.0)*sj3))+(((-1.0)*x834*x836))+(((-1.0)*x834*x835))+(((-1.0)*pz*sj1*x837))+(((-1.0)*cj1*x835*x837))+(((-1.0)*cj1*x836*x837))))),(gconst5*(((26410.0)+(((-1.0)*sj1*x836*x837))+(((-1.0)*x835*x838))+(((-1.0)*sj1*x835*x837))+(((-1.0)*x836*x838))+((x835*x839))+((pz*x834))+((x836*x839))+((pz*x840))+(((51870.0)*cj3))+((cj1*pz*x837))))),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
j2array[0]=x841.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x842=IKcos(j2);
IkReal x843=IKsin(j2);
IkReal x844=(px*sj1);
IkReal x845=((0.273)*cj3);
IkReal x846=(py*sj1);
IkReal x847=((1.0)*r00);
IkReal x848=(cj1*sj0);
IkReal x849=((1.0)*px);
IkReal x850=((1.0)*pz);
IkReal x851=(cj0*r01);
IkReal x852=(pz*sj1);
IkReal x853=((0.273)*sj3);
IkReal x854=(cj0*cj1);
IkReal x855=((0.139)*x843);
IkReal x856=((0.139)*x842);
IkReal x857=(x842*x853);
IkReal x858=(x843*x845);
IkReal x859=(x843*x853);
IkReal x860=(x842*x845);
IkReal x861=(x855+x858);
IkReal x862=(x856+x859+x860);
evalcond[0]=((-0.19)+(((-1.0)*x862))+((cj0*x844))+(((-1.0)*cj1*x850))+((sj0*x846)));
evalcond[1]=((((-1.0)*x857))+(((-1.0)*x849*x854))+(((-1.0)*sj1*x850))+(((-1.0)*py*x848))+x861);
evalcond[2]=((((-1.0)*x861))+((r02*sj0*x844))+(((-1.0)*cj0*r02*x846))+(((-1.0)*cj1*py*x847))+((x851*x852))+x857+((cj1*px*r01))+(((-1.0)*sj0*x847*x852)));
evalcond[3]=((((-1.0)*x862))+(((-0.19)*x851))+(((-1.0)*cj1*x850*x851))+((r01*x844))+(((-1.0)*x846*x847))+((py*r02*x854))+(((0.19)*r00*sj0))+((pz*r00*x848))+(((-1.0)*r02*x848*x849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x863=((139.0)*sj1);
IkReal x864=(cj0*r00);
IkReal x865=((1000.0)*cj4);
IkReal x866=(cj1*cj3);
IkReal x867=((273.0)*r02);
IkReal x868=(cj1*sj3);
IkReal x869=((190.0)*cj4);
IkReal x870=((273.0)*r01);
IkReal x871=(cj3*sj1);
IkReal x872=(cj0*px);
IkReal x873=(sj1*sj3);
IkReal x874=(sj0*x873);
CheckValue<IkReal> x875 = IKatan2WithCheck((gconst2*((((sj3*x869))+(((-1.0)*x866*x867))+((x863*x864))+(((-1.0)*x865*x872*x873))+((pz*x865*x868))+(((273.0)*x864*x871))+(((-1.0)*py*x865*x874))+((sj0*x870*x871))+(((-139.0)*cj1*r02))+((r01*sj0*x863))))),(gconst2*((((x867*x868))+((cj3*x869))+(((-1.0)*py*sj0*x865*x871))+(((-273.0)*x864*x873))+((pz*x865*x866))+(((-1.0)*x870*x874))+(((-1.0)*x865*x871*x872))))),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
j2array[0]=x875.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x876=IKcos(j2);
IkReal x877=IKsin(j2);
IkReal x878=pz*pz;
IkReal x879=py*py;
IkReal x880=px*px;
IkReal x881=(px*sj1);
IkReal x882=(sj0*sj1);
IkReal x883=((0.055208)*sj3);
IkReal x884=(pp*r01);
IkReal x885=(cj1*sj0);
IkReal x886=(pz*r01);
IkReal x887=((0.38)*sj0);
IkReal x888=((1.0)*sj1);
IkReal x889=(py*r00);
IkReal x890=(pz*r02);
IkReal x891=((2.0)*cj0);
IkReal x892=((2.0)*py);
IkReal x893=(pz*r00);
IkReal x894=(pp*r02);
IkReal x895=((1.0)*cj1);
IkReal x896=(cj0*r00);
IkReal x897=((0.0361)*cj1);
IkReal x898=(py*r02);
IkReal x899=((0.0361)*r01);
IkReal x900=((0.0361)*sj1);
IkReal x901=(py*r01);
IkReal x902=((2.0)*px);
IkReal x903=(cj1*px);
IkReal x904=((0.09385)*cj3);
IkReal x905=((0.38)*cj0);
IkReal x906=(px*r02);
IkReal x907=(cj4*x877);
IkReal x908=(cj4*x876);
IkReal x909=((0.273)*sj3*sj4);
IkReal x910=((0.139)*x877);
IkReal x911=((0.139)*x876);
IkReal x912=(r00*x880);
IkReal x913=((0.273)*x876);
IkReal x914=((0.273)*cj3*x877);
IkReal x915=(x890*x892);
IkReal x916=((2.0)*r01*x879);
IkReal x917=((2.0)*r02*x878);
evalcond[0]=(((sj1*x896))+((cj3*x907))+((r01*x882))+(((-1.0)*sj3*x908))+(((-1.0)*r02*x895)));
evalcond[1]=(((sj3*x907))+((cj3*x908))+(((-1.0)*x895*x896))+(((-1.0)*r01*x885))+(((-1.0)*r02*x888)));
evalcond[2]=((-0.19)+(((-1.0)*cj3*x913))+((cj0*x881))+((py*x882))+(((-1.0)*pz*x895))+(((-1.0)*x911))+(((-0.273)*sj3*x877)));
evalcond[3]=((((-1.0)*pz*x888))+(((-1.0)*cj0*px*x895))+(((-1.0)*sj3*x913))+(((-1.0)*py*x885))+x910+x914);
evalcond[4]=(((r02*sj0*x881))+((r01*x903))+(((-1.0)*x876*x909))+(((-1.0)*cj0*x888*x898))+(((-1.0)*x882*x893))+(((-1.0)*x889*x895))+((cj0*sj1*x886))+((sj4*x914))+((sj4*x910)));
evalcond[5]=((((-1.0)*cj0*x886*x895))+((cj3*sj4*x913))+((r01*x881))+(((-1.0)*x885*x906))+(((-0.19)*cj0*r01))+((x877*x909))+((cj0*cj1*x898))+(((0.19)*r00*sj0))+(((-1.0)*x888*x889))+((x885*x893))+((sj4*x911)));
evalcond[6]=(((r02*x897))+(((-1.0)*x881*x890*x891))+(((-1.0)*x896*x900))+((cj1*x886*x892))+(((-1.0)*x882*x899))+(((-1.0)*x881*x891*x901))+(((-2.0)*sj0*x881*x889))+((x882*x884))+((pp*sj1*x896))+(((0.075894)*x907))+(((-1.0)*x883*x908))+(((0.38)*px*r00))+(((-1.0)*sj1*x891*x912))+(((-1.0)*x882*x915))+(((-1.0)*x882*x916))+(((-1.0)*x894*x895))+(((0.38)*x890))+((cj1*x893*x902))+(((0.38)*x901))+((cj1*x917))+((x904*x907)));
evalcond[7]=(((sj1*x886*x892))+(((-1.0)*x884*x885))+(((-1.0)*x886*x887))+((x905*x906))+((x885*x916))+((x885*x915))+(((-1.0)*x896*x897))+(((-1.0)*x893*x905))+(((-1.0)*pp*x895*x896))+(((0.075894)*x908))+((x883*x907))+(((-1.0)*x888*x894))+(((-1.0)*r02*x900))+((x885*x889*x902))+(((-1.0)*x885*x899))+((sj1*x917))+((cj1*x891*x912))+(((2.0)*x881*x893))+((x891*x901*x903))+((x904*x908))+((x887*x898))+((x890*x891*x903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x918=((1.0)*sj1);
IkReal x919=(cj1*sj3);
IkReal x920=(cj0*r00);
IkReal x921=(cj3*r02);
IkReal x922=(r01*sj0);
IkReal x923=(sj1*sj3);
IkReal x924=(cj3*x922);
CheckValue<IkReal> x925 = IKatan2WithCheck((gconst1*((((x919*x920))+((x919*x922))+(((-1.0)*x918*x924))+(((-1.0)*cj3*x918*x920))+((cj1*x921))+((r02*x923))))),(gconst1*((((x920*x923))+((cj1*cj3*x920))+(((-1.0)*r02*x919))+((sj1*x921))+((x922*x923))+((cj1*x924))))),IKFAST_ATAN2_MAGTHRESH);
if(!x925.valid){
continue;
}
j2array[0]=x925.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x926=IKcos(j2);
IkReal x927=IKsin(j2);
IkReal x928=pz*pz;
IkReal x929=py*py;
IkReal x930=px*px;
IkReal x931=(px*sj1);
IkReal x932=(sj0*sj1);
IkReal x933=((0.055208)*sj3);
IkReal x934=(pp*r01);
IkReal x935=(cj1*sj0);
IkReal x936=(pz*r01);
IkReal x937=((0.38)*sj0);
IkReal x938=((1.0)*sj1);
IkReal x939=(py*r00);
IkReal x940=(pz*r02);
IkReal x941=((2.0)*cj0);
IkReal x942=((2.0)*py);
IkReal x943=(pz*r00);
IkReal x944=(pp*r02);
IkReal x945=((1.0)*cj1);
IkReal x946=(cj0*r00);
IkReal x947=((0.0361)*cj1);
IkReal x948=(py*r02);
IkReal x949=((0.0361)*r01);
IkReal x950=((0.0361)*sj1);
IkReal x951=(py*r01);
IkReal x952=((2.0)*px);
IkReal x953=(cj1*px);
IkReal x954=((0.09385)*cj3);
IkReal x955=((0.38)*cj0);
IkReal x956=(px*r02);
IkReal x957=(cj4*x927);
IkReal x958=(cj4*x926);
IkReal x959=((0.273)*sj3*sj4);
IkReal x960=((0.139)*x927);
IkReal x961=((0.139)*x926);
IkReal x962=(r00*x930);
IkReal x963=((0.273)*x926);
IkReal x964=((0.273)*cj3*x927);
IkReal x965=(x940*x942);
IkReal x966=((2.0)*r01*x929);
IkReal x967=((2.0)*r02*x928);
evalcond[0]=((((-1.0)*r02*x945))+((sj1*x946))+((cj3*x957))+((r01*x932))+(((-1.0)*sj3*x958)));
evalcond[1]=((((-1.0)*x945*x946))+(((-1.0)*r02*x938))+((cj3*x958))+(((-1.0)*r01*x935))+((sj3*x957)));
evalcond[2]=((-0.19)+(((-0.273)*sj3*x927))+(((-1.0)*pz*x945))+(((-1.0)*cj3*x963))+((cj0*x931))+((py*x932))+(((-1.0)*x961)));
evalcond[3]=((((-1.0)*cj0*px*x945))+(((-1.0)*sj3*x963))+(((-1.0)*pz*x938))+(((-1.0)*py*x935))+x960+x964);
evalcond[4]=((((-1.0)*x932*x943))+((sj4*x960))+((sj4*x964))+(((-1.0)*x939*x945))+((r01*x953))+(((-1.0)*x926*x959))+((r02*sj0*x931))+((cj0*sj1*x936))+(((-1.0)*cj0*x938*x948)));
evalcond[5]=((((-1.0)*x935*x956))+((sj4*x961))+((x927*x959))+((cj0*cj1*x948))+(((-0.19)*cj0*r01))+(((-1.0)*cj0*x936*x945))+((cj3*sj4*x963))+(((-1.0)*x938*x939))+((x935*x943))+(((0.19)*r00*sj0))+((r01*x931)));
evalcond[6]=((((0.075894)*x957))+((cj1*x936*x942))+((r02*x947))+(((-1.0)*sj1*x941*x962))+(((0.38)*x940))+((cj1*x967))+((pp*sj1*x946))+(((0.38)*x951))+(((0.38)*px*r00))+(((-1.0)*x932*x949))+((cj1*x943*x952))+(((-1.0)*x931*x940*x941))+(((-1.0)*x944*x945))+(((-1.0)*x946*x950))+(((-1.0)*x932*x965))+(((-1.0)*x932*x966))+(((-1.0)*x933*x958))+(((-2.0)*sj0*x931*x939))+(((-1.0)*x931*x941*x951))+((x932*x934))+((x954*x957)));
evalcond[7]=((((0.075894)*x958))+((x955*x956))+(((2.0)*x931*x943))+((sj1*x936*x942))+((x933*x957))+((x940*x941*x953))+(((-1.0)*x934*x935))+((cj1*x941*x962))+(((-1.0)*x946*x947))+((x937*x948))+(((-1.0)*x938*x944))+(((-1.0)*x943*x955))+((x935*x939*x952))+((x941*x951*x953))+((sj1*x967))+((x935*x966))+((x935*x965))+(((-1.0)*pp*x945*x946))+(((-1.0)*x936*x937))+(((-1.0)*x935*x949))+(((-1.0)*r02*x950))+((x954*x958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
