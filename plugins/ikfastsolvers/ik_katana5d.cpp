#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 65 generated on 2013-07-18 15:24:29.872785
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==65);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((IkReal(0.139000000000000))*(x3));
x11=((IkReal(0.273000000000000))*(x0));
x12=((IkReal(0.273000000000000))*(x6));
x13=((IkReal(1.00000000000000))*(x5));
x14=((IkReal(1.00000000000000))*(x7));
x15=((IkReal(0.190000000000000))*(x1));
x16=((x0)*(x2));
x17=((x1)*(x3));
x18=((x2)*(x4));
x19=((x1)*(x4));
x20=((x2)*(x3));
eetrans[0]=((((IkReal(0.139000000000000))*(x0)*(x19)))+(((x0)*(x15)))+(((x7)*(((((x11)*(x20)))+(((x11)*(x19)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x11)*(x18)))+(((x11)*(x17)))))))+(((x10)*(x16))));
IkReal x21=((IkReal(1.00000000000000))*(x6));
IkReal x22=((IkReal(1.00000000000000))*(x12));
eetrans[1]=((((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x22)))+(((x12)*(x18)))))))+(((IkReal(-0.139000000000000))*(x19)*(x6)))+(((IkReal(-1.00000000000000))*(x10)*(x2)*(x21)))+(((x7)*(((((IkReal(-1.00000000000000))*(x19)*(x22)))+(((IkReal(-1.00000000000000))*(x20)*(x22)))))))+(((IkReal(-1.00000000000000))*(x15)*(x21))));
eetrans[2]=((IkReal(0.201500000000000))+(((x7)*(((((IkReal(-0.273000000000000))*(x17)))+(((IkReal(0.273000000000000))*(x18)))))))+(((IkReal(-1.00000000000000))*(x1)*(x10)))+(((IkReal(0.190000000000000))*(x2)))+(((IkReal(0.139000000000000))*(x18)))+(((x5)*(((((IkReal(0.273000000000000))*(x20)))+(((IkReal(0.273000000000000))*(x19))))))));
eerot[0]=((((x9)*(((((x7)*(((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((x16)*(x4)))))))+(((x5)*(((((x0)*(x19)))+(((x16)*(x3)))))))))))+(((x6)*(x8))));
eerot[1]=((((x0)*(x8)))+(((IkReal(-1.00000000000000))*(x9)*(((((x14)*(((((x18)*(x6)))+(((IkReal(-1.00000000000000))*(x17)*(x6)))))))+(((x13)*(((((x19)*(x6)))+(((x20)*(x6))))))))))));
eerot[2]=((IkReal(-1.00000000000000))*(x9)*(((((x13)*(((((IkReal(-1.00000000000000))*(x18)))+(x17)))))+(((x14)*(((x19)+(x20))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((IkReal(-1.00000000000000))*(r01));
new_py=((IkReal(-1.00000000000000))*(py));
new_r02=((IkReal(-1.00000000000000))*(r02));
new_pz=((IkReal(0.201500000000000))+(((IkReal(-1.00000000000000))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

CheckValue<IkReal> x23 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x23.valid ) {
    continue;
}
CheckValue<IkReal> x24 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x24.valid ) {
    continue;
}
CheckValue<IkReal> x25 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x25.valid ) {
    continue;
}
pp=((x23.value)+(x24.value)+(x25.value));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x27 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(py)),px,IKFAST_ATAN2_MAGTHRESH);
if( !x27.valid ) {
    continue;
}
IkReal x26=x27.value;
j0array[0]=((IkReal(-1.00000000000000))*(x26));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x26))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
CheckValue<IkReal> x105 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x105.valid ) {
    continue;
}
IkReal x28=x105.value;
CheckValue<IkReal> x106 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x106.valid ) {
    continue;
}
IkReal x29=x106.value;
CheckValue<IkReal> x107 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x107.valid ) {
    continue;
}
IkReal x30=x107.value;
CheckValue<IkReal> x108 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x108.valid ) {
    continue;
}
IkReal x31=x108.value;
CheckValue<IkReal> x109 = IKPowWithIntegerCheck(pz,3.00000000000000);
if( !x109.valid ) {
    continue;
}
IkReal x32=x109.value;
CheckValue<IkReal> x110 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x110.valid ) {
    continue;
}
IkReal x33=x110.value;
CheckValue<IkReal> x111 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x111.valid ) {
    continue;
}
IkReal x34=x111.value;
IkReal x35=((py)*(sj0));
IkReal x36=((IkReal(9.63538693604066))*(pp));
IkReal x37=((px)*(r00));
IkReal x38=((IkReal(3.66144703569545))*(r02));
IkReal x39=((r01)*(sj0));
IkReal x40=((IkReal(19.2707738720813))*(r02));
IkReal x41=((cj0)*(px));
IkReal x42=((IkReal(3.66144703569545))*(pz));
IkReal x43=((cj0)*(r00));
IkReal x44=((IkReal(0.272883986123346))*(r02));
IkReal x45=((pp)*(pz));
IkReal x46=((py)*(r01));
IkReal x47=((IkReal(0.556443595556348))*(x34));
IkReal x48=((IkReal(19.2707738720813))*(x31));
IkReal x49=((IkReal(1.43623150591235))*(pz)*(r02));
IkReal x50=((IkReal(19.2707738720813))*(x28));
IkReal x51=((IkReal(19.2707738720813))*(x30));
IkReal x52=((x39)*(x44));
IkReal x53=((x43)*(x44));
IkReal x54=((x43)*(x46));
IkReal x55=((IkReal(0.879787910356000))*(x31)*(x35));
IkReal x56=((x43)*(x49));
IkReal x57=((x39)*(x49));
IkReal x58=((IkReal(0.879787910356000))*(x28)*(x41));
IkReal x59=((IkReal(0.879787910356000))*(x37)*(x39));
IkReal x60=((IkReal(0.879787910356000))*(x54));
IkReal x61=((x41)*(x47));
IkReal x62=((pp)*(x38)*(x39));
IkReal x63=((pp)*(x38)*(x43));
IkReal x64=((x35)*(x47));
IkReal x65=((x30)*(x38)*(x43));
IkReal x66=((x28)*(x41)*(x42));
CheckValue<IkReal> x112 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x112.valid ) {
    continue;
}
IkReal x67=((x41)*(x50)*(x112.value));
IkReal x68=((x38)*(x41)*(x46));
IkReal x69=((x34)*(x41)*(x42));
IkReal x70=((x33)*(x38)*(x43));
IkReal x71=((x37)*(x39)*(x42));
IkReal x72=((x35)*(x37)*(x38));
IkReal x73=((x30)*(x38)*(x39));
IkReal x74=((x42)*(x54));
IkReal x75=((x34)*(x35)*(x36));
IkReal x76=((x32)*(x39)*(x40));
IkReal x77=((x32)*(x40)*(x43));
IkReal x78=((x34)*(x35)*(x42));
CheckValue<IkReal> x113 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x113.valid ) {
    continue;
}
IkReal x79=((x35)*(x48)*(x113.value));
IkReal x80=((x29)*(x38)*(x39));
IkReal x81=((x34)*(x36)*(x41));
IkReal x82=((x31)*(x35)*(x42));
IkReal x83=((x39)*(x40)*(x45));
IkReal x84=((x31)*(x35)*(x36));
IkReal x85=((x40)*(x43)*(x45));
IkReal x86=((x36)*(x54));
IkReal x87=((x28)*(x36)*(x41));
IkReal x88=((x36)*(x37)*(x39));
IkReal x89=((x30)*(x41)*(x50));
IkReal x90=((pz)*(x29)*(x39)*(x40));
IkReal x91=((IkReal(38.5415477441626))*(x29)*(x37)*(x39));
IkReal x92=((pz)*(x35)*(x37)*(x40));
IkReal x93=((x33)*(x35)*(x50));
IkReal x94=((x37)*(x39)*(x51));
IkReal x95=((x30)*(x35)*(x48));
IkReal x96=((IkReal(38.5415477441626))*(x33)*(x54));
IkReal x97=((x51)*(x54));
IkReal x98=((pz)*(x40)*(x41)*(x46));
IkReal x99=((pz)*(x33)*(x40)*(x43));
IkReal x100=((x29)*(x41)*(x48));
IkReal x101=((x62)+(x63));
IkReal x102=((x61)+(x64)+(x88)+(x83)+(x86)+(x87)+(x84)+(x85));
IkReal x103=((x74)+(x73)+(x72)+(x71)+(x70)+(x78)+(x53)+(x52)+(x65)+(x66)+(x68)+(x69)+(x82)+(x80));
IkReal x104=((x100)+(x77)+(x76)+(x75)+(x79)+(x59)+(x58)+(x55)+(x57)+(x56)+(x60)+(x67)+(x89)+(x81)+(x99)+(x98)+(x91)+(x90)+(x93)+(x92)+(x95)+(x94)+(x97)+(x96));
CheckValue<IkReal> x114 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x114.valid ) {
    continue;
}
CheckValue<IkReal> x115 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x115.valid ) {
    continue;
}
CheckValue<IkReal> x116 = IKPowWithIntegerCheck(pz,3.00000000000000);
if( !x116.valid ) {
    continue;
}
CheckValue<IkReal> x117 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x117.valid ) {
    continue;
}
CheckValue<IkReal> x118 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x118.valid ) {
    continue;
}
CheckValue<IkReal> x119 = IKPowWithIntegerCheck(pz,3.00000000000000);
if( !x119.valid ) {
    continue;
}
CheckValue<IkReal> x120 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x120.valid ) {
    continue;
}
CheckValue<IkReal> x121 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x121.valid ) {
    continue;
}
CheckValue<IkReal> x122 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x122.valid ) {
    continue;
}
CheckValue<IkReal> x123 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x123.valid ) {
    continue;
}
CheckValue<IkReal> x124 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x124.valid ) {
    continue;
}
CheckValue<IkReal> x125 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x125.valid ) {
    continue;
}
CheckValue<IkReal> x126 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x126.valid ) {
    continue;
}
CheckValue<IkReal> x127 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x127.valid ) {
    continue;
}
CheckValue<IkReal> x128 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x128.valid ) {
    continue;
}
CheckValue<IkReal> x129 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x129.valid ) {
    continue;
}
CheckValue<IkReal> x130 = IKPowWithIntegerCheck(py,4.00000000000000);
if( !x130.valid ) {
    continue;
}
CheckValue<IkReal> x131 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x131.valid ) {
    continue;
}
CheckValue<IkReal> x132 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x132.valid ) {
    continue;
}
CheckValue<IkReal> x133 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x133.valid ) {
    continue;
}
CheckValue<IkReal> x134 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x134.valid ) {
    continue;
}
CheckValue<IkReal> x135 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x135.valid ) {
    continue;
}
CheckValue<IkReal> x136 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x136.valid ) {
    continue;
}
CheckValue<IkReal> x137 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x137.valid ) {
    continue;
}
CheckValue<IkReal> x138 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x138.valid ) {
    continue;
}
CheckValue<IkReal> x139 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x139.valid ) {
    continue;
}
CheckValue<IkReal> x140 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x140.valid ) {
    continue;
}
CheckValue<IkReal> x141 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x141.valid ) {
    continue;
}
CheckValue<IkReal> x142 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x142.valid ) {
    continue;
}
CheckValue<IkReal> x143 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x143.valid ) {
    continue;
}
CheckValue<IkReal> x144 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x144.valid ) {
    continue;
}
CheckValue<IkReal> x145 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x145.valid ) {
    continue;
}
CheckValue<IkReal> x146 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x146.valid ) {
    continue;
}
CheckValue<IkReal> x147 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x147.valid ) {
    continue;
}
CheckValue<IkReal> x148 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x148.valid ) {
    continue;
}
CheckValue<IkReal> x149 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x149.valid ) {
    continue;
}
CheckValue<IkReal> x150 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x150.valid ) {
    continue;
}
CheckValue<IkReal> x151 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x151.valid ) {
    continue;
}
CheckValue<IkReal> x152 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x152.valid ) {
    continue;
}
CheckValue<IkReal> x153 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x153.valid ) {
    continue;
}
CheckValue<IkReal> x154 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x154.valid ) {
    continue;
}
CheckValue<IkReal> x155 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x155.valid ) {
    continue;
}
CheckValue<IkReal> x156 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x156.valid ) {
    continue;
}
CheckValue<IkReal> x157 = IKPowWithIntegerCheck(pz,4.00000000000000);
if( !x157.valid ) {
    continue;
}
CheckValue<IkReal> x158 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x158.valid ) {
    continue;
}
CheckValue<IkReal> x159 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x159.valid ) {
    continue;
}
CheckValue<IkReal> x160 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x160.valid ) {
    continue;
}
CheckValue<IkReal> x161 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x161.valid ) {
    continue;
}
CheckValue<IkReal> x162 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x162.valid ) {
    continue;
}
CheckValue<IkReal> x163 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x163.valid ) {
    continue;
}
CheckValue<IkReal> x164 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x164.valid ) {
    continue;
}
CheckValue<IkReal> x165 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x165.valid ) {
    continue;
}
CheckValue<IkReal> x166 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x166.valid ) {
    continue;
}
CheckValue<IkReal> x167 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x167.valid ) {
    continue;
}
CheckValue<IkReal> x168 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x168.valid ) {
    continue;
}
CheckValue<IkReal> x169 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x169.valid ) {
    continue;
}
CheckValue<IkReal> x170 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x170.valid ) {
    continue;
}
CheckValue<IkReal> x171 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x171.valid ) {
    continue;
}
CheckValue<IkReal> x172 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x172.valid ) {
    continue;
}
CheckValue<IkReal> x173 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x173.valid ) {
    continue;
}
CheckValue<IkReal> x174 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x174.valid ) {
    continue;
}
CheckValue<IkReal> x175 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x175.valid ) {
    continue;
}
CheckValue<IkReal> x176 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x176.valid ) {
    continue;
}
CheckValue<IkReal> x177 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x177.valid ) {
    continue;
}
CheckValue<IkReal> x178 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x178.valid ) {
    continue;
}
CheckValue<IkReal> x179 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x179.valid ) {
    continue;
}
CheckValue<IkReal> x180 = IKPowWithIntegerCheck(px,4.00000000000000);
if( !x180.valid ) {
    continue;
}
CheckValue<IkReal> x181 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x181.valid ) {
    continue;
}
CheckValue<IkReal> x182 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x182.valid ) {
    continue;
}
CheckValue<IkReal> x183 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x183.valid ) {
    continue;
}
CheckValue<IkReal> x184 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x184.valid ) {
    continue;
}
CheckValue<IkReal> x185 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x185.valid ) {
    continue;
}
CheckValue<IkReal> x186 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x186.valid ) {
    continue;
}
CheckValue<IkReal> x187 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x187.valid ) {
    continue;
}
CheckValue<IkReal> x188 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x188.valid ) {
    continue;
}
CheckValue<IkReal> x189 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x189.valid ) {
    continue;
}
CheckValue<IkReal> x190 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x190.valid ) {
    continue;
}
CheckValue<IkReal> x191 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x191.valid ) {
    continue;
}
CheckValue<IkReal> x192 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x192.valid ) {
    continue;
}
CheckValue<IkReal> x193 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x193.valid ) {
    continue;
}
CheckValue<IkReal> x194 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x194.valid ) {
    continue;
}
CheckValue<IkReal> x195 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x195.valid ) {
    continue;
}
CheckValue<IkReal> x196 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x196.valid ) {
    continue;
}
CheckValue<IkReal> x197 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x197.valid ) {
    continue;
}
CheckValue<IkReal> x198 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x198.valid ) {
    continue;
}
CheckValue<IkReal> x199 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x199.valid ) {
    continue;
}
CheckValue<IkReal> x200 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x200.valid ) {
    continue;
}
CheckValue<IkReal> x201 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x201.valid ) {
    continue;
}
CheckValue<IkReal> x202 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x202.valid ) {
    continue;
}
CheckValue<IkReal> x203 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x203.valid ) {
    continue;
}
CheckValue<IkReal> x204 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x204.valid ) {
    continue;
}
CheckValue<IkReal> x205 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x205.valid ) {
    continue;
}
CheckValue<IkReal> x206 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x206.valid ) {
    continue;
}
CheckValue<IkReal> x207 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x207.valid ) {
    continue;
}
CheckValue<IkReal> x208 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x208.valid ) {
    continue;
}
CheckValue<IkReal> x209 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x209.valid ) {
    continue;
}
CheckValue<IkReal> x210 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x210.valid ) {
    continue;
}
CheckValue<IkReal> x211 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x211.valid ) {
    continue;
}
CheckValue<IkReal> x212 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x212.valid ) {
    continue;
}
CheckValue<IkReal> x213 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x213.valid ) {
    continue;
}
CheckValue<IkReal> x214 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x214.valid ) {
    continue;
}
CheckValue<IkReal> x215 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x215.valid ) {
    continue;
}
CheckValue<IkReal> x216 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x216.valid ) {
    continue;
}
CheckValue<IkReal> x217 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x217.valid ) {
    continue;
}
CheckValue<IkReal> x218 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x218.valid ) {
    continue;
}
CheckValue<IkReal> x219 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x219.valid ) {
    continue;
}
CheckValue<IkReal> x220 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x220.valid ) {
    continue;
}
CheckValue<IkReal> x221 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x221.valid ) {
    continue;
}
CheckValue<IkReal> x222 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x222.valid ) {
    continue;
}
CheckValue<IkReal> x223 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x223.valid ) {
    continue;
}
CheckValue<IkReal> x224 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x224.valid ) {
    continue;
}
CheckValue<IkReal> x225 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x225.valid ) {
    continue;
}
CheckValue<IkReal> x226 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x226.valid ) {
    continue;
}
CheckValue<IkReal> x227 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x227.valid ) {
    continue;
}
CheckValue<IkReal> x228 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x228.valid ) {
    continue;
}
CheckValue<IkReal> x229 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x229.valid ) {
    continue;
}
CheckValue<IkReal> x230 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x230.valid ) {
    continue;
}
CheckValue<IkReal> x231 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x231.valid ) {
    continue;
}
CheckValue<IkReal> x232 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x232.valid ) {
    continue;
}
CheckValue<IkReal> x233 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x233.valid ) {
    continue;
}
CheckValue<IkReal> x234 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x234.valid ) {
    continue;
}
CheckValue<IkReal> x235 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x235.valid ) {
    continue;
}
CheckValue<IkReal> x236 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x236.valid ) {
    continue;
}
CheckValue<IkReal> x237 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x237.valid ) {
    continue;
}
CheckValue<IkReal> x238 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x238.valid ) {
    continue;
}
CheckValue<IkReal> x239 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x239.valid ) {
    continue;
}
CheckValue<IkReal> x240 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x240.valid ) {
    continue;
}
CheckValue<IkReal> x241 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x241.valid ) {
    continue;
}
CheckValue<IkReal> x242 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x242.valid ) {
    continue;
}
CheckValue<IkReal> x243 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x243.valid ) {
    continue;
}
CheckValue<IkReal> x244 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x244.valid ) {
    continue;
}
CheckValue<IkReal> x245 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x245.valid ) {
    continue;
}
CheckValue<IkReal> x246 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x246.valid ) {
    continue;
}
CheckValue<IkReal> x247 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x247.valid ) {
    continue;
}
CheckValue<IkReal> x248 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x248.valid ) {
    continue;
}
CheckValue<IkReal> x249 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x249.valid ) {
    continue;
}
CheckValue<IkReal> x250 = IKPowWithIntegerCheck(pz,3.00000000000000);
if( !x250.valid ) {
    continue;
}
CheckValue<IkReal> x251 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x251.valid ) {
    continue;
}
CheckValue<IkReal> x252 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x252.valid ) {
    continue;
}
CheckValue<IkReal> x253 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x253.valid ) {
    continue;
}
CheckValue<IkReal> x254 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x254.valid ) {
    continue;
}
CheckValue<IkReal> x255 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x255.valid ) {
    continue;
}
CheckValue<IkReal> x256 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x256.valid ) {
    continue;
}
CheckValue<IkReal> x257 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x257.valid ) {
    continue;
}
CheckValue<IkReal> x258 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x258.valid ) {
    continue;
}
CheckValue<IkReal> x259 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x259.valid ) {
    continue;
}
CheckValue<IkReal> x260 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x260.valid ) {
    continue;
}
CheckValue<IkReal> x261 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x261.valid ) {
    continue;
}
CheckValue<IkReal> x262 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x262.valid ) {
    continue;
}
CheckValue<IkReal> x263 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x263.valid ) {
    continue;
}
CheckValue<IkReal> x264 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x264.valid ) {
    continue;
}
CheckValue<IkReal> x265 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x265.valid ) {
    continue;
}
CheckValue<IkReal> x266 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x266.valid ) {
    continue;
}
CheckValue<IkReal> x267 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x267.valid ) {
    continue;
}
CheckValue<IkReal> x268 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x268.valid ) {
    continue;
}
CheckValue<IkReal> x269 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x269.valid ) {
    continue;
}
CheckValue<IkReal> x270 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x270.valid ) {
    continue;
}
CheckValue<IkReal> x271 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x271.valid ) {
    continue;
}
CheckValue<IkReal> x272 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x272.valid ) {
    continue;
}
CheckValue<IkReal> x273 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x273.valid ) {
    continue;
}
CheckValue<IkReal> x274 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x274.valid ) {
    continue;
}
CheckValue<IkReal> x275 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x275.valid ) {
    continue;
}
CheckValue<IkReal> x276 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x276.valid ) {
    continue;
}
CheckValue<IkReal> x277 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x277.valid ) {
    continue;
}
CheckValue<IkReal> x278 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x278.valid ) {
    continue;
}
CheckValue<IkReal> x279 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x279.valid ) {
    continue;
}
CheckValue<IkReal> x280 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x280.valid ) {
    continue;
}
CheckValue<IkReal> x281 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x281.valid ) {
    continue;
}
CheckValue<IkReal> x282 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x282.valid ) {
    continue;
}
CheckValue<IkReal> x283 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x283.valid ) {
    continue;
}
CheckValue<IkReal> x284 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x284.valid ) {
    continue;
}
CheckValue<IkReal> x285 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x285.valid ) {
    continue;
}
CheckValue<IkReal> x286 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x286.valid ) {
    continue;
}
CheckValue<IkReal> x287 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x287.valid ) {
    continue;
}
CheckValue<IkReal> x288 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x288.valid ) {
    continue;
}
CheckValue<IkReal> x289 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x289.valid ) {
    continue;
}
CheckValue<IkReal> x290 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x290.valid ) {
    continue;
}
CheckValue<IkReal> x291 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x291.valid ) {
    continue;
}
CheckValue<IkReal> x292 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x292.valid ) {
    continue;
}
CheckValue<IkReal> x293 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x293.valid ) {
    continue;
}
CheckValue<IkReal> x294 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x294.valid ) {
    continue;
}
op[0]=((((IkReal(9.63538693604066))*(r01)*(r02)*(x114.value)*(x115.value)))+(((IkReal(-50.7125628212666))*(py)*(r01)*(r02)*(x116.value)))+(((IkReal(0.484507825194381))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(9.63538693604066))*(r00)*(r02)*(x117.value)*(x118.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.366398266383651))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(9.63538693604066))*(x119.value)*(x120.value)))+(((IkReal(-50.7125628212666))*(pz)*(r00)*(r02)*(x121.value)*(x122.value)))+(((IkReal(25.3562814106333))*(pp)*(x123.value)*(x124.value)*(x125.value)))+(((IkReal(-1.83072351784773))*(px)*(py)*(r00)*(r01)))+(((IkReal(-6.33907035265833))*(x126.value)*(x127.value)))+(((IkReal(-0.850906091578033))*(cj0)*(r00)*(r01)*(sj0)*(x128.value)))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*(x129.value)))+(((IkReal(-25.3562814106333))*(x130.value)*(x131.value)*(x132.value)))+(((IkReal(-6.33907035265833))*(x133.value)*(x134.value)*(x135.value)))+(((IkReal(-9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*(x136.value)))+(((IkReal(-25.3562814106333))*(x137.value)*(x138.value)*(x139.value)))+(((IkReal(9.63538693604066))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*(x140.value)))+(((IkReal(-9.63538693604066))*(px)*(r00)*(r02)*(x141.value)*(x142.value)))+(((IkReal(-9.63538693604066))*(cj0)*(py)*(r00)*(r02)*(sj0)*(x143.value)))+(((IkReal(0.366398266383651))*(px)*(pz)*(r00)*(r02)*(x144.value)))+(((IkReal(-9.63538693604066))*(py)*(r01)*(r02)*(x145.value)*(x146.value)))+(((IkReal(-9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*(x147.value)))+(((IkReal(-101.425125642533))*(cj0)*(r00)*(r01)*(sj0)*(x148.value)*(x149.value)))+(((IkReal(-25.3562814106333))*(x150.value)*(x151.value)*(x152.value)*(x153.value)))+(((IkReal(-9.63538693604066))*(pz)*(x154.value)*(x155.value)*(x156.value)))+(((IkReal(-25.3562814106333))*(x157.value)*(x158.value)))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*(x159.value)))+(((IkReal(0.366398266383651))*(py)*(pz)*(r01)*(r02)*(x160.value)))+(((IkReal(-9.63538693604066))*(pz)*(x161.value)*(x162.value)*(x163.value)))+(((IkReal(-0.484507825194381))*(x164.value)*(x165.value)*(x166.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x167.value)))+(((IkReal(-4.81769346802033))*(pp)*(px)*(r00)*(r02)*(x168.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.439893955178000))*(pz)*(x169.value)))+(((IkReal(-6.33907035265833))*(x170.value)*(x171.value)*(x172.value)))+(((IkReal(-9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*(x173.value)))+(((IkReal(4.81769346802033))*(pp)*(pz)*(x174.value)*(x175.value)))+(((IkReal(-0.425453045789016))*(x176.value)*(x177.value)*(x178.value)))+(((IkReal(-25.3562814106333))*(x179.value)*(x180.value)*(x181.value)))+(((IkReal(-101.425125642533))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*(x182.value)))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)*(x183.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*(x184.value)))+(((IkReal(-4.81769346802033))*(pp)*(pz)*(x185.value)))+(((IkReal(-0.278221797778174))*(pz)*(x186.value)*(x187.value)))+(((IkReal(0.278221797778174))*(py)*(r01)*(r02)*(x188.value)))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(py)*(sj0)*(x189.value)*(x190.value)))+(((IkReal(-0.556443595556348))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(25.3562814106333))*(pp)*(x191.value)*(x192.value)))+(((IkReal(-0.850906091578033))*(cj0)*(px)*(py)*(sj0)*(x193.value)))+(((IkReal(-0.425453045789016))*(x194.value)*(x195.value)*(x196.value)))+(((IkReal(-50.7125628212666))*(cj0)*(py)*(sj0)*(x197.value)*(x198.value)))+(((IkReal(-9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*(x199.value)))+(((IkReal(-0.278221797778174))*(pz)*(x200.value)*(x201.value)))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*(x202.value)))+(((IkReal(-0.0528497858676222))*(x203.value)))+(((IkReal(-12.6781407053167))*(cj0)*(r00)*(r01)*(sj0)*(x204.value)))+(((IkReal(-50.7125628212666))*(px)*(py)*(r00)*(r01)*(x205.value)))+(((IkReal(9.63538693604066))*(px)*(r00)*(r02)*(x206.value)*(x207.value)))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*(x208.value)))+(((IkReal(9.63538693604066))*(pz)*(x209.value)*(x210.value)))+(((IkReal(0.439893955178000))*(px)*(r00)*(r02)))+(((IkReal(-3.23059310196597))*(x211.value)*(x212.value)))+(((IkReal(-4.81769346802033))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-4.81769346802033))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-0.915361758923863))*(x213.value)*(x214.value)))+(((IkReal(-25.3562814106333))*(x215.value)*(x216.value)*(x217.value)*(x218.value)))+(((IkReal(1.15761567152105))*(pp)*(x219.value)))+(((IkReal(9.63538693604066))*(py)*(r01)*(r02)*(x220.value)*(x221.value)))+(((IkReal(19.2707738720813))*(cj0)*(py)*(r00)*(r02)*(sj0)*(x222.value)))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(19.2707738720813))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(19.2707738720813))*(cj0)*(px)*(r01)*(r02)*(sj0)*(x223.value)))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)*(x224.value)))+(((IkReal(4.81769346802033))*(pp)*(pz)*(x225.value)*(x226.value)))+(((IkReal(0.0153712106632144))*(x227.value)*(x228.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x229.value)))+(((IkReal(-50.7125628212666))*(pz)*(r01)*(r02)*(x230.value)*(x231.value)))+(((IkReal(0.0153712106632144))*(x232.value)*(x233.value)))+(((IkReal(0.242253912597191))*(pp)*(x234.value)*(x235.value)))+(((IkReal(0.0307424213264288))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(sj0)*(x236.value)*(x237.value)))+(((IkReal(25.3562814106333))*(pp)*(x238.value)*(x239.value)*(x240.value)))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-4.81769346802033))*(pp)*(py)*(r01)*(r02)))+(((IkReal(0.366398266383651))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-9.63538693604066))*(cj0)*(px)*(r01)*(r02)*(sj0)*(x241.value)))+(((IkReal(-4.14595486088983))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-25.3562814106333))*(x242.value)*(x243.value)*(x244.value)))+(((IkReal(0.278221797778174))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.425453045789016))*(x245.value)*(x246.value)*(x247.value)))+(((IkReal(-4.14595486088983))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-50.7125628212666))*(py)*(pz)*(r01)*(r02)*(x248.value)*(x249.value)))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r02)*(x250.value)))+(((IkReal(9.63538693604066))*(pz)*(x251.value)*(x252.value)*(x253.value)))+(((IkReal(19.2707738720813))*(py)*(r01)*(r02)*(x254.value)))+(((IkReal(-25.3562814106333))*(x255.value)*(x256.value)*(x257.value)*(x258.value)))+(((IkReal(-4.81769346802033))*(pp)*(py)*(r01)*(r02)*(x259.value)))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*(x260.value)))+(((IkReal(-101.425125642533))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*(x261.value)))+(((IkReal(-50.7125628212666))*(px)*(pz)*(r00)*(r02)*(x262.value)*(x263.value)))+(((IkReal(-50.7125628212666))*(py)*(r00)*(r01)*(x264.value)*(x265.value)))+(((IkReal(0.278221797778174))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-4.81769346802033))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(0.278221797778174))*(px)*(r00)*(r02)*(x266.value)))+(((IkReal(9.63538693604066))*(pz)*(x267.value)*(x268.value)*(x269.value)))+(((IkReal(19.2707738720813))*(cj0)*(px)*(py)*(pz)*(sj0)*(x270.value)))+(((IkReal(-0.915361758923863))*(x271.value)*(x272.value)))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*(x273.value)))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*(x274.value)))+(((IkReal(19.2707738720813))*(px)*(r00)*(r02)*(x275.value)))+(((IkReal(0.242253912597191))*(pp)*(x276.value)*(x277.value)))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r01)*(x278.value)*(x279.value)))+(((IkReal(-25.3562814106333))*(x280.value)*(x281.value)*(x282.value)*(x283.value)))+(((IkReal(-9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*(x284.value)))+(((IkReal(-0.425453045789016))*(x285.value)*(x286.value)*(x287.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*(x288.value)))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*(x289.value)))+(((IkReal(9.63538693604066))*(pz)*(x290.value)*(x291.value)))+(((IkReal(0.439893955178000))*(py)*(r01)*(r02)))+(((IkReal(-0.484507825194381))*(x292.value)*(x293.value)*(x294.value))));
op[1]=((((IkReal(-1.00000000000000))*(x103)))+(((IkReal(-1.00000000000000))*(x102)))+(x104)+(x101));
CheckValue<IkReal> x295 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x295.valid ) {
    continue;
}
CheckValue<IkReal> x296 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x296.valid ) {
    continue;
}
CheckValue<IkReal> x297 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x297.valid ) {
    continue;
}
CheckValue<IkReal> x298 = IKPowWithIntegerCheck(py,4.00000000000000);
if( !x298.valid ) {
    continue;
}
CheckValue<IkReal> x299 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x299.valid ) {
    continue;
}
CheckValue<IkReal> x300 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x300.valid ) {
    continue;
}
CheckValue<IkReal> x301 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x301.valid ) {
    continue;
}
CheckValue<IkReal> x302 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x302.valid ) {
    continue;
}
CheckValue<IkReal> x303 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x303.valid ) {
    continue;
}
CheckValue<IkReal> x304 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x304.valid ) {
    continue;
}
CheckValue<IkReal> x305 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x305.valid ) {
    continue;
}
CheckValue<IkReal> x306 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x306.valid ) {
    continue;
}
CheckValue<IkReal> x307 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x307.valid ) {
    continue;
}
CheckValue<IkReal> x308 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x308.valid ) {
    continue;
}
CheckValue<IkReal> x309 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x309.valid ) {
    continue;
}
CheckValue<IkReal> x310 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x310.valid ) {
    continue;
}
CheckValue<IkReal> x311 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x311.valid ) {
    continue;
}
CheckValue<IkReal> x312 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x312.valid ) {
    continue;
}
CheckValue<IkReal> x313 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x313.valid ) {
    continue;
}
CheckValue<IkReal> x314 = IKPowWithIntegerCheck(pz,3.00000000000000);
if( !x314.valid ) {
    continue;
}
CheckValue<IkReal> x315 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x315.valid ) {
    continue;
}
CheckValue<IkReal> x316 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x316.valid ) {
    continue;
}
CheckValue<IkReal> x317 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x317.valid ) {
    continue;
}
CheckValue<IkReal> x318 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x318.valid ) {
    continue;
}
CheckValue<IkReal> x319 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x319.valid ) {
    continue;
}
CheckValue<IkReal> x320 = IKPowWithIntegerCheck(pz,4.00000000000000);
if( !x320.valid ) {
    continue;
}
CheckValue<IkReal> x321 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x321.valid ) {
    continue;
}
CheckValue<IkReal> x322 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x322.valid ) {
    continue;
}
CheckValue<IkReal> x323 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x323.valid ) {
    continue;
}
CheckValue<IkReal> x324 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x324.valid ) {
    continue;
}
CheckValue<IkReal> x325 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x325.valid ) {
    continue;
}
CheckValue<IkReal> x326 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x326.valid ) {
    continue;
}
CheckValue<IkReal> x327 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x327.valid ) {
    continue;
}
CheckValue<IkReal> x328 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x328.valid ) {
    continue;
}
CheckValue<IkReal> x329 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x329.valid ) {
    continue;
}
CheckValue<IkReal> x330 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x330.valid ) {
    continue;
}
CheckValue<IkReal> x331 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x331.valid ) {
    continue;
}
CheckValue<IkReal> x332 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x332.valid ) {
    continue;
}
CheckValue<IkReal> x333 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x333.valid ) {
    continue;
}
CheckValue<IkReal> x334 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x334.valid ) {
    continue;
}
CheckValue<IkReal> x335 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x335.valid ) {
    continue;
}
CheckValue<IkReal> x336 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x336.valid ) {
    continue;
}
CheckValue<IkReal> x337 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x337.valid ) {
    continue;
}
CheckValue<IkReal> x338 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x338.valid ) {
    continue;
}
CheckValue<IkReal> x339 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x339.valid ) {
    continue;
}
CheckValue<IkReal> x340 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x340.valid ) {
    continue;
}
CheckValue<IkReal> x341 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x341.valid ) {
    continue;
}
CheckValue<IkReal> x342 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x342.valid ) {
    continue;
}
CheckValue<IkReal> x343 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x343.valid ) {
    continue;
}
CheckValue<IkReal> x344 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x344.valid ) {
    continue;
}
CheckValue<IkReal> x345 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x345.valid ) {
    continue;
}
CheckValue<IkReal> x346 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x346.valid ) {
    continue;
}
CheckValue<IkReal> x347 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x347.valid ) {
    continue;
}
CheckValue<IkReal> x348 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x348.valid ) {
    continue;
}
CheckValue<IkReal> x349 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x349.valid ) {
    continue;
}
CheckValue<IkReal> x350 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x350.valid ) {
    continue;
}
CheckValue<IkReal> x351 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x351.valid ) {
    continue;
}
CheckValue<IkReal> x352 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x352.valid ) {
    continue;
}
CheckValue<IkReal> x353 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x353.valid ) {
    continue;
}
CheckValue<IkReal> x354 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x354.valid ) {
    continue;
}
CheckValue<IkReal> x355 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x355.valid ) {
    continue;
}
CheckValue<IkReal> x356 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x356.valid ) {
    continue;
}
CheckValue<IkReal> x357 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x357.valid ) {
    continue;
}
CheckValue<IkReal> x358 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x358.valid ) {
    continue;
}
CheckValue<IkReal> x359 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x359.valid ) {
    continue;
}
CheckValue<IkReal> x360 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x360.valid ) {
    continue;
}
CheckValue<IkReal> x361 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x361.valid ) {
    continue;
}
CheckValue<IkReal> x362 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x362.valid ) {
    continue;
}
CheckValue<IkReal> x363 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x363.valid ) {
    continue;
}
CheckValue<IkReal> x364 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x364.valid ) {
    continue;
}
CheckValue<IkReal> x365 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x365.valid ) {
    continue;
}
CheckValue<IkReal> x366 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x366.valid ) {
    continue;
}
CheckValue<IkReal> x367 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x367.valid ) {
    continue;
}
CheckValue<IkReal> x368 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x368.valid ) {
    continue;
}
CheckValue<IkReal> x369 = IKPowWithIntegerCheck(pz,3.00000000000000);
if( !x369.valid ) {
    continue;
}
CheckValue<IkReal> x370 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x370.valid ) {
    continue;
}
CheckValue<IkReal> x371 = IKPowWithIntegerCheck(px,4.00000000000000);
if( !x371.valid ) {
    continue;
}
CheckValue<IkReal> x372 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x372.valid ) {
    continue;
}
CheckValue<IkReal> x373 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x373.valid ) {
    continue;
}
CheckValue<IkReal> x374 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x374.valid ) {
    continue;
}
CheckValue<IkReal> x375 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x375.valid ) {
    continue;
}
CheckValue<IkReal> x376 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x376.valid ) {
    continue;
}
CheckValue<IkReal> x377 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x377.valid ) {
    continue;
}
CheckValue<IkReal> x378 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x378.valid ) {
    continue;
}
CheckValue<IkReal> x379 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x379.valid ) {
    continue;
}
CheckValue<IkReal> x380 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x380.valid ) {
    continue;
}
CheckValue<IkReal> x381 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x381.valid ) {
    continue;
}
CheckValue<IkReal> x382 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x382.valid ) {
    continue;
}
CheckValue<IkReal> x383 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x383.valid ) {
    continue;
}
CheckValue<IkReal> x384 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x384.valid ) {
    continue;
}
CheckValue<IkReal> x385 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x385.valid ) {
    continue;
}
CheckValue<IkReal> x386 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x386.valid ) {
    continue;
}
CheckValue<IkReal> x387 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x387.valid ) {
    continue;
}
CheckValue<IkReal> x388 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x388.valid ) {
    continue;
}
CheckValue<IkReal> x389 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x389.valid ) {
    continue;
}
CheckValue<IkReal> x390 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x390.valid ) {
    continue;
}
CheckValue<IkReal> x391 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x391.valid ) {
    continue;
}
CheckValue<IkReal> x392 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x392.valid ) {
    continue;
}
CheckValue<IkReal> x393 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x393.valid ) {
    continue;
}
CheckValue<IkReal> x394 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x394.valid ) {
    continue;
}
CheckValue<IkReal> x395 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x395.valid ) {
    continue;
}
CheckValue<IkReal> x396 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x396.valid ) {
    continue;
}
CheckValue<IkReal> x397 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x397.valid ) {
    continue;
}
CheckValue<IkReal> x398 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x398.valid ) {
    continue;
}
CheckValue<IkReal> x399 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x399.valid ) {
    continue;
}
CheckValue<IkReal> x400 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x400.valid ) {
    continue;
}
CheckValue<IkReal> x401 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x401.valid ) {
    continue;
}
CheckValue<IkReal> x402 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x402.valid ) {
    continue;
}
CheckValue<IkReal> x403 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x403.valid ) {
    continue;
}
CheckValue<IkReal> x404 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x404.valid ) {
    continue;
}
CheckValue<IkReal> x405 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x405.valid ) {
    continue;
}
CheckValue<IkReal> x406 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x406.valid ) {
    continue;
}
CheckValue<IkReal> x407 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x407.valid ) {
    continue;
}
CheckValue<IkReal> x408 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x408.valid ) {
    continue;
}
CheckValue<IkReal> x409 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x409.valid ) {
    continue;
}
CheckValue<IkReal> x410 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x410.valid ) {
    continue;
}
CheckValue<IkReal> x411 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x411.valid ) {
    continue;
}
CheckValue<IkReal> x412 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x412.valid ) {
    continue;
}
CheckValue<IkReal> x413 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x413.valid ) {
    continue;
}
CheckValue<IkReal> x414 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x414.valid ) {
    continue;
}
CheckValue<IkReal> x415 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x415.valid ) {
    continue;
}
CheckValue<IkReal> x416 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x416.valid ) {
    continue;
}
CheckValue<IkReal> x417 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x417.valid ) {
    continue;
}
CheckValue<IkReal> x418 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x418.valid ) {
    continue;
}
op[2]=((((IkReal(-8.29190972177966))*(x295.value)*(x296.value)*(x297.value)))+(((IkReal(-50.7125628212666))*(x298.value)*(x299.value)*(x300.value)))+(((IkReal(-50.7125628212666))*(x301.value)*(x302.value)*(x303.value)*(x304.value)))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(px)*(py)*(sj0)*(x305.value)))+(((IkReal(-6.59009753862360))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.83072351784773))*(x306.value)*(x307.value)))+(((IkReal(-101.425125642533))*(pz)*(r00)*(r02)*(x308.value)*(x309.value)))+(((IkReal(8.29190972177966))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*(x310.value)*(x311.value)*(x312.value)*(x313.value)))+(((IkReal(-101.425125642533))*(py)*(r01)*(r02)*(x314.value)))+(((IkReal(-0.242141564796917))*(x315.value)*(x316.value)))+(((IkReal(-12.6781407053167))*(x317.value)*(x318.value)*(x319.value)))+(((IkReal(-50.7125628212666))*(x320.value)*(x321.value)))+(((IkReal(4.14595486088983))*(pp)*(x322.value)*(x323.value)))+(((IkReal(4.14595486088983))*(pp)*(x324.value)*(x325.value)))+(((IkReal(-0.850906091578033))*(x326.value)*(x327.value)*(x328.value)))+(((IkReal(-202.850251285066))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*(x329.value)))+(((IkReal(-101.425125642533))*(cj0)*(px)*(sj0)*(x330.value)*(x331.value)))+(((IkReal(-0.969015650388763))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-202.850251285066))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*(x332.value)))+(((IkReal(-101.425125642533))*(px)*(pz)*(r00)*(r02)*(x333.value)*(x334.value)))+(((IkReal(50.7125628212666))*(pp)*(x335.value)*(x336.value)*(x337.value)))+(((IkReal(-101.425125642533))*(px)*(py)*(r00)*(r01)*(x338.value)))+(((IkReal(-101.425125642533))*(cj0)*(px)*(py)*(sj0)*(x339.value)*(x340.value)))+(((IkReal(-202.850251285066))*(cj0)*(r00)*(r01)*(sj0)*(x341.value)*(x342.value)))+(((IkReal(-3.66144703569545))*(px)*(py)*(r00)*(r01)))+(((IkReal(-0.484283129593835))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*(x343.value)*(x344.value)*(x345.value)*(x346.value)))+(((IkReal(-0.242141564796917))*(x347.value)*(x348.value)))+(((IkReal(50.7125628212666))*(pp)*(px)*(pz)*(r00)*(r02)*(x349.value)))+(((IkReal(-1.70181218315607))*(cj0)*(px)*(py)*(sj0)*(x350.value)))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x351.value)))+(((IkReal(50.7125628212666))*(pp)*(px)*(py)*(r00)*(r01)*(x352.value)))+(((IkReal(-0.850906091578033))*(x353.value)*(x354.value)*(x355.value)))+(((IkReal(50.7125628212666))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-25.3562814106333))*(cj0)*(r00)*(r01)*(sj0)*(x356.value)))+(((IkReal(-50.7125628212666))*(x357.value)*(x358.value)*(x359.value)*(x360.value)))+(((IkReal(-8.29190972177966))*(cj0)*(r00)*(r01)*(sj0)*(x361.value)))+(((IkReal(50.7125628212666))*(pp)*(x362.value)*(x363.value)))+(((IkReal(-8.29190972177966))*(cj0)*(r00)*(r01)*(sj0)*(x364.value)))+(((IkReal(0.167184414388102))*(x365.value)))+(((IkReal(-50.7125628212666))*(x366.value)*(x367.value)*(x368.value)))+(((IkReal(-101.425125642533))*(px)*(r00)*(r02)*(x369.value)))+(((IkReal(-50.7125628212666))*(x370.value)*(x371.value)*(x372.value)))+(((IkReal(-8.29190972177966))*(x373.value)*(x374.value)*(x375.value)))+(((IkReal(-8.29190972177966))*(px)*(py)*(r00)*(r01)*(x376.value)))+(((IkReal(-1.34621569265334))*(pp)*(x377.value)))+(((IkReal(-1.83072351784773))*(x378.value)*(x379.value)))+(((IkReal(-8.29190972177966))*(cj0)*(px)*(py)*(sj0)*(x380.value)))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x381.value)))+(((IkReal(50.7125628212666))*(pp)*(px)*(py)*(r00)*(r01)*(x382.value)))+(((IkReal(-6.59009753862360))*(py)*(pz)*(r01)*(r02)*(x383.value)))+(((IkReal(-50.7125628212666))*(x384.value)*(x385.value)*(x386.value)))+(((IkReal(-6.59009753862360))*(px)*(pz)*(r00)*(r02)*(x387.value)))+(((IkReal(-8.29190972177966))*(cj0)*(px)*(py)*(sj0)*(x388.value)))+(((IkReal(50.7125628212666))*(pp)*(py)*(pz)*(r01)*(r02)*(x389.value)))+(((IkReal(-0.969015650388763))*(px)*(pz)*(r00)*(r02)))+(((IkReal(50.7125628212666))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-101.425125642533))*(px)*(r00)*(r01)*(x390.value)*(x391.value)))+(((IkReal(-101.425125642533))*(py)*(pz)*(r01)*(r02)*(x392.value)*(x393.value)))+(((IkReal(-8.29190972177966))*(px)*(py)*(r00)*(r01)*(x394.value)))+(((IkReal(-6.59009753862360))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-101.425125642533))*(cj0)*(py)*(sj0)*(x395.value)*(x396.value)))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-0.850906091578033))*(x397.value)*(x398.value)*(x399.value)))+(((IkReal(-101.425125642533))*(py)*(r00)*(r01)*(x400.value)*(x401.value)))+(((IkReal(-0.850906091578033))*(x402.value)*(x403.value)*(x404.value)))+(((IkReal(-12.6781407053167))*(x405.value)*(x406.value)))+(((IkReal(0.861707867458962))*(x407.value)*(x408.value)))+(((IkReal(50.7125628212666))*(pp)*(x409.value)*(x410.value)*(x411.value)))+(((IkReal(-1.70181218315607))*(cj0)*(r00)*(r01)*(sj0)*(x412.value)))+(((IkReal(-12.6781407053167))*(x413.value)*(x414.value)*(x415.value)))+(((IkReal(-101.425125642533))*(pz)*(r01)*(r02)*(x416.value)*(x417.value)))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(px)*(py)*(sj0)*(x418.value))));
op[3]=((((IkReal(-1.00000000000000))*(x101)))+(((IkReal(-1.00000000000000))*(x102)))+(x104)+(x103));
CheckValue<IkReal> x419 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x419.valid ) {
    continue;
}
CheckValue<IkReal> x420 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x420.valid ) {
    continue;
}
CheckValue<IkReal> x421 = IKPowWithIntegerCheck(pz,3.00000000000000);
if( !x421.valid ) {
    continue;
}
CheckValue<IkReal> x422 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x422.valid ) {
    continue;
}
CheckValue<IkReal> x423 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x423.valid ) {
    continue;
}
CheckValue<IkReal> x424 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x424.valid ) {
    continue;
}
CheckValue<IkReal> x425 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x425.valid ) {
    continue;
}
CheckValue<IkReal> x426 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x426.valid ) {
    continue;
}
CheckValue<IkReal> x427 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x427.valid ) {
    continue;
}
CheckValue<IkReal> x428 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x428.valid ) {
    continue;
}
CheckValue<IkReal> x429 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x429.valid ) {
    continue;
}
CheckValue<IkReal> x430 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x430.valid ) {
    continue;
}
CheckValue<IkReal> x431 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x431.valid ) {
    continue;
}
CheckValue<IkReal> x432 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x432.valid ) {
    continue;
}
CheckValue<IkReal> x433 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x433.valid ) {
    continue;
}
CheckValue<IkReal> x434 = IKPowWithIntegerCheck(py,4.00000000000000);
if( !x434.valid ) {
    continue;
}
CheckValue<IkReal> x435 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x435.valid ) {
    continue;
}
CheckValue<IkReal> x436 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x436.valid ) {
    continue;
}
CheckValue<IkReal> x437 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x437.valid ) {
    continue;
}
CheckValue<IkReal> x438 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x438.valid ) {
    continue;
}
CheckValue<IkReal> x439 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x439.valid ) {
    continue;
}
CheckValue<IkReal> x440 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x440.valid ) {
    continue;
}
CheckValue<IkReal> x441 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x441.valid ) {
    continue;
}
CheckValue<IkReal> x442 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x442.valid ) {
    continue;
}
CheckValue<IkReal> x443 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x443.valid ) {
    continue;
}
CheckValue<IkReal> x444 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x444.valid ) {
    continue;
}
CheckValue<IkReal> x445 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x445.valid ) {
    continue;
}
CheckValue<IkReal> x446 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x446.valid ) {
    continue;
}
CheckValue<IkReal> x447 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x447.valid ) {
    continue;
}
CheckValue<IkReal> x448 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x448.valid ) {
    continue;
}
CheckValue<IkReal> x449 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x449.valid ) {
    continue;
}
CheckValue<IkReal> x450 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x450.valid ) {
    continue;
}
CheckValue<IkReal> x451 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x451.valid ) {
    continue;
}
CheckValue<IkReal> x452 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x452.valid ) {
    continue;
}
CheckValue<IkReal> x453 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x453.valid ) {
    continue;
}
CheckValue<IkReal> x454 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x454.valid ) {
    continue;
}
CheckValue<IkReal> x455 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x455.valid ) {
    continue;
}
CheckValue<IkReal> x456 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x456.valid ) {
    continue;
}
CheckValue<IkReal> x457 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x457.valid ) {
    continue;
}
CheckValue<IkReal> x458 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x458.valid ) {
    continue;
}
CheckValue<IkReal> x459 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x459.valid ) {
    continue;
}
CheckValue<IkReal> x460 = IKPowWithIntegerCheck(pz,4.00000000000000);
if( !x460.valid ) {
    continue;
}
CheckValue<IkReal> x461 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x461.valid ) {
    continue;
}
CheckValue<IkReal> x462 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x462.valid ) {
    continue;
}
CheckValue<IkReal> x463 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x463.valid ) {
    continue;
}
CheckValue<IkReal> x464 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x464.valid ) {
    continue;
}
CheckValue<IkReal> x465 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x465.valid ) {
    continue;
}
CheckValue<IkReal> x466 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x466.valid ) {
    continue;
}
CheckValue<IkReal> x467 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x467.valid ) {
    continue;
}
CheckValue<IkReal> x468 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x468.valid ) {
    continue;
}
CheckValue<IkReal> x469 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x469.valid ) {
    continue;
}
CheckValue<IkReal> x470 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x470.valid ) {
    continue;
}
CheckValue<IkReal> x471 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x471.valid ) {
    continue;
}
CheckValue<IkReal> x472 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x472.valid ) {
    continue;
}
CheckValue<IkReal> x473 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x473.valid ) {
    continue;
}
CheckValue<IkReal> x474 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x474.valid ) {
    continue;
}
CheckValue<IkReal> x475 = IKPowWithIntegerCheck(pz,3.00000000000000);
if( !x475.valid ) {
    continue;
}
CheckValue<IkReal> x476 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x476.valid ) {
    continue;
}
CheckValue<IkReal> x477 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x477.valid ) {
    continue;
}
CheckValue<IkReal> x478 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x478.valid ) {
    continue;
}
CheckValue<IkReal> x479 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x479.valid ) {
    continue;
}
CheckValue<IkReal> x480 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x480.valid ) {
    continue;
}
CheckValue<IkReal> x481 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x481.valid ) {
    continue;
}
CheckValue<IkReal> x482 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x482.valid ) {
    continue;
}
CheckValue<IkReal> x483 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x483.valid ) {
    continue;
}
CheckValue<IkReal> x484 = IKPowWithIntegerCheck(px,4.00000000000000);
if( !x484.valid ) {
    continue;
}
CheckValue<IkReal> x485 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x485.valid ) {
    continue;
}
CheckValue<IkReal> x486 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x486.valid ) {
    continue;
}
CheckValue<IkReal> x487 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x487.valid ) {
    continue;
}
CheckValue<IkReal> x488 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x488.valid ) {
    continue;
}
CheckValue<IkReal> x489 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x489.valid ) {
    continue;
}
CheckValue<IkReal> x490 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x490.valid ) {
    continue;
}
CheckValue<IkReal> x491 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x491.valid ) {
    continue;
}
CheckValue<IkReal> x492 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x492.valid ) {
    continue;
}
CheckValue<IkReal> x493 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x493.valid ) {
    continue;
}
CheckValue<IkReal> x494 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x494.valid ) {
    continue;
}
CheckValue<IkReal> x495 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x495.valid ) {
    continue;
}
CheckValue<IkReal> x496 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x496.valid ) {
    continue;
}
CheckValue<IkReal> x497 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x497.valid ) {
    continue;
}
CheckValue<IkReal> x498 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x498.valid ) {
    continue;
}
CheckValue<IkReal> x499 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x499.valid ) {
    continue;
}
CheckValue<IkReal> x500 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x500.valid ) {
    continue;
}
CheckValue<IkReal> x501 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x501.valid ) {
    continue;
}
CheckValue<IkReal> x502 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x502.valid ) {
    continue;
}
CheckValue<IkReal> x503 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x503.valid ) {
    continue;
}
CheckValue<IkReal> x504 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x504.valid ) {
    continue;
}
CheckValue<IkReal> x505 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x505.valid ) {
    continue;
}
CheckValue<IkReal> x506 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x506.valid ) {
    continue;
}
CheckValue<IkReal> x507 = IKPowWithIntegerCheck(pp,2.00000000000000);
if( !x507.valid ) {
    continue;
}
CheckValue<IkReal> x508 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x508.valid ) {
    continue;
}
CheckValue<IkReal> x509 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x509.valid ) {
    continue;
}
CheckValue<IkReal> x510 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x510.valid ) {
    continue;
}
CheckValue<IkReal> x511 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x511.valid ) {
    continue;
}
CheckValue<IkReal> x512 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x512.valid ) {
    continue;
}
CheckValue<IkReal> x513 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x513.valid ) {
    continue;
}
CheckValue<IkReal> x514 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x514.valid ) {
    continue;
}
CheckValue<IkReal> x515 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x515.valid ) {
    continue;
}
CheckValue<IkReal> x516 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x516.valid ) {
    continue;
}
CheckValue<IkReal> x517 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x517.valid ) {
    continue;
}
CheckValue<IkReal> x518 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x518.valid ) {
    continue;
}
CheckValue<IkReal> x519 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x519.valid ) {
    continue;
}
CheckValue<IkReal> x520 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x520.valid ) {
    continue;
}
CheckValue<IkReal> x521 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x521.valid ) {
    continue;
}
CheckValue<IkReal> x522 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x522.valid ) {
    continue;
}
CheckValue<IkReal> x523 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x523.valid ) {
    continue;
}
CheckValue<IkReal> x524 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x524.valid ) {
    continue;
}
CheckValue<IkReal> x525 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x525.valid ) {
    continue;
}
CheckValue<IkReal> x526 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x526.valid ) {
    continue;
}
CheckValue<IkReal> x527 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x527.valid ) {
    continue;
}
CheckValue<IkReal> x528 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x528.valid ) {
    continue;
}
CheckValue<IkReal> x529 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x529.valid ) {
    continue;
}
CheckValue<IkReal> x530 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x530.valid ) {
    continue;
}
CheckValue<IkReal> x531 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x531.valid ) {
    continue;
}
CheckValue<IkReal> x532 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x532.valid ) {
    continue;
}
CheckValue<IkReal> x533 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x533.valid ) {
    continue;
}
CheckValue<IkReal> x534 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x534.valid ) {
    continue;
}
CheckValue<IkReal> x535 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x535.valid ) {
    continue;
}
CheckValue<IkReal> x536 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x536.valid ) {
    continue;
}
CheckValue<IkReal> x537 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x537.valid ) {
    continue;
}
CheckValue<IkReal> x538 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x538.valid ) {
    continue;
}
CheckValue<IkReal> x539 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x539.valid ) {
    continue;
}
CheckValue<IkReal> x540 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x540.valid ) {
    continue;
}
CheckValue<IkReal> x541 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x541.valid ) {
    continue;
}
CheckValue<IkReal> x542 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x542.valid ) {
    continue;
}
CheckValue<IkReal> x543 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x543.valid ) {
    continue;
}
CheckValue<IkReal> x544 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x544.valid ) {
    continue;
}
CheckValue<IkReal> x545 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x545.valid ) {
    continue;
}
CheckValue<IkReal> x546 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x546.valid ) {
    continue;
}
CheckValue<IkReal> x547 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x547.valid ) {
    continue;
}
CheckValue<IkReal> x548 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x548.valid ) {
    continue;
}
CheckValue<IkReal> x549 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x549.valid ) {
    continue;
}
CheckValue<IkReal> x550 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x550.valid ) {
    continue;
}
CheckValue<IkReal> x551 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x551.valid ) {
    continue;
}
CheckValue<IkReal> x552 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x552.valid ) {
    continue;
}
CheckValue<IkReal> x553 = IKPowWithIntegerCheck(r02,2.00000000000000);
if( !x553.valid ) {
    continue;
}
CheckValue<IkReal> x554 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x554.valid ) {
    continue;
}
CheckValue<IkReal> x555 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x555.valid ) {
    continue;
}
CheckValue<IkReal> x556 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x556.valid ) {
    continue;
}
CheckValue<IkReal> x557 = IKPowWithIntegerCheck(pz,3.00000000000000);
if( !x557.valid ) {
    continue;
}
CheckValue<IkReal> x558 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x558.valid ) {
    continue;
}
CheckValue<IkReal> x559 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x559.valid ) {
    continue;
}
CheckValue<IkReal> x560 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x560.valid ) {
    continue;
}
CheckValue<IkReal> x561 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x561.valid ) {
    continue;
}
CheckValue<IkReal> x562 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x562.valid ) {
    continue;
}
CheckValue<IkReal> x563 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x563.valid ) {
    continue;
}
CheckValue<IkReal> x564 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x564.valid ) {
    continue;
}
CheckValue<IkReal> x565 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x565.valid ) {
    continue;
}
CheckValue<IkReal> x566 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x566.valid ) {
    continue;
}
CheckValue<IkReal> x567 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x567.valid ) {
    continue;
}
CheckValue<IkReal> x568 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x568.valid ) {
    continue;
}
CheckValue<IkReal> x569 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x569.valid ) {
    continue;
}
CheckValue<IkReal> x570 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x570.valid ) {
    continue;
}
CheckValue<IkReal> x571 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x571.valid ) {
    continue;
}
CheckValue<IkReal> x572 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x572.valid ) {
    continue;
}
CheckValue<IkReal> x573 = IKPowWithIntegerCheck(px,3.00000000000000);
if( !x573.valid ) {
    continue;
}
CheckValue<IkReal> x574 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x574.valid ) {
    continue;
}
CheckValue<IkReal> x575 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x575.valid ) {
    continue;
}
CheckValue<IkReal> x576 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x576.valid ) {
    continue;
}
CheckValue<IkReal> x577 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x577.valid ) {
    continue;
}
CheckValue<IkReal> x578 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x578.valid ) {
    continue;
}
CheckValue<IkReal> x579 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x579.valid ) {
    continue;
}
CheckValue<IkReal> x580 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x580.valid ) {
    continue;
}
CheckValue<IkReal> x581 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x581.valid ) {
    continue;
}
CheckValue<IkReal> x582 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x582.valid ) {
    continue;
}
CheckValue<IkReal> x583 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x583.valid ) {
    continue;
}
CheckValue<IkReal> x584 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x584.valid ) {
    continue;
}
CheckValue<IkReal> x585 = IKPowWithIntegerCheck(py,3.00000000000000);
if( !x585.valid ) {
    continue;
}
CheckValue<IkReal> x586 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x586.valid ) {
    continue;
}
CheckValue<IkReal> x587 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x587.valid ) {
    continue;
}
CheckValue<IkReal> x588 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x588.valid ) {
    continue;
}
CheckValue<IkReal> x589 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x589.valid ) {
    continue;
}
CheckValue<IkReal> x590 = IKPowWithIntegerCheck(sj0,2.00000000000000);
if( !x590.valid ) {
    continue;
}
CheckValue<IkReal> x591 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x591.valid ) {
    continue;
}
CheckValue<IkReal> x592 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x592.valid ) {
    continue;
}
CheckValue<IkReal> x593 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x593.valid ) {
    continue;
}
CheckValue<IkReal> x594 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x594.valid ) {
    continue;
}
CheckValue<IkReal> x595 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x595.valid ) {
    continue;
}
CheckValue<IkReal> x596 = IKPowWithIntegerCheck(r01,2.00000000000000);
if( !x596.valid ) {
    continue;
}
CheckValue<IkReal> x597 = IKPowWithIntegerCheck(cj0,2.00000000000000);
if( !x597.valid ) {
    continue;
}
CheckValue<IkReal> x598 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x598.valid ) {
    continue;
}
CheckValue<IkReal> x599 = IKPowWithIntegerCheck(r00,2.00000000000000);
if( !x599.valid ) {
    continue;
}
op[4]=((((IkReal(-9.63538693604066))*(pz)*(x419.value)*(x420.value)))+(((IkReal(-50.7125628212666))*(py)*(r01)*(r02)*(x421.value)))+(((IkReal(0.484507825194381))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.366398266383651))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-19.2707738720813))*(cj0)*(py)*(r00)*(r02)*(sj0)*(x422.value)))+(((IkReal(-50.7125628212666))*(pz)*(r00)*(r02)*(x423.value)*(x424.value)))+(((IkReal(25.3562814106333))*(pp)*(x425.value)*(x426.value)*(x427.value)))+(((IkReal(-1.83072351784773))*(px)*(py)*(r00)*(r01)))+(((IkReal(-9.63538693604066))*(px)*(r00)*(r02)*(x428.value)*(x429.value)))+(((IkReal(-6.33907035265833))*(x430.value)*(x431.value)))+(((IkReal(-0.850906091578033))*(cj0)*(r00)*(r01)*(sj0)*(x432.value)))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*(x433.value)))+(((IkReal(-25.3562814106333))*(x434.value)*(x435.value)*(x436.value)))+(((IkReal(-6.33907035265833))*(x437.value)*(x438.value)*(x439.value)))+(((IkReal(-25.3562814106333))*(x440.value)*(x441.value)*(x442.value)))+(((IkReal(0.278221797778174))*(pz)*(x443.value)*(x444.value)))+(((IkReal(-9.63538693604066))*(pz)*(x445.value)*(x446.value)*(x447.value)))+(((IkReal(-9.63538693604066))*(pz)*(x448.value)*(x449.value)*(x450.value)))+(((IkReal(0.366398266383651))*(px)*(pz)*(r00)*(r02)*(x451.value)))+(((IkReal(-4.81769346802033))*(pp)*(pz)*(x452.value)*(x453.value)))+(((IkReal(-101.425125642533))*(cj0)*(r00)*(r01)*(sj0)*(x454.value)*(x455.value)))+(((IkReal(-25.3562814106333))*(x456.value)*(x457.value)*(x458.value)*(x459.value)))+(((IkReal(-25.3562814106333))*(x460.value)*(x461.value)))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*(x462.value)))+(((IkReal(0.366398266383651))*(py)*(pz)*(r01)*(r02)*(x463.value)))+(((IkReal(9.63538693604066))*(cj0)*(py)*(r00)*(r02)*(sj0)*(x464.value)))+(((IkReal(9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*(x465.value)))+(((IkReal(-0.484507825194381))*(x466.value)*(x467.value)*(x468.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x469.value)))+(((IkReal(-0.278221797778174))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.439893955178000))*(pz)*(x470.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*(x471.value)))+(((IkReal(-6.33907035265833))*(x472.value)*(x473.value)*(x474.value)))+(((IkReal(-9.63538693604066))*(x475.value)*(x476.value)))+(((IkReal(-0.425453045789016))*(x477.value)*(x478.value)*(x479.value)))+(((IkReal(-19.2707738720813))*(cj0)*(px)*(r01)*(r02)*(sj0)*(x480.value)))+(((IkReal(-9.63538693604066))*(r01)*(r02)*(x481.value)*(x482.value)))+(((IkReal(-25.3562814106333))*(x483.value)*(x484.value)*(x485.value)))+(((IkReal(-101.425125642533))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*(x486.value)))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)*(x487.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*(x488.value)))+(((IkReal(-19.2707738720813))*(py)*(r01)*(r02)*(x489.value)))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(py)*(sj0)*(x490.value)*(x491.value)))+(((IkReal(25.3562814106333))*(pp)*(x492.value)*(x493.value)))+(((IkReal(-0.850906091578033))*(cj0)*(px)*(py)*(sj0)*(x494.value)))+(((IkReal(-0.425453045789016))*(x495.value)*(x496.value)*(x497.value)))+(((IkReal(-9.63538693604066))*(r00)*(r02)*(x498.value)*(x499.value)))+(((IkReal(-0.278221797778174))*(px)*(r00)*(r02)*(x500.value)))+(((IkReal(4.81769346802033))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-19.2707738720813))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(4.81769346802033))*(pp)*(px)*(r00)*(r02)*(x501.value)))+(((IkReal(-50.7125628212666))*(cj0)*(py)*(sj0)*(x502.value)*(x503.value)))+(((IkReal(4.81769346802033))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*(x504.value)))+(((IkReal(-0.0528497858676222))*(x505.value)))+(((IkReal(9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*(x506.value)))+(((IkReal(-12.6781407053167))*(cj0)*(r00)*(r01)*(sj0)*(x507.value)))+(((IkReal(-50.7125628212666))*(px)*(py)*(r00)*(r01)*(x508.value)))+(((IkReal(9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*(x509.value)))+(((IkReal(9.63538693604066))*(pz)*(x510.value)*(x511.value)*(x512.value)))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*(x513.value)))+(((IkReal(4.81769346802033))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-0.439893955178000))*(py)*(r01)*(r02)))+(((IkReal(-19.2707738720813))*(cj0)*(px)*(py)*(pz)*(sj0)*(x514.value)))+(((IkReal(-3.23059310196597))*(x515.value)*(x516.value)))+(((IkReal(9.63538693604066))*(py)*(r01)*(r02)*(x517.value)*(x518.value)))+(((IkReal(-0.915361758923863))*(x519.value)*(x520.value)))+(((IkReal(-25.3562814106333))*(x521.value)*(x522.value)*(x523.value)*(x524.value)))+(((IkReal(-0.439893955178000))*(px)*(r00)*(r02)))+(((IkReal(1.15761567152105))*(pp)*(x525.value)))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-9.63538693604066))*(pz)*(x526.value)*(x527.value)))+(((IkReal(0.278221797778174))*(pz)*(x528.value)*(x529.value)))+(((IkReal(9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*(x530.value)))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)*(x531.value)))+(((IkReal(-19.2707738720813))*(px)*(r00)*(r02)*(x532.value)))+(((IkReal(0.0153712106632144))*(x533.value)*(x534.value)))+(((IkReal(9.63538693604066))*(cj0)*(px)*(r01)*(r02)*(sj0)*(x535.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*(x536.value)))+(((IkReal(-50.7125628212666))*(pz)*(r01)*(r02)*(x537.value)*(x538.value)))+(((IkReal(0.0153712106632144))*(x539.value)*(x540.value)))+(((IkReal(0.242253912597191))*(pp)*(x541.value)*(x542.value)))+(((IkReal(0.0307424213264288))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(sj0)*(x543.value)*(x544.value)))+(((IkReal(25.3562814106333))*(pp)*(x545.value)*(x546.value)*(x547.value)))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(4.81769346802033))*(pp)*(pz)*(x548.value)))+(((IkReal(0.366398266383651))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-4.14595486088983))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-25.3562814106333))*(x549.value)*(x550.value)*(x551.value)))+(((IkReal(-0.425453045789016))*(x552.value)*(x553.value)*(x554.value)))+(((IkReal(-4.14595486088983))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-50.7125628212666))*(py)*(pz)*(r01)*(r02)*(x555.value)*(x556.value)))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r02)*(x557.value)))+(((IkReal(-25.3562814106333))*(x558.value)*(x559.value)*(x560.value)*(x561.value)))+(((IkReal(-4.81769346802033))*(pp)*(pz)*(x562.value)*(x563.value)))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*(x564.value)))+(((IkReal(-101.425125642533))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*(x565.value)))+(((IkReal(9.63538693604066))*(pz)*(x566.value)*(x567.value)*(x568.value)))+(((IkReal(0.556443595556348))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.278221797778174))*(py)*(r01)*(r02)*(x569.value)))+(((IkReal(-50.7125628212666))*(px)*(pz)*(r00)*(r02)*(x570.value)*(x571.value)))+(((IkReal(-50.7125628212666))*(py)*(r00)*(r01)*(x572.value)*(x573.value)))+(((IkReal(-9.63538693604066))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.278221797778174))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-9.63538693604066))*(py)*(r01)*(r02)*(x574.value)*(x575.value)))+(((IkReal(9.63538693604066))*(px)*(r00)*(r02)*(x576.value)*(x577.value)))+(((IkReal(-0.915361758923863))*(x578.value)*(x579.value)))+(((IkReal(4.81769346802033))*(pp)*(py)*(r01)*(r02)*(x580.value)))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*(x581.value)))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*(x582.value)))+(((IkReal(0.242253912597191))*(pp)*(x583.value)*(x584.value)))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r01)*(x585.value)*(x586.value)))+(((IkReal(-25.3562814106333))*(x587.value)*(x588.value)*(x589.value)*(x590.value)))+(((IkReal(9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*(x591.value)))+(((IkReal(-0.425453045789016))*(x592.value)*(x593.value)*(x594.value)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*(x595.value)))+(((IkReal(4.81769346802033))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*(x596.value)))+(((IkReal(-0.484507825194381))*(x597.value)*(x598.value)*(x599.value))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x626 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x626.valid ) {
    continue;
}
IkReal x600=x626.value;
CheckValue<IkReal> x627 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x627.valid ) {
    continue;
}
IkReal x601=x627.value;
CheckValue<IkReal> x628 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x628.valid ) {
    continue;
}
IkReal x602=x628.value;
IkReal x603=((r01)*(sj0));
IkReal x604=((IkReal(0.190000000000000))*(cj1));
IkReal x605=((pp)*(sj1));
IkReal x606=((IkReal(1.00000000000000))*(r02));
IkReal x607=((IkReal(0.380000000000000))*(pz));
IkReal x608=((IkReal(1.00000000000000))*(pz));
IkReal x609=((py)*(r01));
IkReal x610=((px)*(sj0));
IkReal x611=((cj0)*(r00));
IkReal x612=((IkReal(1.00000000000000))*(cj1));
IkReal x613=((IkReal(0.0361000000000000))*(sj1));
IkReal x614=((IkReal(2.00000000000000))*(sj1));
IkReal x615=((IkReal(0.0361000000000000))*(cj1));
IkReal x616=((IkReal(2.00000000000000))*(cj1));
IkReal x617=((py)*(r00));
IkReal x618=((IkReal(0.190000000000000))*(sj1));
IkReal x619=((cj0)*(px));
IkReal x620=((px)*(r00));
IkReal x621=((py)*(r02)*(sj0));
IkReal x622=((pz)*(x616));
IkReal x623=((r02)*(x619));
IkReal x624=((pz)*(x614));
IkReal x625=((r02)*(x600));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x610)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x603)))+(((sj1)*(x611)))+(((IkReal(-1.00000000000000))*(cj1)*(x606))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x611)*(x612)))+(((IkReal(-1.00000000000000))*(sj1)*(x606)))+(((IkReal(-1.00000000000000))*(x603)*(x612))));
evalcond[5]=((((x611)*(x618)))+(((IkReal(-1.00000000000000))*(x609)))+(((x603)*(x618)))+(((IkReal(-1.00000000000000))*(x620)))+(((IkReal(-1.00000000000000))*(r02)*(x604)))+(((IkReal(-1.00000000000000))*(pz)*(x606))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x603)*(x608)))+(((IkReal(-1.00000000000000))*(x603)*(x604)))+(((IkReal(-1.00000000000000))*(x604)*(x611)))+(x621)+(x623)+(((IkReal(-1.00000000000000))*(x608)*(x611)))+(((IkReal(-1.00000000000000))*(r02)*(x618))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x609)*(x614)*(x619)))+(((IkReal(-1.00000000000000))*(x621)*(x624)))+(((IkReal(-1.00000000000000))*(x602)*(x611)*(x614)))+(((x605)*(x611)))+(((x616)*(x625)))+(((IkReal(-1.00000000000000))*(x611)*(x613)))+(((IkReal(-1.00000000000000))*(x623)*(x624)))+(((IkReal(0.380000000000000))*(x620)))+(((x609)*(x622)))+(((x603)*(x605)))+(((r02)*(x615)))+(((r02)*(x607)))+(((IkReal(-1.00000000000000))*(x610)*(x614)*(x617)))+(((IkReal(0.380000000000000))*(x609)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x606)))+(((IkReal(-1.00000000000000))*(x603)*(x613)))+(((IkReal(-1.00000000000000))*(x601)*(x603)*(x614)))+(((x620)*(x622))));
evalcond[8]=((((x614)*(x625)))+(((IkReal(-1.00000000000000))*(x603)*(x607)))+(((x609)*(x616)*(x619)))+(((IkReal(-1.00000000000000))*(x611)*(x615)))+(((x610)*(x616)*(x617)))+(((IkReal(-1.00000000000000))*(pp)*(x603)*(x612)))+(((x602)*(x611)*(x616)))+(((IkReal(0.380000000000000))*(x623)))+(((IkReal(0.380000000000000))*(x621)))+(((IkReal(-1.00000000000000))*(x605)*(x606)))+(((x609)*(x624)))+(((IkReal(-1.00000000000000))*(pp)*(x611)*(x612)))+(((IkReal(-1.00000000000000))*(x607)*(x611)))+(((x621)*(x622)))+(((x601)*(x603)*(x616)))+(((IkReal(-1.00000000000000))*(x603)*(x615)))+(((x622)*(x623)))+(((IkReal(-1.00000000000000))*(r02)*(x613)))+(((x620)*(x624))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x629=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x629)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x629))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x630=((px)*(sj0));
IkReal x631=((IkReal(2.00000000000000))*(py));
IkReal x632=((IkReal(0.380000000000000))*(cj1));
IkReal x633=((cj0)*(r01));
IkReal x634=((pz)*(r02));
IkReal x635=((r00)*(sj0));
IkReal x636=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(0.0938500000000000))+(((IkReal(2.00000000000000))*(px)*(r00)*(x630)))+(((IkReal(-0.0361000000000000))*(x635)))+(((IkReal(0.0361000000000000))*(x633)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x636)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x631)))+(((pp)*(x633)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x632)))+(((py)*(r00)*(x636)))+(((r02)*(x630)*(x632)))+(((IkReal(-1.00000000000000))*(pz)*(x632)*(x635)))+(((r01)*(x630)*(x631)))+(((IkReal(-1.00000000000000))*(py)*(x631)*(x633)))+(((IkReal(2.00000000000000))*(x630)*(x634)))+(((IkReal(0.0758940000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(pp)*(x635)))+(((IkReal(-1.00000000000000))*(cj0)*(x631)*(x634)))+(((pz)*(x632)*(x633))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
CheckValue<IkReal> x637 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x637.valid ) {
    continue;
}
CheckValue<IkReal> x638 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x638.valid ) {
    continue;
}
gconst7=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*(x637.value)))+(((IkReal(-74529.0000000000))*(x638.value)))+(((IkReal(-75894.0000000000))*(cj3)))));
CheckValue<IkReal> x639 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x639.valid ) {
    continue;
}
CheckValue<IkReal> x640 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x640.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*(x639.value)))+(((IkReal(-3.85740903679934))*(x640.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
CheckValue<IkReal> x641 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x641.valid ) {
    continue;
}
CheckValue<IkReal> x642 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x642.valid ) {
    continue;
}
gconst8=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*(x641.value)))+(((IkReal(74529.0000000000))*(x642.value)))));
CheckValue<IkReal> x643 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x643.valid ) {
    continue;
}
CheckValue<IkReal> x644 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x644.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*(x643.value)))+(((IkReal(3.85740903679934))*(x644.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x645=((cj1)*(py));
IkReal x646=((pz)*(sj1));
IkReal x647=((IkReal(139000.000000000))*(sj0));
IkReal x648=((IkReal(273000.000000000))*(cj3));
IkReal x649=((py)*(sj1));
IkReal x650=((IkReal(273000.000000000))*(sj3));
IkReal x651=((cj1)*(pz));
IkReal x652=((IkReal(139000.000000000))*(r01));
IkReal x653=((cj0)*(r02));
IkReal x654=((cj1)*(px));
IkReal x655=((r00)*(x650));
IkReal x656=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x657=((px)*(r02)*(sj1));
IkReal x658=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
CheckValue<IkReal> x659 = IKatan2WithCheck(((gconst8)*(((((IkReal(-1.00000000000000))*(sj0)*(x648)*(x657)))+(((IkReal(139000.000000000))*(x649)*(x653)))+(((IkReal(-1.00000000000000))*(r01)*(x648)*(x654)))+(((r00)*(x645)*(x648)))+(((sj0)*(x649)*(x650)))+(((cj0)*(px)*(sj1)*(x650)))+(((r00)*(x646)*(x647)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x646)*(x648)))+(((IkReal(-1.00000000000000))*(x647)*(x657)))+(((x648)*(x649)*(x653)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(139000.000000000))*(r00)*(x645)))+(((r00)*(sj0)*(x646)*(x648)))+(((IkReal(-1.00000000000000))*(x650)*(x651)))+(((IkReal(-1.00000000000000))*(cj0)*(x646)*(x652)))+(((IkReal(-1.00000000000000))*(x652)*(x654)))))),((gconst8)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(sj0)*(x646)*(x655)))+(((IkReal(-139000.000000000))*(x651)))+(((IkReal(-1.00000000000000))*(x649)*(x650)*(x653)))+(((cj0)*(px)*(sj1)*(x648)))+(((sj0)*(x648)*(x649)))+(((IkReal(139000.000000000))*(cj0)*(px)*(sj1)))+(((IkReal(-1.00000000000000))*(x645)*(x655)))+(((IkReal(-1.00000000000000))*(x648)*(x651)))+(((r01)*(x650)*(x654)))+(((sj0)*(x650)*(x657)))+(((IkReal(-51870.0000000000))*(cj3)))+(((x647)*(x649)))+(((cj0)*(r01)*(x646)*(x650)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x659.valid ) {
    continue;
}
j2array[0]=x659.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x660=IKcos(j2);
IkReal x661=IKsin(j2);
IkReal x662=((px)*(sj1));
IkReal x663=((IkReal(0.273000000000000))*(cj3));
IkReal x664=((py)*(sj1));
IkReal x665=((IkReal(1.00000000000000))*(r00));
IkReal x666=((cj1)*(sj0));
IkReal x667=((IkReal(1.00000000000000))*(px));
IkReal x668=((IkReal(1.00000000000000))*(pz));
IkReal x669=((cj0)*(r01));
IkReal x670=((pz)*(sj1));
IkReal x671=((IkReal(0.273000000000000))*(sj3));
IkReal x672=((cj0)*(cj1));
IkReal x673=((IkReal(0.139000000000000))*(x661));
IkReal x674=((IkReal(0.139000000000000))*(x660));
IkReal x675=((x661)*(x663));
IkReal x676=((x660)*(x671));
IkReal x677=((x661)*(x671));
IkReal x678=((x660)*(x663));
IkReal x679=((x673)+(x675));
IkReal x680=((x678)+(x677)+(x674));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x662)))+(((sj0)*(x664)))+(((IkReal(-1.00000000000000))*(x680)))+(((IkReal(-1.00000000000000))*(cj1)*(x668))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x668)))+(((IkReal(-1.00000000000000))*(py)*(x666)))+(((IkReal(-1.00000000000000))*(x667)*(x672)))+(x679)+(((IkReal(-1.00000000000000))*(x676))));
evalcond[2]=((((r02)*(sj0)*(x662)))+(((IkReal(-1.00000000000000))*(sj0)*(x665)*(x670)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x664)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x665)))+(((x669)*(x670)))+(x679)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x676))));
evalcond[3]=((((r01)*(x662)))+(((py)*(r02)*(x672)))+(((IkReal(-1.00000000000000))*(cj1)*(x668)*(x669)))+(((IkReal(-1.00000000000000))*(r02)*(x666)*(x667)))+(((pz)*(r00)*(x666)))+(x680)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(x664)*(x665))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x681=((IkReal(139000.000000000))*(cj1));
IkReal x682=((py)*(sj0));
IkReal x683=((cj0)*(px));
IkReal x684=((IkReal(273000.000000000))*(cj3));
IkReal x685=((IkReal(139000.000000000))*(sj1));
IkReal x686=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x687=((IkReal(273000.000000000))*(sj1)*(sj3));
CheckValue<IkReal> x688 = IKatan2WithCheck(((gconst7)*(((((IkReal(-1.00000000000000))*(cj1)*(x682)*(x684)))+(((IkReal(-1.00000000000000))*(x681)*(x683)))+(((IkReal(-1.00000000000000))*(x681)*(x682)))+(((IkReal(-1.00000000000000))*(cj1)*(x683)*(x684)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x684)))+(((IkReal(-1.00000000000000))*(x682)*(x687)))+(((IkReal(-1.00000000000000))*(x683)*(x687)))+(((IkReal(-1.00000000000000))*(pz)*(x685)))+(((pz)*(x686)))))),((gconst7)*(((IkReal(26410.0000000000))+(((x682)*(x686)))+(((cj1)*(pz)*(x684)))+(((x683)*(x686)))+(((IkReal(-1.00000000000000))*(sj1)*(x683)*(x684)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x682)*(x684)))+(((IkReal(-1.00000000000000))*(x682)*(x685)))+(((IkReal(-1.00000000000000))*(x683)*(x685)))+(((pz)*(x687)))+(((pz)*(x681)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x688.valid ) {
    continue;
}
j2array[0]=x688.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x689=IKcos(j2);
IkReal x690=IKsin(j2);
IkReal x691=((px)*(sj1));
IkReal x692=((IkReal(0.273000000000000))*(cj3));
IkReal x693=((py)*(sj1));
IkReal x694=((IkReal(1.00000000000000))*(r00));
IkReal x695=((cj1)*(sj0));
IkReal x696=((IkReal(1.00000000000000))*(px));
IkReal x697=((IkReal(1.00000000000000))*(pz));
IkReal x698=((cj0)*(r01));
IkReal x699=((pz)*(sj1));
IkReal x700=((IkReal(0.273000000000000))*(sj3));
IkReal x701=((cj0)*(cj1));
IkReal x702=((IkReal(0.139000000000000))*(x690));
IkReal x703=((IkReal(0.139000000000000))*(x689));
IkReal x704=((x690)*(x692));
IkReal x705=((x689)*(x700));
IkReal x706=((x690)*(x700));
IkReal x707=((x689)*(x692));
IkReal x708=((x702)+(x704));
IkReal x709=((x703)+(x706)+(x707));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x693)))+(((IkReal(-1.00000000000000))*(cj1)*(x697)))+(((IkReal(-1.00000000000000))*(x709)))+(((cj0)*(x691))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x697)))+(((IkReal(-1.00000000000000))*(py)*(x695)))+(((IkReal(-1.00000000000000))*(x705)))+(((IkReal(-1.00000000000000))*(x696)*(x701)))+(x708));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x693)))+(((IkReal(-1.00000000000000))*(x705)))+(x708)+(((IkReal(-1.00000000000000))*(sj0)*(x694)*(x699)))+(((cj1)*(px)*(r01)))+(((x698)*(x699)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x694)))+(((r02)*(sj0)*(x691))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x693)*(x694)))+(((IkReal(-1.00000000000000))*(cj1)*(x697)*(x698)))+(((IkReal(-1.00000000000000))*(r02)*(x695)*(x696)))+(((py)*(r02)*(x701)))+(((pz)*(r00)*(x695)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x709)+(((IkReal(-0.190000000000000))*(x698)))+(((r01)*(x691))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x736 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x736.valid ) {
    continue;
}
IkReal x710=x736.value;
CheckValue<IkReal> x737 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x737.valid ) {
    continue;
}
IkReal x711=x737.value;
CheckValue<IkReal> x738 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x738.valid ) {
    continue;
}
IkReal x712=x738.value;
IkReal x713=((r01)*(sj0));
IkReal x714=((IkReal(0.190000000000000))*(cj1));
IkReal x715=((pp)*(sj1));
IkReal x716=((IkReal(1.00000000000000))*(r02));
IkReal x717=((IkReal(0.380000000000000))*(pz));
IkReal x718=((IkReal(1.00000000000000))*(pz));
IkReal x719=((py)*(r01));
IkReal x720=((px)*(sj0));
IkReal x721=((cj0)*(r00));
IkReal x722=((IkReal(1.00000000000000))*(cj1));
IkReal x723=((IkReal(0.0361000000000000))*(sj1));
IkReal x724=((IkReal(2.00000000000000))*(sj1));
IkReal x725=((IkReal(0.0361000000000000))*(cj1));
IkReal x726=((IkReal(2.00000000000000))*(cj1));
IkReal x727=((py)*(r00));
IkReal x728=((IkReal(0.190000000000000))*(sj1));
IkReal x729=((cj0)*(px));
IkReal x730=((px)*(r00));
IkReal x731=((py)*(r02)*(sj0));
IkReal x732=((pz)*(x726));
IkReal x733=((r02)*(x729));
IkReal x734=((pz)*(x724));
IkReal x735=((r02)*(x710));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x720)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x716)))+(((sj1)*(x713)))+(((sj1)*(x721))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x713)*(x722)))+(((IkReal(-1.00000000000000))*(x721)*(x722)))+(((IkReal(-1.00000000000000))*(sj1)*(x716))));
evalcond[5]=((((x721)*(x728)))+(((IkReal(-1.00000000000000))*(pz)*(x716)))+(((IkReal(-1.00000000000000))*(r02)*(x714)))+(((x713)*(x728)))+(((IkReal(-1.00000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(x730))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r02)*(x728)))+(x733)+(x731)+(((IkReal(-1.00000000000000))*(x714)*(x721)))+(((IkReal(-1.00000000000000))*(x713)*(x718)))+(((IkReal(-1.00000000000000))*(x713)*(x714)))+(((IkReal(-1.00000000000000))*(x718)*(x721))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x713)*(x723)))+(((IkReal(-1.00000000000000))*(x719)*(x724)*(x729)))+(((IkReal(-1.00000000000000))*(x731)*(x734)))+(((x726)*(x735)))+(((IkReal(-1.00000000000000))*(x733)*(x734)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x716)))+(((IkReal(-1.00000000000000))*(x711)*(x713)*(x724)))+(((IkReal(-1.00000000000000))*(x720)*(x724)*(x727)))+(((IkReal(-1.00000000000000))*(x721)*(x723)))+(((r02)*(x725)))+(((IkReal(-1.00000000000000))*(x712)*(x721)*(x724)))+(((x719)*(x732)))+(((IkReal(0.380000000000000))*(x730)))+(((r02)*(x717)))+(((IkReal(0.380000000000000))*(x719)))+(((x713)*(x715)))+(((x715)*(x721)))+(((x730)*(x732))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x713)*(x725)))+(((x731)*(x732)))+(((x711)*(x713)*(x726)))+(((x720)*(x726)*(x727)))+(((IkReal(-1.00000000000000))*(r02)*(x723)))+(((IkReal(-1.00000000000000))*(x717)*(x721)))+(((IkReal(-1.00000000000000))*(pp)*(x721)*(x722)))+(((x719)*(x726)*(x729)))+(((x712)*(x721)*(x726)))+(((IkReal(-1.00000000000000))*(x721)*(x725)))+(((x724)*(x735)))+(((x719)*(x734)))+(((IkReal(-1.00000000000000))*(x713)*(x717)))+(((IkReal(0.380000000000000))*(x733)))+(((IkReal(0.380000000000000))*(x731)))+(((IkReal(-1.00000000000000))*(pp)*(x713)*(x722)))+(((x732)*(x733)))+(((x730)*(x734)))+(((IkReal(-1.00000000000000))*(x715)*(x716))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x739=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x739)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x739))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x740=((px)*(sj0));
IkReal x741=((IkReal(2.00000000000000))*(py));
IkReal x742=((IkReal(0.380000000000000))*(cj1));
IkReal x743=((cj0)*(r01));
IkReal x744=((pz)*(r02));
IkReal x745=((r00)*(sj0));
IkReal x746=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(-0.0938500000000000))+(((IkReal(-1.00000000000000))*(pz)*(x742)*(x745)))+(((IkReal(2.00000000000000))*(x740)*(x744)))+(((IkReal(-1.00000000000000))*(cj0)*(x741)*(x744)))+(((pz)*(x742)*(x743)))+(((IkReal(0.0361000000000000))*(x743)))+(((r01)*(x740)*(x741)))+(((pp)*(x743)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x740)))+(((IkReal(-0.0361000000000000))*(x745)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x741)))+(((IkReal(-1.00000000000000))*(py)*(x741)*(x743)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x746)))+(((IkReal(-1.00000000000000))*(pp)*(x745)))+(((IkReal(-0.0758940000000000))*(IKcos(j3))))+(((r02)*(x740)*(x742)))+(((py)*(r00)*(x746)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x742))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
CheckValue<IkReal> x747 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x747.valid ) {
    continue;
}
CheckValue<IkReal> x748 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x748.valid ) {
    continue;
}
gconst9=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*(x747.value)))+(((IkReal(-74529.0000000000))*(x748.value)))+(((IkReal(-75894.0000000000))*(cj3)))));
CheckValue<IkReal> x749 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x749.valid ) {
    continue;
}
CheckValue<IkReal> x750 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x750.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*(x749.value)))+(((IkReal(-3.85740903679934))*(x750.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
CheckValue<IkReal> x751 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x751.valid ) {
    continue;
}
CheckValue<IkReal> x752 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x752.valid ) {
    continue;
}
gconst10=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*(x751.value)))+(((IkReal(74529.0000000000))*(x752.value)))));
CheckValue<IkReal> x753 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x753.valid ) {
    continue;
}
CheckValue<IkReal> x754 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x754.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*(x753.value)))+(((IkReal(3.85740903679934))*(x754.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x755=((IkReal(273000.000000000))*(sj3));
IkReal x756=((IkReal(273000.000000000))*(cj3));
IkReal x757=((pz)*(r00));
IkReal x758=((px)*(r02));
IkReal x759=((sj0)*(sj1));
IkReal x760=((cj1)*(pz));
IkReal x761=((cj1)*(py)*(r00));
IkReal x762=((IkReal(139000.000000000))*(x759));
IkReal x763=((cj0)*(px)*(sj1));
IkReal x764=((cj1)*(px)*(r01));
IkReal x765=((cj0)*(pz)*(r01)*(sj1));
IkReal x766=((cj0)*(py)*(r02)*(sj1));
CheckValue<IkReal> x767 = IKatan2WithCheck(((gconst10)*(((((IkReal(-1.00000000000000))*(x756)*(x757)*(x759)))+(((IkReal(-1.00000000000000))*(x756)*(x761)))+(((IkReal(-1.00000000000000))*(x756)*(x766)))+(((IkReal(-1.00000000000000))*(x755)*(x760)))+(((x758)*(x762)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x757)*(x762)))+(((IkReal(-139000.000000000))*(x761)))+(((IkReal(-139000.000000000))*(x766)))+(((x756)*(x758)*(x759)))+(((x756)*(x764)))+(((x756)*(x765)))+(((py)*(x755)*(x759)))+(((x755)*(x763)))+(((IkReal(139000.000000000))*(x765)))+(((IkReal(139000.000000000))*(x764)))))),((gconst10)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x756)*(x760)))+(((IkReal(-1.00000000000000))*(x755)*(x765)))+(((IkReal(-1.00000000000000))*(x755)*(x764)))+(((x755)*(x757)*(x759)))+(((IkReal(-139000.000000000))*(x760)))+(((x756)*(x763)))+(((py)*(x762)))+(((x755)*(x761)))+(((x755)*(x766)))+(((IkReal(139000.000000000))*(x763)))+(((IkReal(-1.00000000000000))*(x755)*(x758)*(x759)))+(((IkReal(-51870.0000000000))*(cj3)))+(((py)*(x756)*(x759)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x767.valid ) {
    continue;
}
j2array[0]=x767.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x768=IKcos(j2);
IkReal x769=IKsin(j2);
IkReal x770=((px)*(sj1));
IkReal x771=((IkReal(0.273000000000000))*(cj3));
IkReal x772=((py)*(sj1));
IkReal x773=((IkReal(1.00000000000000))*(r00));
IkReal x774=((cj1)*(sj0));
IkReal x775=((IkReal(1.00000000000000))*(px));
IkReal x776=((IkReal(1.00000000000000))*(pz));
IkReal x777=((cj0)*(r01));
IkReal x778=((pz)*(sj1));
IkReal x779=((IkReal(0.273000000000000))*(sj3));
IkReal x780=((cj0)*(cj1));
IkReal x781=((IkReal(0.139000000000000))*(x769));
IkReal x782=((IkReal(0.139000000000000))*(x768));
IkReal x783=((x768)*(x779));
IkReal x784=((x769)*(x771));
IkReal x785=((x769)*(x779));
IkReal x786=((x768)*(x771));
IkReal x787=((x781)+(x784));
IkReal x788=((x782)+(x786)+(x785));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x788)))+(((sj0)*(x772)))+(((cj0)*(x770)))+(((IkReal(-1.00000000000000))*(cj1)*(x776))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x774)))+(((IkReal(-1.00000000000000))*(x783)))+(((IkReal(-1.00000000000000))*(x775)*(x780)))+(x787)+(((IkReal(-1.00000000000000))*(sj1)*(x776))));
evalcond[2]=((((x777)*(x778)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x772)))+(((IkReal(-1.00000000000000))*(x787)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x773)))+(((r02)*(sj0)*(x770)))+(x783)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(sj0)*(x773)*(x778))));
evalcond[3]=((((py)*(r02)*(x780)))+(((IkReal(-0.190000000000000))*(x777)))+(((IkReal(-1.00000000000000))*(x788)))+(((pz)*(r00)*(x774)))+(((r01)*(x770)))+(((IkReal(-1.00000000000000))*(x772)*(x773)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(x776)*(x777)))+(((IkReal(-1.00000000000000))*(r02)*(x774)*(x775))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x789=((IkReal(139000.000000000))*(cj1));
IkReal x790=((py)*(sj0));
IkReal x791=((cj0)*(px));
IkReal x792=((IkReal(273000.000000000))*(cj3));
IkReal x793=((IkReal(139000.000000000))*(sj1));
IkReal x794=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x795=((IkReal(273000.000000000))*(sj1)*(sj3));
CheckValue<IkReal> x796 = IKatan2WithCheck(((gconst9)*(((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x792)))+(((IkReal(51870.0000000000))*(sj3)))+(((pz)*(x794)))+(((IkReal(-1.00000000000000))*(x791)*(x795)))+(((IkReal(-1.00000000000000))*(cj1)*(x791)*(x792)))+(((IkReal(-1.00000000000000))*(x790)*(x795)))+(((IkReal(-1.00000000000000))*(cj1)*(x790)*(x792)))+(((IkReal(-1.00000000000000))*(x789)*(x791)))+(((IkReal(-1.00000000000000))*(x789)*(x790)))+(((IkReal(-1.00000000000000))*(pz)*(x793)))))),((gconst9)*(((IkReal(26410.0000000000))+(((x790)*(x794)))+(((IkReal(-1.00000000000000))*(sj1)*(x791)*(x792)))+(((pz)*(x795)))+(((IkReal(-1.00000000000000))*(x791)*(x793)))+(((pz)*(x789)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x790)*(x793)))+(((cj1)*(pz)*(x792)))+(((x791)*(x794)))+(((IkReal(-1.00000000000000))*(sj1)*(x790)*(x792)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x796.valid ) {
    continue;
}
j2array[0]=x796.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x797=IKcos(j2);
IkReal x798=IKsin(j2);
IkReal x799=((px)*(sj1));
IkReal x800=((IkReal(0.273000000000000))*(cj3));
IkReal x801=((py)*(sj1));
IkReal x802=((IkReal(1.00000000000000))*(r00));
IkReal x803=((cj1)*(sj0));
IkReal x804=((IkReal(1.00000000000000))*(px));
IkReal x805=((IkReal(1.00000000000000))*(pz));
IkReal x806=((cj0)*(r01));
IkReal x807=((pz)*(sj1));
IkReal x808=((IkReal(0.273000000000000))*(sj3));
IkReal x809=((cj0)*(cj1));
IkReal x810=((IkReal(0.139000000000000))*(x798));
IkReal x811=((IkReal(0.139000000000000))*(x797));
IkReal x812=((x797)*(x808));
IkReal x813=((x798)*(x800));
IkReal x814=((x798)*(x808));
IkReal x815=((x797)*(x800));
IkReal x816=((x813)+(x810));
IkReal x817=((x814)+(x815)+(x811));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x805)))+(((IkReal(-1.00000000000000))*(x817)))+(((sj0)*(x801)))+(((cj0)*(x799))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x803)))+(((IkReal(-1.00000000000000))*(x804)*(x809)))+(((IkReal(-1.00000000000000))*(sj1)*(x805)))+(((IkReal(-1.00000000000000))*(x812)))+(x816));
evalcond[2]=((((r02)*(sj0)*(x799)))+(((x806)*(x807)))+(((IkReal(-1.00000000000000))*(x816)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x801)))+(x812)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(sj0)*(x802)*(x807)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x802))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x806)))+(((r01)*(x799)))+(((IkReal(-1.00000000000000))*(cj1)*(x805)*(x806)))+(((IkReal(-1.00000000000000))*(x817)))+(((pz)*(r00)*(x803)))+(((IkReal(-1.00000000000000))*(r02)*(x803)*(x804)))+(((py)*(r02)*(x809)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x801)*(x802))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x818=((sj0)*(sj1));
IkReal x819=((cj0)*(sj1));
CheckValue<IkReal> x820 = IKPowWithIntegerCheck(cj4,-1.00000000000000);
if( !x820.valid ) {
    continue;
}
if( IKabs(((IkReal(0.00719424460431655))*(x820.value)*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r00)*(x819)))+(((IkReal(-190.000000000000))*(r01)*(x818)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(1000.00000000000))*(px)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(px)*(x819)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-5.00698342424961))*(py)*(x818))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00719424460431655))*(x820.value)*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r00)*(x819)))+(((IkReal(-190.000000000000))*(r01)*(x818)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(1000.00000000000))*(px)*(r00)))))))+IKsqr(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(px)*(x819)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-5.00698342424961))*(py)*(x818)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.00719424460431655))*(x820.value)*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r00)*(x819)))+(((IkReal(-190.000000000000))*(r01)*(x818)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(1000.00000000000))*(px)*(r00)))))), ((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(px)*(x819)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-5.00698342424961))*(py)*(x818)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x821=IKcos(j3);
IkReal x822=((r01)*(sj0));
IkReal x823=((IkReal(0.190000000000000))*(cj1));
IkReal x824=((py)*(r02));
IkReal x825=((IkReal(0.380000000000000))*(cj1));
IkReal x826=((r00)*(sj0));
IkReal x827=((cj0)*(r01));
IkReal x828=((IkReal(1.00000000000000))*(pz));
IkReal x829=((IkReal(1.00000000000000))*(pp));
IkReal x830=((cj0)*(r00));
IkReal x831=((IkReal(0.190000000000000))*(sj1));
IkReal x832=((IkReal(0.139000000000000))*(cj4));
IkReal x833=((IkReal(2.00000000000000))*(pz));
IkReal x834=((px)*(r02));
IkReal x835=((IkReal(2.00000000000000))*(px)*(py));
IkReal x836=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x837=((IkReal(0.0758940000000000))*(x821));
IkReal x838=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(pz)*(x825)))+(((IkReal(-1.00000000000000))*(x829)))+(((cj0)*(x838)))+(x837)+(((sj0)*(x836))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x828)))+(((IkReal(-1.00000000000000))*(r02)*(x823)))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((x830)*(x831)))+(((x822)*(x831)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((x832)*(IKsin(j3)))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x821)*(x832)))+(((IkReal(-1.00000000000000))*(r02)*(x831)))+(((IkReal(-1.00000000000000))*(x822)*(x828)))+(((IkReal(-1.00000000000000))*(x822)*(x823)))+(((IkReal(-1.00000000000000))*(x828)*(x830)))+(((sj0)*(x824)))+(((IkReal(-1.00000000000000))*(x823)*(x830)))+(((cj0)*(x834)))+(((IkReal(-0.273000000000000))*(cj4))));
CheckValue<IkReal> x839 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x839.valid ) {
    continue;
}
CheckValue<IkReal> x840 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x840.valid ) {
    continue;
}
evalcond[3]=((((sj0)*(x833)*(x834)))+(((IkReal(-1.00000000000000))*(cj0)*(x824)*(x825)))+(((sj0)*(x825)*(x834)))+(((sj4)*(x837)))+(((IkReal(0.0938500000000000))*(sj4)))+(((IkReal(0.0361000000000000))*(x827)))+(((IkReal(-1.00000000000000))*(pz)*(x825)*(x826)))+(((r00)*(x836)))+(((pz)*(x825)*(x827)))+(((IkReal(-1.00000000000000))*(x826)*(x829)))+(((IkReal(-1.00000000000000))*(x830)*(x835)))+(((IkReal(-2.00000000000000))*(x827)*(x839.value)))+(((IkReal(2.00000000000000))*(x826)*(x840.value)))+(((x822)*(x835)))+(((IkReal(-0.0361000000000000))*(x826)))+(((pp)*(x827)))+(((IkReal(-1.00000000000000))*(r01)*(x838)))+(((IkReal(-1.00000000000000))*(cj0)*(x824)*(x833))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
CheckValue<IkReal> x841 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x841.valid ) {
    continue;
}
CheckValue<IkReal> x842 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x842.valid ) {
    continue;
}
gconst1=IKsign(((((cj4)*(x841.value)))+(((cj4)*(x842.value)))));
CheckValue<IkReal> x843 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x843.valid ) {
    continue;
}
CheckValue<IkReal> x844 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x844.valid ) {
    continue;
}
dummyeval[0]=((((cj4)*(x843.value)))+(((cj4)*(x844.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x845=((IkReal(273.000000000000))*(cj4));
CheckValue<IkReal> x846 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x846.valid ) {
    continue;
}
CheckValue<IkReal> x847 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x847.valid ) {
    continue;
}
gconst2=IKsign(((((IkReal(-139.000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x845)*(x846.value)))+(((IkReal(-1.00000000000000))*(x845)*(x847.value)))));
IkReal x848=((IkReal(1.96402877697842))*(cj4));
CheckValue<IkReal> x849 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x849.valid ) {
    continue;
}
CheckValue<IkReal> x850 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x850.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x848)*(x849.value)))+(((IkReal(-1.00000000000000))*(x848)*(x850.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x851=((IkReal(0.0758940000000000))*(cj3));
CheckValue<IkReal> x889 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x889.valid ) {
    continue;
}
IkReal x852=x889.value;
CheckValue<IkReal> x890 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x890.valid ) {
    continue;
}
IkReal x853=x890.value;
CheckValue<IkReal> x891 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x891.valid ) {
    continue;
}
IkReal x854=x891.value;
IkReal x855=((r01)*(sj0));
IkReal x856=((IkReal(2.00000000000000))*(px));
IkReal x857=((IkReal(0.190000000000000))*(cj1));
IkReal x858=((r00)*(sj1));
IkReal x859=((IkReal(0.0361000000000000))*(cj0));
IkReal x860=((py)*(r02));
IkReal x861=((cj0)*(cj1));
IkReal x862=((IkReal(0.380000000000000))*(pz));
IkReal x863=((pz)*(r02));
IkReal x864=((IkReal(2.00000000000000))*(sj0));
IkReal x865=((cj0)*(r01));
IkReal x866=((IkReal(0.380000000000000))*(py));
IkReal x867=((pz)*(sj1));
IkReal x868=((IkReal(1.00000000000000))*(sj0));
IkReal x869=((pp)*(r00));
IkReal x870=((IkReal(0.190000000000000))*(sj1));
IkReal x871=((IkReal(0.0361000000000000))*(sj1));
IkReal x872=((IkReal(2.00000000000000))*(cj0));
IkReal x873=((r00)*(sj0));
IkReal x874=((IkReal(1.00000000000000))*(r00));
IkReal x875=((cj1)*(r00));
IkReal x876=((cj1)*(r02));
IkReal x877=((cj0)*(r00));
IkReal x878=((cj0)*(sj1));
IkReal x879=((IkReal(0.380000000000000))*(px));
IkReal x880=((cj1)*(pz));
IkReal x881=((IkReal(1.00000000000000))*(pp));
IkReal x882=((cj0)*(r02));
IkReal x883=((py)*(r01));
IkReal x884=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x885=((r00)*(x853));
IkReal x886=((IkReal(2.00000000000000))*(x883));
IkReal x887=((IkReal(2.00000000000000))*(x852));
IkReal x888=((IkReal(2.00000000000000))*(x854));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=((((cj0)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x868))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x868)))+(x865));
evalcond[3]=((IkReal(0.0577500000000000))+(((x878)*(x879)))+(((sj0)*(sj1)*(x866)))+(((IkReal(-1.00000000000000))*(x881)))+(((IkReal(-1.00000000000000))*(cj1)*(x862)))+(x851));
evalcond[4]=((((IkReal(-1.00000000000000))*(x876)))+(((sj1)*(x855)))+(((cj0)*(x858))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x884)))+(((IkReal(-1.00000000000000))*(x861)*(x874)))+(((IkReal(-1.00000000000000))*(cj1)*(x855))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x863)))+(((x855)*(x870)))+(((IkReal(-1.00000000000000))*(x883)))+(((IkReal(-1.00000000000000))*(r02)*(x857)))+(((IkReal(-1.00000000000000))*(px)*(x874)))+(((IkReal(0.190000000000000))*(cj0)*(x858))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x857)*(x877)))+(((px)*(x882)))+(((IkReal(-1.00000000000000))*(pz)*(x855)))+(((sj0)*(x860)))+(((IkReal(-1.00000000000000))*(r02)*(x870)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x874)))+(((IkReal(-1.00000000000000))*(x855)*(x857))));
evalcond[8]=((IkReal(0.0938500000000000))+(((pp)*(x865)))+(((IkReal(-1.00000000000000))*(py)*(x856)*(x877)))+(((sj0)*(x856)*(x863)))+(((py)*(x855)*(x856)))+(((IkReal(-1.00000000000000))*(x868)*(x869)))+(((IkReal(-0.380000000000000))*(x860)*(x861)))+(((sj0)*(x876)*(x879)))+(((IkReal(-0.0361000000000000))*(x873)))+(((x864)*(x885)))+(((x858)*(x866)))+(((IkReal(-1.00000000000000))*(cj1)*(x862)*(x873)))+(((IkReal(-1.00000000000000))*(pz)*(x860)*(x872)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x879)))+(((r01)*(x861)*(x862)))+(x851)+(((IkReal(-1.00000000000000))*(x865)*(x887)))+(((r01)*(x859))));
evalcond[9]=((((IkReal(0.0361000000000000))*(x876)))+(((r01)*(x866)))+(((x880)*(x886)))+(((r00)*(x879)))+(((x876)*(x888)))+(((IkReal(-1.00000000000000))*(sj1)*(x855)*(x887)))+(((IkReal(-1.00000000000000))*(x860)*(x864)*(x867)))+(((IkReal(-1.00000000000000))*(x856)*(x863)*(x878)))+(((pz)*(x856)*(x875)))+(((IkReal(-1.00000000000000))*(x876)*(x881)))+(((IkReal(-1.00000000000000))*(x853)*(x858)*(x872)))+(((r02)*(x862)))+(((IkReal(-1.00000000000000))*(x858)*(x859)))+(((pp)*(sj1)*(x855)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x856)*(x858)))+(((IkReal(-1.00000000000000))*(x855)*(x871)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x856)*(x865)))+(((cj0)*(pp)*(x858))));
evalcond[10]=((((IkReal(0.380000000000000))*(sj0)*(x860)))+(((r02)*(sj1)*(x888)))+(((x879)*(x882)))+(((cj1)*(py)*(x856)*(x873)))+(((pz)*(x856)*(x858)))+(((x867)*(x886)))+(((IkReal(-0.0361000000000000))*(cj1)*(x855)))+(((IkReal(-1.00000000000000))*(x862)*(x877)))+(((cj1)*(x855)*(x887)))+(((IkReal(2.00000000000000))*(x861)*(x885)))+(((IkReal(-1.00000000000000))*(cj1)*(x855)*(x881)))+(((IkReal(-1.00000000000000))*(x861)*(x869)))+(((IkReal(-1.00000000000000))*(r02)*(x871)))+(((x860)*(x864)*(x880)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x881)))+(((IkReal(-1.00000000000000))*(x859)*(x875)))+(((x856)*(x861)*(x883)))+(((x856)*(x861)*(x863)))+(((IkReal(-1.00000000000000))*(x855)*(x862))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst3;
CheckValue<IkReal> x892 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x892.valid ) {
    continue;
}
CheckValue<IkReal> x893 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x893.valid ) {
    continue;
}
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*(x892.value)))+(((IkReal(-74529.0000000000))*(x893.value)))+(((IkReal(-75894.0000000000))*(cj3)))));
CheckValue<IkReal> x894 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x894.valid ) {
    continue;
}
CheckValue<IkReal> x895 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x895.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*(x894.value)))+(((IkReal(-3.85740903679934))*(x895.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
CheckValue<IkReal> x896 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x896.valid ) {
    continue;
}
CheckValue<IkReal> x897 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x897.valid ) {
    continue;
}
gconst4=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*(x896.value)))+(((IkReal(74529.0000000000))*(x897.value)))));
CheckValue<IkReal> x898 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x898.valid ) {
    continue;
}
CheckValue<IkReal> x899 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x899.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*(x898.value)))+(((IkReal(3.85740903679934))*(x899.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x900=((cj1)*(py));
IkReal x901=((pz)*(sj1));
IkReal x902=((IkReal(139000.000000000))*(sj0));
IkReal x903=((IkReal(273000.000000000))*(cj3));
IkReal x904=((py)*(sj1));
IkReal x905=((IkReal(273000.000000000))*(sj3));
IkReal x906=((cj1)*(pz));
IkReal x907=((IkReal(139000.000000000))*(cj0));
IkReal x908=((cj0)*(r02));
IkReal x909=((r00)*(x905));
IkReal x910=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x911=((px)*(r02)*(sj1));
IkReal x912=((cj1)*(px)*(r01));
IkReal x913=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
CheckValue<IkReal> x914 = IKatan2WithCheck(((gconst4)*(((((r00)*(x901)*(x902)))+(((x903)*(x904)*(x908)))+(((IkReal(-139000.000000000))*(x912)))+(((cj0)*(px)*(sj1)*(x905)))+(((r00)*(sj0)*(x901)*(x903)))+(((r00)*(x900)*(x903)))+(((IkReal(-1.00000000000000))*(r01)*(x901)*(x907)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x901)*(x903)))+(((IkReal(-1.00000000000000))*(x902)*(x911)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(139000.000000000))*(r00)*(x900)))+(((IkReal(-1.00000000000000))*(sj0)*(x903)*(x911)))+(((sj0)*(x904)*(x905)))+(((r02)*(x904)*(x907)))+(((IkReal(-1.00000000000000))*(x905)*(x906)))+(((IkReal(-1.00000000000000))*(x903)*(x912)))))),((gconst4)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x900)*(x909)))+(((IkReal(-1.00000000000000))*(x903)*(x906)))+(((cj0)*(px)*(sj1)*(x903)))+(((IkReal(-1.00000000000000))*(sj0)*(x901)*(x909)))+(((IkReal(-139000.000000000))*(x906)))+(((x902)*(x904)))+(((IkReal(-1.00000000000000))*(x904)*(x905)*(x908)))+(((cj0)*(r01)*(x901)*(x905)))+(((sj0)*(x903)*(x904)))+(((sj0)*(x905)*(x911)))+(((px)*(sj1)*(x907)))+(((x905)*(x912)))+(((IkReal(-51870.0000000000))*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x914.valid ) {
    continue;
}
j2array[0]=x914.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x915=IKcos(j2);
IkReal x916=IKsin(j2);
IkReal x917=((px)*(sj1));
IkReal x918=((IkReal(0.273000000000000))*(cj3));
IkReal x919=((py)*(sj1));
IkReal x920=((IkReal(1.00000000000000))*(r00));
IkReal x921=((cj1)*(sj0));
IkReal x922=((IkReal(1.00000000000000))*(px));
IkReal x923=((IkReal(1.00000000000000))*(pz));
IkReal x924=((cj0)*(r01));
IkReal x925=((pz)*(sj1));
IkReal x926=((IkReal(0.273000000000000))*(sj3));
IkReal x927=((cj0)*(cj1));
IkReal x928=((IkReal(0.139000000000000))*(x916));
IkReal x929=((IkReal(0.139000000000000))*(x915));
IkReal x930=((x916)*(x918));
IkReal x931=((x915)*(x926));
IkReal x932=((x916)*(x926));
IkReal x933=((x915)*(x918));
IkReal x934=((x930)+(x928));
IkReal x935=((x933)+(x932)+(x929));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x917)))+(((IkReal(-1.00000000000000))*(cj1)*(x923)))+(((sj0)*(x919)))+(((IkReal(-1.00000000000000))*(x935))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x923)))+(((IkReal(-1.00000000000000))*(py)*(x921)))+(x934)+(((IkReal(-1.00000000000000))*(x931)))+(((IkReal(-1.00000000000000))*(x922)*(x927))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x920)*(x925)))+(((x924)*(x925)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x920)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x919)))+(((cj1)*(px)*(r01)))+(x934)+(((r02)*(sj0)*(x917)))+(((IkReal(-1.00000000000000))*(x931))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x923)*(x924)))+(((IkReal(-0.190000000000000))*(x924)))+(((pz)*(r00)*(x921)))+(((IkReal(-1.00000000000000))*(x919)*(x920)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((py)*(r02)*(x927)))+(x935)+(((r01)*(x917)))+(((IkReal(-1.00000000000000))*(r02)*(x921)*(x922))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x936=((IkReal(139000.000000000))*(cj1));
IkReal x937=((py)*(sj0));
IkReal x938=((cj0)*(px));
IkReal x939=((IkReal(273000.000000000))*(cj3));
IkReal x940=((IkReal(139000.000000000))*(sj1));
IkReal x941=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x942=((IkReal(273000.000000000))*(sj1)*(sj3));
CheckValue<IkReal> x943 = IKatan2WithCheck(((gconst3)*(((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x939)))+(((IkReal(-1.00000000000000))*(pz)*(x940)))+(((IkReal(-1.00000000000000))*(cj1)*(x938)*(x939)))+(((IkReal(-1.00000000000000))*(x938)*(x942)))+(((IkReal(-1.00000000000000))*(cj1)*(x937)*(x939)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x936)*(x938)))+(((IkReal(-1.00000000000000))*(x936)*(x937)))+(((IkReal(-1.00000000000000))*(x937)*(x942)))+(((pz)*(x941)))))),((gconst3)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x937)*(x939)))+(((IkReal(-1.00000000000000))*(sj1)*(x938)*(x939)))+(((x938)*(x941)))+(((x937)*(x941)))+(((IkReal(-1.00000000000000))*(x938)*(x940)))+(((cj1)*(pz)*(x939)))+(((IkReal(51870.0000000000))*(cj3)))+(((pz)*(x936)))+(((IkReal(-1.00000000000000))*(x937)*(x940)))+(((pz)*(x942)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x943.valid ) {
    continue;
}
j2array[0]=x943.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x944=IKcos(j2);
IkReal x945=IKsin(j2);
IkReal x946=((px)*(sj1));
IkReal x947=((IkReal(0.273000000000000))*(cj3));
IkReal x948=((py)*(sj1));
IkReal x949=((IkReal(1.00000000000000))*(r00));
IkReal x950=((cj1)*(sj0));
IkReal x951=((IkReal(1.00000000000000))*(px));
IkReal x952=((IkReal(1.00000000000000))*(pz));
IkReal x953=((cj0)*(r01));
IkReal x954=((pz)*(sj1));
IkReal x955=((IkReal(0.273000000000000))*(sj3));
IkReal x956=((cj0)*(cj1));
IkReal x957=((IkReal(0.139000000000000))*(x945));
IkReal x958=((IkReal(0.139000000000000))*(x944));
IkReal x959=((x945)*(x947));
IkReal x960=((x944)*(x955));
IkReal x961=((x945)*(x955));
IkReal x962=((x944)*(x947));
IkReal x963=((x959)+(x957));
IkReal x964=((x962)+(x961)+(x958));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x946)))+(((IkReal(-1.00000000000000))*(cj1)*(x952)))+(((sj0)*(x948)))+(((IkReal(-1.00000000000000))*(x964))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x952)))+(((IkReal(-1.00000000000000))*(x951)*(x956)))+(((IkReal(-1.00000000000000))*(py)*(x950)))+(x963)+(((IkReal(-1.00000000000000))*(x960))));
evalcond[2]=((((r02)*(sj0)*(x946)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x949)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x948)))+(((IkReal(-1.00000000000000))*(sj0)*(x949)*(x954)))+(((cj1)*(px)*(r01)))+(((x953)*(x954)))+(x963)+(((IkReal(-1.00000000000000))*(x960))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x952)*(x953)))+(((IkReal(-1.00000000000000))*(x948)*(x949)))+(((r01)*(x946)))+(((pz)*(r00)*(x950)))+(((IkReal(-0.190000000000000))*(x953)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((py)*(r02)*(x956)))+(((IkReal(-1.00000000000000))*(r02)*(x950)*(x951)))+(x964));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x965=((IkReal(0.0758940000000000))*(cj3));
CheckValue<IkReal> x1003 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1003.valid ) {
    continue;
}
IkReal x966=x1003.value;
CheckValue<IkReal> x1004 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1004.valid ) {
    continue;
}
IkReal x967=x1004.value;
CheckValue<IkReal> x1005 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1005.valid ) {
    continue;
}
IkReal x968=x1005.value;
IkReal x969=((r01)*(sj0));
IkReal x970=((IkReal(2.00000000000000))*(px));
IkReal x971=((IkReal(0.190000000000000))*(cj1));
IkReal x972=((r00)*(sj1));
IkReal x973=((IkReal(0.0361000000000000))*(cj0));
IkReal x974=((py)*(r02));
IkReal x975=((cj0)*(cj1));
IkReal x976=((IkReal(0.380000000000000))*(pz));
IkReal x977=((pz)*(r02));
IkReal x978=((IkReal(2.00000000000000))*(sj0));
IkReal x979=((cj0)*(r01));
IkReal x980=((IkReal(0.380000000000000))*(py));
IkReal x981=((pz)*(sj1));
IkReal x982=((IkReal(1.00000000000000))*(sj0));
IkReal x983=((pp)*(r00));
IkReal x984=((IkReal(0.190000000000000))*(sj1));
IkReal x985=((IkReal(0.0361000000000000))*(sj1));
IkReal x986=((IkReal(2.00000000000000))*(cj0));
IkReal x987=((r00)*(sj0));
IkReal x988=((IkReal(1.00000000000000))*(r00));
IkReal x989=((cj1)*(r00));
IkReal x990=((cj1)*(r02));
IkReal x991=((cj0)*(r00));
IkReal x992=((cj0)*(sj1));
IkReal x993=((IkReal(0.380000000000000))*(px));
IkReal x994=((cj1)*(pz));
IkReal x995=((IkReal(1.00000000000000))*(pp));
IkReal x996=((cj0)*(r02));
IkReal x997=((py)*(r01));
IkReal x998=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x999=((r00)*(x967));
IkReal x1000=((IkReal(2.00000000000000))*(x997));
IkReal x1001=((IkReal(2.00000000000000))*(x966));
IkReal x1002=((IkReal(2.00000000000000))*(x968));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x982)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x982)))+(x979));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x976)))+(((x992)*(x993)))+(((sj0)*(sj1)*(x980)))+(((IkReal(-1.00000000000000))*(x995)))+(x965));
evalcond[4]=((((IkReal(-1.00000000000000))*(x990)))+(((sj1)*(x969)))+(((cj0)*(x972))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x969)))+(((IkReal(-1.00000000000000))*(x998)))+(((IkReal(-1.00000000000000))*(x975)*(x988))));
evalcond[6]=((((IkReal(-1.00000000000000))*(px)*(x988)))+(((IkReal(-1.00000000000000))*(x997)))+(((IkReal(0.190000000000000))*(cj0)*(x972)))+(((IkReal(-1.00000000000000))*(x977)))+(((IkReal(-1.00000000000000))*(r02)*(x971)))+(((x969)*(x984))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x969)*(x971)))+(((px)*(x996)))+(((sj0)*(x974)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x988)))+(((IkReal(-1.00000000000000))*(pz)*(x969)))+(((IkReal(-1.00000000000000))*(r02)*(x984)))+(((IkReal(-1.00000000000000))*(x971)*(x991))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((IkReal(-1.00000000000000))*(pz)*(x974)*(x986)))+(((x972)*(x980)))+(((sj0)*(x990)*(x993)))+(((r01)*(x975)*(x976)))+(((IkReal(-0.0361000000000000))*(x987)))+(((IkReal(-1.00000000000000))*(cj1)*(x976)*(x987)))+(((IkReal(-0.380000000000000))*(x974)*(x975)))+(((r01)*(x973)))+(((pp)*(x979)))+(((x978)*(x999)))+(((IkReal(-1.00000000000000))*(x982)*(x983)))+(((py)*(x969)*(x970)))+(((IkReal(-1.00000000000000))*(x1001)*(x979)))+(((IkReal(-1.00000000000000))*(py)*(x970)*(x991)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x993)))+(((sj0)*(x970)*(x977)))+(((IkReal(-1.00000000000000))*(x965))));
evalcond[9]=((((x1000)*(x994)))+(((cj0)*(pp)*(x972)))+(((IkReal(0.0361000000000000))*(x990)))+(((pz)*(x970)*(x989)))+(((IkReal(-1.00000000000000))*(x969)*(x985)))+(((r00)*(x993)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x970)*(x979)))+(((IkReal(-1.00000000000000))*(x990)*(x995)))+(((r01)*(x980)))+(((IkReal(-1.00000000000000))*(x970)*(x977)*(x992)))+(((IkReal(-1.00000000000000))*(x967)*(x972)*(x986)))+(((x1002)*(x990)))+(((pp)*(sj1)*(x969)))+(((IkReal(-1.00000000000000))*(sj1)*(x1001)*(x969)))+(((IkReal(-1.00000000000000))*(x974)*(x978)*(x981)))+(((IkReal(-1.00000000000000))*(x972)*(x973)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x970)*(x972)))+(((r02)*(x976))));
evalcond[10]=((((x970)*(x975)*(x997)))+(((x993)*(x996)))+(((IkReal(-0.0361000000000000))*(cj1)*(x969)))+(((pz)*(x970)*(x972)))+(((cj1)*(py)*(x970)*(x987)))+(((x970)*(x975)*(x977)))+(((IkReal(-1.00000000000000))*(x969)*(x976)))+(((r02)*(sj1)*(x1002)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x995)))+(((IkReal(-1.00000000000000))*(cj1)*(x969)*(x995)))+(((IkReal(-1.00000000000000))*(x975)*(x983)))+(((IkReal(0.380000000000000))*(sj0)*(x974)))+(((IkReal(-1.00000000000000))*(r02)*(x985)))+(((cj1)*(x1001)*(x969)))+(((IkReal(-1.00000000000000))*(x976)*(x991)))+(((IkReal(2.00000000000000))*(x975)*(x999)))+(((IkReal(-1.00000000000000))*(x973)*(x989)))+(((x1000)*(x981)))+(((x974)*(x978)*(x994))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst5;
CheckValue<IkReal> x1006 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1006.valid ) {
    continue;
}
CheckValue<IkReal> x1007 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1007.valid ) {
    continue;
}
gconst5=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*(x1006.value)))+(((IkReal(-74529.0000000000))*(x1007.value)))+(((IkReal(-75894.0000000000))*(cj3)))));
CheckValue<IkReal> x1008 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1008.valid ) {
    continue;
}
CheckValue<IkReal> x1009 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1009.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*(x1008.value)))+(((IkReal(-3.85740903679934))*(x1009.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
CheckValue<IkReal> x1010 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1010.valid ) {
    continue;
}
CheckValue<IkReal> x1011 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1011.valid ) {
    continue;
}
gconst6=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*(x1010.value)))+(((IkReal(74529.0000000000))*(x1011.value)))));
CheckValue<IkReal> x1012 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1012.valid ) {
    continue;
}
CheckValue<IkReal> x1013 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1013.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*(x1012.value)))+(((IkReal(3.85740903679934))*(x1013.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1014=((IkReal(273000.000000000))*(sj3));
IkReal x1015=((pz)*(sj1));
IkReal x1016=((IkReal(139000.000000000))*(sj0));
IkReal x1017=((px)*(sj1));
IkReal x1018=((r02)*(sj0));
IkReal x1019=((IkReal(273000.000000000))*(cj3));
IkReal x1020=((py)*(sj1));
IkReal x1021=((cj1)*(pz));
IkReal x1022=((IkReal(139000.000000000))*(cj0));
IkReal x1023=((r00)*(sj0));
IkReal x1024=((cj1)*(py)*(r00));
IkReal x1025=((cj0)*(x1019));
IkReal x1026=((cj1)*(px)*(r01));
CheckValue<IkReal> x1027 = IKatan2WithCheck(((gconst6)*(((((IkReal(-1.00000000000000))*(r00)*(x1015)*(x1016)))+(((IkReal(-1.00000000000000))*(x1015)*(x1019)*(x1023)))+(((IkReal(-1.00000000000000))*(x1019)*(x1024)))+(((IkReal(-1.00000000000000))*(r02)*(x1020)*(x1025)))+(((IkReal(-1.00000000000000))*(r02)*(x1020)*(x1022)))+(((x1017)*(x1018)*(x1019)))+(((r02)*(x1016)*(x1017)))+(((IkReal(139000.000000000))*(x1026)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1014)*(x1021)))+(((x1019)*(x1026)))+(((r01)*(x1015)*(x1022)))+(((r01)*(x1015)*(x1025)))+(((cj0)*(x1014)*(x1017)))+(((IkReal(-139000.000000000))*(x1024)))+(((sj0)*(x1014)*(x1020)))))),((gconst6)*(((IkReal(-26410.0000000000))+(((x1017)*(x1022)))+(((x1017)*(x1025)))+(((IkReal(-1.00000000000000))*(x1014)*(x1017)*(x1018)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x1014)*(x1015)))+(((sj0)*(x1019)*(x1020)))+(((x1014)*(x1015)*(x1023)))+(((x1014)*(x1024)))+(((IkReal(-1.00000000000000))*(x1019)*(x1021)))+(((cj0)*(r02)*(x1014)*(x1020)))+(((IkReal(-1.00000000000000))*(x1014)*(x1026)))+(((IkReal(-139000.000000000))*(x1021)))+(((IkReal(-51870.0000000000))*(cj3)))+(((x1016)*(x1020)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1027.valid ) {
    continue;
}
j2array[0]=x1027.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1028=IKcos(j2);
IkReal x1029=IKsin(j2);
IkReal x1030=((px)*(sj1));
IkReal x1031=((IkReal(0.273000000000000))*(cj3));
IkReal x1032=((py)*(sj1));
IkReal x1033=((IkReal(1.00000000000000))*(r00));
IkReal x1034=((cj1)*(sj0));
IkReal x1035=((IkReal(1.00000000000000))*(px));
IkReal x1036=((IkReal(1.00000000000000))*(pz));
IkReal x1037=((cj0)*(r01));
IkReal x1038=((pz)*(sj1));
IkReal x1039=((IkReal(0.273000000000000))*(sj3));
IkReal x1040=((cj0)*(cj1));
IkReal x1041=((IkReal(0.139000000000000))*(x1029));
IkReal x1042=((IkReal(0.139000000000000))*(x1028));
IkReal x1043=((x1028)*(x1039));
IkReal x1044=((x1029)*(x1031));
IkReal x1045=((x1029)*(x1039));
IkReal x1046=((x1028)*(x1031));
IkReal x1047=((x1041)+(x1044));
IkReal x1048=((x1042)+(x1046)+(x1045));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x1032)))+(((cj0)*(x1030)))+(((IkReal(-1.00000000000000))*(cj1)*(x1036)))+(((IkReal(-1.00000000000000))*(x1048))));
evalcond[1]=((x1047)+(((IkReal(-1.00000000000000))*(py)*(x1034)))+(((IkReal(-1.00000000000000))*(sj1)*(x1036)))+(((IkReal(-1.00000000000000))*(x1035)*(x1040)))+(((IkReal(-1.00000000000000))*(x1043))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1032)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1033)))+(x1043)+(((r02)*(sj0)*(x1030)))+(((IkReal(-1.00000000000000))*(sj0)*(x1033)*(x1038)))+(((x1037)*(x1038)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x1047))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1032)*(x1033)))+(((pz)*(r00)*(x1034)))+(((py)*(r02)*(x1040)))+(((IkReal(-1.00000000000000))*(r02)*(x1034)*(x1035)))+(((IkReal(-0.190000000000000))*(x1037)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(x1036)*(x1037)))+(((IkReal(-1.00000000000000))*(x1048)))+(((r01)*(x1030))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1049=((IkReal(139000.000000000))*(cj1));
IkReal x1050=((py)*(sj0));
IkReal x1051=((cj0)*(px));
IkReal x1052=((IkReal(273000.000000000))*(cj3));
IkReal x1053=((IkReal(139000.000000000))*(sj1));
IkReal x1054=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x1055=((IkReal(273000.000000000))*(sj1)*(sj3));
CheckValue<IkReal> x1056 = IKatan2WithCheck(((gconst5)*(((((IkReal(-1.00000000000000))*(cj1)*(x1050)*(x1052)))+(((IkReal(-1.00000000000000))*(cj1)*(x1051)*(x1052)))+(((pz)*(x1054)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x1053)))+(((IkReal(-1.00000000000000))*(x1050)*(x1055)))+(((IkReal(-1.00000000000000))*(x1049)*(x1051)))+(((IkReal(-1.00000000000000))*(x1049)*(x1050)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1052)))+(((IkReal(-1.00000000000000))*(x1051)*(x1055)))))),((gconst5)*(((IkReal(26410.0000000000))+(((pz)*(x1055)))+(((cj1)*(pz)*(x1052)))+(((x1050)*(x1054)))+(((IkReal(-1.00000000000000))*(sj1)*(x1051)*(x1052)))+(((pz)*(x1049)))+(((x1051)*(x1054)))+(((IkReal(-1.00000000000000))*(sj1)*(x1050)*(x1052)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1050)*(x1053)))+(((IkReal(-1.00000000000000))*(x1051)*(x1053)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1056.valid ) {
    continue;
}
j2array[0]=x1056.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1057=IKcos(j2);
IkReal x1058=IKsin(j2);
IkReal x1059=((px)*(sj1));
IkReal x1060=((IkReal(0.273000000000000))*(cj3));
IkReal x1061=((py)*(sj1));
IkReal x1062=((IkReal(1.00000000000000))*(r00));
IkReal x1063=((cj1)*(sj0));
IkReal x1064=((IkReal(1.00000000000000))*(px));
IkReal x1065=((IkReal(1.00000000000000))*(pz));
IkReal x1066=((cj0)*(r01));
IkReal x1067=((pz)*(sj1));
IkReal x1068=((IkReal(0.273000000000000))*(sj3));
IkReal x1069=((cj0)*(cj1));
IkReal x1070=((IkReal(0.139000000000000))*(x1058));
IkReal x1071=((IkReal(0.139000000000000))*(x1057));
IkReal x1072=((x1057)*(x1068));
IkReal x1073=((x1058)*(x1060));
IkReal x1074=((x1058)*(x1068));
IkReal x1075=((x1057)*(x1060));
IkReal x1076=((x1073)+(x1070));
IkReal x1077=((x1074)+(x1075)+(x1071));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x1059)))+(((IkReal(-1.00000000000000))*(cj1)*(x1065)))+(((sj0)*(x1061)))+(((IkReal(-1.00000000000000))*(x1077))));
evalcond[1]=((x1076)+(((IkReal(-1.00000000000000))*(py)*(x1063)))+(((IkReal(-1.00000000000000))*(sj1)*(x1065)))+(((IkReal(-1.00000000000000))*(x1064)*(x1069)))+(((IkReal(-1.00000000000000))*(x1072))));
evalcond[2]=((((r02)*(sj0)*(x1059)))+(x1072)+(((IkReal(-1.00000000000000))*(sj0)*(x1062)*(x1067)))+(((x1066)*(x1067)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1061)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1062)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x1076))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x1065)*(x1066)))+(((py)*(r02)*(x1069)))+(((IkReal(-0.190000000000000))*(x1066)))+(((IkReal(-1.00000000000000))*(x1061)*(x1062)))+(((r01)*(x1059)))+(((pz)*(r00)*(x1063)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r02)*(x1063)*(x1064)))+(((IkReal(-1.00000000000000))*(x1077))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1078=((IkReal(139.000000000000))*(sj1));
IkReal x1079=((cj0)*(r00));
IkReal x1080=((IkReal(1000.00000000000))*(cj4));
IkReal x1081=((cj1)*(cj3));
IkReal x1082=((IkReal(273.000000000000))*(r02));
IkReal x1083=((cj1)*(sj3));
IkReal x1084=((IkReal(190.000000000000))*(cj4));
IkReal x1085=((IkReal(273.000000000000))*(r01));
IkReal x1086=((cj3)*(sj1));
IkReal x1087=((cj0)*(px));
IkReal x1088=((sj1)*(sj3));
IkReal x1089=((sj0)*(x1088));
CheckValue<IkReal> x1090 = IKatan2WithCheck(((gconst2)*(((((IkReal(-1.00000000000000))*(x1080)*(x1087)*(x1088)))+(((r01)*(sj0)*(x1078)))+(((sj3)*(x1084)))+(((IkReal(-1.00000000000000))*(py)*(x1080)*(x1089)))+(((x1078)*(x1079)))+(((sj0)*(x1085)*(x1086)))+(((IkReal(-1.00000000000000))*(x1081)*(x1082)))+(((IkReal(273.000000000000))*(x1079)*(x1086)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))+(((pz)*(x1080)*(x1083)))))),((gconst2)*(((((IkReal(-273.000000000000))*(x1079)*(x1088)))+(((x1082)*(x1083)))+(((IkReal(-1.00000000000000))*(x1080)*(x1086)*(x1087)))+(((IkReal(-1.00000000000000))*(x1085)*(x1089)))+(((cj3)*(x1084)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1080)*(x1086)))+(((pz)*(x1080)*(x1081)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1090.valid ) {
    continue;
}
j2array[0]=x1090.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1091=IKcos(j2);
IkReal x1092=IKsin(j2);
CheckValue<IkReal> x1133 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1133.valid ) {
    continue;
}
IkReal x1093=x1133.value;
CheckValue<IkReal> x1134 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1134.valid ) {
    continue;
}
IkReal x1094=x1134.value;
CheckValue<IkReal> x1135 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1135.valid ) {
    continue;
}
IkReal x1095=x1135.value;
IkReal x1096=((px)*(sj1));
IkReal x1097=((sj0)*(sj1));
IkReal x1098=((IkReal(0.0552080000000000))*(sj3));
IkReal x1099=((pp)*(r01));
IkReal x1100=((cj1)*(sj0));
IkReal x1101=((pz)*(r01));
IkReal x1102=((IkReal(0.380000000000000))*(sj0));
IkReal x1103=((IkReal(1.00000000000000))*(sj1));
IkReal x1104=((py)*(r00));
IkReal x1105=((pz)*(r02));
IkReal x1106=((IkReal(2.00000000000000))*(cj0));
IkReal x1107=((IkReal(2.00000000000000))*(py));
IkReal x1108=((pz)*(r00));
IkReal x1109=((pp)*(r02));
IkReal x1110=((IkReal(1.00000000000000))*(cj1));
IkReal x1111=((cj0)*(r00));
IkReal x1112=((IkReal(0.0361000000000000))*(cj1));
IkReal x1113=((py)*(r02));
IkReal x1114=((IkReal(0.0361000000000000))*(r01));
IkReal x1115=((IkReal(0.0361000000000000))*(sj1));
IkReal x1116=((py)*(r01));
IkReal x1117=((IkReal(2.00000000000000))*(px));
IkReal x1118=((cj1)*(px));
IkReal x1119=((IkReal(0.0938500000000000))*(cj3));
IkReal x1120=((IkReal(0.380000000000000))*(cj0));
IkReal x1121=((px)*(r02));
IkReal x1122=((cj4)*(x1092));
IkReal x1123=((cj4)*(x1091));
IkReal x1124=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x1125=((IkReal(0.139000000000000))*(x1092));
IkReal x1126=((IkReal(0.139000000000000))*(x1091));
IkReal x1127=((r00)*(x1095));
IkReal x1128=((IkReal(0.273000000000000))*(x1091));
IkReal x1129=((IkReal(0.273000000000000))*(cj3)*(x1092));
IkReal x1130=((x1105)*(x1107));
IkReal x1131=((IkReal(2.00000000000000))*(r01)*(x1094));
IkReal x1132=((IkReal(2.00000000000000))*(r02)*(x1093));
evalcond[0]=((((r01)*(x1097)))+(((IkReal(-1.00000000000000))*(sj3)*(x1123)))+(((IkReal(-1.00000000000000))*(r02)*(x1110)))+(((sj1)*(x1111)))+(((cj3)*(x1122))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x1103)))+(((IkReal(-1.00000000000000))*(r01)*(x1100)))+(((sj3)*(x1122)))+(((IkReal(-1.00000000000000))*(x1110)*(x1111)))+(((cj3)*(x1123))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-0.273000000000000))*(sj3)*(x1092)))+(((IkReal(-1.00000000000000))*(pz)*(x1110)))+(((IkReal(-1.00000000000000))*(cj3)*(x1128)))+(((IkReal(-1.00000000000000))*(x1126)))+(((py)*(x1097)))+(((cj0)*(x1096))));
evalcond[3]=((x1129)+(x1125)+(((IkReal(-1.00000000000000))*(sj3)*(x1128)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1110)))+(((IkReal(-1.00000000000000))*(pz)*(x1103)))+(((IkReal(-1.00000000000000))*(py)*(x1100))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj0)*(x1103)*(x1113)))+(((sj4)*(x1129)))+(((sj4)*(x1125)))+(((IkReal(-1.00000000000000))*(x1091)*(x1124)))+(((r01)*(x1118)))+(((IkReal(-1.00000000000000))*(x1097)*(x1108)))+(((IkReal(-1.00000000000000))*(x1104)*(x1110)))+(((cj0)*(sj1)*(x1101)))+(((r02)*(sj0)*(x1096))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1103)*(x1104)))+(((r01)*(x1096)))+(((sj4)*(x1126)))+(((cj3)*(sj4)*(x1128)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((x1100)*(x1108)))+(((IkReal(-1.00000000000000))*(cj0)*(x1101)*(x1110)))+(((cj0)*(cj1)*(x1113)))+(((x1092)*(x1124)))+(((IkReal(-1.00000000000000))*(x1100)*(x1121))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1097)*(x1131)))+(((IkReal(-1.00000000000000))*(x1097)*(x1130)))+(((IkReal(0.380000000000000))*(x1105)))+(((IkReal(0.380000000000000))*(x1116)))+(((IkReal(-1.00000000000000))*(x1109)*(x1110)))+(((IkReal(0.0758940000000000))*(x1122)))+(((IkReal(-2.00000000000000))*(sj0)*(x1096)*(x1104)))+(((x1119)*(x1122)))+(((IkReal(-1.00000000000000))*(x1098)*(x1123)))+(((IkReal(-1.00000000000000))*(x1096)*(x1105)*(x1106)))+(((IkReal(-1.00000000000000))*(sj1)*(x1106)*(x1127)))+(((cj1)*(x1101)*(x1107)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(x1096)*(x1106)*(x1116)))+(((cj1)*(x1132)))+(((IkReal(-1.00000000000000))*(x1097)*(x1114)))+(((IkReal(-1.00000000000000))*(x1111)*(x1115)))+(((pp)*(sj1)*(x1111)))+(((cj1)*(x1108)*(x1117)))+(((x1097)*(x1099)))+(((r02)*(x1112))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x1103)*(x1109)))+(((x1102)*(x1113)))+(((x1120)*(x1121)))+(((IkReal(0.0758940000000000))*(x1123)))+(((sj1)*(x1132)))+(((x1119)*(x1123)))+(((sj1)*(x1101)*(x1107)))+(((IkReal(-1.00000000000000))*(pp)*(x1110)*(x1111)))+(((x1100)*(x1131)))+(((x1100)*(x1130)))+(((x1105)*(x1106)*(x1118)))+(((cj1)*(x1106)*(x1127)))+(((x1106)*(x1116)*(x1118)))+(((IkReal(-1.00000000000000))*(x1100)*(x1114)))+(((IkReal(-1.00000000000000))*(r02)*(x1115)))+(((IkReal(2.00000000000000))*(x1096)*(x1108)))+(((IkReal(-1.00000000000000))*(x1108)*(x1120)))+(((IkReal(-1.00000000000000))*(x1099)*(x1100)))+(((x1100)*(x1104)*(x1117)))+(((x1098)*(x1122)))+(((IkReal(-1.00000000000000))*(x1111)*(x1112)))+(((IkReal(-1.00000000000000))*(x1101)*(x1102))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1136=((IkReal(1.00000000000000))*(sj1));
IkReal x1137=((cj1)*(sj3));
IkReal x1138=((cj0)*(r00));
IkReal x1139=((cj3)*(r02));
IkReal x1140=((r01)*(sj0));
IkReal x1141=((sj1)*(sj3));
IkReal x1142=((cj3)*(x1140));
CheckValue<IkReal> x1143 = IKatan2WithCheck(((gconst1)*(((((IkReal(-1.00000000000000))*(x1136)*(x1142)))+(((x1137)*(x1140)))+(((IkReal(-1.00000000000000))*(cj3)*(x1136)*(x1138)))+(((x1137)*(x1138)))+(((r02)*(x1141)))+(((cj1)*(x1139)))))),((gconst1)*(((((x1140)*(x1141)))+(((IkReal(-1.00000000000000))*(r02)*(x1137)))+(((sj1)*(x1139)))+(((cj1)*(x1142)))+(((cj1)*(cj3)*(x1138)))+(((x1138)*(x1141)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1143.valid ) {
    continue;
}
j2array[0]=x1143.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1144=IKcos(j2);
IkReal x1145=IKsin(j2);
CheckValue<IkReal> x1186 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1186.valid ) {
    continue;
}
IkReal x1146=x1186.value;
CheckValue<IkReal> x1187 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1187.valid ) {
    continue;
}
IkReal x1147=x1187.value;
CheckValue<IkReal> x1188 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1188.valid ) {
    continue;
}
IkReal x1148=x1188.value;
IkReal x1149=((px)*(sj1));
IkReal x1150=((sj0)*(sj1));
IkReal x1151=((IkReal(0.0552080000000000))*(sj3));
IkReal x1152=((pp)*(r01));
IkReal x1153=((cj1)*(sj0));
IkReal x1154=((pz)*(r01));
IkReal x1155=((IkReal(0.380000000000000))*(sj0));
IkReal x1156=((IkReal(1.00000000000000))*(sj1));
IkReal x1157=((py)*(r00));
IkReal x1158=((pz)*(r02));
IkReal x1159=((IkReal(2.00000000000000))*(cj0));
IkReal x1160=((IkReal(2.00000000000000))*(py));
IkReal x1161=((pz)*(r00));
IkReal x1162=((pp)*(r02));
IkReal x1163=((IkReal(1.00000000000000))*(cj1));
IkReal x1164=((cj0)*(r00));
IkReal x1165=((IkReal(0.0361000000000000))*(cj1));
IkReal x1166=((py)*(r02));
IkReal x1167=((IkReal(0.0361000000000000))*(r01));
IkReal x1168=((IkReal(0.0361000000000000))*(sj1));
IkReal x1169=((py)*(r01));
IkReal x1170=((IkReal(2.00000000000000))*(px));
IkReal x1171=((cj1)*(px));
IkReal x1172=((IkReal(0.0938500000000000))*(cj3));
IkReal x1173=((IkReal(0.380000000000000))*(cj0));
IkReal x1174=((px)*(r02));
IkReal x1175=((cj4)*(x1145));
IkReal x1176=((cj4)*(x1144));
IkReal x1177=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x1178=((IkReal(0.139000000000000))*(x1145));
IkReal x1179=((IkReal(0.139000000000000))*(x1144));
IkReal x1180=((r00)*(x1148));
IkReal x1181=((IkReal(0.273000000000000))*(x1144));
IkReal x1182=((IkReal(0.273000000000000))*(cj3)*(x1145));
IkReal x1183=((x1158)*(x1160));
IkReal x1184=((IkReal(2.00000000000000))*(r01)*(x1147));
IkReal x1185=((IkReal(2.00000000000000))*(r02)*(x1146));
evalcond[0]=((((sj1)*(x1164)))+(((IkReal(-1.00000000000000))*(r02)*(x1163)))+(((IkReal(-1.00000000000000))*(sj3)*(x1176)))+(((cj3)*(x1175)))+(((r01)*(x1150))));
evalcond[1]=((((sj3)*(x1175)))+(((IkReal(-1.00000000000000))*(r01)*(x1153)))+(((IkReal(-1.00000000000000))*(x1163)*(x1164)))+(((IkReal(-1.00000000000000))*(r02)*(x1156)))+(((cj3)*(x1176))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-0.273000000000000))*(sj3)*(x1145)))+(((IkReal(-1.00000000000000))*(pz)*(x1163)))+(((IkReal(-1.00000000000000))*(cj3)*(x1181)))+(((IkReal(-1.00000000000000))*(x1179)))+(((cj0)*(x1149)))+(((py)*(x1150))));
evalcond[3]=((x1182)+(x1178)+(((IkReal(-1.00000000000000))*(py)*(x1153)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1163)))+(((IkReal(-1.00000000000000))*(pz)*(x1156)))+(((IkReal(-1.00000000000000))*(sj3)*(x1181))));
evalcond[4]=((((sj4)*(x1182)))+(((r01)*(x1171)))+(((IkReal(-1.00000000000000))*(x1144)*(x1177)))+(((IkReal(-1.00000000000000))*(x1150)*(x1161)))+(((sj4)*(x1178)))+(((cj0)*(sj1)*(x1154)))+(((IkReal(-1.00000000000000))*(x1157)*(x1163)))+(((r02)*(sj0)*(x1149)))+(((IkReal(-1.00000000000000))*(cj0)*(x1156)*(x1166))));
evalcond[5]=((((x1153)*(x1161)))+(((IkReal(-1.00000000000000))*(cj0)*(x1154)*(x1163)))+(((IkReal(-1.00000000000000))*(x1153)*(x1174)))+(((IkReal(-1.00000000000000))*(x1156)*(x1157)))+(((cj0)*(cj1)*(x1166)))+(((sj4)*(x1179)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((cj3)*(sj4)*(x1181)))+(((x1145)*(x1177)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r01)*(x1149))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1149)*(x1158)*(x1159)))+(((cj1)*(x1154)*(x1160)))+(((r02)*(x1165)))+(((IkReal(0.380000000000000))*(x1169)))+(((IkReal(-1.00000000000000))*(x1150)*(x1183)))+(((IkReal(-1.00000000000000))*(x1150)*(x1184)))+(((IkReal(-1.00000000000000))*(x1162)*(x1163)))+(((pp)*(sj1)*(x1164)))+(((IkReal(-1.00000000000000))*(x1149)*(x1159)*(x1169)))+(((IkReal(-1.00000000000000))*(x1150)*(x1167)))+(((IkReal(-1.00000000000000))*(sj1)*(x1159)*(x1180)))+(((IkReal(0.380000000000000))*(x1158)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(x1151)*(x1176)))+(((IkReal(0.0758940000000000))*(x1175)))+(((IkReal(-2.00000000000000))*(sj0)*(x1149)*(x1157)))+(((x1150)*(x1152)))+(((x1172)*(x1175)))+(((IkReal(-1.00000000000000))*(x1164)*(x1168)))+(((cj1)*(x1185)))+(((cj1)*(x1161)*(x1170))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x1156)*(x1162)))+(((IkReal(-1.00000000000000))*(x1152)*(x1153)))+(((IkReal(-1.00000000000000))*(x1154)*(x1155)))+(((IkReal(-1.00000000000000))*(r02)*(x1168)))+(((IkReal(2.00000000000000))*(x1149)*(x1161)))+(((x1173)*(x1174)))+(((x1153)*(x1157)*(x1170)))+(((x1155)*(x1166)))+(((sj1)*(x1185)))+(((IkReal(-1.00000000000000))*(x1153)*(x1167)))+(((IkReal(0.0758940000000000))*(x1176)))+(((sj1)*(x1154)*(x1160)))+(((IkReal(-1.00000000000000))*(pp)*(x1163)*(x1164)))+(((x1172)*(x1176)))+(((x1159)*(x1169)*(x1171)))+(((IkReal(-1.00000000000000))*(x1161)*(x1173)))+(((x1153)*(x1184)))+(((x1153)*(x1183)))+(((IkReal(-1.00000000000000))*(x1164)*(x1165)))+(((x1158)*(x1159)*(x1171)))+(((x1151)*(x1175)))+(((cj1)*(x1159)*(x1180))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1189=((IkReal(1000.00000000000))*(r02));
IkReal x1190=((IkReal(1000.00000000000))*(r00));
IkReal x1191=((IkReal(1000.00000000000))*(r01));
IkReal x1192=((IkReal(190.000000000000))*(r02));
IkReal x1193=((IkReal(190.000000000000))*(r01)*(sj0));
IkReal x1194=((IkReal(190.000000000000))*(cj0)*(r00));
CheckValue<IkReal> x1195 = IKatan2WithCheck(((gconst0)*(((((pz)*(x1189)))+(((py)*(x1191)))+(((px)*(x1190)))+(((cj1)*(x1192)))+(((IkReal(-1.00000000000000))*(sj1)*(x1193)))+(((IkReal(-1.00000000000000))*(sj1)*(x1194)))))),((gconst0)*(((((IkReal(-1.00000000000000))*(cj0)*(pz)*(x1190)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x1191)))+(((IkReal(-1.00000000000000))*(cj1)*(x1193)))+(((IkReal(-1.00000000000000))*(cj1)*(x1194)))+(((cj0)*(px)*(x1189)))+(((IkReal(-273.000000000000))*(cj4)))+(((py)*(sj0)*(x1189)))+(((IkReal(-1.00000000000000))*(sj1)*(x1192)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1195.valid ) {
    continue;
}
j3array[0]=x1195.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1196=IKcos(j3);
IkReal x1197=((r01)*(sj0));
IkReal x1198=((IkReal(0.190000000000000))*(cj1));
IkReal x1199=((py)*(r02));
IkReal x1200=((IkReal(0.380000000000000))*(cj1));
IkReal x1201=((r00)*(sj0));
IkReal x1202=((cj0)*(r01));
IkReal x1203=((IkReal(1.00000000000000))*(pz));
IkReal x1204=((IkReal(1.00000000000000))*(pp));
IkReal x1205=((cj0)*(r00));
IkReal x1206=((IkReal(0.190000000000000))*(sj1));
IkReal x1207=((IkReal(0.139000000000000))*(cj4));
IkReal x1208=((IkReal(2.00000000000000))*(pz));
IkReal x1209=((px)*(r02));
IkReal x1210=((IkReal(2.00000000000000))*(px)*(py));
IkReal x1211=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x1212=((IkReal(0.0758940000000000))*(x1196));
IkReal x1213=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(pz)*(x1200)))+(x1212)+(((cj0)*(x1213)))+(((sj0)*(x1211)))+(((IkReal(-1.00000000000000))*(x1204))));
evalcond[1]=((((x1207)*(IKsin(j3))))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(x1203)))+(((x1197)*(x1206)))+(((x1205)*(x1206)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((IkReal(-1.00000000000000))*(r02)*(x1198))));
evalcond[2]=((((cj0)*(x1209)))+(((IkReal(-1.00000000000000))*(x1196)*(x1207)))+(((IkReal(-1.00000000000000))*(x1197)*(x1198)))+(((IkReal(-1.00000000000000))*(r02)*(x1206)))+(((sj0)*(x1199)))+(((IkReal(-1.00000000000000))*(x1203)*(x1205)))+(((IkReal(-0.273000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x1197)*(x1203)))+(((IkReal(-1.00000000000000))*(x1198)*(x1205))));
CheckValue<IkReal> x1214 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1214.valid ) {
    continue;
}
CheckValue<IkReal> x1215 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1215.valid ) {
    continue;
}
evalcond[3]=((((sj0)*(x1200)*(x1209)))+(((IkReal(-2.00000000000000))*(x1202)*(x1214.value)))+(((pp)*(x1202)))+(((x1197)*(x1210)))+(((sj4)*(x1212)))+(((IkReal(0.0938500000000000))*(sj4)))+(((r00)*(x1211)))+(((sj0)*(x1208)*(x1209)))+(((IkReal(-1.00000000000000))*(pz)*(x1200)*(x1201)))+(((IkReal(-1.00000000000000))*(r01)*(x1213)))+(((IkReal(-1.00000000000000))*(x1205)*(x1210)))+(((IkReal(-1.00000000000000))*(cj0)*(x1199)*(x1208)))+(((IkReal(-1.00000000000000))*(cj0)*(x1199)*(x1200)))+(((IkReal(0.0361000000000000))*(x1202)))+(((IkReal(-1.00000000000000))*(x1201)*(x1204)))+(((pz)*(x1200)*(x1202)))+(((IkReal(-0.0361000000000000))*(x1201)))+(((IkReal(2.00000000000000))*(x1201)*(x1215.value))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
CheckValue<IkReal> x1216 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1216.valid ) {
    continue;
}
CheckValue<IkReal> x1217 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1217.valid ) {
    continue;
}
gconst1=IKsign(((((cj4)*(x1216.value)))+(((cj4)*(x1217.value)))));
CheckValue<IkReal> x1218 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1218.valid ) {
    continue;
}
CheckValue<IkReal> x1219 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1219.valid ) {
    continue;
}
dummyeval[0]=((((cj4)*(x1218.value)))+(((cj4)*(x1219.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x1220=((IkReal(273.000000000000))*(cj4));
CheckValue<IkReal> x1221 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1221.valid ) {
    continue;
}
CheckValue<IkReal> x1222 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1222.valid ) {
    continue;
}
gconst2=IKsign(((((IkReal(-1.00000000000000))*(x1220)*(x1221.value)))+(((IkReal(-139.000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x1220)*(x1222.value)))));
IkReal x1223=((IkReal(1.96402877697842))*(cj4));
CheckValue<IkReal> x1224 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1224.valid ) {
    continue;
}
CheckValue<IkReal> x1225 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1225.valid ) {
    continue;
}
dummyeval[0]=((((IkReal(-1.00000000000000))*(x1223)*(x1224.value)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x1223)*(x1225.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
bool bgotonextstatement = true;
do
{
IkReal x1226=((IkReal(0.0758940000000000))*(cj3));
CheckValue<IkReal> x1264 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1264.valid ) {
    continue;
}
IkReal x1227=x1264.value;
CheckValue<IkReal> x1265 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1265.valid ) {
    continue;
}
IkReal x1228=x1265.value;
CheckValue<IkReal> x1266 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1266.valid ) {
    continue;
}
IkReal x1229=x1266.value;
IkReal x1230=((r01)*(sj0));
IkReal x1231=((IkReal(2.00000000000000))*(px));
IkReal x1232=((IkReal(0.190000000000000))*(cj1));
IkReal x1233=((r00)*(sj1));
IkReal x1234=((IkReal(0.0361000000000000))*(cj0));
IkReal x1235=((py)*(r02));
IkReal x1236=((cj0)*(cj1));
IkReal x1237=((IkReal(0.380000000000000))*(pz));
IkReal x1238=((pz)*(r02));
IkReal x1239=((IkReal(2.00000000000000))*(sj0));
IkReal x1240=((cj0)*(r01));
IkReal x1241=((IkReal(0.380000000000000))*(py));
IkReal x1242=((pz)*(sj1));
IkReal x1243=((IkReal(1.00000000000000))*(sj0));
IkReal x1244=((pp)*(r00));
IkReal x1245=((IkReal(0.190000000000000))*(sj1));
IkReal x1246=((IkReal(0.0361000000000000))*(sj1));
IkReal x1247=((IkReal(2.00000000000000))*(cj0));
IkReal x1248=((r00)*(sj0));
IkReal x1249=((IkReal(1.00000000000000))*(r00));
IkReal x1250=((cj1)*(r00));
IkReal x1251=((cj1)*(r02));
IkReal x1252=((cj0)*(r00));
IkReal x1253=((cj0)*(sj1));
IkReal x1254=((IkReal(0.380000000000000))*(px));
IkReal x1255=((cj1)*(pz));
IkReal x1256=((IkReal(1.00000000000000))*(pp));
IkReal x1257=((cj0)*(r02));
IkReal x1258=((py)*(r01));
IkReal x1259=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x1260=((r00)*(x1228));
IkReal x1261=((IkReal(2.00000000000000))*(x1258));
IkReal x1262=((IkReal(2.00000000000000))*(x1227));
IkReal x1263=((IkReal(2.00000000000000))*(x1229));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(-1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x1243)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(x1240)+(((IkReal(-1.00000000000000))*(r00)*(x1243))));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(x1256)))+(x1226)+(((x1253)*(x1254)))+(((IkReal(-1.00000000000000))*(cj1)*(x1237)))+(((sj0)*(sj1)*(x1241))));
evalcond[4]=((((sj1)*(x1230)))+(((cj0)*(x1233)))+(((IkReal(-1.00000000000000))*(x1251))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1259)))+(((IkReal(-1.00000000000000))*(x1236)*(x1249)))+(((IkReal(-1.00000000000000))*(cj1)*(x1230))));
evalcond[6]=((((IkReal(-1.00000000000000))*(px)*(x1249)))+(((IkReal(-1.00000000000000))*(x1238)))+(((IkReal(0.190000000000000))*(cj0)*(x1233)))+(((IkReal(-1.00000000000000))*(x1258)))+(((x1230)*(x1245)))+(((IkReal(-1.00000000000000))*(r02)*(x1232))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r02)*(x1245)))+(((sj0)*(x1235)))+(((IkReal(-1.00000000000000))*(x1230)*(x1232)))+(((IkReal(-1.00000000000000))*(pz)*(x1230)))+(((IkReal(-1.00000000000000))*(x1232)*(x1252)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x1249)))+(((px)*(x1257))));
evalcond[8]=((IkReal(0.0938500000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x1237)*(x1248)))+(x1226)+(((sj0)*(x1231)*(x1238)))+(((sj0)*(x1251)*(x1254)))+(((r01)*(x1234)))+(((py)*(x1230)*(x1231)))+(((IkReal(-1.00000000000000))*(x1243)*(x1244)))+(((x1233)*(x1241)))+(((pp)*(x1240)))+(((IkReal(-0.0361000000000000))*(x1248)))+(((IkReal(-0.380000000000000))*(x1235)*(x1236)))+(((IkReal(-1.00000000000000))*(pz)*(x1235)*(x1247)))+(((x1239)*(x1260)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1254)))+(((r01)*(x1236)*(x1237)))+(((IkReal(-1.00000000000000))*(py)*(x1231)*(x1252)))+(((IkReal(-1.00000000000000))*(x1240)*(x1262))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x1231)*(x1238)*(x1253)))+(((cj0)*(pp)*(x1233)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x1231)*(x1240)))+(((IkReal(-1.00000000000000))*(x1235)*(x1239)*(x1242)))+(((r01)*(x1241)))+(((IkReal(-1.00000000000000))*(x1228)*(x1233)*(x1247)))+(((pp)*(sj1)*(x1230)))+(((x1255)*(x1261)))+(((r02)*(x1237)))+(((IkReal(-1.00000000000000))*(x1230)*(x1246)))+(((IkReal(-1.00000000000000))*(x1251)*(x1256)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1231)*(x1233)))+(((pz)*(x1231)*(x1250)))+(((IkReal(-1.00000000000000))*(x1233)*(x1234)))+(((x1251)*(x1263)))+(((IkReal(0.0361000000000000))*(x1251)))+(((r00)*(x1254)))+(((IkReal(-1.00000000000000))*(sj1)*(x1230)*(x1262))));
evalcond[10]=((((x1231)*(x1236)*(x1238)))+(((IkReal(-1.00000000000000))*(r02)*(x1246)))+(((x1242)*(x1261)))+(((x1235)*(x1239)*(x1255)))+(((pz)*(x1231)*(x1233)))+(((IkReal(-1.00000000000000))*(x1237)*(x1252)))+(((IkReal(-1.00000000000000))*(x1230)*(x1237)))+(((IkReal(2.00000000000000))*(x1236)*(x1260)))+(((IkReal(-1.00000000000000))*(cj1)*(x1230)*(x1256)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x1256)))+(((IkReal(-1.00000000000000))*(x1234)*(x1250)))+(((r02)*(sj1)*(x1263)))+(((IkReal(-0.0361000000000000))*(cj1)*(x1230)))+(((x1254)*(x1257)))+(((cj1)*(x1230)*(x1262)))+(((x1231)*(x1236)*(x1258)))+(((IkReal(-1.00000000000000))*(x1236)*(x1244)))+(((cj1)*(py)*(x1231)*(x1248)))+(((IkReal(0.380000000000000))*(sj0)*(x1235))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst3;
CheckValue<IkReal> x1267 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1267.valid ) {
    continue;
}
CheckValue<IkReal> x1268 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1268.valid ) {
    continue;
}
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*(x1267.value)))+(((IkReal(-74529.0000000000))*(x1268.value)))+(((IkReal(-75894.0000000000))*(cj3)))));
CheckValue<IkReal> x1269 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1269.valid ) {
    continue;
}
CheckValue<IkReal> x1270 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1270.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*(x1269.value)))+(((IkReal(-3.85740903679934))*(x1270.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
CheckValue<IkReal> x1271 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1271.valid ) {
    continue;
}
CheckValue<IkReal> x1272 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1272.valid ) {
    continue;
}
gconst4=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*(x1271.value)))+(((IkReal(74529.0000000000))*(x1272.value)))));
CheckValue<IkReal> x1273 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1273.valid ) {
    continue;
}
CheckValue<IkReal> x1274 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1274.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*(x1273.value)))+(((IkReal(3.85740903679934))*(x1274.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1275=((cj1)*(py));
IkReal x1276=((pz)*(sj1));
IkReal x1277=((IkReal(139000.000000000))*(sj0));
IkReal x1278=((IkReal(273000.000000000))*(cj3));
IkReal x1279=((py)*(sj1));
IkReal x1280=((IkReal(273000.000000000))*(sj3));
IkReal x1281=((cj1)*(pz));
IkReal x1282=((IkReal(139000.000000000))*(cj0));
IkReal x1283=((cj0)*(r02));
IkReal x1284=((r00)*(x1280));
IkReal x1285=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x1286=((px)*(r02)*(sj1));
IkReal x1287=((cj1)*(px)*(r01));
IkReal x1288=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
CheckValue<IkReal> x1289 = IKatan2WithCheck(((gconst4)*(((((IkReal(139000.000000000))*(r00)*(x1275)))+(((cj0)*(px)*(sj1)*(x1280)))+(((IkReal(-1.00000000000000))*(r01)*(x1276)*(x1282)))+(((sj0)*(x1279)*(x1280)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x1276)*(x1278)))+(((x1278)*(x1279)*(x1283)))+(((IkReal(-1.00000000000000))*(x1277)*(x1286)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj0)*(x1278)*(x1286)))+(((IkReal(-1.00000000000000))*(x1278)*(x1287)))+(((r00)*(x1275)*(x1278)))+(((r00)*(x1276)*(x1277)))+(((r00)*(sj0)*(x1276)*(x1278)))+(((r02)*(x1279)*(x1282)))+(((IkReal(-1.00000000000000))*(x1280)*(x1281)))+(((IkReal(-139000.000000000))*(x1287)))))),((gconst4)*(((IkReal(-26410.0000000000))+(((cj0)*(r01)*(x1276)*(x1280)))+(((x1277)*(x1279)))+(((px)*(sj1)*(x1282)))+(((IkReal(-1.00000000000000))*(x1279)*(x1280)*(x1283)))+(((IkReal(-1.00000000000000))*(x1275)*(x1284)))+(((IkReal(-1.00000000000000))*(x1278)*(x1281)))+(((x1280)*(x1287)))+(((sj0)*(x1278)*(x1279)))+(((sj0)*(x1280)*(x1286)))+(((cj0)*(px)*(sj1)*(x1278)))+(((IkReal(-1.00000000000000))*(sj0)*(x1276)*(x1284)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-139000.000000000))*(x1281)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1289.valid ) {
    continue;
}
j2array[0]=x1289.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1290=IKcos(j2);
IkReal x1291=IKsin(j2);
IkReal x1292=((px)*(sj1));
IkReal x1293=((IkReal(0.273000000000000))*(cj3));
IkReal x1294=((py)*(sj1));
IkReal x1295=((IkReal(1.00000000000000))*(r00));
IkReal x1296=((cj1)*(sj0));
IkReal x1297=((IkReal(1.00000000000000))*(px));
IkReal x1298=((IkReal(1.00000000000000))*(pz));
IkReal x1299=((cj0)*(r01));
IkReal x1300=((pz)*(sj1));
IkReal x1301=((IkReal(0.273000000000000))*(sj3));
IkReal x1302=((cj0)*(cj1));
IkReal x1303=((IkReal(0.139000000000000))*(x1291));
IkReal x1304=((IkReal(0.139000000000000))*(x1290));
IkReal x1305=((x1291)*(x1293));
IkReal x1306=((x1290)*(x1301));
IkReal x1307=((x1291)*(x1301));
IkReal x1308=((x1290)*(x1293));
IkReal x1309=((x1305)+(x1303));
IkReal x1310=((x1304)+(x1307)+(x1308));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x1294)))+(((IkReal(-1.00000000000000))*(x1310)))+(((cj0)*(x1292)))+(((IkReal(-1.00000000000000))*(cj1)*(x1298))));
evalcond[1]=((x1309)+(((IkReal(-1.00000000000000))*(sj1)*(x1298)))+(((IkReal(-1.00000000000000))*(x1297)*(x1302)))+(((IkReal(-1.00000000000000))*(x1306)))+(((IkReal(-1.00000000000000))*(py)*(x1296))));
evalcond[2]=((x1309)+(((x1299)*(x1300)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1294)))+(((IkReal(-1.00000000000000))*(x1306)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1295)))+(((r02)*(sj0)*(x1292)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(sj0)*(x1295)*(x1300))));
evalcond[3]=((x1310)+(((py)*(r02)*(x1302)))+(((IkReal(-0.190000000000000))*(x1299)))+(((pz)*(r00)*(x1296)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(x1298)*(x1299)))+(((IkReal(-1.00000000000000))*(x1294)*(x1295)))+(((r01)*(x1292)))+(((IkReal(-1.00000000000000))*(r02)*(x1296)*(x1297))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1311=((IkReal(139000.000000000))*(cj1));
IkReal x1312=((py)*(sj0));
IkReal x1313=((cj0)*(px));
IkReal x1314=((IkReal(273000.000000000))*(cj3));
IkReal x1315=((IkReal(139000.000000000))*(sj1));
IkReal x1316=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x1317=((IkReal(273000.000000000))*(sj1)*(sj3));
CheckValue<IkReal> x1318 = IKatan2WithCheck(((gconst3)*(((((IkReal(-1.00000000000000))*(x1311)*(x1312)))+(((IkReal(-1.00000000000000))*(x1311)*(x1313)))+(((pz)*(x1316)))+(((IkReal(-1.00000000000000))*(x1313)*(x1317)))+(((IkReal(-1.00000000000000))*(cj1)*(x1313)*(x1314)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x1315)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1314)))+(((IkReal(-1.00000000000000))*(x1312)*(x1317)))+(((IkReal(-1.00000000000000))*(cj1)*(x1312)*(x1314)))))),((gconst3)*(((IkReal(26410.0000000000))+(((pz)*(x1311)))+(((pz)*(x1317)))+(((IkReal(-1.00000000000000))*(x1313)*(x1315)))+(((x1313)*(x1316)))+(((cj1)*(pz)*(x1314)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x1313)*(x1314)))+(((x1312)*(x1316)))+(((IkReal(-1.00000000000000))*(x1312)*(x1315)))+(((IkReal(-1.00000000000000))*(sj1)*(x1312)*(x1314)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1318.valid ) {
    continue;
}
j2array[0]=x1318.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1319=IKcos(j2);
IkReal x1320=IKsin(j2);
IkReal x1321=((px)*(sj1));
IkReal x1322=((IkReal(0.273000000000000))*(cj3));
IkReal x1323=((py)*(sj1));
IkReal x1324=((IkReal(1.00000000000000))*(r00));
IkReal x1325=((cj1)*(sj0));
IkReal x1326=((IkReal(1.00000000000000))*(px));
IkReal x1327=((IkReal(1.00000000000000))*(pz));
IkReal x1328=((cj0)*(r01));
IkReal x1329=((pz)*(sj1));
IkReal x1330=((IkReal(0.273000000000000))*(sj3));
IkReal x1331=((cj0)*(cj1));
IkReal x1332=((IkReal(0.139000000000000))*(x1320));
IkReal x1333=((IkReal(0.139000000000000))*(x1319));
IkReal x1334=((x1320)*(x1322));
IkReal x1335=((x1319)*(x1330));
IkReal x1336=((x1320)*(x1330));
IkReal x1337=((x1319)*(x1322));
IkReal x1338=((x1334)+(x1332));
IkReal x1339=((x1337)+(x1336)+(x1333));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x1339)))+(((sj0)*(x1323)))+(((cj0)*(x1321)))+(((IkReal(-1.00000000000000))*(cj1)*(x1327))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1326)*(x1331)))+(x1338)+(((IkReal(-1.00000000000000))*(py)*(x1325)))+(((IkReal(-1.00000000000000))*(sj1)*(x1327)))+(((IkReal(-1.00000000000000))*(x1335))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x1324)))+(x1338)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1323)))+(((x1328)*(x1329)))+(((IkReal(-1.00000000000000))*(sj0)*(x1324)*(x1329)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x1335)))+(((r02)*(sj0)*(x1321))));
evalcond[3]=((x1339)+(((pz)*(r00)*(x1325)))+(((r01)*(x1321)))+(((IkReal(-1.00000000000000))*(x1323)*(x1324)))+(((IkReal(-1.00000000000000))*(cj1)*(x1327)*(x1328)))+(((IkReal(-1.00000000000000))*(r02)*(x1325)*(x1326)))+(((IkReal(-0.190000000000000))*(x1328)))+(((py)*(r02)*(x1331)))+(((IkReal(0.190000000000000))*(r00)*(sj0))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1340=((IkReal(0.0758940000000000))*(cj3));
CheckValue<IkReal> x1378 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1378.valid ) {
    continue;
}
IkReal x1341=x1378.value;
CheckValue<IkReal> x1379 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1379.valid ) {
    continue;
}
IkReal x1342=x1379.value;
CheckValue<IkReal> x1380 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1380.valid ) {
    continue;
}
IkReal x1343=x1380.value;
IkReal x1344=((r01)*(sj0));
IkReal x1345=((IkReal(2.00000000000000))*(px));
IkReal x1346=((IkReal(0.190000000000000))*(cj1));
IkReal x1347=((r00)*(sj1));
IkReal x1348=((IkReal(0.0361000000000000))*(cj0));
IkReal x1349=((py)*(r02));
IkReal x1350=((cj0)*(cj1));
IkReal x1351=((IkReal(0.380000000000000))*(pz));
IkReal x1352=((pz)*(r02));
IkReal x1353=((IkReal(2.00000000000000))*(sj0));
IkReal x1354=((cj0)*(r01));
IkReal x1355=((IkReal(0.380000000000000))*(py));
IkReal x1356=((pz)*(sj1));
IkReal x1357=((IkReal(1.00000000000000))*(sj0));
IkReal x1358=((pp)*(r00));
IkReal x1359=((IkReal(0.190000000000000))*(sj1));
IkReal x1360=((IkReal(0.0361000000000000))*(sj1));
IkReal x1361=((IkReal(2.00000000000000))*(cj0));
IkReal x1362=((r00)*(sj0));
IkReal x1363=((IkReal(1.00000000000000))*(r00));
IkReal x1364=((cj1)*(r00));
IkReal x1365=((cj1)*(r02));
IkReal x1366=((cj0)*(r00));
IkReal x1367=((cj0)*(sj1));
IkReal x1368=((IkReal(0.380000000000000))*(px));
IkReal x1369=((cj1)*(pz));
IkReal x1370=((IkReal(1.00000000000000))*(pp));
IkReal x1371=((cj0)*(r02));
IkReal x1372=((py)*(r01));
IkReal x1373=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x1374=((r00)*(x1342));
IkReal x1375=((IkReal(2.00000000000000))*(x1372));
IkReal x1376=((IkReal(2.00000000000000))*(x1341));
IkReal x1377=((IkReal(2.00000000000000))*(x1343));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(IKabs(((IkReal(1.57079632679490))+(j4))))), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x1357)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(x1354)+(((IkReal(-1.00000000000000))*(r00)*(x1357))));
evalcond[3]=((IkReal(0.0577500000000000))+(x1340)+(((x1367)*(x1368)))+(((IkReal(-1.00000000000000))*(x1370)))+(((IkReal(-1.00000000000000))*(cj1)*(x1351)))+(((sj0)*(sj1)*(x1355))));
evalcond[4]=((((sj1)*(x1344)))+(((IkReal(-1.00000000000000))*(x1365)))+(((cj0)*(x1347))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1350)*(x1363)))+(((IkReal(-1.00000000000000))*(x1373)))+(((IkReal(-1.00000000000000))*(cj1)*(x1344))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1352)))+(((IkReal(-1.00000000000000))*(r02)*(x1346)))+(((IkReal(-1.00000000000000))*(px)*(x1363)))+(((IkReal(-1.00000000000000))*(x1372)))+(((x1344)*(x1359)))+(((IkReal(0.190000000000000))*(cj0)*(x1347))));
evalcond[7]=((((sj0)*(x1349)))+(((px)*(x1371)))+(((IkReal(-1.00000000000000))*(r02)*(x1359)))+(((IkReal(-1.00000000000000))*(x1346)*(x1366)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x1363)))+(((IkReal(-1.00000000000000))*(x1344)*(x1346)))+(((IkReal(-1.00000000000000))*(pz)*(x1344))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((x1353)*(x1374)))+(((IkReal(-1.00000000000000))*(x1340)))+(((py)*(x1344)*(x1345)))+(((r01)*(x1350)*(x1351)))+(((IkReal(-1.00000000000000))*(pz)*(x1349)*(x1361)))+(((IkReal(-0.380000000000000))*(x1349)*(x1350)))+(((sj0)*(x1345)*(x1352)))+(((pp)*(x1354)))+(((x1347)*(x1355)))+(((r01)*(x1348)))+(((IkReal(-1.00000000000000))*(x1354)*(x1376)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1368)))+(((IkReal(-0.0361000000000000))*(x1362)))+(((sj0)*(x1365)*(x1368)))+(((IkReal(-1.00000000000000))*(cj1)*(x1351)*(x1362)))+(((IkReal(-1.00000000000000))*(x1357)*(x1358)))+(((IkReal(-1.00000000000000))*(py)*(x1345)*(x1366))));
evalcond[9]=((((x1365)*(x1377)))+(((IkReal(-1.00000000000000))*(x1365)*(x1370)))+(((IkReal(-1.00000000000000))*(x1347)*(x1348)))+(((IkReal(-1.00000000000000))*(x1342)*(x1347)*(x1361)))+(((IkReal(0.0361000000000000))*(x1365)))+(((pz)*(x1345)*(x1364)))+(((pp)*(sj1)*(x1344)))+(((r02)*(x1351)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x1345)*(x1354)))+(((IkReal(-1.00000000000000))*(sj1)*(x1344)*(x1376)))+(((IkReal(-1.00000000000000))*(x1344)*(x1360)))+(((IkReal(-1.00000000000000))*(x1345)*(x1352)*(x1367)))+(((x1369)*(x1375)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1345)*(x1347)))+(((cj0)*(pp)*(x1347)))+(((r00)*(x1368)))+(((r01)*(x1355)))+(((IkReal(-1.00000000000000))*(x1349)*(x1353)*(x1356))));
evalcond[10]=((((IkReal(0.380000000000000))*(sj0)*(x1349)))+(((IkReal(-1.00000000000000))*(r02)*(x1360)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x1370)))+(((pz)*(x1345)*(x1347)))+(((IkReal(-1.00000000000000))*(cj1)*(x1344)*(x1370)))+(((IkReal(-1.00000000000000))*(x1350)*(x1358)))+(((IkReal(-0.0361000000000000))*(cj1)*(x1344)))+(((x1349)*(x1353)*(x1369)))+(((x1345)*(x1350)*(x1352)))+(((IkReal(2.00000000000000))*(x1350)*(x1374)))+(((x1368)*(x1371)))+(((IkReal(-1.00000000000000))*(x1344)*(x1351)))+(((x1356)*(x1375)))+(((IkReal(-1.00000000000000))*(x1348)*(x1364)))+(((cj1)*(py)*(x1345)*(x1362)))+(((cj1)*(x1344)*(x1376)))+(((IkReal(-1.00000000000000))*(x1351)*(x1366)))+(((r02)*(sj1)*(x1377)))+(((x1345)*(x1350)*(x1372))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal dummyeval[1];
IkReal gconst5;
CheckValue<IkReal> x1381 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1381.valid ) {
    continue;
}
CheckValue<IkReal> x1382 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1382.valid ) {
    continue;
}
gconst5=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*(x1381.value)))+(((IkReal(-74529.0000000000))*(x1382.value)))+(((IkReal(-75894.0000000000))*(cj3)))));
CheckValue<IkReal> x1383 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1383.valid ) {
    continue;
}
CheckValue<IkReal> x1384 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1384.valid ) {
    continue;
}
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*(x1383.value)))+(((IkReal(-3.85740903679934))*(x1384.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
CheckValue<IkReal> x1385 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1385.valid ) {
    continue;
}
CheckValue<IkReal> x1386 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1386.valid ) {
    continue;
}
gconst6=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*(x1385.value)))+(((IkReal(74529.0000000000))*(x1386.value)))));
CheckValue<IkReal> x1387 = IKPowWithIntegerCheck(sj3,2.00000000000000);
if( !x1387.valid ) {
    continue;
}
CheckValue<IkReal> x1388 = IKPowWithIntegerCheck(cj3,2.00000000000000);
if( !x1388.valid ) {
    continue;
}
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*(x1387.value)))+(((IkReal(3.85740903679934))*(x1388.value))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1389=((IkReal(273000.000000000))*(sj3));
IkReal x1390=((pz)*(sj1));
IkReal x1391=((IkReal(139000.000000000))*(sj0));
IkReal x1392=((px)*(sj1));
IkReal x1393=((r02)*(sj0));
IkReal x1394=((IkReal(273000.000000000))*(cj3));
IkReal x1395=((py)*(sj1));
IkReal x1396=((cj1)*(pz));
IkReal x1397=((IkReal(139000.000000000))*(cj0));
IkReal x1398=((r00)*(sj0));
IkReal x1399=((cj1)*(py)*(r00));
IkReal x1400=((cj0)*(x1394));
IkReal x1401=((cj1)*(px)*(r01));
CheckValue<IkReal> x1402 = IKatan2WithCheck(((gconst6)*(((((IkReal(-1.00000000000000))*(x1389)*(x1396)))+(((x1392)*(x1393)*(x1394)))+(((IkReal(-1.00000000000000))*(x1394)*(x1399)))+(((IkReal(-1.00000000000000))*(x1390)*(x1394)*(x1398)))+(((sj0)*(x1389)*(x1395)))+(((IkReal(-1.00000000000000))*(r00)*(x1390)*(x1391)))+(((IkReal(-139000.000000000))*(x1399)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(r02)*(x1395)*(x1400)))+(((x1394)*(x1401)))+(((cj0)*(x1389)*(x1392)))+(((r02)*(x1391)*(x1392)))+(((IkReal(139000.000000000))*(x1401)))+(((IkReal(-1.00000000000000))*(r02)*(x1395)*(x1397)))+(((r01)*(x1390)*(x1400)))+(((r01)*(x1390)*(x1397)))))),((gconst6)*(((IkReal(-26410.0000000000))+(((sj0)*(x1394)*(x1395)))+(((IkReal(-1.00000000000000))*(x1389)*(x1401)))+(((IkReal(-1.00000000000000))*(x1394)*(x1396)))+(((x1392)*(x1400)))+(((x1389)*(x1390)*(x1398)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x1389)*(x1390)))+(((IkReal(-139000.000000000))*(x1396)))+(((IkReal(-1.00000000000000))*(x1389)*(x1392)*(x1393)))+(((cj0)*(r02)*(x1389)*(x1395)))+(((x1389)*(x1399)))+(((x1391)*(x1395)))+(((x1392)*(x1397)))+(((IkReal(-51870.0000000000))*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1402.valid ) {
    continue;
}
j2array[0]=x1402.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1403=IKcos(j2);
IkReal x1404=IKsin(j2);
IkReal x1405=((px)*(sj1));
IkReal x1406=((IkReal(0.273000000000000))*(cj3));
IkReal x1407=((py)*(sj1));
IkReal x1408=((IkReal(1.00000000000000))*(r00));
IkReal x1409=((cj1)*(sj0));
IkReal x1410=((IkReal(1.00000000000000))*(px));
IkReal x1411=((IkReal(1.00000000000000))*(pz));
IkReal x1412=((cj0)*(r01));
IkReal x1413=((pz)*(sj1));
IkReal x1414=((IkReal(0.273000000000000))*(sj3));
IkReal x1415=((cj0)*(cj1));
IkReal x1416=((IkReal(0.139000000000000))*(x1404));
IkReal x1417=((IkReal(0.139000000000000))*(x1403));
IkReal x1418=((x1403)*(x1414));
IkReal x1419=((x1404)*(x1406));
IkReal x1420=((x1404)*(x1414));
IkReal x1421=((x1403)*(x1406));
IkReal x1422=((x1419)+(x1416));
IkReal x1423=((x1421)+(x1420)+(x1417));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x1411)))+(((cj0)*(x1405)))+(((sj0)*(x1407)))+(((IkReal(-1.00000000000000))*(x1423))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1418)))+(((IkReal(-1.00000000000000))*(py)*(x1409)))+(((IkReal(-1.00000000000000))*(x1410)*(x1415)))+(x1422)+(((IkReal(-1.00000000000000))*(sj1)*(x1411))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x1408)*(x1413)))+(((x1412)*(x1413)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1408)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1407)))+(x1418)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x1422)))+(((r02)*(sj0)*(x1405))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x1409)*(x1410)))+(((py)*(r02)*(x1415)))+(((pz)*(r00)*(x1409)))+(((IkReal(-0.190000000000000))*(x1412)))+(((r01)*(x1405)))+(((IkReal(-1.00000000000000))*(cj1)*(x1411)*(x1412)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x1407)*(x1408)))+(((IkReal(-1.00000000000000))*(x1423))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1424=((IkReal(139000.000000000))*(cj1));
IkReal x1425=((py)*(sj0));
IkReal x1426=((cj0)*(px));
IkReal x1427=((IkReal(273000.000000000))*(cj3));
IkReal x1428=((IkReal(139000.000000000))*(sj1));
IkReal x1429=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x1430=((IkReal(273000.000000000))*(sj1)*(sj3));
CheckValue<IkReal> x1431 = IKatan2WithCheck(((gconst5)*(((((IkReal(-1.00000000000000))*(cj1)*(x1425)*(x1427)))+(((IkReal(-1.00000000000000))*(x1424)*(x1426)))+(((IkReal(-1.00000000000000))*(x1424)*(x1425)))+(((IkReal(-1.00000000000000))*(pz)*(x1428)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1427)))+(((IkReal(-1.00000000000000))*(x1426)*(x1430)))+(((IkReal(-1.00000000000000))*(x1425)*(x1430)))+(((pz)*(x1429)))+(((IkReal(-1.00000000000000))*(cj1)*(x1426)*(x1427)))))),((gconst5)*(((IkReal(26410.0000000000))+(((x1425)*(x1429)))+(((IkReal(-1.00000000000000))*(x1426)*(x1428)))+(((cj1)*(pz)*(x1427)))+(((x1426)*(x1429)))+(((IkReal(-1.00000000000000))*(x1425)*(x1428)))+(((pz)*(x1430)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x1426)*(x1427)))+(((IkReal(-1.00000000000000))*(sj1)*(x1425)*(x1427)))+(((pz)*(x1424)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1431.valid ) {
    continue;
}
j2array[0]=x1431.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1432=IKcos(j2);
IkReal x1433=IKsin(j2);
IkReal x1434=((px)*(sj1));
IkReal x1435=((IkReal(0.273000000000000))*(cj3));
IkReal x1436=((py)*(sj1));
IkReal x1437=((IkReal(1.00000000000000))*(r00));
IkReal x1438=((cj1)*(sj0));
IkReal x1439=((IkReal(1.00000000000000))*(px));
IkReal x1440=((IkReal(1.00000000000000))*(pz));
IkReal x1441=((cj0)*(r01));
IkReal x1442=((pz)*(sj1));
IkReal x1443=((IkReal(0.273000000000000))*(sj3));
IkReal x1444=((cj0)*(cj1));
IkReal x1445=((IkReal(0.139000000000000))*(x1433));
IkReal x1446=((IkReal(0.139000000000000))*(x1432));
IkReal x1447=((x1432)*(x1443));
IkReal x1448=((x1433)*(x1435));
IkReal x1449=((x1433)*(x1443));
IkReal x1450=((x1432)*(x1435));
IkReal x1451=((x1445)+(x1448));
IkReal x1452=((x1450)+(x1446)+(x1449));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x1452)))+(((cj0)*(x1434)))+(((sj0)*(x1436)))+(((IkReal(-1.00000000000000))*(cj1)*(x1440))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x1438)))+(((IkReal(-1.00000000000000))*(sj1)*(x1440)))+(((IkReal(-1.00000000000000))*(x1439)*(x1444)))+(x1451)+(((IkReal(-1.00000000000000))*(x1447))));
evalcond[2]=((((x1441)*(x1442)))+(((IkReal(-1.00000000000000))*(x1451)))+(((IkReal(-1.00000000000000))*(sj0)*(x1437)*(x1442)))+(x1447)+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1437)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1436)))+(((cj1)*(px)*(r01)))+(((r02)*(sj0)*(x1434))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1436)*(x1437)))+(((pz)*(r00)*(x1438)))+(((IkReal(-1.00000000000000))*(cj1)*(x1440)*(x1441)))+(((IkReal(-1.00000000000000))*(x1452)))+(((IkReal(-1.00000000000000))*(r02)*(x1438)*(x1439)))+(((r01)*(x1434)))+(((py)*(r02)*(x1444)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x1441))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue;

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1453=((IkReal(139.000000000000))*(sj1));
IkReal x1454=((cj0)*(r00));
IkReal x1455=((IkReal(1000.00000000000))*(cj4));
IkReal x1456=((cj1)*(cj3));
IkReal x1457=((IkReal(273.000000000000))*(r02));
IkReal x1458=((cj1)*(sj3));
IkReal x1459=((IkReal(190.000000000000))*(cj4));
IkReal x1460=((IkReal(273.000000000000))*(r01));
IkReal x1461=((cj3)*(sj1));
IkReal x1462=((cj0)*(px));
IkReal x1463=((sj1)*(sj3));
IkReal x1464=((sj0)*(x1463));
CheckValue<IkReal> x1465 = IKatan2WithCheck(((gconst2)*(((((IkReal(-1.00000000000000))*(x1455)*(x1462)*(x1463)))+(((sj0)*(x1460)*(x1461)))+(((pz)*(x1455)*(x1458)))+(((sj3)*(x1459)))+(((IkReal(-1.00000000000000))*(py)*(x1455)*(x1464)))+(((IkReal(273.000000000000))*(x1454)*(x1461)))+(((r01)*(sj0)*(x1453)))+(((IkReal(-1.00000000000000))*(x1456)*(x1457)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))+(((x1453)*(x1454)))))),((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x1455)*(x1461)))+(((IkReal(-273.000000000000))*(x1454)*(x1463)))+(((pz)*(x1455)*(x1456)))+(((IkReal(-1.00000000000000))*(x1455)*(x1461)*(x1462)))+(((IkReal(-1.00000000000000))*(x1460)*(x1464)))+(((cj3)*(x1459)))+(((x1457)*(x1458)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1465.valid ) {
    continue;
}
j2array[0]=x1465.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1466=IKcos(j2);
IkReal x1467=IKsin(j2);
CheckValue<IkReal> x1508 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1508.valid ) {
    continue;
}
IkReal x1468=x1508.value;
CheckValue<IkReal> x1509 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1509.valid ) {
    continue;
}
IkReal x1469=x1509.value;
CheckValue<IkReal> x1510 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1510.valid ) {
    continue;
}
IkReal x1470=x1510.value;
IkReal x1471=((px)*(sj1));
IkReal x1472=((sj0)*(sj1));
IkReal x1473=((IkReal(0.0552080000000000))*(sj3));
IkReal x1474=((pp)*(r01));
IkReal x1475=((cj1)*(sj0));
IkReal x1476=((pz)*(r01));
IkReal x1477=((IkReal(0.380000000000000))*(sj0));
IkReal x1478=((IkReal(1.00000000000000))*(sj1));
IkReal x1479=((py)*(r00));
IkReal x1480=((pz)*(r02));
IkReal x1481=((IkReal(2.00000000000000))*(cj0));
IkReal x1482=((IkReal(2.00000000000000))*(py));
IkReal x1483=((pz)*(r00));
IkReal x1484=((pp)*(r02));
IkReal x1485=((IkReal(1.00000000000000))*(cj1));
IkReal x1486=((cj0)*(r00));
IkReal x1487=((IkReal(0.0361000000000000))*(cj1));
IkReal x1488=((py)*(r02));
IkReal x1489=((IkReal(0.0361000000000000))*(r01));
IkReal x1490=((IkReal(0.0361000000000000))*(sj1));
IkReal x1491=((py)*(r01));
IkReal x1492=((IkReal(2.00000000000000))*(px));
IkReal x1493=((cj1)*(px));
IkReal x1494=((IkReal(0.0938500000000000))*(cj3));
IkReal x1495=((IkReal(0.380000000000000))*(cj0));
IkReal x1496=((px)*(r02));
IkReal x1497=((cj4)*(x1467));
IkReal x1498=((cj4)*(x1466));
IkReal x1499=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x1500=((IkReal(0.139000000000000))*(x1467));
IkReal x1501=((IkReal(0.139000000000000))*(x1466));
IkReal x1502=((r00)*(x1470));
IkReal x1503=((IkReal(0.273000000000000))*(x1466));
IkReal x1504=((IkReal(0.273000000000000))*(cj3)*(x1467));
IkReal x1505=((x1480)*(x1482));
IkReal x1506=((IkReal(2.00000000000000))*(r01)*(x1469));
IkReal x1507=((IkReal(2.00000000000000))*(r02)*(x1468));
evalcond[0]=((((cj3)*(x1497)))+(((sj1)*(x1486)))+(((IkReal(-1.00000000000000))*(r02)*(x1485)))+(((IkReal(-1.00000000000000))*(sj3)*(x1498)))+(((r01)*(x1472))));
evalcond[1]=((((cj3)*(x1498)))+(((IkReal(-1.00000000000000))*(r01)*(x1475)))+(((sj3)*(x1497)))+(((IkReal(-1.00000000000000))*(x1485)*(x1486)))+(((IkReal(-1.00000000000000))*(r02)*(x1478))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x1501)))+(((IkReal(-1.00000000000000))*(cj3)*(x1503)))+(((cj0)*(x1471)))+(((py)*(x1472)))+(((IkReal(-0.273000000000000))*(sj3)*(x1467)))+(((IkReal(-1.00000000000000))*(pz)*(x1485))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)*(x1503)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1485)))+(((IkReal(-1.00000000000000))*(py)*(x1475)))+(x1500)+(x1504)+(((IkReal(-1.00000000000000))*(pz)*(x1478))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1472)*(x1483)))+(((IkReal(-1.00000000000000))*(x1466)*(x1499)))+(((IkReal(-1.00000000000000))*(x1479)*(x1485)))+(((cj0)*(sj1)*(x1476)))+(((r02)*(sj0)*(x1471)))+(((IkReal(-1.00000000000000))*(cj0)*(x1478)*(x1488)))+(((r01)*(x1493)))+(((sj4)*(x1504)))+(((sj4)*(x1500))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1478)*(x1479)))+(((x1467)*(x1499)))+(((IkReal(-1.00000000000000))*(cj0)*(x1476)*(x1485)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((cj3)*(sj4)*(x1503)))+(((sj4)*(x1501)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x1475)*(x1496)))+(((r01)*(x1471)))+(((cj0)*(cj1)*(x1488)))+(((x1475)*(x1483))));
evalcond[6]=((((IkReal(0.380000000000000))*(x1480)))+(((IkReal(0.380000000000000))*(x1491)))+(((IkReal(-1.00000000000000))*(x1484)*(x1485)))+(((IkReal(-1.00000000000000))*(x1486)*(x1490)))+(((x1494)*(x1497)))+(((cj1)*(x1483)*(x1492)))+(((x1472)*(x1474)))+(((pp)*(sj1)*(x1486)))+(((cj1)*(x1507)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(sj1)*(x1481)*(x1502)))+(((IkReal(0.0758940000000000))*(x1497)))+(((IkReal(-1.00000000000000))*(x1471)*(x1481)*(x1491)))+(((IkReal(-1.00000000000000))*(x1472)*(x1489)))+(((IkReal(-1.00000000000000))*(x1472)*(x1505)))+(((IkReal(-1.00000000000000))*(x1472)*(x1506)))+(((cj1)*(x1476)*(x1482)))+(((r02)*(x1487)))+(((IkReal(-2.00000000000000))*(sj0)*(x1471)*(x1479)))+(((IkReal(-1.00000000000000))*(x1471)*(x1480)*(x1481)))+(((IkReal(-1.00000000000000))*(x1473)*(x1498))));
evalcond[7]=((((sj1)*(x1476)*(x1482)))+(((x1473)*(x1497)))+(((IkReal(-1.00000000000000))*(x1476)*(x1477)))+(((x1477)*(x1488)))+(((x1475)*(x1505)))+(((x1475)*(x1506)))+(((x1494)*(x1498)))+(((IkReal(-1.00000000000000))*(x1474)*(x1475)))+(((IkReal(-1.00000000000000))*(x1486)*(x1487)))+(((x1495)*(x1496)))+(((x1480)*(x1481)*(x1493)))+(((sj1)*(x1507)))+(((x1475)*(x1479)*(x1492)))+(((IkReal(-1.00000000000000))*(r02)*(x1490)))+(((IkReal(-1.00000000000000))*(pp)*(x1485)*(x1486)))+(((IkReal(0.0758940000000000))*(x1498)))+(((IkReal(2.00000000000000))*(x1471)*(x1483)))+(((IkReal(-1.00000000000000))*(x1475)*(x1489)))+(((cj1)*(x1481)*(x1502)))+(((IkReal(-1.00000000000000))*(x1483)*(x1495)))+(((x1481)*(x1491)*(x1493)))+(((IkReal(-1.00000000000000))*(x1478)*(x1484))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1511=((IkReal(1.00000000000000))*(sj1));
IkReal x1512=((cj1)*(sj3));
IkReal x1513=((cj0)*(r00));
IkReal x1514=((cj3)*(r02));
IkReal x1515=((r01)*(sj0));
IkReal x1516=((sj1)*(sj3));
IkReal x1517=((cj3)*(x1515));
CheckValue<IkReal> x1518 = IKatan2WithCheck(((gconst1)*(((((IkReal(-1.00000000000000))*(cj3)*(x1511)*(x1513)))+(((cj1)*(x1514)))+(((r02)*(x1516)))+(((x1512)*(x1515)))+(((x1512)*(x1513)))+(((IkReal(-1.00000000000000))*(x1511)*(x1517)))))),((gconst1)*(((((x1513)*(x1516)))+(((cj1)*(x1517)))+(((sj1)*(x1514)))+(((x1515)*(x1516)))+(((IkReal(-1.00000000000000))*(r02)*(x1512)))+(((cj1)*(cj3)*(x1513)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1518.valid ) {
    continue;
}
j2array[0]=x1518.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1519=IKcos(j2);
IkReal x1520=IKsin(j2);
CheckValue<IkReal> x1561 = IKPowWithIntegerCheck(pz,2.00000000000000);
if( !x1561.valid ) {
    continue;
}
IkReal x1521=x1561.value;
CheckValue<IkReal> x1562 = IKPowWithIntegerCheck(py,2.00000000000000);
if( !x1562.valid ) {
    continue;
}
IkReal x1522=x1562.value;
CheckValue<IkReal> x1563 = IKPowWithIntegerCheck(px,2.00000000000000);
if( !x1563.valid ) {
    continue;
}
IkReal x1523=x1563.value;
IkReal x1524=((px)*(sj1));
IkReal x1525=((sj0)*(sj1));
IkReal x1526=((IkReal(0.0552080000000000))*(sj3));
IkReal x1527=((pp)*(r01));
IkReal x1528=((cj1)*(sj0));
IkReal x1529=((pz)*(r01));
IkReal x1530=((IkReal(0.380000000000000))*(sj0));
IkReal x1531=((IkReal(1.00000000000000))*(sj1));
IkReal x1532=((py)*(r00));
IkReal x1533=((pz)*(r02));
IkReal x1534=((IkReal(2.00000000000000))*(cj0));
IkReal x1535=((IkReal(2.00000000000000))*(py));
IkReal x1536=((pz)*(r00));
IkReal x1537=((pp)*(r02));
IkReal x1538=((IkReal(1.00000000000000))*(cj1));
IkReal x1539=((cj0)*(r00));
IkReal x1540=((IkReal(0.0361000000000000))*(cj1));
IkReal x1541=((py)*(r02));
IkReal x1542=((IkReal(0.0361000000000000))*(r01));
IkReal x1543=((IkReal(0.0361000000000000))*(sj1));
IkReal x1544=((py)*(r01));
IkReal x1545=((IkReal(2.00000000000000))*(px));
IkReal x1546=((cj1)*(px));
IkReal x1547=((IkReal(0.0938500000000000))*(cj3));
IkReal x1548=((IkReal(0.380000000000000))*(cj0));
IkReal x1549=((px)*(r02));
IkReal x1550=((cj4)*(x1520));
IkReal x1551=((cj4)*(x1519));
IkReal x1552=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x1553=((IkReal(0.139000000000000))*(x1520));
IkReal x1554=((IkReal(0.139000000000000))*(x1519));
IkReal x1555=((r00)*(x1523));
IkReal x1556=((IkReal(0.273000000000000))*(x1519));
IkReal x1557=((IkReal(0.273000000000000))*(cj3)*(x1520));
IkReal x1558=((x1533)*(x1535));
IkReal x1559=((IkReal(2.00000000000000))*(r01)*(x1522));
IkReal x1560=((IkReal(2.00000000000000))*(r02)*(x1521));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj3)*(x1551)))+(((cj3)*(x1550)))+(((r01)*(x1525)))+(((sj1)*(x1539)))+(((IkReal(-1.00000000000000))*(r02)*(x1538))));
evalcond[1]=((((cj3)*(x1551)))+(((IkReal(-1.00000000000000))*(r02)*(x1531)))+(((IkReal(-1.00000000000000))*(r01)*(x1528)))+(((sj3)*(x1550)))+(((IkReal(-1.00000000000000))*(x1538)*(x1539))));
evalcond[2]=((IkReal(-0.190000000000000))+(((cj0)*(x1524)))+(((IkReal(-0.273000000000000))*(sj3)*(x1520)))+(((IkReal(-1.00000000000000))*(cj3)*(x1556)))+(((IkReal(-1.00000000000000))*(x1554)))+(((py)*(x1525)))+(((IkReal(-1.00000000000000))*(pz)*(x1538))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x1538)))+(x1553)+(x1557)+(((IkReal(-1.00000000000000))*(sj3)*(x1556)))+(((IkReal(-1.00000000000000))*(pz)*(x1531)))+(((IkReal(-1.00000000000000))*(py)*(x1528))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj0)*(x1531)*(x1541)))+(((IkReal(-1.00000000000000))*(x1525)*(x1536)))+(((cj0)*(sj1)*(x1529)))+(((sj4)*(x1553)))+(((sj4)*(x1557)))+(((IkReal(-1.00000000000000))*(x1532)*(x1538)))+(((IkReal(-1.00000000000000))*(x1519)*(x1552)))+(((r01)*(x1546)))+(((r02)*(sj0)*(x1524))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(x1529)*(x1538)))+(((sj4)*(x1554)))+(((x1528)*(x1536)))+(((IkReal(-1.00000000000000))*(x1531)*(x1532)))+(((IkReal(-1.00000000000000))*(x1528)*(x1549)))+(((r01)*(x1524)))+(((cj0)*(cj1)*(x1541)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((x1520)*(x1552)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj3)*(sj4)*(x1556))));
evalcond[6]=((((pp)*(sj1)*(x1539)))+(((cj1)*(x1529)*(x1535)))+(((x1525)*(x1527)))+(((x1547)*(x1550)))+(((IkReal(-2.00000000000000))*(sj0)*(x1524)*(x1532)))+(((IkReal(-1.00000000000000))*(sj1)*(x1534)*(x1555)))+(((IkReal(-1.00000000000000))*(x1525)*(x1558)))+(((IkReal(-1.00000000000000))*(x1525)*(x1559)))+(((cj1)*(x1560)))+(((IkReal(-1.00000000000000))*(x1524)*(x1534)*(x1544)))+(((IkReal(-1.00000000000000))*(x1537)*(x1538)))+(((IkReal(-1.00000000000000))*(x1525)*(x1542)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(x1526)*(x1551)))+(((IkReal(0.380000000000000))*(x1533)))+(((r02)*(x1540)))+(((IkReal(-1.00000000000000))*(x1539)*(x1543)))+(((IkReal(0.380000000000000))*(x1544)))+(((IkReal(0.0758940000000000))*(x1550)))+(((IkReal(-1.00000000000000))*(x1524)*(x1533)*(x1534)))+(((cj1)*(x1536)*(x1545))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x1529)*(x1530)))+(((IkReal(2.00000000000000))*(x1524)*(x1536)))+(((x1530)*(x1541)))+(((IkReal(-1.00000000000000))*(r02)*(x1543)))+(((x1547)*(x1551)))+(((x1533)*(x1534)*(x1546)))+(((sj1)*(x1529)*(x1535)))+(((IkReal(-1.00000000000000))*(x1531)*(x1537)))+(((x1526)*(x1550)))+(((sj1)*(x1560)))+(((IkReal(-1.00000000000000))*(x1536)*(x1548)))+(((x1534)*(x1544)*(x1546)))+(((x1528)*(x1532)*(x1545)))+(((IkReal(-1.00000000000000))*(x1539)*(x1540)))+(((IkReal(-1.00000000000000))*(x1527)*(x1528)))+(((IkReal(-1.00000000000000))*(pp)*(x1538)*(x1539)))+(((IkReal(0.0758940000000000))*(x1551)))+(((x1548)*(x1549)))+(((x1528)*(x1558)))+(((x1528)*(x1559)))+(((cj1)*(x1534)*(x1555)))+(((IkReal(-1.00000000000000))*(x1528)*(x1542))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
