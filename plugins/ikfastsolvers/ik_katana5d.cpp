#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 63 generated on 2013-07-10 10:54:21.703672
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==63);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
#ifndef isfinite
#define isfinite _isfinite
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct Atan2Value
{
    T value;
    bool valid;
};

template <typename T>
inline Atan2Value<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    Atan2Value<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((IkReal(0.139000000000000))*(x3));
x11=((IkReal(0.273000000000000))*(x0));
x12=((IkReal(0.273000000000000))*(x6));
x13=((IkReal(1.00000000000000))*(x5));
x14=((IkReal(1.00000000000000))*(x7));
x15=((IkReal(0.190000000000000))*(x1));
x16=((x0)*(x2));
x17=((x1)*(x3));
x18=((x2)*(x4));
x19=((x1)*(x4));
x20=((x2)*(x3));
eetrans[0]=((((IkReal(0.139000000000000))*(x0)*(x19)))+(((x0)*(x15)))+(((x7)*(((((x11)*(x20)))+(((x11)*(x19)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x11)*(x18)))+(((x11)*(x17)))))))+(((x10)*(x16))));
IkReal x21=((IkReal(1.00000000000000))*(x6));
IkReal x22=((IkReal(1.00000000000000))*(x12));
eetrans[1]=((((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x22)))+(((x12)*(x18)))))))+(((IkReal(-0.139000000000000))*(x19)*(x6)))+(((IkReal(-1.00000000000000))*(x10)*(x2)*(x21)))+(((x7)*(((((IkReal(-1.00000000000000))*(x19)*(x22)))+(((IkReal(-1.00000000000000))*(x20)*(x22)))))))+(((IkReal(-1.00000000000000))*(x15)*(x21))));
eetrans[2]=((IkReal(0.201500000000000))+(((x7)*(((((IkReal(-0.273000000000000))*(x17)))+(((IkReal(0.273000000000000))*(x18)))))))+(((IkReal(-1.00000000000000))*(x1)*(x10)))+(((IkReal(0.190000000000000))*(x2)))+(((IkReal(0.139000000000000))*(x18)))+(((x5)*(((((IkReal(0.273000000000000))*(x20)))+(((IkReal(0.273000000000000))*(x19))))))));
eerot[0]=((((x9)*(((((x7)*(((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((x16)*(x4)))))))+(((x5)*(((((x0)*(x19)))+(((x16)*(x3)))))))))))+(((x6)*(x8))));
eerot[1]=((((x0)*(x8)))+(((IkReal(-1.00000000000000))*(x9)*(((((x14)*(((((x18)*(x6)))+(((IkReal(-1.00000000000000))*(x17)*(x6)))))))+(((x13)*(((((x19)*(x6)))+(((x20)*(x6))))))))))));
eerot[2]=((IkReal(-1.00000000000000))*(x9)*(((((x13)*(((((IkReal(-1.00000000000000))*(x18)))+(x17)))))+(((x14)*(((x19)+(x20))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((IkReal(-1.00000000000000))*(r01));
new_py=((IkReal(-1.00000000000000))*(py));
new_r02=((IkReal(-1.00000000000000))*(r02));
new_pz=((IkReal(0.201500000000000))+(((IkReal(-1.00000000000000))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
Atan2Value<IkReal> x24 = IKatan2WithCheck(((IkReal(-1.00000000000000))*(py)),px,IKFAST_ATAN2_MAGTHRESH);
if( !x24.valid ) {
    continue;
}
IkReal x23=x24.value;
j0array[0]=((IkReal(-1.00000000000000))*(x23));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x23))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x25=(r00)*(r00);
IkReal x26=(py)*(py);
IkReal x27=(pz)*(pz);
IkReal x28=(r01)*(r01);
IkReal x29=(pz)*(pz)*(pz);
IkReal x30=(px)*(px);
IkReal x31=(r02)*(r02);
IkReal x32=((py)*(sj0));
IkReal x33=((IkReal(9.63538693604066))*(pp));
IkReal x34=((px)*(r00));
IkReal x35=((IkReal(3.66144703569545))*(r02));
IkReal x36=((r01)*(sj0));
IkReal x37=((IkReal(19.2707738720813))*(r02));
IkReal x38=((cj0)*(px));
IkReal x39=((IkReal(3.66144703569545))*(pz));
IkReal x40=((cj0)*(r00));
IkReal x41=((IkReal(0.272883986123346))*(r02));
IkReal x42=((pp)*(pz));
IkReal x43=((py)*(r01));
IkReal x44=((IkReal(0.556443595556348))*(x31));
IkReal x45=((IkReal(19.2707738720813))*(x28));
IkReal x46=((IkReal(1.43623150591235))*(pz)*(r02));
IkReal x47=((IkReal(19.2707738720813))*(x25));
IkReal x48=((IkReal(19.2707738720813))*(x27));
IkReal x49=((x36)*(x41));
IkReal x50=((x40)*(x41));
IkReal x51=((x40)*(x43));
IkReal x52=((IkReal(0.879787910356000))*(x28)*(x32));
IkReal x53=((x40)*(x46));
IkReal x54=((x36)*(x46));
IkReal x55=((IkReal(0.879787910356000))*(x25)*(x38));
IkReal x56=((IkReal(0.879787910356000))*(x34)*(x36));
IkReal x57=((IkReal(0.879787910356000))*(x51));
IkReal x58=((x38)*(x44));
IkReal x59=((pp)*(x35)*(x36));
IkReal x60=((pp)*(x35)*(x40));
IkReal x61=((x32)*(x44));
IkReal x62=((x27)*(x35)*(x40));
IkReal x63=((x25)*(x38)*(x39));
IkReal x64=((x38)*(x47)*((px)*(px)));
IkReal x65=((x35)*(x38)*(x43));
IkReal x66=((x31)*(x38)*(x39));
IkReal x67=((x30)*(x35)*(x40));
IkReal x68=((x34)*(x36)*(x39));
IkReal x69=((x32)*(x34)*(x35));
IkReal x70=((x27)*(x35)*(x36));
IkReal x71=((x39)*(x51));
IkReal x72=((x31)*(x32)*(x33));
IkReal x73=((x29)*(x36)*(x37));
IkReal x74=((x29)*(x37)*(x40));
IkReal x75=((x31)*(x32)*(x39));
IkReal x76=((x32)*(x45)*((py)*(py)));
IkReal x77=((x26)*(x35)*(x36));
IkReal x78=((x31)*(x33)*(x38));
IkReal x79=((x28)*(x32)*(x39));
IkReal x80=((x36)*(x37)*(x42));
IkReal x81=((x28)*(x32)*(x33));
IkReal x82=((x37)*(x40)*(x42));
IkReal x83=((x33)*(x51));
IkReal x84=((x25)*(x33)*(x38));
IkReal x85=((x33)*(x34)*(x36));
IkReal x86=((x27)*(x38)*(x47));
IkReal x87=((pz)*(x26)*(x36)*(x37));
IkReal x88=((IkReal(38.5415477441626))*(x26)*(x34)*(x36));
IkReal x89=((pz)*(x32)*(x34)*(x37));
IkReal x90=((x30)*(x32)*(x47));
IkReal x91=((x34)*(x36)*(x48));
IkReal x92=((x27)*(x32)*(x45));
IkReal x93=((IkReal(38.5415477441626))*(x30)*(x51));
IkReal x94=((x48)*(x51));
IkReal x95=((pz)*(x37)*(x38)*(x43));
IkReal x96=((pz)*(x30)*(x37)*(x40));
IkReal x97=((x26)*(x38)*(x45));
IkReal x98=((x59)+(x60));
IkReal x99=((x58)+(x61)+(x82)+(x83)+(x80)+(x81)+(x84)+(x85));
IkReal x100=((x77)+(x75)+(x71)+(x70)+(x79)+(x49)+(x50)+(x62)+(x63)+(x65)+(x66)+(x67)+(x68)+(x69));
IkReal x101=((x76)+(x74)+(x73)+(x72)+(x78)+(x55)+(x54)+(x57)+(x56)+(x53)+(x52)+(x64)+(x88)+(x89)+(x86)+(x87)+(x91)+(x90)+(x93)+(x92)+(x95)+(x94)+(x97)+(x96));
op[0]=((((IkReal(9.63538693604066))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.484507825194381))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(9.63538693604066))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.366398266383651))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(9.63538693604066))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-50.7125628212666))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(25.3562814106333))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.83072351784773))*(px)*(py)*(r00)*(r01)))+(((IkReal(-6.33907035265833))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-0.850906091578033))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-6.33907035265833))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(-9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(9.63538693604066))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-9.63538693604066))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(-9.63538693604066))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(0.366398266383651))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-9.63538693604066))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-101.425125642533))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(-25.3562814106333))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(0.366398266383651))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.484507825194381))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-4.81769346802033))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(0.439893955178000))*(pz)*((r02)*(r02))))+(((IkReal(-6.33907035265833))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(4.81769346802033))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-0.425453045789016))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-101.425125642533))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-4.81769346802033))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-0.278221797778174))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.278221797778174))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.556443595556348))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(25.3562814106333))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.850906091578033))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.425453045789016))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(-0.278221797778174))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-0.0528497858676222))*((r02)*(r02))))+(((IkReal(-12.6781407053167))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-50.7125628212666))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(9.63538693604066))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(9.63538693604066))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(0.439893955178000))*(px)*(r00)*(r02)))+(((IkReal(-3.23059310196597))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.81769346802033))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-4.81769346802033))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-0.915361758923863))*((py)*(py))*((r01)*(r01))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.15761567152105))*(pp)*((r02)*(r02))))+(((IkReal(9.63538693604066))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(19.2707738720813))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(19.2707738720813))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(19.2707738720813))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(4.81769346802033))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0153712106632144))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-50.7125628212666))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0153712106632144))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.242253912597191))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0307424213264288))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(25.3562814106333))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-4.81769346802033))*(pp)*(py)*(r01)*(r02)))+(((IkReal(0.366398266383651))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-9.63538693604066))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-4.14595486088983))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-25.3562814106333))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.278221797778174))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.425453045789016))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-4.14595486088983))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-50.7125628212666))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(9.63538693604066))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(19.2707738720813))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-4.81769346802033))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-101.425125642533))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-50.7125628212666))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(0.278221797778174))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-4.81769346802033))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(0.278221797778174))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(9.63538693604066))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(19.2707738720813))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-0.915361758923863))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(19.2707738720813))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.242253912597191))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-0.425453045789016))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(9.63538693604066))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.439893955178000))*(py)*(r01)*(r02)))+(((IkReal(-0.484507825194381))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00)))));
op[1]=((((IkReal(-1.00000000000000))*(x100)))+(x101)+(x98)+(((IkReal(-1.00000000000000))*(x99))));
op[2]=((((IkReal(-8.29190972177966))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-6.59009753862360))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.83072351784773))*((py)*(py))*((r01)*(r01))))+(((IkReal(-101.425125642533))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(8.29190972177966))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-101.425125642533))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.242141564796917))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-12.6781407053167))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(4.14595486088983))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(4.14595486088983))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.850906091578033))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-202.850251285066))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(-101.425125642533))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.969015650388763))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-202.850251285066))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-101.425125642533))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-101.425125642533))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-101.425125642533))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-202.850251285066))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(-3.66144703569545))*(px)*(py)*(r00)*(r01)))+(((IkReal(-0.484283129593835))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.242141564796917))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-1.70181218315607))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(50.7125628212666))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.850906091578033))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-25.3562814106333))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-50.7125628212666))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.29190972177966))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(50.7125628212666))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.29190972177966))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(0.167184414388102))*((r02)*(r02))))+(((IkReal(-50.7125628212666))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-101.425125642533))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-50.7125628212666))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-8.29190972177966))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-8.29190972177966))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-1.34621569265334))*(pp)*((r02)*(r02))))+(((IkReal(-1.83072351784773))*((px)*(px))*((r00)*(r00))))+(((IkReal(-8.29190972177966))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(50.7125628212666))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-6.59009753862360))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-6.59009753862360))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.29190972177966))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(50.7125628212666))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.969015650388763))*(px)*(pz)*(r00)*(r02)))+(((IkReal(50.7125628212666))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-101.425125642533))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-101.425125642533))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-8.29190972177966))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-6.59009753862360))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-101.425125642533))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-0.850906091578033))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-101.425125642533))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-0.850906091578033))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-12.6781407053167))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(0.861707867458962))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(50.7125628212666))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.70181218315607))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-12.6781407053167))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(-101.425125642533))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(50.7125628212666))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01)))));
op[3]=((x100)+(x101)+(((IkReal(-1.00000000000000))*(x98)))+(((IkReal(-1.00000000000000))*(x99))));
op[4]=((((IkReal(-9.63538693604066))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(-50.7125628212666))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.484507825194381))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.366398266383651))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-19.2707738720813))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(-50.7125628212666))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(25.3562814106333))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.83072351784773))*(px)*(py)*(r00)*(r01)))+(((IkReal(-9.63538693604066))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-6.33907035265833))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-0.850906091578033))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-6.33907035265833))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(-25.3562814106333))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(0.278221797778174))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-9.63538693604066))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(0.366398266383651))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-4.81769346802033))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-101.425125642533))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(-25.3562814106333))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(0.366398266383651))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(9.63538693604066))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(-0.484507825194381))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.278221797778174))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.439893955178000))*(pz)*((r02)*(r02))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-6.33907035265833))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.425453045789016))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-19.2707738720813))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-9.63538693604066))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-101.425125642533))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-19.2707738720813))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(25.3562814106333))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.850906091578033))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.425453045789016))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-9.63538693604066))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-0.278221797778174))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(4.81769346802033))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-19.2707738720813))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(4.81769346802033))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-50.7125628212666))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(4.81769346802033))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(25.3562814106333))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-0.0528497858676222))*((r02)*(r02))))+(((IkReal(9.63538693604066))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-12.6781407053167))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-50.7125628212666))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(9.63538693604066))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(4.81769346802033))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-0.439893955178000))*(py)*(r01)*(r02)))+(((IkReal(-19.2707738720813))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-3.23059310196597))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(9.63538693604066))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-0.915361758923863))*((py)*(py))*((r01)*(r01))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.439893955178000))*(px)*(r00)*(r02)))+(((IkReal(1.15761567152105))*(pp)*((r02)*(r02))))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-9.63538693604066))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(0.278221797778174))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(9.63538693604066))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-19.2707738720813))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.0153712106632144))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(9.63538693604066))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-50.7125628212666))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0153712106632144))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.242253912597191))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0307424213264288))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-50.7125628212666))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(25.3562814106333))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(25.3562814106333))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(4.81769346802033))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(0.366398266383651))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-4.14595486088983))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-25.3562814106333))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.425453045789016))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-4.14595486088983))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-50.7125628212666))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-25.3562814106333))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-4.81769346802033))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-0.484507825194381))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-101.425125642533))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(9.63538693604066))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(0.556443595556348))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.278221797778174))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-50.7125628212666))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-9.63538693604066))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.278221797778174))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-9.63538693604066))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(9.63538693604066))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(-0.915361758923863))*((px)*(px))*((r00)*(r00))))+(((IkReal(4.81769346802033))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.484507825194381))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.242253912597191))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-50.7125628212666))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-25.3562814106333))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(9.63538693604066))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.425453045789016))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(25.3562814106333))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(4.81769346802033))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-0.484507825194381))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-0.484507825194381))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00)))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x102=(pz)*(pz);
IkReal x103=(py)*(py);
IkReal x104=(px)*(px);
IkReal x105=((r01)*(sj0));
IkReal x106=((IkReal(0.190000000000000))*(cj1));
IkReal x107=((pp)*(sj1));
IkReal x108=((IkReal(1.00000000000000))*(r02));
IkReal x109=((IkReal(0.380000000000000))*(pz));
IkReal x110=((IkReal(1.00000000000000))*(pz));
IkReal x111=((py)*(r01));
IkReal x112=((px)*(sj0));
IkReal x113=((cj0)*(r00));
IkReal x114=((IkReal(1.00000000000000))*(cj1));
IkReal x115=((IkReal(0.0361000000000000))*(sj1));
IkReal x116=((IkReal(2.00000000000000))*(sj1));
IkReal x117=((IkReal(0.0361000000000000))*(cj1));
IkReal x118=((IkReal(2.00000000000000))*(cj1));
IkReal x119=((py)*(r00));
IkReal x120=((IkReal(0.190000000000000))*(sj1));
IkReal x121=((cj0)*(px));
IkReal x122=((px)*(r00));
IkReal x123=((py)*(r02)*(sj0));
IkReal x124=((pz)*(x118));
IkReal x125=((r02)*(x121));
IkReal x126=((pz)*(x116));
IkReal x127=((r02)*(x102));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x112)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x113)))+(((sj1)*(x105)))+(((IkReal(-1.00000000000000))*(cj1)*(x108))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x113)*(x114)))+(((IkReal(-1.00000000000000))*(x105)*(x114)))+(((IkReal(-1.00000000000000))*(sj1)*(x108))));
evalcond[5]=((((IkReal(-1.00000000000000))*(pz)*(x108)))+(((x113)*(x120)))+(((x105)*(x120)))+(((IkReal(-1.00000000000000))*(r02)*(x106)))+(((IkReal(-1.00000000000000))*(x122)))+(((IkReal(-1.00000000000000))*(x111))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x110)*(x113)))+(x125)+(x123)+(((IkReal(-1.00000000000000))*(r02)*(x120)))+(((IkReal(-1.00000000000000))*(x106)*(x113)))+(((IkReal(-1.00000000000000))*(x105)*(x110)))+(((IkReal(-1.00000000000000))*(x105)*(x106))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x104)*(x113)*(x116)))+(((r02)*(x109)))+(((IkReal(-1.00000000000000))*(x123)*(x126)))+(((x111)*(x124)))+(((r02)*(x117)))+(((IkReal(-1.00000000000000))*(x111)*(x116)*(x121)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x108)))+(((IkReal(-1.00000000000000))*(x113)*(x115)))+(((IkReal(-1.00000000000000))*(x103)*(x105)*(x116)))+(((x122)*(x124)))+(((IkReal(-1.00000000000000))*(x112)*(x116)*(x119)))+(((IkReal(-1.00000000000000))*(x125)*(x126)))+(((x105)*(x107)))+(((IkReal(-1.00000000000000))*(x105)*(x115)))+(((x118)*(x127)))+(((IkReal(0.380000000000000))*(x111)))+(((IkReal(0.380000000000000))*(x122)))+(((x107)*(x113))));
evalcond[8]=((((x104)*(x113)*(x118)))+(((x111)*(x126)))+(((x112)*(x118)*(x119)))+(((x103)*(x105)*(x118)))+(((IkReal(-1.00000000000000))*(x113)*(x117)))+(((IkReal(-1.00000000000000))*(x107)*(x108)))+(((IkReal(-1.00000000000000))*(pp)*(x113)*(x114)))+(((x122)*(x126)))+(((IkReal(-1.00000000000000))*(pp)*(x105)*(x114)))+(((IkReal(-1.00000000000000))*(x109)*(x113)))+(((x123)*(x124)))+(((x124)*(x125)))+(((x116)*(x127)))+(((IkReal(-1.00000000000000))*(r02)*(x115)))+(((IkReal(-1.00000000000000))*(x105)*(x117)))+(((IkReal(-1.00000000000000))*(x105)*(x109)))+(((IkReal(0.380000000000000))*(x125)))+(((IkReal(0.380000000000000))*(x123)))+(((x111)*(x118)*(x121))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x128=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x128)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x128))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x129=((px)*(sj0));
IkReal x130=((IkReal(2.00000000000000))*(py));
IkReal x131=((IkReal(0.380000000000000))*(cj1));
IkReal x132=((cj0)*(r01));
IkReal x133=((pz)*(r02));
IkReal x134=((r00)*(sj0));
IkReal x135=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(0.0938500000000000))+(((py)*(r00)*(x135)))+(((IkReal(0.0361000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(pz)*(x131)*(x134)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x135)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x131)))+(((IkReal(-1.00000000000000))*(cj0)*(x130)*(x133)))+(((pz)*(x131)*(x132)))+(((IkReal(-0.0361000000000000))*(x134)))+(((IkReal(-1.00000000000000))*(py)*(x130)*(x132)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x129)))+(((pp)*(x132)))+(((IkReal(2.00000000000000))*(x129)*(x133)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x130)))+(((IkReal(-1.00000000000000))*(pp)*(x134)))+(((IkReal(0.0758940000000000))*(IKcos(j3))))+(((r02)*(x129)*(x131)))+(((r01)*(x129)*(x130))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x136=((cj1)*(py));
IkReal x137=((pz)*(sj1));
IkReal x138=((IkReal(139000.000000000))*(sj0));
IkReal x139=((IkReal(273000.000000000))*(cj3));
IkReal x140=((py)*(sj1));
IkReal x141=((IkReal(273000.000000000))*(sj3));
IkReal x142=((cj1)*(pz));
IkReal x143=((IkReal(139000.000000000))*(cj0));
IkReal x144=((cj0)*(r02));
IkReal x145=((r00)*(x141));
IkReal x146=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x147=((px)*(r02)*(sj1));
IkReal x148=((cj1)*(px)*(r01));
IkReal x149=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
Atan2Value<IkReal> x150 = IKatan2WithCheck(((gconst12)*(((((IkReal(-1.00000000000000))*(cj0)*(r01)*(x137)*(x139)))+(((IkReal(-1.00000000000000))*(x138)*(x147)))+(((r02)*(x140)*(x143)))+(((IkReal(-1.00000000000000))*(sj0)*(x139)*(x147)))+(((r00)*(x137)*(x138)))+(((r00)*(x136)*(x139)))+(((sj0)*(x140)*(x141)))+(((r00)*(sj0)*(x137)*(x139)))+(((IkReal(-1.00000000000000))*(x139)*(x148)))+(((x139)*(x140)*(x144)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-139000.000000000))*(x148)))+(((cj0)*(px)*(sj1)*(x141)))+(((IkReal(-1.00000000000000))*(r01)*(x137)*(x143)))+(((IkReal(-1.00000000000000))*(x141)*(x142)))+(((IkReal(139000.000000000))*(r00)*(x136)))))),((gconst12)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x140)*(x141)*(x144)))+(((sj0)*(x141)*(x147)))+(((x138)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x142)))+(((x141)*(x148)))+(((cj0)*(r01)*(x137)*(x141)))+(((cj0)*(px)*(sj1)*(x139)))+(((IkReal(-139000.000000000))*(x142)))+(((IkReal(-1.00000000000000))*(sj0)*(x137)*(x145)))+(((sj0)*(x139)*(x140)))+(((px)*(sj1)*(x143)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x136)*(x145)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x150.valid ) {
    continue;
}
j2array[0]=x150.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x151=IKcos(j2);
IkReal x152=IKsin(j2);
IkReal x153=((px)*(sj1));
IkReal x154=((IkReal(0.273000000000000))*(cj3));
IkReal x155=((py)*(sj1));
IkReal x156=((IkReal(1.00000000000000))*(r00));
IkReal x157=((cj1)*(sj0));
IkReal x158=((IkReal(1.00000000000000))*(px));
IkReal x159=((IkReal(1.00000000000000))*(pz));
IkReal x160=((cj0)*(r01));
IkReal x161=((pz)*(sj1));
IkReal x162=((IkReal(0.273000000000000))*(sj3));
IkReal x163=((cj0)*(cj1));
IkReal x164=((IkReal(0.139000000000000))*(x152));
IkReal x165=((IkReal(0.139000000000000))*(x151));
IkReal x166=((x152)*(x154));
IkReal x167=((x151)*(x162));
IkReal x168=((x152)*(x162));
IkReal x169=((x151)*(x154));
IkReal x170=((x166)+(x164));
IkReal x171=((x168)+(x169)+(x165));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x153)))+(((IkReal(-1.00000000000000))*(x171)))+(((sj0)*(x155)))+(((IkReal(-1.00000000000000))*(cj1)*(x159))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x158)*(x163)))+(((IkReal(-1.00000000000000))*(x167)))+(x170)+(((IkReal(-1.00000000000000))*(py)*(x157)))+(((IkReal(-1.00000000000000))*(sj1)*(x159))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x156)))+(((IkReal(-1.00000000000000))*(x167)))+(x170)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x155)))+(((r02)*(sj0)*(x153)))+(((IkReal(-1.00000000000000))*(sj0)*(x156)*(x161)))+(((cj1)*(px)*(r01)))+(((x160)*(x161))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x159)*(x160)))+(((r01)*(x153)))+(((IkReal(-0.190000000000000))*(x160)))+(((pz)*(r00)*(x157)))+(x171)+(((py)*(r02)*(x163)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x155)*(x156)))+(((IkReal(-1.00000000000000))*(r02)*(x157)*(x158))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x172=((IkReal(139000.000000000))*(cj1));
IkReal x173=((py)*(sj0));
IkReal x174=((cj0)*(px));
IkReal x175=((IkReal(273000.000000000))*(sj3));
IkReal x176=((IkReal(273000.000000000))*(cj3));
IkReal x177=((IkReal(139000.000000000))*(sj1));
IkReal x178=((cj1)*(pz));
IkReal x179=((pz)*(sj1));
Atan2Value<IkReal> x180 = IKatan2WithCheck(((gconst11)*(((((IkReal(-1.00000000000000))*(sj1)*(x174)*(x175)))+(((IkReal(-1.00000000000000))*(pz)*(x177)))+(((x175)*(x178)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x173)*(x175)))+(((IkReal(-1.00000000000000))*(x176)*(x179)))+(((IkReal(-1.00000000000000))*(cj1)*(x173)*(x176)))+(((IkReal(-1.00000000000000))*(cj1)*(x174)*(x176)))+(((IkReal(-1.00000000000000))*(x172)*(x173)))+(((IkReal(-1.00000000000000))*(x172)*(x174)))))),((gconst11)*(((IkReal(26410.0000000000))+(((pz)*(x172)))+(((IkReal(-1.00000000000000))*(sj1)*(x174)*(x176)))+(((cj1)*(x173)*(x175)))+(((IkReal(-1.00000000000000))*(x174)*(x177)))+(((x176)*(x178)))+(((x175)*(x179)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x173)*(x176)))+(((cj1)*(x174)*(x175)))+(((IkReal(-1.00000000000000))*(x173)*(x177)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x180.valid ) {
    continue;
}
j2array[0]=x180.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x181=IKcos(j2);
IkReal x182=IKsin(j2);
IkReal x183=((px)*(sj1));
IkReal x184=((IkReal(0.273000000000000))*(cj3));
IkReal x185=((py)*(sj1));
IkReal x186=((IkReal(1.00000000000000))*(r00));
IkReal x187=((cj1)*(sj0));
IkReal x188=((IkReal(1.00000000000000))*(px));
IkReal x189=((IkReal(1.00000000000000))*(pz));
IkReal x190=((cj0)*(r01));
IkReal x191=((pz)*(sj1));
IkReal x192=((IkReal(0.273000000000000))*(sj3));
IkReal x193=((cj0)*(cj1));
IkReal x194=((IkReal(0.139000000000000))*(x182));
IkReal x195=((IkReal(0.139000000000000))*(x181));
IkReal x196=((x182)*(x184));
IkReal x197=((x181)*(x192));
IkReal x198=((x182)*(x192));
IkReal x199=((x181)*(x184));
IkReal x200=((x196)+(x194));
IkReal x201=((x199)+(x198)+(x195));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x183)))+(((sj0)*(x185)))+(((IkReal(-1.00000000000000))*(x201)))+(((IkReal(-1.00000000000000))*(cj1)*(x189))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x188)*(x193)))+(((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(py)*(x187)))+(x200)+(((IkReal(-1.00000000000000))*(sj1)*(x189))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x186)))+(((IkReal(-1.00000000000000))*(x197)))+(((r02)*(sj0)*(x183)))+(((IkReal(-1.00000000000000))*(sj0)*(x186)*(x191)))+(x200)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x185)))+(((x190)*(x191)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x189)*(x190)))+(((r01)*(x183)))+(((IkReal(-1.00000000000000))*(r02)*(x187)*(x188)))+(((IkReal(-0.190000000000000))*(x190)))+(x201)+(((IkReal(-1.00000000000000))*(x185)*(x186)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((py)*(r02)*(x193)))+(((pz)*(r00)*(x187))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x202=(pz)*(pz);
IkReal x203=(py)*(py);
IkReal x204=(px)*(px);
IkReal x205=((r01)*(sj0));
IkReal x206=((IkReal(0.190000000000000))*(cj1));
IkReal x207=((pp)*(sj1));
IkReal x208=((IkReal(1.00000000000000))*(r02));
IkReal x209=((IkReal(0.380000000000000))*(pz));
IkReal x210=((IkReal(1.00000000000000))*(pz));
IkReal x211=((py)*(r01));
IkReal x212=((px)*(sj0));
IkReal x213=((cj0)*(r00));
IkReal x214=((IkReal(1.00000000000000))*(cj1));
IkReal x215=((IkReal(0.0361000000000000))*(sj1));
IkReal x216=((IkReal(2.00000000000000))*(sj1));
IkReal x217=((IkReal(0.0361000000000000))*(cj1));
IkReal x218=((IkReal(2.00000000000000))*(cj1));
IkReal x219=((py)*(r00));
IkReal x220=((IkReal(0.190000000000000))*(sj1));
IkReal x221=((cj0)*(px));
IkReal x222=((px)*(r00));
IkReal x223=((py)*(r02)*(sj0));
IkReal x224=((pz)*(x218));
IkReal x225=((r02)*(x221));
IkReal x226=((pz)*(x216));
IkReal x227=((r02)*(x202));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x212)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x208)))+(((sj1)*(x205)))+(((sj1)*(x213))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x205)*(x214)))+(((IkReal(-1.00000000000000))*(x213)*(x214)))+(((IkReal(-1.00000000000000))*(sj1)*(x208))));
evalcond[5]=((((x205)*(x220)))+(((IkReal(-1.00000000000000))*(pz)*(x208)))+(((IkReal(-1.00000000000000))*(r02)*(x206)))+(((x213)*(x220)))+(((IkReal(-1.00000000000000))*(x211)))+(((IkReal(-1.00000000000000))*(x222))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r02)*(x220)))+(((IkReal(-1.00000000000000))*(x206)*(x213)))+(((IkReal(-1.00000000000000))*(x205)*(x210)))+(x223)+(x225)+(((IkReal(-1.00000000000000))*(x210)*(x213)))+(((IkReal(-1.00000000000000))*(x205)*(x206))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x212)*(x216)*(x219)))+(((x205)*(x207)))+(((x222)*(x224)))+(((IkReal(-1.00000000000000))*(x204)*(x213)*(x216)))+(((IkReal(-1.00000000000000))*(x203)*(x205)*(x216)))+(((IkReal(-1.00000000000000))*(x225)*(x226)))+(((x207)*(x213)))+(((IkReal(0.380000000000000))*(x222)))+(((IkReal(-1.00000000000000))*(x205)*(x215)))+(((IkReal(-1.00000000000000))*(x223)*(x226)))+(((r02)*(x217)))+(((x218)*(x227)))+(((IkReal(-1.00000000000000))*(x213)*(x215)))+(((IkReal(0.380000000000000))*(x211)))+(((IkReal(-1.00000000000000))*(x211)*(x216)*(x221)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x208)))+(((r02)*(x209)))+(((x211)*(x224))));
evalcond[8]=((((x224)*(x225)))+(((x216)*(x227)))+(((x222)*(x226)))+(((x211)*(x218)*(x221)))+(((IkReal(-1.00000000000000))*(pp)*(x213)*(x214)))+(((IkReal(0.380000000000000))*(x225)))+(((IkReal(0.380000000000000))*(x223)))+(((IkReal(-1.00000000000000))*(x205)*(x217)))+(((IkReal(-1.00000000000000))*(pp)*(x205)*(x214)))+(((x223)*(x224)))+(((IkReal(-1.00000000000000))*(x207)*(x208)))+(((x212)*(x218)*(x219)))+(((x203)*(x205)*(x218)))+(((IkReal(-1.00000000000000))*(x205)*(x209)))+(((IkReal(-1.00000000000000))*(x213)*(x217)))+(((IkReal(-1.00000000000000))*(r02)*(x215)))+(((x204)*(x213)*(x218)))+(((IkReal(-1.00000000000000))*(x209)*(x213)))+(((x211)*(x226))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x228=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x228)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x228))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x229=((px)*(sj0));
IkReal x230=((IkReal(2.00000000000000))*(py));
IkReal x231=((IkReal(0.380000000000000))*(cj1));
IkReal x232=((cj0)*(r01));
IkReal x233=((pz)*(r02));
IkReal x234=((r00)*(sj0));
IkReal x235=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(-0.0938500000000000))+(((py)*(r00)*(x235)))+(((pp)*(x232)))+(((IkReal(2.00000000000000))*(x229)*(x233)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x229)))+(((IkReal(-0.0361000000000000))*(x234)))+(((IkReal(0.0361000000000000))*(x232)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x235)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x230)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x231)))+(((r02)*(x229)*(x231)))+(((IkReal(-1.00000000000000))*(py)*(x230)*(x232)))+(((r01)*(x229)*(x230)))+(((pz)*(x231)*(x232)))+(((IkReal(-1.00000000000000))*(pp)*(x234)))+(((IkReal(-0.0758940000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(cj0)*(x230)*(x233)))+(((IkReal(-1.00000000000000))*(pz)*(x231)*(x234))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x236=((IkReal(273000.000000000))*(sj3));
IkReal x237=((IkReal(273000.000000000))*(cj3));
IkReal x238=((pz)*(r00));
IkReal x239=((px)*(r02));
IkReal x240=((sj0)*(sj1));
IkReal x241=((cj1)*(pz));
IkReal x242=((cj1)*(py)*(r00));
IkReal x243=((IkReal(139000.000000000))*(x240));
IkReal x244=((cj0)*(px)*(sj1));
IkReal x245=((cj1)*(px)*(r01));
IkReal x246=((cj0)*(pz)*(r01)*(sj1));
IkReal x247=((cj0)*(py)*(r02)*(sj1));
Atan2Value<IkReal> x248 = IKatan2WithCheck(((gconst14)*(((((x237)*(x239)*(x240)))+(((x237)*(x246)))+(((x237)*(x245)))+(((x236)*(x244)))+(((IkReal(-139000.000000000))*(x247)))+(((IkReal(-139000.000000000))*(x242)))+(((IkReal(-1.00000000000000))*(x237)*(x247)))+(((IkReal(-1.00000000000000))*(x237)*(x242)))+(((IkReal(139000.000000000))*(x246)))+(((IkReal(139000.000000000))*(x245)))+(((IkReal(-1.00000000000000))*(x236)*(x241)))+(((IkReal(-51870.0000000000))*(sj3)))+(((x239)*(x243)))+(((IkReal(-1.00000000000000))*(x238)*(x243)))+(((py)*(x236)*(x240)))+(((IkReal(-1.00000000000000))*(x237)*(x238)*(x240)))))),((gconst14)*(((IkReal(-26410.0000000000))+(((x237)*(x244)))+(((x236)*(x247)))+(((x236)*(x242)))+(((IkReal(-139000.000000000))*(x241)))+(((py)*(x237)*(x240)))+(((IkReal(-1.00000000000000))*(x237)*(x241)))+(((IkReal(139000.000000000))*(x244)))+(((IkReal(-1.00000000000000))*(x236)*(x246)))+(((IkReal(-1.00000000000000))*(x236)*(x245)))+(((py)*(x243)))+(((IkReal(-1.00000000000000))*(x236)*(x239)*(x240)))+(((IkReal(-51870.0000000000))*(cj3)))+(((x236)*(x238)*(x240)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x248.valid ) {
    continue;
}
j2array[0]=x248.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x249=IKcos(j2);
IkReal x250=IKsin(j2);
IkReal x251=((px)*(sj1));
IkReal x252=((IkReal(0.273000000000000))*(cj3));
IkReal x253=((py)*(sj1));
IkReal x254=((IkReal(1.00000000000000))*(r00));
IkReal x255=((cj1)*(sj0));
IkReal x256=((IkReal(1.00000000000000))*(px));
IkReal x257=((IkReal(1.00000000000000))*(pz));
IkReal x258=((cj0)*(r01));
IkReal x259=((pz)*(sj1));
IkReal x260=((IkReal(0.273000000000000))*(sj3));
IkReal x261=((cj0)*(cj1));
IkReal x262=((IkReal(0.139000000000000))*(x250));
IkReal x263=((IkReal(0.139000000000000))*(x249));
IkReal x264=((x249)*(x260));
IkReal x265=((x250)*(x252));
IkReal x266=((x250)*(x260));
IkReal x267=((x249)*(x252));
IkReal x268=((x265)+(x262));
IkReal x269=((x267)+(x266)+(x263));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x253)))+(((cj0)*(x251)))+(((IkReal(-1.00000000000000))*(cj1)*(x257)))+(((IkReal(-1.00000000000000))*(x269))));
evalcond[1]=((x268)+(((IkReal(-1.00000000000000))*(sj1)*(x257)))+(((IkReal(-1.00000000000000))*(py)*(x255)))+(((IkReal(-1.00000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(x256)*(x261))));
evalcond[2]=((x264)+(((r02)*(sj0)*(x251)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x254)))+(((IkReal(-1.00000000000000))*(sj0)*(x254)*(x259)))+(((IkReal(-1.00000000000000))*(x268)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x253)))+(((x258)*(x259))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x258)))+(((r01)*(x251)))+(((IkReal(-1.00000000000000))*(r02)*(x255)*(x256)))+(((py)*(r02)*(x261)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(x257)*(x258)))+(((IkReal(-1.00000000000000))*(x269)))+(((pz)*(r00)*(x255)))+(((IkReal(-1.00000000000000))*(x253)*(x254))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x270=((IkReal(139000.000000000))*(cj1));
IkReal x271=((py)*(sj0));
IkReal x272=((cj0)*(px));
IkReal x273=((IkReal(273000.000000000))*(cj3));
IkReal x274=((IkReal(139000.000000000))*(sj1));
IkReal x275=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x276=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x277 = IKatan2WithCheck(((gconst13)*(((((IkReal(-1.00000000000000))*(x272)*(x276)))+(((IkReal(-1.00000000000000))*(pz)*(x274)))+(((IkReal(-1.00000000000000))*(x271)*(x276)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x270)*(x271)))+(((IkReal(-1.00000000000000))*(x270)*(x272)))+(((IkReal(-1.00000000000000))*(cj1)*(x271)*(x273)))+(((IkReal(-1.00000000000000))*(cj1)*(x272)*(x273)))+(((pz)*(x275)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x273)))))),((gconst13)*(((IkReal(26410.0000000000))+(((x272)*(x275)))+(((IkReal(-1.00000000000000))*(x272)*(x274)))+(((cj1)*(pz)*(x273)))+(((x271)*(x275)))+(((IkReal(-1.00000000000000))*(sj1)*(x271)*(x273)))+(((IkReal(-1.00000000000000))*(x271)*(x274)))+(((IkReal(-1.00000000000000))*(sj1)*(x272)*(x273)))+(((IkReal(51870.0000000000))*(cj3)))+(((pz)*(x270)))+(((pz)*(x276)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x277.valid ) {
    continue;
}
j2array[0]=x277.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x278=IKcos(j2);
IkReal x279=IKsin(j2);
IkReal x280=((px)*(sj1));
IkReal x281=((IkReal(0.273000000000000))*(cj3));
IkReal x282=((py)*(sj1));
IkReal x283=((IkReal(1.00000000000000))*(r00));
IkReal x284=((cj1)*(sj0));
IkReal x285=((IkReal(1.00000000000000))*(px));
IkReal x286=((IkReal(1.00000000000000))*(pz));
IkReal x287=((cj0)*(r01));
IkReal x288=((pz)*(sj1));
IkReal x289=((IkReal(0.273000000000000))*(sj3));
IkReal x290=((cj0)*(cj1));
IkReal x291=((IkReal(0.139000000000000))*(x279));
IkReal x292=((IkReal(0.139000000000000))*(x278));
IkReal x293=((x278)*(x289));
IkReal x294=((x279)*(x281));
IkReal x295=((x279)*(x289));
IkReal x296=((x278)*(x281));
IkReal x297=((x291)+(x294));
IkReal x298=((x292)+(x295)+(x296));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x298)))+(((cj0)*(x280)))+(((IkReal(-1.00000000000000))*(cj1)*(x286)))+(((sj0)*(x282))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x286)))+(((IkReal(-1.00000000000000))*(x285)*(x290)))+(((IkReal(-1.00000000000000))*(x293)))+(((IkReal(-1.00000000000000))*(py)*(x284)))+(x297));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x283)))+(((IkReal(-1.00000000000000))*(x297)))+(((IkReal(-1.00000000000000))*(sj0)*(x283)*(x288)))+(x293)+(((r02)*(sj0)*(x280)))+(((cj1)*(px)*(r01)))+(((x287)*(x288)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x282))));
evalcond[3]=((((r01)*(x280)))+(((IkReal(-1.00000000000000))*(x298)))+(((IkReal(-1.00000000000000))*(cj1)*(x286)*(x287)))+(((IkReal(-1.00000000000000))*(x282)*(x283)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((py)*(r02)*(x290)))+(((IkReal(-1.00000000000000))*(r02)*(x284)*(x285)))+(((pz)*(r00)*(x284)))+(((IkReal(-0.190000000000000))*(x287))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x299=(pz)*(pz);
IkReal x300=(py)*(py);
IkReal x301=(px)*(px);
IkReal x302=((r01)*(sj0));
IkReal x303=((IkReal(0.190000000000000))*(cj1));
IkReal x304=((pp)*(sj1));
IkReal x305=((IkReal(1.00000000000000))*(r02));
IkReal x306=((IkReal(0.380000000000000))*(pz));
IkReal x307=((IkReal(1.00000000000000))*(pz));
IkReal x308=((py)*(r01));
IkReal x309=((px)*(sj0));
IkReal x310=((cj0)*(r00));
IkReal x311=((IkReal(1.00000000000000))*(cj1));
IkReal x312=((IkReal(0.0361000000000000))*(sj1));
IkReal x313=((IkReal(2.00000000000000))*(sj1));
IkReal x314=((IkReal(0.0361000000000000))*(cj1));
IkReal x315=((IkReal(2.00000000000000))*(cj1));
IkReal x316=((py)*(r00));
IkReal x317=((IkReal(0.190000000000000))*(sj1));
IkReal x318=((cj0)*(px));
IkReal x319=((px)*(r00));
IkReal x320=((py)*(r02)*(sj0));
IkReal x321=((pz)*(x315));
IkReal x322=((r02)*(x318));
IkReal x323=((pz)*(x313));
IkReal x324=((r02)*(x299));
evalcond[0]=IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x309)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x310)))+(((IkReal(-1.00000000000000))*(cj1)*(x305)))+(((sj1)*(x302))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj1)*(x305)))+(((IkReal(-1.00000000000000))*(x310)*(x311)))+(((IkReal(-1.00000000000000))*(x302)*(x311))));
evalcond[5]=((((x302)*(x317)))+(((x310)*(x317)))+(((IkReal(-1.00000000000000))*(x308)))+(((IkReal(-1.00000000000000))*(r02)*(x303)))+(((IkReal(-1.00000000000000))*(pz)*(x305)))+(((IkReal(-1.00000000000000))*(x319))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r02)*(x317)))+(((IkReal(-1.00000000000000))*(x303)*(x310)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((IkReal(-1.00000000000000))*(x302)*(x307)))+(x320)+(x322)+(((IkReal(-1.00000000000000))*(x307)*(x310))));
evalcond[7]=((((x304)*(x310)))+(((IkReal(-1.00000000000000))*(x310)*(x312)))+(((IkReal(0.380000000000000))*(x319)))+(((x308)*(x321)))+(((r02)*(x314)))+(((IkReal(-1.00000000000000))*(x302)*(x312)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x305)))+(((IkReal(-1.00000000000000))*(x322)*(x323)))+(((r02)*(x306)))+(((IkReal(-1.00000000000000))*(x308)*(x313)*(x318)))+(((IkReal(-1.00000000000000))*(x320)*(x323)))+(((x315)*(x324)))+(((x302)*(x304)))+(((IkReal(-1.00000000000000))*(x309)*(x313)*(x316)))+(((IkReal(-1.00000000000000))*(x301)*(x310)*(x313)))+(((IkReal(-1.00000000000000))*(x300)*(x302)*(x313)))+(((IkReal(0.380000000000000))*(x308)))+(((x319)*(x321))));
evalcond[8]=((((IkReal(-1.00000000000000))*(r02)*(x312)))+(((IkReal(-1.00000000000000))*(pp)*(x302)*(x311)))+(((IkReal(-1.00000000000000))*(x310)*(x314)))+(((x309)*(x315)*(x316)))+(((x308)*(x323)))+(((x320)*(x321)))+(((x300)*(x302)*(x315)))+(((x313)*(x324)))+(((IkReal(-1.00000000000000))*(x302)*(x306)))+(((IkReal(-1.00000000000000))*(x302)*(x314)))+(((IkReal(0.380000000000000))*(x322)))+(((IkReal(0.380000000000000))*(x320)))+(((IkReal(-1.00000000000000))*(x306)*(x310)))+(((x301)*(x310)*(x315)))+(((IkReal(-1.00000000000000))*(pp)*(x310)*(x311)))+(((x308)*(x315)*(x318)))+(((IkReal(-1.00000000000000))*(x304)*(x305)))+(((x321)*(x322)))+(((x319)*(x323))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x325=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x325)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x325))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x326=((px)*(sj0));
IkReal x327=((IkReal(2.00000000000000))*(py));
IkReal x328=((IkReal(0.380000000000000))*(cj1));
IkReal x329=((cj0)*(r01));
IkReal x330=((pz)*(r02));
IkReal x331=((r00)*(sj0));
IkReal x332=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(0.0938500000000000))+(((IkReal(2.00000000000000))*(x326)*(x330)))+(((r02)*(x326)*(x328)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x328)))+(((r01)*(x326)*(x327)))+(((IkReal(-1.00000000000000))*(pp)*(x331)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x326)))+(((IkReal(0.0361000000000000))*(x329)))+(((py)*(r00)*(x332)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x332)))+(((IkReal(-1.00000000000000))*(cj0)*(x327)*(x330)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x327)))+(((pp)*(x329)))+(((pz)*(x328)*(x329)))+(((IkReal(0.0758940000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(py)*(x327)*(x329)))+(((IkReal(-0.0361000000000000))*(x331)))+(((IkReal(-1.00000000000000))*(pz)*(x328)*(x331))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x333=((cj1)*(py));
IkReal x334=((pz)*(sj1));
IkReal x335=((cj1)*(pz));
IkReal x336=((IkReal(139000.000000000))*(sj0));
IkReal x337=((IkReal(273000.000000000))*(cj3));
IkReal x338=((py)*(sj1));
IkReal x339=((IkReal(273000.000000000))*(sj3));
IkReal x340=((IkReal(139000.000000000))*(cj0));
IkReal x341=((cj0)*(r02));
IkReal x342=((r00)*(x339));
IkReal x343=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x344=((px)*(r02)*(sj1));
IkReal x345=((cj1)*(px)*(r01));
IkReal x346=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
Atan2Value<IkReal> x347 = IKatan2WithCheck(((gconst16)*(((((x337)*(x338)*(x341)))+(((IkReal(-1.00000000000000))*(x336)*(x344)))+(((IkReal(-1.00000000000000))*(x337)*(x345)))+(((IkReal(-139000.000000000))*(x345)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x334)*(x337)))+(((IkReal(-1.00000000000000))*(r01)*(x334)*(x340)))+(((IkReal(139000.000000000))*(r00)*(x333)))+(((r02)*(x338)*(x340)))+(((IkReal(-51870.0000000000))*(sj3)))+(((r00)*(x334)*(x336)))+(((cj0)*(px)*(sj1)*(x339)))+(((r00)*(sj0)*(x334)*(x337)))+(((sj0)*(x338)*(x339)))+(((r00)*(x333)*(x337)))+(((IkReal(-1.00000000000000))*(sj0)*(x337)*(x344)))+(((IkReal(-1.00000000000000))*(x335)*(x339)))))),((gconst16)*(((IkReal(-26410.0000000000))+(((x336)*(x338)))+(((IkReal(-1.00000000000000))*(sj0)*(x334)*(x342)))+(((IkReal(-139000.000000000))*(x335)))+(((sj0)*(x339)*(x344)))+(((cj0)*(r01)*(x334)*(x339)))+(((IkReal(-1.00000000000000))*(x338)*(x339)*(x341)))+(((cj0)*(px)*(sj1)*(x337)))+(((sj0)*(x337)*(x338)))+(((IkReal(-1.00000000000000))*(x333)*(x342)))+(((x339)*(x345)))+(((IkReal(-1.00000000000000))*(x335)*(x337)))+(((IkReal(-51870.0000000000))*(cj3)))+(((px)*(sj1)*(x340)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x347.valid ) {
    continue;
}
j2array[0]=x347.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x348=IKcos(j2);
IkReal x349=IKsin(j2);
IkReal x350=((px)*(sj1));
IkReal x351=((IkReal(0.273000000000000))*(cj3));
IkReal x352=((py)*(sj1));
IkReal x353=((IkReal(1.00000000000000))*(r00));
IkReal x354=((cj1)*(sj0));
IkReal x355=((IkReal(1.00000000000000))*(px));
IkReal x356=((IkReal(1.00000000000000))*(pz));
IkReal x357=((cj0)*(r01));
IkReal x358=((pz)*(sj1));
IkReal x359=((IkReal(0.273000000000000))*(sj3));
IkReal x360=((cj0)*(cj1));
IkReal x361=((IkReal(0.139000000000000))*(x349));
IkReal x362=((IkReal(0.139000000000000))*(x348));
IkReal x363=((x349)*(x351));
IkReal x364=((x348)*(x359));
IkReal x365=((x349)*(x359));
IkReal x366=((x348)*(x351));
IkReal x367=((x361)+(x363));
IkReal x368=((x362)+(x365)+(x366));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x368)))+(((IkReal(-1.00000000000000))*(cj1)*(x356)))+(((cj0)*(x350)))+(((sj0)*(x352))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x354)))+(((IkReal(-1.00000000000000))*(x364)))+(((IkReal(-1.00000000000000))*(x355)*(x360)))+(x367)+(((IkReal(-1.00000000000000))*(sj1)*(x356))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x353)*(x358)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x352)))+(((r02)*(sj0)*(x350)))+(((IkReal(-1.00000000000000))*(x364)))+(x367)+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x353)))+(((cj1)*(px)*(r01)))+(((x357)*(x358))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x357)))+(((pz)*(r00)*(x354)))+(((r01)*(x350)))+(((IkReal(-1.00000000000000))*(cj1)*(x356)*(x357)))+(x368)+(((py)*(r02)*(x360)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r02)*(x354)*(x355)))+(((IkReal(-1.00000000000000))*(x352)*(x353))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x369=((IkReal(139000.000000000))*(cj1));
IkReal x370=((py)*(sj0));
IkReal x371=((cj0)*(px));
IkReal x372=((IkReal(273000.000000000))*(cj3));
IkReal x373=((IkReal(139000.000000000))*(sj1));
IkReal x374=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x375=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x376 = IKatan2WithCheck(((gconst15)*(((((IkReal(-1.00000000000000))*(cj1)*(x371)*(x372)))+(((IkReal(-1.00000000000000))*(cj1)*(x370)*(x372)))+(((IkReal(-1.00000000000000))*(x370)*(x375)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x372)))+(((pz)*(x374)))+(((IkReal(-1.00000000000000))*(x371)*(x375)))+(((IkReal(-1.00000000000000))*(x369)*(x370)))+(((IkReal(-1.00000000000000))*(x369)*(x371)))+(((IkReal(-1.00000000000000))*(pz)*(x373)))))),((gconst15)*(((IkReal(26410.0000000000))+(((x370)*(x374)))+(((IkReal(-1.00000000000000))*(x370)*(x373)))+(((cj1)*(pz)*(x372)))+(((IkReal(51870.0000000000))*(cj3)))+(((pz)*(x375)))+(((IkReal(-1.00000000000000))*(sj1)*(x370)*(x372)))+(((pz)*(x369)))+(((IkReal(-1.00000000000000))*(x371)*(x373)))+(((IkReal(-1.00000000000000))*(sj1)*(x371)*(x372)))+(((x371)*(x374)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x376.valid ) {
    continue;
}
j2array[0]=x376.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x377=IKcos(j2);
IkReal x378=IKsin(j2);
IkReal x379=((px)*(sj1));
IkReal x380=((IkReal(0.273000000000000))*(cj3));
IkReal x381=((py)*(sj1));
IkReal x382=((IkReal(1.00000000000000))*(r00));
IkReal x383=((cj1)*(sj0));
IkReal x384=((IkReal(1.00000000000000))*(px));
IkReal x385=((IkReal(1.00000000000000))*(pz));
IkReal x386=((cj0)*(r01));
IkReal x387=((pz)*(sj1));
IkReal x388=((IkReal(0.273000000000000))*(sj3));
IkReal x389=((cj0)*(cj1));
IkReal x390=((IkReal(0.139000000000000))*(x378));
IkReal x391=((IkReal(0.139000000000000))*(x377));
IkReal x392=((x378)*(x380));
IkReal x393=((x377)*(x388));
IkReal x394=((x378)*(x388));
IkReal x395=((x377)*(x380));
IkReal x396=((x390)+(x392));
IkReal x397=((x395)+(x394)+(x391));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x385)))+(((IkReal(-1.00000000000000))*(x397)))+(((sj0)*(x381)))+(((cj0)*(x379))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x393)))+(((IkReal(-1.00000000000000))*(x384)*(x389)))+(x396)+(((IkReal(-1.00000000000000))*(py)*(x383)))+(((IkReal(-1.00000000000000))*(sj1)*(x385))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x393)))+(((IkReal(-1.00000000000000))*(sj0)*(x382)*(x387)))+(((x386)*(x387)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x381)))+(x396)+(((r02)*(sj0)*(x379)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x382))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x385)*(x386)))+(((py)*(r02)*(x389)))+(((r01)*(x379)))+(((IkReal(-1.00000000000000))*(x381)*(x382)))+(((IkReal(-1.00000000000000))*(r02)*(x383)*(x384)))+(x397)+(((pz)*(r00)*(x383)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x386))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x398=(pz)*(pz);
IkReal x399=(py)*(py);
IkReal x400=(px)*(px);
IkReal x401=((r01)*(sj0));
IkReal x402=((IkReal(0.190000000000000))*(cj1));
IkReal x403=((pp)*(sj1));
IkReal x404=((IkReal(1.00000000000000))*(r02));
IkReal x405=((IkReal(0.380000000000000))*(pz));
IkReal x406=((IkReal(1.00000000000000))*(pz));
IkReal x407=((py)*(r01));
IkReal x408=((px)*(sj0));
IkReal x409=((cj0)*(r00));
IkReal x410=((IkReal(1.00000000000000))*(cj1));
IkReal x411=((IkReal(0.0361000000000000))*(sj1));
IkReal x412=((IkReal(2.00000000000000))*(sj1));
IkReal x413=((IkReal(0.0361000000000000))*(cj1));
IkReal x414=((IkReal(2.00000000000000))*(cj1));
IkReal x415=((py)*(r00));
IkReal x416=((IkReal(0.190000000000000))*(sj1));
IkReal x417=((cj0)*(px));
IkReal x418=((px)*(r00));
IkReal x419=((py)*(r02)*(sj0));
IkReal x420=((pz)*(x414));
IkReal x421=((r02)*(x417));
IkReal x422=((pz)*(x412));
IkReal x423=((r02)*(x398));
evalcond[0]=IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959)))));
evalcond[1]=((((cj0)*(py)))+(((IkReal(-1.00000000000000))*(x408))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x404)))+(((sj1)*(x409)))+(((sj1)*(x401))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x401)*(x410)))+(((IkReal(-1.00000000000000))*(sj1)*(x404)))+(((IkReal(-1.00000000000000))*(x409)*(x410))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r02)*(x402)))+(((x409)*(x416)))+(((IkReal(-1.00000000000000))*(pz)*(x404)))+(((x401)*(x416)))+(((IkReal(-1.00000000000000))*(x407)))+(((IkReal(-1.00000000000000))*(x418))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x406)*(x409)))+(((IkReal(-1.00000000000000))*(r02)*(x416)))+(((IkReal(-1.00000000000000))*(x402)*(x409)))+(((IkReal(-1.00000000000000))*(x401)*(x406)))+(((IkReal(-1.00000000000000))*(x401)*(x402)))+(x419)+(x421));
evalcond[7]=((((IkReal(-1.00000000000000))*(x421)*(x422)))+(((x414)*(x423)))+(((IkReal(-1.00000000000000))*(x399)*(x401)*(x412)))+(((IkReal(0.380000000000000))*(x418)))+(((IkReal(0.380000000000000))*(x407)))+(((x418)*(x420)))+(((IkReal(-1.00000000000000))*(x401)*(x411)))+(((IkReal(-1.00000000000000))*(x400)*(x409)*(x412)))+(((x407)*(x420)))+(((IkReal(-1.00000000000000))*(x407)*(x412)*(x417)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x404)))+(((IkReal(-1.00000000000000))*(x419)*(x422)))+(((IkReal(-1.00000000000000))*(x408)*(x412)*(x415)))+(((r02)*(x413)))+(((x403)*(x409)))+(((r02)*(x405)))+(((x401)*(x403)))+(((IkReal(-1.00000000000000))*(x409)*(x411))));
evalcond[8]=((((x420)*(x421)))+(((x400)*(x409)*(x414)))+(((x408)*(x414)*(x415)))+(((x399)*(x401)*(x414)))+(((x407)*(x414)*(x417)))+(((IkReal(-1.00000000000000))*(r02)*(x411)))+(((IkReal(0.380000000000000))*(x421)))+(((IkReal(-1.00000000000000))*(pp)*(x409)*(x410)))+(((IkReal(0.380000000000000))*(x419)))+(((IkReal(-1.00000000000000))*(x403)*(x404)))+(((x418)*(x422)))+(((x419)*(x420)))+(((IkReal(-1.00000000000000))*(x401)*(x405)))+(((IkReal(-1.00000000000000))*(x401)*(x413)))+(((x407)*(x422)))+(((x412)*(x423)))+(((IkReal(-1.00000000000000))*(pp)*(x401)*(x410)))+(((IkReal(-1.00000000000000))*(x405)*(x409)))+(((IkReal(-1.00000000000000))*(x409)*(x413))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x424=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x424)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x424))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x425=((px)*(sj0));
IkReal x426=((IkReal(2.00000000000000))*(py));
IkReal x427=((IkReal(0.380000000000000))*(cj1));
IkReal x428=((cj0)*(r01));
IkReal x429=((pz)*(r02));
IkReal x430=((r00)*(sj0));
IkReal x431=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(-0.0938500000000000))+(((IkReal(-0.0361000000000000))*(x430)))+(((py)*(r00)*(x431)))+(((IkReal(0.0361000000000000))*(x428)))+(((pp)*(x428)))+(((IkReal(-1.00000000000000))*(pz)*(x427)*(x430)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x431)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x427)))+(((IkReal(-1.00000000000000))*(pp)*(x430)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x426)))+(((pz)*(x427)*(x428)))+(((IkReal(-1.00000000000000))*(cj0)*(x426)*(x429)))+(((r01)*(x425)*(x426)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x425)))+(((IkReal(2.00000000000000))*(x425)*(x429)))+(((IkReal(-0.0758940000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(py)*(x426)*(x428)))+(((r02)*(x425)*(x427))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x432=((IkReal(273000.000000000))*(sj3));
IkReal x433=((IkReal(273000.000000000))*(cj3));
IkReal x434=((pz)*(r00));
IkReal x435=((px)*(r02));
IkReal x436=((sj0)*(sj1));
IkReal x437=((cj1)*(pz));
IkReal x438=((cj1)*(py)*(r00));
IkReal x439=((IkReal(139000.000000000))*(x436));
IkReal x440=((cj0)*(px)*(sj1));
IkReal x441=((cj1)*(px)*(r01));
IkReal x442=((cj0)*(pz)*(r01)*(sj1));
IkReal x443=((cj0)*(py)*(r02)*(sj1));
Atan2Value<IkReal> x444 = IKatan2WithCheck(((gconst18)*(((((IkReal(-1.00000000000000))*(x433)*(x438)))+(((IkReal(-1.00000000000000))*(x433)*(x443)))+(((IkReal(-1.00000000000000))*(x432)*(x437)))+(((py)*(x432)*(x436)))+(((IkReal(-1.00000000000000))*(x434)*(x439)))+(((x433)*(x435)*(x436)))+(((IkReal(139000.000000000))*(x442)))+(((IkReal(139000.000000000))*(x441)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-139000.000000000))*(x438)))+(((IkReal(-1.00000000000000))*(x433)*(x434)*(x436)))+(((IkReal(-139000.000000000))*(x443)))+(((x433)*(x441)))+(((x433)*(x442)))+(((x432)*(x440)))+(((x435)*(x439)))))),((gconst18)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x433)*(x437)))+(((py)*(x433)*(x436)))+(((IkReal(-1.00000000000000))*(x432)*(x441)))+(((IkReal(-1.00000000000000))*(x432)*(x442)))+(((py)*(x439)))+(((IkReal(139000.000000000))*(x440)))+(((IkReal(-139000.000000000))*(x437)))+(((IkReal(-1.00000000000000))*(x432)*(x435)*(x436)))+(((x433)*(x440)))+(((x432)*(x434)*(x436)))+(((x432)*(x438)))+(((IkReal(-51870.0000000000))*(cj3)))+(((x432)*(x443)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x444.valid ) {
    continue;
}
j2array[0]=x444.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x445=IKcos(j2);
IkReal x446=IKsin(j2);
IkReal x447=((px)*(sj1));
IkReal x448=((IkReal(0.273000000000000))*(cj3));
IkReal x449=((py)*(sj1));
IkReal x450=((IkReal(1.00000000000000))*(r00));
IkReal x451=((cj1)*(sj0));
IkReal x452=((IkReal(1.00000000000000))*(px));
IkReal x453=((IkReal(1.00000000000000))*(pz));
IkReal x454=((cj0)*(r01));
IkReal x455=((pz)*(sj1));
IkReal x456=((IkReal(0.273000000000000))*(sj3));
IkReal x457=((cj0)*(cj1));
IkReal x458=((IkReal(0.139000000000000))*(x446));
IkReal x459=((IkReal(0.139000000000000))*(x445));
IkReal x460=((x445)*(x456));
IkReal x461=((x446)*(x448));
IkReal x462=((x446)*(x456));
IkReal x463=((x445)*(x448));
IkReal x464=((x458)+(x461));
IkReal x465=((x459)+(x463)+(x462));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x449)))+(((IkReal(-1.00000000000000))*(x465)))+(((cj0)*(x447)))+(((IkReal(-1.00000000000000))*(cj1)*(x453))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x451)))+(((IkReal(-1.00000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(sj1)*(x453)))+(x464)+(((IkReal(-1.00000000000000))*(x452)*(x457))));
evalcond[2]=((((x454)*(x455)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x449)))+(((IkReal(-1.00000000000000))*(x464)))+(x460)+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x450)))+(((IkReal(-1.00000000000000))*(sj0)*(x450)*(x455)))+(((r02)*(sj0)*(x447)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x454)))+(((IkReal(-1.00000000000000))*(cj1)*(x453)*(x454)))+(((IkReal(-1.00000000000000))*(x465)))+(((r01)*(x447)))+(((py)*(r02)*(x457)))+(((IkReal(-1.00000000000000))*(r02)*(x451)*(x452)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x449)*(x450)))+(((pz)*(r00)*(x451))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x466=((IkReal(139000.000000000))*(cj1));
IkReal x467=((py)*(sj0));
IkReal x468=((cj0)*(px));
IkReal x469=((IkReal(273000.000000000))*(sj3));
IkReal x470=((IkReal(273000.000000000))*(cj3));
IkReal x471=((IkReal(139000.000000000))*(sj1));
IkReal x472=((cj1)*(pz));
IkReal x473=((pz)*(sj1));
Atan2Value<IkReal> x474 = IKatan2WithCheck(((gconst17)*(((((IkReal(-1.00000000000000))*(x466)*(x468)))+(((IkReal(-1.00000000000000))*(x466)*(x467)))+(((IkReal(-1.00000000000000))*(cj1)*(x467)*(x470)))+(((x469)*(x472)))+(((IkReal(-1.00000000000000))*(pz)*(x471)))+(((IkReal(-1.00000000000000))*(cj1)*(x468)*(x470)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x467)*(x469)))+(((IkReal(-1.00000000000000))*(sj1)*(x468)*(x469)))+(((IkReal(-1.00000000000000))*(x470)*(x473)))))),((gconst17)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(x467)*(x471)))+(((cj1)*(x467)*(x469)))+(((x469)*(x473)))+(((IkReal(-1.00000000000000))*(x468)*(x471)))+(((x470)*(x472)))+(((cj1)*(x468)*(x469)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x468)*(x470)))+(((IkReal(-1.00000000000000))*(sj1)*(x467)*(x470)))+(((pz)*(x466)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x474.valid ) {
    continue;
}
j2array[0]=x474.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x475=IKcos(j2);
IkReal x476=IKsin(j2);
IkReal x477=((px)*(sj1));
IkReal x478=((IkReal(0.273000000000000))*(cj3));
IkReal x479=((py)*(sj1));
IkReal x480=((IkReal(1.00000000000000))*(r00));
IkReal x481=((cj1)*(sj0));
IkReal x482=((IkReal(1.00000000000000))*(px));
IkReal x483=((IkReal(1.00000000000000))*(pz));
IkReal x484=((cj0)*(r01));
IkReal x485=((pz)*(sj1));
IkReal x486=((IkReal(0.273000000000000))*(sj3));
IkReal x487=((cj0)*(cj1));
IkReal x488=((IkReal(0.139000000000000))*(x476));
IkReal x489=((IkReal(0.139000000000000))*(x475));
IkReal x490=((x475)*(x486));
IkReal x491=((x476)*(x478));
IkReal x492=((x476)*(x486));
IkReal x493=((x475)*(x478));
IkReal x494=((x488)+(x491));
IkReal x495=((x489)+(x492)+(x493));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x483)))+(((IkReal(-1.00000000000000))*(x495)))+(((cj0)*(x477)))+(((sj0)*(x479))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x490)))+(((IkReal(-1.00000000000000))*(sj1)*(x483)))+(((IkReal(-1.00000000000000))*(py)*(x481)))+(x494)+(((IkReal(-1.00000000000000))*(x482)*(x487))));
evalcond[2]=((((x484)*(x485)))+(((IkReal(-1.00000000000000))*(x494)))+(((r02)*(sj0)*(x477)))+(x490)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x479)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x480)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(sj0)*(x480)*(x485))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x495)))+(((pz)*(r00)*(x481)))+(((IkReal(-1.00000000000000))*(cj1)*(x483)*(x484)))+(((IkReal(-1.00000000000000))*(x479)*(x480)))+(((IkReal(-0.190000000000000))*(x484)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r02)*(x481)*(x482)))+(((py)*(r02)*(x487)))+(((r01)*(x477))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x496=((sj0)*(sj1));
IkReal x497=((cj0)*(sj1));
if( IKabs(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r01)*(x496)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(-190.000000000000))*(r00)*(x497)))+(((IkReal(1000.00000000000))*(px)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-5.00698342424961))*(px)*(x497)))+(((IkReal(-5.00698342424961))*(py)*(x496))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r01)*(x496)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(-190.000000000000))*(r00)*(x497)))+(((IkReal(1000.00000000000))*(px)*(r00)))))))+IKsqr(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-5.00698342424961))*(px)*(x497)))+(((IkReal(-5.00698342424961))*(py)*(x496)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r01)*(x496)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(-190.000000000000))*(r00)*(x497)))+(((IkReal(1000.00000000000))*(px)*(r00)))))), ((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-5.00698342424961))*(px)*(x497)))+(((IkReal(-5.00698342424961))*(py)*(x496)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x498=IKcos(j3);
IkReal x499=((r01)*(sj0));
IkReal x500=((IkReal(0.190000000000000))*(cj1));
IkReal x501=((py)*(r02));
IkReal x502=((IkReal(0.380000000000000))*(cj1));
IkReal x503=((r00)*(sj0));
IkReal x504=((cj0)*(r01));
IkReal x505=((IkReal(1.00000000000000))*(pz));
IkReal x506=((IkReal(1.00000000000000))*(pp));
IkReal x507=((cj0)*(r00));
IkReal x508=((IkReal(0.190000000000000))*(sj1));
IkReal x509=((IkReal(0.139000000000000))*(cj4));
IkReal x510=((IkReal(2.00000000000000))*(pz));
IkReal x511=((px)*(r02));
IkReal x512=((IkReal(2.00000000000000))*(px)*(py));
IkReal x513=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x514=((IkReal(0.0758940000000000))*(x498));
IkReal x515=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(pz)*(x502)))+(((IkReal(-1.00000000000000))*(x506)))+(((cj0)*(x515)))+(x514)+(((sj0)*(x513))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(r00)))+(((x507)*(x508)))+(((x509)*(IKsin(j3))))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((x499)*(x508)))+(((IkReal(-1.00000000000000))*(r02)*(x505)))+(((IkReal(-1.00000000000000))*(r02)*(x500))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x505)*(x507)))+(((IkReal(-1.00000000000000))*(x499)*(x500)))+(((IkReal(-1.00000000000000))*(x499)*(x505)))+(((cj0)*(x511)))+(((sj0)*(x501)))+(((IkReal(-0.273000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x498)*(x509)))+(((IkReal(-1.00000000000000))*(x500)*(x507)))+(((IkReal(-1.00000000000000))*(r02)*(x508))));
evalcond[3]=((((sj0)*(x510)*(x511)))+(((IkReal(2.00000000000000))*(x503)*((px)*(px))))+(((sj4)*(x514)))+(((IkReal(-1.00000000000000))*(r01)*(x515)))+(((IkReal(-1.00000000000000))*(cj0)*(x501)*(x510)))+(((pp)*(x504)))+(((pz)*(x502)*(x504)))+(((IkReal(0.0938500000000000))*(sj4)))+(((x499)*(x512)))+(((IkReal(0.0361000000000000))*(x504)))+(((IkReal(-2.00000000000000))*(x504)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x503)*(x506)))+(((IkReal(-0.0361000000000000))*(x503)))+(((IkReal(-1.00000000000000))*(pz)*(x502)*(x503)))+(((sj0)*(x502)*(x511)))+(((IkReal(-1.00000000000000))*(cj0)*(x501)*(x502)))+(((r00)*(x513)))+(((IkReal(-1.00000000000000))*(x507)*(x512))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x516=((IkReal(273.000000000000))*(cj4));
gconst2=IKsign(((((IkReal(-1.00000000000000))*(x516)*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x516)*((cj3)*(cj3))))+(((IkReal(-139.000000000000))*(cj3)*(cj4)))));
IkReal x517=((IkReal(1.96402877697842))*(cj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x517)*((cj3)*(cj3))))+(((IkReal(-1.00000000000000))*(x517)*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x518=((IkReal(0.0758940000000000))*(cj3));
IkReal x519=(py)*(py);
IkReal x520=(px)*(px);
IkReal x521=(pz)*(pz);
IkReal x522=((r01)*(sj0));
IkReal x523=((IkReal(2.00000000000000))*(px));
IkReal x524=((IkReal(0.190000000000000))*(cj1));
IkReal x525=((r00)*(sj1));
IkReal x526=((IkReal(0.0361000000000000))*(cj0));
IkReal x527=((py)*(r02));
IkReal x528=((cj0)*(cj1));
IkReal x529=((IkReal(0.380000000000000))*(pz));
IkReal x530=((pz)*(r02));
IkReal x531=((IkReal(2.00000000000000))*(sj0));
IkReal x532=((cj0)*(r01));
IkReal x533=((IkReal(0.380000000000000))*(py));
IkReal x534=((pz)*(sj1));
IkReal x535=((IkReal(1.00000000000000))*(sj0));
IkReal x536=((pp)*(r00));
IkReal x537=((IkReal(0.190000000000000))*(sj1));
IkReal x538=((IkReal(0.0361000000000000))*(sj1));
IkReal x539=((IkReal(2.00000000000000))*(cj0));
IkReal x540=((r00)*(sj0));
IkReal x541=((IkReal(1.00000000000000))*(r00));
IkReal x542=((cj1)*(r00));
IkReal x543=((cj1)*(r02));
IkReal x544=((cj0)*(r00));
IkReal x545=((cj0)*(sj1));
IkReal x546=((IkReal(0.380000000000000))*(px));
IkReal x547=((cj1)*(pz));
IkReal x548=((IkReal(1.00000000000000))*(pp));
IkReal x549=((cj0)*(r02));
IkReal x550=((py)*(r01));
IkReal x551=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x552=((r00)*(x520));
IkReal x553=((IkReal(2.00000000000000))*(x550));
IkReal x554=((IkReal(2.00000000000000))*(x519));
IkReal x555=((IkReal(2.00000000000000))*(x521));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x535)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x535)))+(x532));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x529)))+(((IkReal(-1.00000000000000))*(x548)))+(x518)+(((sj0)*(sj1)*(x533)))+(((x545)*(x546))));
evalcond[4]=((((cj0)*(x525)))+(((IkReal(-1.00000000000000))*(x543)))+(((sj1)*(x522))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x551)))+(((IkReal(-1.00000000000000))*(x528)*(x541)))+(((IkReal(-1.00000000000000))*(cj1)*(x522))));
evalcond[6]=((((x522)*(x537)))+(((IkReal(-1.00000000000000))*(x550)))+(((IkReal(-1.00000000000000))*(x530)))+(((IkReal(-1.00000000000000))*(px)*(x541)))+(((IkReal(-1.00000000000000))*(r02)*(x524)))+(((IkReal(0.190000000000000))*(cj0)*(x525))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x524)*(x544)))+(((sj0)*(x527)))+(((IkReal(-1.00000000000000))*(pz)*(x522)))+(((IkReal(-1.00000000000000))*(r02)*(x537)))+(((px)*(x549)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x541)))+(((IkReal(-1.00000000000000))*(x522)*(x524))));
evalcond[8]=((IkReal(0.0938500000000000))+(((IkReal(-0.380000000000000))*(x527)*(x528)))+(((pp)*(x532)))+(((IkReal(-1.00000000000000))*(x532)*(x554)))+(((py)*(x522)*(x523)))+(((sj0)*(x523)*(x530)))+(((IkReal(-1.00000000000000))*(pz)*(x527)*(x539)))+(((sj0)*(x543)*(x546)))+(((x531)*(x552)))+(((x525)*(x533)))+(x518)+(((IkReal(-1.00000000000000))*(cj1)*(x529)*(x540)))+(((IkReal(-1.00000000000000))*(x535)*(x536)))+(((IkReal(-0.0361000000000000))*(x540)))+(((IkReal(-1.00000000000000))*(py)*(x523)*(x544)))+(((r01)*(x526)))+(((r01)*(x528)*(x529)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x546))));
evalcond[9]=((((cj0)*(pp)*(x525)))+(((IkReal(-1.00000000000000))*(sj1)*(x522)*(x554)))+(((r02)*(x529)))+(((IkReal(-1.00000000000000))*(x525)*(x526)))+(((IkReal(-1.00000000000000))*(x527)*(x531)*(x534)))+(((pp)*(sj1)*(x522)))+(((IkReal(-1.00000000000000))*(x523)*(x530)*(x545)))+(((x547)*(x553)))+(((IkReal(-1.00000000000000))*(x520)*(x525)*(x539)))+(((x543)*(x555)))+(((pz)*(x523)*(x542)))+(((IkReal(0.0361000000000000))*(x543)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x523)*(x532)))+(((IkReal(-1.00000000000000))*(x522)*(x538)))+(((IkReal(-1.00000000000000))*(x543)*(x548)))+(((r00)*(x546)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x523)*(x525)))+(((r01)*(x533))));
evalcond[10]=((((IkReal(-0.0361000000000000))*(cj1)*(x522)))+(((IkReal(-1.00000000000000))*(x526)*(x542)))+(((IkReal(-1.00000000000000))*(x528)*(x536)))+(((r02)*(sj1)*(x555)))+(((cj1)*(x522)*(x554)))+(((cj1)*(py)*(x523)*(x540)))+(((IkReal(-1.00000000000000))*(x529)*(x544)))+(((IkReal(-1.00000000000000))*(cj1)*(x522)*(x548)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x548)))+(((IkReal(-1.00000000000000))*(r02)*(x538)))+(((x523)*(x528)*(x530)))+(((x534)*(x553)))+(((IkReal(0.380000000000000))*(sj0)*(x527)))+(((x523)*(x528)*(x550)))+(((pz)*(x523)*(x525)))+(((IkReal(-1.00000000000000))*(x522)*(x529)))+(((IkReal(2.00000000000000))*(x528)*(x552)))+(((x527)*(x531)*(x547)))+(((x546)*(x549))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x556=((cj1)*(py));
IkReal x557=((pz)*(sj1));
IkReal x558=((IkReal(139000.000000000))*(sj0));
IkReal x559=((IkReal(273000.000000000))*(cj3));
IkReal x560=((py)*(sj1));
IkReal x561=((IkReal(273000.000000000))*(sj3));
IkReal x562=((cj1)*(pz));
IkReal x563=((IkReal(139000.000000000))*(cj0));
IkReal x564=((cj0)*(r02));
IkReal x565=((r00)*(x561));
IkReal x566=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x567=((px)*(r02)*(sj1));
IkReal x568=((cj1)*(px)*(r01));
IkReal x569=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
Atan2Value<IkReal> x570 = IKatan2WithCheck(((gconst4)*(((((sj0)*(x560)*(x561)))+(((x559)*(x560)*(x564)))+(((IkReal(-1.00000000000000))*(x558)*(x567)))+(((IkReal(139000.000000000))*(r00)*(x556)))+(((r00)*(sj0)*(x557)*(x559)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-139000.000000000))*(x568)))+(((IkReal(-1.00000000000000))*(x559)*(x568)))+(((r00)*(x557)*(x558)))+(((IkReal(-1.00000000000000))*(r01)*(x557)*(x563)))+(((IkReal(-1.00000000000000))*(sj0)*(x559)*(x567)))+(((r02)*(x560)*(x563)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x557)*(x559)))+(((r00)*(x556)*(x559)))+(((IkReal(-1.00000000000000))*(x561)*(x562)))+(((cj0)*(px)*(sj1)*(x561)))))),((gconst4)*(((IkReal(-26410.0000000000))+(((px)*(sj1)*(x563)))+(((x558)*(x560)))+(((sj0)*(x561)*(x567)))+(((x561)*(x568)))+(((IkReal(-1.00000000000000))*(x556)*(x565)))+(((sj0)*(x559)*(x560)))+(((IkReal(-139000.000000000))*(x562)))+(((IkReal(-1.00000000000000))*(x559)*(x562)))+(((cj0)*(px)*(sj1)*(x559)))+(((cj0)*(r01)*(x557)*(x561)))+(((IkReal(-1.00000000000000))*(sj0)*(x557)*(x565)))+(((IkReal(-1.00000000000000))*(x560)*(x561)*(x564)))+(((IkReal(-51870.0000000000))*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x570.valid ) {
    continue;
}
j2array[0]=x570.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x571=IKcos(j2);
IkReal x572=IKsin(j2);
IkReal x573=((px)*(sj1));
IkReal x574=((IkReal(0.273000000000000))*(cj3));
IkReal x575=((py)*(sj1));
IkReal x576=((IkReal(1.00000000000000))*(r00));
IkReal x577=((cj1)*(sj0));
IkReal x578=((IkReal(1.00000000000000))*(px));
IkReal x579=((IkReal(1.00000000000000))*(pz));
IkReal x580=((cj0)*(r01));
IkReal x581=((pz)*(sj1));
IkReal x582=((IkReal(0.273000000000000))*(sj3));
IkReal x583=((cj0)*(cj1));
IkReal x584=((IkReal(0.139000000000000))*(x572));
IkReal x585=((IkReal(0.139000000000000))*(x571));
IkReal x586=((x572)*(x574));
IkReal x587=((x571)*(x582));
IkReal x588=((x572)*(x582));
IkReal x589=((x571)*(x574));
IkReal x590=((x584)+(x586));
IkReal x591=((x585)+(x588)+(x589));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x573)))+(((IkReal(-1.00000000000000))*(cj1)*(x579)))+(((IkReal(-1.00000000000000))*(x591)))+(((sj0)*(x575))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x578)*(x583)))+(((IkReal(-1.00000000000000))*(sj1)*(x579)))+(((IkReal(-1.00000000000000))*(py)*(x577)))+(x590)+(((IkReal(-1.00000000000000))*(x587))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x576)*(x581)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x575)))+(((x580)*(x581)))+(((r02)*(sj0)*(x573)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x576)))+(x590)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x587))));
evalcond[3]=((((py)*(r02)*(x583)))+(((r01)*(x573)))+(((IkReal(-1.00000000000000))*(r02)*(x577)*(x578)))+(((IkReal(-1.00000000000000))*(x575)*(x576)))+(x591)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(x579)*(x580)))+(((IkReal(-0.190000000000000))*(x580)))+(((pz)*(r00)*(x577))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x592=((IkReal(139000.000000000))*(cj1));
IkReal x593=((py)*(sj0));
IkReal x594=((cj0)*(px));
IkReal x595=((IkReal(273000.000000000))*(cj3));
IkReal x596=((IkReal(139000.000000000))*(sj1));
IkReal x597=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x598=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x599 = IKatan2WithCheck(((gconst3)*(((((pz)*(x597)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x596)))+(((IkReal(-1.00000000000000))*(x592)*(x594)))+(((IkReal(-1.00000000000000))*(x592)*(x593)))+(((IkReal(-1.00000000000000))*(x593)*(x598)))+(((IkReal(-1.00000000000000))*(x594)*(x598)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x595)))+(((IkReal(-1.00000000000000))*(cj1)*(x593)*(x595)))+(((IkReal(-1.00000000000000))*(cj1)*(x594)*(x595)))))),((gconst3)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x594)*(x595)))+(((IkReal(-1.00000000000000))*(sj1)*(x593)*(x595)))+(((x594)*(x597)))+(((pz)*(x598)))+(((pz)*(x592)))+(((cj1)*(pz)*(x595)))+(((IkReal(-1.00000000000000))*(x593)*(x596)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x594)*(x596)))+(((x593)*(x597)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x599.valid ) {
    continue;
}
j2array[0]=x599.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x600=IKcos(j2);
IkReal x601=IKsin(j2);
IkReal x602=((px)*(sj1));
IkReal x603=((IkReal(0.273000000000000))*(cj3));
IkReal x604=((py)*(sj1));
IkReal x605=((IkReal(1.00000000000000))*(r00));
IkReal x606=((cj1)*(sj0));
IkReal x607=((IkReal(1.00000000000000))*(px));
IkReal x608=((IkReal(1.00000000000000))*(pz));
IkReal x609=((cj0)*(r01));
IkReal x610=((pz)*(sj1));
IkReal x611=((IkReal(0.273000000000000))*(sj3));
IkReal x612=((cj0)*(cj1));
IkReal x613=((IkReal(0.139000000000000))*(x601));
IkReal x614=((IkReal(0.139000000000000))*(x600));
IkReal x615=((x601)*(x603));
IkReal x616=((x600)*(x611));
IkReal x617=((x601)*(x611));
IkReal x618=((x600)*(x603));
IkReal x619=((x615)+(x613));
IkReal x620=((x618)+(x614)+(x617));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x604)))+(((IkReal(-1.00000000000000))*(cj1)*(x608)))+(((IkReal(-1.00000000000000))*(x620)))+(((cj0)*(x602))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x606)))+(((IkReal(-1.00000000000000))*(sj1)*(x608)))+(((IkReal(-1.00000000000000))*(x607)*(x612)))+(((IkReal(-1.00000000000000))*(x616)))+(x619));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x604)))+(((IkReal(-1.00000000000000))*(sj0)*(x605)*(x610)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x605)))+(((IkReal(-1.00000000000000))*(x616)))+(x619)+(((x609)*(x610)))+(((cj1)*(px)*(r01)))+(((r02)*(sj0)*(x602))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x606)*(x607)))+(((IkReal(-1.00000000000000))*(x604)*(x605)))+(((py)*(r02)*(x612)))+(((pz)*(r00)*(x606)))+(x620)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x609)))+(((IkReal(-1.00000000000000))*(cj1)*(x608)*(x609)))+(((r01)*(x602))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x621=((IkReal(0.0758940000000000))*(cj3));
IkReal x622=(py)*(py);
IkReal x623=(px)*(px);
IkReal x624=(pz)*(pz);
IkReal x625=((r01)*(sj0));
IkReal x626=((IkReal(2.00000000000000))*(px));
IkReal x627=((IkReal(0.190000000000000))*(cj1));
IkReal x628=((r00)*(sj1));
IkReal x629=((IkReal(0.0361000000000000))*(cj0));
IkReal x630=((py)*(r02));
IkReal x631=((cj0)*(cj1));
IkReal x632=((IkReal(0.380000000000000))*(pz));
IkReal x633=((pz)*(r02));
IkReal x634=((IkReal(2.00000000000000))*(sj0));
IkReal x635=((cj0)*(r01));
IkReal x636=((IkReal(0.380000000000000))*(py));
IkReal x637=((pz)*(sj1));
IkReal x638=((IkReal(1.00000000000000))*(sj0));
IkReal x639=((pp)*(r00));
IkReal x640=((IkReal(0.190000000000000))*(sj1));
IkReal x641=((IkReal(0.0361000000000000))*(sj1));
IkReal x642=((IkReal(2.00000000000000))*(cj0));
IkReal x643=((r00)*(sj0));
IkReal x644=((IkReal(1.00000000000000))*(r00));
IkReal x645=((cj1)*(r00));
IkReal x646=((cj1)*(r02));
IkReal x647=((cj0)*(r00));
IkReal x648=((cj0)*(sj1));
IkReal x649=((IkReal(0.380000000000000))*(px));
IkReal x650=((cj1)*(pz));
IkReal x651=((IkReal(1.00000000000000))*(pp));
IkReal x652=((cj0)*(r02));
IkReal x653=((py)*(r01));
IkReal x654=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x655=((r00)*(x623));
IkReal x656=((IkReal(2.00000000000000))*(x653));
IkReal x657=((IkReal(2.00000000000000))*(x622));
IkReal x658=((IkReal(2.00000000000000))*(x624));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x638)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x638)))+(x635));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x632)))+(((x648)*(x649)))+(((sj0)*(sj1)*(x636)))+(((IkReal(-1.00000000000000))*(x651)))+(x621));
evalcond[4]=((((IkReal(-1.00000000000000))*(x646)))+(((cj0)*(x628)))+(((sj1)*(x625))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x625)))+(((IkReal(-1.00000000000000))*(x631)*(x644)))+(((IkReal(-1.00000000000000))*(x654))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x653)))+(((IkReal(-1.00000000000000))*(px)*(x644)))+(((IkReal(-1.00000000000000))*(r02)*(x627)))+(((IkReal(0.190000000000000))*(cj0)*(x628)))+(((x625)*(x640)))+(((IkReal(-1.00000000000000))*(x633))));
evalcond[7]=((((IkReal(-1.00000000000000))*(pz)*(x625)))+(((IkReal(-1.00000000000000))*(x627)*(x647)))+(((IkReal(-1.00000000000000))*(r02)*(x640)))+(((sj0)*(x630)))+(((px)*(x652)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x644)))+(((IkReal(-1.00000000000000))*(x625)*(x627))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((IkReal(-0.380000000000000))*(x630)*(x631)))+(((IkReal(-1.00000000000000))*(py)*(x626)*(x647)))+(((sj0)*(x646)*(x649)))+(((x628)*(x636)))+(((x634)*(x655)))+(((IkReal(-1.00000000000000))*(pz)*(x630)*(x642)))+(((pp)*(x635)))+(((IkReal(-1.00000000000000))*(x621)))+(((IkReal(-1.00000000000000))*(x638)*(x639)))+(((IkReal(-1.00000000000000))*(cj1)*(x632)*(x643)))+(((IkReal(-0.0361000000000000))*(x643)))+(((IkReal(-1.00000000000000))*(x635)*(x657)))+(((r01)*(x629)))+(((py)*(x625)*(x626)))+(((r01)*(x631)*(x632)))+(((sj0)*(x626)*(x633)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x649))));
evalcond[9]=((((r02)*(x632)))+(((pp)*(sj1)*(x625)))+(((x646)*(x658)))+(((IkReal(-1.00000000000000))*(x625)*(x641)))+(((IkReal(-1.00000000000000))*(x628)*(x629)))+(((IkReal(-1.00000000000000))*(x626)*(x633)*(x648)))+(((IkReal(-1.00000000000000))*(x646)*(x651)))+(((IkReal(-1.00000000000000))*(x623)*(x628)*(x642)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x626)*(x628)))+(((IkReal(-1.00000000000000))*(x630)*(x634)*(x637)))+(((pz)*(x626)*(x645)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x626)*(x635)))+(((r01)*(x636)))+(((IkReal(0.0361000000000000))*(x646)))+(((cj0)*(pp)*(x628)))+(((r00)*(x649)))+(((x650)*(x656)))+(((IkReal(-1.00000000000000))*(sj1)*(x625)*(x657))));
evalcond[10]=((((cj1)*(py)*(x626)*(x643)))+(((IkReal(-1.00000000000000))*(x629)*(x645)))+(((IkReal(2.00000000000000))*(x631)*(x655)))+(((x626)*(x631)*(x653)))+(((x649)*(x652)))+(((pz)*(x626)*(x628)))+(((x637)*(x656)))+(((cj1)*(x625)*(x657)))+(((IkReal(-1.00000000000000))*(r02)*(x641)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x651)))+(((IkReal(-1.00000000000000))*(x632)*(x647)))+(((x630)*(x634)*(x650)))+(((IkReal(-0.0361000000000000))*(cj1)*(x625)))+(((IkReal(-1.00000000000000))*(cj1)*(x625)*(x651)))+(((r02)*(sj1)*(x658)))+(((IkReal(-1.00000000000000))*(x631)*(x639)))+(((IkReal(-1.00000000000000))*(x625)*(x632)))+(((IkReal(0.380000000000000))*(sj0)*(x630)))+(((x626)*(x631)*(x633))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x659=((IkReal(273000.000000000))*(sj3));
IkReal x660=((pz)*(sj1));
IkReal x661=((IkReal(139000.000000000))*(sj0));
IkReal x662=((px)*(sj1));
IkReal x663=((r02)*(sj0));
IkReal x664=((IkReal(273000.000000000))*(cj3));
IkReal x665=((py)*(sj1));
IkReal x666=((cj1)*(pz));
IkReal x667=((IkReal(139000.000000000))*(cj0));
IkReal x668=((r00)*(sj0));
IkReal x669=((cj1)*(py)*(r00));
IkReal x670=((cj0)*(x664));
IkReal x671=((cj1)*(px)*(r01));
Atan2Value<IkReal> x672 = IKatan2WithCheck(((gconst6)*(((((IkReal(-1.00000000000000))*(r02)*(x665)*(x670)))+(((IkReal(-1.00000000000000))*(x659)*(x666)))+(((sj0)*(x659)*(x665)))+(((x664)*(x671)))+(((IkReal(-1.00000000000000))*(x660)*(x664)*(x668)))+(((r02)*(x661)*(x662)))+(((IkReal(-1.00000000000000))*(r00)*(x660)*(x661)))+(((IkReal(-139000.000000000))*(x669)))+(((IkReal(-51870.0000000000))*(sj3)))+(((r01)*(x660)*(x670)))+(((IkReal(-1.00000000000000))*(r02)*(x665)*(x667)))+(((x662)*(x663)*(x664)))+(((r01)*(x660)*(x667)))+(((IkReal(139000.000000000))*(x671)))+(((cj0)*(x659)*(x662)))+(((IkReal(-1.00000000000000))*(x664)*(x669)))))),((gconst6)*(((IkReal(-26410.0000000000))+(((cj0)*(r02)*(x659)*(x665)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x659)*(x660)))+(((x662)*(x670)))+(((x662)*(x667)))+(((IkReal(-1.00000000000000))*(x659)*(x671)))+(((IkReal(-139000.000000000))*(x666)))+(((x659)*(x660)*(x668)))+(((IkReal(-1.00000000000000))*(x659)*(x662)*(x663)))+(((x661)*(x665)))+(((x659)*(x669)))+(((IkReal(-1.00000000000000))*(x664)*(x666)))+(((IkReal(-51870.0000000000))*(cj3)))+(((sj0)*(x664)*(x665)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x672.valid ) {
    continue;
}
j2array[0]=x672.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x673=IKcos(j2);
IkReal x674=IKsin(j2);
IkReal x675=((px)*(sj1));
IkReal x676=((IkReal(0.273000000000000))*(cj3));
IkReal x677=((py)*(sj1));
IkReal x678=((IkReal(1.00000000000000))*(r00));
IkReal x679=((cj1)*(sj0));
IkReal x680=((IkReal(1.00000000000000))*(px));
IkReal x681=((IkReal(1.00000000000000))*(pz));
IkReal x682=((cj0)*(r01));
IkReal x683=((pz)*(sj1));
IkReal x684=((IkReal(0.273000000000000))*(sj3));
IkReal x685=((cj0)*(cj1));
IkReal x686=((IkReal(0.139000000000000))*(x674));
IkReal x687=((IkReal(0.139000000000000))*(x673));
IkReal x688=((x673)*(x684));
IkReal x689=((x674)*(x676));
IkReal x690=((x674)*(x684));
IkReal x691=((x673)*(x676));
IkReal x692=((x689)+(x686));
IkReal x693=((x687)+(x690)+(x691));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x675)))+(((IkReal(-1.00000000000000))*(cj1)*(x681)))+(((IkReal(-1.00000000000000))*(x693)))+(((sj0)*(x677))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x680)*(x685)))+(((IkReal(-1.00000000000000))*(x688)))+(((IkReal(-1.00000000000000))*(py)*(x679)))+(((IkReal(-1.00000000000000))*(sj1)*(x681)))+(x692));
evalcond[2]=((((x682)*(x683)))+(((r02)*(sj0)*(x675)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x677)))+(((IkReal(-1.00000000000000))*(sj0)*(x678)*(x683)))+(x688)+(((IkReal(-1.00000000000000))*(x692)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x678))));
evalcond[3]=((((py)*(r02)*(x685)))+(((r01)*(x675)))+(((pz)*(r00)*(x679)))+(((IkReal(-1.00000000000000))*(r02)*(x679)*(x680)))+(((IkReal(-0.190000000000000))*(x682)))+(((IkReal(-1.00000000000000))*(cj1)*(x681)*(x682)))+(((IkReal(-1.00000000000000))*(x693)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x677)*(x678))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x694=((IkReal(139000.000000000))*(cj1));
IkReal x695=((py)*(sj0));
IkReal x696=((cj0)*(px));
IkReal x697=((IkReal(273000.000000000))*(cj3));
IkReal x698=((IkReal(139000.000000000))*(sj1));
IkReal x699=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x700=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x701 = IKatan2WithCheck(((gconst5)*(((((IkReal(-1.00000000000000))*(cj1)*(x696)*(x697)))+(((pz)*(x699)))+(((IkReal(-1.00000000000000))*(x695)*(x700)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x696)*(x700)))+(((IkReal(-1.00000000000000))*(pz)*(x698)))+(((IkReal(-1.00000000000000))*(x694)*(x696)))+(((IkReal(-1.00000000000000))*(x694)*(x695)))+(((IkReal(-1.00000000000000))*(cj1)*(x695)*(x697)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x697)))))),((gconst5)*(((IkReal(26410.0000000000))+(((x695)*(x699)))+(((IkReal(-1.00000000000000))*(x696)*(x698)))+(((x696)*(x699)))+(((pz)*(x694)))+(((cj1)*(pz)*(x697)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x695)*(x698)))+(((IkReal(-1.00000000000000))*(sj1)*(x696)*(x697)))+(((IkReal(-1.00000000000000))*(sj1)*(x695)*(x697)))+(((pz)*(x700)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x701.valid ) {
    continue;
}
j2array[0]=x701.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x702=IKcos(j2);
IkReal x703=IKsin(j2);
IkReal x704=((px)*(sj1));
IkReal x705=((IkReal(0.273000000000000))*(cj3));
IkReal x706=((py)*(sj1));
IkReal x707=((IkReal(1.00000000000000))*(r00));
IkReal x708=((cj1)*(sj0));
IkReal x709=((IkReal(1.00000000000000))*(px));
IkReal x710=((IkReal(1.00000000000000))*(pz));
IkReal x711=((cj0)*(r01));
IkReal x712=((pz)*(sj1));
IkReal x713=((IkReal(0.273000000000000))*(sj3));
IkReal x714=((cj0)*(cj1));
IkReal x715=((IkReal(0.139000000000000))*(x703));
IkReal x716=((IkReal(0.139000000000000))*(x702));
IkReal x717=((x702)*(x713));
IkReal x718=((x703)*(x705));
IkReal x719=((x703)*(x713));
IkReal x720=((x702)*(x705));
IkReal x721=((x718)+(x715));
IkReal x722=((x719)+(x716)+(x720));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x704)))+(((IkReal(-1.00000000000000))*(x722)))+(((IkReal(-1.00000000000000))*(cj1)*(x710)))+(((sj0)*(x706))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x709)*(x714)))+(((IkReal(-1.00000000000000))*(x717)))+(((IkReal(-1.00000000000000))*(py)*(x708)))+(x721)+(((IkReal(-1.00000000000000))*(sj1)*(x710))));
evalcond[2]=((((r02)*(sj0)*(x704)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x707)))+(((x711)*(x712)))+(((IkReal(-1.00000000000000))*(x721)))+(((IkReal(-1.00000000000000))*(sj0)*(x707)*(x712)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x706)))+(x717)+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x711)))+(((IkReal(-1.00000000000000))*(x706)*(x707)))+(((IkReal(-1.00000000000000))*(cj1)*(x710)*(x711)))+(((r01)*(x704)))+(((IkReal(-1.00000000000000))*(r02)*(x708)*(x709)))+(((py)*(r02)*(x714)))+(((pz)*(r00)*(x708)))+(((IkReal(-1.00000000000000))*(x722)))+(((IkReal(0.190000000000000))*(r00)*(sj0))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x723=((IkReal(0.0758940000000000))*(cj3));
IkReal x724=(py)*(py);
IkReal x725=(px)*(px);
IkReal x726=(pz)*(pz);
IkReal x727=((r01)*(sj0));
IkReal x728=((IkReal(2.00000000000000))*(px));
IkReal x729=((IkReal(0.190000000000000))*(cj1));
IkReal x730=((r00)*(sj1));
IkReal x731=((IkReal(0.0361000000000000))*(cj0));
IkReal x732=((py)*(r02));
IkReal x733=((cj0)*(cj1));
IkReal x734=((IkReal(0.380000000000000))*(pz));
IkReal x735=((pz)*(r02));
IkReal x736=((IkReal(2.00000000000000))*(sj0));
IkReal x737=((cj0)*(r01));
IkReal x738=((IkReal(0.380000000000000))*(py));
IkReal x739=((pz)*(sj1));
IkReal x740=((IkReal(1.00000000000000))*(sj0));
IkReal x741=((pp)*(r00));
IkReal x742=((IkReal(0.190000000000000))*(sj1));
IkReal x743=((IkReal(0.0361000000000000))*(sj1));
IkReal x744=((IkReal(2.00000000000000))*(cj0));
IkReal x745=((r00)*(sj0));
IkReal x746=((IkReal(1.00000000000000))*(r00));
IkReal x747=((cj1)*(r00));
IkReal x748=((cj1)*(r02));
IkReal x749=((cj0)*(r00));
IkReal x750=((cj0)*(sj1));
IkReal x751=((IkReal(0.380000000000000))*(px));
IkReal x752=((cj1)*(pz));
IkReal x753=((IkReal(1.00000000000000))*(pp));
IkReal x754=((cj0)*(r02));
IkReal x755=((py)*(r01));
IkReal x756=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x757=((r00)*(x725));
IkReal x758=((IkReal(2.00000000000000))*(x755));
IkReal x759=((IkReal(2.00000000000000))*(x724));
IkReal x760=((IkReal(2.00000000000000))*(x726));
evalcond[0]=IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x740)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x740)))+(x737));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x734)))+(x723)+(((x750)*(x751)))+(((sj0)*(sj1)*(x738)))+(((IkReal(-1.00000000000000))*(x753))));
evalcond[4]=((((cj0)*(x730)))+(((IkReal(-1.00000000000000))*(x748)))+(((sj1)*(x727))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x727)))+(((IkReal(-1.00000000000000))*(x733)*(x746)))+(((IkReal(-1.00000000000000))*(x756))));
evalcond[6]=((((IkReal(-1.00000000000000))*(px)*(x746)))+(((IkReal(-1.00000000000000))*(r02)*(x729)))+(((IkReal(-1.00000000000000))*(x735)))+(((IkReal(0.190000000000000))*(cj0)*(x730)))+(((IkReal(-1.00000000000000))*(x755)))+(((x727)*(x742))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x727)*(x729)))+(((IkReal(-1.00000000000000))*(x729)*(x749)))+(((px)*(x754)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x746)))+(((IkReal(-1.00000000000000))*(r02)*(x742)))+(((IkReal(-1.00000000000000))*(pz)*(x727)))+(((sj0)*(x732))));
evalcond[8]=((IkReal(0.0938500000000000))+(((IkReal(-0.380000000000000))*(x732)*(x733)))+(((sj0)*(x748)*(x751)))+(((x736)*(x757)))+(((sj0)*(x728)*(x735)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x751)))+(((r01)*(x733)*(x734)))+(((IkReal(-1.00000000000000))*(x737)*(x759)))+(((r01)*(x731)))+(((IkReal(-1.00000000000000))*(py)*(x728)*(x749)))+(((IkReal(-0.0361000000000000))*(x745)))+(((pp)*(x737)))+(((IkReal(-1.00000000000000))*(x740)*(x741)))+(x723)+(((py)*(x727)*(x728)))+(((IkReal(-1.00000000000000))*(cj1)*(x734)*(x745)))+(((IkReal(-1.00000000000000))*(pz)*(x732)*(x744)))+(((x730)*(x738))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x728)*(x735)*(x750)))+(((x752)*(x758)))+(((IkReal(0.0361000000000000))*(x748)))+(((IkReal(-1.00000000000000))*(sj1)*(x727)*(x759)))+(((IkReal(-1.00000000000000))*(x727)*(x743)))+(((r01)*(x738)))+(((pz)*(x728)*(x747)))+(((r00)*(x751)))+(((pp)*(sj1)*(x727)))+(((IkReal(-1.00000000000000))*(x730)*(x731)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x728)*(x730)))+(((IkReal(-1.00000000000000))*(x725)*(x730)*(x744)))+(((r02)*(x734)))+(((cj0)*(pp)*(x730)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x728)*(x737)))+(((IkReal(-1.00000000000000))*(x748)*(x753)))+(((x748)*(x760)))+(((IkReal(-1.00000000000000))*(x732)*(x736)*(x739))));
evalcond[10]=((((r02)*(sj1)*(x760)))+(((IkReal(0.380000000000000))*(sj0)*(x732)))+(((x739)*(x758)))+(((x728)*(x733)*(x735)))+(((IkReal(-1.00000000000000))*(x727)*(x734)))+(((pz)*(x728)*(x730)))+(((x751)*(x754)))+(((cj1)*(x727)*(x759)))+(((IkReal(2.00000000000000))*(x733)*(x757)))+(((x728)*(x733)*(x755)))+(((IkReal(-0.0361000000000000))*(cj1)*(x727)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x753)))+(((cj1)*(py)*(x728)*(x745)))+(((IkReal(-1.00000000000000))*(x731)*(x747)))+(((IkReal(-1.00000000000000))*(cj1)*(x727)*(x753)))+(((IkReal(-1.00000000000000))*(r02)*(x743)))+(((IkReal(-1.00000000000000))*(x734)*(x749)))+(((x732)*(x736)*(x752)))+(((IkReal(-1.00000000000000))*(x733)*(x741))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x761=((cj1)*(py));
IkReal x762=((pz)*(sj1));
IkReal x763=((IkReal(139000.000000000))*(sj0));
IkReal x764=((IkReal(273000.000000000))*(cj3));
IkReal x765=((py)*(sj1));
IkReal x766=((IkReal(273000.000000000))*(sj3));
IkReal x767=((cj1)*(pz));
IkReal x768=((IkReal(139000.000000000))*(r01));
IkReal x769=((cj0)*(r02));
IkReal x770=((cj1)*(px));
IkReal x771=((r00)*(x766));
IkReal x772=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x773=((px)*(r02)*(sj1));
IkReal x774=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
Atan2Value<IkReal> x775 = IKatan2WithCheck(((gconst8)*(((((r00)*(x761)*(x764)))+(((IkReal(-1.00000000000000))*(x768)*(x770)))+(((r00)*(x762)*(x763)))+(((sj0)*(x765)*(x766)))+(((x764)*(x765)*(x769)))+(((IkReal(-1.00000000000000))*(sj0)*(x764)*(x773)))+(((IkReal(-1.00000000000000))*(x766)*(x767)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(139000.000000000))*(x765)*(x769)))+(((IkReal(-1.00000000000000))*(x763)*(x773)))+(((IkReal(-1.00000000000000))*(cj0)*(x762)*(x768)))+(((IkReal(139000.000000000))*(r00)*(x761)))+(((IkReal(-1.00000000000000))*(r01)*(x764)*(x770)))+(((cj0)*(px)*(sj1)*(x766)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x762)*(x764)))+(((r00)*(sj0)*(x762)*(x764)))))),((gconst8)*(((IkReal(-26410.0000000000))+(((r01)*(x766)*(x770)))+(((cj0)*(r01)*(x762)*(x766)))+(((IkReal(-1.00000000000000))*(x765)*(x766)*(x769)))+(((sj0)*(x766)*(x773)))+(((IkReal(-1.00000000000000))*(x764)*(x767)))+(((x763)*(x765)))+(((IkReal(139000.000000000))*(cj0)*(px)*(sj1)))+(((IkReal(-139000.000000000))*(x767)))+(((IkReal(-1.00000000000000))*(x761)*(x771)))+(((IkReal(-51870.0000000000))*(cj3)))+(((sj0)*(x764)*(x765)))+(((cj0)*(px)*(sj1)*(x764)))+(((IkReal(-1.00000000000000))*(sj0)*(x762)*(x771)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x775.valid ) {
    continue;
}
j2array[0]=x775.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x776=IKcos(j2);
IkReal x777=IKsin(j2);
IkReal x778=((px)*(sj1));
IkReal x779=((IkReal(0.273000000000000))*(cj3));
IkReal x780=((py)*(sj1));
IkReal x781=((IkReal(1.00000000000000))*(r00));
IkReal x782=((cj1)*(sj0));
IkReal x783=((IkReal(1.00000000000000))*(px));
IkReal x784=((IkReal(1.00000000000000))*(pz));
IkReal x785=((cj0)*(r01));
IkReal x786=((pz)*(sj1));
IkReal x787=((IkReal(0.273000000000000))*(sj3));
IkReal x788=((cj0)*(cj1));
IkReal x789=((IkReal(0.139000000000000))*(x777));
IkReal x790=((IkReal(0.139000000000000))*(x776));
IkReal x791=((x777)*(x779));
IkReal x792=((x776)*(x787));
IkReal x793=((x777)*(x787));
IkReal x794=((x776)*(x779));
IkReal x795=((x791)+(x789));
IkReal x796=((x790)+(x793)+(x794));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x796)))+(((sj0)*(x780)))+(((IkReal(-1.00000000000000))*(cj1)*(x784)))+(((cj0)*(x778))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x792)))+(x795)+(((IkReal(-1.00000000000000))*(py)*(x782)))+(((IkReal(-1.00000000000000))*(sj1)*(x784)))+(((IkReal(-1.00000000000000))*(x783)*(x788))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x781)))+(((IkReal(-1.00000000000000))*(x792)))+(((x785)*(x786)))+(((IkReal(-1.00000000000000))*(sj0)*(x781)*(x786)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x780)))+(((r02)*(sj0)*(x778)))+(x795)+(((cj1)*(px)*(r01))));
evalcond[3]=((((py)*(r02)*(x788)))+(((IkReal(-1.00000000000000))*(r02)*(x782)*(x783)))+(((IkReal(-0.190000000000000))*(x785)))+(((IkReal(-1.00000000000000))*(cj1)*(x784)*(x785)))+(((pz)*(r00)*(x782)))+(((r01)*(x778)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(x796)+(((IkReal(-1.00000000000000))*(x780)*(x781))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x797=((IkReal(139000.000000000))*(cj1));
IkReal x798=((py)*(sj0));
IkReal x799=((cj0)*(px));
IkReal x800=((IkReal(273000.000000000))*(cj3));
IkReal x801=((IkReal(139000.000000000))*(sj1));
IkReal x802=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x803=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x804 = IKatan2WithCheck(((gconst7)*(((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x800)))+(((IkReal(-1.00000000000000))*(x798)*(x803)))+(((IkReal(-1.00000000000000))*(cj1)*(x799)*(x800)))+(((IkReal(-1.00000000000000))*(x799)*(x803)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x797)*(x799)))+(((IkReal(-1.00000000000000))*(x797)*(x798)))+(((pz)*(x802)))+(((IkReal(-1.00000000000000))*(cj1)*(x798)*(x800)))+(((IkReal(-1.00000000000000))*(pz)*(x801)))))),((gconst7)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x798)*(x800)))+(((IkReal(-1.00000000000000))*(sj1)*(x799)*(x800)))+(((IkReal(-1.00000000000000))*(x798)*(x801)))+(((IkReal(-1.00000000000000))*(x799)*(x801)))+(((pz)*(x797)))+(((x798)*(x802)))+(((IkReal(51870.0000000000))*(cj3)))+(((x799)*(x802)))+(((pz)*(x803)))+(((cj1)*(pz)*(x800)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x804.valid ) {
    continue;
}
j2array[0]=x804.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x805=IKcos(j2);
IkReal x806=IKsin(j2);
IkReal x807=((px)*(sj1));
IkReal x808=((IkReal(0.273000000000000))*(cj3));
IkReal x809=((py)*(sj1));
IkReal x810=((IkReal(1.00000000000000))*(r00));
IkReal x811=((cj1)*(sj0));
IkReal x812=((IkReal(1.00000000000000))*(px));
IkReal x813=((IkReal(1.00000000000000))*(pz));
IkReal x814=((cj0)*(r01));
IkReal x815=((pz)*(sj1));
IkReal x816=((IkReal(0.273000000000000))*(sj3));
IkReal x817=((cj0)*(cj1));
IkReal x818=((IkReal(0.139000000000000))*(x806));
IkReal x819=((IkReal(0.139000000000000))*(x805));
IkReal x820=((x806)*(x808));
IkReal x821=((x805)*(x816));
IkReal x822=((x806)*(x816));
IkReal x823=((x805)*(x808));
IkReal x824=((x818)+(x820));
IkReal x825=((x819)+(x823)+(x822));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x825)))+(((sj0)*(x809)))+(((cj0)*(x807)))+(((IkReal(-1.00000000000000))*(cj1)*(x813))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x812)*(x817)))+(((IkReal(-1.00000000000000))*(x821)))+(((IkReal(-1.00000000000000))*(py)*(x811)))+(x824)+(((IkReal(-1.00000000000000))*(sj1)*(x813))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x810)*(x815)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x810)))+(((IkReal(-1.00000000000000))*(x821)))+(((x814)*(x815)))+(((r02)*(sj0)*(x807)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x809)))+(x824)+(((cj1)*(px)*(r01))));
evalcond[3]=((((py)*(r02)*(x817)))+(((IkReal(-1.00000000000000))*(cj1)*(x813)*(x814)))+(((IkReal(-1.00000000000000))*(x809)*(x810)))+(((IkReal(-1.00000000000000))*(r02)*(x811)*(x812)))+(((IkReal(-0.190000000000000))*(x814)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((r01)*(x807)))+(x825)+(((pz)*(r00)*(x811))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x826=((IkReal(0.0758940000000000))*(cj3));
IkReal x827=(py)*(py);
IkReal x828=(px)*(px);
IkReal x829=(pz)*(pz);
IkReal x830=((r01)*(sj0));
IkReal x831=((IkReal(2.00000000000000))*(px));
IkReal x832=((IkReal(0.190000000000000))*(cj1));
IkReal x833=((r00)*(sj1));
IkReal x834=((IkReal(0.0361000000000000))*(cj0));
IkReal x835=((py)*(r02));
IkReal x836=((cj0)*(cj1));
IkReal x837=((IkReal(0.380000000000000))*(pz));
IkReal x838=((pz)*(r02));
IkReal x839=((IkReal(2.00000000000000))*(sj0));
IkReal x840=((cj0)*(r01));
IkReal x841=((IkReal(0.380000000000000))*(py));
IkReal x842=((pz)*(sj1));
IkReal x843=((IkReal(1.00000000000000))*(sj0));
IkReal x844=((pp)*(r00));
IkReal x845=((IkReal(0.190000000000000))*(sj1));
IkReal x846=((IkReal(0.0361000000000000))*(sj1));
IkReal x847=((IkReal(2.00000000000000))*(cj0));
IkReal x848=((r00)*(sj0));
IkReal x849=((IkReal(1.00000000000000))*(r00));
IkReal x850=((cj1)*(r00));
IkReal x851=((cj1)*(r02));
IkReal x852=((cj0)*(r00));
IkReal x853=((cj0)*(sj1));
IkReal x854=((IkReal(0.380000000000000))*(px));
IkReal x855=((cj1)*(pz));
IkReal x856=((IkReal(1.00000000000000))*(pp));
IkReal x857=((cj0)*(r02));
IkReal x858=((py)*(r01));
IkReal x859=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x860=((r00)*(x828));
IkReal x861=((IkReal(2.00000000000000))*(x858));
IkReal x862=((IkReal(2.00000000000000))*(x827));
IkReal x863=((IkReal(2.00000000000000))*(x829));
evalcond[0]=IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x843)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(x840)+(((IkReal(-1.00000000000000))*(r00)*(x843))));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(x856)))+(x826)+(((sj0)*(sj1)*(x841)))+(((x853)*(x854)))+(((IkReal(-1.00000000000000))*(cj1)*(x837))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x851)))+(((cj0)*(x833)))+(((sj1)*(x830))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x859)))+(((IkReal(-1.00000000000000))*(x836)*(x849)))+(((IkReal(-1.00000000000000))*(cj1)*(x830))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r02)*(x832)))+(((IkReal(-1.00000000000000))*(x858)))+(((IkReal(-1.00000000000000))*(px)*(x849)))+(((IkReal(0.190000000000000))*(cj0)*(x833)))+(((x830)*(x845)))+(((IkReal(-1.00000000000000))*(x838))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r02)*(x845)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x849)))+(((IkReal(-1.00000000000000))*(x830)*(x832)))+(((IkReal(-1.00000000000000))*(x832)*(x852)))+(((px)*(x857)))+(((IkReal(-1.00000000000000))*(pz)*(x830)))+(((sj0)*(x835))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((r01)*(x836)*(x837)))+(((sj0)*(x831)*(x838)))+(((IkReal(-0.380000000000000))*(x835)*(x836)))+(((x833)*(x841)))+(((IkReal(-1.00000000000000))*(pz)*(x835)*(x847)))+(((IkReal(-1.00000000000000))*(x826)))+(((sj0)*(x851)*(x854)))+(((IkReal(-1.00000000000000))*(x843)*(x844)))+(((r01)*(x834)))+(((pp)*(x840)))+(((x839)*(x860)))+(((IkReal(-0.0361000000000000))*(x848)))+(((IkReal(-1.00000000000000))*(x840)*(x862)))+(((py)*(x830)*(x831)))+(((IkReal(-1.00000000000000))*(py)*(x831)*(x852)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x854)))+(((IkReal(-1.00000000000000))*(cj1)*(x837)*(x848))));
evalcond[9]=((((IkReal(-1.00000000000000))*(py)*(sj1)*(x831)*(x840)))+(((IkReal(-1.00000000000000))*(x835)*(x839)*(x842)))+(((IkReal(0.0361000000000000))*(x851)))+(((r00)*(x854)))+(((pp)*(sj1)*(x830)))+(((cj0)*(pp)*(x833)))+(((r02)*(x837)))+(((IkReal(-1.00000000000000))*(x833)*(x834)))+(((x855)*(x861)))+(((x851)*(x863)))+(((IkReal(-1.00000000000000))*(x830)*(x846)))+(((IkReal(-1.00000000000000))*(sj1)*(x830)*(x862)))+(((r01)*(x841)))+(((IkReal(-1.00000000000000))*(x828)*(x833)*(x847)))+(((pz)*(x831)*(x850)))+(((IkReal(-1.00000000000000))*(x831)*(x838)*(x853)))+(((IkReal(-1.00000000000000))*(x851)*(x856)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x831)*(x833))));
evalcond[10]=((((pz)*(x831)*(x833)))+(((x835)*(x839)*(x855)))+(((IkReal(-0.0361000000000000))*(cj1)*(x830)))+(((IkReal(-1.00000000000000))*(r02)*(x846)))+(((cj1)*(py)*(x831)*(x848)))+(((IkReal(-1.00000000000000))*(x834)*(x850)))+(((cj1)*(x830)*(x862)))+(((x842)*(x861)))+(((IkReal(0.380000000000000))*(sj0)*(x835)))+(((x831)*(x836)*(x838)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x856)))+(((IkReal(-1.00000000000000))*(x830)*(x837)))+(((IkReal(-1.00000000000000))*(cj1)*(x830)*(x856)))+(((r02)*(sj1)*(x863)))+(((x854)*(x857)))+(((IkReal(-1.00000000000000))*(x836)*(x844)))+(((IkReal(2.00000000000000))*(x836)*(x860)))+(((x831)*(x836)*(x858)))+(((IkReal(-1.00000000000000))*(x837)*(x852))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x864=((IkReal(273000.000000000))*(sj3));
IkReal x865=((IkReal(273000.000000000))*(cj3));
IkReal x866=((pz)*(r00));
IkReal x867=((px)*(r02));
IkReal x868=((sj0)*(sj1));
IkReal x869=((cj1)*(pz));
IkReal x870=((cj1)*(py)*(r00));
IkReal x871=((IkReal(139000.000000000))*(x868));
IkReal x872=((cj0)*(px)*(sj1));
IkReal x873=((cj1)*(px)*(r01));
IkReal x874=((cj0)*(pz)*(r01)*(sj1));
IkReal x875=((cj0)*(py)*(r02)*(sj1));
Atan2Value<IkReal> x876 = IKatan2WithCheck(((gconst10)*(((((x867)*(x871)))+(((x865)*(x867)*(x868)))+(((IkReal(139000.000000000))*(x873)))+(((IkReal(139000.000000000))*(x874)))+(((IkReal(-1.00000000000000))*(x866)*(x871)))+(((IkReal(-139000.000000000))*(x870)))+(((IkReal(-139000.000000000))*(x875)))+(((py)*(x864)*(x868)))+(((IkReal(-1.00000000000000))*(x864)*(x869)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x865)*(x866)*(x868)))+(((x864)*(x872)))+(((x865)*(x874)))+(((x865)*(x873)))+(((IkReal(-1.00000000000000))*(x865)*(x870)))+(((IkReal(-1.00000000000000))*(x865)*(x875)))))),((gconst10)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x864)*(x867)*(x868)))+(((IkReal(-1.00000000000000))*(x865)*(x869)))+(((IkReal(-139000.000000000))*(x869)))+(((IkReal(139000.000000000))*(x872)))+(((x864)*(x866)*(x868)))+(((IkReal(-1.00000000000000))*(x864)*(x873)))+(((IkReal(-1.00000000000000))*(x864)*(x874)))+(((py)*(x865)*(x868)))+(((py)*(x871)))+(((x864)*(x870)))+(((x864)*(x875)))+(((x865)*(x872)))+(((IkReal(-51870.0000000000))*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x876.valid ) {
    continue;
}
j2array[0]=x876.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x877=IKcos(j2);
IkReal x878=IKsin(j2);
IkReal x879=((px)*(sj1));
IkReal x880=((IkReal(0.273000000000000))*(cj3));
IkReal x881=((py)*(sj1));
IkReal x882=((IkReal(1.00000000000000))*(r00));
IkReal x883=((cj1)*(sj0));
IkReal x884=((IkReal(1.00000000000000))*(px));
IkReal x885=((IkReal(1.00000000000000))*(pz));
IkReal x886=((cj0)*(r01));
IkReal x887=((pz)*(sj1));
IkReal x888=((IkReal(0.273000000000000))*(sj3));
IkReal x889=((cj0)*(cj1));
IkReal x890=((IkReal(0.139000000000000))*(x878));
IkReal x891=((IkReal(0.139000000000000))*(x877));
IkReal x892=((x877)*(x888));
IkReal x893=((x878)*(x880));
IkReal x894=((x878)*(x888));
IkReal x895=((x877)*(x880));
IkReal x896=((x893)+(x890));
IkReal x897=((x894)+(x895)+(x891));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x881)))+(((IkReal(-1.00000000000000))*(x897)))+(((IkReal(-1.00000000000000))*(cj1)*(x885)))+(((cj0)*(x879))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x892)))+(((IkReal(-1.00000000000000))*(py)*(x883)))+(x896)+(((IkReal(-1.00000000000000))*(sj1)*(x885)))+(((IkReal(-1.00000000000000))*(x884)*(x889))));
evalcond[2]=((((x886)*(x887)))+(((IkReal(-1.00000000000000))*(sj0)*(x882)*(x887)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x881)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x882)))+(((IkReal(-1.00000000000000))*(x896)))+(((r02)*(sj0)*(x879)))+(x892)+(((cj1)*(px)*(r01))));
evalcond[3]=((((r01)*(x879)))+(((py)*(r02)*(x889)))+(((IkReal(-1.00000000000000))*(x897)))+(((IkReal(-1.00000000000000))*(x881)*(x882)))+(((IkReal(-0.190000000000000))*(x886)))+(((IkReal(-1.00000000000000))*(cj1)*(x885)*(x886)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r02)*(x883)*(x884)))+(((pz)*(r00)*(x883))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x898=((IkReal(139000.000000000))*(cj1));
IkReal x899=((py)*(sj0));
IkReal x900=((cj0)*(px));
IkReal x901=((IkReal(273000.000000000))*(cj3));
IkReal x902=((IkReal(139000.000000000))*(sj1));
IkReal x903=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x904=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x905 = IKatan2WithCheck(((gconst9)*(((((IkReal(-1.00000000000000))*(x900)*(x904)))+(((IkReal(-1.00000000000000))*(x898)*(x899)))+(((IkReal(-1.00000000000000))*(pz)*(x902)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x901)))+(((IkReal(-1.00000000000000))*(cj1)*(x900)*(x901)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x898)*(x900)))+(((IkReal(-1.00000000000000))*(cj1)*(x899)*(x901)))+(((pz)*(x903)))+(((IkReal(-1.00000000000000))*(x899)*(x904)))))),((gconst9)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(x900)*(x902)))+(((IkReal(-1.00000000000000))*(sj1)*(x900)*(x901)))+(((IkReal(-1.00000000000000))*(sj1)*(x899)*(x901)))+(((pz)*(x898)))+(((x900)*(x903)))+(((x899)*(x903)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x901)))+(((pz)*(x904)))+(((IkReal(-1.00000000000000))*(x899)*(x902)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x905.valid ) {
    continue;
}
j2array[0]=x905.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x906=IKcos(j2);
IkReal x907=IKsin(j2);
IkReal x908=((px)*(sj1));
IkReal x909=((IkReal(0.273000000000000))*(cj3));
IkReal x910=((py)*(sj1));
IkReal x911=((IkReal(1.00000000000000))*(r00));
IkReal x912=((cj1)*(sj0));
IkReal x913=((IkReal(1.00000000000000))*(px));
IkReal x914=((IkReal(1.00000000000000))*(pz));
IkReal x915=((cj0)*(r01));
IkReal x916=((pz)*(sj1));
IkReal x917=((IkReal(0.273000000000000))*(sj3));
IkReal x918=((cj0)*(cj1));
IkReal x919=((IkReal(0.139000000000000))*(x907));
IkReal x920=((IkReal(0.139000000000000))*(x906));
IkReal x921=((x906)*(x917));
IkReal x922=((x907)*(x909));
IkReal x923=((x907)*(x917));
IkReal x924=((x906)*(x909));
IkReal x925=((x922)+(x919));
IkReal x926=((x924)+(x923)+(x920));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x926)))+(((cj0)*(x908)))+(((IkReal(-1.00000000000000))*(cj1)*(x914)))+(((sj0)*(x910))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x921)))+(((IkReal(-1.00000000000000))*(x913)*(x918)))+(((IkReal(-1.00000000000000))*(sj1)*(x914)))+(((IkReal(-1.00000000000000))*(py)*(x912)))+(x925));
evalcond[2]=((((IkReal(-1.00000000000000))*(x925)))+(((IkReal(-1.00000000000000))*(sj0)*(x911)*(x916)))+(((r02)*(sj0)*(x908)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x910)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x911)))+(((x915)*(x916)))+(((cj1)*(px)*(r01)))+(x921));
evalcond[3]=((((IkReal(-1.00000000000000))*(x926)))+(((r01)*(x908)))+(((IkReal(-0.190000000000000))*(x915)))+(((IkReal(-1.00000000000000))*(x910)*(x911)))+(((IkReal(-1.00000000000000))*(r02)*(x912)*(x913)))+(((py)*(r02)*(x918)))+(((IkReal(-1.00000000000000))*(cj1)*(x914)*(x915)))+(((pz)*(r00)*(x912)))+(((IkReal(0.190000000000000))*(r00)*(sj0))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x927=((IkReal(139.000000000000))*(sj1));
IkReal x928=((cj0)*(r00));
IkReal x929=((IkReal(1000.00000000000))*(cj4));
IkReal x930=((cj1)*(cj3));
IkReal x931=((IkReal(273.000000000000))*(r02));
IkReal x932=((cj1)*(sj3));
IkReal x933=((IkReal(190.000000000000))*(cj4));
IkReal x934=((IkReal(273.000000000000))*(r01));
IkReal x935=((cj3)*(sj1));
IkReal x936=((cj0)*(px));
IkReal x937=((sj1)*(sj3));
IkReal x938=((sj0)*(x937));
Atan2Value<IkReal> x939 = IKatan2WithCheck(((gconst2)*(((((IkReal(-1.00000000000000))*(x929)*(x936)*(x937)))+(((IkReal(-1.00000000000000))*(x930)*(x931)))+(((pz)*(x929)*(x932)))+(((x927)*(x928)))+(((sj0)*(x934)*(x935)))+(((r01)*(sj0)*(x927)))+(((IkReal(273.000000000000))*(x928)*(x935)))+(((IkReal(-1.00000000000000))*(py)*(x929)*(x938)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))+(((sj3)*(x933)))))),((gconst2)*(((((pz)*(x929)*(x930)))+(((IkReal(-273.000000000000))*(x928)*(x937)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x929)*(x935)))+(((IkReal(-1.00000000000000))*(x934)*(x938)))+(((x931)*(x932)))+(((cj3)*(x933)))+(((IkReal(-1.00000000000000))*(x929)*(x935)*(x936)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x939.valid ) {
    continue;
}
j2array[0]=x939.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x940=IKcos(j2);
IkReal x941=IKsin(j2);
IkReal x942=(pz)*(pz);
IkReal x943=(py)*(py);
IkReal x944=(px)*(px);
IkReal x945=((px)*(sj1));
IkReal x946=((sj0)*(sj1));
IkReal x947=((IkReal(0.0552080000000000))*(sj3));
IkReal x948=((pp)*(r01));
IkReal x949=((cj1)*(sj0));
IkReal x950=((pz)*(r01));
IkReal x951=((IkReal(0.380000000000000))*(sj0));
IkReal x952=((IkReal(1.00000000000000))*(sj1));
IkReal x953=((py)*(r00));
IkReal x954=((pz)*(r02));
IkReal x955=((IkReal(2.00000000000000))*(cj0));
IkReal x956=((IkReal(2.00000000000000))*(py));
IkReal x957=((pz)*(r00));
IkReal x958=((pp)*(r02));
IkReal x959=((IkReal(1.00000000000000))*(cj1));
IkReal x960=((cj0)*(r00));
IkReal x961=((IkReal(0.0361000000000000))*(cj1));
IkReal x962=((py)*(r02));
IkReal x963=((IkReal(0.0361000000000000))*(r01));
IkReal x964=((IkReal(0.0361000000000000))*(sj1));
IkReal x965=((py)*(r01));
IkReal x966=((IkReal(2.00000000000000))*(px));
IkReal x967=((cj1)*(px));
IkReal x968=((IkReal(0.0938500000000000))*(cj3));
IkReal x969=((IkReal(0.380000000000000))*(cj0));
IkReal x970=((px)*(r02));
IkReal x971=((cj4)*(x941));
IkReal x972=((cj4)*(x940));
IkReal x973=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x974=((IkReal(0.139000000000000))*(x941));
IkReal x975=((IkReal(0.139000000000000))*(x940));
IkReal x976=((r00)*(x944));
IkReal x977=((IkReal(0.273000000000000))*(x940));
IkReal x978=((IkReal(0.273000000000000))*(cj3)*(x941));
IkReal x979=((x954)*(x956));
IkReal x980=((IkReal(2.00000000000000))*(r01)*(x943));
IkReal x981=((IkReal(2.00000000000000))*(r02)*(x942));
evalcond[0]=((((r01)*(x946)))+(((sj1)*(x960)))+(((IkReal(-1.00000000000000))*(sj3)*(x972)))+(((cj3)*(x971)))+(((IkReal(-1.00000000000000))*(r02)*(x959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(x949)))+(((IkReal(-1.00000000000000))*(x959)*(x960)))+(((cj3)*(x972)))+(((IkReal(-1.00000000000000))*(r02)*(x952)))+(((sj3)*(x971))));
evalcond[2]=((IkReal(-0.190000000000000))+(((cj0)*(x945)))+(((IkReal(-1.00000000000000))*(pz)*(x959)))+(((IkReal(-0.273000000000000))*(sj3)*(x941)))+(((IkReal(-1.00000000000000))*(cj3)*(x977)))+(((py)*(x946)))+(((IkReal(-1.00000000000000))*(x975))));
evalcond[3]=((((IkReal(-1.00000000000000))*(pz)*(x952)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x959)))+(((IkReal(-1.00000000000000))*(py)*(x949)))+(((IkReal(-1.00000000000000))*(sj3)*(x977)))+(x974)+(x978));
evalcond[4]=((((r02)*(sj0)*(x945)))+(((IkReal(-1.00000000000000))*(x940)*(x973)))+(((IkReal(-1.00000000000000))*(x946)*(x957)))+(((cj0)*(sj1)*(x950)))+(((IkReal(-1.00000000000000))*(cj0)*(x952)*(x962)))+(((sj4)*(x978)))+(((sj4)*(x974)))+(((r01)*(x967)))+(((IkReal(-1.00000000000000))*(x953)*(x959))));
evalcond[5]=((((cj0)*(cj1)*(x962)))+(((x949)*(x957)))+(((sj4)*(x975)))+(((IkReal(-1.00000000000000))*(x949)*(x970)))+(((cj3)*(sj4)*(x977)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((r01)*(x945)))+(((x941)*(x973)))+(((IkReal(-1.00000000000000))*(cj0)*(x950)*(x959)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x952)*(x953))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x960)*(x964)))+(((IkReal(-1.00000000000000))*(x945)*(x954)*(x955)))+(((cj1)*(x957)*(x966)))+(((IkReal(0.0758940000000000))*(x971)))+(((x946)*(x948)))+(((cj1)*(x981)))+(((cj1)*(x950)*(x956)))+(((IkReal(-1.00000000000000))*(x947)*(x972)))+(((IkReal(-1.00000000000000))*(x946)*(x980)))+(((x968)*(x971)))+(((IkReal(0.380000000000000))*(x954)))+(((IkReal(-1.00000000000000))*(x946)*(x979)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(sj1)*(x955)*(x976)))+(((IkReal(0.380000000000000))*(x965)))+(((IkReal(-1.00000000000000))*(x946)*(x963)))+(((IkReal(-1.00000000000000))*(x958)*(x959)))+(((pp)*(sj1)*(x960)))+(((r02)*(x961)))+(((IkReal(-2.00000000000000))*(sj0)*(x945)*(x953)))+(((IkReal(-1.00000000000000))*(x945)*(x955)*(x965))));
evalcond[7]=((((x969)*(x970)))+(((x955)*(x965)*(x967)))+(((IkReal(-1.00000000000000))*(x960)*(x961)))+(((x951)*(x962)))+(((IkReal(0.0758940000000000))*(x972)))+(((sj1)*(x950)*(x956)))+(((cj1)*(x955)*(x976)))+(((x954)*(x955)*(x967)))+(((sj1)*(x981)))+(((x947)*(x971)))+(((x968)*(x972)))+(((IkReal(-1.00000000000000))*(x948)*(x949)))+(((x949)*(x979)))+(((x949)*(x953)*(x966)))+(((x949)*(x980)))+(((IkReal(-1.00000000000000))*(x957)*(x969)))+(((IkReal(-1.00000000000000))*(x950)*(x951)))+(((IkReal(-1.00000000000000))*(pp)*(x959)*(x960)))+(((IkReal(2.00000000000000))*(x945)*(x957)))+(((IkReal(-1.00000000000000))*(x949)*(x963)))+(((IkReal(-1.00000000000000))*(x952)*(x958)))+(((IkReal(-1.00000000000000))*(r02)*(x964))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x982=((IkReal(1.00000000000000))*(sj1));
IkReal x983=((cj1)*(sj3));
IkReal x984=((cj0)*(r00));
IkReal x985=((cj3)*(r02));
IkReal x986=((r01)*(sj0));
IkReal x987=((sj1)*(sj3));
IkReal x988=((cj3)*(x986));
Atan2Value<IkReal> x989 = IKatan2WithCheck(((gconst1)*(((((x983)*(x986)))+(((x983)*(x984)))+(((cj1)*(x985)))+(((IkReal(-1.00000000000000))*(x982)*(x988)))+(((IkReal(-1.00000000000000))*(cj3)*(x982)*(x984)))+(((r02)*(x987)))))),((gconst1)*(((((IkReal(-1.00000000000000))*(r02)*(x983)))+(((cj1)*(x988)))+(((x986)*(x987)))+(((sj1)*(x985)))+(((cj1)*(cj3)*(x984)))+(((x984)*(x987)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x989.valid ) {
    continue;
}
j2array[0]=x989.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x990=IKcos(j2);
IkReal x991=IKsin(j2);
IkReal x992=(pz)*(pz);
IkReal x993=(py)*(py);
IkReal x994=(px)*(px);
IkReal x995=((px)*(sj1));
IkReal x996=((sj0)*(sj1));
IkReal x997=((IkReal(0.0552080000000000))*(sj3));
IkReal x998=((pp)*(r01));
IkReal x999=((cj1)*(sj0));
IkReal x1000=((pz)*(r01));
IkReal x1001=((IkReal(0.380000000000000))*(sj0));
IkReal x1002=((IkReal(1.00000000000000))*(sj1));
IkReal x1003=((py)*(r00));
IkReal x1004=((pz)*(r02));
IkReal x1005=((IkReal(2.00000000000000))*(cj0));
IkReal x1006=((IkReal(2.00000000000000))*(py));
IkReal x1007=((pz)*(r00));
IkReal x1008=((pp)*(r02));
IkReal x1009=((IkReal(1.00000000000000))*(cj1));
IkReal x1010=((cj0)*(r00));
IkReal x1011=((IkReal(0.0361000000000000))*(cj1));
IkReal x1012=((py)*(r02));
IkReal x1013=((IkReal(0.0361000000000000))*(r01));
IkReal x1014=((IkReal(0.0361000000000000))*(sj1));
IkReal x1015=((py)*(r01));
IkReal x1016=((IkReal(2.00000000000000))*(px));
IkReal x1017=((cj1)*(px));
IkReal x1018=((IkReal(0.0938500000000000))*(cj3));
IkReal x1019=((IkReal(0.380000000000000))*(cj0));
IkReal x1020=((px)*(r02));
IkReal x1021=((cj4)*(x991));
IkReal x1022=((cj4)*(x990));
IkReal x1023=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x1024=((IkReal(0.139000000000000))*(x991));
IkReal x1025=((IkReal(0.139000000000000))*(x990));
IkReal x1026=((r00)*(x994));
IkReal x1027=((IkReal(0.273000000000000))*(x990));
IkReal x1028=((IkReal(0.273000000000000))*(cj3)*(x991));
IkReal x1029=((x1004)*(x1006));
IkReal x1030=((IkReal(2.00000000000000))*(r01)*(x993));
IkReal x1031=((IkReal(2.00000000000000))*(r02)*(x992));
evalcond[0]=((((r01)*(x996)))+(((sj1)*(x1010)))+(((IkReal(-1.00000000000000))*(r02)*(x1009)))+(((IkReal(-1.00000000000000))*(sj3)*(x1022)))+(((cj3)*(x1021))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1009)*(x1010)))+(((IkReal(-1.00000000000000))*(r01)*(x999)))+(((IkReal(-1.00000000000000))*(r02)*(x1002)))+(((sj3)*(x1021)))+(((cj3)*(x1022))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x1009)))+(((py)*(x996)))+(((IkReal(-1.00000000000000))*(x1025)))+(((IkReal(-1.00000000000000))*(cj3)*(x1027)))+(((cj0)*(x995)))+(((IkReal(-0.273000000000000))*(sj3)*(x991))));
evalcond[3]=((((IkReal(-1.00000000000000))*(pz)*(x1002)))+(x1024)+(x1028)+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1009)))+(((IkReal(-1.00000000000000))*(py)*(x999)))+(((IkReal(-1.00000000000000))*(sj3)*(x1027))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1023)*(x990)))+(((IkReal(-1.00000000000000))*(cj0)*(x1002)*(x1012)))+(((IkReal(-1.00000000000000))*(x1007)*(x996)))+(((cj0)*(sj1)*(x1000)))+(((sj4)*(x1024)))+(((sj4)*(x1028)))+(((r02)*(sj0)*(x995)))+(((r01)*(x1017)))+(((IkReal(-1.00000000000000))*(x1003)*(x1009))));
evalcond[5]=((((r01)*(x995)))+(((x1023)*(x991)))+(((cj3)*(sj4)*(x1027)))+(((sj4)*(x1025)))+(((x1007)*(x999)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((IkReal(-1.00000000000000))*(x1002)*(x1003)))+(((IkReal(-1.00000000000000))*(x1020)*(x999)))+(((IkReal(-1.00000000000000))*(cj0)*(x1000)*(x1009)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj0)*(cj1)*(x1012))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1022)*(x997)))+(((IkReal(-1.00000000000000))*(x1005)*(x1015)*(x995)))+(((IkReal(-1.00000000000000))*(x1010)*(x1014)))+(((IkReal(-1.00000000000000))*(sj1)*(x1005)*(x1026)))+(((IkReal(-1.00000000000000))*(x1030)*(x996)))+(((IkReal(0.0758940000000000))*(x1021)))+(((IkReal(-1.00000000000000))*(x1008)*(x1009)))+(((r02)*(x1011)))+(((cj1)*(x1007)*(x1016)))+(((cj1)*(x1000)*(x1006)))+(((IkReal(-2.00000000000000))*(sj0)*(x1003)*(x995)))+(((IkReal(-1.00000000000000))*(x1004)*(x1005)*(x995)))+(((IkReal(0.380000000000000))*(x1004)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(0.380000000000000))*(x1015)))+(((IkReal(-1.00000000000000))*(x1013)*(x996)))+(((x1018)*(x1021)))+(((pp)*(sj1)*(x1010)))+(((x996)*(x998)))+(((cj1)*(x1031)))+(((IkReal(-1.00000000000000))*(x1029)*(x996))));
evalcond[7]=((((x1005)*(x1015)*(x1017)))+(((IkReal(-1.00000000000000))*(pp)*(x1009)*(x1010)))+(((x1021)*(x997)))+(((IkReal(-1.00000000000000))*(x1010)*(x1011)))+(((x1029)*(x999)))+(((x1030)*(x999)))+(((IkReal(0.0758940000000000))*(x1022)))+(((cj1)*(x1005)*(x1026)))+(((IkReal(-1.00000000000000))*(r02)*(x1014)))+(((sj1)*(x1031)))+(((IkReal(-1.00000000000000))*(x1013)*(x999)))+(((x1018)*(x1022)))+(((x1019)*(x1020)))+(((x1001)*(x1012)))+(((IkReal(-1.00000000000000))*(x1002)*(x1008)))+(((sj1)*(x1000)*(x1006)))+(((IkReal(-1.00000000000000))*(x1007)*(x1019)))+(((x1004)*(x1005)*(x1017)))+(((IkReal(-1.00000000000000))*(x1000)*(x1001)))+(((IkReal(2.00000000000000))*(x1007)*(x995)))+(((IkReal(-1.00000000000000))*(x998)*(x999)))+(((x1003)*(x1016)*(x999))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1032=((IkReal(1000.00000000000))*(r02));
IkReal x1033=((IkReal(1000.00000000000))*(r00));
IkReal x1034=((IkReal(1000.00000000000))*(r01));
IkReal x1035=((IkReal(190.000000000000))*(r02));
IkReal x1036=((IkReal(190.000000000000))*(r01)*(sj0));
IkReal x1037=((IkReal(190.000000000000))*(cj0)*(r00));
Atan2Value<IkReal> x1038 = IKatan2WithCheck(((gconst0)*(((((px)*(x1033)))+(((py)*(x1034)))+(((IkReal(-1.00000000000000))*(sj1)*(x1036)))+(((IkReal(-1.00000000000000))*(sj1)*(x1037)))+(((pz)*(x1032)))+(((cj1)*(x1035)))))),((gconst0)*(((((py)*(sj0)*(x1032)))+(((cj0)*(px)*(x1032)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x1033)))+(((IkReal(-1.00000000000000))*(sj1)*(x1035)))+(((IkReal(-1.00000000000000))*(cj1)*(x1037)))+(((IkReal(-1.00000000000000))*(cj1)*(x1036)))+(((IkReal(-273.000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x1034)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1038.valid ) {
    continue;
}
j3array[0]=x1038.value;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1039=IKcos(j3);
IkReal x1040=((r01)*(sj0));
IkReal x1041=((IkReal(0.190000000000000))*(cj1));
IkReal x1042=((py)*(r02));
IkReal x1043=((IkReal(0.380000000000000))*(cj1));
IkReal x1044=((r00)*(sj0));
IkReal x1045=((cj0)*(r01));
IkReal x1046=((IkReal(1.00000000000000))*(pz));
IkReal x1047=((IkReal(1.00000000000000))*(pp));
IkReal x1048=((cj0)*(r00));
IkReal x1049=((IkReal(0.190000000000000))*(sj1));
IkReal x1050=((IkReal(0.139000000000000))*(cj4));
IkReal x1051=((IkReal(2.00000000000000))*(pz));
IkReal x1052=((px)*(r02));
IkReal x1053=((IkReal(2.00000000000000))*(px)*(py));
IkReal x1054=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x1055=((IkReal(0.0758940000000000))*(x1039));
IkReal x1056=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(x1055)+(((cj0)*(x1056)))+(((sj0)*(x1054)))+(((IkReal(-1.00000000000000))*(pz)*(x1043)))+(((IkReal(-1.00000000000000))*(x1047))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x1046)))+(((IkReal(-1.00000000000000))*(r02)*(x1041)))+(((IkReal(-1.00000000000000))*(px)*(r00)))+(((x1050)*(IKsin(j3))))+(((x1040)*(x1049)))+(((x1048)*(x1049)))+(((IkReal(-1.00000000000000))*(py)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x1049)))+(((IkReal(-1.00000000000000))*(x1046)*(x1048)))+(((cj0)*(x1052)))+(((IkReal(-1.00000000000000))*(x1039)*(x1050)))+(((sj0)*(x1042)))+(((IkReal(-1.00000000000000))*(x1041)*(x1048)))+(((IkReal(-1.00000000000000))*(x1040)*(x1046)))+(((IkReal(-1.00000000000000))*(x1040)*(x1041)))+(((IkReal(-0.273000000000000))*(cj4))));
evalcond[3]=((((IkReal(-1.00000000000000))*(pz)*(x1043)*(x1044)))+(((IkReal(-1.00000000000000))*(r01)*(x1056)))+(((pz)*(x1043)*(x1045)))+(((IkReal(-1.00000000000000))*(cj0)*(x1042)*(x1051)))+(((IkReal(-1.00000000000000))*(x1044)*(x1047)))+(((IkReal(-1.00000000000000))*(cj0)*(x1042)*(x1043)))+(((IkReal(-0.0361000000000000))*(x1044)))+(((IkReal(0.0938500000000000))*(sj4)))+(((x1040)*(x1053)))+(((sj0)*(x1051)*(x1052)))+(((IkReal(-2.00000000000000))*(x1045)*((py)*(py))))+(((sj0)*(x1043)*(x1052)))+(((r00)*(x1054)))+(((IkReal(0.0361000000000000))*(x1045)))+(((IkReal(2.00000000000000))*(x1044)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x1048)*(x1053)))+(((pp)*(x1045)))+(((sj4)*(x1055))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x1057=((IkReal(273.000000000000))*(cj4));
gconst2=IKsign(((((IkReal(-1.00000000000000))*(x1057)*((sj3)*(sj3))))+(((IkReal(-139.000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x1057)*((cj3)*(cj3))))));
IkReal x1058=((IkReal(1.96402877697842))*(cj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj3)*(cj4)))+(((IkReal(-1.00000000000000))*(x1058)*((cj3)*(cj3))))+(((IkReal(-1.00000000000000))*(x1058)*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x1059=((IkReal(0.0758940000000000))*(cj3));
IkReal x1060=(py)*(py);
IkReal x1061=(px)*(px);
IkReal x1062=(pz)*(pz);
IkReal x1063=((r01)*(sj0));
IkReal x1064=((IkReal(2.00000000000000))*(px));
IkReal x1065=((IkReal(0.190000000000000))*(cj1));
IkReal x1066=((r00)*(sj1));
IkReal x1067=((IkReal(0.0361000000000000))*(cj0));
IkReal x1068=((py)*(r02));
IkReal x1069=((cj0)*(cj1));
IkReal x1070=((IkReal(0.380000000000000))*(pz));
IkReal x1071=((pz)*(r02));
IkReal x1072=((IkReal(2.00000000000000))*(sj0));
IkReal x1073=((cj0)*(r01));
IkReal x1074=((IkReal(0.380000000000000))*(py));
IkReal x1075=((pz)*(sj1));
IkReal x1076=((IkReal(1.00000000000000))*(sj0));
IkReal x1077=((pp)*(r00));
IkReal x1078=((IkReal(0.190000000000000))*(sj1));
IkReal x1079=((IkReal(0.0361000000000000))*(sj1));
IkReal x1080=((IkReal(2.00000000000000))*(cj0));
IkReal x1081=((r00)*(sj0));
IkReal x1082=((IkReal(1.00000000000000))*(r00));
IkReal x1083=((cj1)*(r00));
IkReal x1084=((cj1)*(r02));
IkReal x1085=((cj0)*(r00));
IkReal x1086=((cj0)*(sj1));
IkReal x1087=((IkReal(0.380000000000000))*(px));
IkReal x1088=((cj1)*(pz));
IkReal x1089=((IkReal(1.00000000000000))*(pp));
IkReal x1090=((cj0)*(r02));
IkReal x1091=((py)*(r01));
IkReal x1092=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x1093=((r00)*(x1061));
IkReal x1094=((IkReal(2.00000000000000))*(x1091));
IkReal x1095=((IkReal(2.00000000000000))*(x1060));
IkReal x1096=((IkReal(2.00000000000000))*(x1062));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x1076)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(x1073)+(((IkReal(-1.00000000000000))*(r00)*(x1076))));
evalcond[3]=((IkReal(0.0577500000000000))+(x1059)+(((IkReal(-1.00000000000000))*(cj1)*(x1070)))+(((sj0)*(sj1)*(x1074)))+(((x1086)*(x1087)))+(((IkReal(-1.00000000000000))*(x1089))));
evalcond[4]=((((cj0)*(x1066)))+(((IkReal(-1.00000000000000))*(x1084)))+(((sj1)*(x1063))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x1063)))+(((IkReal(-1.00000000000000))*(x1092)))+(((IkReal(-1.00000000000000))*(x1069)*(x1082))));
evalcond[6]=((((IkReal(0.190000000000000))*(cj0)*(x1066)))+(((IkReal(-1.00000000000000))*(r02)*(x1065)))+(((IkReal(-1.00000000000000))*(x1091)))+(((x1063)*(x1078)))+(((IkReal(-1.00000000000000))*(x1071)))+(((IkReal(-1.00000000000000))*(px)*(x1082))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x1063)*(x1065)))+(((IkReal(-1.00000000000000))*(x1065)*(x1085)))+(((IkReal(-1.00000000000000))*(r02)*(x1078)))+(((IkReal(-1.00000000000000))*(pz)*(x1063)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x1082)))+(((sj0)*(x1068)))+(((px)*(x1090))));
evalcond[8]=((IkReal(0.0938500000000000))+(((IkReal(-1.00000000000000))*(x1073)*(x1095)))+(((IkReal(-0.0361000000000000))*(x1081)))+(((r01)*(x1069)*(x1070)))+(((IkReal(-1.00000000000000))*(py)*(x1064)*(x1085)))+(x1059)+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1087)))+(((IkReal(-1.00000000000000))*(x1076)*(x1077)))+(((x1066)*(x1074)))+(((x1072)*(x1093)))+(((IkReal(-0.380000000000000))*(x1068)*(x1069)))+(((IkReal(-1.00000000000000))*(pz)*(x1068)*(x1080)))+(((IkReal(-1.00000000000000))*(cj1)*(x1070)*(x1081)))+(((py)*(x1063)*(x1064)))+(((r01)*(x1067)))+(((sj0)*(x1064)*(x1071)))+(((pp)*(x1073)))+(((sj0)*(x1084)*(x1087))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x1063)*(x1079)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x1064)*(x1073)))+(((x1084)*(x1096)))+(((IkReal(-1.00000000000000))*(x1064)*(x1071)*(x1086)))+(((cj0)*(pp)*(x1066)))+(((r00)*(x1087)))+(((IkReal(0.0361000000000000))*(x1084)))+(((IkReal(-1.00000000000000))*(x1061)*(x1066)*(x1080)))+(((IkReal(-1.00000000000000))*(sj1)*(x1063)*(x1095)))+(((x1088)*(x1094)))+(((pz)*(x1064)*(x1083)))+(((IkReal(-1.00000000000000))*(x1068)*(x1072)*(x1075)))+(((IkReal(-1.00000000000000))*(x1066)*(x1067)))+(((IkReal(-1.00000000000000))*(x1084)*(x1089)))+(((r01)*(x1074)))+(((pp)*(sj1)*(x1063)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1064)*(x1066)))+(((r02)*(x1070))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x1063)*(x1070)))+(((x1087)*(x1090)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x1089)))+(((x1064)*(x1069)*(x1071)))+(((IkReal(-1.00000000000000))*(r02)*(x1079)))+(((IkReal(-1.00000000000000))*(x1067)*(x1083)))+(((x1068)*(x1072)*(x1088)))+(((IkReal(-1.00000000000000))*(x1069)*(x1077)))+(((cj1)*(py)*(x1064)*(x1081)))+(((cj1)*(x1063)*(x1095)))+(((x1064)*(x1069)*(x1091)))+(((IkReal(0.380000000000000))*(sj0)*(x1068)))+(((IkReal(-0.0361000000000000))*(cj1)*(x1063)))+(((pz)*(x1064)*(x1066)))+(((IkReal(2.00000000000000))*(x1069)*(x1093)))+(((r02)*(sj1)*(x1096)))+(((IkReal(-1.00000000000000))*(cj1)*(x1063)*(x1089)))+(((IkReal(-1.00000000000000))*(x1070)*(x1085)))+(((x1075)*(x1094))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1097=((cj1)*(py));
IkReal x1098=((pz)*(sj1));
IkReal x1099=((IkReal(139000.000000000))*(sj0));
IkReal x1100=((IkReal(273000.000000000))*(cj3));
IkReal x1101=((py)*(sj1));
IkReal x1102=((IkReal(273000.000000000))*(sj3));
IkReal x1103=((cj1)*(pz));
IkReal x1104=((IkReal(139000.000000000))*(cj0));
IkReal x1105=((cj0)*(r02));
IkReal x1106=((r00)*(x1102));
IkReal x1107=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x1108=((px)*(r02)*(sj1));
IkReal x1109=((cj1)*(px)*(r01));
IkReal x1110=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
Atan2Value<IkReal> x1111 = IKatan2WithCheck(((gconst4)*(((((r00)*(sj0)*(x1098)*(x1100)))+(((r00)*(x1098)*(x1099)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x1098)*(x1100)))+(((r02)*(x1101)*(x1104)))+(((IkReal(-51870.0000000000))*(sj3)))+(((r00)*(x1097)*(x1100)))+(((x1100)*(x1101)*(x1105)))+(((cj0)*(px)*(sj1)*(x1102)))+(((IkReal(139000.000000000))*(r00)*(x1097)))+(((IkReal(-1.00000000000000))*(x1099)*(x1108)))+(((IkReal(-1.00000000000000))*(x1100)*(x1109)))+(((IkReal(-1.00000000000000))*(r01)*(x1098)*(x1104)))+(((IkReal(-1.00000000000000))*(sj0)*(x1100)*(x1108)))+(((IkReal(-1.00000000000000))*(x1102)*(x1103)))+(((IkReal(-139000.000000000))*(x1109)))+(((sj0)*(x1101)*(x1102)))))),((gconst4)*(((IkReal(-26410.0000000000))+(((sj0)*(x1100)*(x1101)))+(((x1102)*(x1109)))+(((IkReal(-1.00000000000000))*(sj0)*(x1098)*(x1106)))+(((x1099)*(x1101)))+(((cj0)*(px)*(sj1)*(x1100)))+(((sj0)*(x1102)*(x1108)))+(((IkReal(-1.00000000000000))*(x1100)*(x1103)))+(((IkReal(-1.00000000000000))*(x1101)*(x1102)*(x1105)))+(((IkReal(-1.00000000000000))*(x1097)*(x1106)))+(((px)*(sj1)*(x1104)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-139000.000000000))*(x1103)))+(((cj0)*(r01)*(x1098)*(x1102)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1111.valid ) {
    continue;
}
j2array[0]=x1111.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1112=IKcos(j2);
IkReal x1113=IKsin(j2);
IkReal x1114=((px)*(sj1));
IkReal x1115=((IkReal(0.273000000000000))*(cj3));
IkReal x1116=((py)*(sj1));
IkReal x1117=((IkReal(1.00000000000000))*(r00));
IkReal x1118=((cj1)*(sj0));
IkReal x1119=((IkReal(1.00000000000000))*(px));
IkReal x1120=((IkReal(1.00000000000000))*(pz));
IkReal x1121=((cj0)*(r01));
IkReal x1122=((pz)*(sj1));
IkReal x1123=((IkReal(0.273000000000000))*(sj3));
IkReal x1124=((cj0)*(cj1));
IkReal x1125=((IkReal(0.139000000000000))*(x1113));
IkReal x1126=((IkReal(0.139000000000000))*(x1112));
IkReal x1127=((x1113)*(x1115));
IkReal x1128=((x1112)*(x1123));
IkReal x1129=((x1113)*(x1123));
IkReal x1130=((x1112)*(x1115));
IkReal x1131=((x1125)+(x1127));
IkReal x1132=((x1129)+(x1126)+(x1130));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x1120)))+(((IkReal(-1.00000000000000))*(x1132)))+(((sj0)*(x1116)))+(((cj0)*(x1114))));
evalcond[1]=((x1131)+(((IkReal(-1.00000000000000))*(sj1)*(x1120)))+(((IkReal(-1.00000000000000))*(x1128)))+(((IkReal(-1.00000000000000))*(x1119)*(x1124)))+(((IkReal(-1.00000000000000))*(py)*(x1118))));
evalcond[2]=((x1131)+(((x1121)*(x1122)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1117)))+(((r02)*(sj0)*(x1114)))+(((IkReal(-1.00000000000000))*(x1128)))+(((IkReal(-1.00000000000000))*(sj0)*(x1117)*(x1122)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1116)))+(((cj1)*(px)*(r01))));
evalcond[3]=((x1132)+(((IkReal(-0.190000000000000))*(x1121)))+(((IkReal(-1.00000000000000))*(x1116)*(x1117)))+(((IkReal(-1.00000000000000))*(r02)*(x1118)*(x1119)))+(((IkReal(-1.00000000000000))*(cj1)*(x1120)*(x1121)))+(((r01)*(x1114)))+(((pz)*(r00)*(x1118)))+(((py)*(r02)*(x1124)))+(((IkReal(0.190000000000000))*(r00)*(sj0))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1133=((IkReal(139000.000000000))*(cj1));
IkReal x1134=((py)*(sj0));
IkReal x1135=((cj0)*(px));
IkReal x1136=((IkReal(273000.000000000))*(cj3));
IkReal x1137=((IkReal(139000.000000000))*(sj1));
IkReal x1138=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x1139=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x1140 = IKatan2WithCheck(((gconst3)*(((((IkReal(-1.00000000000000))*(cj1)*(x1135)*(x1136)))+(((IkReal(51870.0000000000))*(sj3)))+(((pz)*(x1138)))+(((IkReal(-1.00000000000000))*(pz)*(x1137)))+(((IkReal(-1.00000000000000))*(x1134)*(x1139)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1136)))+(((IkReal(-1.00000000000000))*(x1135)*(x1139)))+(((IkReal(-1.00000000000000))*(cj1)*(x1134)*(x1136)))+(((IkReal(-1.00000000000000))*(x1133)*(x1134)))+(((IkReal(-1.00000000000000))*(x1133)*(x1135)))))),((gconst3)*(((IkReal(26410.0000000000))+(((x1135)*(x1138)))+(((x1134)*(x1138)))+(((pz)*(x1133)))+(((pz)*(x1139)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x1134)*(x1136)))+(((IkReal(-1.00000000000000))*(x1134)*(x1137)))+(((IkReal(-1.00000000000000))*(x1135)*(x1137)))+(((IkReal(-1.00000000000000))*(sj1)*(x1135)*(x1136)))+(((cj1)*(pz)*(x1136)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1140.valid ) {
    continue;
}
j2array[0]=x1140.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1141=IKcos(j2);
IkReal x1142=IKsin(j2);
IkReal x1143=((px)*(sj1));
IkReal x1144=((IkReal(0.273000000000000))*(cj3));
IkReal x1145=((py)*(sj1));
IkReal x1146=((IkReal(1.00000000000000))*(r00));
IkReal x1147=((cj1)*(sj0));
IkReal x1148=((IkReal(1.00000000000000))*(px));
IkReal x1149=((IkReal(1.00000000000000))*(pz));
IkReal x1150=((cj0)*(r01));
IkReal x1151=((pz)*(sj1));
IkReal x1152=((IkReal(0.273000000000000))*(sj3));
IkReal x1153=((cj0)*(cj1));
IkReal x1154=((IkReal(0.139000000000000))*(x1142));
IkReal x1155=((IkReal(0.139000000000000))*(x1141));
IkReal x1156=((x1142)*(x1144));
IkReal x1157=((x1141)*(x1152));
IkReal x1158=((x1142)*(x1152));
IkReal x1159=((x1141)*(x1144));
IkReal x1160=((x1154)+(x1156));
IkReal x1161=((x1159)+(x1158)+(x1155));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x1149)))+(((sj0)*(x1145)))+(((IkReal(-1.00000000000000))*(x1161)))+(((cj0)*(x1143))));
evalcond[1]=((x1160)+(((IkReal(-1.00000000000000))*(py)*(x1147)))+(((IkReal(-1.00000000000000))*(x1157)))+(((IkReal(-1.00000000000000))*(x1148)*(x1153)))+(((IkReal(-1.00000000000000))*(sj1)*(x1149))));
evalcond[2]=((x1160)+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1146)))+(((IkReal(-1.00000000000000))*(x1157)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1145)))+(((IkReal(-1.00000000000000))*(sj0)*(x1146)*(x1151)))+(((x1150)*(x1151)))+(((cj1)*(px)*(r01)))+(((r02)*(sj0)*(x1143))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1145)*(x1146)))+(x1161)+(((IkReal(-1.00000000000000))*(r02)*(x1147)*(x1148)))+(((IkReal(-1.00000000000000))*(cj1)*(x1149)*(x1150)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x1150)))+(((py)*(r02)*(x1153)))+(((r01)*(x1143)))+(((pz)*(r00)*(x1147))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1162=((IkReal(0.0758940000000000))*(cj3));
IkReal x1163=(py)*(py);
IkReal x1164=(px)*(px);
IkReal x1165=(pz)*(pz);
IkReal x1166=((r01)*(sj0));
IkReal x1167=((IkReal(2.00000000000000))*(px));
IkReal x1168=((IkReal(0.190000000000000))*(cj1));
IkReal x1169=((r00)*(sj1));
IkReal x1170=((IkReal(0.0361000000000000))*(cj0));
IkReal x1171=((py)*(r02));
IkReal x1172=((cj0)*(cj1));
IkReal x1173=((IkReal(0.380000000000000))*(pz));
IkReal x1174=((pz)*(r02));
IkReal x1175=((IkReal(2.00000000000000))*(sj0));
IkReal x1176=((cj0)*(r01));
IkReal x1177=((IkReal(0.380000000000000))*(py));
IkReal x1178=((pz)*(sj1));
IkReal x1179=((IkReal(1.00000000000000))*(sj0));
IkReal x1180=((pp)*(r00));
IkReal x1181=((IkReal(0.190000000000000))*(sj1));
IkReal x1182=((IkReal(0.0361000000000000))*(sj1));
IkReal x1183=((IkReal(2.00000000000000))*(cj0));
IkReal x1184=((r00)*(sj0));
IkReal x1185=((IkReal(1.00000000000000))*(r00));
IkReal x1186=((cj1)*(r00));
IkReal x1187=((cj1)*(r02));
IkReal x1188=((cj0)*(r00));
IkReal x1189=((cj0)*(sj1));
IkReal x1190=((IkReal(0.380000000000000))*(px));
IkReal x1191=((cj1)*(pz));
IkReal x1192=((IkReal(1.00000000000000))*(pp));
IkReal x1193=((cj0)*(r02));
IkReal x1194=((py)*(r01));
IkReal x1195=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x1196=((r00)*(x1164));
IkReal x1197=((IkReal(2.00000000000000))*(x1194));
IkReal x1198=((IkReal(2.00000000000000))*(x1163));
IkReal x1199=((IkReal(2.00000000000000))*(x1165));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x1179)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(x1176)+(((IkReal(-1.00000000000000))*(r00)*(x1179))));
evalcond[3]=((IkReal(0.0577500000000000))+(x1162)+(((sj0)*(sj1)*(x1177)))+(((x1189)*(x1190)))+(((IkReal(-1.00000000000000))*(x1192)))+(((IkReal(-1.00000000000000))*(cj1)*(x1173))));
evalcond[4]=((((sj1)*(x1166)))+(((cj0)*(x1169)))+(((IkReal(-1.00000000000000))*(x1187))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1195)))+(((IkReal(-1.00000000000000))*(x1172)*(x1185)))+(((IkReal(-1.00000000000000))*(cj1)*(x1166))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r02)*(x1168)))+(((x1166)*(x1181)))+(((IkReal(0.190000000000000))*(cj0)*(x1169)))+(((IkReal(-1.00000000000000))*(px)*(x1185)))+(((IkReal(-1.00000000000000))*(x1194)))+(((IkReal(-1.00000000000000))*(x1174))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x1166)*(x1168)))+(((sj0)*(x1171)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x1185)))+(((IkReal(-1.00000000000000))*(pz)*(x1166)))+(((px)*(x1193)))+(((IkReal(-1.00000000000000))*(x1168)*(x1188)))+(((IkReal(-1.00000000000000))*(r02)*(x1181))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((IkReal(-0.380000000000000))*(x1171)*(x1172)))+(((sj0)*(x1167)*(x1174)))+(((sj0)*(x1187)*(x1190)))+(((r01)*(x1170)))+(((IkReal(-1.00000000000000))*(x1179)*(x1180)))+(((x1175)*(x1196)))+(((IkReal(-1.00000000000000))*(py)*(x1167)*(x1188)))+(((IkReal(-0.0361000000000000))*(x1184)))+(((IkReal(-1.00000000000000))*(cj1)*(x1173)*(x1184)))+(((pp)*(x1176)))+(((IkReal(-1.00000000000000))*(x1162)))+(((py)*(x1166)*(x1167)))+(((IkReal(-1.00000000000000))*(pz)*(x1171)*(x1183)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1190)))+(((r01)*(x1172)*(x1173)))+(((x1169)*(x1177)))+(((IkReal(-1.00000000000000))*(x1176)*(x1198))));
evalcond[9]=((((r02)*(x1173)))+(((IkReal(0.0361000000000000))*(x1187)))+(((x1187)*(x1199)))+(((cj0)*(pp)*(x1169)))+(((pp)*(sj1)*(x1166)))+(((r01)*(x1177)))+(((r00)*(x1190)))+(((IkReal(-1.00000000000000))*(x1171)*(x1175)*(x1178)))+(((IkReal(-1.00000000000000))*(x1187)*(x1192)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1167)*(x1169)))+(((IkReal(-1.00000000000000))*(x1169)*(x1170)))+(((IkReal(-1.00000000000000))*(sj1)*(x1166)*(x1198)))+(((IkReal(-1.00000000000000))*(x1166)*(x1182)))+(((IkReal(-1.00000000000000))*(x1167)*(x1174)*(x1189)))+(((x1191)*(x1197)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x1167)*(x1176)))+(((pz)*(x1167)*(x1186)))+(((IkReal(-1.00000000000000))*(x1164)*(x1169)*(x1183))));
evalcond[10]=((((x1178)*(x1197)))+(((cj1)*(x1166)*(x1198)))+(((IkReal(0.380000000000000))*(sj0)*(x1171)))+(((IkReal(2.00000000000000))*(x1172)*(x1196)))+(((IkReal(-1.00000000000000))*(cj1)*(x1166)*(x1192)))+(((IkReal(-0.0361000000000000))*(cj1)*(x1166)))+(((r02)*(sj1)*(x1199)))+(((cj1)*(py)*(x1167)*(x1184)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x1192)))+(((IkReal(-1.00000000000000))*(x1172)*(x1180)))+(((pz)*(x1167)*(x1169)))+(((x1171)*(x1175)*(x1191)))+(((IkReal(-1.00000000000000))*(x1173)*(x1188)))+(((x1167)*(x1172)*(x1174)))+(((x1167)*(x1172)*(x1194)))+(((IkReal(-1.00000000000000))*(x1170)*(x1186)))+(((x1190)*(x1193)))+(((IkReal(-1.00000000000000))*(x1166)*(x1173)))+(((IkReal(-1.00000000000000))*(r02)*(x1182))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1200=((IkReal(273000.000000000))*(sj3));
IkReal x1201=((pz)*(sj1));
IkReal x1202=((IkReal(139000.000000000))*(sj0));
IkReal x1203=((px)*(sj1));
IkReal x1204=((r02)*(sj0));
IkReal x1205=((IkReal(273000.000000000))*(cj3));
IkReal x1206=((py)*(sj1));
IkReal x1207=((cj1)*(pz));
IkReal x1208=((IkReal(139000.000000000))*(cj0));
IkReal x1209=((r00)*(sj0));
IkReal x1210=((cj1)*(py)*(r00));
IkReal x1211=((cj0)*(x1205));
IkReal x1212=((cj1)*(px)*(r01));
Atan2Value<IkReal> x1213 = IKatan2WithCheck(((gconst6)*(((((sj0)*(x1200)*(x1206)))+(((cj0)*(x1200)*(x1203)))+(((IkReal(-1.00000000000000))*(r02)*(x1206)*(x1208)))+(((r01)*(x1201)*(x1208)))+(((IkReal(-1.00000000000000))*(x1201)*(x1205)*(x1209)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1205)*(x1210)))+(((r01)*(x1201)*(x1211)))+(((IkReal(-1.00000000000000))*(x1200)*(x1207)))+(((IkReal(139000.000000000))*(x1212)))+(((x1203)*(x1204)*(x1205)))+(((x1205)*(x1212)))+(((IkReal(-1.00000000000000))*(r02)*(x1206)*(x1211)))+(((r02)*(x1202)*(x1203)))+(((IkReal(-139000.000000000))*(x1210)))+(((IkReal(-1.00000000000000))*(r00)*(x1201)*(x1202)))))),((gconst6)*(((IkReal(-26410.0000000000))+(((sj0)*(x1205)*(x1206)))+(((IkReal(-1.00000000000000))*(x1200)*(x1203)*(x1204)))+(((IkReal(-1.00000000000000))*(x1200)*(x1212)))+(((cj0)*(r02)*(x1200)*(x1206)))+(((x1202)*(x1206)))+(((x1200)*(x1201)*(x1209)))+(((x1203)*(x1208)))+(((IkReal(-1.00000000000000))*(x1205)*(x1207)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x1200)*(x1201)))+(((IkReal(-139000.000000000))*(x1207)))+(((x1200)*(x1210)))+(((x1203)*(x1211)))+(((IkReal(-51870.0000000000))*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1213.valid ) {
    continue;
}
j2array[0]=x1213.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1214=IKcos(j2);
IkReal x1215=IKsin(j2);
IkReal x1216=((px)*(sj1));
IkReal x1217=((IkReal(0.273000000000000))*(cj3));
IkReal x1218=((py)*(sj1));
IkReal x1219=((IkReal(1.00000000000000))*(r00));
IkReal x1220=((cj1)*(sj0));
IkReal x1221=((IkReal(1.00000000000000))*(px));
IkReal x1222=((IkReal(1.00000000000000))*(pz));
IkReal x1223=((cj0)*(r01));
IkReal x1224=((pz)*(sj1));
IkReal x1225=((IkReal(0.273000000000000))*(sj3));
IkReal x1226=((cj0)*(cj1));
IkReal x1227=((IkReal(0.139000000000000))*(x1215));
IkReal x1228=((IkReal(0.139000000000000))*(x1214));
IkReal x1229=((x1214)*(x1225));
IkReal x1230=((x1215)*(x1217));
IkReal x1231=((x1215)*(x1225));
IkReal x1232=((x1214)*(x1217));
IkReal x1233=((x1230)+(x1227));
IkReal x1234=((x1231)+(x1232)+(x1228));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x1234)))+(((cj0)*(x1216)))+(((sj0)*(x1218)))+(((IkReal(-1.00000000000000))*(cj1)*(x1222))));
evalcond[1]=((x1233)+(((IkReal(-1.00000000000000))*(x1229)))+(((IkReal(-1.00000000000000))*(x1221)*(x1226)))+(((IkReal(-1.00000000000000))*(py)*(x1220)))+(((IkReal(-1.00000000000000))*(sj1)*(x1222))));
evalcond[2]=((x1229)+(((r02)*(sj0)*(x1216)))+(((x1223)*(x1224)))+(((IkReal(-1.00000000000000))*(x1233)))+(((IkReal(-1.00000000000000))*(sj0)*(x1219)*(x1224)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1218)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1219))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x1222)*(x1223)))+(((IkReal(-1.00000000000000))*(x1234)))+(((py)*(r02)*(x1226)))+(((IkReal(-1.00000000000000))*(x1218)*(x1219)))+(((r01)*(x1216)))+(((IkReal(-1.00000000000000))*(r02)*(x1220)*(x1221)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((pz)*(r00)*(x1220)))+(((IkReal(-0.190000000000000))*(x1223))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1235=((IkReal(139000.000000000))*(cj1));
IkReal x1236=((py)*(sj0));
IkReal x1237=((cj0)*(px));
IkReal x1238=((IkReal(273000.000000000))*(cj3));
IkReal x1239=((IkReal(139000.000000000))*(sj1));
IkReal x1240=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x1241=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x1242 = IKatan2WithCheck(((gconst5)*(((((IkReal(-1.00000000000000))*(cj1)*(x1236)*(x1238)))+(((IkReal(-1.00000000000000))*(x1236)*(x1241)))+(((pz)*(x1240)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x1239)))+(((IkReal(-1.00000000000000))*(x1235)*(x1236)))+(((IkReal(-1.00000000000000))*(x1235)*(x1237)))+(((IkReal(-1.00000000000000))*(x1237)*(x1241)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1238)))+(((IkReal(-1.00000000000000))*(cj1)*(x1237)*(x1238)))))),((gconst5)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x1237)*(x1238)))+(((x1236)*(x1240)))+(((pz)*(x1235)))+(((pz)*(x1241)))+(((IkReal(-1.00000000000000))*(x1237)*(x1239)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1236)*(x1239)))+(((cj1)*(pz)*(x1238)))+(((IkReal(-1.00000000000000))*(sj1)*(x1236)*(x1238)))+(((x1237)*(x1240)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1242.valid ) {
    continue;
}
j2array[0]=x1242.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1243=IKcos(j2);
IkReal x1244=IKsin(j2);
IkReal x1245=((px)*(sj1));
IkReal x1246=((IkReal(0.273000000000000))*(cj3));
IkReal x1247=((py)*(sj1));
IkReal x1248=((IkReal(1.00000000000000))*(r00));
IkReal x1249=((cj1)*(sj0));
IkReal x1250=((IkReal(1.00000000000000))*(px));
IkReal x1251=((IkReal(1.00000000000000))*(pz));
IkReal x1252=((cj0)*(r01));
IkReal x1253=((pz)*(sj1));
IkReal x1254=((IkReal(0.273000000000000))*(sj3));
IkReal x1255=((cj0)*(cj1));
IkReal x1256=((IkReal(0.139000000000000))*(x1244));
IkReal x1257=((IkReal(0.139000000000000))*(x1243));
IkReal x1258=((x1243)*(x1254));
IkReal x1259=((x1244)*(x1246));
IkReal x1260=((x1244)*(x1254));
IkReal x1261=((x1243)*(x1246));
IkReal x1262=((x1256)+(x1259));
IkReal x1263=((x1261)+(x1260)+(x1257));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x1251)))+(((sj0)*(x1247)))+(((cj0)*(x1245)))+(((IkReal(-1.00000000000000))*(x1263))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1258)))+(x1262)+(((IkReal(-1.00000000000000))*(sj1)*(x1251)))+(((IkReal(-1.00000000000000))*(x1250)*(x1255)))+(((IkReal(-1.00000000000000))*(py)*(x1249))));
evalcond[2]=((((r02)*(sj0)*(x1245)))+(x1258)+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1248)))+(((IkReal(-1.00000000000000))*(sj0)*(x1248)*(x1253)))+(((x1252)*(x1253)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1247)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x1262))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj1)*(x1251)*(x1252)))+(((r01)*(x1245)))+(((pz)*(r00)*(x1249)))+(((IkReal(-1.00000000000000))*(r02)*(x1249)*(x1250)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-0.190000000000000))*(x1252)))+(((py)*(r02)*(x1255)))+(((IkReal(-1.00000000000000))*(x1247)*(x1248)))+(((IkReal(-1.00000000000000))*(x1263))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1264=((IkReal(0.0758940000000000))*(cj3));
IkReal x1265=(py)*(py);
IkReal x1266=(px)*(px);
IkReal x1267=(pz)*(pz);
IkReal x1268=((r01)*(sj0));
IkReal x1269=((IkReal(2.00000000000000))*(px));
IkReal x1270=((IkReal(0.190000000000000))*(cj1));
IkReal x1271=((r00)*(sj1));
IkReal x1272=((IkReal(0.0361000000000000))*(cj0));
IkReal x1273=((py)*(r02));
IkReal x1274=((cj0)*(cj1));
IkReal x1275=((IkReal(0.380000000000000))*(pz));
IkReal x1276=((pz)*(r02));
IkReal x1277=((IkReal(2.00000000000000))*(sj0));
IkReal x1278=((cj0)*(r01));
IkReal x1279=((IkReal(0.380000000000000))*(py));
IkReal x1280=((pz)*(sj1));
IkReal x1281=((IkReal(1.00000000000000))*(sj0));
IkReal x1282=((pp)*(r00));
IkReal x1283=((IkReal(0.190000000000000))*(sj1));
IkReal x1284=((IkReal(0.0361000000000000))*(sj1));
IkReal x1285=((IkReal(2.00000000000000))*(cj0));
IkReal x1286=((r00)*(sj0));
IkReal x1287=((IkReal(1.00000000000000))*(r00));
IkReal x1288=((cj1)*(r00));
IkReal x1289=((cj1)*(r02));
IkReal x1290=((cj0)*(r00));
IkReal x1291=((cj0)*(sj1));
IkReal x1292=((IkReal(0.380000000000000))*(px));
IkReal x1293=((cj1)*(pz));
IkReal x1294=((IkReal(1.00000000000000))*(pp));
IkReal x1295=((cj0)*(r02));
IkReal x1296=((py)*(r01));
IkReal x1297=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x1298=((r00)*(x1266));
IkReal x1299=((IkReal(2.00000000000000))*(x1296));
IkReal x1300=((IkReal(2.00000000000000))*(x1265));
IkReal x1301=((IkReal(2.00000000000000))*(x1267));
evalcond[0]=IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x1281)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(x1278)+(((IkReal(-1.00000000000000))*(r00)*(x1281))));
evalcond[3]=((IkReal(0.0577500000000000))+(x1264)+(((IkReal(-1.00000000000000))*(x1294)))+(((IkReal(-1.00000000000000))*(cj1)*(x1275)))+(((x1291)*(x1292)))+(((sj0)*(sj1)*(x1279))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1289)))+(((cj0)*(x1271)))+(((sj1)*(x1268))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1297)))+(((IkReal(-1.00000000000000))*(cj1)*(x1268)))+(((IkReal(-1.00000000000000))*(x1274)*(x1287))));
evalcond[6]=((((IkReal(-1.00000000000000))*(px)*(x1287)))+(((IkReal(0.190000000000000))*(cj0)*(x1271)))+(((x1268)*(x1283)))+(((IkReal(-1.00000000000000))*(r02)*(x1270)))+(((IkReal(-1.00000000000000))*(x1296)))+(((IkReal(-1.00000000000000))*(x1276))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x1268)*(x1270)))+(((IkReal(-1.00000000000000))*(r02)*(x1283)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x1287)))+(((sj0)*(x1273)))+(((IkReal(-1.00000000000000))*(pz)*(x1268)))+(((IkReal(-1.00000000000000))*(x1270)*(x1290)))+(((px)*(x1295))));
evalcond[8]=((IkReal(0.0938500000000000))+(((sj0)*(x1269)*(x1276)))+(((IkReal(-1.00000000000000))*(cj1)*(x1275)*(x1286)))+(x1264)+(((IkReal(-1.00000000000000))*(x1278)*(x1300)))+(((sj0)*(x1289)*(x1292)))+(((IkReal(-1.00000000000000))*(py)*(x1269)*(x1290)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1292)))+(((r01)*(x1274)*(x1275)))+(((py)*(x1268)*(x1269)))+(((IkReal(-0.380000000000000))*(x1273)*(x1274)))+(((x1271)*(x1279)))+(((IkReal(-0.0361000000000000))*(x1286)))+(((pp)*(x1278)))+(((IkReal(-1.00000000000000))*(pz)*(x1273)*(x1285)))+(((r01)*(x1272)))+(((IkReal(-1.00000000000000))*(x1281)*(x1282)))+(((x1277)*(x1298))));
evalcond[9]=((((pz)*(x1269)*(x1288)))+(((IkReal(0.0361000000000000))*(x1289)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x1269)*(x1278)))+(((IkReal(-1.00000000000000))*(sj1)*(x1268)*(x1300)))+(((IkReal(-1.00000000000000))*(x1289)*(x1294)))+(((IkReal(-1.00000000000000))*(x1271)*(x1272)))+(((r02)*(x1275)))+(((x1293)*(x1299)))+(((x1289)*(x1301)))+(((IkReal(-1.00000000000000))*(x1273)*(x1277)*(x1280)))+(((IkReal(-1.00000000000000))*(x1266)*(x1271)*(x1285)))+(((IkReal(-1.00000000000000))*(x1269)*(x1276)*(x1291)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1269)*(x1271)))+(((cj0)*(pp)*(x1271)))+(((r01)*(x1279)))+(((pp)*(sj1)*(x1268)))+(((IkReal(-1.00000000000000))*(x1268)*(x1284)))+(((r00)*(x1292))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x1268)*(x1275)))+(((IkReal(-1.00000000000000))*(r02)*(x1284)))+(((r02)*(sj1)*(x1301)))+(((IkReal(0.380000000000000))*(sj0)*(x1273)))+(((x1269)*(x1274)*(x1276)))+(((x1280)*(x1299)))+(((IkReal(-1.00000000000000))*(cj1)*(x1268)*(x1294)))+(((cj1)*(py)*(x1269)*(x1286)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x1294)))+(((IkReal(-1.00000000000000))*(x1272)*(x1288)))+(((IkReal(-1.00000000000000))*(x1274)*(x1282)))+(((pz)*(x1269)*(x1271)))+(((x1269)*(x1274)*(x1296)))+(((IkReal(-1.00000000000000))*(x1275)*(x1290)))+(((IkReal(-0.0361000000000000))*(cj1)*(x1268)))+(((IkReal(2.00000000000000))*(x1274)*(x1298)))+(((x1273)*(x1277)*(x1293)))+(((x1292)*(x1295)))+(((cj1)*(x1268)*(x1300))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1302=((cj1)*(py));
IkReal x1303=((pz)*(sj1));
IkReal x1304=((IkReal(139000.000000000))*(sj0));
IkReal x1305=((IkReal(273000.000000000))*(cj3));
IkReal x1306=((py)*(sj1));
IkReal x1307=((IkReal(273000.000000000))*(sj3));
IkReal x1308=((cj1)*(pz));
IkReal x1309=((IkReal(139000.000000000))*(r01));
IkReal x1310=((cj0)*(r02));
IkReal x1311=((cj1)*(px));
IkReal x1312=((r00)*(x1307));
IkReal x1313=((IkReal(273000.000000000))*(cj0)*(r01));
IkReal x1314=((px)*(r02)*(sj1));
IkReal x1315=((IkReal(273000.000000000))*(cj0)*(px)*(sj1));
Atan2Value<IkReal> x1316 = IKatan2WithCheck(((gconst8)*(((((IkReal(-1.00000000000000))*(x1304)*(x1314)))+(((IkReal(-1.00000000000000))*(r01)*(x1305)*(x1311)))+(((IkReal(-1.00000000000000))*(x1307)*(x1308)))+(((x1305)*(x1306)*(x1310)))+(((sj0)*(x1306)*(x1307)))+(((cj0)*(px)*(sj1)*(x1307)))+(((IkReal(-51870.0000000000))*(sj3)))+(((IkReal(139000.000000000))*(x1306)*(x1310)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x1303)*(x1305)))+(((r00)*(x1302)*(x1305)))+(((IkReal(-1.00000000000000))*(cj0)*(x1303)*(x1309)))+(((IkReal(-1.00000000000000))*(sj0)*(x1305)*(x1314)))+(((r00)*(sj0)*(x1303)*(x1305)))+(((r00)*(x1303)*(x1304)))+(((IkReal(-1.00000000000000))*(x1309)*(x1311)))+(((IkReal(139000.000000000))*(r00)*(x1302)))))),((gconst8)*(((IkReal(-26410.0000000000))+(((sj0)*(x1307)*(x1314)))+(((sj0)*(x1305)*(x1306)))+(((cj0)*(px)*(sj1)*(x1305)))+(((cj0)*(r01)*(x1303)*(x1307)))+(((IkReal(139000.000000000))*(cj0)*(px)*(sj1)))+(((r01)*(x1307)*(x1311)))+(((x1304)*(x1306)))+(((IkReal(-1.00000000000000))*(x1306)*(x1307)*(x1310)))+(((IkReal(-1.00000000000000))*(x1305)*(x1308)))+(((IkReal(-139000.000000000))*(x1308)))+(((IkReal(-1.00000000000000))*(x1302)*(x1312)))+(((IkReal(-51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj0)*(x1303)*(x1312)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1316.valid ) {
    continue;
}
j2array[0]=x1316.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1317=IKcos(j2);
IkReal x1318=IKsin(j2);
IkReal x1319=((px)*(sj1));
IkReal x1320=((IkReal(0.273000000000000))*(cj3));
IkReal x1321=((py)*(sj1));
IkReal x1322=((IkReal(1.00000000000000))*(r00));
IkReal x1323=((cj1)*(sj0));
IkReal x1324=((IkReal(1.00000000000000))*(px));
IkReal x1325=((IkReal(1.00000000000000))*(pz));
IkReal x1326=((cj0)*(r01));
IkReal x1327=((pz)*(sj1));
IkReal x1328=((IkReal(0.273000000000000))*(sj3));
IkReal x1329=((cj0)*(cj1));
IkReal x1330=((IkReal(0.139000000000000))*(x1318));
IkReal x1331=((IkReal(0.139000000000000))*(x1317));
IkReal x1332=((x1318)*(x1320));
IkReal x1333=((x1317)*(x1328));
IkReal x1334=((x1318)*(x1328));
IkReal x1335=((x1317)*(x1320));
IkReal x1336=((x1330)+(x1332));
IkReal x1337=((x1335)+(x1334)+(x1331));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x1337)))+(((sj0)*(x1321)))+(((IkReal(-1.00000000000000))*(cj1)*(x1325)))+(((cj0)*(x1319))));
evalcond[1]=((x1336)+(((IkReal(-1.00000000000000))*(x1324)*(x1329)))+(((IkReal(-1.00000000000000))*(py)*(x1323)))+(((IkReal(-1.00000000000000))*(sj1)*(x1325)))+(((IkReal(-1.00000000000000))*(x1333))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x1322)))+(x1336)+(((r02)*(sj0)*(x1319)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1321)))+(((IkReal(-1.00000000000000))*(sj0)*(x1322)*(x1327)))+(((x1326)*(x1327)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(x1333))));
evalcond[3]=((x1337)+(((pz)*(r00)*(x1323)))+(((py)*(r02)*(x1329)))+(((r01)*(x1319)))+(((IkReal(-1.00000000000000))*(cj1)*(x1325)*(x1326)))+(((IkReal(-1.00000000000000))*(r02)*(x1323)*(x1324)))+(((IkReal(-0.190000000000000))*(x1326)))+(((IkReal(-1.00000000000000))*(x1321)*(x1322)))+(((IkReal(0.190000000000000))*(r00)*(sj0))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1338=((IkReal(139000.000000000))*(cj1));
IkReal x1339=((py)*(sj0));
IkReal x1340=((cj0)*(px));
IkReal x1341=((IkReal(273000.000000000))*(cj3));
IkReal x1342=((IkReal(139000.000000000))*(sj1));
IkReal x1343=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x1344=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x1345 = IKatan2WithCheck(((gconst7)*(((((IkReal(-1.00000000000000))*(x1340)*(x1344)))+(((IkReal(-1.00000000000000))*(pz)*(x1342)))+(((IkReal(-1.00000000000000))*(x1338)*(x1340)))+(((IkReal(-1.00000000000000))*(cj1)*(x1339)*(x1341)))+(((IkReal(-1.00000000000000))*(cj1)*(x1340)*(x1341)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1341)))+(((IkReal(-1.00000000000000))*(x1339)*(x1344)))+(((IkReal(-1.00000000000000))*(x1338)*(x1339)))+(((pz)*(x1343)))))),((gconst7)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(x1340)*(x1342)))+(((x1339)*(x1343)))+(((pz)*(x1338)))+(((x1340)*(x1343)))+(((IkReal(-1.00000000000000))*(sj1)*(x1340)*(x1341)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x1339)*(x1342)))+(((IkReal(-1.00000000000000))*(sj1)*(x1339)*(x1341)))+(((pz)*(x1344)))+(((cj1)*(pz)*(x1341)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1345.valid ) {
    continue;
}
j2array[0]=x1345.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1346=IKcos(j2);
IkReal x1347=IKsin(j2);
IkReal x1348=((px)*(sj1));
IkReal x1349=((IkReal(0.273000000000000))*(cj3));
IkReal x1350=((py)*(sj1));
IkReal x1351=((IkReal(1.00000000000000))*(r00));
IkReal x1352=((cj1)*(sj0));
IkReal x1353=((IkReal(1.00000000000000))*(px));
IkReal x1354=((IkReal(1.00000000000000))*(pz));
IkReal x1355=((cj0)*(r01));
IkReal x1356=((pz)*(sj1));
IkReal x1357=((IkReal(0.273000000000000))*(sj3));
IkReal x1358=((cj0)*(cj1));
IkReal x1359=((IkReal(0.139000000000000))*(x1347));
IkReal x1360=((IkReal(0.139000000000000))*(x1346));
IkReal x1361=((x1347)*(x1349));
IkReal x1362=((x1346)*(x1357));
IkReal x1363=((x1347)*(x1357));
IkReal x1364=((x1346)*(x1349));
IkReal x1365=((x1359)+(x1361));
IkReal x1366=((x1364)+(x1363)+(x1360));
evalcond[0]=((IkReal(-0.190000000000000))+(((sj0)*(x1350)))+(((cj0)*(x1348)))+(((IkReal(-1.00000000000000))*(cj1)*(x1354)))+(((IkReal(-1.00000000000000))*(x1366))));
evalcond[1]=((x1365)+(((IkReal(-1.00000000000000))*(py)*(x1352)))+(((IkReal(-1.00000000000000))*(sj1)*(x1354)))+(((IkReal(-1.00000000000000))*(x1353)*(x1358)))+(((IkReal(-1.00000000000000))*(x1362))));
evalcond[2]=((x1365)+(((x1355)*(x1356)))+(((r02)*(sj0)*(x1348)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1351)))+(((IkReal(-1.00000000000000))*(sj0)*(x1351)*(x1356)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1350)))+(((IkReal(-1.00000000000000))*(x1362))));
evalcond[3]=((x1366)+(((IkReal(-0.190000000000000))*(x1355)))+(((IkReal(-1.00000000000000))*(x1350)*(x1351)))+(((pz)*(r00)*(x1352)))+(((py)*(r02)*(x1358)))+(((r01)*(x1348)))+(((IkReal(-1.00000000000000))*(cj1)*(x1354)*(x1355)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r02)*(x1352)*(x1353))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1367=((IkReal(0.0758940000000000))*(cj3));
IkReal x1368=(py)*(py);
IkReal x1369=(px)*(px);
IkReal x1370=(pz)*(pz);
IkReal x1371=((r01)*(sj0));
IkReal x1372=((IkReal(2.00000000000000))*(px));
IkReal x1373=((IkReal(0.190000000000000))*(cj1));
IkReal x1374=((r00)*(sj1));
IkReal x1375=((IkReal(0.0361000000000000))*(cj0));
IkReal x1376=((py)*(r02));
IkReal x1377=((cj0)*(cj1));
IkReal x1378=((IkReal(0.380000000000000))*(pz));
IkReal x1379=((pz)*(r02));
IkReal x1380=((IkReal(2.00000000000000))*(sj0));
IkReal x1381=((cj0)*(r01));
IkReal x1382=((IkReal(0.380000000000000))*(py));
IkReal x1383=((pz)*(sj1));
IkReal x1384=((IkReal(1.00000000000000))*(sj0));
IkReal x1385=((pp)*(r00));
IkReal x1386=((IkReal(0.190000000000000))*(sj1));
IkReal x1387=((IkReal(0.0361000000000000))*(sj1));
IkReal x1388=((IkReal(2.00000000000000))*(cj0));
IkReal x1389=((r00)*(sj0));
IkReal x1390=((IkReal(1.00000000000000))*(r00));
IkReal x1391=((cj1)*(r00));
IkReal x1392=((cj1)*(r02));
IkReal x1393=((cj0)*(r00));
IkReal x1394=((cj0)*(sj1));
IkReal x1395=((IkReal(0.380000000000000))*(px));
IkReal x1396=((cj1)*(pz));
IkReal x1397=((IkReal(1.00000000000000))*(pp));
IkReal x1398=((cj0)*(r02));
IkReal x1399=((py)*(r01));
IkReal x1400=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x1401=((r00)*(x1369));
IkReal x1402=((IkReal(2.00000000000000))*(x1399));
IkReal x1403=((IkReal(2.00000000000000))*(x1368));
IkReal x1404=((IkReal(2.00000000000000))*(x1370));
evalcond[0]=IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x1384)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(x1381)+(((IkReal(-1.00000000000000))*(r00)*(x1384))));
evalcond[3]=((IkReal(0.0577500000000000))+(x1367)+(((x1394)*(x1395)))+(((IkReal(-1.00000000000000))*(cj1)*(x1378)))+(((sj0)*(sj1)*(x1382)))+(((IkReal(-1.00000000000000))*(x1397))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1392)))+(((sj1)*(x1371)))+(((cj0)*(x1374))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1377)*(x1390)))+(((IkReal(-1.00000000000000))*(x1400)))+(((IkReal(-1.00000000000000))*(cj1)*(x1371))));
evalcond[6]=((((x1371)*(x1386)))+(((IkReal(-1.00000000000000))*(x1379)))+(((IkReal(-1.00000000000000))*(r02)*(x1373)))+(((IkReal(0.190000000000000))*(cj0)*(x1374)))+(((IkReal(-1.00000000000000))*(px)*(x1390)))+(((IkReal(-1.00000000000000))*(x1399))));
evalcond[7]=((((px)*(x1398)))+(((IkReal(-1.00000000000000))*(r02)*(x1386)))+(((IkReal(-1.00000000000000))*(x1371)*(x1373)))+(((IkReal(-1.00000000000000))*(pz)*(x1371)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x1390)))+(((sj0)*(x1376)))+(((IkReal(-1.00000000000000))*(x1373)*(x1393))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((sj0)*(x1392)*(x1395)))+(((IkReal(-1.00000000000000))*(py)*(x1372)*(x1393)))+(((IkReal(-1.00000000000000))*(x1384)*(x1385)))+(((py)*(x1371)*(x1372)))+(((IkReal(-0.0361000000000000))*(x1389)))+(((IkReal(-1.00000000000000))*(cj1)*(x1378)*(x1389)))+(((r01)*(x1377)*(x1378)))+(((IkReal(-1.00000000000000))*(pz)*(x1376)*(x1388)))+(((pp)*(x1381)))+(((IkReal(-1.00000000000000))*(x1381)*(x1403)))+(((IkReal(-0.380000000000000))*(x1376)*(x1377)))+(((x1374)*(x1382)))+(((sj0)*(x1372)*(x1379)))+(((x1380)*(x1401)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1395)))+(((r01)*(x1375)))+(((IkReal(-1.00000000000000))*(x1367))));
evalcond[9]=((((pp)*(sj1)*(x1371)))+(((IkReal(-1.00000000000000))*(x1392)*(x1397)))+(((IkReal(-1.00000000000000))*(x1372)*(x1379)*(x1394)))+(((x1392)*(x1404)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1372)*(x1374)))+(((x1396)*(x1402)))+(((IkReal(-1.00000000000000))*(sj1)*(x1371)*(x1403)))+(((cj0)*(pp)*(x1374)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x1372)*(x1381)))+(((IkReal(-1.00000000000000))*(x1374)*(x1375)))+(((IkReal(-1.00000000000000))*(x1371)*(x1387)))+(((pz)*(x1372)*(x1391)))+(((r01)*(x1382)))+(((r02)*(x1378)))+(((IkReal(0.0361000000000000))*(x1392)))+(((r00)*(x1395)))+(((IkReal(-1.00000000000000))*(x1376)*(x1380)*(x1383)))+(((IkReal(-1.00000000000000))*(x1369)*(x1374)*(x1388))));
evalcond[10]=((((x1376)*(x1380)*(x1396)))+(((r02)*(sj1)*(x1404)))+(((IkReal(-1.00000000000000))*(x1375)*(x1391)))+(((pz)*(x1372)*(x1374)))+(((IkReal(-1.00000000000000))*(r02)*(x1387)))+(((IkReal(-0.0361000000000000))*(cj1)*(x1371)))+(((IkReal(-1.00000000000000))*(x1371)*(x1378)))+(((IkReal(-1.00000000000000))*(x1377)*(x1385)))+(((IkReal(2.00000000000000))*(x1377)*(x1401)))+(((x1395)*(x1398)))+(((x1372)*(x1377)*(x1379)))+(((x1372)*(x1377)*(x1399)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x1397)))+(((IkReal(-1.00000000000000))*(cj1)*(x1371)*(x1397)))+(((cj1)*(py)*(x1372)*(x1389)))+(((IkReal(-1.00000000000000))*(x1378)*(x1393)))+(((cj1)*(x1371)*(x1403)))+(((IkReal(0.380000000000000))*(sj0)*(x1376)))+(((x1383)*(x1402))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((IkReal(19321.0000000000))+(((IkReal(75894.0000000000))*(cj3)))+(((IkReal(74529.0000000000))*((sj3)*(sj3))))+(((IkReal(74529.0000000000))*((cj3)*(cj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(3.92805755395683))*(cj3)))+(((IkReal(3.85740903679934))*((sj3)*(sj3))))+(((IkReal(3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1405=((IkReal(273000.000000000))*(sj3));
IkReal x1406=((IkReal(273000.000000000))*(cj3));
IkReal x1407=((pz)*(r00));
IkReal x1408=((px)*(r02));
IkReal x1409=((sj0)*(sj1));
IkReal x1410=((cj1)*(pz));
IkReal x1411=((cj1)*(py)*(r00));
IkReal x1412=((IkReal(139000.000000000))*(x1409));
IkReal x1413=((cj0)*(px)*(sj1));
IkReal x1414=((cj1)*(px)*(r01));
IkReal x1415=((cj0)*(pz)*(r01)*(sj1));
IkReal x1416=((cj0)*(py)*(r02)*(sj1));
Atan2Value<IkReal> x1417 = IKatan2WithCheck(((gconst10)*(((((IkReal(139000.000000000))*(x1415)))+(((IkReal(139000.000000000))*(x1414)))+(((IkReal(-139000.000000000))*(x1416)))+(((IkReal(-139000.000000000))*(x1411)))+(((py)*(x1405)*(x1409)))+(((IkReal(-1.00000000000000))*(x1407)*(x1412)))+(((IkReal(-51870.0000000000))*(sj3)))+(((x1405)*(x1413)))+(((x1406)*(x1408)*(x1409)))+(((x1406)*(x1414)))+(((x1406)*(x1415)))+(((IkReal(-1.00000000000000))*(x1406)*(x1407)*(x1409)))+(((IkReal(-1.00000000000000))*(x1406)*(x1411)))+(((IkReal(-1.00000000000000))*(x1406)*(x1416)))+(((IkReal(-1.00000000000000))*(x1405)*(x1410)))+(((x1408)*(x1412)))))),((gconst10)*(((IkReal(-26410.0000000000))+(((IkReal(-1.00000000000000))*(x1405)*(x1408)*(x1409)))+(((IkReal(139000.000000000))*(x1413)))+(((py)*(x1412)))+(((IkReal(-139000.000000000))*(x1410)))+(((x1405)*(x1416)))+(((x1405)*(x1411)))+(((py)*(x1406)*(x1409)))+(((x1405)*(x1407)*(x1409)))+(((x1406)*(x1413)))+(((IkReal(-1.00000000000000))*(x1406)*(x1410)))+(((IkReal(-1.00000000000000))*(x1405)*(x1415)))+(((IkReal(-1.00000000000000))*(x1405)*(x1414)))+(((IkReal(-51870.0000000000))*(cj3)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1417.valid ) {
    continue;
}
j2array[0]=x1417.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1418=IKcos(j2);
IkReal x1419=IKsin(j2);
IkReal x1420=((px)*(sj1));
IkReal x1421=((IkReal(0.273000000000000))*(cj3));
IkReal x1422=((py)*(sj1));
IkReal x1423=((IkReal(1.00000000000000))*(r00));
IkReal x1424=((cj1)*(sj0));
IkReal x1425=((IkReal(1.00000000000000))*(px));
IkReal x1426=((IkReal(1.00000000000000))*(pz));
IkReal x1427=((cj0)*(r01));
IkReal x1428=((pz)*(sj1));
IkReal x1429=((IkReal(0.273000000000000))*(sj3));
IkReal x1430=((cj0)*(cj1));
IkReal x1431=((IkReal(0.139000000000000))*(x1419));
IkReal x1432=((IkReal(0.139000000000000))*(x1418));
IkReal x1433=((x1418)*(x1429));
IkReal x1434=((x1419)*(x1421));
IkReal x1435=((x1419)*(x1429));
IkReal x1436=((x1418)*(x1421));
IkReal x1437=((x1434)+(x1431));
IkReal x1438=((x1436)+(x1435)+(x1432));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x1438)))+(((IkReal(-1.00000000000000))*(cj1)*(x1426)))+(((sj0)*(x1422)))+(((cj0)*(x1420))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1433)))+(((IkReal(-1.00000000000000))*(sj1)*(x1426)))+(x1437)+(((IkReal(-1.00000000000000))*(x1425)*(x1430)))+(((IkReal(-1.00000000000000))*(py)*(x1424))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(py)*(x1423)))+(((IkReal(-1.00000000000000))*(sj0)*(x1423)*(x1428)))+(((r02)*(sj0)*(x1420)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1422)))+(((IkReal(-1.00000000000000))*(x1437)))+(x1433)+(((cj1)*(px)*(r01)))+(((x1427)*(x1428))));
evalcond[3]=((((r01)*(x1420)))+(((IkReal(-0.190000000000000))*(x1427)))+(((IkReal(-1.00000000000000))*(x1438)))+(((pz)*(r00)*(x1424)))+(((IkReal(-1.00000000000000))*(x1422)*(x1423)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r02)*(x1424)*(x1425)))+(((py)*(r02)*(x1430)))+(((IkReal(-1.00000000000000))*(cj1)*(x1426)*(x1427))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1439=((IkReal(139000.000000000))*(cj1));
IkReal x1440=((py)*(sj0));
IkReal x1441=((cj0)*(px));
IkReal x1442=((IkReal(273000.000000000))*(cj3));
IkReal x1443=((IkReal(139000.000000000))*(sj1));
IkReal x1444=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x1445=((IkReal(273000.000000000))*(sj1)*(sj3));
Atan2Value<IkReal> x1446 = IKatan2WithCheck(((gconst9)*(((((IkReal(-1.00000000000000))*(pz)*(sj1)*(x1442)))+(((IkReal(-1.00000000000000))*(cj1)*(x1440)*(x1442)))+(((IkReal(-1.00000000000000))*(cj1)*(x1441)*(x1442)))+(((IkReal(-1.00000000000000))*(x1439)*(x1441)))+(((IkReal(-1.00000000000000))*(x1439)*(x1440)))+(((IkReal(-1.00000000000000))*(x1441)*(x1445)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x1443)))+(((pz)*(x1444)))+(((IkReal(-1.00000000000000))*(x1440)*(x1445)))))),((gconst9)*(((IkReal(26410.0000000000))+(((x1441)*(x1444)))+(((x1440)*(x1444)))+(((IkReal(-1.00000000000000))*(sj1)*(x1441)*(x1442)))+(((IkReal(-1.00000000000000))*(x1441)*(x1443)))+(((pz)*(x1439)))+(((IkReal(-1.00000000000000))*(sj1)*(x1440)*(x1442)))+(((IkReal(51870.0000000000))*(cj3)))+(((pz)*(x1445)))+(((cj1)*(pz)*(x1442)))+(((IkReal(-1.00000000000000))*(x1440)*(x1443)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1446.valid ) {
    continue;
}
j2array[0]=x1446.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1447=IKcos(j2);
IkReal x1448=IKsin(j2);
IkReal x1449=((px)*(sj1));
IkReal x1450=((IkReal(0.273000000000000))*(cj3));
IkReal x1451=((py)*(sj1));
IkReal x1452=((IkReal(1.00000000000000))*(r00));
IkReal x1453=((cj1)*(sj0));
IkReal x1454=((IkReal(1.00000000000000))*(px));
IkReal x1455=((IkReal(1.00000000000000))*(pz));
IkReal x1456=((cj0)*(r01));
IkReal x1457=((pz)*(sj1));
IkReal x1458=((IkReal(0.273000000000000))*(sj3));
IkReal x1459=((cj0)*(cj1));
IkReal x1460=((IkReal(0.139000000000000))*(x1448));
IkReal x1461=((IkReal(0.139000000000000))*(x1447));
IkReal x1462=((x1447)*(x1458));
IkReal x1463=((x1448)*(x1450));
IkReal x1464=((x1448)*(x1458));
IkReal x1465=((x1447)*(x1450));
IkReal x1466=((x1460)+(x1463));
IkReal x1467=((x1465)+(x1464)+(x1461));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x1467)))+(((IkReal(-1.00000000000000))*(cj1)*(x1455)))+(((sj0)*(x1451)))+(((cj0)*(x1449))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1462)))+(((IkReal(-1.00000000000000))*(x1454)*(x1459)))+(((IkReal(-1.00000000000000))*(py)*(x1453)))+(x1466)+(((IkReal(-1.00000000000000))*(sj1)*(x1455))));
evalcond[2]=((((x1456)*(x1457)))+(((IkReal(-1.00000000000000))*(x1466)))+(((r02)*(sj0)*(x1449)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x1452)))+(((IkReal(-1.00000000000000))*(sj0)*(x1452)*(x1457)))+(x1462)+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1451))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x1453)*(x1454)))+(((pz)*(r00)*(x1453)))+(((IkReal(-1.00000000000000))*(x1467)))+(((IkReal(-1.00000000000000))*(cj1)*(x1455)*(x1456)))+(((IkReal(-0.190000000000000))*(x1456)))+(((py)*(r02)*(x1459)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x1451)*(x1452)))+(((r01)*(x1449))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1468=((IkReal(139.000000000000))*(sj1));
IkReal x1469=((cj0)*(r00));
IkReal x1470=((IkReal(1000.00000000000))*(cj4));
IkReal x1471=((cj1)*(cj3));
IkReal x1472=((IkReal(273.000000000000))*(r02));
IkReal x1473=((cj1)*(sj3));
IkReal x1474=((IkReal(190.000000000000))*(cj4));
IkReal x1475=((IkReal(273.000000000000))*(r01));
IkReal x1476=((cj3)*(sj1));
IkReal x1477=((cj0)*(px));
IkReal x1478=((sj1)*(sj3));
IkReal x1479=((sj0)*(x1478));
Atan2Value<IkReal> x1480 = IKatan2WithCheck(((gconst2)*(((((sj0)*(x1475)*(x1476)))+(((IkReal(-1.00000000000000))*(x1471)*(x1472)))+(((IkReal(273.000000000000))*(x1469)*(x1476)))+(((IkReal(-1.00000000000000))*(py)*(x1470)*(x1479)))+(((x1468)*(x1469)))+(((r01)*(sj0)*(x1468)))+(((sj3)*(x1474)))+(((pz)*(x1470)*(x1473)))+(((IkReal(-139.000000000000))*(cj1)*(r02)))+(((IkReal(-1.00000000000000))*(x1470)*(x1477)*(x1478)))))),((gconst2)*(((((IkReal(-273.000000000000))*(x1469)*(x1478)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x1470)*(x1476)))+(((x1472)*(x1473)))+(((IkReal(-1.00000000000000))*(x1475)*(x1479)))+(((cj3)*(x1474)))+(((IkReal(-1.00000000000000))*(x1470)*(x1476)*(x1477)))+(((pz)*(x1470)*(x1471)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1480.valid ) {
    continue;
}
j2array[0]=x1480.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1481=IKcos(j2);
IkReal x1482=IKsin(j2);
IkReal x1483=(pz)*(pz);
IkReal x1484=(py)*(py);
IkReal x1485=(px)*(px);
IkReal x1486=((px)*(sj1));
IkReal x1487=((sj0)*(sj1));
IkReal x1488=((IkReal(0.0552080000000000))*(sj3));
IkReal x1489=((pp)*(r01));
IkReal x1490=((cj1)*(sj0));
IkReal x1491=((pz)*(r01));
IkReal x1492=((IkReal(0.380000000000000))*(sj0));
IkReal x1493=((IkReal(1.00000000000000))*(sj1));
IkReal x1494=((py)*(r00));
IkReal x1495=((pz)*(r02));
IkReal x1496=((IkReal(2.00000000000000))*(cj0));
IkReal x1497=((IkReal(2.00000000000000))*(py));
IkReal x1498=((pz)*(r00));
IkReal x1499=((pp)*(r02));
IkReal x1500=((IkReal(1.00000000000000))*(cj1));
IkReal x1501=((cj0)*(r00));
IkReal x1502=((IkReal(0.0361000000000000))*(cj1));
IkReal x1503=((py)*(r02));
IkReal x1504=((IkReal(0.0361000000000000))*(r01));
IkReal x1505=((IkReal(0.0361000000000000))*(sj1));
IkReal x1506=((py)*(r01));
IkReal x1507=((IkReal(2.00000000000000))*(px));
IkReal x1508=((cj1)*(px));
IkReal x1509=((IkReal(0.0938500000000000))*(cj3));
IkReal x1510=((IkReal(0.380000000000000))*(cj0));
IkReal x1511=((px)*(r02));
IkReal x1512=((cj4)*(x1482));
IkReal x1513=((cj4)*(x1481));
IkReal x1514=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x1515=((IkReal(0.139000000000000))*(x1482));
IkReal x1516=((IkReal(0.139000000000000))*(x1481));
IkReal x1517=((r00)*(x1485));
IkReal x1518=((IkReal(0.273000000000000))*(x1481));
IkReal x1519=((IkReal(0.273000000000000))*(cj3)*(x1482));
IkReal x1520=((x1495)*(x1497));
IkReal x1521=((IkReal(2.00000000000000))*(r01)*(x1484));
IkReal x1522=((IkReal(2.00000000000000))*(r02)*(x1483));
evalcond[0]=((((r01)*(x1487)))+(((cj3)*(x1512)))+(((IkReal(-1.00000000000000))*(sj3)*(x1513)))+(((sj1)*(x1501)))+(((IkReal(-1.00000000000000))*(r02)*(x1500))));
evalcond[1]=((((sj3)*(x1512)))+(((cj3)*(x1513)))+(((IkReal(-1.00000000000000))*(r01)*(x1490)))+(((IkReal(-1.00000000000000))*(r02)*(x1493)))+(((IkReal(-1.00000000000000))*(x1500)*(x1501))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x1516)))+(((IkReal(-0.273000000000000))*(sj3)*(x1482)))+(((py)*(x1487)))+(((cj0)*(x1486)))+(((IkReal(-1.00000000000000))*(cj3)*(x1518)))+(((IkReal(-1.00000000000000))*(pz)*(x1500))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)*(x1518)))+(x1519)+(x1515)+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1500)))+(((IkReal(-1.00000000000000))*(py)*(x1490)))+(((IkReal(-1.00000000000000))*(pz)*(x1493))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x1481)*(x1514)))+(((IkReal(-1.00000000000000))*(x1487)*(x1498)))+(((cj0)*(sj1)*(x1491)))+(((IkReal(-1.00000000000000))*(x1494)*(x1500)))+(((r01)*(x1508)))+(((r02)*(sj0)*(x1486)))+(((sj4)*(x1519)))+(((sj4)*(x1515)))+(((IkReal(-1.00000000000000))*(cj0)*(x1493)*(x1503))));
evalcond[5]=((((r01)*(x1486)))+(((IkReal(-1.00000000000000))*(x1490)*(x1511)))+(((IkReal(-1.00000000000000))*(x1493)*(x1494)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((cj0)*(cj1)*(x1503)))+(((cj3)*(sj4)*(x1518)))+(((sj4)*(x1516)))+(((x1482)*(x1514)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(x1491)*(x1500)))+(((x1490)*(x1498))));
evalcond[6]=((((x1509)*(x1512)))+(((IkReal(-1.00000000000000))*(x1499)*(x1500)))+(((IkReal(0.0758940000000000))*(x1512)))+(((IkReal(-1.00000000000000))*(x1488)*(x1513)))+(((IkReal(0.380000000000000))*(x1495)))+(((IkReal(-1.00000000000000))*(sj1)*(x1496)*(x1517)))+(((cj1)*(x1522)))+(((x1487)*(x1489)))+(((IkReal(-2.00000000000000))*(sj0)*(x1486)*(x1494)))+(((IkReal(-1.00000000000000))*(x1501)*(x1505)))+(((IkReal(0.380000000000000))*(x1506)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((cj1)*(x1498)*(x1507)))+(((IkReal(-1.00000000000000))*(x1487)*(x1504)))+(((r02)*(x1502)))+(((cj1)*(x1491)*(x1497)))+(((IkReal(-1.00000000000000))*(x1487)*(x1521)))+(((IkReal(-1.00000000000000))*(x1487)*(x1520)))+(((pp)*(sj1)*(x1501)))+(((IkReal(-1.00000000000000))*(x1486)*(x1496)*(x1506)))+(((IkReal(-1.00000000000000))*(x1486)*(x1495)*(x1496))));
evalcond[7]=((((x1492)*(x1503)))+(((x1509)*(x1513)))+(((IkReal(2.00000000000000))*(x1486)*(x1498)))+(((x1510)*(x1511)))+(((x1488)*(x1512)))+(((IkReal(-1.00000000000000))*(x1498)*(x1510)))+(((x1490)*(x1521)))+(((x1490)*(x1520)))+(((IkReal(0.0758940000000000))*(x1513)))+(((cj1)*(x1496)*(x1517)))+(((IkReal(-1.00000000000000))*(x1490)*(x1504)))+(((x1495)*(x1496)*(x1508)))+(((sj1)*(x1522)))+(((IkReal(-1.00000000000000))*(x1489)*(x1490)))+(((IkReal(-1.00000000000000))*(x1501)*(x1502)))+(((x1496)*(x1506)*(x1508)))+(((IkReal(-1.00000000000000))*(x1493)*(x1499)))+(((IkReal(-1.00000000000000))*(r02)*(x1505)))+(((x1490)*(x1494)*(x1507)))+(((IkReal(-1.00000000000000))*(x1491)*(x1492)))+(((IkReal(-1.00000000000000))*(pp)*(x1500)*(x1501)))+(((sj1)*(x1491)*(x1497))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1523=((IkReal(1.00000000000000))*(sj1));
IkReal x1524=((cj1)*(sj3));
IkReal x1525=((cj0)*(r00));
IkReal x1526=((cj3)*(r02));
IkReal x1527=((r01)*(sj0));
IkReal x1528=((sj1)*(sj3));
IkReal x1529=((cj3)*(x1527));
Atan2Value<IkReal> x1530 = IKatan2WithCheck(((gconst1)*(((((x1524)*(x1527)))+(((x1524)*(x1525)))+(((cj1)*(x1526)))+(((IkReal(-1.00000000000000))*(cj3)*(x1523)*(x1525)))+(((IkReal(-1.00000000000000))*(x1523)*(x1529)))+(((r02)*(x1528)))))),((gconst1)*(((((x1525)*(x1528)))+(((sj1)*(x1526)))+(((cj1)*(x1529)))+(((x1527)*(x1528)))+(((IkReal(-1.00000000000000))*(r02)*(x1524)))+(((cj1)*(cj3)*(x1525)))))),IKFAST_ATAN2_MAGTHRESH);
if( !x1530.valid ) {
    continue;
}
j2array[0]=x1530.value;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1531=IKcos(j2);
IkReal x1532=IKsin(j2);
IkReal x1533=(pz)*(pz);
IkReal x1534=(py)*(py);
IkReal x1535=(px)*(px);
IkReal x1536=((px)*(sj1));
IkReal x1537=((sj0)*(sj1));
IkReal x1538=((IkReal(0.0552080000000000))*(sj3));
IkReal x1539=((pp)*(r01));
IkReal x1540=((cj1)*(sj0));
IkReal x1541=((pz)*(r01));
IkReal x1542=((IkReal(0.380000000000000))*(sj0));
IkReal x1543=((IkReal(1.00000000000000))*(sj1));
IkReal x1544=((py)*(r00));
IkReal x1545=((pz)*(r02));
IkReal x1546=((IkReal(2.00000000000000))*(cj0));
IkReal x1547=((IkReal(2.00000000000000))*(py));
IkReal x1548=((pz)*(r00));
IkReal x1549=((pp)*(r02));
IkReal x1550=((IkReal(1.00000000000000))*(cj1));
IkReal x1551=((cj0)*(r00));
IkReal x1552=((IkReal(0.0361000000000000))*(cj1));
IkReal x1553=((py)*(r02));
IkReal x1554=((IkReal(0.0361000000000000))*(r01));
IkReal x1555=((IkReal(0.0361000000000000))*(sj1));
IkReal x1556=((py)*(r01));
IkReal x1557=((IkReal(2.00000000000000))*(px));
IkReal x1558=((cj1)*(px));
IkReal x1559=((IkReal(0.0938500000000000))*(cj3));
IkReal x1560=((IkReal(0.380000000000000))*(cj0));
IkReal x1561=((px)*(r02));
IkReal x1562=((cj4)*(x1532));
IkReal x1563=((cj4)*(x1531));
IkReal x1564=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x1565=((IkReal(0.139000000000000))*(x1532));
IkReal x1566=((IkReal(0.139000000000000))*(x1531));
IkReal x1567=((r00)*(x1535));
IkReal x1568=((IkReal(0.273000000000000))*(x1531));
IkReal x1569=((IkReal(0.273000000000000))*(cj3)*(x1532));
IkReal x1570=((x1545)*(x1547));
IkReal x1571=((IkReal(2.00000000000000))*(r01)*(x1534));
IkReal x1572=((IkReal(2.00000000000000))*(r02)*(x1533));
evalcond[0]=((((r01)*(x1537)))+(((IkReal(-1.00000000000000))*(r02)*(x1550)))+(((cj3)*(x1562)))+(((sj1)*(x1551)))+(((IkReal(-1.00000000000000))*(sj3)*(x1563))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x1543)))+(((IkReal(-1.00000000000000))*(r01)*(x1540)))+(((cj3)*(x1563)))+(((IkReal(-1.00000000000000))*(x1550)*(x1551)))+(((sj3)*(x1562))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-0.273000000000000))*(sj3)*(x1532)))+(((IkReal(-1.00000000000000))*(pz)*(x1550)))+(((py)*(x1537)))+(((IkReal(-1.00000000000000))*(cj3)*(x1568)))+(((IkReal(-1.00000000000000))*(x1566)))+(((cj0)*(x1536))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)*(x1568)))+(((IkReal(-1.00000000000000))*(pz)*(x1543)))+(((IkReal(-1.00000000000000))*(py)*(x1540)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x1550)))+(x1569)+(x1565));
evalcond[4]=((((r01)*(x1558)))+(((IkReal(-1.00000000000000))*(cj0)*(x1543)*(x1553)))+(((IkReal(-1.00000000000000))*(x1537)*(x1548)))+(((cj0)*(sj1)*(x1541)))+(((sj4)*(x1565)))+(((sj4)*(x1569)))+(((IkReal(-1.00000000000000))*(x1531)*(x1564)))+(((IkReal(-1.00000000000000))*(x1544)*(x1550)))+(((r02)*(sj0)*(x1536))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1543)*(x1544)))+(((x1532)*(x1564)))+(((r01)*(x1536)))+(((IkReal(-1.00000000000000))*(cj0)*(x1541)*(x1550)))+(((sj4)*(x1566)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((cj0)*(cj1)*(x1553)))+(((x1540)*(x1548)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x1540)*(x1561)))+(((cj3)*(sj4)*(x1568))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1536)*(x1546)*(x1556)))+(((IkReal(-1.00000000000000))*(x1549)*(x1550)))+(((cj1)*(x1541)*(x1547)))+(((cj1)*(x1572)))+(((x1537)*(x1539)))+(((IkReal(-1.00000000000000))*(sj1)*(x1546)*(x1567)))+(((IkReal(-1.00000000000000))*(x1537)*(x1554)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-2.00000000000000))*(sj0)*(x1536)*(x1544)))+(((IkReal(-1.00000000000000))*(x1537)*(x1571)))+(((IkReal(-1.00000000000000))*(x1537)*(x1570)))+(((cj1)*(x1548)*(x1557)))+(((r02)*(x1552)))+(((IkReal(0.380000000000000))*(x1556)))+(((IkReal(0.380000000000000))*(x1545)))+(((IkReal(-1.00000000000000))*(x1551)*(x1555)))+(((IkReal(-1.00000000000000))*(x1538)*(x1563)))+(((x1559)*(x1562)))+(((IkReal(0.0758940000000000))*(x1562)))+(((IkReal(-1.00000000000000))*(x1536)*(x1545)*(x1546)))+(((pp)*(sj1)*(x1551))));
evalcond[7]=((((x1560)*(x1561)))+(((IkReal(-1.00000000000000))*(x1539)*(x1540)))+(((IkReal(-1.00000000000000))*(pp)*(x1550)*(x1551)))+(((IkReal(-1.00000000000000))*(x1543)*(x1549)))+(((IkReal(-1.00000000000000))*(x1540)*(x1554)))+(((x1538)*(x1562)))+(((IkReal(-1.00000000000000))*(x1548)*(x1560)))+(((sj1)*(x1541)*(x1547)))+(((IkReal(-1.00000000000000))*(r02)*(x1555)))+(((IkReal(2.00000000000000))*(x1536)*(x1548)))+(((x1545)*(x1546)*(x1558)))+(((x1540)*(x1544)*(x1557)))+(((x1546)*(x1556)*(x1558)))+(((sj1)*(x1572)))+(((x1540)*(x1570)))+(((x1540)*(x1571)))+(((IkReal(-1.00000000000000))*(x1551)*(x1552)))+(((x1559)*(x1563)))+(((IkReal(0.0758940000000000))*(x1563)))+(((IkReal(-1.00000000000000))*(x1541)*(x1542)))+(((cj1)*(x1546)*(x1567)))+(((x1542)*(x1553))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
