#define IKFAST_NAMESPACE ik_katana5d
#include "plugindefs.h"

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-08-05 17:48:56.588290
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((IkReal(0.139000000000000))*(x3));
x11=((IkReal(0.273000000000000))*(x0));
x12=((IkReal(0.273000000000000))*(x6));
x13=((IkReal(1.00000000000000))*(x5));
x14=((IkReal(1.00000000000000))*(x7));
x15=((IkReal(0.190000000000000))*(x1));
x16=((x0)*(x2));
x17=((x1)*(x3));
x18=((x2)*(x4));
x19=((x1)*(x4));
x20=((x2)*(x3));
eetrans[0]=((((IkReal(0.139000000000000))*(x0)*(x19)))+(((x0)*(x15)))+(((x7)*(((((x11)*(x20)))+(((x11)*(x19)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x11)*(x18)))+(((x11)*(x17)))))))+(((x10)*(x16))));
IkReal x21=((IkReal(1.00000000000000))*(x6));
IkReal x22=((IkReal(1.00000000000000))*(x12));
eetrans[1]=((((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x22)))+(((x12)*(x18)))))))+(((IkReal(-0.139000000000000))*(x19)*(x6)))+(((IkReal(-1.00000000000000))*(x10)*(x2)*(x21)))+(((x7)*(((((IkReal(-1.00000000000000))*(x19)*(x22)))+(((IkReal(-1.00000000000000))*(x20)*(x22)))))))+(((IkReal(-1.00000000000000))*(x15)*(x21))));
eetrans[2]=((IkReal(0.201500000000000))+(((x7)*(((((IkReal(-0.273000000000000))*(x17)))+(((IkReal(0.273000000000000))*(x18)))))))+(((IkReal(-1.00000000000000))*(x1)*(x10)))+(((IkReal(0.190000000000000))*(x2)))+(((IkReal(0.139000000000000))*(x18)))+(((x5)*(((((IkReal(0.273000000000000))*(x20)))+(((IkReal(0.273000000000000))*(x19))))))));
eerot[0]=((((x9)*(((((x7)*(((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((x16)*(x4)))))))+(((x5)*(((((x0)*(x19)))+(((x16)*(x3)))))))))))+(((x6)*(x8))));
eerot[1]=((((x0)*(x8)))+(((IkReal(-1.00000000000000))*(x9)*(((((x14)*(((((x18)*(x6)))+(((IkReal(-1.00000000000000))*(x17)*(x6)))))))+(((x13)*(((((x19)*(x6)))+(((x20)*(x6))))))))))));
eerot[2]=((IkReal(-1.00000000000000))*(x9)*(((((x13)*(((((IkReal(-1.00000000000000))*(x18)))+(x17)))))+(((x14)*(((x19)+(x20))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=((IkReal(-1.00000000000000))*(r01));
new_py=((IkReal(-1.00000000000000))*(py));
new_r02=((IkReal(-1.00000000000000))*(r02));
new_pz=((IkReal(0.201500000000000))+(((IkReal(-1.00000000000000))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x23=IKatan2(((IkReal(-1.00000000000000))*(py)), px);
j0array[0]=((IkReal(-1.00000000000000))*(x23));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x23))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x24=(r00)*(r00);
IkReal x25=(pz)*(pz);
IkReal x26=(r01)*(r01);
IkReal x27=(r02)*(r02);
IkReal x28=(py)*(py);
IkReal x29=(px)*(px);
IkReal x30=(pz)*(pz)*(pz);
IkReal x31=((r02)*(sj0));
IkReal x32=((IkReal(3.04000000000000))*(cj0));
IkReal x33=((IkReal(0.577600000000000))*(py));
IkReal x34=((px)*(r00));
IkReal x35=((pz)*(r00));
IkReal x36=((IkReal(3.04000000000000))*(py));
IkReal x37=((pz)*(r01));
IkReal x38=((cj0)*(r01));
IkReal x39=((pp)*(r01));
IkReal x40=((IkReal(0.577600000000000))*(cj0));
IkReal x41=((IkReal(1.52000000000000))*(sj0));
IkReal x42=((py)*(r00));
IkReal x43=((r01)*(sj0));
IkReal x44=((pp)*(py));
IkReal x45=((IkReal(1.52000000000000))*(pp));
IkReal x46=((r00)*(r02));
IkReal x47=((px)*(r02));
IkReal x48=((px)*(x24));
IkReal x49=((r02)*(x29));
IkReal x50=((sj0)*(x26));
IkReal x51=((r01)*(x25));
IkReal x52=((sj0)*(x27));
IkReal x53=((IkReal(0.0430479504000000))*(cj0)*(x46));
IkReal x54=((IkReal(0.0430479504000000))*(r01)*(x31));
IkReal x55=((x40)*(x46));
IkReal x56=((cj0)*(px)*(x27));
IkReal x57=((IkReal(0.138788160000000))*(py)*(x50));
IkReal x58=((IkReal(0.226568160000000))*(cj0)*(r02)*(x35));
IkReal x59=((IkReal(0.226568160000000))*(x31)*(x37));
IkReal x60=((IkReal(0.138788160000000))*(x34)*(x43));
IkReal x61=((IkReal(0.138788160000000))*(cj0)*(x48));
IkReal x62=((IkReal(0.138788160000000))*(x38)*(x42));
IkReal x63=((IkReal(0.0877800000000000))*(x56));
IkReal x64=((IkReal(0.0877800000000000))*(py)*(x52));
IkReal x65=((IkReal(0.577600000000000))*(x31)*(x39));
IkReal x66=((pp)*(x55));
IkReal x67=((px)*(pz)*(x27)*(x40));
IkReal x68=((IkReal(0.577600000000000))*(x31)*(x51));
IkReal x69=((x45)*(x56));
IkReal x70=((x32)*(x48)*((px)*(px)));
IkReal x71=((pz)*(x33)*(x52));
IkReal x72=((x33)*(x35)*(x38));
IkReal x73=((x29)*(x55));
IkReal x74=((pz)*(x40)*(x48));
IkReal x75=((IkReal(0.577600000000000))*(r01)*(x28)*(x31));
IkReal x76=((pz)*(x33)*(x50));
IkReal x77=((x27)*(x41)*(x44));
IkReal x78=((x25)*(x55));
IkReal x79=((x33)*(x38)*(x47));
IkReal x80=((x36)*(x50)*((py)*(py)));
IkReal x81=((IkReal(3.04000000000000))*(r01)*(x30)*(x31));
IkReal x82=((x31)*(x33)*(x34));
IkReal x83=((IkReal(0.577600000000000))*(sj0)*(x34)*(x37));
IkReal x84=((x30)*(x32)*(x46));
IkReal x85=((cj0)*(x45)*(x48));
IkReal x86=((IkReal(3.04000000000000))*(pp)*(x31)*(x37));
IkReal x87=((x26)*(x41)*(x44));
IkReal x88=((pp)*(r02)*(x32)*(x35));
IkReal x89=((x34)*(x39)*(x41));
IkReal x90=((x38)*(x42)*(x45));
IkReal x91=((IkReal(3.04000000000000))*(x28)*(x31)*(x37));
IkReal x92=((pz)*(x31)*(x34)*(x36));
IkReal x93=((x25)*(x32)*(x48));
IkReal x94=((py)*(x32)*(x37)*(x47));
IkReal x95=((IkReal(3.04000000000000))*(x25)*(x34)*(x43));
IkReal x96=((x32)*(x42)*(x51));
IkReal x97=((x32)*(x35)*(x49));
IkReal x98=((x25)*(x36)*(x50));
IkReal x99=((px)*(x26)*(x28)*(x32));
IkReal x100=((sj0)*(x24)*(x29)*(x36));
IkReal x101=((IkReal(6.08000000000000))*(x29)*(x38)*(x42));
IkReal x102=((IkReal(6.08000000000000))*(x28)*(x34)*(x43));
IkReal x103=((x65)+(x66));
IkReal x104=((x63)+(x64)+(x88)+(x89)+(x86)+(x87)+(x85)+(x90));
IkReal x105=((x76)+(x75)+(x74)+(x73)+(x72)+(x71)+(x79)+(x78)+(x54)+(x53)+(x67)+(x68)+(x82)+(x83));
IkReal x106=((x100)+(x101)+(x102)+(x77)+(x70)+(x59)+(x58)+(x57)+(x60)+(x61)+(x62)+(x69)+(x80)+(x81)+(x84)+(x99)+(x98)+(x91)+(x93)+(x92)+(x95)+(x94)+(x97)+(x96));
op[0]=((((IkReal(-0.0877800000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.0764320000000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.0764320000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.52000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.00833715086400000))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0764320000000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(0.0438900000000000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-0.0764320000000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(1.52000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0764320000000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(3.04000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.00242483673600000))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0438900000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(0.182616000000000))*(pp)*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.654032000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-1.52000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0382160000000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-1.52000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(1.52000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.0764320000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.0764320000000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.760000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-1.52000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.0578000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-1.52000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(0.00242483673600000))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(0.0578000000000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-1.52000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(0.0693940800000000))*(pz)*((r02)*(r02))))+(((IkReal(-0.0764320000000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.654032000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(1.52000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0438900000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-0.0438900000000000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.0578000000000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.0438900000000000))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0764320000000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.0438900000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-1.52000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(0.0693940800000000))*(px)*(r00)*(r02)))+(((IkReal(-0.760000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(0.760000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-0.760000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-1.52000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(-4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.288800000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0578000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(1.52000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(0.00484967347200000))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.509632000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0382160000000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(0.0693940800000000))*(py)*(r01)*(r02))));
op[1]=((((IkReal(-1.00000000000000))*(x105)))+(((IkReal(-1.00000000000000))*(x104)))+(x106)+(x103));
op[2]=((((IkReal(8.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.30806400000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-0.212368000000000))*(pp)*((r02)*(r02))))+(((IkReal(-0.268464000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.134232000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-32.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(0.654032000000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.0381982769280000))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.30806400000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.288800000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(-2.00000000000000))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.134232000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(0.0263736486720000))*((r02)*(r02))))+(((IkReal(8.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-1.03960000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-1.30806400000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(-16.0000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-8.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.134232000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-16.0000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-1.03960000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-16.0000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.152864000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-2.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-1.30806400000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.135936000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.152864000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-0.0381982769280000))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(-1.30806400000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(8.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(-8.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-32.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.0763965538560000))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-32.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py))))+(((IkReal(1.30806400000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(-16.0000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-16.0000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-0.288800000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(8.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-0.577600000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-1.30806400000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(8.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-16.0000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(0.654032000000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-1.30806400000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-1.03960000000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.134232000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-8.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.268464000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-8.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-1.03960000000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-1.30806400000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-16.0000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02))));
op[3]=((((IkReal(-1.00000000000000))*(x104)))+(((IkReal(-1.00000000000000))*(x103)))+(x105)+(x106));
op[4]=((((IkReal(-0.0438900000000000))*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r01)*(r01))))+(((IkReal(-0.0764320000000000))*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(1.52000000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))*((pz)*(pz))))+(((IkReal(0.0764320000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.134232000000000))*(cj0)*(px)*(py)*(sj0)*((r02)*(r02))))+(((IkReal(-0.00833715086400000))*((r02)*(r02))))+(((IkReal(-1.52000000000000))*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.0438900000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.144400000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0693940800000000))*(pz)*((r02)*(r02))))+(((IkReal(-0.0764320000000000))*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((pp)*(pp))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(py)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.0764320000000000))*(cj0)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.0764320000000000))*(cj0)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(cj0)*(px)*(py)*(sj0)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-3.04000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(0.00242483673600000))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.182616000000000))*(pp)*((r02)*(r02))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-3.04000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r02)*(r02))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(-8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.654032000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-1.52000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.760000000000000))*(pp)*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0382160000000000))*(pp)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(pz)*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-1.52000000000000))*(cj0)*(pp)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(1.52000000000000))*(cj0)*(px)*(py)*(pz)*(sj0)*((r00)*(r00))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(cj0)*(px)*(sj0)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(0.760000000000000))*(pp)*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(-0.0764320000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.0764320000000000))*(px)*(py)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(pz)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(0.0438900000000000))*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.134232000000000))*(cj0)*(r00)*(r01)*(sj0)*((pz)*(pz))))+(((IkReal(-0.0671160000000000))*((cj0)*(cj0))*((px)*(px))*((r02)*(r02))))+(((IkReal(0.760000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(-8.00000000000000))*(px)*(pz)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.52000000000000))*(r00)*(r02)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(-0.0438900000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px))*((py)*(py))*((r01)*(r01))))+(((IkReal(-1.52000000000000))*(py)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.52000000000000))*(pz)*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(0.0578000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)*((pp)*(pp))))+(((IkReal(0.00242483673600000))*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(0.760000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-16.0000000000000))*(cj0)*(py)*(pz)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(0.0578000000000000))*(px)*(pz)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-8.00000000000000))*(py)*(pz)*(r01)*(r02)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(1.52000000000000))*(py)*(r01)*(r02)*((pz)*(pz))*((sj0)*(sj0))))+(((IkReal(-0.144400000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.0693940800000000))*(px)*(r00)*(r02)))+(((IkReal(-8.00000000000000))*(py)*(r00)*(r01)*((cj0)*(cj0))*((px)*(px)*(px))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(r00)*(r01)*(sj0)*((py)*(py))))+(((IkReal(-0.760000000000000))*(pp)*(pz)*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0764320000000000))*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.654032000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.760000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((cj0)*(cj0))*((px)*(px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-3.04000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-1.52000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0693940800000000))*(py)*(r01)*(r02)))+(((IkReal(4.00000000000000))*(pp)*((py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((pz)*(pz))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((cj0)*(cj0))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-3.04000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(0.0578000000000000))*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(0.0877800000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)))+(((IkReal(-0.0438900000000000))*(px)*(r00)*(r02)*((cj0)*(cj0))))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(1.52000000000000))*(cj0)*(pz)*(r00)*(r01)*(sj0)*((px)*(px))))+(((IkReal(-0.0764320000000000))*(cj0)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.0438900000000000))*(pz)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(1.52000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj0)*(cj0))))+(((IkReal(-1.52000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj0)*(sj0))))+(((IkReal(-0.0671160000000000))*((py)*(py))*((r02)*(r02))*((sj0)*(sj0))))+(((IkReal(1.52000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-1.52000000000000))*(px)*(r00)*(r02)*((py)*(py))*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((sj0)*(sj0))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r00)*(r00))))+(((IkReal(0.760000000000000))*(cj0)*(pp)*(py)*(r00)*(r02)*(sj0)))+(((IkReal(4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.52000000000000))*(cj0)*(px)*(r01)*(r02)*(sj0)*((pz)*(pz))))+(((IkReal(-4.00000000000000))*((px)*(px))*((py)*(py))*((r00)*(r00))*((sj0)*(sj0))))+(((IkReal(-16.0000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)*((py)*(py))))+(((IkReal(-4.00000000000000))*((py)*(py)*(py)*(py))*((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(-0.288800000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-3.04000000000000))*(cj0)*(py)*(r00)*(r02)*(sj0)*((px)*(px))))+(((IkReal(-8.00000000000000))*(pz)*(r01)*(r02)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(0.0578000000000000))*(cj0)*(px)*(pz)*(r01)*(r02)*(sj0)))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(py)*(pz)*(r00)*(r02)*(sj0)))+(((IkReal(0.00484967347200000))*(cj0)*(r00)*(r01)*(sj0)))+(((IkReal(-3.04000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(1.52000000000000))*(pz)*((cj0)*(cj0))*((px)*(px))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r01)*((py)*(py)*(py))*((sj0)*(sj0))))+(((IkReal(-0.509632000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(cj0)*(py)*(sj0)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0382160000000000))*(pp)*((cj0)*(cj0))*((r00)*(r00))))+(((IkReal(4.00000000000000))*(cj0)*(pp)*(px)*(py)*(sj0)*((r01)*(r01))))+(((IkReal(-16.0000000000000))*(cj0)*(r00)*(r01)*(sj0)*((px)*(px))*((py)*(py)))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((IkReal(2.00000000000000))*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x107=(pz)*(pz);
IkReal x108=(py)*(py);
IkReal x109=(px)*(px);
IkReal x110=((r01)*(sj0));
IkReal x111=((IkReal(0.190000000000000))*(cj1));
IkReal x112=((pp)*(sj1));
IkReal x113=((IkReal(1.00000000000000))*(r02));
IkReal x114=((IkReal(0.380000000000000))*(pz));
IkReal x115=((IkReal(1.00000000000000))*(pz));
IkReal x116=((py)*(r01));
IkReal x117=((px)*(sj0));
IkReal x118=((cj0)*(r00));
IkReal x119=((IkReal(1.00000000000000))*(cj1));
IkReal x120=((IkReal(0.0361000000000000))*(sj1));
IkReal x121=((IkReal(2.00000000000000))*(sj1));
IkReal x122=((IkReal(0.0361000000000000))*(cj1));
IkReal x123=((IkReal(2.00000000000000))*(cj1));
IkReal x124=((py)*(r00));
IkReal x125=((IkReal(0.190000000000000))*(sj1));
IkReal x126=((cj0)*(px));
IkReal x127=((px)*(r00));
IkReal x128=((py)*(r02)*(sj0));
IkReal x129=((pz)*(x123));
IkReal x130=((r02)*(x126));
IkReal x131=((pz)*(x121));
IkReal x132=((r02)*(x107));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x117)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x110)))+(((sj1)*(x118)))+(((IkReal(-1.00000000000000))*(cj1)*(x113))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj1)*(x113)))+(((IkReal(-1.00000000000000))*(x118)*(x119)))+(((IkReal(-1.00000000000000))*(x110)*(x119))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r02)*(x111)))+(((IkReal(-1.00000000000000))*(x127)))+(((IkReal(-1.00000000000000))*(x116)))+(((x118)*(x125)))+(((x110)*(x125)))+(((IkReal(-1.00000000000000))*(pz)*(x113))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x111)*(x118)))+(((IkReal(-1.00000000000000))*(x115)*(x118)))+(((IkReal(-1.00000000000000))*(x110)*(x115)))+(((IkReal(-1.00000000000000))*(x110)*(x111)))+(x130)+(x128)+(((IkReal(-1.00000000000000))*(r02)*(x125))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x118)*(x120)))+(((x110)*(x112)))+(((r02)*(x114)))+(((IkReal(-1.00000000000000))*(x117)*(x121)*(x124)))+(((x112)*(x118)))+(((IkReal(-1.00000000000000))*(x110)*(x120)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x113)))+(((r02)*(x122)))+(((IkReal(-1.00000000000000))*(x128)*(x131)))+(((x123)*(x132)))+(((IkReal(-1.00000000000000))*(x108)*(x110)*(x121)))+(((x116)*(x129)))+(((IkReal(-1.00000000000000))*(x116)*(x121)*(x126)))+(((IkReal(-1.00000000000000))*(x109)*(x118)*(x121)))+(((IkReal(0.380000000000000))*(x116)))+(((IkReal(-1.00000000000000))*(x130)*(x131)))+(((x127)*(x129)))+(((IkReal(0.380000000000000))*(x127))));
evalcond[8]=((((IkReal(-1.00000000000000))*(pp)*(x110)*(x119)))+(((x127)*(x131)))+(((IkReal(0.380000000000000))*(x130)))+(((IkReal(-1.00000000000000))*(x118)*(x122)))+(((x121)*(x132)))+(((IkReal(-1.00000000000000))*(x112)*(x113)))+(((IkReal(-1.00000000000000))*(pp)*(x118)*(x119)))+(((x116)*(x123)*(x126)))+(((IkReal(-1.00000000000000))*(x110)*(x122)))+(((x129)*(x130)))+(((x117)*(x123)*(x124)))+(((x108)*(x110)*(x123)))+(((x109)*(x118)*(x123)))+(((IkReal(-1.00000000000000))*(x110)*(x114)))+(((IkReal(-1.00000000000000))*(r02)*(x120)))+(((IkReal(-1.00000000000000))*(x114)*(x118)))+(((x116)*(x131)))+(((x128)*(x129)))+(((IkReal(0.380000000000000))*(x128))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x133=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x133)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x133))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x134=((px)*(sj0));
IkReal x135=((IkReal(2.00000000000000))*(py));
IkReal x136=((IkReal(0.380000000000000))*(cj1));
IkReal x137=((cj0)*(r01));
IkReal x138=((pz)*(r02));
IkReal x139=((r00)*(sj0));
IkReal x140=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(0.0938500000000000))+(((IkReal(0.0361000000000000))*(x137)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x136)))+(((IkReal(-0.0361000000000000))*(x139)))+(((IkReal(-1.00000000000000))*(py)*(x135)*(x137)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x134)))+(((r01)*(x134)*(x135)))+(((pp)*(x137)))+(((IkReal(2.00000000000000))*(x134)*(x138)))+(((r02)*(x134)*(x136)))+(((pz)*(x136)*(x137)))+(((py)*(r00)*(x140)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x135)))+(((IkReal(-1.00000000000000))*(pp)*(x139)))+(((IkReal(-1.00000000000000))*(cj0)*(x135)*(x138)))+(((IkReal(0.0758940000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x140)))+(((IkReal(-1.00000000000000))*(pz)*(x136)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x141=((cj1)*(sj3));
IkReal x142=((cj3)*(sj1));
IkReal x143=((IkReal(273000.000000000))*(pz));
IkReal x144=((cj1)*(cj3));
IkReal x145=((IkReal(139000.000000000))*(cj1));
IkReal x146=((cj0)*(px));
IkReal x147=((sj1)*(sj3));
IkReal x148=((IkReal(139000.000000000))*(sj1));
IkReal x149=((IkReal(139000.000000000))*(py)*(sj0));
IkReal x150=((IkReal(273000.000000000))*(x146));
IkReal x151=((IkReal(273000.000000000))*(py)*(sj0));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x142)*(x143)))+(((IkReal(-1.00000000000000))*(pz)*(x148)))+(((IkReal(-1.00000000000000))*(x144)*(x150)))+(((IkReal(-1.00000000000000))*(x144)*(x151)))+(((IkReal(51870.0000000000))*(sj3)))+(((x141)*(x143)))+(((IkReal(-1.00000000000000))*(x147)*(x151)))+(((IkReal(-1.00000000000000))*(x147)*(x150)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x145)))+(((IkReal(-1.00000000000000))*(x145)*(x146))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((IkReal(26410.0000000000))+(((pz)*(x145)))+(((IkReal(-1.00000000000000))*(x142)*(x151)))+(((IkReal(-1.00000000000000))*(x142)*(x150)))+(((x141)*(x150)))+(((x141)*(x151)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x146)*(x148)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x148)))+(((x143)*(x144)))+(((x143)*(x147))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(x142)*(x143)))+(((IkReal(-1.00000000000000))*(pz)*(x148)))+(((IkReal(-1.00000000000000))*(x144)*(x150)))+(((IkReal(-1.00000000000000))*(x144)*(x151)))+(((IkReal(51870.0000000000))*(sj3)))+(((x141)*(x143)))+(((IkReal(-1.00000000000000))*(x147)*(x151)))+(((IkReal(-1.00000000000000))*(x147)*(x150)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x145)))+(((IkReal(-1.00000000000000))*(x145)*(x146)))))), ((gconst4)*(((IkReal(26410.0000000000))+(((pz)*(x145)))+(((IkReal(-1.00000000000000))*(x142)*(x151)))+(((IkReal(-1.00000000000000))*(x142)*(x150)))+(((x141)*(x150)))+(((x141)*(x151)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x146)*(x148)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x148)))+(((x143)*(x144)))+(((x143)*(x147)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x152=IKcos(j2);
IkReal x153=IKsin(j2);
IkReal x154=((px)*(sj1));
IkReal x155=((IkReal(0.273000000000000))*(cj3));
IkReal x156=((py)*(sj1));
IkReal x157=((IkReal(1.00000000000000))*(r00));
IkReal x158=((cj1)*(sj0));
IkReal x159=((IkReal(1.00000000000000))*(px));
IkReal x160=((IkReal(1.00000000000000))*(pz));
IkReal x161=((cj0)*(r01));
IkReal x162=((pz)*(sj1));
IkReal x163=((IkReal(0.273000000000000))*(sj3));
IkReal x164=((cj0)*(cj1));
IkReal x165=((IkReal(0.139000000000000))*(x153));
IkReal x166=((IkReal(0.139000000000000))*(x152));
IkReal x167=((x153)*(x155));
IkReal x168=((x152)*(x163));
IkReal x169=((x153)*(x163));
IkReal x170=((x152)*(x155));
IkReal x171=((x167)+(x165));
IkReal x172=((x170)+(x169)+(x166));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x154)))+(((IkReal(-1.00000000000000))*(x172)))+(((sj0)*(x156)))+(((IkReal(-1.00000000000000))*(cj1)*(x160))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(x159)*(x164)))+(x171)+(((IkReal(-1.00000000000000))*(py)*(x158)))+(((IkReal(-1.00000000000000))*(sj1)*(x160))));
evalcond[2]=((((x161)*(x162)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x157)))+(((IkReal(-1.00000000000000))*(x168)))+(x171)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x156)))+(((r02)*(sj0)*(x154)))+(((IkReal(-1.00000000000000))*(sj0)*(x157)*(x162)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x158)*(x159)))+(((r01)*(x154)))+(((IkReal(-0.190000000000000))*(x161)))+(((pz)*(r00)*(x158)))+(x172)+(((py)*(r02)*(x164)))+(((IkReal(-1.00000000000000))*(x156)*(x157)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(x160)*(x161))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x173=(pz)*(pz);
IkReal x174=(py)*(py);
IkReal x175=(px)*(px);
IkReal x176=((r01)*(sj0));
IkReal x177=((IkReal(0.190000000000000))*(cj1));
IkReal x178=((pp)*(sj1));
IkReal x179=((IkReal(1.00000000000000))*(r02));
IkReal x180=((IkReal(0.380000000000000))*(pz));
IkReal x181=((IkReal(1.00000000000000))*(pz));
IkReal x182=((py)*(r01));
IkReal x183=((px)*(sj0));
IkReal x184=((cj0)*(r00));
IkReal x185=((IkReal(1.00000000000000))*(cj1));
IkReal x186=((IkReal(0.0361000000000000))*(sj1));
IkReal x187=((IkReal(2.00000000000000))*(sj1));
IkReal x188=((IkReal(0.0361000000000000))*(cj1));
IkReal x189=((IkReal(2.00000000000000))*(cj1));
IkReal x190=((py)*(r00));
IkReal x191=((IkReal(0.190000000000000))*(sj1));
IkReal x192=((cj0)*(px));
IkReal x193=((px)*(r00));
IkReal x194=((py)*(r02)*(sj0));
IkReal x195=((pz)*(x189));
IkReal x196=((r02)*(x192));
IkReal x197=((pz)*(x187));
IkReal x198=((r02)*(x173));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x183)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[3]=((((sj1)*(x176)))+(((sj1)*(x184)))+(((IkReal(-1.00000000000000))*(cj1)*(x179))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x184)*(x185)))+(((IkReal(-1.00000000000000))*(x176)*(x185)))+(((IkReal(-1.00000000000000))*(sj1)*(x179))));
evalcond[5]=((((x176)*(x191)))+(((IkReal(-1.00000000000000))*(r02)*(x177)))+(((IkReal(-1.00000000000000))*(x193)))+(((IkReal(-1.00000000000000))*(pz)*(x179)))+(((x184)*(x191)))+(((IkReal(-1.00000000000000))*(x182))));
evalcond[6]=((x196)+(x194)+(((IkReal(-1.00000000000000))*(r02)*(x191)))+(((IkReal(-1.00000000000000))*(x176)*(x181)))+(((IkReal(-1.00000000000000))*(x177)*(x184)))+(((IkReal(-1.00000000000000))*(x176)*(x177)))+(((IkReal(-1.00000000000000))*(x181)*(x184))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x196)*(x197)))+(((x193)*(x195)))+(((IkReal(-1.00000000000000))*(x194)*(x197)))+(((x178)*(x184)))+(((x176)*(x178)))+(((IkReal(0.380000000000000))*(x182)))+(((IkReal(-1.00000000000000))*(cj1)*(pp)*(x179)))+(((x189)*(x198)))+(((IkReal(0.380000000000000))*(x193)))+(((IkReal(-1.00000000000000))*(x184)*(x186)))+(((IkReal(-1.00000000000000))*(x176)*(x186)))+(((IkReal(-1.00000000000000))*(x175)*(x184)*(x187)))+(((IkReal(-1.00000000000000))*(x182)*(x187)*(x192)))+(((r02)*(x180)))+(((r02)*(x188)))+(((IkReal(-1.00000000000000))*(x183)*(x187)*(x190)))+(((x182)*(x195)))+(((IkReal(-1.00000000000000))*(x174)*(x176)*(x187))));
evalcond[8]=((((x182)*(x189)*(x192)))+(((x193)*(x197)))+(((x183)*(x189)*(x190)))+(((x187)*(x198)))+(((IkReal(-1.00000000000000))*(r02)*(x186)))+(((IkReal(0.380000000000000))*(x194)))+(((IkReal(0.380000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(x180)*(x184)))+(((IkReal(-1.00000000000000))*(x184)*(x188)))+(((IkReal(-1.00000000000000))*(x176)*(x180)))+(((IkReal(-1.00000000000000))*(x176)*(x188)))+(((x195)*(x196)))+(((x194)*(x195)))+(((x175)*(x184)*(x189)))+(((x174)*(x176)*(x189)))+(((IkReal(-1.00000000000000))*(x178)*(x179)))+(((x182)*(x197)))+(((IkReal(-1.00000000000000))*(pp)*(x176)*(x185)))+(((IkReal(-1.00000000000000))*(pp)*(x184)*(x185))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x199=((IkReal(5.00698342424961))*(sj1));
cj3array[0]=((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x199)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x199))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x200=((px)*(sj0));
IkReal x201=((IkReal(2.00000000000000))*(py));
IkReal x202=((IkReal(0.380000000000000))*(cj1));
IkReal x203=((cj0)*(r01));
IkReal x204=((pz)*(r02));
IkReal x205=((r00)*(sj0));
IkReal x206=((IkReal(0.380000000000000))*(sj1));
evalcond[0]=((IkReal(-0.0938500000000000))+(((IkReal(-1.00000000000000))*(cj0)*(x201)*(x204)))+(((IkReal(2.00000000000000))*(px)*(r00)*(x200)))+(((py)*(r00)*(x206)))+(((pp)*(x203)))+(((r01)*(x200)*(x201)))+(((IkReal(-1.00000000000000))*(px)*(r01)*(x206)))+(((IkReal(-0.0361000000000000))*(x205)))+(((pz)*(x202)*(x203)))+(((IkReal(0.0361000000000000))*(x203)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(r00)*(x201)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(r02)*(x202)))+(((IkReal(2.00000000000000))*(x200)*(x204)))+(((r02)*(x200)*(x202)))+(((IkReal(-0.0758940000000000))*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(pp)*(x205)))+(((IkReal(-1.00000000000000))*(pz)*(x202)*(x205)))+(((IkReal(-1.00000000000000))*(py)*(x201)*(x203))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x207=((IkReal(139000.000000000))*(cj1));
IkReal x208=((py)*(sj0));
IkReal x209=((cj0)*(px));
IkReal x210=((IkReal(273000.000000000))*(cj3));
IkReal x211=((IkReal(139000.000000000))*(sj1));
IkReal x212=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x213=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(pz)*(x211)))+(((pz)*(x212)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x207)*(x209)))+(((IkReal(-1.00000000000000))*(x207)*(x208)))+(((IkReal(-1.00000000000000))*(cj1)*(x209)*(x210)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x210)))+(((IkReal(-1.00000000000000))*(cj1)*(x208)*(x210)))+(((IkReal(-1.00000000000000))*(x208)*(x213)))+(((IkReal(-1.00000000000000))*(x209)*(x213))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x208)*(x210)))+(((pz)*(x213)))+(((x208)*(x212)))+(((x209)*(x212)))+(((pz)*(x207)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x208)*(x211)))+(((IkReal(-1.00000000000000))*(x209)*(x211)))+(((cj1)*(pz)*(x210)))+(((IkReal(-1.00000000000000))*(sj1)*(x209)*(x210))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(pz)*(x211)))+(((pz)*(x212)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x207)*(x209)))+(((IkReal(-1.00000000000000))*(x207)*(x208)))+(((IkReal(-1.00000000000000))*(cj1)*(x209)*(x210)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x210)))+(((IkReal(-1.00000000000000))*(cj1)*(x208)*(x210)))+(((IkReal(-1.00000000000000))*(x208)*(x213)))+(((IkReal(-1.00000000000000))*(x209)*(x213)))))), ((gconst5)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x208)*(x210)))+(((pz)*(x213)))+(((x208)*(x212)))+(((x209)*(x212)))+(((pz)*(x207)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x208)*(x211)))+(((IkReal(-1.00000000000000))*(x209)*(x211)))+(((cj1)*(pz)*(x210)))+(((IkReal(-1.00000000000000))*(sj1)*(x209)*(x210)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x214=IKcos(j2);
IkReal x215=IKsin(j2);
IkReal x216=((px)*(sj1));
IkReal x217=((IkReal(0.273000000000000))*(cj3));
IkReal x218=((py)*(sj1));
IkReal x219=((IkReal(1.00000000000000))*(r00));
IkReal x220=((cj1)*(sj0));
IkReal x221=((IkReal(1.00000000000000))*(px));
IkReal x222=((IkReal(1.00000000000000))*(pz));
IkReal x223=((cj0)*(r01));
IkReal x224=((pz)*(sj1));
IkReal x225=((IkReal(0.273000000000000))*(sj3));
IkReal x226=((cj0)*(cj1));
IkReal x227=((IkReal(0.139000000000000))*(x215));
IkReal x228=((IkReal(0.139000000000000))*(x214));
IkReal x229=((x214)*(x225));
IkReal x230=((x215)*(x217));
IkReal x231=((x215)*(x225));
IkReal x232=((x214)*(x217));
IkReal x233=((x227)+(x230));
IkReal x234=((x228)+(x232)+(x231));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x216)))+(((IkReal(-1.00000000000000))*(x234)))+(((sj0)*(x218)))+(((IkReal(-1.00000000000000))*(cj1)*(x222))));
evalcond[1]=((x233)+(((IkReal(-1.00000000000000))*(sj1)*(x222)))+(((IkReal(-1.00000000000000))*(py)*(x220)))+(((IkReal(-1.00000000000000))*(x221)*(x226)))+(((IkReal(-1.00000000000000))*(x229))));
evalcond[2]=((((r02)*(sj0)*(x216)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x218)))+(((x223)*(x224)))+(((IkReal(-1.00000000000000))*(x233)))+(x229)+(((IkReal(-1.00000000000000))*(sj0)*(x219)*(x224)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x219)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x223)))+(((IkReal(-1.00000000000000))*(x218)*(x219)))+(((IkReal(-1.00000000000000))*(x234)))+(((py)*(r02)*(x226)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((pz)*(r00)*(x220)))+(((r01)*(x216)))+(((IkReal(-1.00000000000000))*(cj1)*(x222)*(x223)))+(((IkReal(-1.00000000000000))*(r02)*(x220)*(x221))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x235=((sj0)*(sj1));
IkReal x236=((cj0)*(sj1));
if( IKabs(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r01)*(x235)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(-190.000000000000))*(r00)*(x236)))+(((IkReal(1000.00000000000))*(px)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(py)*(x235)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-5.00698342424961))*(px)*(x236))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r01)*(x235)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(-190.000000000000))*(r00)*(x236)))+(((IkReal(1000.00000000000))*(px)*(r00)))))))+IKsqr(((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(py)*(x235)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-5.00698342424961))*(px)*(x236)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.00719424460431655))*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((IkReal(1000.00000000000))*(pz)*(r02)))+(((IkReal(1000.00000000000))*(py)*(r01)))+(((IkReal(-190.000000000000))*(r01)*(x235)))+(((IkReal(190.000000000000))*(cj1)*(r02)))+(((IkReal(-190.000000000000))*(r00)*(x236)))+(((IkReal(1000.00000000000))*(px)*(r00)))))), ((IkReal(-0.760929717764250))+(((IkReal(13.1762721690779))*(pp)))+(((IkReal(-5.00698342424961))*(py)*(x235)))+(((IkReal(5.00698342424961))*(cj1)*(pz)))+(((IkReal(-5.00698342424961))*(px)*(x236)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x237=IKcos(j3);
IkReal x238=((r01)*(sj0));
IkReal x239=((IkReal(0.190000000000000))*(cj1));
IkReal x240=((py)*(r02));
IkReal x241=((IkReal(0.380000000000000))*(cj1));
IkReal x242=((r00)*(sj0));
IkReal x243=((cj0)*(r01));
IkReal x244=((IkReal(1.00000000000000))*(pz));
IkReal x245=((IkReal(1.00000000000000))*(pp));
IkReal x246=((cj0)*(r00));
IkReal x247=((IkReal(0.190000000000000))*(sj1));
IkReal x248=((IkReal(0.139000000000000))*(cj4));
IkReal x249=((IkReal(2.00000000000000))*(pz));
IkReal x250=((px)*(r02));
IkReal x251=((IkReal(2.00000000000000))*(px)*(py));
IkReal x252=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x253=((IkReal(0.0758940000000000))*(x237));
IkReal x254=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(pz)*(x241)))+(((sj0)*(x252)))+(x253)+(((cj0)*(x254)))+(((IkReal(-1.00000000000000))*(x245))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(r00)))+(((x238)*(x247)))+(((IkReal(-1.00000000000000))*(r02)*(x239)))+(((IkReal(-1.00000000000000))*(r02)*(x244)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((x248)*(IKsin(j3))))+(((x246)*(x247))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x237)*(x248)))+(((IkReal(-1.00000000000000))*(x238)*(x239)))+(((cj0)*(x250)))+(((IkReal(-1.00000000000000))*(x238)*(x244)))+(((IkReal(-1.00000000000000))*(r02)*(x247)))+(((IkReal(-0.273000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x239)*(x246)))+(((sj0)*(x240)))+(((IkReal(-1.00000000000000))*(x244)*(x246))));
evalcond[3]=((((sj4)*(x253)))+(((IkReal(-1.00000000000000))*(x242)*(x245)))+(((sj0)*(x249)*(x250)))+(((x238)*(x251)))+(((r00)*(x252)))+(((IkReal(0.0938500000000000))*(sj4)))+(((IkReal(-2.00000000000000))*(x243)*((py)*(py))))+(((IkReal(-1.00000000000000))*(pz)*(x241)*(x242)))+(((IkReal(-1.00000000000000))*(x246)*(x251)))+(((IkReal(-1.00000000000000))*(cj0)*(x240)*(x249)))+(((IkReal(-1.00000000000000))*(cj0)*(x240)*(x241)))+(((sj0)*(x241)*(x250)))+(((IkReal(-1.00000000000000))*(r01)*(x254)))+(((IkReal(0.0361000000000000))*(x243)))+(((IkReal(-0.0361000000000000))*(x242)))+(((pz)*(x241)*(x243)))+(((IkReal(2.00000000000000))*(x242)*((px)*(px))))+(((pp)*(x243))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x255=((IkReal(0.0758940000000000))*(cj3));
IkReal x256=(py)*(py);
IkReal x257=(px)*(px);
IkReal x258=(pz)*(pz);
IkReal x259=((r01)*(sj0));
IkReal x260=((IkReal(2.00000000000000))*(px));
IkReal x261=((IkReal(0.190000000000000))*(cj1));
IkReal x262=((r00)*(sj1));
IkReal x263=((IkReal(0.0361000000000000))*(cj0));
IkReal x264=((py)*(r02));
IkReal x265=((cj0)*(cj1));
IkReal x266=((IkReal(0.380000000000000))*(pz));
IkReal x267=((pz)*(r02));
IkReal x268=((IkReal(2.00000000000000))*(sj0));
IkReal x269=((cj0)*(r01));
IkReal x270=((IkReal(0.380000000000000))*(py));
IkReal x271=((pz)*(sj1));
IkReal x272=((IkReal(1.00000000000000))*(sj0));
IkReal x273=((pp)*(r00));
IkReal x274=((IkReal(0.190000000000000))*(sj1));
IkReal x275=((IkReal(0.0361000000000000))*(sj1));
IkReal x276=((IkReal(2.00000000000000))*(cj0));
IkReal x277=((r00)*(sj0));
IkReal x278=((IkReal(1.00000000000000))*(r00));
IkReal x279=((cj1)*(r00));
IkReal x280=((cj1)*(r02));
IkReal x281=((cj0)*(r00));
IkReal x282=((cj0)*(sj1));
IkReal x283=((IkReal(0.380000000000000))*(px));
IkReal x284=((cj1)*(pz));
IkReal x285=((IkReal(1.00000000000000))*(pp));
IkReal x286=((cj0)*(r02));
IkReal x287=((py)*(r01));
IkReal x288=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x289=((r00)*(x257));
IkReal x290=((IkReal(2.00000000000000))*(x287));
IkReal x291=((IkReal(2.00000000000000))*(x256));
IkReal x292=((IkReal(2.00000000000000))*(x258));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x272)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(x269)+(((IkReal(-1.00000000000000))*(r00)*(x272))));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x266)))+(((sj0)*(sj1)*(x270)))+(x255)+(((IkReal(-1.00000000000000))*(x285)))+(((x282)*(x283))));
evalcond[4]=((((cj0)*(x262)))+(((sj1)*(x259)))+(((IkReal(-1.00000000000000))*(x280))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x259)))+(((IkReal(-1.00000000000000))*(x265)*(x278)))+(((IkReal(-1.00000000000000))*(x288))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x267)))+(((x259)*(x274)))+(((IkReal(0.190000000000000))*(cj0)*(x262)))+(((IkReal(-1.00000000000000))*(x287)))+(((IkReal(-1.00000000000000))*(r02)*(x261)))+(((IkReal(-1.00000000000000))*(px)*(x278))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x259)*(x261)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x278)))+(((IkReal(-1.00000000000000))*(pz)*(x259)))+(((IkReal(-1.00000000000000))*(r02)*(x274)))+(((IkReal(-1.00000000000000))*(x261)*(x281)))+(((sj0)*(x264)))+(((px)*(x286))));
evalcond[8]=((IkReal(0.0938500000000000))+(((x268)*(x289)))+(((IkReal(-1.00000000000000))*(x272)*(x273)))+(((sj0)*(x280)*(x283)))+(((IkReal(-1.00000000000000))*(py)*(x260)*(x281)))+(((IkReal(-1.00000000000000))*(pz)*(x264)*(x276)))+(((IkReal(-1.00000000000000))*(x269)*(x291)))+(((x262)*(x270)))+(((py)*(x259)*(x260)))+(x255)+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x283)))+(((IkReal(-0.380000000000000))*(x264)*(x265)))+(((IkReal(-0.0361000000000000))*(x277)))+(((pp)*(x269)))+(((r01)*(x263)))+(((IkReal(-1.00000000000000))*(cj1)*(x266)*(x277)))+(((sj0)*(x260)*(x267)))+(((r01)*(x265)*(x266))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x262)*(x263)))+(((IkReal(0.0361000000000000))*(x280)))+(((IkReal(-1.00000000000000))*(x260)*(x267)*(x282)))+(((r00)*(x283)))+(((IkReal(-1.00000000000000))*(x257)*(x262)*(x276)))+(((pp)*(sj1)*(x259)))+(((IkReal(-1.00000000000000))*(sj1)*(x259)*(x291)))+(((IkReal(-1.00000000000000))*(x259)*(x275)))+(((x280)*(x292)))+(((pz)*(x260)*(x279)))+(((r02)*(x266)))+(((IkReal(-1.00000000000000))*(x280)*(x285)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x260)*(x262)))+(((x284)*(x290)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x260)*(x269)))+(((IkReal(-1.00000000000000))*(x264)*(x268)*(x271)))+(((r01)*(x270)))+(((cj0)*(pp)*(x262))));
evalcond[10]=((((x271)*(x290)))+(((IkReal(0.380000000000000))*(sj0)*(x264)))+(((cj1)*(py)*(x260)*(x277)))+(((IkReal(-1.00000000000000))*(x263)*(x279)))+(((cj1)*(x259)*(x291)))+(((x264)*(x268)*(x284)))+(((x260)*(x265)*(x287)))+(((IkReal(-1.00000000000000))*(x265)*(x273)))+(((IkReal(-1.00000000000000))*(x259)*(x266)))+(((IkReal(2.00000000000000))*(x265)*(x289)))+(((pz)*(x260)*(x262)))+(((x260)*(x265)*(x267)))+(((IkReal(-1.00000000000000))*(x266)*(x281)))+(((IkReal(-1.00000000000000))*(cj1)*(x259)*(x285)))+(((IkReal(-1.00000000000000))*(r02)*(x275)))+(((r02)*(sj1)*(x292)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x285)))+(((x283)*(x286)))+(((IkReal(-0.0361000000000000))*(cj1)*(x259))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x293=((IkReal(139000.000000000))*(cj1));
IkReal x294=((py)*(sj0));
IkReal x295=((cj0)*(px));
IkReal x296=((IkReal(273000.000000000))*(cj3));
IkReal x297=((IkReal(139000.000000000))*(sj1));
IkReal x298=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x299=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(cj1)*(x295)*(x296)))+(((IkReal(-1.00000000000000))*(cj1)*(x294)*(x296)))+(((IkReal(-1.00000000000000))*(pz)*(x297)))+(((pz)*(x298)))+(((IkReal(-1.00000000000000))*(x293)*(x294)))+(((IkReal(-1.00000000000000))*(x293)*(x295)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x296)))+(((IkReal(-1.00000000000000))*(x295)*(x299)))+(((IkReal(-1.00000000000000))*(x294)*(x299))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x295)*(x296)))+(((pz)*(x299)))+(((pz)*(x293)))+(((IkReal(51870.0000000000))*(cj3)))+(((x295)*(x298)))+(((IkReal(-1.00000000000000))*(sj1)*(x294)*(x296)))+(((IkReal(-1.00000000000000))*(x295)*(x297)))+(((x294)*(x298)))+(((IkReal(-1.00000000000000))*(x294)*(x297)))+(((cj1)*(pz)*(x296))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(cj1)*(x295)*(x296)))+(((IkReal(-1.00000000000000))*(cj1)*(x294)*(x296)))+(((IkReal(-1.00000000000000))*(pz)*(x297)))+(((pz)*(x298)))+(((IkReal(-1.00000000000000))*(x293)*(x294)))+(((IkReal(-1.00000000000000))*(x293)*(x295)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x296)))+(((IkReal(-1.00000000000000))*(x295)*(x299)))+(((IkReal(-1.00000000000000))*(x294)*(x299)))))), ((gconst2)*(((IkReal(26410.0000000000))+(((IkReal(-1.00000000000000))*(sj1)*(x295)*(x296)))+(((pz)*(x299)))+(((pz)*(x293)))+(((IkReal(51870.0000000000))*(cj3)))+(((x295)*(x298)))+(((IkReal(-1.00000000000000))*(sj1)*(x294)*(x296)))+(((IkReal(-1.00000000000000))*(x295)*(x297)))+(((x294)*(x298)))+(((IkReal(-1.00000000000000))*(x294)*(x297)))+(((cj1)*(pz)*(x296)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x300=IKcos(j2);
IkReal x301=IKsin(j2);
IkReal x302=((px)*(sj1));
IkReal x303=((IkReal(0.273000000000000))*(cj3));
IkReal x304=((py)*(sj1));
IkReal x305=((IkReal(1.00000000000000))*(r00));
IkReal x306=((cj1)*(sj0));
IkReal x307=((IkReal(1.00000000000000))*(px));
IkReal x308=((IkReal(1.00000000000000))*(pz));
IkReal x309=((cj0)*(r01));
IkReal x310=((pz)*(sj1));
IkReal x311=((IkReal(0.273000000000000))*(sj3));
IkReal x312=((cj0)*(cj1));
IkReal x313=((IkReal(0.139000000000000))*(x301));
IkReal x314=((IkReal(0.139000000000000))*(x300));
IkReal x315=((x301)*(x303));
IkReal x316=((x300)*(x311));
IkReal x317=((x301)*(x311));
IkReal x318=((x300)*(x303));
IkReal x319=((x315)+(x313));
IkReal x320=((x318)+(x314)+(x317));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x320)))+(((cj0)*(x302)))+(((IkReal(-1.00000000000000))*(cj1)*(x308)))+(((sj0)*(x304))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(x308)))+(((IkReal(-1.00000000000000))*(py)*(x306)))+(x319)+(((IkReal(-1.00000000000000))*(x316)))+(((IkReal(-1.00000000000000))*(x307)*(x312))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x305)*(x310)))+(x319)+(((x309)*(x310)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x304)))+(((IkReal(-1.00000000000000))*(x316)))+(((r02)*(sj0)*(x302)))+(((cj1)*(px)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x305))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x309)))+(x320)+(((py)*(r02)*(x312)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r02)*(x306)*(x307)))+(((IkReal(-1.00000000000000))*(x304)*(x305)))+(((r01)*(x302)))+(((pz)*(r00)*(x306)))+(((IkReal(-1.00000000000000))*(cj1)*(x308)*(x309))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x321=((IkReal(0.0758940000000000))*(cj3));
IkReal x322=(py)*(py);
IkReal x323=(px)*(px);
IkReal x324=(pz)*(pz);
IkReal x325=((r01)*(sj0));
IkReal x326=((IkReal(2.00000000000000))*(px));
IkReal x327=((IkReal(0.190000000000000))*(cj1));
IkReal x328=((r00)*(sj1));
IkReal x329=((IkReal(0.0361000000000000))*(cj0));
IkReal x330=((py)*(r02));
IkReal x331=((cj0)*(cj1));
IkReal x332=((IkReal(0.380000000000000))*(pz));
IkReal x333=((pz)*(r02));
IkReal x334=((IkReal(2.00000000000000))*(sj0));
IkReal x335=((cj0)*(r01));
IkReal x336=((IkReal(0.380000000000000))*(py));
IkReal x337=((pz)*(sj1));
IkReal x338=((IkReal(1.00000000000000))*(sj0));
IkReal x339=((pp)*(r00));
IkReal x340=((IkReal(0.190000000000000))*(sj1));
IkReal x341=((IkReal(0.0361000000000000))*(sj1));
IkReal x342=((IkReal(2.00000000000000))*(cj0));
IkReal x343=((r00)*(sj0));
IkReal x344=((IkReal(1.00000000000000))*(r00));
IkReal x345=((cj1)*(r00));
IkReal x346=((cj1)*(r02));
IkReal x347=((cj0)*(r00));
IkReal x348=((cj0)*(sj1));
IkReal x349=((IkReal(0.380000000000000))*(px));
IkReal x350=((cj1)*(pz));
IkReal x351=((IkReal(1.00000000000000))*(pp));
IkReal x352=((cj0)*(r02));
IkReal x353=((py)*(r01));
IkReal x354=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x355=((r00)*(x323));
IkReal x356=((IkReal(2.00000000000000))*(x353));
IkReal x357=((IkReal(2.00000000000000))*(x322));
IkReal x358=((IkReal(2.00000000000000))*(x324));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x338)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x338)))+(x335));
evalcond[3]=((IkReal(0.0577500000000000))+(((x348)*(x349)))+(((IkReal(-1.00000000000000))*(x351)))+(((sj0)*(sj1)*(x336)))+(x321)+(((IkReal(-1.00000000000000))*(cj1)*(x332))));
evalcond[4]=((((cj0)*(x328)))+(((sj1)*(x325)))+(((IkReal(-1.00000000000000))*(x346))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x325)))+(((IkReal(-1.00000000000000))*(x331)*(x344)))+(((IkReal(-1.00000000000000))*(x354))));
evalcond[6]=((((IkReal(-1.00000000000000))*(px)*(x344)))+(((x325)*(x340)))+(((IkReal(-1.00000000000000))*(x353)))+(((IkReal(-1.00000000000000))*(x333)))+(((IkReal(0.190000000000000))*(cj0)*(x328)))+(((IkReal(-1.00000000000000))*(r02)*(x327))));
evalcond[7]=((((px)*(x352)))+(((IkReal(-1.00000000000000))*(r02)*(x340)))+(((IkReal(-1.00000000000000))*(pz)*(x325)))+(((IkReal(-1.00000000000000))*(x325)*(x327)))+(((IkReal(-1.00000000000000))*(x327)*(x347)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x344)))+(((sj0)*(x330))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((IkReal(-1.00000000000000))*(py)*(x326)*(x347)))+(((IkReal(-1.00000000000000))*(x338)*(x339)))+(((pp)*(x335)))+(((x334)*(x355)))+(((IkReal(-1.00000000000000))*(x321)))+(((IkReal(-0.0361000000000000))*(x343)))+(((r01)*(x329)))+(((py)*(x325)*(x326)))+(((IkReal(-0.380000000000000))*(x330)*(x331)))+(((sj0)*(x326)*(x333)))+(((IkReal(-1.00000000000000))*(cj1)*(x332)*(x343)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x349)))+(((x328)*(x336)))+(((sj0)*(x346)*(x349)))+(((r01)*(x331)*(x332)))+(((IkReal(-1.00000000000000))*(pz)*(x330)*(x342)))+(((IkReal(-1.00000000000000))*(x335)*(x357))));
evalcond[9]=((((r01)*(x336)))+(((r00)*(x349)))+(((IkReal(-1.00000000000000))*(sj1)*(x325)*(x357)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x326)*(x335)))+(((IkReal(-1.00000000000000))*(x330)*(x334)*(x337)))+(((pp)*(sj1)*(x325)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x326)*(x328)))+(((IkReal(-1.00000000000000))*(x326)*(x333)*(x348)))+(((x346)*(x358)))+(((r02)*(x332)))+(((IkReal(-1.00000000000000))*(x346)*(x351)))+(((IkReal(-1.00000000000000))*(x325)*(x341)))+(((pz)*(x326)*(x345)))+(((IkReal(-1.00000000000000))*(x323)*(x328)*(x342)))+(((x350)*(x356)))+(((IkReal(-1.00000000000000))*(x328)*(x329)))+(((IkReal(0.0361000000000000))*(x346)))+(((cj0)*(pp)*(x328))));
evalcond[10]=((((IkReal(-1.00000000000000))*(r02)*(x341)))+(((IkReal(2.00000000000000))*(x331)*(x355)))+(((cj1)*(py)*(x326)*(x343)))+(((pz)*(x326)*(x328)))+(((x337)*(x356)))+(((cj1)*(x325)*(x357)))+(((IkReal(-0.0361000000000000))*(cj1)*(x325)))+(((r02)*(sj1)*(x358)))+(((IkReal(-1.00000000000000))*(x332)*(x347)))+(((x326)*(x331)*(x353)))+(((IkReal(-1.00000000000000))*(cj1)*(x325)*(x351)))+(((IkReal(0.380000000000000))*(sj0)*(x330)))+(((x349)*(x352)))+(((IkReal(-1.00000000000000))*(x329)*(x345)))+(((IkReal(-1.00000000000000))*(x325)*(x332)))+(((x330)*(x334)*(x350)))+(((x326)*(x331)*(x333)))+(((IkReal(-1.00000000000000))*(x331)*(x339)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x351))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x359=((IkReal(139000.000000000))*(cj1));
IkReal x360=((py)*(sj0));
IkReal x361=((cj0)*(px));
IkReal x362=((IkReal(273000.000000000))*(cj3));
IkReal x363=((IkReal(139000.000000000))*(sj1));
IkReal x364=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x365=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x361)*(x365)))+(((IkReal(-1.00000000000000))*(x360)*(x365)))+(((IkReal(-1.00000000000000))*(cj1)*(x360)*(x362)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x361)*(x362)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x362)))+(((pz)*(x364)))+(((IkReal(-1.00000000000000))*(x359)*(x361)))+(((IkReal(-1.00000000000000))*(x359)*(x360)))+(((IkReal(-1.00000000000000))*(pz)*(x363))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(26410.0000000000))+(((x361)*(x364)))+(((IkReal(-1.00000000000000))*(sj1)*(x360)*(x362)))+(((IkReal(-1.00000000000000))*(x361)*(x363)))+(((IkReal(-1.00000000000000))*(x360)*(x363)))+(((cj1)*(pz)*(x362)))+(((pz)*(x359)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x361)*(x362)))+(((pz)*(x365)))+(((x360)*(x364))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(x361)*(x365)))+(((IkReal(-1.00000000000000))*(x360)*(x365)))+(((IkReal(-1.00000000000000))*(cj1)*(x360)*(x362)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x361)*(x362)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x362)))+(((pz)*(x364)))+(((IkReal(-1.00000000000000))*(x359)*(x361)))+(((IkReal(-1.00000000000000))*(x359)*(x360)))+(((IkReal(-1.00000000000000))*(pz)*(x363)))))), ((gconst3)*(((IkReal(26410.0000000000))+(((x361)*(x364)))+(((IkReal(-1.00000000000000))*(sj1)*(x360)*(x362)))+(((IkReal(-1.00000000000000))*(x361)*(x363)))+(((IkReal(-1.00000000000000))*(x360)*(x363)))+(((cj1)*(pz)*(x362)))+(((pz)*(x359)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x361)*(x362)))+(((pz)*(x365)))+(((x360)*(x364)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x366=IKcos(j2);
IkReal x367=IKsin(j2);
IkReal x368=((px)*(sj1));
IkReal x369=((IkReal(0.273000000000000))*(cj3));
IkReal x370=((py)*(sj1));
IkReal x371=((IkReal(1.00000000000000))*(r00));
IkReal x372=((cj1)*(sj0));
IkReal x373=((IkReal(1.00000000000000))*(px));
IkReal x374=((IkReal(1.00000000000000))*(pz));
IkReal x375=((cj0)*(r01));
IkReal x376=((pz)*(sj1));
IkReal x377=((IkReal(0.273000000000000))*(sj3));
IkReal x378=((cj0)*(cj1));
IkReal x379=((IkReal(0.139000000000000))*(x367));
IkReal x380=((IkReal(0.139000000000000))*(x366));
IkReal x381=((x366)*(x377));
IkReal x382=((x367)*(x369));
IkReal x383=((x367)*(x377));
IkReal x384=((x366)*(x369));
IkReal x385=((x382)+(x379));
IkReal x386=((x384)+(x383)+(x380));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x374)))+(((sj0)*(x370)))+(((IkReal(-1.00000000000000))*(x386)))+(((cj0)*(x368))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x372)))+(((IkReal(-1.00000000000000))*(sj1)*(x374)))+(x385)+(((IkReal(-1.00000000000000))*(x373)*(x378)))+(((IkReal(-1.00000000000000))*(x381))));
evalcond[2]=((((x375)*(x376)))+(((IkReal(-1.00000000000000))*(sj0)*(x371)*(x376)))+(x381)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x370)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x371)))+(((r02)*(sj0)*(x368)))+(((IkReal(-1.00000000000000))*(x385)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((pz)*(r00)*(x372)))+(((IkReal(-1.00000000000000))*(r02)*(x372)*(x373)))+(((IkReal(-1.00000000000000))*(x370)*(x371)))+(((r01)*(x368)))+(((IkReal(-0.190000000000000))*(x375)))+(((IkReal(-1.00000000000000))*(x386)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((py)*(r02)*(x378)))+(((IkReal(-1.00000000000000))*(cj1)*(x374)*(x375))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x387=((IkReal(1.00000000000000))*(sj1));
IkReal x388=((cj1)*(sj3));
IkReal x389=((cj0)*(r00));
IkReal x390=((cj3)*(r02));
IkReal x391=((r01)*(sj0));
IkReal x392=((sj1)*(sj3));
IkReal x393=((cj3)*(x391));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x387)*(x393)))+(((IkReal(-1.00000000000000))*(cj3)*(x387)*(x389)))+(((x388)*(x389)))+(((cj1)*(x390)))+(((x388)*(x391)))+(((r02)*(x392))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((sj1)*(x390)))+(((IkReal(-1.00000000000000))*(r02)*(x388)))+(((cj1)*(cj3)*(x389)))+(((x391)*(x392)))+(((cj1)*(x393)))+(((x389)*(x392))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(x387)*(x393)))+(((IkReal(-1.00000000000000))*(cj3)*(x387)*(x389)))+(((x388)*(x389)))+(((cj1)*(x390)))+(((x388)*(x391)))+(((r02)*(x392)))))), ((gconst1)*(((((sj1)*(x390)))+(((IkReal(-1.00000000000000))*(r02)*(x388)))+(((cj1)*(cj3)*(x389)))+(((x391)*(x392)))+(((cj1)*(x393)))+(((x389)*(x392)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x394=IKcos(j2);
IkReal x395=IKsin(j2);
IkReal x396=(pz)*(pz);
IkReal x397=(py)*(py);
IkReal x398=(px)*(px);
IkReal x399=((px)*(sj1));
IkReal x400=((sj0)*(sj1));
IkReal x401=((IkReal(0.0552080000000000))*(sj3));
IkReal x402=((pp)*(r01));
IkReal x403=((cj1)*(sj0));
IkReal x404=((pz)*(r01));
IkReal x405=((IkReal(0.380000000000000))*(sj0));
IkReal x406=((IkReal(1.00000000000000))*(sj1));
IkReal x407=((py)*(r00));
IkReal x408=((pz)*(r02));
IkReal x409=((IkReal(2.00000000000000))*(cj0));
IkReal x410=((IkReal(2.00000000000000))*(py));
IkReal x411=((pz)*(r00));
IkReal x412=((pp)*(r02));
IkReal x413=((IkReal(1.00000000000000))*(cj1));
IkReal x414=((cj0)*(r00));
IkReal x415=((IkReal(0.0361000000000000))*(cj1));
IkReal x416=((py)*(r02));
IkReal x417=((IkReal(0.0361000000000000))*(r01));
IkReal x418=((IkReal(0.0361000000000000))*(sj1));
IkReal x419=((py)*(r01));
IkReal x420=((IkReal(2.00000000000000))*(px));
IkReal x421=((cj1)*(px));
IkReal x422=((IkReal(0.0938500000000000))*(cj3));
IkReal x423=((IkReal(0.380000000000000))*(cj0));
IkReal x424=((px)*(r02));
IkReal x425=((cj4)*(x395));
IkReal x426=((cj4)*(x394));
IkReal x427=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x428=((IkReal(0.139000000000000))*(x395));
IkReal x429=((IkReal(0.139000000000000))*(x394));
IkReal x430=((r00)*(x398));
IkReal x431=((IkReal(0.273000000000000))*(x394));
IkReal x432=((IkReal(0.273000000000000))*(cj3)*(x395));
IkReal x433=((x408)*(x410));
IkReal x434=((IkReal(2.00000000000000))*(r01)*(x397));
IkReal x435=((IkReal(2.00000000000000))*(r02)*(x396));
evalcond[0]=((((sj1)*(x414)))+(((IkReal(-1.00000000000000))*(r02)*(x413)))+(((r01)*(x400)))+(((IkReal(-1.00000000000000))*(sj3)*(x426)))+(((cj3)*(x425))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(x403)))+(((IkReal(-1.00000000000000))*(r02)*(x406)))+(((sj3)*(x425)))+(((cj3)*(x426)))+(((IkReal(-1.00000000000000))*(x413)*(x414))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(x431)))+(((py)*(x400)))+(((cj0)*(x399)))+(((IkReal(-1.00000000000000))*(x429)))+(((IkReal(-0.273000000000000))*(sj3)*(x395)))+(((IkReal(-1.00000000000000))*(pz)*(x413))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj3)*(x431)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x413)))+(((IkReal(-1.00000000000000))*(py)*(x403)))+(x428)+(x432)+(((IkReal(-1.00000000000000))*(pz)*(x406))));
evalcond[4]=((((sj4)*(x432)))+(((sj4)*(x428)))+(((IkReal(-1.00000000000000))*(x394)*(x427)))+(((IkReal(-1.00000000000000))*(cj0)*(x406)*(x416)))+(((r01)*(x421)))+(((cj0)*(sj1)*(x404)))+(((IkReal(-1.00000000000000))*(x407)*(x413)))+(((IkReal(-1.00000000000000))*(x400)*(x411)))+(((r02)*(sj0)*(x399))));
evalcond[5]=((((sj4)*(x429)))+(((IkReal(-1.00000000000000))*(x406)*(x407)))+(((x395)*(x427)))+(((IkReal(-1.00000000000000))*(x403)*(x424)))+(((r01)*(x399)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((IkReal(-1.00000000000000))*(cj0)*(x404)*(x413)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((cj3)*(sj4)*(x431)))+(((x403)*(x411)))+(((cj0)*(cj1)*(x416))));
evalcond[6]=((((pp)*(sj1)*(x414)))+(((IkReal(-1.00000000000000))*(x399)*(x408)*(x409)))+(((IkReal(-1.00000000000000))*(sj1)*(x409)*(x430)))+(((cj1)*(x435)))+(((IkReal(-1.00000000000000))*(x412)*(x413)))+(((IkReal(0.380000000000000))*(x419)))+(((IkReal(0.380000000000000))*(x408)))+(((IkReal(-1.00000000000000))*(x400)*(x417)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(0.0758940000000000))*(x425)))+(((cj1)*(x411)*(x420)))+(((IkReal(-1.00000000000000))*(x400)*(x433)))+(((IkReal(-1.00000000000000))*(x400)*(x434)))+(((IkReal(-1.00000000000000))*(x401)*(x426)))+(((x400)*(x402)))+(((IkReal(-1.00000000000000))*(x414)*(x418)))+(((IkReal(-2.00000000000000))*(sj0)*(x399)*(x407)))+(((r02)*(x415)))+(((x422)*(x425)))+(((cj1)*(x404)*(x410)))+(((IkReal(-1.00000000000000))*(x399)*(x409)*(x419))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x402)*(x403)))+(((x408)*(x409)*(x421)))+(((IkReal(-1.00000000000000))*(x406)*(x412)))+(((x405)*(x416)))+(((x403)*(x433)))+(((x403)*(x434)))+(((IkReal(-1.00000000000000))*(r02)*(x418)))+(((x403)*(x407)*(x420)))+(((IkReal(-1.00000000000000))*(x403)*(x417)))+(((sj1)*(x404)*(x410)))+(((x409)*(x419)*(x421)))+(((IkReal(0.0758940000000000))*(x426)))+(((IkReal(-1.00000000000000))*(x404)*(x405)))+(((IkReal(2.00000000000000))*(x399)*(x411)))+(((x423)*(x424)))+(((x401)*(x425)))+(((IkReal(-1.00000000000000))*(x414)*(x415)))+(((IkReal(-1.00000000000000))*(x411)*(x423)))+(((cj1)*(x409)*(x430)))+(((x422)*(x426)))+(((IkReal(-1.00000000000000))*(pp)*(x413)*(x414)))+(((sj1)*(x435))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x436=((IkReal(1000.00000000000))*(r02));
IkReal x437=((IkReal(1000.00000000000))*(r00));
IkReal x438=((IkReal(1000.00000000000))*(r01));
IkReal x439=((IkReal(190.000000000000))*(r02));
IkReal x440=((IkReal(190.000000000000))*(r01)*(sj0));
IkReal x441=((IkReal(190.000000000000))*(cj0)*(r00));
if( IKabs(((gconst0)*(((((px)*(x437)))+(((cj1)*(x439)))+(((pz)*(x436)))+(((py)*(x438)))+(((IkReal(-1.00000000000000))*(sj1)*(x441)))+(((IkReal(-1.00000000000000))*(sj1)*(x440))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((py)*(sj0)*(x436)))+(((IkReal(-1.00000000000000))*(sj1)*(x439)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x438)))+(((IkReal(-1.00000000000000))*(cj1)*(x440)))+(((IkReal(-1.00000000000000))*(cj1)*(x441)))+(((cj0)*(px)*(x436)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x437)))+(((IkReal(-273.000000000000))*(cj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((px)*(x437)))+(((cj1)*(x439)))+(((pz)*(x436)))+(((py)*(x438)))+(((IkReal(-1.00000000000000))*(sj1)*(x441)))+(((IkReal(-1.00000000000000))*(sj1)*(x440)))))), ((gconst0)*(((((py)*(sj0)*(x436)))+(((IkReal(-1.00000000000000))*(sj1)*(x439)))+(((IkReal(-1.00000000000000))*(pz)*(sj0)*(x438)))+(((IkReal(-1.00000000000000))*(cj1)*(x440)))+(((IkReal(-1.00000000000000))*(cj1)*(x441)))+(((cj0)*(px)*(x436)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x437)))+(((IkReal(-273.000000000000))*(cj4)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x442=IKcos(j3);
IkReal x443=((r01)*(sj0));
IkReal x444=((IkReal(0.190000000000000))*(cj1));
IkReal x445=((py)*(r02));
IkReal x446=((IkReal(0.380000000000000))*(cj1));
IkReal x447=((r00)*(sj0));
IkReal x448=((cj0)*(r01));
IkReal x449=((IkReal(1.00000000000000))*(pz));
IkReal x450=((IkReal(1.00000000000000))*(pp));
IkReal x451=((cj0)*(r00));
IkReal x452=((IkReal(0.190000000000000))*(sj1));
IkReal x453=((IkReal(0.139000000000000))*(cj4));
IkReal x454=((IkReal(2.00000000000000))*(pz));
IkReal x455=((px)*(r02));
IkReal x456=((IkReal(2.00000000000000))*(px)*(py));
IkReal x457=((IkReal(0.380000000000000))*(py)*(sj1));
IkReal x458=((IkReal(0.0758940000000000))*(x442));
IkReal x459=((IkReal(0.380000000000000))*(px)*(sj1));
evalcond[0]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(x450)))+(x458)+(((sj0)*(x457)))+(((cj0)*(x459)))+(((IkReal(-1.00000000000000))*(pz)*(x446))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(x444)))+(((IkReal(-1.00000000000000))*(r02)*(x449)))+(((x443)*(x452)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((x451)*(x452)))+(((x453)*(IKsin(j3)))));
evalcond[2]=((((sj0)*(x445)))+(((IkReal(-1.00000000000000))*(x443)*(x449)))+(((IkReal(-1.00000000000000))*(x443)*(x444)))+(((IkReal(-1.00000000000000))*(x442)*(x453)))+(((cj0)*(x455)))+(((IkReal(-1.00000000000000))*(r02)*(x452)))+(((IkReal(-0.273000000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x444)*(x451)))+(((IkReal(-1.00000000000000))*(x449)*(x451))));
evalcond[3]=((((IkReal(-0.0361000000000000))*(x447)))+(((IkReal(-1.00000000000000))*(pz)*(x446)*(x447)))+(((IkReal(2.00000000000000))*(x447)*((px)*(px))))+(((IkReal(-1.00000000000000))*(cj0)*(x445)*(x446)))+(((sj0)*(x454)*(x455)))+(((IkReal(-1.00000000000000))*(r01)*(x459)))+(((pz)*(x446)*(x448)))+(((IkReal(0.0938500000000000))*(sj4)))+(((IkReal(0.0361000000000000))*(x448)))+(((pp)*(x448)))+(((sj4)*(x458)))+(((IkReal(-1.00000000000000))*(x447)*(x450)))+(((x443)*(x456)))+(((IkReal(-2.00000000000000))*(x448)*((py)*(py))))+(((IkReal(-1.00000000000000))*(cj0)*(x445)*(x454)))+(((sj0)*(x446)*(x455)))+(((IkReal(-1.00000000000000))*(x451)*(x456)))+(((r00)*(x457))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3))))));
dummyeval[0]=((((cj4)*((sj3)*(sj3))))+(((cj4)*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x460=((IkReal(0.0758940000000000))*(cj3));
IkReal x461=(py)*(py);
IkReal x462=(px)*(px);
IkReal x463=(pz)*(pz);
IkReal x464=((r01)*(sj0));
IkReal x465=((IkReal(2.00000000000000))*(px));
IkReal x466=((IkReal(0.190000000000000))*(cj1));
IkReal x467=((r00)*(sj1));
IkReal x468=((IkReal(0.0361000000000000))*(cj0));
IkReal x469=((py)*(r02));
IkReal x470=((cj0)*(cj1));
IkReal x471=((IkReal(0.380000000000000))*(pz));
IkReal x472=((pz)*(r02));
IkReal x473=((IkReal(2.00000000000000))*(sj0));
IkReal x474=((cj0)*(r01));
IkReal x475=((IkReal(0.380000000000000))*(py));
IkReal x476=((pz)*(sj1));
IkReal x477=((IkReal(1.00000000000000))*(sj0));
IkReal x478=((pp)*(r00));
IkReal x479=((IkReal(0.190000000000000))*(sj1));
IkReal x480=((IkReal(0.0361000000000000))*(sj1));
IkReal x481=((IkReal(2.00000000000000))*(cj0));
IkReal x482=((r00)*(sj0));
IkReal x483=((IkReal(1.00000000000000))*(r00));
IkReal x484=((cj1)*(r00));
IkReal x485=((cj1)*(r02));
IkReal x486=((cj0)*(r00));
IkReal x487=((cj0)*(sj1));
IkReal x488=((IkReal(0.380000000000000))*(px));
IkReal x489=((cj1)*(pz));
IkReal x490=((IkReal(1.00000000000000))*(pp));
IkReal x491=((cj0)*(r02));
IkReal x492=((py)*(r01));
IkReal x493=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x494=((r00)*(x462));
IkReal x495=((IkReal(2.00000000000000))*(x492));
IkReal x496=((IkReal(2.00000000000000))*(x461));
IkReal x497=((IkReal(2.00000000000000))*(x463));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x477)))+(((cj0)*(py))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x477)))+(x474));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(x490)))+(((sj0)*(sj1)*(x475)))+(((IkReal(-1.00000000000000))*(cj1)*(x471)))+(x460)+(((x487)*(x488))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x485)))+(((cj0)*(x467)))+(((sj1)*(x464))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(x470)*(x483)))+(((IkReal(-1.00000000000000))*(cj1)*(x464))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x472)))+(((IkReal(-1.00000000000000))*(x492)))+(((IkReal(-1.00000000000000))*(px)*(x483)))+(((x464)*(x479)))+(((IkReal(0.190000000000000))*(cj0)*(x467)))+(((IkReal(-1.00000000000000))*(r02)*(x466))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj0)*(pz)*(x483)))+(((IkReal(-1.00000000000000))*(x466)*(x486)))+(((IkReal(-1.00000000000000))*(x464)*(x466)))+(((IkReal(-1.00000000000000))*(pz)*(x464)))+(((px)*(x491)))+(((sj0)*(x469)))+(((IkReal(-1.00000000000000))*(r02)*(x479))));
evalcond[8]=((IkReal(0.0938500000000000))+(((IkReal(-0.0361000000000000))*(x482)))+(((pp)*(x474)))+(((sj0)*(x465)*(x472)))+(((IkReal(-1.00000000000000))*(x477)*(x478)))+(((x473)*(x494)))+(((IkReal(-1.00000000000000))*(py)*(x465)*(x486)))+(((py)*(x464)*(x465)))+(((r01)*(x470)*(x471)))+(((IkReal(-1.00000000000000))*(pz)*(x469)*(x481)))+(((IkReal(-0.380000000000000))*(x469)*(x470)))+(((x467)*(x475)))+(x460)+(((IkReal(-1.00000000000000))*(x474)*(x496)))+(((sj0)*(x485)*(x488)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x488)))+(((r01)*(x468)))+(((IkReal(-1.00000000000000))*(cj1)*(x471)*(x482))));
evalcond[9]=((((IkReal(-1.00000000000000))*(py)*(sj1)*(x465)*(x474)))+(((IkReal(-1.00000000000000))*(x465)*(x472)*(x487)))+(((x489)*(x495)))+(((IkReal(-1.00000000000000))*(x464)*(x480)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x465)*(x467)))+(((r02)*(x471)))+(((pp)*(sj1)*(x464)))+(((r00)*(x488)))+(((IkReal(-1.00000000000000))*(x462)*(x467)*(x481)))+(((IkReal(0.0361000000000000))*(x485)))+(((IkReal(-1.00000000000000))*(x485)*(x490)))+(((x485)*(x497)))+(((IkReal(-1.00000000000000))*(sj1)*(x464)*(x496)))+(((IkReal(-1.00000000000000))*(x467)*(x468)))+(((pz)*(x465)*(x484)))+(((IkReal(-1.00000000000000))*(x469)*(x473)*(x476)))+(((cj0)*(pp)*(x467)))+(((r01)*(x475))));
evalcond[10]=((((x488)*(x491)))+(((IkReal(0.380000000000000))*(sj0)*(x469)))+(((x476)*(x495)))+(((IkReal(-1.00000000000000))*(cj1)*(x464)*(x490)))+(((cj1)*(py)*(x465)*(x482)))+(((x465)*(x470)*(x472)))+(((pz)*(x465)*(x467)))+(((IkReal(2.00000000000000))*(x470)*(x494)))+(((IkReal(-1.00000000000000))*(x464)*(x471)))+(((IkReal(-1.00000000000000))*(x470)*(x478)))+(((IkReal(-0.0361000000000000))*(cj1)*(x464)))+(((IkReal(-1.00000000000000))*(x468)*(x484)))+(((x469)*(x473)*(x489)))+(((IkReal(-1.00000000000000))*(x471)*(x486)))+(((r02)*(sj1)*(x497)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x490)))+(((cj1)*(x464)*(x496)))+(((x465)*(x470)*(x492)))+(((IkReal(-1.00000000000000))*(r02)*(x480))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x498=((IkReal(139000.000000000))*(cj1));
IkReal x499=((py)*(sj0));
IkReal x500=((cj0)*(px));
IkReal x501=((IkReal(273000.000000000))*(cj3));
IkReal x502=((IkReal(139000.000000000))*(sj1));
IkReal x503=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x504=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(cj1)*(x499)*(x501)))+(((IkReal(-1.00000000000000))*(x499)*(x504)))+(((IkReal(-1.00000000000000))*(pz)*(x502)))+(((IkReal(-1.00000000000000))*(x498)*(x499)))+(((IkReal(-1.00000000000000))*(cj1)*(x500)*(x501)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x501)))+(((IkReal(-1.00000000000000))*(x498)*(x500)))+(((pz)*(x503)))+(((IkReal(-1.00000000000000))*(x500)*(x504))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((IkReal(26410.0000000000))+(((pz)*(x498)))+(((x500)*(x503)))+(((IkReal(-1.00000000000000))*(x499)*(x502)))+(((IkReal(-1.00000000000000))*(sj1)*(x500)*(x501)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x501)))+(((x499)*(x503)))+(((pz)*(x504)))+(((IkReal(-1.00000000000000))*(sj1)*(x499)*(x501)))+(((IkReal(-1.00000000000000))*(x500)*(x502))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(cj1)*(x499)*(x501)))+(((IkReal(-1.00000000000000))*(x499)*(x504)))+(((IkReal(-1.00000000000000))*(pz)*(x502)))+(((IkReal(-1.00000000000000))*(x498)*(x499)))+(((IkReal(-1.00000000000000))*(cj1)*(x500)*(x501)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x501)))+(((IkReal(-1.00000000000000))*(x498)*(x500)))+(((pz)*(x503)))+(((IkReal(-1.00000000000000))*(x500)*(x504)))))), ((gconst2)*(((IkReal(26410.0000000000))+(((pz)*(x498)))+(((x500)*(x503)))+(((IkReal(-1.00000000000000))*(x499)*(x502)))+(((IkReal(-1.00000000000000))*(sj1)*(x500)*(x501)))+(((IkReal(51870.0000000000))*(cj3)))+(((cj1)*(pz)*(x501)))+(((x499)*(x503)))+(((pz)*(x504)))+(((IkReal(-1.00000000000000))*(sj1)*(x499)*(x501)))+(((IkReal(-1.00000000000000))*(x500)*(x502)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x505=IKcos(j2);
IkReal x506=IKsin(j2);
IkReal x507=((px)*(sj1));
IkReal x508=((IkReal(0.273000000000000))*(cj3));
IkReal x509=((py)*(sj1));
IkReal x510=((IkReal(1.00000000000000))*(r00));
IkReal x511=((cj1)*(sj0));
IkReal x512=((IkReal(1.00000000000000))*(px));
IkReal x513=((IkReal(1.00000000000000))*(pz));
IkReal x514=((cj0)*(r01));
IkReal x515=((pz)*(sj1));
IkReal x516=((IkReal(0.273000000000000))*(sj3));
IkReal x517=((cj0)*(cj1));
IkReal x518=((IkReal(0.139000000000000))*(x506));
IkReal x519=((IkReal(0.139000000000000))*(x505));
IkReal x520=((x506)*(x508));
IkReal x521=((x505)*(x516));
IkReal x522=((x506)*(x516));
IkReal x523=((x505)*(x508));
IkReal x524=((x520)+(x518));
IkReal x525=((x522)+(x523)+(x519));
evalcond[0]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x513)))+(((sj0)*(x509)))+(((IkReal(-1.00000000000000))*(x525)))+(((cj0)*(x507))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x511)))+(((IkReal(-1.00000000000000))*(x521)))+(((IkReal(-1.00000000000000))*(sj1)*(x513)))+(((IkReal(-1.00000000000000))*(x512)*(x517)))+(x524));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x510)*(x515)))+(((x514)*(x515)))+(((IkReal(-1.00000000000000))*(x521)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x510)))+(x524)+(((r02)*(sj0)*(x507)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x509)))+(((cj1)*(px)*(r01))));
evalcond[3]=((((IkReal(-0.190000000000000))*(x514)))+(((IkReal(-1.00000000000000))*(cj1)*(x513)*(x514)))+(((IkReal(-1.00000000000000))*(r02)*(x511)*(x512)))+(((py)*(r02)*(x517)))+(((r01)*(x507)))+(x525)+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x509)*(x510)))+(((pz)*(r00)*(x511))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x526=((IkReal(0.0758940000000000))*(cj3));
IkReal x527=(py)*(py);
IkReal x528=(px)*(px);
IkReal x529=(pz)*(pz);
IkReal x530=((r01)*(sj0));
IkReal x531=((IkReal(2.00000000000000))*(px));
IkReal x532=((IkReal(0.190000000000000))*(cj1));
IkReal x533=((r00)*(sj1));
IkReal x534=((IkReal(0.0361000000000000))*(cj0));
IkReal x535=((py)*(r02));
IkReal x536=((cj0)*(cj1));
IkReal x537=((IkReal(0.380000000000000))*(pz));
IkReal x538=((pz)*(r02));
IkReal x539=((IkReal(2.00000000000000))*(sj0));
IkReal x540=((cj0)*(r01));
IkReal x541=((IkReal(0.380000000000000))*(py));
IkReal x542=((pz)*(sj1));
IkReal x543=((IkReal(1.00000000000000))*(sj0));
IkReal x544=((pp)*(r00));
IkReal x545=((IkReal(0.190000000000000))*(sj1));
IkReal x546=((IkReal(0.0361000000000000))*(sj1));
IkReal x547=((IkReal(2.00000000000000))*(cj0));
IkReal x548=((r00)*(sj0));
IkReal x549=((IkReal(1.00000000000000))*(r00));
IkReal x550=((cj1)*(r00));
IkReal x551=((cj1)*(r02));
IkReal x552=((cj0)*(r00));
IkReal x553=((cj0)*(sj1));
IkReal x554=((IkReal(0.380000000000000))*(px));
IkReal x555=((cj1)*(pz));
IkReal x556=((IkReal(1.00000000000000))*(pp));
IkReal x557=((cj0)*(r02));
IkReal x558=((py)*(r01));
IkReal x559=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x560=((r00)*(x528));
IkReal x561=((IkReal(2.00000000000000))*(x558));
IkReal x562=((IkReal(2.00000000000000))*(x527));
IkReal x563=((IkReal(2.00000000000000))*(x529));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x543)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x543)))+(x540));
evalcond[3]=((IkReal(0.0577500000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x537)))+(((IkReal(-1.00000000000000))*(x556)))+(x526)+(((x553)*(x554)))+(((sj0)*(sj1)*(x541))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x551)))+(((cj0)*(x533)))+(((sj1)*(x530))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(cj1)*(x530)))+(((IkReal(-1.00000000000000))*(x536)*(x549))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x558)))+(((IkReal(-1.00000000000000))*(x538)))+(((IkReal(-1.00000000000000))*(r02)*(x532)))+(((IkReal(-1.00000000000000))*(px)*(x549)))+(((IkReal(0.190000000000000))*(cj0)*(x533)))+(((x530)*(x545))));
evalcond[7]=((((sj0)*(x535)))+(((IkReal(-1.00000000000000))*(x532)*(x552)))+(((IkReal(-1.00000000000000))*(x530)*(x532)))+(((IkReal(-1.00000000000000))*(pz)*(x530)))+(((px)*(x557)))+(((IkReal(-1.00000000000000))*(r02)*(x545)))+(((IkReal(-1.00000000000000))*(cj0)*(pz)*(x549))));
evalcond[8]=((IkReal(-0.0938500000000000))+(((IkReal(-1.00000000000000))*(py)*(x531)*(x552)))+(((pp)*(x540)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x554)))+(((x539)*(x560)))+(((IkReal(-1.00000000000000))*(pz)*(x535)*(x547)))+(((IkReal(-1.00000000000000))*(cj1)*(x537)*(x548)))+(((IkReal(-1.00000000000000))*(x526)))+(((sj0)*(x551)*(x554)))+(((x533)*(x541)))+(((r01)*(x536)*(x537)))+(((IkReal(-0.380000000000000))*(x535)*(x536)))+(((py)*(x530)*(x531)))+(((IkReal(-0.0361000000000000))*(x548)))+(((IkReal(-1.00000000000000))*(x540)*(x562)))+(((IkReal(-1.00000000000000))*(x543)*(x544)))+(((r01)*(x534)))+(((sj0)*(x531)*(x538))));
evalcond[9]=((((r02)*(x537)))+(((pp)*(sj1)*(x530)))+(((x551)*(x563)))+(((IkReal(-1.00000000000000))*(x533)*(x534)))+(((IkReal(-1.00000000000000))*(x530)*(x546)))+(((IkReal(-1.00000000000000))*(x528)*(x533)*(x547)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x531)*(x533)))+(((IkReal(-1.00000000000000))*(x535)*(x539)*(x542)))+(((IkReal(-1.00000000000000))*(sj1)*(x530)*(x562)))+(((IkReal(-1.00000000000000))*(x551)*(x556)))+(((IkReal(0.0361000000000000))*(x551)))+(((pz)*(x531)*(x550)))+(((r00)*(x554)))+(((IkReal(-1.00000000000000))*(x531)*(x538)*(x553)))+(((x555)*(x561)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(x531)*(x540)))+(((cj0)*(pp)*(x533)))+(((r01)*(x541))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x536)*(x544)))+(((IkReal(-0.0361000000000000))*(cj1)*(x530)))+(((IkReal(-1.00000000000000))*(x530)*(x537)))+(((x535)*(x539)*(x555)))+(((cj1)*(x530)*(x562)))+(((IkReal(-1.00000000000000))*(x534)*(x550)))+(((x554)*(x557)))+(((x542)*(x561)))+(((IkReal(-1.00000000000000))*(r02)*(x546)))+(((IkReal(0.380000000000000))*(sj0)*(x535)))+(((IkReal(2.00000000000000))*(x536)*(x560)))+(((x531)*(x536)*(x558)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)*(x556)))+(((x531)*(x536)*(x538)))+(((r02)*(sj1)*(x563)))+(((cj1)*(py)*(x531)*(x548)))+(((IkReal(-1.00000000000000))*(cj1)*(x530)*(x556)))+(((pz)*(x531)*(x533)))+(((IkReal(-1.00000000000000))*(x537)*(x552))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((IkReal(-19321.0000000000))+(((IkReal(-74529.0000000000))*((cj3)*(cj3))))+(((IkReal(-74529.0000000000))*((sj3)*(sj3))))+(((IkReal(-75894.0000000000))*(cj3)))));
dummyeval[0]=((IkReal(-1.00000000000000))+(((IkReal(-3.92805755395683))*(cj3)))+(((IkReal(-3.85740903679934))*((sj3)*(sj3))))+(((IkReal(-3.85740903679934))*((cj3)*(cj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x564=((IkReal(139000.000000000))*(cj1));
IkReal x565=((py)*(sj0));
IkReal x566=((cj0)*(px));
IkReal x567=((IkReal(273000.000000000))*(cj3));
IkReal x568=((IkReal(139000.000000000))*(sj1));
IkReal x569=((IkReal(273000.000000000))*(cj1)*(sj3));
IkReal x570=((IkReal(273000.000000000))*(sj1)*(sj3));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x564)*(x565)))+(((IkReal(-1.00000000000000))*(x564)*(x566)))+(((IkReal(-1.00000000000000))*(x566)*(x570)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x567)))+(((IkReal(-1.00000000000000))*(pz)*(x568)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x565)*(x567)))+(((IkReal(-1.00000000000000))*(x565)*(x570)))+(((IkReal(-1.00000000000000))*(cj1)*(x566)*(x567)))+(((pz)*(x569))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((IkReal(26410.0000000000))+(((x566)*(x569)))+(((x565)*(x569)))+(((IkReal(-1.00000000000000))*(x566)*(x568)))+(((cj1)*(pz)*(x567)))+(((pz)*(x570)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x565)*(x567)))+(((pz)*(x564)))+(((IkReal(-1.00000000000000))*(sj1)*(x566)*(x567)))+(((IkReal(-1.00000000000000))*(x565)*(x568))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(x564)*(x565)))+(((IkReal(-1.00000000000000))*(x564)*(x566)))+(((IkReal(-1.00000000000000))*(x566)*(x570)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x567)))+(((IkReal(-1.00000000000000))*(pz)*(x568)))+(((IkReal(51870.0000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x565)*(x567)))+(((IkReal(-1.00000000000000))*(x565)*(x570)))+(((IkReal(-1.00000000000000))*(cj1)*(x566)*(x567)))+(((pz)*(x569)))))), ((gconst3)*(((IkReal(26410.0000000000))+(((x566)*(x569)))+(((x565)*(x569)))+(((IkReal(-1.00000000000000))*(x566)*(x568)))+(((cj1)*(pz)*(x567)))+(((pz)*(x570)))+(((IkReal(51870.0000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x565)*(x567)))+(((pz)*(x564)))+(((IkReal(-1.00000000000000))*(sj1)*(x566)*(x567)))+(((IkReal(-1.00000000000000))*(x565)*(x568)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x571=IKcos(j2);
IkReal x572=IKsin(j2);
IkReal x573=((px)*(sj1));
IkReal x574=((IkReal(0.273000000000000))*(cj3));
IkReal x575=((py)*(sj1));
IkReal x576=((IkReal(1.00000000000000))*(r00));
IkReal x577=((cj1)*(sj0));
IkReal x578=((IkReal(1.00000000000000))*(px));
IkReal x579=((IkReal(1.00000000000000))*(pz));
IkReal x580=((cj0)*(r01));
IkReal x581=((pz)*(sj1));
IkReal x582=((IkReal(0.273000000000000))*(sj3));
IkReal x583=((cj0)*(cj1));
IkReal x584=((IkReal(0.139000000000000))*(x572));
IkReal x585=((IkReal(0.139000000000000))*(x571));
IkReal x586=((x571)*(x582));
IkReal x587=((x572)*(x574));
IkReal x588=((x572)*(x582));
IkReal x589=((x571)*(x574));
IkReal x590=((x584)+(x587));
IkReal x591=((x585)+(x588)+(x589));
evalcond[0]=((IkReal(-0.190000000000000))+(((cj0)*(x573)))+(((IkReal(-1.00000000000000))*(cj1)*(x579)))+(((IkReal(-1.00000000000000))*(x591)))+(((sj0)*(x575))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x578)*(x583)))+(((IkReal(-1.00000000000000))*(sj1)*(x579)))+(((IkReal(-1.00000000000000))*(py)*(x577)))+(x590)+(((IkReal(-1.00000000000000))*(x586))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x576)*(x581)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x575)))+(((x580)*(x581)))+(((r02)*(sj0)*(x573)))+(((IkReal(-1.00000000000000))*(cj1)*(py)*(x576)))+(((IkReal(-1.00000000000000))*(x590)))+(x586)+(((cj1)*(px)*(r01))));
evalcond[3]=((((py)*(r02)*(x583)))+(((r01)*(x573)))+(((IkReal(-1.00000000000000))*(r02)*(x577)*(x578)))+(((IkReal(-1.00000000000000))*(x591)))+(((IkReal(-1.00000000000000))*(x575)*(x576)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj1)*(x579)*(x580)))+(((IkReal(-0.190000000000000))*(x580)))+(((pz)*(r00)*(x577))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x592=((IkReal(1.00000000000000))*(sj1));
IkReal x593=((cj1)*(sj3));
IkReal x594=((cj0)*(r00));
IkReal x595=((cj3)*(r02));
IkReal x596=((r01)*(sj0));
IkReal x597=((sj1)*(sj3));
IkReal x598=((cj3)*(x596));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj3)*(x592)*(x594)))+(((cj1)*(x595)))+(((IkReal(-1.00000000000000))*(x592)*(x598)))+(((r02)*(x597)))+(((x593)*(x596)))+(((x593)*(x594))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x594)*(x597)))+(((cj1)*(x598)))+(((cj1)*(cj3)*(x594)))+(((x596)*(x597)))+(((IkReal(-1.00000000000000))*(r02)*(x593)))+(((sj1)*(x595))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(cj3)*(x592)*(x594)))+(((cj1)*(x595)))+(((IkReal(-1.00000000000000))*(x592)*(x598)))+(((r02)*(x597)))+(((x593)*(x596)))+(((x593)*(x594)))))), ((gconst1)*(((((x594)*(x597)))+(((cj1)*(x598)))+(((cj1)*(cj3)*(x594)))+(((x596)*(x597)))+(((IkReal(-1.00000000000000))*(r02)*(x593)))+(((sj1)*(x595)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x599=IKcos(j2);
IkReal x600=IKsin(j2);
IkReal x601=(pz)*(pz);
IkReal x602=(py)*(py);
IkReal x603=(px)*(px);
IkReal x604=((px)*(sj1));
IkReal x605=((sj0)*(sj1));
IkReal x606=((IkReal(0.0552080000000000))*(sj3));
IkReal x607=((pp)*(r01));
IkReal x608=((cj1)*(sj0));
IkReal x609=((pz)*(r01));
IkReal x610=((IkReal(0.380000000000000))*(sj0));
IkReal x611=((IkReal(1.00000000000000))*(sj1));
IkReal x612=((py)*(r00));
IkReal x613=((pz)*(r02));
IkReal x614=((IkReal(2.00000000000000))*(cj0));
IkReal x615=((IkReal(2.00000000000000))*(py));
IkReal x616=((pz)*(r00));
IkReal x617=((pp)*(r02));
IkReal x618=((IkReal(1.00000000000000))*(cj1));
IkReal x619=((cj0)*(r00));
IkReal x620=((IkReal(0.0361000000000000))*(cj1));
IkReal x621=((py)*(r02));
IkReal x622=((IkReal(0.0361000000000000))*(r01));
IkReal x623=((IkReal(0.0361000000000000))*(sj1));
IkReal x624=((py)*(r01));
IkReal x625=((IkReal(2.00000000000000))*(px));
IkReal x626=((cj1)*(px));
IkReal x627=((IkReal(0.0938500000000000))*(cj3));
IkReal x628=((IkReal(0.380000000000000))*(cj0));
IkReal x629=((px)*(r02));
IkReal x630=((cj4)*(x600));
IkReal x631=((cj4)*(x599));
IkReal x632=((IkReal(0.273000000000000))*(sj3)*(sj4));
IkReal x633=((IkReal(0.139000000000000))*(x600));
IkReal x634=((IkReal(0.139000000000000))*(x599));
IkReal x635=((r00)*(x603));
IkReal x636=((IkReal(0.273000000000000))*(x599));
IkReal x637=((IkReal(0.273000000000000))*(cj3)*(x600));
IkReal x638=((x613)*(x615));
IkReal x639=((IkReal(2.00000000000000))*(r01)*(x602));
IkReal x640=((IkReal(2.00000000000000))*(r02)*(x601));
evalcond[0]=((((cj3)*(x630)))+(((sj1)*(x619)))+(((IkReal(-1.00000000000000))*(sj3)*(x631)))+(((r01)*(x605)))+(((IkReal(-1.00000000000000))*(r02)*(x618))));
evalcond[1]=((((cj3)*(x631)))+(((IkReal(-1.00000000000000))*(x618)*(x619)))+(((sj3)*(x630)))+(((IkReal(-1.00000000000000))*(r02)*(x611)))+(((IkReal(-1.00000000000000))*(r01)*(x608))));
evalcond[2]=((IkReal(-0.190000000000000))+(((IkReal(-1.00000000000000))*(x634)))+(((IkReal(-0.273000000000000))*(sj3)*(x600)))+(((IkReal(-1.00000000000000))*(pz)*(x618)))+(((py)*(x605)))+(((cj0)*(x604)))+(((IkReal(-1.00000000000000))*(cj3)*(x636))));
evalcond[3]=((((IkReal(-1.00000000000000))*(py)*(x608)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x618)))+(((IkReal(-1.00000000000000))*(pz)*(x611)))+(x637)+(x633)+(((IkReal(-1.00000000000000))*(sj3)*(x636))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x612)*(x618)))+(((IkReal(-1.00000000000000))*(x605)*(x616)))+(((sj4)*(x633)))+(((sj4)*(x637)))+(((IkReal(-1.00000000000000))*(cj0)*(x611)*(x621)))+(((r01)*(x626)))+(((cj0)*(sj1)*(x609)))+(((IkReal(-1.00000000000000))*(x599)*(x632)))+(((r02)*(sj0)*(x604))));
evalcond[5]=((((sj4)*(x634)))+(((x608)*(x616)))+(((IkReal(-1.00000000000000))*(x611)*(x612)))+(((cj3)*(sj4)*(x636)))+(((cj0)*(cj1)*(x621)))+(((IkReal(-0.190000000000000))*(cj0)*(r01)))+(((IkReal(-1.00000000000000))*(x608)*(x629)))+(((IkReal(0.190000000000000))*(r00)*(sj0)))+(((x600)*(x632)))+(((IkReal(-1.00000000000000))*(cj0)*(x609)*(x618)))+(((r01)*(x604))));
evalcond[6]=((((x605)*(x607)))+(((r02)*(x620)))+(((IkReal(-1.00000000000000))*(x605)*(x622)))+(((IkReal(-1.00000000000000))*(x605)*(x639)))+(((IkReal(-1.00000000000000))*(x605)*(x638)))+(((pp)*(sj1)*(x619)))+(((cj1)*(x616)*(x625)))+(((IkReal(0.380000000000000))*(x624)))+(((IkReal(0.0758940000000000))*(x630)))+(((IkReal(-1.00000000000000))*(x604)*(x614)*(x624)))+(((cj1)*(x640)))+(((IkReal(-1.00000000000000))*(x606)*(x631)))+(((IkReal(0.380000000000000))*(px)*(r00)))+(((IkReal(-1.00000000000000))*(x604)*(x613)*(x614)))+(((IkReal(-1.00000000000000))*(x617)*(x618)))+(((cj1)*(x609)*(x615)))+(((IkReal(0.380000000000000))*(x613)))+(((IkReal(-1.00000000000000))*(x619)*(x623)))+(((IkReal(-1.00000000000000))*(sj1)*(x614)*(x635)))+(((x627)*(x630)))+(((IkReal(-2.00000000000000))*(sj0)*(x604)*(x612))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x607)*(x608)))+(((IkReal(-1.00000000000000))*(x609)*(x610)))+(((IkReal(-1.00000000000000))*(x611)*(x617)))+(((x628)*(x629)))+(((sj1)*(x640)))+(((IkReal(-1.00000000000000))*(r02)*(x623)))+(((x614)*(x624)*(x626)))+(((IkReal(0.0758940000000000))*(x631)))+(((x613)*(x614)*(x626)))+(((cj1)*(x614)*(x635)))+(((x608)*(x612)*(x625)))+(((x608)*(x638)))+(((x608)*(x639)))+(((IkReal(-1.00000000000000))*(x619)*(x620)))+(((x610)*(x621)))+(((IkReal(-1.00000000000000))*(pp)*(x618)*(x619)))+(((IkReal(-1.00000000000000))*(x616)*(x628)))+(((x627)*(x631)))+(((sj1)*(x609)*(x615)))+(((x606)*(x630)))+(((IkReal(2.00000000000000))*(x604)*(x616)))+(((IkReal(-1.00000000000000))*(x608)*(x622))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "ab9d03903279e44bc692e896791bcd05"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "plugindefs.h" 
namespace IKFAST_NAMESPACE {
IkSolverBasePtr CreateIkSolver(EnvironmentBasePtr penv, std::istream& sinput, const std::vector<dReal>& vfreeinc) {
    boost::shared_ptr<ikfast::IkFastFunctions<IkReal> > ikfunctions(new ikfast::IkFastFunctions<IkReal>());
    ikfunctions->_ComputeIk = IKFAST_NAMESPACE::ComputeIk;
    ikfunctions->_ComputeFk = IKFAST_NAMESPACE::ComputeFk;
    ikfunctions->_GetNumFreeParameters = IKFAST_NAMESPACE::GetNumFreeParameters;
    ikfunctions->_GetFreeParameters = IKFAST_NAMESPACE::GetFreeParameters;
    ikfunctions->_GetNumJoints = IKFAST_NAMESPACE::GetNumJoints;
    ikfunctions->_GetIkRealSize = IKFAST_NAMESPACE::GetIkRealSize;
    ikfunctions->_GetIkFastVersion = IKFAST_NAMESPACE::GetIkFastVersion;
    ikfunctions->_GetIkType = IKFAST_NAMESPACE::GetIkType;
    ikfunctions->_GetKinematicsHash = IKFAST_NAMESPACE::GetKinematicsHash;
    return CreateIkFastSolver(penv,sinput,ikfunctions,vfreeinc);
}
} // end namespace
